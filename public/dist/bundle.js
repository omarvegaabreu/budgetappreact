!function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(r,a,function(t){return e[t]}.bind(null,a));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=374)}([function(e,t,n){"use strict";e.exports=n(251)},function(e,t,n){(function(e){e.exports=function(){"use strict";var t,r;function a(){return t.apply(null,arguments)}function o(e){return e instanceof Array||"[object Array]"===Object.prototype.toString.call(e)}function i(e){return null!=e&&"[object Object]"===Object.prototype.toString.call(e)}function s(e){return void 0===e}function u(e){return"number"==typeof e||"[object Number]"===Object.prototype.toString.call(e)}function l(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function d(e,t){var n,r=[];for(n=0;n<e.length;++n)r.push(t(e[n],n));return r}function c(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function f(e,t){for(var n in t)c(t,n)&&(e[n]=t[n]);return c(t,"toString")&&(e.toString=t.toString),c(t,"valueOf")&&(e.valueOf=t.valueOf),e}function h(e,t,n,r){return Lt(e,t,n,r,!0).utc()}function _(e){return null==e._pf&&(e._pf={empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],meridiem:null,rfc2822:!1,weekdayMismatch:!1}),e._pf}function m(e){if(null==e._isValid){var t=_(e),n=r.call(t.parsedDateParts,(function(e){return null!=e})),a=!isNaN(e._d.getTime())&&t.overflow<0&&!t.empty&&!t.invalidMonth&&!t.invalidWeekday&&!t.weekdayMismatch&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&n);if(e._strict&&(a=a&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour),null!=Object.isFrozen&&Object.isFrozen(e))return a;e._isValid=a}return e._isValid}function p(e){var t=h(NaN);return null!=e?f(_(t),e):_(t).userInvalidated=!0,t}r=Array.prototype.some?Array.prototype.some:function(e){for(var t=Object(this),n=t.length>>>0,r=0;r<n;r++)if(r in t&&e.call(this,t[r],r,t))return!0;return!1};var y=a.momentProperties=[];function v(e,t){var n,r,a;if(s(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),s(t._i)||(e._i=t._i),s(t._f)||(e._f=t._f),s(t._l)||(e._l=t._l),s(t._strict)||(e._strict=t._strict),s(t._tzm)||(e._tzm=t._tzm),s(t._isUTC)||(e._isUTC=t._isUTC),s(t._offset)||(e._offset=t._offset),s(t._pf)||(e._pf=_(t)),s(t._locale)||(e._locale=t._locale),y.length>0)for(n=0;n<y.length;n++)s(a=t[r=y[n]])||(e[r]=a);return e}var g=!1;function b(e){v(this,e),this._d=new Date(null!=e._d?e._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===g&&(g=!0,a.updateOffset(this),g=!1)}function M(e){return e instanceof b||null!=e&&null!=e._isAMomentObject}function D(e){return e<0?Math.ceil(e)||0:Math.floor(e)}function k(e){var t=+e,n=0;return 0!==t&&isFinite(t)&&(n=D(t)),n}function L(e,t,n){var r,a=Math.min(e.length,t.length),o=Math.abs(e.length-t.length),i=0;for(r=0;r<a;r++)(n&&e[r]!==t[r]||!n&&k(e[r])!==k(t[r]))&&i++;return i+o}function w(e){!1===a.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+e)}function T(e,t){var n=!0;return f((function(){if(null!=a.deprecationHandler&&a.deprecationHandler(null,e),n){for(var r,o=[],i=0;i<arguments.length;i++){if(r="","object"==typeof arguments[i]){for(var s in r+="\n["+i+"] ",arguments[0])r+=s+": "+arguments[0][s]+", ";r=r.slice(0,-2)}else r=arguments[i];o.push(r)}w(e+"\nArguments: "+Array.prototype.slice.call(o).join("")+"\n"+(new Error).stack),n=!1}return t.apply(this,arguments)}),t)}var S,Y={};function P(e,t){null!=a.deprecationHandler&&a.deprecationHandler(e,t),Y[e]||(w(t),Y[e]=!0)}function O(e){return e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function E(e,t){var n,r=f({},e);for(n in t)c(t,n)&&(i(e[n])&&i(t[n])?(r[n]={},f(r[n],e[n]),f(r[n],t[n])):null!=t[n]?r[n]=t[n]:delete r[n]);for(n in e)c(e,n)&&!c(t,n)&&i(e[n])&&(r[n]=f({},r[n]));return r}function x(e){null!=e&&this.set(e)}a.suppressDeprecationWarnings=!1,a.deprecationHandler=null,S=Object.keys?Object.keys:function(e){var t,n=[];for(t in e)c(e,t)&&n.push(t);return n};var C={};function j(e,t){var n=e.toLowerCase();C[n]=C[n+"s"]=C[t]=e}function H(e){return"string"==typeof e?C[e]||C[e.toLowerCase()]:void 0}function I(e){var t,n,r={};for(n in e)c(e,n)&&(t=H(n))&&(r[t]=e[n]);return r}var N={};function A(e,t){N[e]=t}function F(e,t,n){var r=""+Math.abs(e),a=t-r.length;return(e>=0?n?"+":"":"-")+Math.pow(10,Math.max(0,a)).toString().substr(1)+r}var R=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,W=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,z={},B={};function K(e,t,n,r){var a=r;"string"==typeof r&&(a=function(){return this[r]()}),e&&(B[e]=a),t&&(B[t[0]]=function(){return F(a.apply(this,arguments),t[1],t[2])}),n&&(B[n]=function(){return this.localeData().ordinal(a.apply(this,arguments),e)})}function U(e,t){return e.isValid()?(t=V(t,e.localeData()),z[t]=z[t]||function(e){var t,n,r,a=e.match(R);for(t=0,n=a.length;t<n;t++)B[a[t]]?a[t]=B[a[t]]:a[t]=(r=a[t]).match(/\[[\s\S]/)?r.replace(/^\[|\]$/g,""):r.replace(/\\/g,"");return function(t){var r,o="";for(r=0;r<n;r++)o+=O(a[r])?a[r].call(t,e):a[r];return o}}(t),z[t](e)):e.localeData().invalidDate()}function V(e,t){var n=5;function r(e){return t.longDateFormat(e)||e}for(W.lastIndex=0;n>=0&&W.test(e);)e=e.replace(W,r),W.lastIndex=0,n-=1;return e}var G=/\d/,J=/\d\d/,$=/\d{3}/,q=/\d{4}/,Q=/[+-]?\d{6}/,Z=/\d\d?/,X=/\d\d\d\d?/,ee=/\d\d\d\d\d\d?/,te=/\d{1,3}/,ne=/\d{1,4}/,re=/[+-]?\d{1,6}/,ae=/\d+/,oe=/[+-]?\d+/,ie=/Z|[+-]\d\d:?\d\d/gi,se=/Z|[+-]\d\d(?::?\d\d)?/gi,ue=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,le={};function de(e,t,n){le[e]=O(t)?t:function(e,r){return e&&n?n:t}}function ce(e,t){return c(le,e)?le[e](t._strict,t._locale):new RegExp(fe(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,(function(e,t,n,r,a){return t||n||r||a}))))}function fe(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}var he={};function _e(e,t){var n,r=t;for("string"==typeof e&&(e=[e]),u(t)&&(r=function(e,n){n[t]=k(e)}),n=0;n<e.length;n++)he[e[n]]=r}function me(e,t){_e(e,(function(e,n,r,a){r._w=r._w||{},t(e,r._w,r,a)}))}function pe(e,t,n){null!=t&&c(he,e)&&he[e](t,n._a,n,e)}function ye(e){return ve(e)?366:365}function ve(e){return e%4==0&&e%100!=0||e%400==0}K("Y",0,0,(function(){var e=this.year();return e<=9999?""+e:"+"+e})),K(0,["YY",2],0,(function(){return this.year()%100})),K(0,["YYYY",4],0,"year"),K(0,["YYYYY",5],0,"year"),K(0,["YYYYYY",6,!0],0,"year"),j("year","y"),A("year",1),de("Y",oe),de("YY",Z,J),de("YYYY",ne,q),de("YYYYY",re,Q),de("YYYYYY",re,Q),_e(["YYYYY","YYYYYY"],0),_e("YYYY",(function(e,t){t[0]=2===e.length?a.parseTwoDigitYear(e):k(e)})),_e("YY",(function(e,t){t[0]=a.parseTwoDigitYear(e)})),_e("Y",(function(e,t){t[0]=parseInt(e,10)})),a.parseTwoDigitYear=function(e){return k(e)+(k(e)>68?1900:2e3)};var ge,be=Me("FullYear",!0);function Me(e,t){return function(n){return null!=n?(ke(this,e,n),a.updateOffset(this,t),this):De(this,e)}}function De(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():NaN}function ke(e,t,n){e.isValid()&&!isNaN(n)&&("FullYear"===t&&ve(e.year())&&1===e.month()&&29===e.date()?e._d["set"+(e._isUTC?"UTC":"")+t](n,e.month(),Le(n,e.month())):e._d["set"+(e._isUTC?"UTC":"")+t](n))}function Le(e,t){if(isNaN(e)||isNaN(t))return NaN;var n,r=(t%(n=12)+n)%n;return e+=(t-r)/12,1===r?ve(e)?29:28:31-r%7%2}ge=Array.prototype.indexOf?Array.prototype.indexOf:function(e){var t;for(t=0;t<this.length;++t)if(this[t]===e)return t;return-1},K("M",["MM",2],"Mo",(function(){return this.month()+1})),K("MMM",0,0,(function(e){return this.localeData().monthsShort(this,e)})),K("MMMM",0,0,(function(e){return this.localeData().months(this,e)})),j("month","M"),A("month",8),de("M",Z),de("MM",Z,J),de("MMM",(function(e,t){return t.monthsShortRegex(e)})),de("MMMM",(function(e,t){return t.monthsRegex(e)})),_e(["M","MM"],(function(e,t){t[1]=k(e)-1})),_e(["MMM","MMMM"],(function(e,t,n,r){var a=n._locale.monthsParse(e,r,n._strict);null!=a?t[1]=a:_(n).invalidMonth=e}));var we=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,Te="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),Se="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_");function Ye(e,t,n){var r,a,o,i=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],r=0;r<12;++r)o=h([2e3,r]),this._shortMonthsParse[r]=this.monthsShort(o,"").toLocaleLowerCase(),this._longMonthsParse[r]=this.months(o,"").toLocaleLowerCase();return n?"MMM"===t?-1!==(a=ge.call(this._shortMonthsParse,i))?a:null:-1!==(a=ge.call(this._longMonthsParse,i))?a:null:"MMM"===t?-1!==(a=ge.call(this._shortMonthsParse,i))||-1!==(a=ge.call(this._longMonthsParse,i))?a:null:-1!==(a=ge.call(this._longMonthsParse,i))||-1!==(a=ge.call(this._shortMonthsParse,i))?a:null}function Pe(e,t){var n;if(!e.isValid())return e;if("string"==typeof t)if(/^\d+$/.test(t))t=k(t);else if(!u(t=e.localeData().monthsParse(t)))return e;return n=Math.min(e.date(),Le(e.year(),t)),e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,n),e}function Oe(e){return null!=e?(Pe(this,e),a.updateOffset(this,!0),this):De(this,"Month")}var Ee=ue,xe=ue;function Ce(){function e(e,t){return t.length-e.length}var t,n,r=[],a=[],o=[];for(t=0;t<12;t++)n=h([2e3,t]),r.push(this.monthsShort(n,"")),a.push(this.months(n,"")),o.push(this.months(n,"")),o.push(this.monthsShort(n,""));for(r.sort(e),a.sort(e),o.sort(e),t=0;t<12;t++)r[t]=fe(r[t]),a[t]=fe(a[t]);for(t=0;t<24;t++)o[t]=fe(o[t]);this._monthsRegex=new RegExp("^("+o.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+a.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+r.join("|")+")","i")}function je(e,t,n,r,a,o,i){var s;return e<100&&e>=0?(s=new Date(e+400,t,n,r,a,o,i),isFinite(s.getFullYear())&&s.setFullYear(e)):s=new Date(e,t,n,r,a,o,i),s}function He(e){var t;if(e<100&&e>=0){var n=Array.prototype.slice.call(arguments);n[0]=e+400,t=new Date(Date.UTC.apply(null,n)),isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e)}else t=new Date(Date.UTC.apply(null,arguments));return t}function Ie(e,t,n){var r=7+t-n;return-(7+He(e,0,r).getUTCDay()-t)%7+r-1}function Ne(e,t,n,r,a){var o,i,s=1+7*(t-1)+(7+n-r)%7+Ie(e,r,a);return s<=0?i=ye(o=e-1)+s:s>ye(e)?(o=e+1,i=s-ye(e)):(o=e,i=s),{year:o,dayOfYear:i}}function Ae(e,t,n){var r,a,o=Ie(e.year(),t,n),i=Math.floor((e.dayOfYear()-o-1)/7)+1;return i<1?r=i+Fe(a=e.year()-1,t,n):i>Fe(e.year(),t,n)?(r=i-Fe(e.year(),t,n),a=e.year()+1):(a=e.year(),r=i),{week:r,year:a}}function Fe(e,t,n){var r=Ie(e,t,n),a=Ie(e+1,t,n);return(ye(e)-r+a)/7}function Re(e,t){return e.slice(t,7).concat(e.slice(0,t))}K("w",["ww",2],"wo","week"),K("W",["WW",2],"Wo","isoWeek"),j("week","w"),j("isoWeek","W"),A("week",5),A("isoWeek",5),de("w",Z),de("ww",Z,J),de("W",Z),de("WW",Z,J),me(["w","ww","W","WW"],(function(e,t,n,r){t[r.substr(0,1)]=k(e)})),K("d",0,"do","day"),K("dd",0,0,(function(e){return this.localeData().weekdaysMin(this,e)})),K("ddd",0,0,(function(e){return this.localeData().weekdaysShort(this,e)})),K("dddd",0,0,(function(e){return this.localeData().weekdays(this,e)})),K("e",0,0,"weekday"),K("E",0,0,"isoWeekday"),j("day","d"),j("weekday","e"),j("isoWeekday","E"),A("day",11),A("weekday",11),A("isoWeekday",11),de("d",Z),de("e",Z),de("E",Z),de("dd",(function(e,t){return t.weekdaysMinRegex(e)})),de("ddd",(function(e,t){return t.weekdaysShortRegex(e)})),de("dddd",(function(e,t){return t.weekdaysRegex(e)})),me(["dd","ddd","dddd"],(function(e,t,n,r){var a=n._locale.weekdaysParse(e,r,n._strict);null!=a?t.d=a:_(n).invalidWeekday=e})),me(["d","e","E"],(function(e,t,n,r){t[r]=k(e)}));var We="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),ze="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),Be="Su_Mo_Tu_We_Th_Fr_Sa".split("_");function Ke(e,t,n){var r,a,o,i=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],r=0;r<7;++r)o=h([2e3,1]).day(r),this._minWeekdaysParse[r]=this.weekdaysMin(o,"").toLocaleLowerCase(),this._shortWeekdaysParse[r]=this.weekdaysShort(o,"").toLocaleLowerCase(),this._weekdaysParse[r]=this.weekdays(o,"").toLocaleLowerCase();return n?"dddd"===t?-1!==(a=ge.call(this._weekdaysParse,i))?a:null:"ddd"===t?-1!==(a=ge.call(this._shortWeekdaysParse,i))?a:null:-1!==(a=ge.call(this._minWeekdaysParse,i))?a:null:"dddd"===t?-1!==(a=ge.call(this._weekdaysParse,i))||-1!==(a=ge.call(this._shortWeekdaysParse,i))||-1!==(a=ge.call(this._minWeekdaysParse,i))?a:null:"ddd"===t?-1!==(a=ge.call(this._shortWeekdaysParse,i))||-1!==(a=ge.call(this._weekdaysParse,i))||-1!==(a=ge.call(this._minWeekdaysParse,i))?a:null:-1!==(a=ge.call(this._minWeekdaysParse,i))||-1!==(a=ge.call(this._weekdaysParse,i))||-1!==(a=ge.call(this._shortWeekdaysParse,i))?a:null}var Ue=ue,Ve=ue,Ge=ue;function Je(){function e(e,t){return t.length-e.length}var t,n,r,a,o,i=[],s=[],u=[],l=[];for(t=0;t<7;t++)n=h([2e3,1]).day(t),r=this.weekdaysMin(n,""),a=this.weekdaysShort(n,""),o=this.weekdays(n,""),i.push(r),s.push(a),u.push(o),l.push(r),l.push(a),l.push(o);for(i.sort(e),s.sort(e),u.sort(e),l.sort(e),t=0;t<7;t++)s[t]=fe(s[t]),u[t]=fe(u[t]),l[t]=fe(l[t]);this._weekdaysRegex=new RegExp("^("+l.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+u.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+s.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+i.join("|")+")","i")}function $e(){return this.hours()%12||12}function qe(e,t){K(e,0,0,(function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)}))}function Qe(e,t){return t._meridiemParse}K("H",["HH",2],0,"hour"),K("h",["hh",2],0,$e),K("k",["kk",2],0,(function(){return this.hours()||24})),K("hmm",0,0,(function(){return""+$e.apply(this)+F(this.minutes(),2)})),K("hmmss",0,0,(function(){return""+$e.apply(this)+F(this.minutes(),2)+F(this.seconds(),2)})),K("Hmm",0,0,(function(){return""+this.hours()+F(this.minutes(),2)})),K("Hmmss",0,0,(function(){return""+this.hours()+F(this.minutes(),2)+F(this.seconds(),2)})),qe("a",!0),qe("A",!1),j("hour","h"),A("hour",13),de("a",Qe),de("A",Qe),de("H",Z),de("h",Z),de("k",Z),de("HH",Z,J),de("hh",Z,J),de("kk",Z,J),de("hmm",X),de("hmmss",ee),de("Hmm",X),de("Hmmss",ee),_e(["H","HH"],3),_e(["k","kk"],(function(e,t,n){var r=k(e);t[3]=24===r?0:r})),_e(["a","A"],(function(e,t,n){n._isPm=n._locale.isPM(e),n._meridiem=e})),_e(["h","hh"],(function(e,t,n){t[3]=k(e),_(n).bigHour=!0})),_e("hmm",(function(e,t,n){var r=e.length-2;t[3]=k(e.substr(0,r)),t[4]=k(e.substr(r)),_(n).bigHour=!0})),_e("hmmss",(function(e,t,n){var r=e.length-4,a=e.length-2;t[3]=k(e.substr(0,r)),t[4]=k(e.substr(r,2)),t[5]=k(e.substr(a)),_(n).bigHour=!0})),_e("Hmm",(function(e,t,n){var r=e.length-2;t[3]=k(e.substr(0,r)),t[4]=k(e.substr(r))})),_e("Hmmss",(function(e,t,n){var r=e.length-4,a=e.length-2;t[3]=k(e.substr(0,r)),t[4]=k(e.substr(r,2)),t[5]=k(e.substr(a))}));var Ze,Xe=Me("Hours",!0),et={calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},longDateFormat:{LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},invalidDate:"Invalid date",ordinal:"%d",dayOfMonthOrdinalParse:/\d{1,2}/,relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},months:Te,monthsShort:Se,week:{dow:0,doy:6},weekdays:We,weekdaysMin:Be,weekdaysShort:ze,meridiemParse:/[ap]\.?m?\.?/i},tt={},nt={};function rt(e){return e?e.toLowerCase().replace("_","-"):e}function at(t){var r=null;if(!tt[t]&&void 0!==e&&e&&e.exports)try{r=Ze._abbr,n(261)("./"+t),ot(r)}catch(e){}return tt[t]}function ot(e,t){var n;return e&&((n=s(t)?st(e):it(e,t))?Ze=n:"undefined"!=typeof console&&console.warn&&console.warn("Locale "+e+" not found. Did you forget to load it?")),Ze._abbr}function it(e,t){if(null!==t){var n,r=et;if(t.abbr=e,null!=tt[e])P("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),r=tt[e]._config;else if(null!=t.parentLocale)if(null!=tt[t.parentLocale])r=tt[t.parentLocale]._config;else{if(null==(n=at(t.parentLocale)))return nt[t.parentLocale]||(nt[t.parentLocale]=[]),nt[t.parentLocale].push({name:e,config:t}),null;r=n._config}return tt[e]=new x(E(r,t)),nt[e]&&nt[e].forEach((function(e){it(e.name,e.config)})),ot(e),tt[e]}return delete tt[e],null}function st(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return Ze;if(!o(e)){if(t=at(e))return t;e=[e]}return function(e){for(var t,n,r,a,o=0;o<e.length;){for(t=(a=rt(e[o]).split("-")).length,n=(n=rt(e[o+1]))?n.split("-"):null;t>0;){if(r=at(a.slice(0,t).join("-")))return r;if(n&&n.length>=t&&L(a,n,!0)>=t-1)break;t--}o++}return Ze}(e)}function ut(e){var t,n=e._a;return n&&-2===_(e).overflow&&(t=n[1]<0||n[1]>11?1:n[2]<1||n[2]>Le(n[0],n[1])?2:n[3]<0||n[3]>24||24===n[3]&&(0!==n[4]||0!==n[5]||0!==n[6])?3:n[4]<0||n[4]>59?4:n[5]<0||n[5]>59?5:n[6]<0||n[6]>999?6:-1,_(e)._overflowDayOfYear&&(t<0||t>2)&&(t=2),_(e)._overflowWeeks&&-1===t&&(t=7),_(e)._overflowWeekday&&-1===t&&(t=8),_(e).overflow=t),e}function lt(e,t,n){return null!=e?e:null!=t?t:n}function dt(e){var t,n,r,o,i,s=[];if(!e._d){for(r=function(e){var t=new Date(a.now());return e._useUTC?[t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()]:[t.getFullYear(),t.getMonth(),t.getDate()]}(e),e._w&&null==e._a[2]&&null==e._a[1]&&function(e){var t,n,r,a,o,i,s,u;if(null!=(t=e._w).GG||null!=t.W||null!=t.E)o=1,i=4,n=lt(t.GG,e._a[0],Ae(wt(),1,4).year),r=lt(t.W,1),((a=lt(t.E,1))<1||a>7)&&(u=!0);else{o=e._locale._week.dow,i=e._locale._week.doy;var l=Ae(wt(),o,i);n=lt(t.gg,e._a[0],l.year),r=lt(t.w,l.week),null!=t.d?((a=t.d)<0||a>6)&&(u=!0):null!=t.e?(a=t.e+o,(t.e<0||t.e>6)&&(u=!0)):a=o}r<1||r>Fe(n,o,i)?_(e)._overflowWeeks=!0:null!=u?_(e)._overflowWeekday=!0:(s=Ne(n,r,a,o,i),e._a[0]=s.year,e._dayOfYear=s.dayOfYear)}(e),null!=e._dayOfYear&&(i=lt(e._a[0],r[0]),(e._dayOfYear>ye(i)||0===e._dayOfYear)&&(_(e)._overflowDayOfYear=!0),n=He(i,0,e._dayOfYear),e._a[1]=n.getUTCMonth(),e._a[2]=n.getUTCDate()),t=0;t<3&&null==e._a[t];++t)e._a[t]=s[t]=r[t];for(;t<7;t++)e._a[t]=s[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[3]&&0===e._a[4]&&0===e._a[5]&&0===e._a[6]&&(e._nextDay=!0,e._a[3]=0),e._d=(e._useUTC?He:je).apply(null,s),o=e._useUTC?e._d.getUTCDay():e._d.getDay(),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[3]=24),e._w&&void 0!==e._w.d&&e._w.d!==o&&(_(e).weekdayMismatch=!0)}}var ct=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,ft=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,ht=/Z|[+-]\d\d(?::?\d\d)?/,_t=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],mt=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],pt=/^\/?Date\((\-?\d+)/i;function yt(e){var t,n,r,a,o,i,s=e._i,u=ct.exec(s)||ft.exec(s);if(u){for(_(e).iso=!0,t=0,n=_t.length;t<n;t++)if(_t[t][1].exec(u[1])){a=_t[t][0],r=!1!==_t[t][2];break}if(null==a)return void(e._isValid=!1);if(u[3]){for(t=0,n=mt.length;t<n;t++)if(mt[t][1].exec(u[3])){o=(u[2]||" ")+mt[t][0];break}if(null==o)return void(e._isValid=!1)}if(!r&&null!=o)return void(e._isValid=!1);if(u[4]){if(!ht.exec(u[4]))return void(e._isValid=!1);i="Z"}e._f=a+(o||"")+(i||""),Dt(e)}else e._isValid=!1}var vt=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;function gt(e){var t=parseInt(e,10);return t<=49?2e3+t:t<=999?1900+t:t}var bt={UT:0,GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function Mt(e){var t,n,r,a,o,i,s,u=vt.exec(e._i.replace(/\([^)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s\s*/,"").replace(/\s\s*$/,""));if(u){var l=(t=u[4],n=u[3],r=u[2],a=u[5],o=u[6],i=u[7],s=[gt(t),Se.indexOf(n),parseInt(r,10),parseInt(a,10),parseInt(o,10)],i&&s.push(parseInt(i,10)),s);if(!function(e,t,n){return!e||ze.indexOf(e)===new Date(t[0],t[1],t[2]).getDay()||(_(n).weekdayMismatch=!0,n._isValid=!1,!1)}(u[1],l,e))return;e._a=l,e._tzm=function(e,t,n){if(e)return bt[e];if(t)return 0;var r=parseInt(n,10),a=r%100;return(r-a)/100*60+a}(u[8],u[9],u[10]),e._d=He.apply(null,e._a),e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),_(e).rfc2822=!0}else e._isValid=!1}function Dt(e){if(e._f!==a.ISO_8601)if(e._f!==a.RFC_2822){e._a=[],_(e).empty=!0;var t,n,r,o,i,s=""+e._i,u=s.length,l=0;for(r=V(e._f,e._locale).match(R)||[],t=0;t<r.length;t++)o=r[t],(n=(s.match(ce(o,e))||[])[0])&&((i=s.substr(0,s.indexOf(n))).length>0&&_(e).unusedInput.push(i),s=s.slice(s.indexOf(n)+n.length),l+=n.length),B[o]?(n?_(e).empty=!1:_(e).unusedTokens.push(o),pe(o,n,e)):e._strict&&!n&&_(e).unusedTokens.push(o);_(e).charsLeftOver=u-l,s.length>0&&_(e).unusedInput.push(s),e._a[3]<=12&&!0===_(e).bigHour&&e._a[3]>0&&(_(e).bigHour=void 0),_(e).parsedDateParts=e._a.slice(0),_(e).meridiem=e._meridiem,e._a[3]=function(e,t,n){var r;return null==n?t:null!=e.meridiemHour?e.meridiemHour(t,n):null!=e.isPM?((r=e.isPM(n))&&t<12&&(t+=12),r||12!==t||(t=0),t):t}(e._locale,e._a[3],e._meridiem),dt(e),ut(e)}else Mt(e);else yt(e)}function kt(e){var t=e._i,n=e._f;return e._locale=e._locale||st(e._l),null===t||void 0===n&&""===t?p({nullInput:!0}):("string"==typeof t&&(e._i=t=e._locale.preparse(t)),M(t)?new b(ut(t)):(l(t)?e._d=t:o(n)?function(e){var t,n,r,a,o;if(0===e._f.length)return _(e).invalidFormat=!0,void(e._d=new Date(NaN));for(a=0;a<e._f.length;a++)o=0,t=v({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[a],Dt(t),m(t)&&(o+=_(t).charsLeftOver,o+=10*_(t).unusedTokens.length,_(t).score=o,(null==r||o<r)&&(r=o,n=t));f(e,n||t)}(e):n?Dt(e):function(e){var t=e._i;s(t)?e._d=new Date(a.now()):l(t)?e._d=new Date(t.valueOf()):"string"==typeof t?function(e){var t=pt.exec(e._i);null===t?(yt(e),!1===e._isValid&&(delete e._isValid,Mt(e),!1===e._isValid&&(delete e._isValid,a.createFromInputFallback(e)))):e._d=new Date(+t[1])}(e):o(t)?(e._a=d(t.slice(0),(function(e){return parseInt(e,10)})),dt(e)):i(t)?function(e){if(!e._d){var t=I(e._i);e._a=d([t.year,t.month,t.day||t.date,t.hour,t.minute,t.second,t.millisecond],(function(e){return e&&parseInt(e,10)})),dt(e)}}(e):u(t)?e._d=new Date(t):a.createFromInputFallback(e)}(e),m(e)||(e._d=null),e))}function Lt(e,t,n,r,a){var s,u={};return!0!==n&&!1!==n||(r=n,n=void 0),(i(e)&&function(e){if(Object.getOwnPropertyNames)return 0===Object.getOwnPropertyNames(e).length;var t;for(t in e)if(e.hasOwnProperty(t))return!1;return!0}(e)||o(e)&&0===e.length)&&(e=void 0),u._isAMomentObject=!0,u._useUTC=u._isUTC=a,u._l=n,u._i=e,u._f=t,u._strict=r,(s=new b(ut(kt(u))))._nextDay&&(s.add(1,"d"),s._nextDay=void 0),s}function wt(e,t,n,r){return Lt(e,t,n,r,!1)}a.createFromInputFallback=T("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",(function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))})),a.ISO_8601=function(){},a.RFC_2822=function(){};var Tt=T("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",(function(){var e=wt.apply(null,arguments);return this.isValid()&&e.isValid()?e<this?this:e:p()})),St=T("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",(function(){var e=wt.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:p()}));function Yt(e,t){var n,r;if(1===t.length&&o(t[0])&&(t=t[0]),!t.length)return wt();for(n=t[0],r=1;r<t.length;++r)t[r].isValid()&&!t[r][e](n)||(n=t[r]);return n}var Pt=["year","quarter","month","week","day","hour","minute","second","millisecond"];function Ot(e){var t=I(e),n=t.year||0,r=t.quarter||0,a=t.month||0,o=t.week||t.isoWeek||0,i=t.day||0,s=t.hour||0,u=t.minute||0,l=t.second||0,d=t.millisecond||0;this._isValid=function(e){for(var t in e)if(-1===ge.call(Pt,t)||null!=e[t]&&isNaN(e[t]))return!1;for(var n=!1,r=0;r<Pt.length;++r)if(e[Pt[r]]){if(n)return!1;parseFloat(e[Pt[r]])!==k(e[Pt[r]])&&(n=!0)}return!0}(t),this._milliseconds=+d+1e3*l+6e4*u+1e3*s*60*60,this._days=+i+7*o,this._months=+a+3*r+12*n,this._data={},this._locale=st(),this._bubble()}function Et(e){return e instanceof Ot}function xt(e){return e<0?-1*Math.round(-1*e):Math.round(e)}function Ct(e,t){K(e,0,0,(function(){var e=this.utcOffset(),n="+";return e<0&&(e=-e,n="-"),n+F(~~(e/60),2)+t+F(~~e%60,2)}))}Ct("Z",":"),Ct("ZZ",""),de("Z",se),de("ZZ",se),_e(["Z","ZZ"],(function(e,t,n){n._useUTC=!0,n._tzm=Ht(se,e)}));var jt=/([\+\-]|\d\d)/gi;function Ht(e,t){var n=(t||"").match(e);if(null===n)return null;var r=((n[n.length-1]||[])+"").match(jt)||["-",0,0],a=60*r[1]+k(r[2]);return 0===a?0:"+"===r[0]?a:-a}function It(e,t){var n,r;return t._isUTC?(n=t.clone(),r=(M(e)||l(e)?e.valueOf():wt(e).valueOf())-n.valueOf(),n._d.setTime(n._d.valueOf()+r),a.updateOffset(n,!1),n):wt(e).local()}function Nt(e){return 15*-Math.round(e._d.getTimezoneOffset()/15)}function At(){return!!this.isValid()&&this._isUTC&&0===this._offset}a.updateOffset=function(){};var Ft=/^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/,Rt=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function Wt(e,t){var n,r,a,o,i,s,l=e,d=null;return Et(e)?l={ms:e._milliseconds,d:e._days,M:e._months}:u(e)?(l={},t?l[t]=e:l.milliseconds=e):(d=Ft.exec(e))?(n="-"===d[1]?-1:1,l={y:0,d:k(d[2])*n,h:k(d[3])*n,m:k(d[4])*n,s:k(d[5])*n,ms:k(xt(1e3*d[6]))*n}):(d=Rt.exec(e))?(n="-"===d[1]?-1:1,l={y:zt(d[2],n),M:zt(d[3],n),w:zt(d[4],n),d:zt(d[5],n),h:zt(d[6],n),m:zt(d[7],n),s:zt(d[8],n)}):null==l?l={}:"object"==typeof l&&("from"in l||"to"in l)&&(o=wt(l.from),i=wt(l.to),a=o.isValid()&&i.isValid()?(i=It(i,o),o.isBefore(i)?s=Bt(o,i):((s=Bt(i,o)).milliseconds=-s.milliseconds,s.months=-s.months),s):{milliseconds:0,months:0},(l={}).ms=a.milliseconds,l.M=a.months),r=new Ot(l),Et(e)&&c(e,"_locale")&&(r._locale=e._locale),r}function zt(e,t){var n=e&&parseFloat(e.replace(",","."));return(isNaN(n)?0:n)*t}function Bt(e,t){var n={};return n.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(n.months,"M").isAfter(t)&&--n.months,n.milliseconds=+t-+e.clone().add(n.months,"M"),n}function Kt(e,t){return function(n,r){var a;return null===r||isNaN(+r)||(P(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),a=n,n=r,r=a),Ut(this,Wt(n="string"==typeof n?+n:n,r),e),this}}function Ut(e,t,n,r){var o=t._milliseconds,i=xt(t._days),s=xt(t._months);e.isValid()&&(r=null==r||r,s&&Pe(e,De(e,"Month")+s*n),i&&ke(e,"Date",De(e,"Date")+i*n),o&&e._d.setTime(e._d.valueOf()+o*n),r&&a.updateOffset(e,i||s))}Wt.fn=Ot.prototype,Wt.invalid=function(){return Wt(NaN)};var Vt=Kt(1,"add"),Gt=Kt(-1,"subtract");function Jt(e,t){var n=12*(t.year()-e.year())+(t.month()-e.month()),r=e.clone().add(n,"months");return-(n+(t-r<0?(t-r)/(r-e.clone().add(n-1,"months")):(t-r)/(e.clone().add(n+1,"months")-r)))||0}function $t(e){var t;return void 0===e?this._locale._abbr:(null!=(t=st(e))&&(this._locale=t),this)}a.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",a.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var qt=T("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",(function(e){return void 0===e?this.localeData():this.locale(e)}));function Qt(){return this._locale}function Zt(e,t){return(e%t+t)%t}function Xt(e,t,n){return e<100&&e>=0?new Date(e+400,t,n)-126227808e5:new Date(e,t,n).valueOf()}function en(e,t,n){return e<100&&e>=0?Date.UTC(e+400,t,n)-126227808e5:Date.UTC(e,t,n)}function tn(e,t){K(0,[e,e.length],0,t)}function nn(e,t,n,r,a){var o;return null==e?Ae(this,r,a).year:(t>(o=Fe(e,r,a))&&(t=o),rn.call(this,e,t,n,r,a))}function rn(e,t,n,r,a){var o=Ne(e,t,n,r,a),i=He(o.year,0,o.dayOfYear);return this.year(i.getUTCFullYear()),this.month(i.getUTCMonth()),this.date(i.getUTCDate()),this}K(0,["gg",2],0,(function(){return this.weekYear()%100})),K(0,["GG",2],0,(function(){return this.isoWeekYear()%100})),tn("gggg","weekYear"),tn("ggggg","weekYear"),tn("GGGG","isoWeekYear"),tn("GGGGG","isoWeekYear"),j("weekYear","gg"),j("isoWeekYear","GG"),A("weekYear",1),A("isoWeekYear",1),de("G",oe),de("g",oe),de("GG",Z,J),de("gg",Z,J),de("GGGG",ne,q),de("gggg",ne,q),de("GGGGG",re,Q),de("ggggg",re,Q),me(["gggg","ggggg","GGGG","GGGGG"],(function(e,t,n,r){t[r.substr(0,2)]=k(e)})),me(["gg","GG"],(function(e,t,n,r){t[r]=a.parseTwoDigitYear(e)})),K("Q",0,"Qo","quarter"),j("quarter","Q"),A("quarter",7),de("Q",G),_e("Q",(function(e,t){t[1]=3*(k(e)-1)})),K("D",["DD",2],"Do","date"),j("date","D"),A("date",9),de("D",Z),de("DD",Z,J),de("Do",(function(e,t){return e?t._dayOfMonthOrdinalParse||t._ordinalParse:t._dayOfMonthOrdinalParseLenient})),_e(["D","DD"],2),_e("Do",(function(e,t){t[2]=k(e.match(Z)[0])}));var an=Me("Date",!0);K("DDD",["DDDD",3],"DDDo","dayOfYear"),j("dayOfYear","DDD"),A("dayOfYear",4),de("DDD",te),de("DDDD",$),_e(["DDD","DDDD"],(function(e,t,n){n._dayOfYear=k(e)})),K("m",["mm",2],0,"minute"),j("minute","m"),A("minute",14),de("m",Z),de("mm",Z,J),_e(["m","mm"],4);var on=Me("Minutes",!1);K("s",["ss",2],0,"second"),j("second","s"),A("second",15),de("s",Z),de("ss",Z,J),_e(["s","ss"],5);var sn,un=Me("Seconds",!1);for(K("S",0,0,(function(){return~~(this.millisecond()/100)})),K(0,["SS",2],0,(function(){return~~(this.millisecond()/10)})),K(0,["SSS",3],0,"millisecond"),K(0,["SSSS",4],0,(function(){return 10*this.millisecond()})),K(0,["SSSSS",5],0,(function(){return 100*this.millisecond()})),K(0,["SSSSSS",6],0,(function(){return 1e3*this.millisecond()})),K(0,["SSSSSSS",7],0,(function(){return 1e4*this.millisecond()})),K(0,["SSSSSSSS",8],0,(function(){return 1e5*this.millisecond()})),K(0,["SSSSSSSSS",9],0,(function(){return 1e6*this.millisecond()})),j("millisecond","ms"),A("millisecond",16),de("S",te,G),de("SS",te,J),de("SSS",te,$),sn="SSSS";sn.length<=9;sn+="S")de(sn,ae);function ln(e,t){t[6]=k(1e3*("0."+e))}for(sn="S";sn.length<=9;sn+="S")_e(sn,ln);var dn=Me("Milliseconds",!1);K("z",0,0,"zoneAbbr"),K("zz",0,0,"zoneName");var cn=b.prototype;function fn(e){return e}cn.add=Vt,cn.calendar=function(e,t){var n=e||wt(),r=It(n,this).startOf("day"),o=a.calendarFormat(this,r)||"sameElse",i=t&&(O(t[o])?t[o].call(this,n):t[o]);return this.format(i||this.localeData().calendar(o,this,wt(n)))},cn.clone=function(){return new b(this)},cn.diff=function(e,t,n){var r,a,o;if(!this.isValid())return NaN;if(!(r=It(e,this)).isValid())return NaN;switch(a=6e4*(r.utcOffset()-this.utcOffset()),t=H(t)){case"year":o=Jt(this,r)/12;break;case"month":o=Jt(this,r);break;case"quarter":o=Jt(this,r)/3;break;case"second":o=(this-r)/1e3;break;case"minute":o=(this-r)/6e4;break;case"hour":o=(this-r)/36e5;break;case"day":o=(this-r-a)/864e5;break;case"week":o=(this-r-a)/6048e5;break;default:o=this-r}return n?o:D(o)},cn.endOf=function(e){var t;if(void 0===(e=H(e))||"millisecond"===e||!this.isValid())return this;var n=this._isUTC?en:Xt;switch(e){case"year":t=n(this.year()+1,0,1)-1;break;case"quarter":t=n(this.year(),this.month()-this.month()%3+3,1)-1;break;case"month":t=n(this.year(),this.month()+1,1)-1;break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday()+7)-1;break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1)+7)-1;break;case"day":case"date":t=n(this.year(),this.month(),this.date()+1)-1;break;case"hour":t=this._d.valueOf(),t+=36e5-Zt(t+(this._isUTC?0:6e4*this.utcOffset()),36e5)-1;break;case"minute":t=this._d.valueOf(),t+=6e4-Zt(t,6e4)-1;break;case"second":t=this._d.valueOf(),t+=1e3-Zt(t,1e3)-1}return this._d.setTime(t),a.updateOffset(this,!0),this},cn.format=function(e){e||(e=this.isUtc()?a.defaultFormatUtc:a.defaultFormat);var t=U(this,e);return this.localeData().postformat(t)},cn.from=function(e,t){return this.isValid()&&(M(e)&&e.isValid()||wt(e).isValid())?Wt({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},cn.fromNow=function(e){return this.from(wt(),e)},cn.to=function(e,t){return this.isValid()&&(M(e)&&e.isValid()||wt(e).isValid())?Wt({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},cn.toNow=function(e){return this.to(wt(),e)},cn.get=function(e){return O(this[e=H(e)])?this[e]():this},cn.invalidAt=function(){return _(this).overflow},cn.isAfter=function(e,t){var n=M(e)?e:wt(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=H(t)||"millisecond")?this.valueOf()>n.valueOf():n.valueOf()<this.clone().startOf(t).valueOf())},cn.isBefore=function(e,t){var n=M(e)?e:wt(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=H(t)||"millisecond")?this.valueOf()<n.valueOf():this.clone().endOf(t).valueOf()<n.valueOf())},cn.isBetween=function(e,t,n,r){var a=M(e)?e:wt(e),o=M(t)?t:wt(t);return!!(this.isValid()&&a.isValid()&&o.isValid())&&("("===(r=r||"()")[0]?this.isAfter(a,n):!this.isBefore(a,n))&&(")"===r[1]?this.isBefore(o,n):!this.isAfter(o,n))},cn.isSame=function(e,t){var n,r=M(e)?e:wt(e);return!(!this.isValid()||!r.isValid())&&("millisecond"===(t=H(t)||"millisecond")?this.valueOf()===r.valueOf():(n=r.valueOf(),this.clone().startOf(t).valueOf()<=n&&n<=this.clone().endOf(t).valueOf()))},cn.isSameOrAfter=function(e,t){return this.isSame(e,t)||this.isAfter(e,t)},cn.isSameOrBefore=function(e,t){return this.isSame(e,t)||this.isBefore(e,t)},cn.isValid=function(){return m(this)},cn.lang=qt,cn.locale=$t,cn.localeData=Qt,cn.max=St,cn.min=Tt,cn.parsingFlags=function(){return f({},_(this))},cn.set=function(e,t){if("object"==typeof e)for(var n=function(e){var t=[];for(var n in e)t.push({unit:n,priority:N[n]});return t.sort((function(e,t){return e.priority-t.priority})),t}(e=I(e)),r=0;r<n.length;r++)this[n[r].unit](e[n[r].unit]);else if(O(this[e=H(e)]))return this[e](t);return this},cn.startOf=function(e){var t;if(void 0===(e=H(e))||"millisecond"===e||!this.isValid())return this;var n=this._isUTC?en:Xt;switch(e){case"year":t=n(this.year(),0,1);break;case"quarter":t=n(this.year(),this.month()-this.month()%3,1);break;case"month":t=n(this.year(),this.month(),1);break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday());break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1));break;case"day":case"date":t=n(this.year(),this.month(),this.date());break;case"hour":t=this._d.valueOf(),t-=Zt(t+(this._isUTC?0:6e4*this.utcOffset()),36e5);break;case"minute":t=this._d.valueOf(),t-=Zt(t,6e4);break;case"second":t=this._d.valueOf(),t-=Zt(t,1e3)}return this._d.setTime(t),a.updateOffset(this,!0),this},cn.subtract=Gt,cn.toArray=function(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]},cn.toObject=function(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}},cn.toDate=function(){return new Date(this.valueOf())},cn.toISOString=function(e){if(!this.isValid())return null;var t=!0!==e,n=t?this.clone().utc():this;return n.year()<0||n.year()>9999?U(n,t?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"):O(Date.prototype.toISOString)?t?this.toDate().toISOString():new Date(this.valueOf()+60*this.utcOffset()*1e3).toISOString().replace("Z",U(n,"Z")):U(n,t?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")},cn.inspect=function(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var e="moment",t="";this.isLocal()||(e=0===this.utcOffset()?"moment.utc":"moment.parseZone",t="Z");var n="["+e+'("]',r=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY",a=t+'[")]';return this.format(n+r+"-MM-DD[T]HH:mm:ss.SSS"+a)},cn.toJSON=function(){return this.isValid()?this.toISOString():null},cn.toString=function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},cn.unix=function(){return Math.floor(this.valueOf()/1e3)},cn.valueOf=function(){return this._d.valueOf()-6e4*(this._offset||0)},cn.creationData=function(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}},cn.year=be,cn.isLeapYear=function(){return ve(this.year())},cn.weekYear=function(e){return nn.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)},cn.isoWeekYear=function(e){return nn.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)},cn.quarter=cn.quarters=function(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)},cn.month=Oe,cn.daysInMonth=function(){return Le(this.year(),this.month())},cn.week=cn.weeks=function(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")},cn.isoWeek=cn.isoWeeks=function(e){var t=Ae(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")},cn.weeksInYear=function(){var e=this.localeData()._week;return Fe(this.year(),e.dow,e.doy)},cn.isoWeeksInYear=function(){return Fe(this.year(),1,4)},cn.date=an,cn.day=cn.days=function(e){if(!this.isValid())return null!=e?this:NaN;var t=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=e?(e=function(e,t){return"string"!=typeof e?e:isNaN(e)?"number"==typeof(e=t.weekdaysParse(e))?e:null:parseInt(e,10)}(e,this.localeData()),this.add(e-t,"d")):t},cn.weekday=function(e){if(!this.isValid())return null!=e?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")},cn.isoWeekday=function(e){if(!this.isValid())return null!=e?this:NaN;if(null!=e){var t=function(e,t){return"string"==typeof e?t.weekdaysParse(e)%7||7:isNaN(e)?null:e}(e,this.localeData());return this.day(this.day()%7?t:t-7)}return this.day()||7},cn.dayOfYear=function(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")},cn.hour=cn.hours=Xe,cn.minute=cn.minutes=on,cn.second=cn.seconds=un,cn.millisecond=cn.milliseconds=dn,cn.utcOffset=function(e,t,n){var r,o=this._offset||0;if(!this.isValid())return null!=e?this:NaN;if(null!=e){if("string"==typeof e){if(null===(e=Ht(se,e)))return this}else Math.abs(e)<16&&!n&&(e*=60);return!this._isUTC&&t&&(r=Nt(this)),this._offset=e,this._isUTC=!0,null!=r&&this.add(r,"m"),o!==e&&(!t||this._changeInProgress?Ut(this,Wt(e-o,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,a.updateOffset(this,!0),this._changeInProgress=null)),this}return this._isUTC?o:Nt(this)},cn.utc=function(e){return this.utcOffset(0,e)},cn.local=function(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(Nt(this),"m")),this},cn.parseZone=function(){if(null!=this._tzm)this.utcOffset(this._tzm,!1,!0);else if("string"==typeof this._i){var e=Ht(ie,this._i);null!=e?this.utcOffset(e):this.utcOffset(0,!0)}return this},cn.hasAlignedHourOffset=function(e){return!!this.isValid()&&(e=e?wt(e).utcOffset():0,(this.utcOffset()-e)%60==0)},cn.isDST=function(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()},cn.isLocal=function(){return!!this.isValid()&&!this._isUTC},cn.isUtcOffset=function(){return!!this.isValid()&&this._isUTC},cn.isUtc=At,cn.isUTC=At,cn.zoneAbbr=function(){return this._isUTC?"UTC":""},cn.zoneName=function(){return this._isUTC?"Coordinated Universal Time":""},cn.dates=T("dates accessor is deprecated. Use date instead.",an),cn.months=T("months accessor is deprecated. Use month instead",Oe),cn.years=T("years accessor is deprecated. Use year instead",be),cn.zone=T("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",(function(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()})),cn.isDSTShifted=T("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",(function(){if(!s(this._isDSTShifted))return this._isDSTShifted;var e={};if(v(e,this),(e=kt(e))._a){var t=e._isUTC?h(e._a):wt(e._a);this._isDSTShifted=this.isValid()&&L(e._a,t.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted}));var hn=x.prototype;function _n(e,t,n,r){var a=st(),o=h().set(r,t);return a[n](o,e)}function mn(e,t,n){if(u(e)&&(t=e,e=void 0),e=e||"",null!=t)return _n(e,t,n,"month");var r,a=[];for(r=0;r<12;r++)a[r]=_n(e,r,n,"month");return a}function pn(e,t,n,r){"boolean"==typeof e?(u(t)&&(n=t,t=void 0),t=t||""):(n=t=e,e=!1,u(t)&&(n=t,t=void 0),t=t||"");var a,o=st(),i=e?o._week.dow:0;if(null!=n)return _n(t,(n+i)%7,r,"day");var s=[];for(a=0;a<7;a++)s[a]=_n(t,(a+i)%7,r,"day");return s}hn.calendar=function(e,t,n){var r=this._calendar[e]||this._calendar.sameElse;return O(r)?r.call(t,n):r},hn.longDateFormat=function(e){var t=this._longDateFormat[e],n=this._longDateFormat[e.toUpperCase()];return t||!n?t:(this._longDateFormat[e]=n.replace(/MMMM|MM|DD|dddd/g,(function(e){return e.slice(1)})),this._longDateFormat[e])},hn.invalidDate=function(){return this._invalidDate},hn.ordinal=function(e){return this._ordinal.replace("%d",e)},hn.preparse=fn,hn.postformat=fn,hn.relativeTime=function(e,t,n,r){var a=this._relativeTime[n];return O(a)?a(e,t,n,r):a.replace(/%d/i,e)},hn.pastFuture=function(e,t){var n=this._relativeTime[e>0?"future":"past"];return O(n)?n(t):n.replace(/%s/i,t)},hn.set=function(e){var t,n;for(n in e)O(t=e[n])?this[n]=t:this["_"+n]=t;this._config=e,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)},hn.months=function(e,t){return e?o(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||we).test(t)?"format":"standalone"][e.month()]:o(this._months)?this._months:this._months.standalone},hn.monthsShort=function(e,t){return e?o(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[we.test(t)?"format":"standalone"][e.month()]:o(this._monthsShort)?this._monthsShort:this._monthsShort.standalone},hn.monthsParse=function(e,t,n){var r,a,o;if(this._monthsParseExact)return Ye.call(this,e,t,n);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),r=0;r<12;r++){if(a=h([2e3,r]),n&&!this._longMonthsParse[r]&&(this._longMonthsParse[r]=new RegExp("^"+this.months(a,"").replace(".","")+"$","i"),this._shortMonthsParse[r]=new RegExp("^"+this.monthsShort(a,"").replace(".","")+"$","i")),n||this._monthsParse[r]||(o="^"+this.months(a,"")+"|^"+this.monthsShort(a,""),this._monthsParse[r]=new RegExp(o.replace(".",""),"i")),n&&"MMMM"===t&&this._longMonthsParse[r].test(e))return r;if(n&&"MMM"===t&&this._shortMonthsParse[r].test(e))return r;if(!n&&this._monthsParse[r].test(e))return r}},hn.monthsRegex=function(e){return this._monthsParseExact?(c(this,"_monthsRegex")||Ce.call(this),e?this._monthsStrictRegex:this._monthsRegex):(c(this,"_monthsRegex")||(this._monthsRegex=xe),this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex)},hn.monthsShortRegex=function(e){return this._monthsParseExact?(c(this,"_monthsRegex")||Ce.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):(c(this,"_monthsShortRegex")||(this._monthsShortRegex=Ee),this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex)},hn.week=function(e){return Ae(e,this._week.dow,this._week.doy).week},hn.firstDayOfYear=function(){return this._week.doy},hn.firstDayOfWeek=function(){return this._week.dow},hn.weekdays=function(e,t){var n=o(this._weekdays)?this._weekdays:this._weekdays[e&&!0!==e&&this._weekdays.isFormat.test(t)?"format":"standalone"];return!0===e?Re(n,this._week.dow):e?n[e.day()]:n},hn.weekdaysMin=function(e){return!0===e?Re(this._weekdaysMin,this._week.dow):e?this._weekdaysMin[e.day()]:this._weekdaysMin},hn.weekdaysShort=function(e){return!0===e?Re(this._weekdaysShort,this._week.dow):e?this._weekdaysShort[e.day()]:this._weekdaysShort},hn.weekdaysParse=function(e,t,n){var r,a,o;if(this._weekdaysParseExact)return Ke.call(this,e,t,n);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),r=0;r<7;r++){if(a=h([2e3,1]).day(r),n&&!this._fullWeekdaysParse[r]&&(this._fullWeekdaysParse[r]=new RegExp("^"+this.weekdays(a,"").replace(".","\\.?")+"$","i"),this._shortWeekdaysParse[r]=new RegExp("^"+this.weekdaysShort(a,"").replace(".","\\.?")+"$","i"),this._minWeekdaysParse[r]=new RegExp("^"+this.weekdaysMin(a,"").replace(".","\\.?")+"$","i")),this._weekdaysParse[r]||(o="^"+this.weekdays(a,"")+"|^"+this.weekdaysShort(a,"")+"|^"+this.weekdaysMin(a,""),this._weekdaysParse[r]=new RegExp(o.replace(".",""),"i")),n&&"dddd"===t&&this._fullWeekdaysParse[r].test(e))return r;if(n&&"ddd"===t&&this._shortWeekdaysParse[r].test(e))return r;if(n&&"dd"===t&&this._minWeekdaysParse[r].test(e))return r;if(!n&&this._weekdaysParse[r].test(e))return r}},hn.weekdaysRegex=function(e){return this._weekdaysParseExact?(c(this,"_weekdaysRegex")||Je.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):(c(this,"_weekdaysRegex")||(this._weekdaysRegex=Ue),this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex)},hn.weekdaysShortRegex=function(e){return this._weekdaysParseExact?(c(this,"_weekdaysRegex")||Je.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(c(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=Ve),this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)},hn.weekdaysMinRegex=function(e){return this._weekdaysParseExact?(c(this,"_weekdaysRegex")||Je.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(c(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=Ge),this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)},hn.isPM=function(e){return"p"===(e+"").toLowerCase().charAt(0)},hn.meridiem=function(e,t,n){return e>11?n?"pm":"PM":n?"am":"AM"},ot("en",{dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1===k(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}}),a.lang=T("moment.lang is deprecated. Use moment.locale instead.",ot),a.langData=T("moment.langData is deprecated. Use moment.localeData instead.",st);var yn=Math.abs;function vn(e,t,n,r){var a=Wt(t,n);return e._milliseconds+=r*a._milliseconds,e._days+=r*a._days,e._months+=r*a._months,e._bubble()}function gn(e){return e<0?Math.floor(e):Math.ceil(e)}function bn(e){return 4800*e/146097}function Mn(e){return 146097*e/4800}function Dn(e){return function(){return this.as(e)}}var kn=Dn("ms"),Ln=Dn("s"),wn=Dn("m"),Tn=Dn("h"),Sn=Dn("d"),Yn=Dn("w"),Pn=Dn("M"),On=Dn("Q"),En=Dn("y");function xn(e){return function(){return this.isValid()?this._data[e]:NaN}}var Cn=xn("milliseconds"),jn=xn("seconds"),Hn=xn("minutes"),In=xn("hours"),Nn=xn("days"),An=xn("months"),Fn=xn("years"),Rn=Math.round,Wn={ss:44,s:45,m:45,h:22,d:26,M:11};function zn(e,t,n,r,a){return a.relativeTime(t||1,!!n,e,r)}var Bn=Math.abs;function Kn(e){return(e>0)-(e<0)||+e}function Un(){if(!this.isValid())return this.localeData().invalidDate();var e,t,n=Bn(this._milliseconds)/1e3,r=Bn(this._days),a=Bn(this._months);e=D(n/60),t=D(e/60),n%=60,e%=60;var o=D(a/12),i=a%=12,s=r,u=t,l=e,d=n?n.toFixed(3).replace(/\.?0+$/,""):"",c=this.asSeconds();if(!c)return"P0D";var f=c<0?"-":"",h=Kn(this._months)!==Kn(c)?"-":"",_=Kn(this._days)!==Kn(c)?"-":"",m=Kn(this._milliseconds)!==Kn(c)?"-":"";return f+"P"+(o?h+o+"Y":"")+(i?h+i+"M":"")+(s?_+s+"D":"")+(u||l||d?"T":"")+(u?m+u+"H":"")+(l?m+l+"M":"")+(d?m+d+"S":"")}var Vn=Ot.prototype;return Vn.isValid=function(){return this._isValid},Vn.abs=function(){var e=this._data;return this._milliseconds=yn(this._milliseconds),this._days=yn(this._days),this._months=yn(this._months),e.milliseconds=yn(e.milliseconds),e.seconds=yn(e.seconds),e.minutes=yn(e.minutes),e.hours=yn(e.hours),e.months=yn(e.months),e.years=yn(e.years),this},Vn.add=function(e,t){return vn(this,e,t,1)},Vn.subtract=function(e,t){return vn(this,e,t,-1)},Vn.as=function(e){if(!this.isValid())return NaN;var t,n,r=this._milliseconds;if("month"===(e=H(e))||"quarter"===e||"year"===e)switch(t=this._days+r/864e5,n=this._months+bn(t),e){case"month":return n;case"quarter":return n/3;case"year":return n/12}else switch(t=this._days+Math.round(Mn(this._months)),e){case"week":return t/7+r/6048e5;case"day":return t+r/864e5;case"hour":return 24*t+r/36e5;case"minute":return 1440*t+r/6e4;case"second":return 86400*t+r/1e3;case"millisecond":return Math.floor(864e5*t)+r;default:throw new Error("Unknown unit "+e)}},Vn.asMilliseconds=kn,Vn.asSeconds=Ln,Vn.asMinutes=wn,Vn.asHours=Tn,Vn.asDays=Sn,Vn.asWeeks=Yn,Vn.asMonths=Pn,Vn.asQuarters=On,Vn.asYears=En,Vn.valueOf=function(){return this.isValid()?this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*k(this._months/12):NaN},Vn._bubble=function(){var e,t,n,r,a,o=this._milliseconds,i=this._days,s=this._months,u=this._data;return o>=0&&i>=0&&s>=0||o<=0&&i<=0&&s<=0||(o+=864e5*gn(Mn(s)+i),i=0,s=0),u.milliseconds=o%1e3,e=D(o/1e3),u.seconds=e%60,t=D(e/60),u.minutes=t%60,n=D(t/60),u.hours=n%24,i+=D(n/24),a=D(bn(i)),s+=a,i-=gn(Mn(a)),r=D(s/12),s%=12,u.days=i,u.months=s,u.years=r,this},Vn.clone=function(){return Wt(this)},Vn.get=function(e){return e=H(e),this.isValid()?this[e+"s"]():NaN},Vn.milliseconds=Cn,Vn.seconds=jn,Vn.minutes=Hn,Vn.hours=In,Vn.days=Nn,Vn.weeks=function(){return D(this.days()/7)},Vn.months=An,Vn.years=Fn,Vn.humanize=function(e){if(!this.isValid())return this.localeData().invalidDate();var t=this.localeData(),n=function(e,t,n){var r=Wt(e).abs(),a=Rn(r.as("s")),o=Rn(r.as("m")),i=Rn(r.as("h")),s=Rn(r.as("d")),u=Rn(r.as("M")),l=Rn(r.as("y")),d=a<=Wn.ss&&["s",a]||a<Wn.s&&["ss",a]||o<=1&&["m"]||o<Wn.m&&["mm",o]||i<=1&&["h"]||i<Wn.h&&["hh",i]||s<=1&&["d"]||s<Wn.d&&["dd",s]||u<=1&&["M"]||u<Wn.M&&["MM",u]||l<=1&&["y"]||["yy",l];return d[2]=t,d[3]=+e>0,d[4]=n,zn.apply(null,d)}(this,!e,t);return e&&(n=t.pastFuture(+this,n)),t.postformat(n)},Vn.toISOString=Un,Vn.toString=Un,Vn.toJSON=Un,Vn.locale=$t,Vn.localeData=Qt,Vn.toIsoString=T("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",Un),Vn.lang=qt,K("X",0,0,"unix"),K("x",0,0,"valueOf"),de("x",oe),de("X",/[+-]?\d+(\.\d{1,3})?/),_e("X",(function(e,t,n){n._d=new Date(1e3*parseFloat(e,10))})),_e("x",(function(e,t,n){n._d=new Date(k(e))})),a.version="2.24.0",t=wt,a.fn=cn,a.min=function(){var e=[].slice.call(arguments,0);return Yt("isBefore",e)},a.max=function(){var e=[].slice.call(arguments,0);return Yt("isAfter",e)},a.now=function(){return Date.now?Date.now():+new Date},a.utc=h,a.unix=function(e){return wt(1e3*e)},a.months=function(e,t){return mn(e,t,"months")},a.isDate=l,a.locale=ot,a.invalid=p,a.duration=Wt,a.isMoment=M,a.weekdays=function(e,t,n){return pn(e,t,n,"weekdays")},a.parseZone=function(){return wt.apply(null,arguments).parseZone()},a.localeData=st,a.isDuration=Et,a.monthsShort=function(e,t){return mn(e,t,"monthsShort")},a.weekdaysMin=function(e,t,n){return pn(e,t,n,"weekdaysMin")},a.defineLocale=it,a.updateLocale=function(e,t){if(null!=t){var n,r,a=et;null!=(r=at(e))&&(a=r._config),t=E(a,t),(n=new x(t)).parentLocale=tt[e],tt[e]=n,ot(e)}else null!=tt[e]&&(null!=tt[e].parentLocale?tt[e]=tt[e].parentLocale:null!=tt[e]&&delete tt[e]);return tt[e]},a.locales=function(){return S(tt)},a.weekdaysShort=function(e,t,n){return pn(e,t,n,"weekdaysShort")},a.normalizeUnits=H,a.relativeTimeRounding=function(e){return void 0===e?Rn:"function"==typeof e&&(Rn=e,!0)},a.relativeTimeThreshold=function(e,t){return void 0!==Wn[e]&&(void 0===t?Wn[e]:(Wn[e]=t,"s"===e&&(Wn.ss=t-1),!0))},a.calendarFormat=function(e,t){var n=e.diff(t,"days",!0);return n<-6?"sameElse":n<-1?"lastWeek":n<0?"lastDay":n<1?"sameDay":n<2?"nextDay":n<7?"nextWeek":"sameElse"},a.prototype=cn,a.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"GGGG-[W]WW",MONTH:"YYYY-MM"},a}()}).call(this,n(260)(e))},function(e,t){e.exports=function(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){e.exports=n(255)()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MODIFIER_KEY_NAMES=t.DEFAULT_VERTICAL_SPACING=t.FANG_HEIGHT_PX=t.FANG_WIDTH_PX=t.WEEKDAYS=t.BLOCKED_MODIFIER=t.DAY_SIZE=t.OPEN_UP=t.OPEN_DOWN=t.ANCHOR_RIGHT=t.ANCHOR_LEFT=t.INFO_POSITION_AFTER=t.INFO_POSITION_BEFORE=t.INFO_POSITION_BOTTOM=t.INFO_POSITION_TOP=t.ICON_AFTER_POSITION=t.ICON_BEFORE_POSITION=t.NAV_POSITION_TOP=t.NAV_POSITION_BOTTOM=t.VERTICAL_SCROLLABLE=t.VERTICAL_ORIENTATION=t.HORIZONTAL_ORIENTATION=t.END_DATE=t.START_DATE=t.ISO_MONTH_FORMAT=t.ISO_FORMAT=t.DISPLAY_FORMAT=void 0;t.DISPLAY_FORMAT="L";t.ISO_FORMAT="YYYY-MM-DD";t.ISO_MONTH_FORMAT="YYYY-MM";t.START_DATE="startDate";t.END_DATE="endDate";t.HORIZONTAL_ORIENTATION="horizontal";t.VERTICAL_ORIENTATION="vertical";t.VERTICAL_SCROLLABLE="verticalScrollable";t.NAV_POSITION_BOTTOM="navPositionBottom";t.NAV_POSITION_TOP="navPositionTop";t.ICON_BEFORE_POSITION="before";t.ICON_AFTER_POSITION="after";t.INFO_POSITION_TOP="top";t.INFO_POSITION_BOTTOM="bottom";t.INFO_POSITION_BEFORE="before";t.INFO_POSITION_AFTER="after";t.ANCHOR_LEFT="left";t.ANCHOR_RIGHT="right";t.OPEN_DOWN="down";t.OPEN_UP="up";t.DAY_SIZE=39;t.BLOCKED_MODIFIER="blocked";t.WEEKDAYS=[0,1,2,3,4,5,6];t.FANG_WIDTH_PX=20;t.FANG_HEIGHT_PX=10;t.DEFAULT_VERTICAL_SPACING=22;var r=new Set(["Shift","Control","Alt","Meta"]);t.MODIFIER_KEY_NAMES=r},function(e,t,n){"use strict";var r=TypeError,a=Object.getOwnPropertyDescriptor;if(a)try{a({},"")}catch(e){a=null}var o=function(){throw new r},i=a?function(){try{return arguments.callee,o}catch(e){try{return a(arguments,"callee").get}catch(e){return o}}}():o,s=n(195)(),u=Object.getPrototypeOf||function(e){return e.__proto__},l=void 0,d="undefined"==typeof Uint8Array?void 0:u(Uint8Array),c={"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?void 0:ArrayBuffer,"%ArrayBufferPrototype%":"undefined"==typeof ArrayBuffer?void 0:ArrayBuffer.prototype,"%ArrayIteratorPrototype%":s?u([][Symbol.iterator]()):void 0,"%ArrayPrototype%":Array.prototype,"%ArrayProto_entries%":Array.prototype.entries,"%ArrayProto_forEach%":Array.prototype.forEach,"%ArrayProto_keys%":Array.prototype.keys,"%ArrayProto_values%":Array.prototype.values,"%AsyncFromSyncIteratorPrototype%":void 0,"%AsyncFunction%":void 0,"%AsyncFunctionPrototype%":void 0,"%AsyncGenerator%":void 0,"%AsyncGeneratorFunction%":void 0,"%AsyncGeneratorPrototype%":void 0,"%AsyncIteratorPrototype%":l&&s&&Symbol.asyncIterator?l[Symbol.asyncIterator]():void 0,"%Atomics%":"undefined"==typeof Atomics?void 0:Atomics,"%Boolean%":Boolean,"%BooleanPrototype%":Boolean.prototype,"%DataView%":"undefined"==typeof DataView?void 0:DataView,"%DataViewPrototype%":"undefined"==typeof DataView?void 0:DataView.prototype,"%Date%":Date,"%DatePrototype%":Date.prototype,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%ErrorPrototype%":Error.prototype,"%eval%":eval,"%EvalError%":EvalError,"%EvalErrorPrototype%":EvalError.prototype,"%Float32Array%":"undefined"==typeof Float32Array?void 0:Float32Array,"%Float32ArrayPrototype%":"undefined"==typeof Float32Array?void 0:Float32Array.prototype,"%Float64Array%":"undefined"==typeof Float64Array?void 0:Float64Array,"%Float64ArrayPrototype%":"undefined"==typeof Float64Array?void 0:Float64Array.prototype,"%Function%":Function,"%FunctionPrototype%":Function.prototype,"%Generator%":void 0,"%GeneratorFunction%":void 0,"%GeneratorPrototype%":void 0,"%Int8Array%":"undefined"==typeof Int8Array?void 0:Int8Array,"%Int8ArrayPrototype%":"undefined"==typeof Int8Array?void 0:Int8Array.prototype,"%Int16Array%":"undefined"==typeof Int16Array?void 0:Int16Array,"%Int16ArrayPrototype%":"undefined"==typeof Int16Array?void 0:Int8Array.prototype,"%Int32Array%":"undefined"==typeof Int32Array?void 0:Int32Array,"%Int32ArrayPrototype%":"undefined"==typeof Int32Array?void 0:Int32Array.prototype,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":s?u(u([][Symbol.iterator]())):void 0,"%JSON%":"object"==typeof JSON?JSON:void 0,"%JSONParse%":"object"==typeof JSON?JSON.parse:void 0,"%Map%":"undefined"==typeof Map?void 0:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&s?u((new Map)[Symbol.iterator]()):void 0,"%MapPrototype%":"undefined"==typeof Map?void 0:Map.prototype,"%Math%":Math,"%Number%":Number,"%NumberPrototype%":Number.prototype,"%Object%":Object,"%ObjectPrototype%":Object.prototype,"%ObjProto_toString%":Object.prototype.toString,"%ObjProto_valueOf%":Object.prototype.valueOf,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?void 0:Promise,"%PromisePrototype%":"undefined"==typeof Promise?void 0:Promise.prototype,"%PromiseProto_then%":"undefined"==typeof Promise?void 0:Promise.prototype.then,"%Promise_all%":"undefined"==typeof Promise?void 0:Promise.all,"%Promise_reject%":"undefined"==typeof Promise?void 0:Promise.reject,"%Promise_resolve%":"undefined"==typeof Promise?void 0:Promise.resolve,"%Proxy%":"undefined"==typeof Proxy?void 0:Proxy,"%RangeError%":RangeError,"%RangeErrorPrototype%":RangeError.prototype,"%ReferenceError%":ReferenceError,"%ReferenceErrorPrototype%":ReferenceError.prototype,"%Reflect%":"undefined"==typeof Reflect?void 0:Reflect,"%RegExp%":RegExp,"%RegExpPrototype%":RegExp.prototype,"%Set%":"undefined"==typeof Set?void 0:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&s?u((new Set)[Symbol.iterator]()):void 0,"%SetPrototype%":"undefined"==typeof Set?void 0:Set.prototype,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?void 0:SharedArrayBuffer,"%SharedArrayBufferPrototype%":"undefined"==typeof SharedArrayBuffer?void 0:SharedArrayBuffer.prototype,"%String%":String,"%StringIteratorPrototype%":s?u(""[Symbol.iterator]()):void 0,"%StringPrototype%":String.prototype,"%Symbol%":s?Symbol:void 0,"%SymbolPrototype%":s?Symbol.prototype:void 0,"%SyntaxError%":SyntaxError,"%SyntaxErrorPrototype%":SyntaxError.prototype,"%ThrowTypeError%":i,"%TypedArray%":d,"%TypedArrayPrototype%":d?d.prototype:void 0,"%TypeError%":r,"%TypeErrorPrototype%":r.prototype,"%Uint8Array%":"undefined"==typeof Uint8Array?void 0:Uint8Array,"%Uint8ArrayPrototype%":"undefined"==typeof Uint8Array?void 0:Uint8Array.prototype,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?void 0:Uint8ClampedArray,"%Uint8ClampedArrayPrototype%":"undefined"==typeof Uint8ClampedArray?void 0:Uint8ClampedArray.prototype,"%Uint16Array%":"undefined"==typeof Uint16Array?void 0:Uint16Array,"%Uint16ArrayPrototype%":"undefined"==typeof Uint16Array?void 0:Uint16Array.prototype,"%Uint32Array%":"undefined"==typeof Uint32Array?void 0:Uint32Array,"%Uint32ArrayPrototype%":"undefined"==typeof Uint32Array?void 0:Uint32Array.prototype,"%URIError%":URIError,"%URIErrorPrototype%":URIError.prototype,"%WeakMap%":"undefined"==typeof WeakMap?void 0:WeakMap,"%WeakMapPrototype%":"undefined"==typeof WeakMap?void 0:WeakMap.prototype,"%WeakSet%":"undefined"==typeof WeakSet?void 0:WeakSet,"%WeakSetPrototype%":"undefined"==typeof WeakSet?void 0:WeakSet.prototype},f=n(48).call(Function.call,String.prototype.replace),h=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,_=/\\(\\)?/g,m=function(e){var t=[];return f(e,h,(function(e,n,r,a){t[t.length]=r?f(a,_,"$1"):n||e})),t},p=function(e,t){if(!(e in c))throw new SyntaxError("intrinsic "+e+" does not exist!");if(void 0===c[e]&&!t)throw new r("intrinsic "+e+" exists, but is not available. Please file an issue!");return c[e]};e.exports=function(e,t){if("string"!=typeof e||0===e.length)throw new TypeError("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof t)throw new TypeError('"allowMissing" argument must be a boolean');for(var n=m(e),o=p("%"+(n.length>0?n[0]:"")+"%",t),i=1;i<n.length;i+=1)if(null!=o)if(a&&i+1>=n.length){var s=a(o,n[i]);if(!t&&!(n[i]in o))throw new r("base intrinsic for "+e+" exists, but the property is not available.");o=s?s.get||s.value:o[n[i]]}else o=o[n[i]];return o}},function(e,t,n){e.exports=n(267)},function(e,t){e.exports=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}},function(e,t){e.exports=function(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CalendarDayPhrases=t.DayPickerNavigationPhrases=t.DayPickerKeyboardShortcutsPhrases=t.DayPickerPhrases=t.SingleDatePickerInputPhrases=t.SingleDatePickerPhrases=t.DateRangePickerInputPhrases=t.DateRangePickerPhrases=t.default=void 0;var r="Interact with the calendar and add the check-in date for your trip.",a="Move backward to switch to the previous month.",o="Move forward to switch to the next month.",i="page up and page down keys",s="Home and end keys",u="Escape key",l="Select the date in focus.",d="Move backward (left) and forward (right) by one day.",c="Move backward (up) and forward (down) by one week.",f="Return to the date input field.",h="Navigate forward to interact with the calendar and select a date. Press the question mark key to get the keyboard shortcuts for changing dates.",_="Navigate backward to interact with the calendar and select a date. Press the question mark key to get the keyboard shortcuts for changing dates.",m=function(e){var t=e.date;return"Choose ".concat(t," as your check-in date. It’s available.")},p=function(e){var t=e.date;return"Choose ".concat(t," as your check-out date. It’s available.")},y=function(e){return e.date},v=function(e){var t=e.date;return"Not available. ".concat(t)},g=function(e){var t=e.date;return"Selected. ".concat(t)},b=function(e){var t=e.date;return"Selected as start date. ".concat(t)},M=function(e){var t=e.date;return"Selected as end date. ".concat(t)},D={calendarLabel:"Calendar",roleDescription:"datepicker",closeDatePicker:"Close",focusStartDate:r,clearDate:"Clear Date",clearDates:"Clear Dates",jumpToPrevMonth:a,jumpToNextMonth:o,keyboardShortcuts:"Keyboard Shortcuts",showKeyboardShortcutsPanel:"Open the keyboard shortcuts panel.",hideKeyboardShortcutsPanel:"Close the shortcuts panel.",openThisPanel:"Open this panel.",enterKey:"Enter key",leftArrowRightArrow:"Right and left arrow keys",upArrowDownArrow:"up and down arrow keys",pageUpPageDown:i,homeEnd:s,escape:u,questionMark:"Question mark",selectFocusedDate:l,moveFocusByOneDay:d,moveFocusByOneWeek:c,moveFocusByOneMonth:"Switch months.",moveFocustoStartAndEndOfWeek:"Go to the first or last day of a week.",returnFocusToInput:f,keyboardForwardNavigationInstructions:h,keyboardBackwardNavigationInstructions:_,chooseAvailableStartDate:m,chooseAvailableEndDate:p,dateIsUnavailable:v,dateIsSelected:g,dateIsSelectedAsStartDate:b,dateIsSelectedAsEndDate:M};t.default=D;var k={calendarLabel:"Calendar",roleDescription:"datepicker",closeDatePicker:"Close",clearDates:"Clear Dates",focusStartDate:r,jumpToPrevMonth:a,jumpToNextMonth:o,keyboardShortcuts:"Keyboard Shortcuts",showKeyboardShortcutsPanel:"Open the keyboard shortcuts panel.",hideKeyboardShortcutsPanel:"Close the shortcuts panel.",openThisPanel:"Open this panel.",enterKey:"Enter key",leftArrowRightArrow:"Right and left arrow keys",upArrowDownArrow:"up and down arrow keys",pageUpPageDown:i,homeEnd:s,escape:u,questionMark:"Question mark",selectFocusedDate:l,moveFocusByOneDay:d,moveFocusByOneWeek:c,moveFocusByOneMonth:"Switch months.",moveFocustoStartAndEndOfWeek:"Go to the first or last day of a week.",returnFocusToInput:f,keyboardForwardNavigationInstructions:h,keyboardBackwardNavigationInstructions:_,chooseAvailableStartDate:m,chooseAvailableEndDate:p,dateIsUnavailable:v,dateIsSelected:g,dateIsSelectedAsStartDate:b,dateIsSelectedAsEndDate:M};t.DateRangePickerPhrases=k;var L={focusStartDate:r,clearDates:"Clear Dates",keyboardForwardNavigationInstructions:h,keyboardBackwardNavigationInstructions:_};t.DateRangePickerInputPhrases=L;var w={calendarLabel:"Calendar",roleDescription:"datepicker",closeDatePicker:"Close",clearDate:"Clear Date",jumpToPrevMonth:a,jumpToNextMonth:o,keyboardShortcuts:"Keyboard Shortcuts",showKeyboardShortcutsPanel:"Open the keyboard shortcuts panel.",hideKeyboardShortcutsPanel:"Close the shortcuts panel.",openThisPanel:"Open this panel.",enterKey:"Enter key",leftArrowRightArrow:"Right and left arrow keys",upArrowDownArrow:"up and down arrow keys",pageUpPageDown:i,homeEnd:s,escape:u,questionMark:"Question mark",selectFocusedDate:l,moveFocusByOneDay:d,moveFocusByOneWeek:c,moveFocusByOneMonth:"Switch months.",moveFocustoStartAndEndOfWeek:"Go to the first or last day of a week.",returnFocusToInput:f,keyboardForwardNavigationInstructions:h,keyboardBackwardNavigationInstructions:_,chooseAvailableDate:y,dateIsUnavailable:v,dateIsSelected:g};t.SingleDatePickerPhrases=w;var T={clearDate:"Clear Date",keyboardForwardNavigationInstructions:h,keyboardBackwardNavigationInstructions:_};t.SingleDatePickerInputPhrases=T;var S={calendarLabel:"Calendar",roleDescription:"datepicker",jumpToPrevMonth:a,jumpToNextMonth:o,keyboardShortcuts:"Keyboard Shortcuts",showKeyboardShortcutsPanel:"Open the keyboard shortcuts panel.",hideKeyboardShortcutsPanel:"Close the shortcuts panel.",openThisPanel:"Open this panel.",enterKey:"Enter key",leftArrowRightArrow:"Right and left arrow keys",upArrowDownArrow:"up and down arrow keys",pageUpPageDown:i,homeEnd:s,escape:u,questionMark:"Question mark",selectFocusedDate:l,moveFocusByOneDay:d,moveFocusByOneWeek:c,moveFocusByOneMonth:"Switch months.",moveFocustoStartAndEndOfWeek:"Go to the first or last day of a week.",returnFocusToInput:f,chooseAvailableStartDate:m,chooseAvailableEndDate:p,chooseAvailableDate:y,dateIsUnavailable:v,dateIsSelected:g,dateIsSelectedAsStartDate:b,dateIsSelectedAsEndDate:M};t.DayPickerPhrases=S;var Y={keyboardShortcuts:"Keyboard Shortcuts",showKeyboardShortcutsPanel:"Open the keyboard shortcuts panel.",hideKeyboardShortcutsPanel:"Close the shortcuts panel.",openThisPanel:"Open this panel.",enterKey:"Enter key",leftArrowRightArrow:"Right and left arrow keys",upArrowDownArrow:"up and down arrow keys",pageUpPageDown:i,homeEnd:s,escape:u,questionMark:"Question mark",selectFocusedDate:l,moveFocusByOneDay:d,moveFocusByOneWeek:c,moveFocusByOneMonth:"Switch months.",moveFocustoStartAndEndOfWeek:"Go to the first or last day of a week.",returnFocusToInput:f};t.DayPickerKeyboardShortcutsPhrases=Y;var P={jumpToPrevMonth:a,jumpToNextMonth:o};t.DayPickerNavigationPhrases=P;var O={chooseAvailableDate:y,dateIsUnavailable:v,dateIsSelected:g,dateIsSelectedAsStartDate:b,dateIsSelectedAsEndDate:M};t.CalendarDayPhrases=O},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return Object.keys(e).reduce((function(e,t){return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){(0,a.default)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},e,(0,a.default)({},t,o.default.oneOfType([o.default.string,o.default.func,o.default.node])))}),{})};var a=r(n(7)),o=r(n(3));function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.default=function(e,t){if((0,a.default)(e,t))return!0;if(!e||!t||"object"!==(void 0===e?"undefined":r(e))||"object"!==(void 0===t?"undefined":r(t)))return!1;var n=Object.keys(e),i=Object.keys(t);if(n.length!==i.length)return!1;n.sort(),i.sort();for(var s=0;s<n.length;s+=1)if(!(0,o.default)(t,n[s])||!(0,a.default)(e[n[s]],t[n[s]]))return!1;return!0};var a=i(n(263)),o=i(n(20));function i(e){return e&&e.__esModule?e:{default:e}}},function(e,t){function n(){return e.exports=n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n.apply(this,arguments)}e.exports=n},function(e,t){e.exports=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}},function(e,t,n){"use strict";var r=n(192),a=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.withStyles=y,Object.defineProperty(t,"withStylesPropTypes",{enumerable:!0,get:function(){return _.withStylesPropTypes}}),t.css=t.default=void 0;var o=a(n(12)),i=a(n(7)),s=a(n(8)),u=a(n(0)),l=a(n(24)),d=a(n(193)),c=a(n(274)),f=(a(n(275)),r(n(276))),h=r(n(204)),_=n(283);function m(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?m(n,!0).forEach((function(t){(0,i.default)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):m(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function y(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:c.default,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.stylesPropName,r=void 0===n?"styles":n,a=t.themePropName,_=void 0===a?"theme":a,m=t.cssPropName,y=void 0===m?"css":m,v=t.flushBefore,g=void 0!==v&&v,b=t.pureComponent,M=void 0!==b&&b;e=e||c.default;var D=M?u.default.PureComponent:u.default.Component,k="undefined"==typeof WeakMap?new Map:new WeakMap;function L(t){var n=k.get(t)||e(t)||{};return k.set(t,n),n}var w="undefined"==typeof WeakMap?new Map:new WeakMap;function T(e,t,n){var r=w.get(e);if(!r)return null;var a=r.get(t);return a?a[n]:null}function S(e,t,n,r){var a=w.get(e);a||(a="undefined"==typeof WeakMap?new Map:new WeakMap,w.set(e,a));var o=a.get(t);o||(o={ltr:{},rtl:{}},a.set(t,o)),o[n]=r}function Y(e,t){var n=e===f.DIRECTIONS.RTL?"RTL":"LTR";return t["create".concat(n)]||t.create}function P(e,t){var n=e===f.DIRECTIONS.RTL?"RTL":"LTR";return t["resolve".concat(n)]||t.resolve}return function(e){var t=(0,d.default)(e),n=function(t){function n(){return t.apply(this,arguments)||this}(0,s.default)(n,t);var a=n.prototype;return a.getCurrentInterface=function(){return this.context&&this.context.stylesInterface||(0,h._getInterface)()},a.getCurrentTheme=function(){return this.context&&this.context.stylesTheme||(0,h._getTheme)()},a.getCurrentDirection=function(){return this.context&&this.context.direction||f.DIRECTIONS.LTR},a.getProps=function(){var e=this.getCurrentInterface(),t=this.getCurrentTheme(),r=this.getCurrentDirection(),a=T(t,n,r),o=!a||!a.stylesInterface||e&&a.stylesInterface!==e,i=!a||a.theme!==t;if(!o&&!i)return a.props;var s=o&&Y(r,e)||a.create,u=o&&P(r,e)||a.resolve,l=o&&function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return u(t)}||a.props.css,d=L(t),c={css:l,styles:(o||d!==a.stylesFnResult)&&s(d)||a.props.styles,theme:t};return S(t,n,r,{stylesInterface:e,theme:t,create:s,resolve:u,stylesFnResult:d,props:c}),c},a.flush=function(){var e=this.getCurrentInterface();e&&e.flush&&e.flush()},a.render=function(){var t,n=this.getProps(),a=n.theme,s=n.styles,l=n.css;return g&&this.flush(),u.default.createElement(e,(0,o.default)({},this.props,(t={},(0,i.default)(t,_,a),(0,i.default)(t,r,s),(0,i.default)(t,y,l),t)))},n}(D);return e.propTypes&&(n.propTypes=p({},e.propTypes),delete n.propTypes[r],delete n.propTypes[_],delete n.propTypes[y]),e.defaultProps&&(n.defaultProps=p({},e.defaultProps)),n.contextType=f.default,n.WrappedComponent=e,n.displayName="withStyles(".concat(t,")"),(0,l.default)(n,e)}}var v=y;t.default=v;var g=h.default.resolveLTR;t.css=g},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(252)},function(e,t,n){var r=n(1),a=n(265),o=n(266);e.exports={momentObj:o.createMomentChecker("object",(function(e){return"object"==typeof e}),(function(e){return a.isValidMoment(e)}),"Moment"),momentString:o.createMomentChecker("string",(function(e){return"string"==typeof e}),(function(e){return a.isValidMoment(r(e))}),"Moment"),momentDurationObj:o.createMomentChecker("object",(function(e){return"object"==typeof e}),(function(e){return r.isDuration(e)}),"Duration")}},function(e,t,n){"use strict";var r=n(270),a="function"==typeof Symbol&&"symbol"==typeof Symbol("foo"),o=Object.prototype.toString,i=Array.prototype.concat,s=Object.defineProperty,u=s&&function(){var e={};try{for(var t in s(e,"x",{enumerable:!1,value:e}),e)return!1;return e.x===e}catch(e){return!1}}(),l=function(e,t,n,r){var a;(!(t in e)||"function"==typeof(a=r)&&"[object Function]"===o.call(a)&&r())&&(u?s(e,t,{configurable:!0,enumerable:!1,value:n,writable:!0}):e[t]=n)},d=function(e,t){var n=arguments.length>2?arguments[2]:{},o=r(t);a&&(o=i.call(o,Object.getOwnPropertySymbols(t)));for(var s=0;s<o.length;s+=1)l(e,o[s],t[o[s]],n[o[s]])};d.supportsDescriptors=!!u,e.exports=d},function(e,t,n){"use strict";var r=n(338);e.exports=function(e){return"symbol"==typeof e?"Symbol":r(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){if("number"==typeof e)return"".concat(e,"px ").concat("/* @noflip */");if("string"==typeof e)return"".concat(e," ").concat("/* @noflip */");throw new TypeError("noflip expects a string or a number")}},function(e,t,n){"use strict";var r=n(48);e.exports=r.call(Function.call,Object.prototype.hasOwnProperty)},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return!(!a.default.isMoment(e)||!a.default.isMoment(t))&&(e.date()===t.date()&&e.month()===t.month()&&e.year()===t.year())};var a=r(n(1))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(3)),o=n(4),i=a.default.oneOf(o.WEEKDAYS);t.default=i},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(3)),o=n(4),i=a.default.oneOf([o.OPEN_DOWN,o.OPEN_UP]);t.default=i},function(e,t,n){"use strict";var r=n(39),a={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},s={};function u(e){return r.isMemo(e)?i:s[e.$$typeof]||a}s[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},s[r.Memo]=i;var l=Object.defineProperty,d=Object.getOwnPropertyNames,c=Object.getOwnPropertySymbols,f=Object.getOwnPropertyDescriptor,h=Object.getPrototypeOf,_=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(_){var a=h(n);a&&a!==_&&e(t,a,r)}var i=d(n);c&&(i=i.concat(c(n)));for(var s=u(t),m=u(n),p=0;p<i.length;++p){var y=i[p];if(!(o[y]||r&&r[y]||m&&m[y]||s&&s[y])){var v=f(n,y);try{l(t,y,v)}catch(e){}}}}return t}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";var r=n(5),a=n(40),o=a(r("String.prototype.indexOf"));e.exports=function(e,t){var n=r(e,!!t);return"function"==typeof n&&o(e,".prototype.")?a(n):n}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=t?[t,o.DISPLAY_FORMAT,o.ISO_FORMAT]:[o.DISPLAY_FORMAT,o.ISO_FORMAT],r=(0,a.default)(e,n,!0);return r.isValid()?r.hour(12):null};var a=r(n(1)),o=n(4)},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(3)),o=n(4),i=a.default.oneOf([o.HORIZONTAL_ORIENTATION,o.VERTICAL_ORIENTATION,o.VERTICAL_SCROLLABLE]);t.default=i},function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){return!("undefined"==typeof window||!("ontouchstart"in window||window.DocumentTouch&&"undefined"!=typeof document&&document instanceof window.DocumentTouch))||!("undefined"==typeof navigator||!navigator.maxTouchPoints&&!navigator.msMaxTouchPoints)},e.exports=t.default},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(3)),o=n(4),i=a.default.oneOf([o.ICON_BEFORE_POSITION,o.ICON_AFTER_POSITION]);t.default=i},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(3)),o=n(4),i=a.default.oneOf([o.NAV_POSITION_BOTTOM,o.NAV_POSITION_TOP]);t.default=i},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return!(!a.default.isMoment(e)||!a.default.isMoment(t))&&!(0,o.default)(e,t)};var a=r(n(1)),o=r(n(36))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=a.default.isMoment(e)?e:(0,o.default)(e,t);return n?n.year()+"-"+String(n.month()+1).padStart(2,"0")+"-"+String(n.date()).padStart(2,"0"):null};var a=r(n(1)),o=r(n(27))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(3)),o=n(4),i=a.default.oneOfType([a.default.bool,a.default.oneOf([o.START_DATE,o.END_DATE])]);t.default=i},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(3)),o=n(4),i=a.default.oneOf([o.INFO_POSITION_TOP,o.INFO_POSITION_BOTTOM,o.INFO_POSITION_BEFORE,o.INFO_POSITION_AFTER]);t.default=i},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(!a.default.isMoment(e)||!a.default.isMoment(t))return!1;var n=e.year(),r=e.month(),o=t.year(),i=t.month(),s=n===o,u=r===i;return s&&u?e.date()<t.date():s?r<i:n<o};var a=r(n(1))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(0)),o=function(e){return a.default.createElement("svg",e,a.default.createElement("path",{fillRule:"evenodd",d:"M11.53.47a.75.75 0 0 0-1.061 0l-4.47 4.47L1.529.47A.75.75 0 1 0 .468 1.531l4.47 4.47-4.47 4.47a.75.75 0 1 0 1.061 1.061l4.47-4.47 4.47 4.47a.75.75 0 1 0 1.061-1.061l-4.47-4.47 4.47-4.47a.75.75 0 0 0 0-1.061z"}))};o.defaultProps={focusable:"false",viewBox:"0 0 12 12"};var i=o;t.default=i},function(e,t,n){"use strict";e.exports=function(e){return"string"==typeof e||"symbol"==typeof e}},function(e,t,n){"use strict";e.exports=n(257)},function(e,t,n){"use strict";var r=n(48),a=n(5)("%Function%"),o=a.apply,i=a.call;e.exports=function(){return r.apply(i,arguments)},e.exports.apply=function(){return r.apply(o,arguments)}},function(e,t,n){"use strict";var r=n(17),a=n(201),o=n(203),i=n(282),s=o();r(s,{getPolyfill:o,implementation:a,shim:i}),e.exports=s},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(7)),o=r(n(50)),i=r(n(3)),s=(0,n(6).and)([i.default.instanceOf(Set),function(e,t){for(var n=arguments.length,r=new Array(n>2?n-2:0),s=2;s<n;s++)r[s-2]=arguments[s];var u,l=e[t];return(0,o.default)(l).some((function(e,n){var o,s="".concat(t,": index ").concat(n);return null!=(u=(o=i.default.string).isRequired.apply(o,[(0,a.default)({},s,e),s].concat(r)))})),null==u?null:u}],"Modifiers (Set of Strings)");t.default=s},function(e,t,n){"use strict";n.r(t),n.d(t,"addEventListener",(function(){return u}));var r=!("undefined"==typeof window||!window.document||!window.document.createElement);var a=void 0;function o(){return void 0===a&&(a=function(){if(!r)return!1;if(!window.addEventListener||!window.removeEventListener||!Object.defineProperty)return!1;var e=!1;try{var t=Object.defineProperty({},"passive",{get:function(){e=!0}}),n=function(){};window.addEventListener("testPassiveEventSupport",n,t),window.removeEventListener("testPassiveEventSupport",n,t)}catch(e){}return e}()),a}function i(e){e.handlers===e.nextHandlers&&(e.nextHandlers=e.handlers.slice())}function s(e){this.target=e,this.events={}}s.prototype.getEventHandlers=function(e,t){var n,r=String(e)+" "+String((n=t)?!0===n?100:(n.capture<<0)+(n.passive<<1)+(n.once<<2):0);return this.events[r]||(this.events[r]={handlers:[],handleEvent:void 0},this.events[r].nextHandlers=this.events[r].handlers),this.events[r]},s.prototype.handleEvent=function(e,t,n){var r=this.getEventHandlers(e,t);r.handlers=r.nextHandlers,r.handlers.forEach((function(e){e&&e(n)}))},s.prototype.add=function(e,t,n){var r=this,a=this.getEventHandlers(e,n);i(a),0===a.nextHandlers.length&&(a.handleEvent=this.handleEvent.bind(this,e,n),this.target.addEventListener(e,a.handleEvent,n)),a.nextHandlers.push(t);var o=!0;return function(){if(o){o=!1,i(a);var s=a.nextHandlers.indexOf(t);a.nextHandlers.splice(s,1),0===a.nextHandlers.length&&(r.target&&r.target.removeEventListener(e,a.handleEvent,n),a.handleEvent=void 0)}}};function u(e,t,n,r){e.__consolidated_events_handlers__||(e.__consolidated_events_handlers__=new s(e));var a=function(e){if(e)return o()?e:!!e.capture}(r);return e.__consolidated_events_handlers__.add(t,n,a)}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=a.default.isMoment(e)?e:(0,o.default)(e,t);return n?n.year()+"-"+String(n.month()+1).padStart(2,"0"):null};var a=r(n(1)),o=r(n(27))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return!(!a.default.isMoment(e)||!a.default.isMoment(t))&&(!(0,o.default)(e,t)&&!(0,i.default)(e,t))};var a=r(n(1)),o=r(n(36)),i=r(n(21))},function(e,t,n){e.exports=n(262)},,function(e,t,n){"use strict";var r=n(264);e.exports=Function.prototype.bind||r},function(e,t,n){"use strict";e.exports=n(197)},function(e,t,n){var r=n(289),a=n(290),o=n(291);e.exports=function(e){return r(e)||a(e)||o()}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return!(!a.default.isMoment(e)||!a.default.isMoment(t))&&(e.month()===t.month()&&e.year()===t.year())};var a=r(n(1))},function(e,t,n){e.exports=n(299)},function(e,t,n){"use strict";function r(e,t,n){var r="number"==typeof t,a="number"==typeof n,o="number"==typeof e;return r&&a?t+n:r&&o?t+e:r?t:a&&o?n+e:a?n:o?2*e:0}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=e.font.input,a=n.lineHeight,o=n.lineHeight_small,i=e.spacing,s=i.inputPadding,u=i.displayTextPaddingVertical,l=i.displayTextPaddingTop,d=i.displayTextPaddingBottom,c=i.displayTextPaddingVertical_small,f=i.displayTextPaddingTop_small,h=i.displayTextPaddingBottom_small,_=t?o:a,m=t?r(c,f,h):r(u,l,d);return parseInt(_,10)+2*s+m}},function(e,t){e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=a.default.isMoment(e)?e:(0,o.default)(e,t);return n?n.format(i.DISPLAY_FORMAT):null};var a=r(n(1)),o=r(n(27)),i=n(4)},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,r){if(!a.default.isMoment(e))return!1;var f=(0,s.default)(t),h=f+"+"+n;if(r)return u.has(f)||u.set(f,t.clone().startOf("month").startOf("week")),!(0,o.default)(e,u.get(f))&&(l.has(h)||l.set(h,t.clone().endOf("week").add(n-1,"months").endOf("month").endOf("week")),!(0,i.default)(e,l.get(h)));d.has(f)||d.set(f,t.clone().startOf("month"));if((0,o.default)(e,d.get(f)))return!1;c.has(h)||c.set(h,t.clone().add(n-1,"months").endOf("month"));return!(0,i.default)(e,c.get(h))};var a=r(n(1)),o=r(n(36)),i=r(n(45)),s=r(n(44)),u=new Map,l=new Map,d=new Map,c=new Map},function(e,t,n){"use strict";var r=n(192),a=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.PureDayPicker=t.defaultProps=void 0;var o=a(n(11)),i=a(n(12)),s=a(n(50)),u=a(n(13)),l=a(n(8)),d=a(n(7)),c=a(n(0)),f=(a(n(3)),n(6),n(14)),h=a(n(1)),_=a(n(221)),m=a(n(29)),p=a(n(52)),y=n(9),v=(a(n(10)),a(n(19))),g=a(n(207)),b=a(n(317)),M=r(n(320)),D=a(n(322)),k=a(n(208)),L=a(n(206)),w=a(n(323)),T=a(n(56)),S=a(n(51)),Y=(a(n(42)),a(n(31)),a(n(28)),a(n(22)),a(n(35)),n(4));function P(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function O(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?P(Object(n),!0).forEach((function(t){(0,d.default)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):P(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var E={enableOutsideDays:!1,numberOfMonths:2,orientation:Y.HORIZONTAL_ORIENTATION,withPortal:!1,onOutsideClick:function(){},hidden:!1,initialVisibleMonth:function(){return(0,h.default)()},firstDayOfWeek:null,renderCalendarInfo:null,calendarInfoPosition:Y.INFO_POSITION_BOTTOM,hideKeyboardShortcutsPanel:!1,daySize:Y.DAY_SIZE,isRTL:!1,verticalHeight:null,noBorder:!1,transitionDuration:void 0,verticalBorderSpacing:void 0,horizontalMonthPadding:13,renderKeyboardShortcutsButton:void 0,renderKeyboardShortcutsPanel:void 0,dayPickerNavigationInlineStyles:null,disablePrev:!1,disableNext:!1,navPosition:Y.NAV_POSITION_TOP,navPrev:null,navNext:null,renderNavPrevButton:null,renderNavNextButton:null,noNavButtons:!1,noNavNextButton:!1,noNavPrevButton:!1,onPrevMonthClick:function(){},onNextMonthClick:function(){},onMonthChange:function(){},onYearChange:function(){},onGetNextScrollableMonths:function(){},onGetPrevScrollableMonths:function(){},renderMonthText:null,renderMonthElement:null,renderWeekHeaderElement:null,modifiers:{},renderCalendarDay:void 0,renderDayContents:null,onDayClick:function(){},onDayMouseEnter:function(){},onDayMouseLeave:function(){},isFocused:!1,getFirstFocusableDay:null,onBlur:function(){},showKeyboardShortcuts:!1,onTab:function(){},onShiftTab:function(){},monthFormat:"MMMM YYYY",weekDayFormat:"dd",phrases:y.DayPickerPhrases,dayAriaLabelFormat:void 0};t.defaultProps=E;var x=function(e){(0,l.default)(n,e);var t=n.prototype;function n(t){var n;n=e.call(this,t)||this;var r=t.hidden?(0,h.default)():t.initialVisibleMonth(),a=r.clone().startOf("month");t.getFirstFocusableDay&&(a=t.getFirstFocusableDay(r));var o=t.horizontalMonthPadding,i=t.isRTL&&n.isHorizontal()?-(0,k.default)(t.daySize,o):0;return n.hasSetInitialVisibleMonth=!t.hidden,n.state={currentMonthScrollTop:null,currentMonth:r,monthTransition:null,translationValue:i,scrollableMonthMultiple:1,calendarMonthWidth:(0,k.default)(t.daySize,o),focusedDate:!t.hidden||t.isFocused?a:null,nextFocusedDate:null,showKeyboardShortcuts:t.showKeyboardShortcuts,onKeyboardShortcutsPanelClose:function(){},isTouchDevice:(0,m.default)(),withMouseInteractions:!0,calendarInfoWidth:0,monthTitleHeight:null,hasSetHeight:!1},n.setCalendarMonthWeeks(r),n.calendarMonthGridHeight=0,n.setCalendarInfoWidthTimeout=null,n.setCalendarMonthGridHeightTimeout=null,n.onKeyDown=n.onKeyDown.bind((0,u.default)(n)),n.throttledKeyDown=(0,_.default)(n.onFinalKeyDown,200,{trailing:!1}),n.onPrevMonthClick=n.onPrevMonthClick.bind((0,u.default)(n)),n.onPrevMonthTransition=n.onPrevMonthTransition.bind((0,u.default)(n)),n.onNextMonthClick=n.onNextMonthClick.bind((0,u.default)(n)),n.onNextMonthTransition=n.onNextMonthTransition.bind((0,u.default)(n)),n.onMonthChange=n.onMonthChange.bind((0,u.default)(n)),n.onYearChange=n.onYearChange.bind((0,u.default)(n)),n.getNextScrollableMonths=n.getNextScrollableMonths.bind((0,u.default)(n)),n.getPrevScrollableMonths=n.getPrevScrollableMonths.bind((0,u.default)(n)),n.updateStateAfterMonthTransition=n.updateStateAfterMonthTransition.bind((0,u.default)(n)),n.openKeyboardShortcutsPanel=n.openKeyboardShortcutsPanel.bind((0,u.default)(n)),n.closeKeyboardShortcutsPanel=n.closeKeyboardShortcutsPanel.bind((0,u.default)(n)),n.setCalendarInfoRef=n.setCalendarInfoRef.bind((0,u.default)(n)),n.setContainerRef=n.setContainerRef.bind((0,u.default)(n)),n.setTransitionContainerRef=n.setTransitionContainerRef.bind((0,u.default)(n)),n.setMonthTitleHeight=n.setMonthTitleHeight.bind((0,u.default)(n)),n}return t[!c.default.PureComponent&&"shouldComponentUpdate"]=function(e,t){return!(0,o.default)(this.props,e)||!(0,o.default)(this.state,t)},t.componentDidMount=function(){var e=this.props.orientation,t=this.state.currentMonth,n=this.calendarInfo?(0,L.default)(this.calendarInfo,"width",!0,!0):0,r=this.transitionContainer&&e===Y.VERTICAL_SCROLLABLE?this.transitionContainer.scrollHeight-this.transitionContainer.scrollTop:null;this.setState({isTouchDevice:(0,m.default)(),calendarInfoWidth:n,currentMonthScrollTop:r}),this.setCalendarMonthWeeks(t)},t.componentWillReceiveProps=function(e,t){var n=e.hidden,r=e.isFocused,a=e.showKeyboardShortcuts,o=e.onBlur,i=e.orientation,s=e.renderMonthText,u=e.horizontalMonthPadding,l=this.state.currentMonth,d=t.currentMonth;n||this.hasSetInitialVisibleMonth||(this.hasSetInitialVisibleMonth=!0,this.setState({currentMonth:e.initialVisibleMonth()}));var c=this.props,f=c.daySize,h=c.isFocused,_=c.renderMonthText;if(e.daySize!==f&&this.setState({calendarMonthWidth:(0,k.default)(e.daySize,u)}),r!==h)if(r){var m=this.getFocusedDay(l),p=this.state.onKeyboardShortcutsPanelClose;e.showKeyboardShortcuts&&(p=o),this.setState({showKeyboardShortcuts:a,onKeyboardShortcutsPanelClose:p,focusedDate:m,withMouseInteractions:!1})}else this.setState({focusedDate:null});s!==_&&this.setState({monthTitleHeight:null}),i===Y.VERTICAL_SCROLLABLE&&this.transitionContainer&&!(0,S.default)(l,d)&&this.setState({currentMonthScrollTop:this.transitionContainer.scrollHeight-this.transitionContainer.scrollTop})},t.componentWillUpdate=function(){var e=this,t=this.props.transitionDuration;this.calendarInfo&&(this.setCalendarInfoWidthTimeout=setTimeout((function(){var t=e.state.calendarInfoWidth,n=(0,L.default)(e.calendarInfo,"width",!0,!0);t!==n&&e.setState({calendarInfoWidth:n})}),t))},t.componentDidUpdate=function(e,t){var n=this.props,r=n.orientation,a=n.daySize,o=n.isFocused,i=n.numberOfMonths,u=this.state,l=u.currentMonth,d=u.currentMonthScrollTop,c=u.focusedDate,f=u.monthTitleHeight;if(this.isHorizontal()&&(r!==e.orientation||a!==e.daySize)){var h=this.calendarMonthWeeks.slice(1,i+1),_=f+Math.max.apply(Math,[0].concat((0,s.default)(h)))*(a-1)+1;this.adjustDayPickerHeight(_)}e.isFocused||!o||c||this.container.focus(),r===Y.VERTICAL_SCROLLABLE&&!(0,S.default)(t.currentMonth,l)&&d&&this.transitionContainer&&(this.transitionContainer.scrollTop=this.transitionContainer.scrollHeight-d)},t.componentWillUnmount=function(){clearTimeout(this.setCalendarInfoWidthTimeout),clearTimeout(this.setCalendarMonthGridHeightTimeout)},t.onKeyDown=function(e){e.stopPropagation(),Y.MODIFIER_KEY_NAMES.has(e.key)||this.throttledKeyDown(e)},t.onFinalKeyDown=function(e){this.setState({withMouseInteractions:!1});var t=this.props,n=t.onBlur,r=t.onTab,a=t.onShiftTab,o=t.isRTL,i=this.state,s=i.focusedDate,u=i.showKeyboardShortcuts;if(s){var l=s.clone(),d=!1,c=(0,w.default)();switch(e.key){case"ArrowUp":e.preventDefault(),l.subtract(1,"week"),d=this.maybeTransitionPrevMonth(l);break;case"ArrowLeft":e.preventDefault(),o?l.add(1,"day"):l.subtract(1,"day"),d=this.maybeTransitionPrevMonth(l);break;case"Home":e.preventDefault(),l.startOf("week"),d=this.maybeTransitionPrevMonth(l);break;case"PageUp":e.preventDefault(),l.subtract(1,"month"),d=this.maybeTransitionPrevMonth(l);break;case"ArrowDown":e.preventDefault(),l.add(1,"week"),d=this.maybeTransitionNextMonth(l);break;case"ArrowRight":e.preventDefault(),o?l.subtract(1,"day"):l.add(1,"day"),d=this.maybeTransitionNextMonth(l);break;case"End":e.preventDefault(),l.endOf("week"),d=this.maybeTransitionNextMonth(l);break;case"PageDown":e.preventDefault(),l.add(1,"month"),d=this.maybeTransitionNextMonth(l);break;case"?":this.openKeyboardShortcutsPanel((function(){c&&c.focus()}));break;case"Escape":u?this.closeKeyboardShortcutsPanel():n(e);break;case"Tab":e.shiftKey?a():r(e)}d||this.setState({focusedDate:l})}},t.onPrevMonthClick=function(e){e&&e.preventDefault(),this.onPrevMonthTransition()},t.onPrevMonthTransition=function(e){var t,n=this.props,r=n.daySize,a=n.isRTL,o=n.numberOfMonths,i=this.state,u=i.calendarMonthWidth,l=i.monthTitleHeight;if(this.isVertical())t=l+this.calendarMonthWeeks[0]*(r-1)+1;else if(this.isHorizontal()){t=u,a&&(t=-2*u);var d=this.calendarMonthWeeks.slice(0,o),c=l+Math.max.apply(Math,[0].concat((0,s.default)(d)))*(r-1)+1;this.adjustDayPickerHeight(c)}this.setState({monthTransition:"prev",translationValue:t,focusedDate:null,nextFocusedDate:e})},t.onMonthChange=function(e){this.setCalendarMonthWeeks(e),this.calculateAndSetDayPickerHeight(),this.setState({monthTransition:"month_selection",translationValue:1e-5,focusedDate:null,nextFocusedDate:e,currentMonth:e})},t.onYearChange=function(e){this.setCalendarMonthWeeks(e),this.calculateAndSetDayPickerHeight(),this.setState({monthTransition:"year_selection",translationValue:1e-4,focusedDate:null,nextFocusedDate:e,currentMonth:e})},t.onNextMonthClick=function(e){e&&e.preventDefault(),this.onNextMonthTransition()},t.onNextMonthTransition=function(e){var t,n=this.props,r=n.isRTL,a=n.numberOfMonths,o=n.daySize,i=this.state,u=i.calendarMonthWidth,l=i.monthTitleHeight;this.isVertical()&&(t=-(l+this.calendarMonthWeeks[1]*(o-1)+1));if(this.isHorizontal()){t=-u,r&&(t=0);var d=this.calendarMonthWeeks.slice(2,a+2),c=l+Math.max.apply(Math,[0].concat((0,s.default)(d)))*(o-1)+1;this.adjustDayPickerHeight(c)}this.setState({monthTransition:"next",translationValue:t,focusedDate:null,nextFocusedDate:e})},t.getFirstDayOfWeek=function(){var e=this.props.firstDayOfWeek;return null==e?h.default.localeData().firstDayOfWeek():e},t.getWeekHeaders=function(){for(var e=this.props.weekDayFormat,t=this.state.currentMonth,n=this.getFirstDayOfWeek(),r=[],a=0;a<7;a+=1)r.push(t.clone().day((a+n)%7).format(e));return r},t.getFirstVisibleIndex=function(){var e=this.props.orientation,t=this.state.monthTransition;if(e===Y.VERTICAL_SCROLLABLE)return 0;var n=1;return"prev"===t?n-=1:"next"===t&&(n+=1),n},t.getFocusedDay=function(e){var t,n=this.props,r=n.getFirstFocusableDay,a=n.numberOfMonths;return r&&(t=r(e)),!e||t&&(0,T.default)(t,e,a)||(t=e.clone().startOf("month")),t},t.setMonthTitleHeight=function(e){var t=this;this.setState({monthTitleHeight:e},(function(){t.calculateAndSetDayPickerHeight()}))},t.setCalendarMonthWeeks=function(e){var t=this.props.numberOfMonths;this.calendarMonthWeeks=[];for(var n=e.clone().subtract(1,"months"),r=this.getFirstDayOfWeek(),a=0;a<t+2;a+=1){var o=(0,D.default)(n,r);this.calendarMonthWeeks.push(o),n=n.add(1,"months")}},t.setContainerRef=function(e){this.container=e},t.setCalendarInfoRef=function(e){this.calendarInfo=e},t.setTransitionContainerRef=function(e){this.transitionContainer=e},t.getNextScrollableMonths=function(e){var t=this.props.onGetNextScrollableMonths;e&&e.preventDefault(),t&&t(e),this.setState((function(e){return{scrollableMonthMultiple:e.scrollableMonthMultiple+1}}))},t.getPrevScrollableMonths=function(e){var t=this.props,n=t.numberOfMonths,r=t.onGetPrevScrollableMonths;e&&e.preventDefault(),r&&r(e),this.setState((function(e){var t=e.currentMonth,r=e.scrollableMonthMultiple;return{currentMonth:t.clone().subtract(n,"month"),scrollableMonthMultiple:r+1}}))},t.maybeTransitionNextMonth=function(e){var t=this.props.numberOfMonths,n=this.state,r=n.currentMonth,a=n.focusedDate,o=e.month(),i=a.month(),s=(0,T.default)(e,r,t);return o!==i&&!s&&(this.onNextMonthTransition(e),!0)},t.maybeTransitionPrevMonth=function(e){var t=this.props.numberOfMonths,n=this.state,r=n.currentMonth,a=n.focusedDate,o=e.month(),i=a.month(),s=(0,T.default)(e,r,t);return o!==i&&!s&&(this.onPrevMonthTransition(e),!0)},t.isHorizontal=function(){return this.props.orientation===Y.HORIZONTAL_ORIENTATION},t.isVertical=function(){var e=this.props.orientation;return e===Y.VERTICAL_ORIENTATION||e===Y.VERTICAL_SCROLLABLE},t.updateStateAfterMonthTransition=function(){var e=this,t=this.props,n=t.onPrevMonthClick,r=t.onNextMonthClick,a=t.numberOfMonths,o=t.onMonthChange,i=t.onYearChange,u=t.isRTL,l=this.state,d=l.currentMonth,c=l.monthTransition,f=l.focusedDate,h=l.nextFocusedDate,_=l.withMouseInteractions,m=l.calendarMonthWidth;if(c){var p=d.clone(),y=this.getFirstDayOfWeek();if("prev"===c){p.subtract(1,"month"),n&&n(p);var v=p.clone().subtract(1,"month"),g=(0,D.default)(v,y);this.calendarMonthWeeks=[g].concat((0,s.default)(this.calendarMonthWeeks.slice(0,-1)))}else if("next"===c){p.add(1,"month"),r&&r(p);var b=p.clone().add(a,"month"),M=(0,D.default)(b,y);this.calendarMonthWeeks=[].concat((0,s.default)(this.calendarMonthWeeks.slice(1)),[M])}else"month_selection"===c?o&&o(p):"year_selection"===c&&i&&i(p);var k=null;h?k=h:f||_||(k=this.getFocusedDay(p)),this.setState({currentMonth:p,monthTransition:null,translationValue:u&&this.isHorizontal()?-m:0,nextFocusedDate:null,focusedDate:k},(function(){if(_){var t=(0,w.default)();t&&t!==document.body&&e.container.contains(t)&&t.blur&&t.blur()}}))}},t.adjustDayPickerHeight=function(e){var t=this,n=e+23;n!==this.calendarMonthGridHeight&&(this.transitionContainer.style.height="".concat(n,"px"),this.calendarMonthGridHeight||(this.setCalendarMonthGridHeightTimeout=setTimeout((function(){t.setState({hasSetHeight:!0})}),0)),this.calendarMonthGridHeight=n)},t.calculateAndSetDayPickerHeight=function(){var e=this.props,t=e.daySize,n=e.numberOfMonths,r=this.state.monthTitleHeight,a=this.calendarMonthWeeks.slice(1,n+1),o=r+Math.max.apply(Math,[0].concat((0,s.default)(a)))*(t-1)+1;this.isHorizontal()&&this.adjustDayPickerHeight(o)},t.openKeyboardShortcutsPanel=function(e){this.setState({showKeyboardShortcuts:!0,onKeyboardShortcutsPanelClose:e})},t.closeKeyboardShortcutsPanel=function(){var e=this.state.onKeyboardShortcutsPanelClose;e&&e(),this.setState({onKeyboardShortcutsPanelClose:null,showKeyboardShortcuts:!1})},t.renderNavigation=function(e){var t=this.props,n=t.dayPickerNavigationInlineStyles,r=t.disablePrev,a=t.disableNext,o=t.navPosition,i=t.navPrev,s=t.navNext,u=t.noNavButtons,l=t.noNavNextButton,d=t.noNavPrevButton,f=t.orientation,h=t.phrases,_=t.renderNavPrevButton,m=t.renderNavNextButton,p=t.isRTL;if(u)return null;var y=f===Y.VERTICAL_SCROLLABLE?this.getPrevScrollableMonths:this.onPrevMonthClick,v=f===Y.VERTICAL_SCROLLABLE?this.getNextScrollableMonths:this.onNextMonthClick;return c.default.createElement(b.default,{disablePrev:r,disableNext:a,inlineStyles:n,onPrevMonthClick:y,onNextMonthClick:v,navPosition:o,navPrev:i,navNext:s,renderNavPrevButton:_,renderNavNextButton:m,orientation:f,phrases:h,isRTL:p,showNavNextButton:!(l||f===Y.VERTICAL_SCROLLABLE&&"prev_nav"===e),showNavPrevButton:!(d||f===Y.VERTICAL_SCROLLABLE&&"next_nav"===e)})},t.renderWeekHeader=function(e){var t=this.props,n=t.daySize,r=t.horizontalMonthPadding,a=t.orientation,o=t.renderWeekHeaderElement,s=t.styles,u=this.state.calendarMonthWidth,l=a===Y.VERTICAL_SCROLLABLE,d={left:e*u},h={marginLeft:-u/2},_={};this.isHorizontal()?_=d:this.isVertical()&&!l&&(_=h);var m=this.getWeekHeaders().map((function(e){return c.default.createElement("li",(0,i.default)({key:e},(0,f.css)(s.DayPicker_weekHeader_li,{width:n})),o?o(e):c.default.createElement("small",null,e))}));return c.default.createElement("div",(0,i.default)({},(0,f.css)(s.DayPicker_weekHeader,this.isVertical()&&s.DayPicker_weekHeader__vertical,l&&s.DayPicker_weekHeader__verticalScrollable,_,{padding:"0 ".concat(r,"px")}),{key:"week-".concat(e)}),c.default.createElement("ul",(0,f.css)(s.DayPicker_weekHeader_ul),m))},t.render=function(){for(var e=this,t=this.state,n=t.calendarMonthWidth,r=t.currentMonth,a=t.monthTransition,o=t.translationValue,s=t.scrollableMonthMultiple,u=t.focusedDate,l=t.showKeyboardShortcuts,d=t.isTouchDevice,h=t.hasSetHeight,_=t.calendarInfoWidth,m=t.monthTitleHeight,y=this.props,v=y.enableOutsideDays,b=y.numberOfMonths,D=y.orientation,k=y.modifiers,L=y.withPortal,w=y.onDayClick,T=y.onDayMouseEnter,S=y.onDayMouseLeave,P=y.firstDayOfWeek,O=y.renderMonthText,E=y.renderCalendarDay,x=y.renderDayContents,C=y.renderCalendarInfo,j=y.renderMonthElement,H=y.renderKeyboardShortcutsButton,I=y.renderKeyboardShortcutsPanel,N=y.calendarInfoPosition,A=y.hideKeyboardShortcutsPanel,F=y.onOutsideClick,R=y.monthFormat,W=y.daySize,z=y.isFocused,B=y.isRTL,K=y.styles,U=y.theme,V=y.phrases,G=y.verticalHeight,J=y.dayAriaLabelFormat,$=y.noBorder,q=y.transitionDuration,Q=y.verticalBorderSpacing,Z=y.horizontalMonthPadding,X=y.navPosition,ee=U.reactDates.spacing.dayPickerHorizontalPadding,te=this.isHorizontal(),ne=this.isVertical()?1:b,re=[],ae=0;ae<ne;ae+=1)re.push(this.renderWeekHeader(ae));var oe,ie=D===Y.VERTICAL_SCROLLABLE;te?oe=this.calendarMonthGridHeight:!this.isVertical()||ie||L||(oe=G||1.75*n);var se=null!==a,ue=!se&&z,le=M.BOTTOM_RIGHT;this.isVertical()&&(le=L?M.TOP_LEFT:M.TOP_RIGHT);var de=te&&h,ce=N===Y.INFO_POSITION_TOP,fe=N===Y.INFO_POSITION_BOTTOM,he=N===Y.INFO_POSITION_BEFORE,_e=N===Y.INFO_POSITION_AFTER,me=he||_e,pe=C&&c.default.createElement("div",(0,i.default)({ref:this.setCalendarInfoRef},(0,f.css)(me&&K.DayPicker_calendarInfo__horizontal)),C()),ye=C&&me?_:0,ve=this.getFirstVisibleIndex(),ge=n*b+2*ee,be=ge+ye+1,Me={width:te&&ge,height:oe},De={width:te&&ge},ke={width:te&&be,marginLeft:te&&L?-be/2:null,marginTop:te&&L?-n/2:null};return c.default.createElement("div",(0,f.css)(K.DayPicker,te&&K.DayPicker__horizontal,ie&&K.DayPicker__verticalScrollable,te&&L&&K.DayPicker_portal__horizontal,this.isVertical()&&L&&K.DayPicker_portal__vertical,ke,!m&&K.DayPicker__hidden,!$&&K.DayPicker__withBorder),c.default.createElement(p.default,{onOutsideClick:F},(ce||he)&&pe,c.default.createElement("div",(0,f.css)(De,me&&te&&K.DayPicker_wrapper__horizontal),c.default.createElement("div",(0,i.default)({},(0,f.css)(K.DayPicker_weekHeaders,te&&K.DayPicker_weekHeaders__horizontal),{"aria-hidden":"true",role:"presentation"}),re),c.default.createElement("div",(0,i.default)({},(0,f.css)(K.DayPicker_focusRegion),{ref:this.setContainerRef,onClick:function(e){e.stopPropagation()},onKeyDown:this.onKeyDown,onMouseUp:function(){e.setState({withMouseInteractions:!0})},tabIndex:-1,role:"application","aria-roledescription":V.roleDescription,"aria-label":V.calendarLabel}),!ie&&X===Y.NAV_POSITION_TOP&&this.renderNavigation(),c.default.createElement("div",(0,i.default)({},(0,f.css)(K.DayPicker_transitionContainer,de&&K.DayPicker_transitionContainer__horizontal,this.isVertical()&&K.DayPicker_transitionContainer__vertical,ie&&K.DayPicker_transitionContainer__verticalScrollable,Me),{ref:this.setTransitionContainerRef}),ie&&this.renderNavigation("prev_nav"),c.default.createElement(g.default,{setMonthTitleHeight:m?void 0:this.setMonthTitleHeight,translationValue:o,enableOutsideDays:v,firstVisibleMonthIndex:ve,initialMonth:r,isAnimating:se,modifiers:k,orientation:D,numberOfMonths:b*s,onDayClick:w,onDayMouseEnter:T,onDayMouseLeave:S,onMonthChange:this.onMonthChange,onYearChange:this.onYearChange,renderMonthText:O,renderCalendarDay:E,renderDayContents:x,renderMonthElement:j,onMonthTransitionEnd:this.updateStateAfterMonthTransition,monthFormat:R,daySize:W,firstDayOfWeek:P,isFocused:ue,focusedDate:u,phrases:V,isRTL:B,dayAriaLabelFormat:J,transitionDuration:q,verticalBorderSpacing:Q,horizontalMonthPadding:Z}),ie&&this.renderNavigation("next_nav")),!ie&&X===Y.NAV_POSITION_BOTTOM&&this.renderNavigation(),!d&&!A&&c.default.createElement(M.default,{block:this.isVertical()&&!L,buttonLocation:le,showKeyboardShortcutsPanel:l,openKeyboardShortcutsPanel:this.openKeyboardShortcutsPanel,closeKeyboardShortcutsPanel:this.closeKeyboardShortcutsPanel,phrases:V,renderKeyboardShortcutsButton:H,renderKeyboardShortcutsPanel:I}))),(fe||_e)&&pe))},n}(c.default.PureComponent||c.default.Component);t.PureDayPicker=x,x.propTypes={},x.defaultProps=E;var C=(0,f.withStyles)((function(e){var t=e.reactDates,n=t.color,r=t.font,a=t.noScrollBarOnVerticalScrollable,o=t.spacing,i=t.zIndex;return{DayPicker:{background:n.background,position:"relative",textAlign:(0,v.default)("left")},DayPicker__horizontal:{background:n.background},DayPicker__verticalScrollable:{height:"100%"},DayPicker__hidden:{visibility:"hidden"},DayPicker__withBorder:{boxShadow:(0,v.default)("0 2px 6px rgba(0, 0, 0, 0.05), 0 0 0 1px rgba(0, 0, 0, 0.07)"),borderRadius:3},DayPicker_portal__horizontal:{boxShadow:"none",position:"absolute",left:(0,v.default)("50%"),top:"50%"},DayPicker_portal__vertical:{position:"initial"},DayPicker_focusRegion:{outline:"none"},DayPicker_calendarInfo__horizontal:{display:"inline-block",verticalAlign:"top"},DayPicker_wrapper__horizontal:{display:"inline-block",verticalAlign:"top"},DayPicker_weekHeaders:{position:"relative"},DayPicker_weekHeaders__horizontal:{marginLeft:(0,v.default)(o.dayPickerHorizontalPadding)},DayPicker_weekHeader:{color:n.placeholderText,position:"absolute",top:62,zIndex:i+2,textAlign:(0,v.default)("left")},DayPicker_weekHeader__vertical:{left:(0,v.default)("50%")},DayPicker_weekHeader__verticalScrollable:{top:0,display:"table-row",borderBottom:"1px solid ".concat(n.core.border),background:n.background,marginLeft:(0,v.default)(0),left:(0,v.default)(0),width:"100%",textAlign:"center"},DayPicker_weekHeader_ul:{listStyle:"none",margin:"1px 0",paddingLeft:(0,v.default)(0),paddingRight:(0,v.default)(0),fontSize:r.size},DayPicker_weekHeader_li:{display:"inline-block",textAlign:"center"},DayPicker_transitionContainer:{position:"relative",overflow:"hidden",borderRadius:3},DayPicker_transitionContainer__horizontal:{transition:"height 0.2s ease-in-out"},DayPicker_transitionContainer__vertical:{width:"100%"},DayPicker_transitionContainer__verticalScrollable:O({paddingTop:20,height:"100%",position:"absolute",top:0,bottom:0,right:(0,v.default)(0),left:(0,v.default)(0),overflowY:"scroll"},a&&{"-webkitOverflowScrolling":"touch","::-webkit-scrollbar":{"-webkit-appearance":"none",display:"none"}})}}),{pureComponent:void 0!==c.default.PureComponent})(x);t.default=C},function(e,t,n){"use strict";var r=n(5)("%TypeError%"),a=n(237),o=n(38),i=n(18);e.exports=function(e,t){if("Object"!==i(e))throw new r("Assertion failed: Type(O) is not Object");if(!o(t))throw new r("Assertion failed: IsPropertyKey(P) is not true, got "+a(t));return e[t]}},function(e,t,n){"use strict";var r=n(5)("%Array%"),a=!r.isArray&&n(26)("Object.prototype.toString");e.exports=r.isArray||function(e){return"[object Array]"===a(e)}},function(e,t,n){"use strict";e.exports=Number.isNaN||function(e){return e!=e}},function(e,t,n){"use strict";(function(e,r){var a,o=n(248);a="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var i=Object(o.a)(a);t.a=i}).call(this,n(25),n(258)(e))},function(e,t,n){var r=n(259);e.exports=h,e.exports.parse=o,e.exports.compile=function(e,t){return s(o(e,t),t)},e.exports.tokensToFunction=s,e.exports.tokensToRegExp=f;var a=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function o(e,t){for(var n,r=[],o=0,i=0,s="",d=t&&t.delimiter||"/";null!=(n=a.exec(e));){var c=n[0],f=n[1],h=n.index;if(s+=e.slice(i,h),i=h+c.length,f)s+=f[1];else{var _=e[i],m=n[2],p=n[3],y=n[4],v=n[5],g=n[6],b=n[7];s&&(r.push(s),s="");var M=null!=m&&null!=_&&_!==m,D="+"===g||"*"===g,k="?"===g||"*"===g,L=n[2]||d,w=y||v;r.push({name:p||o++,prefix:m||"",delimiter:L,optional:k,repeat:D,partial:M,asterisk:!!b,pattern:w?l(w):b?".*":"[^"+u(L)+"]+?"})}}return i<e.length&&(s+=e.substr(i)),s&&r.push(s),r}function i(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function s(e,t){for(var n=new Array(e.length),a=0;a<e.length;a++)"object"==typeof e[a]&&(n[a]=new RegExp("^(?:"+e[a].pattern+")$",c(t)));return function(t,a){for(var o="",s=t||{},u=(a||{}).pretty?i:encodeURIComponent,l=0;l<e.length;l++){var d=e[l];if("string"!=typeof d){var c,f=s[d.name];if(null==f){if(d.optional){d.partial&&(o+=d.prefix);continue}throw new TypeError('Expected "'+d.name+'" to be defined')}if(r(f)){if(!d.repeat)throw new TypeError('Expected "'+d.name+'" to not repeat, but received `'+JSON.stringify(f)+"`");if(0===f.length){if(d.optional)continue;throw new TypeError('Expected "'+d.name+'" to not be empty')}for(var h=0;h<f.length;h++){if(c=u(f[h]),!n[l].test(c))throw new TypeError('Expected all "'+d.name+'" to match "'+d.pattern+'", but received `'+JSON.stringify(c)+"`");o+=(0===h?d.prefix:d.delimiter)+c}}else{if(c=d.asterisk?encodeURI(f).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):u(f),!n[l].test(c))throw new TypeError('Expected "'+d.name+'" to match "'+d.pattern+'", but received "'+c+'"');o+=d.prefix+c}}else o+=d}return o}}function u(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function l(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function d(e,t){return e.keys=t,e}function c(e){return e&&e.sensitive?"":"i"}function f(e,t,n){r(t)||(n=t||n,t=[]);for(var a=(n=n||{}).strict,o=!1!==n.end,i="",s=0;s<e.length;s++){var l=e[s];if("string"==typeof l)i+=u(l);else{var f=u(l.prefix),h="(?:"+l.pattern+")";t.push(l),l.repeat&&(h+="(?:"+f+h+")*"),i+=h=l.optional?l.partial?f+"("+h+")?":"(?:"+f+"("+h+"))?":f+"("+h+")"}}var _=u(n.delimiter||"/"),m=i.slice(-_.length)===_;return a||(i=(m?i.slice(0,-_.length):i)+"(?:"+_+"(?=$))?"),i+=o?"$":a&&m?"":"(?="+_+"|$)",d(new RegExp("^"+i,c(n)),t)}function h(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return d(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],a=0;a<e.length;a++)r.push(h(e[a],t,n).source);return d(new RegExp("(?:"+r.join("|")+")",c(n)),t)}(e,t,n):function(e,t,n){return f(o(e,n),t,n)}(e,t,n)}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,a=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;function i(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,s,u=i(e),l=1;l<arguments.length;l++){for(var d in n=Object(arguments[l]))a.call(n,d)&&(u[d]=n[d]);if(r){s=r(n);for(var c=0;c<s.length;c++)o.call(n,s[c])&&(u[s[c]]=n[s[c]])}}return u}},function(e,t,n){!function(e){"use strict";e.defineLocale("af",{months:"Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"),weekdays:"Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"),weekdaysShort:"Son_Maa_Din_Woe_Don_Vry_Sat".split("_"),weekdaysMin:"So_Ma_Di_Wo_Do_Vr_Sa".split("_"),meridiemParse:/vm|nm/i,isPM:function(e){return/^nm$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"vm":"VM":n?"nm":"NM"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Vandag om] LT",nextDay:"[Môre om] LT",nextWeek:"dddd [om] LT",lastDay:"[Gister om] LT",lastWeek:"[Laas] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oor %s",past:"%s gelede",s:"'n paar sekondes",ss:"%d sekondes",m:"'n minuut",mm:"%d minute",h:"'n uur",hh:"%d ure",d:"'n dag",dd:"%d dae",M:"'n maand",MM:"%d maande",y:"'n jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},r=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},a={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},o=function(e){return function(t,n,o,i){var s=r(t),u=a[e][r(t)];return 2===s&&(u=u[n?0:1]),u.replace(/%d/i,t)}},i=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar",{months:i,monthsShort:i,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:o("s"),ss:o("s"),m:o("m"),mm:o("m"),h:o("h"),hh:o("h"),d:o("d"),dd:o("d"),M:o("M"),MM:o("M"),y:o("y"),yy:o("y")},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("ar-dz",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"أح_إث_ثلا_أر_خم_جم_سب".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:0,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("ar-kw",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:0,doy:12}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"1",2:"2",3:"3",4:"4",5:"5",6:"6",7:"7",8:"8",9:"9",0:"0"},n=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},r={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},a=function(e){return function(t,a,o,i){var s=n(t),u=r[e][n(t)];return 2===s&&(u=u[a?0:1]),u.replace(/%d/i,t)}},o=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar-ly",{months:o,monthsShort:o,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:a("s"),ss:a("s"),m:a("m"),mm:a("m"),h:a("h"),hh:a("h"),d:a("d"),dd:a("d"),M:a("M"),MM:a("M"),y:a("y"),yy:a("y")},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("ar-ma",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:6,doy:12}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"};e.defineLocale("ar-sa",{months:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:0,doy:6}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("ar-tn",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"-inci",5:"-inci",8:"-inci",70:"-inci",80:"-inci",2:"-nci",7:"-nci",20:"-nci",50:"-nci",3:"-üncü",4:"-üncü",100:"-üncü",6:"-ncı",9:"-uncu",10:"-uncu",30:"-uncu",60:"-ıncı",90:"-ıncı"};e.defineLocale("az",{months:"yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"),monthsShort:"yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"),weekdays:"Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə".split("_"),weekdaysShort:"Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən".split("_"),weekdaysMin:"Bz_BE_ÇA_Çə_CA_Cü_Şə".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[sabah saat] LT",nextWeek:"[gələn həftə] dddd [saat] LT",lastDay:"[dünən] LT",lastWeek:"[keçən həftə] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s əvvəl",s:"birneçə saniyə",ss:"%d saniyə",m:"bir dəqiqə",mm:"%d dəqiqə",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir il",yy:"%d il"},meridiemParse:/gecə|səhər|gündüz|axşam/,isPM:function(e){return/^(gündüz|axşam)$/.test(e)},meridiem:function(e,t,n){return e<4?"gecə":e<12?"səhər":e<17?"gündüz":"axşam"},dayOfMonthOrdinalParse:/\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,ordinal:function(e){if(0===e)return e+"-ıncı";var n=e%10;return e+(t[n]||t[e%100-n]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e,t,n){var r,a;return"m"===n?t?"хвіліна":"хвіліну":"h"===n?t?"гадзіна":"гадзіну":e+" "+(r=+e,a={ss:t?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:t?"хвіліна_хвіліны_хвілін":"хвіліну_хвіліны_хвілін",hh:t?"гадзіна_гадзіны_гадзін":"гадзіну_гадзіны_гадзін",dd:"дзень_дні_дзён",MM:"месяц_месяцы_месяцаў",yy:"год_гады_гадоў"}[n].split("_"),r%10==1&&r%100!=11?a[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?a[1]:a[2])}e.defineLocale("be",{months:{format:"студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня".split("_"),standalone:"студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань".split("_")},monthsShort:"студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж".split("_"),weekdays:{format:"нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу".split("_"),standalone:"нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота".split("_"),isFormat:/\[ ?[Ууў] ?(?:мінулую|наступную)? ?\] ?dddd/},weekdaysShort:"нд_пн_ат_ср_чц_пт_сб".split("_"),weekdaysMin:"нд_пн_ат_ср_чц_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., HH:mm",LLLL:"dddd, D MMMM YYYY г., HH:mm"},calendar:{sameDay:"[Сёння ў] LT",nextDay:"[Заўтра ў] LT",lastDay:"[Учора ў] LT",nextWeek:function(){return"[У] dddd [ў] LT"},lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return"[У мінулую] dddd [ў] LT";case 1:case 2:case 4:return"[У мінулы] dddd [ў] LT"}},sameElse:"L"},relativeTime:{future:"праз %s",past:"%s таму",s:"некалькі секунд",m:t,mm:t,h:t,hh:t,d:"дзень",dd:t,M:"месяц",MM:t,y:"год",yy:t},meridiemParse:/ночы|раніцы|дня|вечара/,isPM:function(e){return/^(дня|вечара)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночы":e<12?"раніцы":e<17?"дня":"вечара"},dayOfMonthOrdinalParse:/\d{1,2}-(і|ы|га)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e%10!=2&&e%10!=3||e%100==12||e%100==13?e+"-ы":e+"-і";case"D":return e+"-га";default:return e}},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("bg",{months:"януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),monthsShort:"янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),weekdays:"неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),weekdaysShort:"нед_пон_вто_сря_чет_пет_съб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Днес в] LT",nextDay:"[Утре в] LT",nextWeek:"dddd [в] LT",lastDay:"[Вчера в] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[В изминалата] dddd [в] LT";case 1:case 2:case 4:case 5:return"[В изминалия] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"след %s",past:"преди %s",s:"няколко секунди",ss:"%d секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дни",M:"месец",MM:"%d месеца",y:"година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&n<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("bm",{months:"Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_Mɛkalo_Zuwɛnkalo_Zuluyekalo_Utikalo_Sɛtanburukalo_ɔkutɔburukalo_Nowanburukalo_Desanburukalo".split("_"),monthsShort:"Zan_Few_Mar_Awi_Mɛ_Zuw_Zul_Uti_Sɛt_ɔku_Now_Des".split("_"),weekdays:"Kari_Ntɛnɛn_Tarata_Araba_Alamisa_Juma_Sibiri".split("_"),weekdaysShort:"Kar_Ntɛ_Tar_Ara_Ala_Jum_Sib".split("_"),weekdaysMin:"Ka_Nt_Ta_Ar_Al_Ju_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"MMMM [tile] D [san] YYYY",LLL:"MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm",LLLL:"dddd MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm"},calendar:{sameDay:"[Bi lɛrɛ] LT",nextDay:"[Sini lɛrɛ] LT",nextWeek:"dddd [don lɛrɛ] LT",lastDay:"[Kunu lɛrɛ] LT",lastWeek:"dddd [tɛmɛnen lɛrɛ] LT",sameElse:"L"},relativeTime:{future:"%s kɔnɔ",past:"a bɛ %s bɔ",s:"sanga dama dama",ss:"sekondi %d",m:"miniti kelen",mm:"miniti %d",h:"lɛrɛ kelen",hh:"lɛrɛ %d",d:"tile kelen",dd:"tile %d",M:"kalo kelen",MM:"kalo %d",y:"san kelen",yy:"san %d"},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"},n={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"};e.defineLocale("bn",{months:"জানুয়ারী_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব_মার্চ_এপ্র_মে_জুন_জুল_আগ_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),weekdaysMin:"রবি_সোম_মঙ্গ_বুধ_বৃহঃ_শুক্র_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm সময়",LLLL:"dddd, D MMMM YYYY, A h:mm সময়"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কয়েক সেকেন্ড",ss:"%d সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(e){return e.replace(/[১২৩৪৫৬৭৮৯০]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/রাত|সকাল|দুপুর|বিকাল|রাত/,meridiemHour:function(e,t){return 12===e&&(e=0),"রাত"===t&&e>=4||"দুপুর"===t&&e<5||"বিকাল"===t?e+12:e},meridiem:function(e,t,n){return e<4?"রাত":e<10?"সকাল":e<17?"দুপুর":e<20?"বিকাল":"রাত"},week:{dow:0,doy:6}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"༡",2:"༢",3:"༣",4:"༤",5:"༥",6:"༦",7:"༧",8:"༨",9:"༩",0:"༠"},n={"༡":"1","༢":"2","༣":"3","༤":"4","༥":"5","༦":"6","༧":"7","༨":"8","༩":"9","༠":"0"};e.defineLocale("bo",{months:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),monthsShort:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),weekdays:"གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་".split("_"),weekdaysShort:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),weekdaysMin:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[དི་རིང] LT",nextDay:"[སང་ཉིན] LT",nextWeek:"[བདུན་ཕྲག་རྗེས་མ], LT",lastDay:"[ཁ་སང] LT",lastWeek:"[བདུན་ཕྲག་མཐའ་མ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ལ་",past:"%s སྔན་ལ",s:"ལམ་སང",ss:"%d སྐར་ཆ།",m:"སྐར་མ་གཅིག",mm:"%d སྐར་མ",h:"ཆུ་ཚོད་གཅིག",hh:"%d ཆུ་ཚོད",d:"ཉིན་གཅིག",dd:"%d ཉིན་",M:"ཟླ་བ་གཅིག",MM:"%d ཟླ་བ",y:"ལོ་གཅིག",yy:"%d ལོ"},preparse:function(e){return e.replace(/[༡༢༣༤༥༦༧༨༩༠]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,meridiemHour:function(e,t){return 12===e&&(e=0),"མཚན་མོ"===t&&e>=4||"ཉིན་གུང"===t&&e<5||"དགོང་དག"===t?e+12:e},meridiem:function(e,t,n){return e<4?"མཚན་མོ":e<10?"ཞོགས་ཀས":e<17?"ཉིན་གུང":e<20?"དགོང་དག":"མཚན་མོ"},week:{dow:0,doy:6}})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e,t,n){return e+" "+function(e,t){return 2===t?function(e){var t={m:"v",b:"v",d:"z"};return void 0===t[e.charAt(0)]?e:t[e.charAt(0)]+e.substring(1)}(e):e}({mm:"munutenn",MM:"miz",dd:"devezh"}[n],e)}e.defineLocale("br",{months:"Genver_C'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"),monthsShort:"Gen_C'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"),weekdays:"Sul_Lun_Meurzh_Merc'her_Yaou_Gwener_Sadorn".split("_"),weekdaysShort:"Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),weekdaysMin:"Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h[e]mm A",LTS:"h[e]mm:ss A",L:"DD/MM/YYYY",LL:"D [a viz] MMMM YYYY",LLL:"D [a viz] MMMM YYYY h[e]mm A",LLLL:"dddd, D [a viz] MMMM YYYY h[e]mm A"},calendar:{sameDay:"[Hiziv da] LT",nextDay:"[Warc'hoazh da] LT",nextWeek:"dddd [da] LT",lastDay:"[Dec'h da] LT",lastWeek:"dddd [paset da] LT",sameElse:"L"},relativeTime:{future:"a-benn %s",past:"%s 'zo",s:"un nebeud segondennoù",ss:"%d eilenn",m:"ur vunutenn",mm:t,h:"un eur",hh:"%d eur",d:"un devezh",dd:t,M:"ur miz",MM:t,y:"ur bloaz",yy:function(e){switch(function e(t){return t>9?e(t%10):t}(e)){case 1:case 3:case 4:case 5:case 9:return e+" bloaz";default:return e+" vloaz"}}},dayOfMonthOrdinalParse:/\d{1,2}(añ|vet)/,ordinal:function(e){return e+(1===e?"añ":"vet")},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e,t,n){var r=e+" ";switch(n){case"ss":return r+=1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi";case"m":return t?"jedna minuta":"jedne minute";case"mm":return r+=1===e?"minuta":2===e||3===e||4===e?"minute":"minuta";case"h":return t?"jedan sat":"jednog sata";case"hh":return r+=1===e?"sat":2===e||3===e||4===e?"sata":"sati";case"dd":return r+=1===e?"dan":"dana";case"MM":return r+=1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci";case"yy":return r+=1===e?"godina":2===e||3===e||4===e?"godine":"godina"}}e.defineLocale("bs",{months:"januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:t,m:t,mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("ca",{months:{standalone:"gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),format:"de gener_de febrer_de març_d'abril_de maig_de juny_de juliol_d'agost_de setembre_d'octubre_de novembre_de desembre".split("_"),isFormat:/D[oD]?(\s)+MMMM/},monthsShort:"gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.".split("_"),monthsParseExact:!0,weekdays:"diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dt._dc._dj._dv._ds.".split("_"),weekdaysMin:"dg_dl_dt_dc_dj_dv_ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [de] YYYY",ll:"D MMM YYYY",LLL:"D MMMM [de] YYYY [a les] H:mm",lll:"D MMM YYYY, H:mm",LLLL:"dddd D MMMM [de] YYYY [a les] H:mm",llll:"ddd D MMM YYYY, H:mm"},calendar:{sameDay:function(){return"[avui a "+(1!==this.hours()?"les":"la")+"] LT"},nextDay:function(){return"[demà a "+(1!==this.hours()?"les":"la")+"] LT"},nextWeek:function(){return"dddd [a "+(1!==this.hours()?"les":"la")+"] LT"},lastDay:function(){return"[ahir a "+(1!==this.hours()?"les":"la")+"] LT"},lastWeek:function(){return"[el] dddd [passat a "+(1!==this.hours()?"les":"la")+"] LT"},sameElse:"L"},relativeTime:{future:"d'aquí %s",past:"fa %s",s:"uns segons",ss:"%d segons",m:"un minut",mm:"%d minuts",h:"una hora",hh:"%d hores",d:"un dia",dd:"%d dies",M:"un mes",MM:"%d mesos",y:"un any",yy:"%d anys"},dayOfMonthOrdinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(e,t){var n=1===e?"r":2===e?"n":3===e?"r":4===e?"t":"è";return"w"!==t&&"W"!==t||(n="a"),e+n},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t="leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"),n="led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_"),r=[/^led/i,/^úno/i,/^bře/i,/^dub/i,/^kvě/i,/^(čvn|červen$|června)/i,/^(čvc|červenec|července)/i,/^srp/i,/^zář/i,/^říj/i,/^lis/i,/^pro/i],a=/^(leden|únor|březen|duben|květen|červenec|července|červen|června|srpen|září|říjen|listopad|prosinec|led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i;function o(e){return e>1&&e<5&&1!=~~(e/10)}function i(e,t,n,r){var a=e+" ";switch(n){case"s":return t||r?"pár sekund":"pár sekundami";case"ss":return t||r?a+(o(e)?"sekundy":"sekund"):a+"sekundami";case"m":return t?"minuta":r?"minutu":"minutou";case"mm":return t||r?a+(o(e)?"minuty":"minut"):a+"minutami";case"h":return t?"hodina":r?"hodinu":"hodinou";case"hh":return t||r?a+(o(e)?"hodiny":"hodin"):a+"hodinami";case"d":return t||r?"den":"dnem";case"dd":return t||r?a+(o(e)?"dny":"dní"):a+"dny";case"M":return t||r?"měsíc":"měsícem";case"MM":return t||r?a+(o(e)?"měsíce":"měsíců"):a+"měsíci";case"y":return t||r?"rok":"rokem";case"yy":return t||r?a+(o(e)?"roky":"let"):a+"lety"}}e.defineLocale("cs",{months:t,monthsShort:n,monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(leden|ledna|února|únor|březen|března|duben|dubna|květen|května|červenec|července|červen|června|srpen|srpna|září|říjen|října|listopadu|listopad|prosinec|prosince)/i,monthsShortStrictRegex:/^(led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),weekdaysShort:"ne_po_út_st_čt_pá_so".split("_"),weekdaysMin:"ne_po_út_st_čt_pá_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm",l:"D. M. YYYY"},calendar:{sameDay:"[dnes v] LT",nextDay:"[zítra v] LT",nextWeek:function(){switch(this.day()){case 0:return"[v neděli v] LT";case 1:case 2:return"[v] dddd [v] LT";case 3:return"[ve středu v] LT";case 4:return"[ve čtvrtek v] LT";case 5:return"[v pátek v] LT";case 6:return"[v sobotu v] LT"}},lastDay:"[včera v] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulou neděli v] LT";case 1:case 2:return"[minulé] dddd [v] LT";case 3:return"[minulou středu v] LT";case 4:case 5:return"[minulý] dddd [v] LT";case 6:return"[minulou sobotu v] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"před %s",s:i,ss:i,m:i,mm:i,h:i,hh:i,d:i,dd:i,M:i,MM:i,y:i,yy:i},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("cv",{months:"кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав".split("_"),monthsShort:"кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш".split("_"),weekdays:"вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун".split("_"),weekdaysShort:"выр_тун_ытл_юн_кӗҫ_эрн_шӑм".split("_"),weekdaysMin:"вр_тн_ыт_юн_кҫ_эр_шм".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]",LLL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm",LLLL:"dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm"},calendar:{sameDay:"[Паян] LT [сехетре]",nextDay:"[Ыран] LT [сехетре]",lastDay:"[Ӗнер] LT [сехетре]",nextWeek:"[Ҫитес] dddd LT [сехетре]",lastWeek:"[Иртнӗ] dddd LT [сехетре]",sameElse:"L"},relativeTime:{future:function(e){return e+(/сехет$/i.exec(e)?"рен":/ҫул$/i.exec(e)?"тан":"ран")},past:"%s каялла",s:"пӗр-ик ҫеккунт",ss:"%d ҫеккунт",m:"пӗр минут",mm:"%d минут",h:"пӗр сехет",hh:"%d сехет",d:"пӗр кун",dd:"%d кун",M:"пӗр уйӑх",MM:"%d уйӑх",y:"пӗр ҫул",yy:"%d ҫул"},dayOfMonthOrdinalParse:/\d{1,2}-мӗш/,ordinal:"%d-мӗш",week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("cy",{months:"Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"),monthsShort:"Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"),weekdays:"Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"),weekdaysShort:"Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"),weekdaysMin:"Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Heddiw am] LT",nextDay:"[Yfory am] LT",nextWeek:"dddd [am] LT",lastDay:"[Ddoe am] LT",lastWeek:"dddd [diwethaf am] LT",sameElse:"L"},relativeTime:{future:"mewn %s",past:"%s yn ôl",s:"ychydig eiliadau",ss:"%d eiliad",m:"munud",mm:"%d munud",h:"awr",hh:"%d awr",d:"diwrnod",dd:"%d diwrnod",M:"mis",MM:"%d mis",y:"blwyddyn",yy:"%d flynedd"},dayOfMonthOrdinalParse:/\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,ordinal:function(e){var t="";return e>20?t=40===e||50===e||60===e||80===e||100===e?"fed":"ain":e>0&&(t=["","af","il","ydd","ydd","ed","ed","ed","fed","fed","fed","eg","fed","eg","eg","fed","eg","eg","fed","eg","fed"][e]),e+t},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("da",{months:"januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"søn_man_tir_ons_tor_fre_lør".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd [d.] D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"på dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[i] dddd[s kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"få sekunder",ss:"%d sekunder",m:"et minut",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dage",M:"en måned",MM:"%d måneder",y:"et år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?a[n][0]:a[n][1]}e.defineLocale("de",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?a[n][0]:a[n][1]}e.defineLocale("de-at",{months:"Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jän._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?a[n][0]:a[n][1]}e.defineLocale("de-ch",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t=["ޖެނުއަރީ","ފެބްރުއަރީ","މާރިޗު","އޭޕްރީލު","މޭ","ޖޫން","ޖުލައި","އޯގަސްޓު","ސެޕްޓެމްބަރު","އޮކްޓޯބަރު","ނޮވެމްބަރު","ޑިސެމްބަރު"],n=["އާދިއްތަ","ހޯމަ","އަންގާރަ","ބުދަ","ބުރާސްފަތި","ހުކުރު","ހޮނިހިރު"];e.defineLocale("dv",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:"އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/M/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/މކ|މފ/,isPM:function(e){return"މފ"===e},meridiem:function(e,t,n){return e<12?"މކ":"މފ"},calendar:{sameDay:"[މިއަދު] LT",nextDay:"[މާދަމާ] LT",nextWeek:"dddd LT",lastDay:"[އިއްޔެ] LT",lastWeek:"[ފާއިތުވި] dddd LT",sameElse:"L"},relativeTime:{future:"ތެރޭގައި %s",past:"ކުރިން %s",s:"ސިކުންތުކޮޅެއް",ss:"d% ސިކުންތު",m:"މިނިޓެއް",mm:"މިނިޓު %d",h:"ގަޑިއިރެއް",hh:"ގަޑިއިރު %d",d:"ދުވަހެއް",dd:"ދުވަސް %d",M:"މަހެއް",MM:"މަސް %d",y:"އަހަރެއް",yy:"އަހަރު %d"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:7,doy:12}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("el",{monthsNominativeEl:"Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),monthsGenitiveEl:"Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),months:function(e,t){return e?"string"==typeof t&&/D/.test(t.substring(0,t.indexOf("MMMM")))?this._monthsGenitiveEl[e.month()]:this._monthsNominativeEl[e.month()]:this._monthsNominativeEl},monthsShort:"Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),weekdays:"Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),weekdaysShort:"Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),weekdaysMin:"Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),meridiem:function(e,t,n){return e>11?n?"μμ":"ΜΜ":n?"πμ":"ΠΜ"},isPM:function(e){return"μ"===(e+"").toLowerCase()[0]},meridiemParse:/[ΠΜ]\.?Μ?\.?/i,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendarEl:{sameDay:"[Σήμερα {}] LT",nextDay:"[Αύριο {}] LT",nextWeek:"dddd [{}] LT",lastDay:"[Χθες {}] LT",lastWeek:function(){switch(this.day()){case 6:return"[το προηγούμενο] dddd [{}] LT";default:return"[την προηγούμενη] dddd [{}] LT"}},sameElse:"L"},calendar:function(e,t){var n,r=this._calendarEl[e],a=t&&t.hours();return((n=r)instanceof Function||"[object Function]"===Object.prototype.toString.call(n))&&(r=r.apply(t)),r.replace("{}",a%12==1?"στη":"στις")},relativeTime:{future:"σε %s",past:"%s πριν",s:"λίγα δευτερόλεπτα",ss:"%d δευτερόλεπτα",m:"ένα λεπτό",mm:"%d λεπτά",h:"μία ώρα",hh:"%d ώρες",d:"μία μέρα",dd:"%d μέρες",M:"ένας μήνας",MM:"%d μήνες",y:"ένας χρόνος",yy:"%d χρόνια"},dayOfMonthOrdinalParse:/\d{1,2}η/,ordinal:"%dη",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-SG",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-au",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-ca",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"YYYY-MM-DD",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-gb",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-ie",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-il",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("en-nz",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("eo",{months:"januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec".split("_"),weekdays:"dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato".split("_"),weekdaysShort:"dim_lun_mard_merk_ĵaŭ_ven_sab".split("_"),weekdaysMin:"di_lu_ma_me_ĵa_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D[-a de] MMMM, YYYY",LLL:"D[-a de] MMMM, YYYY HH:mm",LLLL:"dddd, [la] D[-a de] MMMM, YYYY HH:mm"},meridiemParse:/[ap]\.t\.m/i,isPM:function(e){return"p"===e.charAt(0).toLowerCase()},meridiem:function(e,t,n){return e>11?n?"p.t.m.":"P.T.M.":n?"a.t.m.":"A.T.M."},calendar:{sameDay:"[Hodiaŭ je] LT",nextDay:"[Morgaŭ je] LT",nextWeek:"dddd [je] LT",lastDay:"[Hieraŭ je] LT",lastWeek:"[pasinta] dddd [je] LT",sameElse:"L"},relativeTime:{future:"post %s",past:"antaŭ %s",s:"sekundoj",ss:"%d sekundoj",m:"minuto",mm:"%d minutoj",h:"horo",hh:"%d horoj",d:"tago",dd:"%d tagoj",M:"monato",MM:"%d monatoj",y:"jaro",yy:"%d jaroj"},dayOfMonthOrdinalParse:/\d{1,2}a/,ordinal:"%da",week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-do",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-us",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"MM/DD/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:0,doy:6}})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={s:["mõne sekundi","mõni sekund","paar sekundit"],ss:[e+"sekundi",e+"sekundit"],m:["ühe minuti","üks minut"],mm:[e+" minuti",e+" minutit"],h:["ühe tunni","tund aega","üks tund"],hh:[e+" tunni",e+" tundi"],d:["ühe päeva","üks päev"],M:["kuu aja","kuu aega","üks kuu"],MM:[e+" kuu",e+" kuud"],y:["ühe aasta","aasta","üks aasta"],yy:[e+" aasta",e+" aastat"]};return t?a[n][2]?a[n][2]:a[n][1]:r?a[n][0]:a[n][1]}e.defineLocale("et",{months:"jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"),monthsShort:"jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"),weekdays:"pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split("_"),weekdaysShort:"P_E_T_K_N_R_L".split("_"),weekdaysMin:"P_E_T_K_N_R_L".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[Täna,] LT",nextDay:"[Homme,] LT",nextWeek:"[Järgmine] dddd LT",lastDay:"[Eile,] LT",lastWeek:"[Eelmine] dddd LT",sameElse:"L"},relativeTime:{future:"%s pärast",past:"%s tagasi",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:"%d päeva",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("eu",{months:"urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"),monthsShort:"urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"),monthsParseExact:!0,weekdays:"igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"),weekdaysShort:"ig._al._ar._az._og._ol._lr.".split("_"),weekdaysMin:"ig_al_ar_az_og_ol_lr".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY[ko] MMMM[ren] D[a]",LLL:"YYYY[ko] MMMM[ren] D[a] HH:mm",LLLL:"dddd, YYYY[ko] MMMM[ren] D[a] HH:mm",l:"YYYY-M-D",ll:"YYYY[ko] MMM D[a]",lll:"YYYY[ko] MMM D[a] HH:mm",llll:"ddd, YYYY[ko] MMM D[a] HH:mm"},calendar:{sameDay:"[gaur] LT[etan]",nextDay:"[bihar] LT[etan]",nextWeek:"dddd LT[etan]",lastDay:"[atzo] LT[etan]",lastWeek:"[aurreko] dddd LT[etan]",sameElse:"L"},relativeTime:{future:"%s barru",past:"duela %s",s:"segundo batzuk",ss:"%d segundo",m:"minutu bat",mm:"%d minutu",h:"ordu bat",hh:"%d ordu",d:"egun bat",dd:"%d egun",M:"hilabete bat",MM:"%d hilabete",y:"urte bat",yy:"%d urte"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"۱",2:"۲",3:"۳",4:"۴",5:"۵",6:"۶",7:"۷",8:"۸",9:"۹",0:"۰"},n={"۱":"1","۲":"2","۳":"3","۴":"4","۵":"5","۶":"6","۷":"7","۸":"8","۹":"9","۰":"0"};e.defineLocale("fa",{months:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),monthsShort:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),weekdays:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysShort:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysMin:"ی_د_س_چ_پ_ج_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/قبل از ظهر|بعد از ظهر/,isPM:function(e){return/بعد از ظهر/.test(e)},meridiem:function(e,t,n){return e<12?"قبل از ظهر":"بعد از ظهر"},calendar:{sameDay:"[امروز ساعت] LT",nextDay:"[فردا ساعت] LT",nextWeek:"dddd [ساعت] LT",lastDay:"[دیروز ساعت] LT",lastWeek:"dddd [پیش] [ساعت] LT",sameElse:"L"},relativeTime:{future:"در %s",past:"%s پیش",s:"چند ثانیه",ss:"ثانیه d%",m:"یک دقیقه",mm:"%d دقیقه",h:"یک ساعت",hh:"%d ساعت",d:"یک روز",dd:"%d روز",M:"یک ماه",MM:"%d ماه",y:"یک سال",yy:"%d سال"},preparse:function(e){return e.replace(/[۰-۹]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},dayOfMonthOrdinalParse:/\d{1,2}م/,ordinal:"%dم",week:{dow:6,doy:12}})}(n(1))},function(e,t,n){!function(e){"use strict";var t="nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" "),n=["nolla","yhden","kahden","kolmen","neljän","viiden","kuuden",t[7],t[8],t[9]];function r(e,r,a,o){var i="";switch(a){case"s":return o?"muutaman sekunnin":"muutama sekunti";case"ss":return o?"sekunnin":"sekuntia";case"m":return o?"minuutin":"minuutti";case"mm":i=o?"minuutin":"minuuttia";break;case"h":return o?"tunnin":"tunti";case"hh":i=o?"tunnin":"tuntia";break;case"d":return o?"päivän":"päivä";case"dd":i=o?"päivän":"päivää";break;case"M":return o?"kuukauden":"kuukausi";case"MM":i=o?"kuukauden":"kuukautta";break;case"y":return o?"vuoden":"vuosi";case"yy":i=o?"vuoden":"vuotta"}return i=function(e,r){return e<10?r?n[e]:t[e]:e}(e,o)+" "+i}e.defineLocale("fi",{months:"tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),monthsShort:"tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),weekdays:"sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),weekdaysShort:"su_ma_ti_ke_to_pe_la".split("_"),weekdaysMin:"su_ma_ti_ke_to_pe_la".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"Do MMMM[ta] YYYY",LLL:"Do MMMM[ta] YYYY, [klo] HH.mm",LLLL:"dddd, Do MMMM[ta] YYYY, [klo] HH.mm",l:"D.M.YYYY",ll:"Do MMM YYYY",lll:"Do MMM YYYY, [klo] HH.mm",llll:"ddd, Do MMM YYYY, [klo] HH.mm"},calendar:{sameDay:"[tänään] [klo] LT",nextDay:"[huomenna] [klo] LT",nextWeek:"dddd [klo] LT",lastDay:"[eilen] [klo] LT",lastWeek:"[viime] dddd[na] [klo] LT",sameElse:"L"},relativeTime:{future:"%s päästä",past:"%s sitten",s:r,ss:r,m:r,mm:r,h:r,hh:r,d:r,dd:r,M:r,MM:r,y:r,yy:r},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("fo",{months:"januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur".split("_"),weekdaysShort:"sun_mán_týs_mik_hós_frí_ley".split("_"),weekdaysMin:"su_má_tý_mi_hó_fr_le".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D. MMMM, YYYY HH:mm"},calendar:{sameDay:"[Í dag kl.] LT",nextDay:"[Í morgin kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[Í gjár kl.] LT",lastWeek:"[síðstu] dddd [kl] LT",sameElse:"L"},relativeTime:{future:"um %s",past:"%s síðani",s:"fá sekund",ss:"%d sekundir",m:"ein minuttur",mm:"%d minuttir",h:"ein tími",hh:"%d tímar",d:"ein dagur",dd:"%d dagar",M:"ein mánaður",MM:"%d mánaðir",y:"eitt ár",yy:"%d ár"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("fr",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|)/,ordinal:function(e,t){switch(t){case"D":return e+(1===e?"er":"");default:case"M":case"Q":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("fr-ca",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("fr-ch",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.".split("_"),n="jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_");e.defineLocale("fy",{months:"jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsParseExact:!0,weekdays:"snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon".split("_"),weekdaysShort:"si._mo._ti._wo._to._fr._so.".split("_"),weekdaysMin:"Si_Mo_Ti_Wo_To_Fr_So".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[hjoed om] LT",nextDay:"[moarn om] LT",nextWeek:"dddd [om] LT",lastDay:"[juster om] LT",lastWeek:"[ôfrûne] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oer %s",past:"%s lyn",s:"in pear sekonden",ss:"%d sekonden",m:"ien minút",mm:"%d minuten",h:"ien oere",hh:"%d oeren",d:"ien dei",dd:"%d dagen",M:"ien moanne",MM:"%d moannen",y:"ien jier",yy:"%d jierren"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("ga",{months:["Eanáir","Feabhra","Márta","Aibreán","Bealtaine","Méitheamh","Iúil","Lúnasa","Meán Fómhair","Deaireadh Fómhair","Samhain","Nollaig"],monthsShort:["Eaná","Feab","Márt","Aibr","Beal","Méit","Iúil","Lúna","Meán","Deai","Samh","Noll"],monthsParseExact:!0,weekdays:["Dé Domhnaigh","Dé Luain","Dé Máirt","Dé Céadaoin","Déardaoin","Dé hAoine","Dé Satharn"],weekdaysShort:["Dom","Lua","Mái","Céa","Déa","hAo","Sat"],weekdaysMin:["Do","Lu","Má","Ce","Dé","hA","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Inniu ag] LT",nextDay:"[Amárach ag] LT",nextWeek:"dddd [ag] LT",lastDay:"[Inné aig] LT",lastWeek:"dddd [seo caite] [ag] LT",sameElse:"L"},relativeTime:{future:"i %s",past:"%s ó shin",s:"cúpla soicind",ss:"%d soicind",m:"nóiméad",mm:"%d nóiméad",h:"uair an chloig",hh:"%d uair an chloig",d:"lá",dd:"%d lá",M:"mí",MM:"%d mí",y:"bliain",yy:"%d bliain"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){return e+(1===e?"d":e%10==2?"na":"mh")},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("gd",{months:["Am Faoilleach","An Gearran","Am Màrt","An Giblean","An Cèitean","An t-Ògmhios","An t-Iuchar","An Lùnastal","An t-Sultain","An Dàmhair","An t-Samhain","An Dùbhlachd"],monthsShort:["Faoi","Gear","Màrt","Gibl","Cèit","Ògmh","Iuch","Lùn","Sult","Dàmh","Samh","Dùbh"],monthsParseExact:!0,weekdays:["Didòmhnaich","Diluain","Dimàirt","Diciadain","Diardaoin","Dihaoine","Disathairne"],weekdaysShort:["Did","Dil","Dim","Dic","Dia","Dih","Dis"],weekdaysMin:["Dò","Lu","Mà","Ci","Ar","Ha","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[An-diugh aig] LT",nextDay:"[A-màireach aig] LT",nextWeek:"dddd [aig] LT",lastDay:"[An-dè aig] LT",lastWeek:"dddd [seo chaidh] [aig] LT",sameElse:"L"},relativeTime:{future:"ann an %s",past:"bho chionn %s",s:"beagan diogan",ss:"%d diogan",m:"mionaid",mm:"%d mionaidean",h:"uair",hh:"%d uairean",d:"latha",dd:"%d latha",M:"mìos",MM:"%d mìosan",y:"bliadhna",yy:"%d bliadhna"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){return e+(1===e?"d":e%10==2?"na":"mh")},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("gl",{months:"xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro".split("_"),monthsShort:"xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"domingo_luns_martes_mércores_xoves_venres_sábado".split("_"),weekdaysShort:"dom._lun._mar._mér._xov._ven._sáb.".split("_"),weekdaysMin:"do_lu_ma_mé_xo_ve_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoxe "+(1!==this.hours()?"ás":"á")+"] LT"},nextDay:function(){return"[mañá "+(1!==this.hours()?"ás":"á")+"] LT"},nextWeek:function(){return"dddd ["+(1!==this.hours()?"ás":"a")+"] LT"},lastDay:function(){return"[onte "+(1!==this.hours()?"á":"a")+"] LT"},lastWeek:function(){return"[o] dddd [pasado "+(1!==this.hours()?"ás":"a")+"] LT"},sameElse:"L"},relativeTime:{future:function(e){return 0===e.indexOf("un")?"n"+e:"en "+e},past:"hai %s",s:"uns segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"unha hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={s:["thodde secondanim","thodde second"],ss:[e+" secondanim",e+" second"],m:["eka mintan","ek minute"],mm:[e+" mintanim",e+" mintam"],h:["eka voran","ek vor"],hh:[e+" voranim",e+" voram"],d:["eka disan","ek dis"],dd:[e+" disanim",e+" dis"],M:["eka mhoinean","ek mhoino"],MM:[e+" mhoineanim",e+" mhoine"],y:["eka vorsan","ek voros"],yy:[e+" vorsanim",e+" vorsam"]};return t?a[n][0]:a[n][1]}e.defineLocale("gom-latn",{months:"Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr".split("_"),monthsShort:"Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Aitar_Somar_Mongllar_Budvar_Brestar_Sukrar_Son'var".split("_"),weekdaysShort:"Ait._Som._Mon._Bud._Bre._Suk._Son.".split("_"),weekdaysMin:"Ai_Sm_Mo_Bu_Br_Su_Sn".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"A h:mm [vazta]",LTS:"A h:mm:ss [vazta]",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY A h:mm [vazta]",LLLL:"dddd, MMMM[achea] Do, YYYY, A h:mm [vazta]",llll:"ddd, D MMM YYYY, A h:mm [vazta]"},calendar:{sameDay:"[Aiz] LT",nextDay:"[Faleam] LT",nextWeek:"[Ieta to] dddd[,] LT",lastDay:"[Kal] LT",lastWeek:"[Fatlo] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%s",past:"%s adim",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}(er)/,ordinal:function(e,t){switch(t){case"D":return e+"er";default:case"M":case"Q":case"DDD":case"d":case"w":case"W":return e}},week:{dow:1,doy:4},meridiemParse:/rati|sokalli|donparam|sanje/,meridiemHour:function(e,t){return 12===e&&(e=0),"rati"===t?e<4?e:e+12:"sokalli"===t?e:"donparam"===t?e>12?e:e+12:"sanje"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"rati":e<12?"sokalli":e<16?"donparam":e<20?"sanje":"rati"}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"૧",2:"૨",3:"૩",4:"૪",5:"૫",6:"૬",7:"૭",8:"૮",9:"૯",0:"૦"},n={"૧":"1","૨":"2","૩":"3","૪":"4","૫":"5","૬":"6","૭":"7","૮":"8","૯":"9","૦":"0"};e.defineLocale("gu",{months:"જાન્યુઆરી_ફેબ્રુઆરી_માર્ચ_એપ્રિલ_મે_જૂન_જુલાઈ_ઑગસ્ટ_સપ્ટેમ્બર_ઑક્ટ્બર_નવેમ્બર_ડિસેમ્બર".split("_"),monthsShort:"જાન્યુ._ફેબ્રુ._માર્ચ_એપ્રિ._મે_જૂન_જુલા._ઑગ._સપ્ટે._ઑક્ટ્._નવે._ડિસે.".split("_"),monthsParseExact:!0,weekdays:"રવિવાર_સોમવાર_મંગળવાર_બુધ્વાર_ગુરુવાર_શુક્રવાર_શનિવાર".split("_"),weekdaysShort:"રવિ_સોમ_મંગળ_બુધ્_ગુરુ_શુક્ર_શનિ".split("_"),weekdaysMin:"ર_સો_મં_બુ_ગુ_શુ_શ".split("_"),longDateFormat:{LT:"A h:mm વાગ્યે",LTS:"A h:mm:ss વાગ્યે",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm વાગ્યે",LLLL:"dddd, D MMMM YYYY, A h:mm વાગ્યે"},calendar:{sameDay:"[આજ] LT",nextDay:"[કાલે] LT",nextWeek:"dddd, LT",lastDay:"[ગઇકાલે] LT",lastWeek:"[પાછલા] dddd, LT",sameElse:"L"},relativeTime:{future:"%s મા",past:"%s પેહલા",s:"અમુક પળો",ss:"%d સેકંડ",m:"એક મિનિટ",mm:"%d મિનિટ",h:"એક કલાક",hh:"%d કલાક",d:"એક દિવસ",dd:"%d દિવસ",M:"એક મહિનો",MM:"%d મહિનો",y:"એક વર્ષ",yy:"%d વર્ષ"},preparse:function(e){return e.replace(/[૧૨૩૪૫૬૭૮૯૦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/રાત|બપોર|સવાર|સાંજ/,meridiemHour:function(e,t){return 12===e&&(e=0),"રાત"===t?e<4?e:e+12:"સવાર"===t?e:"બપોર"===t?e>=10?e:e+12:"સાંજ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"રાત":e<10?"સવાર":e<17?"બપોર":e<20?"સાંજ":"રાત"},week:{dow:0,doy:6}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("he",{months:"ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),monthsShort:"ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),weekdays:"ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),weekdaysShort:"א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),weekdaysMin:"א_ב_ג_ד_ה_ו_ש".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [ב]MMMM YYYY",LLL:"D [ב]MMMM YYYY HH:mm",LLLL:"dddd, D [ב]MMMM YYYY HH:mm",l:"D/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[היום ב־]LT",nextDay:"[מחר ב־]LT",nextWeek:"dddd [בשעה] LT",lastDay:"[אתמול ב־]LT",lastWeek:"[ביום] dddd [האחרון בשעה] LT",sameElse:"L"},relativeTime:{future:"בעוד %s",past:"לפני %s",s:"מספר שניות",ss:"%d שניות",m:"דקה",mm:"%d דקות",h:"שעה",hh:function(e){return 2===e?"שעתיים":e+" שעות"},d:"יום",dd:function(e){return 2===e?"יומיים":e+" ימים"},M:"חודש",MM:function(e){return 2===e?"חודשיים":e+" חודשים"},y:"שנה",yy:function(e){return 2===e?"שנתיים":e%10==0&&10!==e?e+" שנה":e+" שנים"}},meridiemParse:/אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,isPM:function(e){return/^(אחה"צ|אחרי הצהריים|בערב)$/.test(e)},meridiem:function(e,t,n){return e<5?"לפנות בוקר":e<10?"בבוקר":e<12?n?'לפנה"צ':"לפני הצהריים":e<18?n?'אחה"צ':"אחרי הצהריים":"בערב"}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};e.defineLocale("hi",{months:"जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"),monthsShort:"जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"),monthsParseExact:!0,weekdays:"रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm बजे",LTS:"A h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm बजे",LLLL:"dddd, D MMMM YYYY, A h:mm बजे"},calendar:{sameDay:"[आज] LT",nextDay:"[कल] LT",nextWeek:"dddd, LT",lastDay:"[कल] LT",lastWeek:"[पिछले] dddd, LT",sameElse:"L"},relativeTime:{future:"%s में",past:"%s पहले",s:"कुछ ही क्षण",ss:"%d सेकंड",m:"एक मिनट",mm:"%d मिनट",h:"एक घंटा",hh:"%d घंटे",d:"एक दिन",dd:"%d दिन",M:"एक महीने",MM:"%d महीने",y:"एक वर्ष",yy:"%d वर्ष"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/रात|सुबह|दोपहर|शाम/,meridiemHour:function(e,t){return 12===e&&(e=0),"रात"===t?e<4?e:e+12:"सुबह"===t?e:"दोपहर"===t?e>=10?e:e+12:"शाम"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"रात":e<10?"सुबह":e<17?"दोपहर":e<20?"शाम":"रात"},week:{dow:0,doy:6}})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e,t,n){var r=e+" ";switch(n){case"ss":return r+=1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi";case"m":return t?"jedna minuta":"jedne minute";case"mm":return r+=1===e?"minuta":2===e||3===e||4===e?"minute":"minuta";case"h":return t?"jedan sat":"jednog sata";case"hh":return r+=1===e?"sat":2===e||3===e||4===e?"sata":"sati";case"dd":return r+=1===e?"dan":"dana";case"MM":return r+=1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci";case"yy":return r+=1===e?"godina":2===e||3===e||4===e?"godine":"godina"}}e.defineLocale("hr",{months:{format:"siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca".split("_"),standalone:"siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_")},monthsShort:"sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:t,m:t,mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";var t="vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" ");function n(e,t,n,r){var a=e;switch(n){case"s":return r||t?"néhány másodperc":"néhány másodperce";case"ss":return a+(r||t)?" másodperc":" másodperce";case"m":return"egy"+(r||t?" perc":" perce");case"mm":return a+(r||t?" perc":" perce");case"h":return"egy"+(r||t?" óra":" órája");case"hh":return a+(r||t?" óra":" órája");case"d":return"egy"+(r||t?" nap":" napja");case"dd":return a+(r||t?" nap":" napja");case"M":return"egy"+(r||t?" hónap":" hónapja");case"MM":return a+(r||t?" hónap":" hónapja");case"y":return"egy"+(r||t?" év":" éve");case"yy":return a+(r||t?" év":" éve")}return""}function r(e){return(e?"":"[múlt] ")+"["+t[this.day()]+"] LT[-kor]"}e.defineLocale("hu",{months:"január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),monthsShort:"jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec".split("_"),weekdays:"vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),weekdaysShort:"vas_hét_kedd_sze_csüt_pén_szo".split("_"),weekdaysMin:"v_h_k_sze_cs_p_szo".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY. MMMM D.",LLL:"YYYY. MMMM D. H:mm",LLLL:"YYYY. MMMM D., dddd H:mm"},meridiemParse:/de|du/i,isPM:function(e){return"u"===e.charAt(1).toLowerCase()},meridiem:function(e,t,n){return e<12?!0===n?"de":"DE":!0===n?"du":"DU"},calendar:{sameDay:"[ma] LT[-kor]",nextDay:"[holnap] LT[-kor]",nextWeek:function(){return r.call(this,!0)},lastDay:"[tegnap] LT[-kor]",lastWeek:function(){return r.call(this,!1)},sameElse:"L"},relativeTime:{future:"%s múlva",past:"%s",s:n,ss:n,m:n,mm:n,h:n,hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("hy-am",{months:{format:"հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի".split("_"),standalone:"հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր".split("_")},monthsShort:"հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ".split("_"),weekdays:"կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ".split("_"),weekdaysShort:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),weekdaysMin:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY թ.",LLL:"D MMMM YYYY թ., HH:mm",LLLL:"dddd, D MMMM YYYY թ., HH:mm"},calendar:{sameDay:"[այսօր] LT",nextDay:"[վաղը] LT",lastDay:"[երեկ] LT",nextWeek:function(){return"dddd [օրը ժամը] LT"},lastWeek:function(){return"[անցած] dddd [օրը ժամը] LT"},sameElse:"L"},relativeTime:{future:"%s հետո",past:"%s առաջ",s:"մի քանի վայրկյան",ss:"%d վայրկյան",m:"րոպե",mm:"%d րոպե",h:"ժամ",hh:"%d ժամ",d:"օր",dd:"%d օր",M:"ամիս",MM:"%d ամիս",y:"տարի",yy:"%d տարի"},meridiemParse:/գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,isPM:function(e){return/^(ցերեկվա|երեկոյան)$/.test(e)},meridiem:function(e){return e<4?"գիշերվա":e<12?"առավոտվա":e<17?"ցերեկվա":"երեկոյան"},dayOfMonthOrdinalParse:/\d{1,2}|\d{1,2}-(ին|րդ)/,ordinal:function(e,t){switch(t){case"DDD":case"w":case"W":case"DDDo":return 1===e?e+"-ին":e+"-րդ";default:return e}},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("id",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des".split("_"),weekdays:"Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),weekdaysShort:"Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|siang|sore|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"siang"===t?e>=11?e:e+12:"sore"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"siang":e<19?"sore":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Besok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kemarin pukul] LT",lastWeek:"dddd [lalu pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lalu",s:"beberapa detik",ss:"%d detik",m:"semenit",mm:"%d menit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e){return e%100==11||e%10!=1}function n(e,n,r,a){var o=e+" ";switch(r){case"s":return n||a?"nokkrar sekúndur":"nokkrum sekúndum";case"ss":return t(e)?o+(n||a?"sekúndur":"sekúndum"):o+"sekúnda";case"m":return n?"mínúta":"mínútu";case"mm":return t(e)?o+(n||a?"mínútur":"mínútum"):n?o+"mínúta":o+"mínútu";case"hh":return t(e)?o+(n||a?"klukkustundir":"klukkustundum"):o+"klukkustund";case"d":return n?"dagur":a?"dag":"degi";case"dd":return t(e)?n?o+"dagar":o+(a?"daga":"dögum"):n?o+"dagur":o+(a?"dag":"degi");case"M":return n?"mánuður":a?"mánuð":"mánuði";case"MM":return t(e)?n?o+"mánuðir":o+(a?"mánuði":"mánuðum"):n?o+"mánuður":o+(a?"mánuð":"mánuði");case"y":return n||a?"ár":"ári";case"yy":return t(e)?o+(n||a?"ár":"árum"):o+(n||a?"ár":"ári")}}e.defineLocale("is",{months:"janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),monthsShort:"jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),weekdays:"sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),weekdaysShort:"sun_mán_þri_mið_fim_fös_lau".split("_"),weekdaysMin:"Su_Má_Þr_Mi_Fi_Fö_La".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd, D. MMMM YYYY [kl.] H:mm"},calendar:{sameDay:"[í dag kl.] LT",nextDay:"[á morgun kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[í gær kl.] LT",lastWeek:"[síðasta] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"eftir %s",past:"fyrir %s síðan",s:n,ss:n,m:n,mm:n,h:"klukkustund",hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("it",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:function(){switch(this.day()){case 0:return"[la scorsa] dddd [alle] LT";default:return"[lo scorso] dddd [alle] LT"}},sameElse:"L"},relativeTime:{future:function(e){return(/^[0-9].+$/.test(e)?"tra":"in")+" "+e},past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("it-ch",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:function(){switch(this.day()){case 0:return"[la scorsa] dddd [alle] LT";default:return"[lo scorso] dddd [alle] LT"}},sameElse:"L"},relativeTime:{future:function(e){return(/^[0-9].+$/.test(e)?"tra":"in")+" "+e},past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("ja",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),weekdaysShort:"日_月_火_水_木_金_土".split("_"),weekdaysMin:"日_月_火_水_木_金_土".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日 dddd HH:mm",l:"YYYY/MM/DD",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日(ddd) HH:mm"},meridiemParse:/午前|午後/i,isPM:function(e){return"午後"===e},meridiem:function(e,t,n){return e<12?"午前":"午後"},calendar:{sameDay:"[今日] LT",nextDay:"[明日] LT",nextWeek:function(e){return e.week()<this.week()?"[来週]dddd LT":"dddd LT"},lastDay:"[昨日] LT",lastWeek:function(e){return this.week()<e.week()?"[先週]dddd LT":"dddd LT"},sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}日/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"数秒",ss:"%d秒",m:"1分",mm:"%d分",h:"1時間",hh:"%d時間",d:"1日",dd:"%d日",M:"1ヶ月",MM:"%dヶ月",y:"1年",yy:"%d年"}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("jv",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des".split("_"),weekdays:"Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu".split("_"),weekdaysShort:"Min_Sen_Sel_Reb_Kem_Jem_Sep".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sp".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/enjing|siyang|sonten|ndalu/,meridiemHour:function(e,t){return 12===e&&(e=0),"enjing"===t?e:"siyang"===t?e>=11?e:e+12:"sonten"===t||"ndalu"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"enjing":e<15?"siyang":e<19?"sonten":"ndalu"},calendar:{sameDay:"[Dinten puniko pukul] LT",nextDay:"[Mbenjang pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kala wingi pukul] LT",lastWeek:"dddd [kepengker pukul] LT",sameElse:"L"},relativeTime:{future:"wonten ing %s",past:"%s ingkang kepengker",s:"sawetawis detik",ss:"%d detik",m:"setunggal menit",mm:"%d menit",h:"setunggal jam",hh:"%d jam",d:"sedinten",dd:"%d dinten",M:"sewulan",MM:"%d wulan",y:"setaun",yy:"%d taun"},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("ka",{months:{standalone:"იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი".split("_"),format:"იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს".split("_")},monthsShort:"იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split("_"),weekdays:{standalone:"კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი".split("_"),format:"კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს".split("_"),isFormat:/(წინა|შემდეგ)/},weekdaysShort:"კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"),weekdaysMin:"კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[დღეს] LT[-ზე]",nextDay:"[ხვალ] LT[-ზე]",lastDay:"[გუშინ] LT[-ზე]",nextWeek:"[შემდეგ] dddd LT[-ზე]",lastWeek:"[წინა] dddd LT-ზე",sameElse:"L"},relativeTime:{future:function(e){return/(წამი|წუთი|საათი|წელი)/.test(e)?e.replace(/ი$/,"ში"):e+"ში"},past:function(e){return/(წამი|წუთი|საათი|დღე|თვე)/.test(e)?e.replace(/(ი|ე)$/,"ის წინ"):/წელი/.test(e)?e.replace(/წელი$/,"წლის წინ"):void 0},s:"რამდენიმე წამი",ss:"%d წამი",m:"წუთი",mm:"%d წუთი",h:"საათი",hh:"%d საათი",d:"დღე",dd:"%d დღე",M:"თვე",MM:"%d თვე",y:"წელი",yy:"%d წელი"},dayOfMonthOrdinalParse:/0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,ordinal:function(e){return 0===e?e:1===e?e+"-ლი":e<20||e<=100&&e%20==0||e%100==0?"მე-"+e:e+"-ე"},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={0:"-ші",1:"-ші",2:"-ші",3:"-ші",4:"-ші",5:"-ші",6:"-шы",7:"-ші",8:"-ші",9:"-шы",10:"-шы",20:"-шы",30:"-шы",40:"-шы",50:"-ші",60:"-шы",70:"-ші",80:"-ші",90:"-шы",100:"-ші"};e.defineLocale("kk",{months:"қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан".split("_"),monthsShort:"қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел".split("_"),weekdays:"жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі".split("_"),weekdaysShort:"жек_дүй_сей_сәр_бей_жұм_сен".split("_"),weekdaysMin:"жк_дй_сй_ср_бй_жм_сн".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгін сағат] LT",nextDay:"[Ертең сағат] LT",nextWeek:"dddd [сағат] LT",lastDay:"[Кеше сағат] LT",lastWeek:"[Өткен аптаның] dddd [сағат] LT",sameElse:"L"},relativeTime:{future:"%s ішінде",past:"%s бұрын",s:"бірнеше секунд",ss:"%d секунд",m:"бір минут",mm:"%d минут",h:"бір сағат",hh:"%d сағат",d:"бір күн",dd:"%d күн",M:"бір ай",MM:"%d ай",y:"бір жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(ші|шы)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"១",2:"២",3:"៣",4:"៤",5:"៥",6:"៦",7:"៧",8:"៨",9:"៩",0:"០"},n={"១":"1","២":"2","៣":"3","៤":"4","៥":"5","៦":"6","៧":"7","៨":"8","៩":"9","០":"0"};e.defineLocale("km",{months:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),monthsShort:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),weekdays:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),weekdaysShort:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysMin:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ព្រឹក|ល្ងាច/,isPM:function(e){return"ល្ងាច"===e},meridiem:function(e,t,n){return e<12?"ព្រឹក":"ល្ងាច"},calendar:{sameDay:"[ថ្ងៃនេះ ម៉ោង] LT",nextDay:"[ស្អែក ម៉ោង] LT",nextWeek:"dddd [ម៉ោង] LT",lastDay:"[ម្សិលមិញ ម៉ោង] LT",lastWeek:"dddd [សប្តាហ៍មុន] [ម៉ោង] LT",sameElse:"L"},relativeTime:{future:"%sទៀត",past:"%sមុន",s:"ប៉ុន្មានវិនាទី",ss:"%d វិនាទី",m:"មួយនាទី",mm:"%d នាទី",h:"មួយម៉ោង",hh:"%d ម៉ោង",d:"មួយថ្ងៃ",dd:"%d ថ្ងៃ",M:"មួយខែ",MM:"%d ខែ",y:"មួយឆ្នាំ",yy:"%d ឆ្នាំ"},dayOfMonthOrdinalParse:/ទី\d{1,2}/,ordinal:"ទី%d",preparse:function(e){return e.replace(/[១២៣៤៥៦៧៨៩០]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"೧",2:"೨",3:"೩",4:"೪",5:"೫",6:"೬",7:"೭",8:"೮",9:"೯",0:"೦"},n={"೧":"1","೨":"2","೩":"3","೪":"4","೫":"5","೬":"6","೭":"7","೮":"8","೯":"9","೦":"0"};e.defineLocale("kn",{months:"ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್".split("_"),monthsShort:"ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂ_ಅಕ್ಟೋ_ನವೆಂ_ಡಿಸೆಂ".split("_"),monthsParseExact:!0,weekdays:"ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ".split("_"),weekdaysShort:"ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ".split("_"),weekdaysMin:"ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[ಇಂದು] LT",nextDay:"[ನಾಳೆ] LT",nextWeek:"dddd, LT",lastDay:"[ನಿನ್ನೆ] LT",lastWeek:"[ಕೊನೆಯ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ನಂತರ",past:"%s ಹಿಂದೆ",s:"ಕೆಲವು ಕ್ಷಣಗಳು",ss:"%d ಸೆಕೆಂಡುಗಳು",m:"ಒಂದು ನಿಮಿಷ",mm:"%d ನಿಮಿಷ",h:"ಒಂದು ಗಂಟೆ",hh:"%d ಗಂಟೆ",d:"ಒಂದು ದಿನ",dd:"%d ದಿನ",M:"ಒಂದು ತಿಂಗಳು",MM:"%d ತಿಂಗಳು",y:"ಒಂದು ವರ್ಷ",yy:"%d ವರ್ಷ"},preparse:function(e){return e.replace(/[೧೨೩೪೫೬೭೮೯೦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ರಾತ್ರಿ"===t?e<4?e:e+12:"ಬೆಳಿಗ್ಗೆ"===t?e:"ಮಧ್ಯಾಹ್ನ"===t?e>=10?e:e+12:"ಸಂಜೆ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"ರಾತ್ರಿ":e<10?"ಬೆಳಿಗ್ಗೆ":e<17?"ಮಧ್ಯಾಹ್ನ":e<20?"ಸಂಜೆ":"ರಾತ್ರಿ"},dayOfMonthOrdinalParse:/\d{1,2}(ನೇ)/,ordinal:function(e){return e+"ನೇ"},week:{dow:0,doy:6}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("ko",{months:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),monthsShort:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),weekdays:"일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),weekdaysShort:"일_월_화_수_목_금_토".split("_"),weekdaysMin:"일_월_화_수_목_금_토".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY년 MMMM D일",LLL:"YYYY년 MMMM D일 A h:mm",LLLL:"YYYY년 MMMM D일 dddd A h:mm",l:"YYYY.MM.DD.",ll:"YYYY년 MMMM D일",lll:"YYYY년 MMMM D일 A h:mm",llll:"YYYY년 MMMM D일 dddd A h:mm"},calendar:{sameDay:"오늘 LT",nextDay:"내일 LT",nextWeek:"dddd LT",lastDay:"어제 LT",lastWeek:"지난주 dddd LT",sameElse:"L"},relativeTime:{future:"%s 후",past:"%s 전",s:"몇 초",ss:"%d초",m:"1분",mm:"%d분",h:"한 시간",hh:"%d시간",d:"하루",dd:"%d일",M:"한 달",MM:"%d달",y:"일 년",yy:"%d년"},dayOfMonthOrdinalParse:/\d{1,2}(일|월|주)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"일";case"M":return e+"월";case"w":case"W":return e+"주";default:return e}},meridiemParse:/오전|오후/,isPM:function(e){return"오후"===e},meridiem:function(e,t,n){return e<12?"오전":"오후"}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},r=["کانونی دووەم","شوبات","ئازار","نیسان","ئایار","حوزەیران","تەمموز","ئاب","ئەیلوول","تشرینی یەكەم","تشرینی دووەم","كانونی یەکەم"];e.defineLocale("ku",{months:r,monthsShort:r,weekdays:"یه‌كشه‌ممه‌_دووشه‌ممه‌_سێشه‌ممه‌_چوارشه‌ممه‌_پێنجشه‌ممه‌_هه‌ینی_شه‌ممه‌".split("_"),weekdaysShort:"یه‌كشه‌م_دووشه‌م_سێشه‌م_چوارشه‌م_پێنجشه‌م_هه‌ینی_شه‌ممه‌".split("_"),weekdaysMin:"ی_د_س_چ_پ_ه_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ئێواره‌|به‌یانی/,isPM:function(e){return/ئێواره‌/.test(e)},meridiem:function(e,t,n){return e<12?"به‌یانی":"ئێواره‌"},calendar:{sameDay:"[ئه‌مرۆ كاتژمێر] LT",nextDay:"[به‌یانی كاتژمێر] LT",nextWeek:"dddd [كاتژمێر] LT",lastDay:"[دوێنێ كاتژمێر] LT",lastWeek:"dddd [كاتژمێر] LT",sameElse:"L"},relativeTime:{future:"له‌ %s",past:"%s",s:"چه‌ند چركه‌یه‌ك",ss:"چركه‌ %d",m:"یه‌ك خوله‌ك",mm:"%d خوله‌ك",h:"یه‌ك كاتژمێر",hh:"%d كاتژمێر",d:"یه‌ك ڕۆژ",dd:"%d ڕۆژ",M:"یه‌ك مانگ",MM:"%d مانگ",y:"یه‌ك ساڵ",yy:"%d ساڵ"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={0:"-чү",1:"-чи",2:"-чи",3:"-чү",4:"-чү",5:"-чи",6:"-чы",7:"-чи",8:"-чи",9:"-чу",10:"-чу",20:"-чы",30:"-чу",40:"-чы",50:"-чү",60:"-чы",70:"-чи",80:"-чи",90:"-чу",100:"-чү"};e.defineLocale("ky",{months:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),monthsShort:"янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split("_"),weekdays:"Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби".split("_"),weekdaysShort:"Жек_Дүй_Шей_Шар_Бей_Жум_Ише".split("_"),weekdaysMin:"Жк_Дй_Шй_Шр_Бй_Жм_Иш".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгүн саат] LT",nextDay:"[Эртең саат] LT",nextWeek:"dddd [саат] LT",lastDay:"[Кечээ саат] LT",lastWeek:"[Өткөн аптанын] dddd [күнү] [саат] LT",sameElse:"L"},relativeTime:{future:"%s ичинде",past:"%s мурун",s:"бирнече секунд",ss:"%d секунд",m:"бир мүнөт",mm:"%d мүнөт",h:"бир саат",hh:"%d саат",d:"бир күн",dd:"%d күн",M:"бир ай",MM:"%d ай",y:"бир жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(чи|чы|чү|чу)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={m:["eng Minutt","enger Minutt"],h:["eng Stonn","enger Stonn"],d:["een Dag","engem Dag"],M:["ee Mount","engem Mount"],y:["ee Joer","engem Joer"]};return t?a[n][0]:a[n][1]}function n(e){if(e=parseInt(e,10),isNaN(e))return!1;if(e<0)return!0;if(e<10)return 4<=e&&e<=7;if(e<100){var t=e%10;return n(0===t?e/10:t)}if(e<1e4){for(;e>=10;)e/=10;return n(e)}return n(e/=1e3)}e.defineLocale("lb",{months:"Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split("_"),weekdaysShort:"So._Mé._Dë._Më._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mé_Dë_Më_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm [Auer]",LTS:"H:mm:ss [Auer]",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm [Auer]",LLLL:"dddd, D. MMMM YYYY H:mm [Auer]"},calendar:{sameDay:"[Haut um] LT",sameElse:"L",nextDay:"[Muer um] LT",nextWeek:"dddd [um] LT",lastDay:"[Gëschter um] LT",lastWeek:function(){switch(this.day()){case 2:case 4:return"[Leschten] dddd [um] LT";default:return"[Leschte] dddd [um] LT"}}},relativeTime:{future:function(e){return n(e.substr(0,e.indexOf(" ")))?"a "+e:"an "+e},past:function(e){return n(e.substr(0,e.indexOf(" ")))?"viru "+e:"virun "+e},s:"e puer Sekonnen",ss:"%d Sekonnen",m:t,mm:"%d Minutten",h:t,hh:"%d Stonnen",d:t,dd:"%d Deeg",M:t,MM:"%d Méint",y:t,yy:"%d Joer"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("lo",{months:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),monthsShort:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),weekdays:"ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysShort:"ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysMin:"ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"ວັນdddd D MMMM YYYY HH:mm"},meridiemParse:/ຕອນເຊົ້າ|ຕອນແລງ/,isPM:function(e){return"ຕອນແລງ"===e},meridiem:function(e,t,n){return e<12?"ຕອນເຊົ້າ":"ຕອນແລງ"},calendar:{sameDay:"[ມື້ນີ້ເວລາ] LT",nextDay:"[ມື້ອື່ນເວລາ] LT",nextWeek:"[ວັນ]dddd[ໜ້າເວລາ] LT",lastDay:"[ມື້ວານນີ້ເວລາ] LT",lastWeek:"[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT",sameElse:"L"},relativeTime:{future:"ອີກ %s",past:"%sຜ່ານມາ",s:"ບໍ່ເທົ່າໃດວິນາທີ",ss:"%d ວິນາທີ",m:"1 ນາທີ",mm:"%d ນາທີ",h:"1 ຊົ່ວໂມງ",hh:"%d ຊົ່ວໂມງ",d:"1 ມື້",dd:"%d ມື້",M:"1 ເດືອນ",MM:"%d ເດືອນ",y:"1 ປີ",yy:"%d ປີ"},dayOfMonthOrdinalParse:/(ທີ່)\d{1,2}/,ordinal:function(e){return"ທີ່"+e}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={ss:"sekundė_sekundžių_sekundes",m:"minutė_minutės_minutę",mm:"minutės_minučių_minutes",h:"valanda_valandos_valandą",hh:"valandos_valandų_valandas",d:"diena_dienos_dieną",dd:"dienos_dienų_dienas",M:"mėnuo_mėnesio_mėnesį",MM:"mėnesiai_mėnesių_mėnesius",y:"metai_metų_metus",yy:"metai_metų_metus"};function n(e,t,n,r){return t?a(n)[0]:r?a(n)[1]:a(n)[2]}function r(e){return e%10==0||e>10&&e<20}function a(e){return t[e].split("_")}function o(e,t,o,i){var s=e+" ";return 1===e?s+n(0,t,o[0],i):t?s+(r(e)?a(o)[1]:a(o)[0]):i?s+a(o)[1]:s+(r(e)?a(o)[1]:a(o)[2])}e.defineLocale("lt",{months:{format:"sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"),standalone:"sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis".split("_"),isFormat:/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/},monthsShort:"sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),weekdays:{format:"sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį".split("_"),standalone:"sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_"),isFormat:/dddd HH:mm/},weekdaysShort:"Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),weekdaysMin:"S_P_A_T_K_Pn_Š".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY [m.] MMMM D [d.]",LLL:"YYYY [m.] MMMM D [d.], HH:mm [val.]",LLLL:"YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]",l:"YYYY-MM-DD",ll:"YYYY [m.] MMMM D [d.]",lll:"YYYY [m.] MMMM D [d.], HH:mm [val.]",llll:"YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]"},calendar:{sameDay:"[Šiandien] LT",nextDay:"[Rytoj] LT",nextWeek:"dddd LT",lastDay:"[Vakar] LT",lastWeek:"[Praėjusį] dddd LT",sameElse:"L"},relativeTime:{future:"po %s",past:"prieš %s",s:function(e,t,n,r){return t?"kelios sekundės":r?"kelių sekundžių":"kelias sekundes"},ss:o,m:n,mm:o,h:n,hh:o,d:n,dd:o,M:n,MM:o,y:n,yy:o},dayOfMonthOrdinalParse:/\d{1,2}-oji/,ordinal:function(e){return e+"-oji"},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={ss:"sekundes_sekundēm_sekunde_sekundes".split("_"),m:"minūtes_minūtēm_minūte_minūtes".split("_"),mm:"minūtes_minūtēm_minūte_minūtes".split("_"),h:"stundas_stundām_stunda_stundas".split("_"),hh:"stundas_stundām_stunda_stundas".split("_"),d:"dienas_dienām_diena_dienas".split("_"),dd:"dienas_dienām_diena_dienas".split("_"),M:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),MM:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),y:"gada_gadiem_gads_gadi".split("_"),yy:"gada_gadiem_gads_gadi".split("_")};function n(e,t,n){return n?t%10==1&&t%100!=11?e[2]:e[3]:t%10==1&&t%100!=11?e[0]:e[1]}function r(e,r,a){return e+" "+n(t[a],e,r)}function a(e,r,a){return n(t[a],e,r)}e.defineLocale("lv",{months:"janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),monthsShort:"jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),weekdays:"svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),weekdaysShort:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysMin:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY.",LL:"YYYY. [gada] D. MMMM",LLL:"YYYY. [gada] D. MMMM, HH:mm",LLLL:"YYYY. [gada] D. MMMM, dddd, HH:mm"},calendar:{sameDay:"[Šodien pulksten] LT",nextDay:"[Rīt pulksten] LT",nextWeek:"dddd [pulksten] LT",lastDay:"[Vakar pulksten] LT",lastWeek:"[Pagājušā] dddd [pulksten] LT",sameElse:"L"},relativeTime:{future:"pēc %s",past:"pirms %s",s:function(e,t){return t?"dažas sekundes":"dažām sekundēm"},ss:r,m:a,mm:r,h:a,hh:r,d:a,dd:r,M:a,MM:r,y:a,yy:r},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={words:{ss:["sekund","sekunda","sekundi"],m:["jedan minut","jednog minuta"],mm:["minut","minuta","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mjesec","mjeseca","mjeseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,r){var a=t.words[r];return 1===r.length?n?a[0]:a[1]:e+" "+t.correctGrammaticalCase(e,a)}};e.defineLocale("me",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sjutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedjelje] [u] LT","[prošlog] [ponedjeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srijede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"nekoliko sekundi",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"dan",dd:t.translate,M:"mjesec",MM:t.translate,y:"godinu",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("mi",{months:"Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea".split("_"),monthsShort:"Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki".split("_"),monthsRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,weekdays:"Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei".split("_"),weekdaysShort:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),weekdaysMin:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [i] HH:mm",LLLL:"dddd, D MMMM YYYY [i] HH:mm"},calendar:{sameDay:"[i teie mahana, i] LT",nextDay:"[apopo i] LT",nextWeek:"dddd [i] LT",lastDay:"[inanahi i] LT",lastWeek:"dddd [whakamutunga i] LT",sameElse:"L"},relativeTime:{future:"i roto i %s",past:"%s i mua",s:"te hēkona ruarua",ss:"%d hēkona",m:"he meneti",mm:"%d meneti",h:"te haora",hh:"%d haora",d:"he ra",dd:"%d ra",M:"he marama",MM:"%d marama",y:"he tau",yy:"%d tau"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("mk",{months:"јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември".split("_"),monthsShort:"јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек".split("_"),weekdays:"недела_понеделник_вторник_среда_четврток_петок_сабота".split("_"),weekdaysShort:"нед_пон_вто_сре_чет_пет_саб".split("_"),weekdaysMin:"нe_пo_вт_ср_че_пе_сa".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Денес во] LT",nextDay:"[Утре во] LT",nextWeek:"[Во] dddd [во] LT",lastDay:"[Вчера во] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Изминатата] dddd [во] LT";case 1:case 2:case 4:case 5:return"[Изминатиот] dddd [во] LT"}},sameElse:"L"},relativeTime:{future:"после %s",past:"пред %s",s:"неколку секунди",ss:"%d секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дена",M:"месец",MM:"%d месеци",y:"година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&n<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("ml",{months:"ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ".split("_"),monthsShort:"ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.".split("_"),monthsParseExact:!0,weekdays:"ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച".split("_"),weekdaysShort:"ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി".split("_"),weekdaysMin:"ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ".split("_"),longDateFormat:{LT:"A h:mm -നു",LTS:"A h:mm:ss -നു",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm -നു",LLLL:"dddd, D MMMM YYYY, A h:mm -നു"},calendar:{sameDay:"[ഇന്ന്] LT",nextDay:"[നാളെ] LT",nextWeek:"dddd, LT",lastDay:"[ഇന്നലെ] LT",lastWeek:"[കഴിഞ്ഞ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s കഴിഞ്ഞ്",past:"%s മുൻപ്",s:"അൽപ നിമിഷങ്ങൾ",ss:"%d സെക്കൻഡ്",m:"ഒരു മിനിറ്റ്",mm:"%d മിനിറ്റ്",h:"ഒരു മണിക്കൂർ",hh:"%d മണിക്കൂർ",d:"ഒരു ദിവസം",dd:"%d ദിവസം",M:"ഒരു മാസം",MM:"%d മാസം",y:"ഒരു വർഷം",yy:"%d വർഷം"},meridiemParse:/രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,meridiemHour:function(e,t){return 12===e&&(e=0),"രാത്രി"===t&&e>=4||"ഉച്ച കഴിഞ്ഞ്"===t||"വൈകുന്നേരം"===t?e+12:e},meridiem:function(e,t,n){return e<4?"രാത്രി":e<12?"രാവിലെ":e<17?"ഉച്ച കഴിഞ്ഞ്":e<20?"വൈകുന്നേരം":"രാത്രി"}})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){switch(n){case"s":return t?"хэдхэн секунд":"хэдхэн секундын";case"ss":return e+(t?" секунд":" секундын");case"m":case"mm":return e+(t?" минут":" минутын");case"h":case"hh":return e+(t?" цаг":" цагийн");case"d":case"dd":return e+(t?" өдөр":" өдрийн");case"M":case"MM":return e+(t?" сар":" сарын");case"y":case"yy":return e+(t?" жил":" жилийн");default:return e}}e.defineLocale("mn",{months:"Нэгдүгээр сар_Хоёрдугаар сар_Гуравдугаар сар_Дөрөвдүгээр сар_Тавдугаар сар_Зургадугаар сар_Долдугаар сар_Наймдугаар сар_Есдүгээр сар_Аравдугаар сар_Арван нэгдүгээр сар_Арван хоёрдугаар сар".split("_"),monthsShort:"1 сар_2 сар_3 сар_4 сар_5 сар_6 сар_7 сар_8 сар_9 сар_10 сар_11 сар_12 сар".split("_"),monthsParseExact:!0,weekdays:"Ням_Даваа_Мягмар_Лхагва_Пүрэв_Баасан_Бямба".split("_"),weekdaysShort:"Ням_Дав_Мяг_Лха_Пүр_Баа_Бям".split("_"),weekdaysMin:"Ня_Да_Мя_Лх_Пү_Ба_Бя".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY оны MMMMын D",LLL:"YYYY оны MMMMын D HH:mm",LLLL:"dddd, YYYY оны MMMMын D HH:mm"},meridiemParse:/ҮӨ|ҮХ/i,isPM:function(e){return"ҮХ"===e},meridiem:function(e,t,n){return e<12?"ҮӨ":"ҮХ"},calendar:{sameDay:"[Өнөөдөр] LT",nextDay:"[Маргааш] LT",nextWeek:"[Ирэх] dddd LT",lastDay:"[Өчигдөр] LT",lastWeek:"[Өнгөрсөн] dddd LT",sameElse:"L"},relativeTime:{future:"%s дараа",past:"%s өмнө",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2} өдөр/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+" өдөр";default:return e}}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};function r(e,t,n,r){var a="";if(t)switch(n){case"s":a="काही सेकंद";break;case"ss":a="%d सेकंद";break;case"m":a="एक मिनिट";break;case"mm":a="%d मिनिटे";break;case"h":a="एक तास";break;case"hh":a="%d तास";break;case"d":a="एक दिवस";break;case"dd":a="%d दिवस";break;case"M":a="एक महिना";break;case"MM":a="%d महिने";break;case"y":a="एक वर्ष";break;case"yy":a="%d वर्षे"}else switch(n){case"s":a="काही सेकंदां";break;case"ss":a="%d सेकंदां";break;case"m":a="एका मिनिटा";break;case"mm":a="%d मिनिटां";break;case"h":a="एका तासा";break;case"hh":a="%d तासां";break;case"d":a="एका दिवसा";break;case"dd":a="%d दिवसां";break;case"M":a="एका महिन्या";break;case"MM":a="%d महिन्यां";break;case"y":a="एका वर्षा";break;case"yy":a="%d वर्षां"}return a.replace(/%d/i,e)}e.defineLocale("mr",{months:"जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),monthsShort:"जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),monthsParseExact:!0,weekdays:"रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm वाजता",LTS:"A h:mm:ss वाजता",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm वाजता",LLLL:"dddd, D MMMM YYYY, A h:mm वाजता"},calendar:{sameDay:"[आज] LT",nextDay:"[उद्या] LT",nextWeek:"dddd, LT",lastDay:"[काल] LT",lastWeek:"[मागील] dddd, LT",sameElse:"L"},relativeTime:{future:"%sमध्ये",past:"%sपूर्वी",s:r,ss:r,m:r,mm:r,h:r,hh:r,d:r,dd:r,M:r,MM:r,y:r,yy:r},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/रात्री|सकाळी|दुपारी|सायंकाळी/,meridiemHour:function(e,t){return 12===e&&(e=0),"रात्री"===t?e<4?e:e+12:"सकाळी"===t?e:"दुपारी"===t?e>=10?e:e+12:"सायंकाळी"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"रात्री":e<10?"सकाळी":e<17?"दुपारी":e<20?"सायंकाळी":"रात्री"},week:{dow:0,doy:6}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("ms",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("ms-my",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("mt",{months:"Jannar_Frar_Marzu_April_Mejju_Ġunju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Diċembru".split("_"),monthsShort:"Jan_Fra_Mar_Apr_Mej_Ġun_Lul_Aww_Set_Ott_Nov_Diċ".split("_"),weekdays:"Il-Ħadd_It-Tnejn_It-Tlieta_L-Erbgħa_Il-Ħamis_Il-Ġimgħa_Is-Sibt".split("_"),weekdaysShort:"Ħad_Tne_Tli_Erb_Ħam_Ġim_Sib".split("_"),weekdaysMin:"Ħa_Tn_Tl_Er_Ħa_Ġi_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Illum fil-]LT",nextDay:"[Għada fil-]LT",nextWeek:"dddd [fil-]LT",lastDay:"[Il-bieraħ fil-]LT",lastWeek:"dddd [li għadda] [fil-]LT",sameElse:"L"},relativeTime:{future:"f’ %s",past:"%s ilu",s:"ftit sekondi",ss:"%d sekondi",m:"minuta",mm:"%d minuti",h:"siegħa",hh:"%d siegħat",d:"ġurnata",dd:"%d ġranet",M:"xahar",MM:"%d xhur",y:"sena",yy:"%d sni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"၁",2:"၂",3:"၃",4:"၄",5:"၅",6:"၆",7:"၇",8:"၈",9:"၉",0:"၀"},n={"၁":"1","၂":"2","၃":"3","၄":"4","၅":"5","၆":"6","၇":"7","၈":"8","၉":"9","၀":"0"};e.defineLocale("my",{months:"ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ".split("_"),monthsShort:"ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ".split("_"),weekdays:"တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ".split("_"),weekdaysShort:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),weekdaysMin:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ယနေ.] LT [မှာ]",nextDay:"[မနက်ဖြန်] LT [မှာ]",nextWeek:"dddd LT [မှာ]",lastDay:"[မနေ.က] LT [မှာ]",lastWeek:"[ပြီးခဲ့သော] dddd LT [မှာ]",sameElse:"L"},relativeTime:{future:"လာမည့် %s မှာ",past:"လွန်ခဲ့သော %s က",s:"စက္ကန်.အနည်းငယ်",ss:"%d စက္ကန့်",m:"တစ်မိနစ်",mm:"%d မိနစ်",h:"တစ်နာရီ",hh:"%d နာရီ",d:"တစ်ရက်",dd:"%d ရက်",M:"တစ်လ",MM:"%d လ",y:"တစ်နှစ်",yy:"%d နှစ်"},preparse:function(e){return e.replace(/[၁၂၃၄၅၆၇၈၉၀]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("nb",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"sø._ma._ti._on._to._fr._lø.".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] HH:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[forrige] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"noen sekunder",ss:"%d sekunder",m:"ett minutt",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dager",M:"en måned",MM:"%d måneder",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};e.defineLocale("ne",{months:"जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर".split("_"),monthsShort:"जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.".split("_"),monthsParseExact:!0,weekdays:"आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार".split("_"),weekdaysShort:"आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.".split("_"),weekdaysMin:"आ._सो._मं._बु._बि._शु._श.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"Aको h:mm बजे",LTS:"Aको h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, Aको h:mm बजे",LLLL:"dddd, D MMMM YYYY, Aको h:mm बजे"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/राति|बिहान|दिउँसो|साँझ/,meridiemHour:function(e,t){return 12===e&&(e=0),"राति"===t?e<4?e:e+12:"बिहान"===t?e:"दिउँसो"===t?e>=10?e:e+12:"साँझ"===t?e+12:void 0},meridiem:function(e,t,n){return e<3?"राति":e<12?"बिहान":e<16?"दिउँसो":e<20?"साँझ":"राति"},calendar:{sameDay:"[आज] LT",nextDay:"[भोलि] LT",nextWeek:"[आउँदो] dddd[,] LT",lastDay:"[हिजो] LT",lastWeek:"[गएको] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%sमा",past:"%s अगाडि",s:"केही क्षण",ss:"%d सेकेण्ड",m:"एक मिनेट",mm:"%d मिनेट",h:"एक घण्टा",hh:"%d घण्टा",d:"एक दिन",dd:"%d दिन",M:"एक महिना",MM:"%d महिना",y:"एक बर्ष",yy:"%d बर्ष"},week:{dow:0,doy:6}})}(n(1))},function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),r=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],a=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),r=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],a=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl-be",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("nn",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"),weekdaysShort:"sun_mån_tys_ons_tor_fre_lau".split("_"),weekdaysMin:"su_må_ty_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[I dag klokka] LT",nextDay:"[I morgon klokka] LT",nextWeek:"dddd [klokka] LT",lastDay:"[I går klokka] LT",lastWeek:"[Føregåande] dddd [klokka] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s sidan",s:"nokre sekund",ss:"%d sekund",m:"eit minutt",mm:"%d minutt",h:"ein time",hh:"%d timar",d:"ein dag",dd:"%d dagar",M:"ein månad",MM:"%d månader",y:"eit år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"੧",2:"੨",3:"੩",4:"੪",5:"੫",6:"੬",7:"੭",8:"੮",9:"੯",0:"੦"},n={"੧":"1","੨":"2","੩":"3","੪":"4","੫":"5","੬":"6","੭":"7","੮":"8","੯":"9","੦":"0"};e.defineLocale("pa-in",{months:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),monthsShort:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),weekdays:"ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ".split("_"),weekdaysShort:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),weekdaysMin:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),longDateFormat:{LT:"A h:mm ਵਜੇ",LTS:"A h:mm:ss ਵਜੇ",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm ਵਜੇ",LLLL:"dddd, D MMMM YYYY, A h:mm ਵਜੇ"},calendar:{sameDay:"[ਅਜ] LT",nextDay:"[ਕਲ] LT",nextWeek:"[ਅਗਲਾ] dddd, LT",lastDay:"[ਕਲ] LT",lastWeek:"[ਪਿਛਲੇ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ਵਿੱਚ",past:"%s ਪਿਛਲੇ",s:"ਕੁਝ ਸਕਿੰਟ",ss:"%d ਸਕਿੰਟ",m:"ਇਕ ਮਿੰਟ",mm:"%d ਮਿੰਟ",h:"ਇੱਕ ਘੰਟਾ",hh:"%d ਘੰਟੇ",d:"ਇੱਕ ਦਿਨ",dd:"%d ਦਿਨ",M:"ਇੱਕ ਮਹੀਨਾ",MM:"%d ਮਹੀਨੇ",y:"ਇੱਕ ਸਾਲ",yy:"%d ਸਾਲ"},preparse:function(e){return e.replace(/[੧੨੩੪੫੬੭੮੯੦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ਰਾਤ"===t?e<4?e:e+12:"ਸਵੇਰ"===t?e:"ਦੁਪਹਿਰ"===t?e>=10?e:e+12:"ਸ਼ਾਮ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"ਰਾਤ":e<10?"ਸਵੇਰ":e<17?"ਦੁਪਹਿਰ":e<20?"ਸ਼ਾਮ":"ਰਾਤ"},week:{dow:0,doy:6}})}(n(1))},function(e,t,n){!function(e){"use strict";var t="styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"),n="stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_");function r(e){return e%10<5&&e%10>1&&~~(e/10)%10!=1}function a(e,t,n){var a=e+" ";switch(n){case"ss":return a+(r(e)?"sekundy":"sekund");case"m":return t?"minuta":"minutę";case"mm":return a+(r(e)?"minuty":"minut");case"h":return t?"godzina":"godzinę";case"hh":return a+(r(e)?"godziny":"godzin");case"MM":return a+(r(e)?"miesiące":"miesięcy");case"yy":return a+(r(e)?"lata":"lat")}}e.defineLocale("pl",{months:function(e,r){return e?""===r?"("+n[e.month()]+"|"+t[e.month()]+")":/D MMMM/.test(r)?n[e.month()]:t[e.month()]:t},monthsShort:"sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),weekdays:"niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),weekdaysShort:"ndz_pon_wt_śr_czw_pt_sob".split("_"),weekdaysMin:"Nd_Pn_Wt_Śr_Cz_Pt_So".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Dziś o] LT",nextDay:"[Jutro o] LT",nextWeek:function(){switch(this.day()){case 0:return"[W niedzielę o] LT";case 2:return"[We wtorek o] LT";case 3:return"[W środę o] LT";case 6:return"[W sobotę o] LT";default:return"[W] dddd [o] LT"}},lastDay:"[Wczoraj o] LT",lastWeek:function(){switch(this.day()){case 0:return"[W zeszłą niedzielę o] LT";case 3:return"[W zeszłą środę o] LT";case 6:return"[W zeszłą sobotę o] LT";default:return"[W zeszły] dddd [o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"%s temu",s:"kilka sekund",ss:a,m:a,mm:a,h:a,hh:a,d:"1 dzień",dd:"%d dni",M:"miesiąc",MM:a,y:"rok",yy:a},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("pt",{months:"Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Do_2ª_3ª_4ª_5ª_6ª_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("pt-br",{months:"Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Do_2ª_3ª_4ª_5ª_6ª_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY [às] HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY [às] HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"poucos segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº"})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e,t,n){var r=" ";return(e%100>=20||e>=100&&e%100==0)&&(r=" de "),e+r+{ss:"secunde",mm:"minute",hh:"ore",dd:"zile",MM:"luni",yy:"ani"}[n]}e.defineLocale("ro",{months:"ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),monthsShort:"ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"),weekdaysShort:"Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),weekdaysMin:"Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[azi la] LT",nextDay:"[mâine la] LT",nextWeek:"dddd [la] LT",lastDay:"[ieri la] LT",lastWeek:"[fosta] dddd [la] LT",sameElse:"L"},relativeTime:{future:"peste %s",past:"%s în urmă",s:"câteva secunde",ss:t,m:"un minut",mm:t,h:"o oră",hh:t,d:"o zi",dd:t,M:"o lună",MM:t,y:"un an",yy:t},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e,t,n){var r,a;return"m"===n?t?"минута":"минуту":e+" "+(r=+e,a={ss:t?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:t?"минута_минуты_минут":"минуту_минуты_минут",hh:"час_часа_часов",dd:"день_дня_дней",MM:"месяц_месяца_месяцев",yy:"год_года_лет"}[n].split("_"),r%10==1&&r%100!=11?a[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?a[1]:a[2])}var n=[/^янв/i,/^фев/i,/^мар/i,/^апр/i,/^ма[йя]/i,/^июн/i,/^июл/i,/^авг/i,/^сен/i,/^окт/i,/^ноя/i,/^дек/i];e.defineLocale("ru",{months:{format:"января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"),standalone:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_")},monthsShort:{format:"янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"),standalone:"янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_")},weekdays:{standalone:"воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"),format:"воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split("_"),isFormat:/\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/},weekdaysShort:"вс_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"вс_пн_вт_ср_чт_пт_сб".split("_"),monthsParse:n,longMonthsParse:n,shortMonthsParse:n,monthsRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsShortRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsStrictRegex:/^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,monthsShortStrictRegex:/^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., H:mm",LLLL:"dddd, D MMMM YYYY г., H:mm"},calendar:{sameDay:"[Сегодня, в] LT",nextDay:"[Завтра, в] LT",lastDay:"[Вчера, в] LT",nextWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В следующее] dddd, [в] LT";case 1:case 2:case 4:return"[В следующий] dddd, [в] LT";case 3:case 5:case 6:return"[В следующую] dddd, [в] LT"}},lastWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В прошлое] dddd, [в] LT";case 1:case 2:case 4:return"[В прошлый] dddd, [в] LT";case 3:case 5:case 6:return"[В прошлую] dddd, [в] LT"}},sameElse:"L"},relativeTime:{future:"через %s",past:"%s назад",s:"несколько секунд",ss:t,m:t,mm:t,h:"час",hh:t,d:"день",dd:t,M:"месяц",MM:t,y:"год",yy:t},meridiemParse:/ночи|утра|дня|вечера/i,isPM:function(e){return/^(дня|вечера)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночи":e<12?"утра":e<17?"дня":"вечера"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го|я)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":return e+"-й";case"D":return e+"-го";case"w":case"W":return e+"-я";default:return e}},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t=["جنوري","فيبروري","مارچ","اپريل","مئي","جون","جولاءِ","آگسٽ","سيپٽمبر","آڪٽوبر","نومبر","ڊسمبر"],n=["آچر","سومر","اڱارو","اربع","خميس","جمع","ڇنڇر"];e.defineLocale("sd",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(e){return"شام"===e},meridiem:function(e,t,n){return e<12?"صبح":"شام"},calendar:{sameDay:"[اڄ] LT",nextDay:"[سڀاڻي] LT",nextWeek:"dddd [اڳين هفتي تي] LT",lastDay:"[ڪالهه] LT",lastWeek:"[گزريل هفتي] dddd [تي] LT",sameElse:"L"},relativeTime:{future:"%s پوء",past:"%s اڳ",s:"چند سيڪنڊ",ss:"%d سيڪنڊ",m:"هڪ منٽ",mm:"%d منٽ",h:"هڪ ڪلاڪ",hh:"%d ڪلاڪ",d:"هڪ ڏينهن",dd:"%d ڏينهن",M:"هڪ مهينو",MM:"%d مهينا",y:"هڪ سال",yy:"%d سال"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("se",{months:"ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu".split("_"),monthsShort:"ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov".split("_"),weekdays:"sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat".split("_"),weekdaysShort:"sotn_vuos_maŋ_gask_duor_bear_láv".split("_"),weekdaysMin:"s_v_m_g_d_b_L".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"MMMM D. [b.] YYYY",LLL:"MMMM D. [b.] YYYY [ti.] HH:mm",LLLL:"dddd, MMMM D. [b.] YYYY [ti.] HH:mm"},calendar:{sameDay:"[otne ti] LT",nextDay:"[ihttin ti] LT",nextWeek:"dddd [ti] LT",lastDay:"[ikte ti] LT",lastWeek:"[ovddit] dddd [ti] LT",sameElse:"L"},relativeTime:{future:"%s geažes",past:"maŋit %s",s:"moadde sekunddat",ss:"%d sekunddat",m:"okta minuhta",mm:"%d minuhtat",h:"okta diimmu",hh:"%d diimmut",d:"okta beaivi",dd:"%d beaivvit",M:"okta mánnu",MM:"%d mánut",y:"okta jahki",yy:"%d jagit"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("si",{months:"ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්".split("_"),monthsShort:"ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ".split("_"),weekdays:"ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා".split("_"),weekdaysShort:"ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන".split("_"),weekdaysMin:"ඉ_ස_අ_බ_බ්‍ර_සි_සෙ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"a h:mm",LTS:"a h:mm:ss",L:"YYYY/MM/DD",LL:"YYYY MMMM D",LLL:"YYYY MMMM D, a h:mm",LLLL:"YYYY MMMM D [වැනි] dddd, a h:mm:ss"},calendar:{sameDay:"[අද] LT[ට]",nextDay:"[හෙට] LT[ට]",nextWeek:"dddd LT[ට]",lastDay:"[ඊයේ] LT[ට]",lastWeek:"[පසුගිය] dddd LT[ට]",sameElse:"L"},relativeTime:{future:"%sකින්",past:"%sකට පෙර",s:"තත්පර කිහිපය",ss:"තත්පර %d",m:"මිනිත්තුව",mm:"මිනිත්තු %d",h:"පැය",hh:"පැය %d",d:"දිනය",dd:"දින %d",M:"මාසය",MM:"මාස %d",y:"වසර",yy:"වසර %d"},dayOfMonthOrdinalParse:/\d{1,2} වැනි/,ordinal:function(e){return e+" වැනි"},meridiemParse:/පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,isPM:function(e){return"ප.ව."===e||"පස් වරු"===e},meridiem:function(e,t,n){return e>11?n?"ප.ව.":"පස් වරු":n?"පෙ.ව.":"පෙර වරු"}})}(n(1))},function(e,t,n){!function(e){"use strict";var t="január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"),n="jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_");function r(e){return e>1&&e<5}function a(e,t,n,a){var o=e+" ";switch(n){case"s":return t||a?"pár sekúnd":"pár sekundami";case"ss":return t||a?o+(r(e)?"sekundy":"sekúnd"):o+"sekundami";case"m":return t?"minúta":a?"minútu":"minútou";case"mm":return t||a?o+(r(e)?"minúty":"minút"):o+"minútami";case"h":return t?"hodina":a?"hodinu":"hodinou";case"hh":return t||a?o+(r(e)?"hodiny":"hodín"):o+"hodinami";case"d":return t||a?"deň":"dňom";case"dd":return t||a?o+(r(e)?"dni":"dní"):o+"dňami";case"M":return t||a?"mesiac":"mesiacom";case"MM":return t||a?o+(r(e)?"mesiace":"mesiacov"):o+"mesiacmi";case"y":return t||a?"rok":"rokom";case"yy":return t||a?o+(r(e)?"roky":"rokov"):o+"rokmi"}}e.defineLocale("sk",{months:t,monthsShort:n,weekdays:"nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),weekdaysShort:"ne_po_ut_st_št_pi_so".split("_"),weekdaysMin:"ne_po_ut_st_št_pi_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm"},calendar:{sameDay:"[dnes o] LT",nextDay:"[zajtra o] LT",nextWeek:function(){switch(this.day()){case 0:return"[v nedeľu o] LT";case 1:case 2:return"[v] dddd [o] LT";case 3:return"[v stredu o] LT";case 4:return"[vo štvrtok o] LT";case 5:return"[v piatok o] LT";case 6:return"[v sobotu o] LT"}},lastDay:"[včera o] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulú nedeľu o] LT";case 1:case 2:return"[minulý] dddd [o] LT";case 3:return"[minulú stredu o] LT";case 4:case 5:return"[minulý] dddd [o] LT";case 6:return"[minulú sobotu o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"pred %s",s:a,ss:a,m:a,mm:a,h:a,hh:a,d:a,dd:a,M:a,MM:a,y:a,yy:a},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a=e+" ";switch(n){case"s":return t||r?"nekaj sekund":"nekaj sekundami";case"ss":return a+=1===e?t?"sekundo":"sekundi":2===e?t||r?"sekundi":"sekundah":e<5?t||r?"sekunde":"sekundah":"sekund";case"m":return t?"ena minuta":"eno minuto";case"mm":return a+=1===e?t?"minuta":"minuto":2===e?t||r?"minuti":"minutama":e<5?t||r?"minute":"minutami":t||r?"minut":"minutami";case"h":return t?"ena ura":"eno uro";case"hh":return a+=1===e?t?"ura":"uro":2===e?t||r?"uri":"urama":e<5?t||r?"ure":"urami":t||r?"ur":"urami";case"d":return t||r?"en dan":"enim dnem";case"dd":return a+=1===e?t||r?"dan":"dnem":2===e?t||r?"dni":"dnevoma":t||r?"dni":"dnevi";case"M":return t||r?"en mesec":"enim mesecem";case"MM":return a+=1===e?t||r?"mesec":"mesecem":2===e?t||r?"meseca":"mesecema":e<5?t||r?"mesece":"meseci":t||r?"mesecev":"meseci";case"y":return t||r?"eno leto":"enim letom";case"yy":return a+=1===e?t||r?"leto":"letom":2===e?t||r?"leti":"letoma":e<5?t||r?"leta":"leti":t||r?"let":"leti"}}e.defineLocale("sl",{months:"januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),weekdaysShort:"ned._pon._tor._sre._čet._pet._sob.".split("_"),weekdaysMin:"ne_po_to_sr_če_pe_so".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danes ob] LT",nextDay:"[jutri ob] LT",nextWeek:function(){switch(this.day()){case 0:return"[v] [nedeljo] [ob] LT";case 3:return"[v] [sredo] [ob] LT";case 6:return"[v] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[v] dddd [ob] LT"}},lastDay:"[včeraj ob] LT",lastWeek:function(){switch(this.day()){case 0:return"[prejšnjo] [nedeljo] [ob] LT";case 3:return"[prejšnjo] [sredo] [ob] LT";case 6:return"[prejšnjo] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[prejšnji] dddd [ob] LT"}},sameElse:"L"},relativeTime:{future:"čez %s",past:"pred %s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("sq",{months:"Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split("_"),monthsShort:"Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split("_"),weekdays:"E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë".split("_"),weekdaysShort:"Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"),weekdaysMin:"D_H_Ma_Më_E_P_Sh".split("_"),weekdaysParseExact:!0,meridiemParse:/PD|MD/,isPM:function(e){return"M"===e.charAt(0)},meridiem:function(e,t,n){return e<12?"PD":"MD"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Sot në] LT",nextDay:"[Nesër në] LT",nextWeek:"dddd [në] LT",lastDay:"[Dje në] LT",lastWeek:"dddd [e kaluar në] LT",sameElse:"L"},relativeTime:{future:"në %s",past:"%s më parë",s:"disa sekonda",ss:"%d sekonda",m:"një minutë",mm:"%d minuta",h:"një orë",hh:"%d orë",d:"një ditë",dd:"%d ditë",M:"një muaj",MM:"%d muaj",y:"një vit",yy:"%d vite"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={words:{ss:["sekunda","sekunde","sekundi"],m:["jedan minut","jedne minute"],mm:["minut","minute","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mesec","meseca","meseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,r){var a=t.words[r];return 1===r.length?n?a[0]:a[1]:e+" "+t.correctGrammaticalCase(e,a)}};e.defineLocale("sr",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sre._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedelju] [u] LT";case 3:return"[u] [sredu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedelje] [u] LT","[prošlog] [ponedeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"pre %s",s:"nekoliko sekundi",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"dan",dd:t.translate,M:"mesec",MM:t.translate,y:"godinu",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={words:{ss:["секунда","секунде","секунди"],m:["један минут","једне минуте"],mm:["минут","минуте","минута"],h:["један сат","једног сата"],hh:["сат","сата","сати"],dd:["дан","дана","дана"],MM:["месец","месеца","месеци"],yy:["година","године","година"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,r){var a=t.words[r];return 1===r.length?n?a[0]:a[1]:e+" "+t.correctGrammaticalCase(e,a)}};e.defineLocale("sr-cyrl",{months:"јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар".split("_"),monthsShort:"јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.".split("_"),monthsParseExact:!0,weekdays:"недеља_понедељак_уторак_среда_четвртак_петак_субота".split("_"),weekdaysShort:"нед._пон._уто._сре._чет._пет._суб.".split("_"),weekdaysMin:"не_по_ут_ср_че_пе_су".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[данас у] LT",nextDay:"[сутра у] LT",nextWeek:function(){switch(this.day()){case 0:return"[у] [недељу] [у] LT";case 3:return"[у] [среду] [у] LT";case 6:return"[у] [суботу] [у] LT";case 1:case 2:case 4:case 5:return"[у] dddd [у] LT"}},lastDay:"[јуче у] LT",lastWeek:function(){return["[прошле] [недеље] [у] LT","[прошлог] [понедељка] [у] LT","[прошлог] [уторка] [у] LT","[прошле] [среде] [у] LT","[прошлог] [четвртка] [у] LT","[прошлог] [петка] [у] LT","[прошле] [суботе] [у] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"за %s",past:"пре %s",s:"неколико секунди",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"дан",dd:t.translate,M:"месец",MM:t.translate,y:"годину",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("ss",{months:"Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split("_"),monthsShort:"Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo".split("_"),weekdays:"Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo".split("_"),weekdaysShort:"Lis_Umb_Lsb_Les_Lsi_Lsh_Umg".split("_"),weekdaysMin:"Li_Us_Lb_Lt_Ls_Lh_Ug".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Namuhla nga] LT",nextDay:"[Kusasa nga] LT",nextWeek:"dddd [nga] LT",lastDay:"[Itolo nga] LT",lastWeek:"dddd [leliphelile] [nga] LT",sameElse:"L"},relativeTime:{future:"nga %s",past:"wenteka nga %s",s:"emizuzwana lomcane",ss:"%d mzuzwana",m:"umzuzu",mm:"%d emizuzu",h:"lihora",hh:"%d emahora",d:"lilanga",dd:"%d emalanga",M:"inyanga",MM:"%d tinyanga",y:"umnyaka",yy:"%d iminyaka"},meridiemParse:/ekuseni|emini|entsambama|ebusuku/,meridiem:function(e,t,n){return e<11?"ekuseni":e<15?"emini":e<19?"entsambama":"ebusuku"},meridiemHour:function(e,t){return 12===e&&(e=0),"ekuseni"===t?e:"emini"===t?e>=11?e:e+12:"entsambama"===t||"ebusuku"===t?0===e?0:e+12:void 0},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:"%d",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),weekdaysShort:"sön_mån_tis_ons_tor_fre_lör".split("_"),weekdaysMin:"sö_må_ti_on_to_fr_lö".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [kl.] HH:mm",LLLL:"dddd D MMMM YYYY [kl.] HH:mm",lll:"D MMM YYYY HH:mm",llll:"ddd D MMM YYYY HH:mm"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[Igår] LT",nextWeek:"[På] dddd LT",lastWeek:"[I] dddd[s] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"för %s sedan",s:"några sekunder",ss:"%d sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en månad",MM:"%d månader",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}(e|a)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"e":1===t||2===t?"a":"e")},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("sw",{months:"Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des".split("_"),weekdays:"Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi".split("_"),weekdaysShort:"Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos".split("_"),weekdaysMin:"J2_J3_J4_J5_Al_Ij_J1".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[leo saa] LT",nextDay:"[kesho saa] LT",nextWeek:"[wiki ijayo] dddd [saat] LT",lastDay:"[jana] LT",lastWeek:"[wiki iliyopita] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s baadaye",past:"tokea %s",s:"hivi punde",ss:"sekunde %d",m:"dakika moja",mm:"dakika %d",h:"saa limoja",hh:"masaa %d",d:"siku moja",dd:"masiku %d",M:"mwezi mmoja",MM:"miezi %d",y:"mwaka mmoja",yy:"miaka %d"},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"௧",2:"௨",3:"௩",4:"௪",5:"௫",6:"௬",7:"௭",8:"௮",9:"௯",0:"௦"},n={"௧":"1","௨":"2","௩":"3","௪":"4","௫":"5","௬":"6","௭":"7","௮":"8","௯":"9","௦":"0"};e.defineLocale("ta",{months:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),monthsShort:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),weekdays:"ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை".split("_"),weekdaysShort:"ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி".split("_"),weekdaysMin:"ஞா_தி_செ_பு_வி_வெ_ச".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, HH:mm",LLLL:"dddd, D MMMM YYYY, HH:mm"},calendar:{sameDay:"[இன்று] LT",nextDay:"[நாளை] LT",nextWeek:"dddd, LT",lastDay:"[நேற்று] LT",lastWeek:"[கடந்த வாரம்] dddd, LT",sameElse:"L"},relativeTime:{future:"%s இல்",past:"%s முன்",s:"ஒரு சில விநாடிகள்",ss:"%d விநாடிகள்",m:"ஒரு நிமிடம்",mm:"%d நிமிடங்கள்",h:"ஒரு மணி நேரம்",hh:"%d மணி நேரம்",d:"ஒரு நாள்",dd:"%d நாட்கள்",M:"ஒரு மாதம்",MM:"%d மாதங்கள்",y:"ஒரு வருடம்",yy:"%d ஆண்டுகள்"},dayOfMonthOrdinalParse:/\d{1,2}வது/,ordinal:function(e){return e+"வது"},preparse:function(e){return e.replace(/[௧௨௩௪௫௬௭௮௯௦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,meridiem:function(e,t,n){return e<2?" யாமம்":e<6?" வைகறை":e<10?" காலை":e<14?" நண்பகல்":e<18?" எற்பாடு":e<22?" மாலை":" யாமம்"},meridiemHour:function(e,t){return 12===e&&(e=0),"யாமம்"===t?e<2?e:e+12:"வைகறை"===t||"காலை"===t||"நண்பகல்"===t&&e>=10?e:e+12},week:{dow:0,doy:6}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("te",{months:"జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జులై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్".split("_"),monthsShort:"జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జులై_ఆగ._సెప్._అక్టో._నవ._డిసె.".split("_"),monthsParseExact:!0,weekdays:"ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం".split("_"),weekdaysShort:"ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని".split("_"),weekdaysMin:"ఆ_సో_మం_బు_గు_శు_శ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[నేడు] LT",nextDay:"[రేపు] LT",nextWeek:"dddd, LT",lastDay:"[నిన్న] LT",lastWeek:"[గత] dddd, LT",sameElse:"L"},relativeTime:{future:"%s లో",past:"%s క్రితం",s:"కొన్ని క్షణాలు",ss:"%d సెకన్లు",m:"ఒక నిమిషం",mm:"%d నిమిషాలు",h:"ఒక గంట",hh:"%d గంటలు",d:"ఒక రోజు",dd:"%d రోజులు",M:"ఒక నెల",MM:"%d నెలలు",y:"ఒక సంవత్సరం",yy:"%d సంవత్సరాలు"},dayOfMonthOrdinalParse:/\d{1,2}వ/,ordinal:"%dవ",meridiemParse:/రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,meridiemHour:function(e,t){return 12===e&&(e=0),"రాత్రి"===t?e<4?e:e+12:"ఉదయం"===t?e:"మధ్యాహ్నం"===t?e>=10?e:e+12:"సాయంత్రం"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"రాత్రి":e<10?"ఉదయం":e<17?"మధ్యాహ్నం":e<20?"సాయంత్రం":"రాత్రి"},week:{dow:0,doy:6}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("tet",{months:"Janeiru_Fevereiru_Marsu_Abril_Maiu_Juñu_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu".split("_"),weekdaysShort:"Dom_Seg_Ters_Kua_Kint_Sest_Sab".split("_"),weekdaysMin:"Do_Seg_Te_Ku_Ki_Ses_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Ohin iha] LT",nextDay:"[Aban iha] LT",nextWeek:"dddd [iha] LT",lastDay:"[Horiseik iha] LT",lastWeek:"dddd [semana kotuk] [iha] LT",sameElse:"L"},relativeTime:{future:"iha %s",past:"%s liuba",s:"minutu balun",ss:"minutu %d",m:"minutu ida",mm:"minutu %d",h:"oras ida",hh:"oras %d",d:"loron ida",dd:"loron %d",M:"fulan ida",MM:"fulan %d",y:"tinan ida",yy:"tinan %d"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={0:"-ум",1:"-ум",2:"-юм",3:"-юм",4:"-ум",5:"-ум",6:"-ум",7:"-ум",8:"-ум",9:"-ум",10:"-ум",12:"-ум",13:"-ум",20:"-ум",30:"-юм",40:"-ум",50:"-ум",60:"-ум",70:"-ум",80:"-ум",90:"-ум",100:"-ум"};e.defineLocale("tg",{months:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"якшанбе_душанбе_сешанбе_чоршанбе_панҷшанбе_ҷумъа_шанбе".split("_"),weekdaysShort:"яшб_дшб_сшб_чшб_пшб_ҷум_шнб".split("_"),weekdaysMin:"яш_дш_сш_чш_пш_ҷм_шб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Имрӯз соати] LT",nextDay:"[Пагоҳ соати] LT",lastDay:"[Дирӯз соати] LT",nextWeek:"dddd[и] [ҳафтаи оянда соати] LT",lastWeek:"dddd[и] [ҳафтаи гузашта соати] LT",sameElse:"L"},relativeTime:{future:"баъди %s",past:"%s пеш",s:"якчанд сония",m:"як дақиқа",mm:"%d дақиқа",h:"як соат",hh:"%d соат",d:"як рӯз",dd:"%d рӯз",M:"як моҳ",MM:"%d моҳ",y:"як сол",yy:"%d сол"},meridiemParse:/шаб|субҳ|рӯз|бегоҳ/,meridiemHour:function(e,t){return 12===e&&(e=0),"шаб"===t?e<4?e:e+12:"субҳ"===t?e:"рӯз"===t?e>=11?e:e+12:"бегоҳ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"шаб":e<11?"субҳ":e<16?"рӯз":e<19?"бегоҳ":"шаб"},dayOfMonthOrdinalParse:/\d{1,2}-(ум|юм)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("th",{months:"มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),monthsShort:"ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.".split("_"),monthsParseExact:!0,weekdays:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),weekdaysShort:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"),weekdaysMin:"อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY เวลา H:mm",LLLL:"วันddddที่ D MMMM YYYY เวลา H:mm"},meridiemParse:/ก่อนเที่ยง|หลังเที่ยง/,isPM:function(e){return"หลังเที่ยง"===e},meridiem:function(e,t,n){return e<12?"ก่อนเที่ยง":"หลังเที่ยง"},calendar:{sameDay:"[วันนี้ เวลา] LT",nextDay:"[พรุ่งนี้ เวลา] LT",nextWeek:"dddd[หน้า เวลา] LT",lastDay:"[เมื่อวานนี้ เวลา] LT",lastWeek:"[วัน]dddd[ที่แล้ว เวลา] LT",sameElse:"L"},relativeTime:{future:"อีก %s",past:"%sที่แล้ว",s:"ไม่กี่วินาที",ss:"%d วินาที",m:"1 นาที",mm:"%d นาที",h:"1 ชั่วโมง",hh:"%d ชั่วโมง",d:"1 วัน",dd:"%d วัน",M:"1 เดือน",MM:"%d เดือน",y:"1 ปี",yy:"%d ปี"}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("tl-ph",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"LT [ngayong araw]",nextDay:"[Bukas ng] LT",nextWeek:"LT [sa susunod na] dddd",lastDay:"LT [kahapon]",lastWeek:"LT [noong nakaraang] dddd",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",ss:"%d segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t="pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut".split("_");function n(e,n,r,a){var o=function(e){var n=Math.floor(e%1e3/100),r=Math.floor(e%100/10),a=e%10,o="";return n>0&&(o+=t[n]+"vatlh"),r>0&&(o+=(""!==o?" ":"")+t[r]+"maH"),a>0&&(o+=(""!==o?" ":"")+t[a]),""===o?"pagh":o}(e);switch(r){case"ss":return o+" lup";case"mm":return o+" tup";case"hh":return o+" rep";case"dd":return o+" jaj";case"MM":return o+" jar";case"yy":return o+" DIS"}}e.defineLocale("tlh",{months:"tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’".split("_"),monthsShort:"jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’".split("_"),monthsParseExact:!0,weekdays:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysShort:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysMin:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[DaHjaj] LT",nextDay:"[wa’leS] LT",nextWeek:"LLL",lastDay:"[wa’Hu’] LT",lastWeek:"LLL",sameElse:"L"},relativeTime:{future:function(e){var t=e;return t=-1!==e.indexOf("jaj")?t.slice(0,-3)+"leS":-1!==e.indexOf("jar")?t.slice(0,-3)+"waQ":-1!==e.indexOf("DIS")?t.slice(0,-3)+"nem":t+" pIq"},past:function(e){var t=e;return t=-1!==e.indexOf("jaj")?t.slice(0,-3)+"Hu’":-1!==e.indexOf("jar")?t.slice(0,-3)+"wen":-1!==e.indexOf("DIS")?t.slice(0,-3)+"ben":t+" ret"},s:"puS lup",ss:n,m:"wa’ tup",mm:n,h:"wa’ rep",hh:n,d:"wa’ jaj",dd:n,M:"wa’ jar",MM:n,y:"wa’ DIS",yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";var t={1:"'inci",5:"'inci",8:"'inci",70:"'inci",80:"'inci",2:"'nci",7:"'nci",20:"'nci",50:"'nci",3:"'üncü",4:"'üncü",100:"'üncü",6:"'ncı",9:"'uncu",10:"'uncu",30:"'uncu",60:"'ıncı",90:"'ıncı"};e.defineLocale("tr",{months:"Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),monthsShort:"Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),weekdays:"Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),weekdaysShort:"Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"),weekdaysMin:"Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[yarın saat] LT",nextWeek:"[gelecek] dddd [saat] LT",lastDay:"[dün] LT",lastWeek:"[geçen] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s önce",s:"birkaç saniye",ss:"%d saniye",m:"bir dakika",mm:"%d dakika",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir yıl",yy:"%d yıl"},ordinal:function(e,n){switch(n){case"d":case"D":case"Do":case"DD":return e;default:if(0===e)return e+"'ıncı";var r=e%10;return e+(t[r]||t[e%100-r]||t[e>=100?100:null])}},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={s:["viensas secunds","'iensas secunds"],ss:[e+" secunds",e+" secunds"],m:["'n míut","'iens míut"],mm:[e+" míuts",e+" míuts"],h:["'n þora","'iensa þora"],hh:[e+" þoras",e+" þoras"],d:["'n ziua","'iensa ziua"],dd:[e+" ziuas",e+" ziuas"],M:["'n mes","'iens mes"],MM:[e+" mesen",e+" mesen"],y:["'n ar","'iens ar"],yy:[e+" ars",e+" ars"]};return r||t?a[n][0]:a[n][1]}e.defineLocale("tzl",{months:"Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar".split("_"),monthsShort:"Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec".split("_"),weekdays:"Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi".split("_"),weekdaysShort:"Súl_Lún_Mai_Már_Xhú_Vié_Sát".split("_"),weekdaysMin:"Sú_Lú_Ma_Má_Xh_Vi_Sá".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"D. MMMM [dallas] YYYY",LLL:"D. MMMM [dallas] YYYY HH.mm",LLLL:"dddd, [li] D. MMMM [dallas] YYYY HH.mm"},meridiemParse:/d\'o|d\'a/i,isPM:function(e){return"d'o"===e.toLowerCase()},meridiem:function(e,t,n){return e>11?n?"d'o":"D'O":n?"d'a":"D'A"},calendar:{sameDay:"[oxhi à] LT",nextDay:"[demà à] LT",nextWeek:"dddd [à] LT",lastDay:"[ieiri à] LT",lastWeek:"[sür el] dddd [lasteu à] LT",sameElse:"L"},relativeTime:{future:"osprei %s",past:"ja%s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("tzm",{months:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),monthsShort:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),weekdays:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysShort:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysMin:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ⴰⵙⴷⵅ ⴴ] LT",nextDay:"[ⴰⵙⴽⴰ ⴴ] LT",nextWeek:"dddd [ⴴ] LT",lastDay:"[ⴰⵚⴰⵏⵜ ⴴ] LT",lastWeek:"dddd [ⴴ] LT",sameElse:"L"},relativeTime:{future:"ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s",past:"ⵢⴰⵏ %s",s:"ⵉⵎⵉⴽ",ss:"%d ⵉⵎⵉⴽ",m:"ⵎⵉⵏⵓⴺ",mm:"%d ⵎⵉⵏⵓⴺ",h:"ⵙⴰⵄⴰ",hh:"%d ⵜⴰⵙⵙⴰⵄⵉⵏ",d:"ⴰⵙⵙ",dd:"%d oⵙⵙⴰⵏ",M:"ⴰⵢoⵓⵔ",MM:"%d ⵉⵢⵢⵉⵔⵏ",y:"ⴰⵙⴳⴰⵙ",yy:"%d ⵉⵙⴳⴰⵙⵏ"},week:{dow:6,doy:12}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("tzm-latn",{months:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),monthsShort:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),weekdays:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysShort:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysMin:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[asdkh g] LT",nextDay:"[aska g] LT",nextWeek:"dddd [g] LT",lastDay:"[assant g] LT",lastWeek:"dddd [g] LT",sameElse:"L"},relativeTime:{future:"dadkh s yan %s",past:"yan %s",s:"imik",ss:"%d imik",m:"minuḍ",mm:"%d minuḍ",h:"saɛa",hh:"%d tassaɛin",d:"ass",dd:"%d ossan",M:"ayowr",MM:"%d iyyirn",y:"asgas",yy:"%d isgasn"},week:{dow:6,doy:12}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("ug-cn",{months:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),monthsShort:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),weekdays:"يەكشەنبە_دۈشەنبە_سەيشەنبە_چارشەنبە_پەيشەنبە_جۈمە_شەنبە".split("_"),weekdaysShort:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),weekdaysMin:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY-يىلىM-ئاينىڭD-كۈنى",LLL:"YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm",LLLL:"dddd، YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm"},meridiemParse:/يېرىم كېچە|سەھەر|چۈشتىن بۇرۇن|چۈش|چۈشتىن كېيىن|كەچ/,meridiemHour:function(e,t){return 12===e&&(e=0),"يېرىم كېچە"===t||"سەھەر"===t||"چۈشتىن بۇرۇن"===t?e:"چۈشتىن كېيىن"===t||"كەچ"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var r=100*e+t;return r<600?"يېرىم كېچە":r<900?"سەھەر":r<1130?"چۈشتىن بۇرۇن":r<1230?"چۈش":r<1800?"چۈشتىن كېيىن":"كەچ"},calendar:{sameDay:"[بۈگۈن سائەت] LT",nextDay:"[ئەتە سائەت] LT",nextWeek:"[كېلەركى] dddd [سائەت] LT",lastDay:"[تۆنۈگۈن] LT",lastWeek:"[ئالدىنقى] dddd [سائەت] LT",sameElse:"L"},relativeTime:{future:"%s كېيىن",past:"%s بۇرۇن",s:"نەچچە سېكونت",ss:"%d سېكونت",m:"بىر مىنۇت",mm:"%d مىنۇت",h:"بىر سائەت",hh:"%d سائەت",d:"بىر كۈن",dd:"%d كۈن",M:"بىر ئاي",MM:"%d ئاي",y:"بىر يىل",yy:"%d يىل"},dayOfMonthOrdinalParse:/\d{1,2}(-كۈنى|-ئاي|-ھەپتە)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"-كۈنى";case"w":case"W":return e+"-ھەپتە";default:return e}},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";function t(e,t,n){var r,a;return"m"===n?t?"хвилина":"хвилину":"h"===n?t?"година":"годину":e+" "+(r=+e,a={ss:t?"секунда_секунди_секунд":"секунду_секунди_секунд",mm:t?"хвилина_хвилини_хвилин":"хвилину_хвилини_хвилин",hh:t?"година_години_годин":"годину_години_годин",dd:"день_дні_днів",MM:"місяць_місяці_місяців",yy:"рік_роки_років"}[n].split("_"),r%10==1&&r%100!=11?a[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?a[1]:a[2])}function n(e){return function(){return e+"о"+(11===this.hours()?"б":"")+"] LT"}}e.defineLocale("uk",{months:{format:"січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_"),standalone:"січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_")},monthsShort:"січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),weekdays:function(e,t){var n={nominative:"неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"),accusative:"неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"),genitive:"неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_")};return!0===e?n.nominative.slice(1,7).concat(n.nominative.slice(0,1)):e?n[/(\[[ВвУу]\]) ?dddd/.test(t)?"accusative":/\[?(?:минулої|наступної)? ?\] ?dddd/.test(t)?"genitive":"nominative"][e.day()]:n.nominative},weekdaysShort:"нд_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY р.",LLL:"D MMMM YYYY р., HH:mm",LLLL:"dddd, D MMMM YYYY р., HH:mm"},calendar:{sameDay:n("[Сьогодні "),nextDay:n("[Завтра "),lastDay:n("[Вчора "),nextWeek:n("[У] dddd ["),lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return n("[Минулої] dddd [").call(this);case 1:case 2:case 4:return n("[Минулого] dddd [").call(this)}},sameElse:"L"},relativeTime:{future:"за %s",past:"%s тому",s:"декілька секунд",ss:t,m:t,mm:t,h:"годину",hh:t,d:"день",dd:t,M:"місяць",MM:t,y:"рік",yy:t},meridiemParse:/ночі|ранку|дня|вечора/,isPM:function(e){return/^(дня|вечора)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночі":e<12?"ранку":e<17?"дня":"вечора"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e+"-й";case"D":return e+"-го";default:return e}},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";var t=["جنوری","فروری","مارچ","اپریل","مئی","جون","جولائی","اگست","ستمبر","اکتوبر","نومبر","دسمبر"],n=["اتوار","پیر","منگل","بدھ","جمعرات","جمعہ","ہفتہ"];e.defineLocale("ur",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(e){return"شام"===e},meridiem:function(e,t,n){return e<12?"صبح":"شام"},calendar:{sameDay:"[آج بوقت] LT",nextDay:"[کل بوقت] LT",nextWeek:"dddd [بوقت] LT",lastDay:"[گذشتہ روز بوقت] LT",lastWeek:"[گذشتہ] dddd [بوقت] LT",sameElse:"L"},relativeTime:{future:"%s بعد",past:"%s قبل",s:"چند سیکنڈ",ss:"%d سیکنڈ",m:"ایک منٹ",mm:"%d منٹ",h:"ایک گھنٹہ",hh:"%d گھنٹے",d:"ایک دن",dd:"%d دن",M:"ایک ماہ",MM:"%d ماہ",y:"ایک سال",yy:"%d سال"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("uz",{months:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба".split("_"),weekdaysShort:"Якш_Душ_Сеш_Чор_Пай_Жум_Шан".split("_"),weekdaysMin:"Як_Ду_Се_Чо_Па_Жу_Ша".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Бугун соат] LT [да]",nextDay:"[Эртага] LT [да]",nextWeek:"dddd [куни соат] LT [да]",lastDay:"[Кеча соат] LT [да]",lastWeek:"[Утган] dddd [куни соат] LT [да]",sameElse:"L"},relativeTime:{future:"Якин %s ичида",past:"Бир неча %s олдин",s:"фурсат",ss:"%d фурсат",m:"бир дакика",mm:"%d дакика",h:"бир соат",hh:"%d соат",d:"бир кун",dd:"%d кун",M:"бир ой",MM:"%d ой",y:"бир йил",yy:"%d йил"},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("uz-latn",{months:"Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr".split("_"),monthsShort:"Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek".split("_"),weekdays:"Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba".split("_"),weekdaysShort:"Yak_Dush_Sesh_Chor_Pay_Jum_Shan".split("_"),weekdaysMin:"Ya_Du_Se_Cho_Pa_Ju_Sha".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Bugun soat] LT [da]",nextDay:"[Ertaga] LT [da]",nextWeek:"dddd [kuni soat] LT [da]",lastDay:"[Kecha soat] LT [da]",lastWeek:"[O'tgan] dddd [kuni soat] LT [da]",sameElse:"L"},relativeTime:{future:"Yaqin %s ichida",past:"Bir necha %s oldin",s:"soniya",ss:"%d soniya",m:"bir daqiqa",mm:"%d daqiqa",h:"bir soat",hh:"%d soat",d:"bir kun",dd:"%d kun",M:"bir oy",MM:"%d oy",y:"bir yil",yy:"%d yil"},week:{dow:1,doy:7}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("vi",{months:"tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),monthsShort:"Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12".split("_"),monthsParseExact:!0,weekdays:"chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),weekdaysShort:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysMin:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysParseExact:!0,meridiemParse:/sa|ch/i,isPM:function(e){return/^ch$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"sa":"SA":n?"ch":"CH"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [năm] YYYY",LLL:"D MMMM [năm] YYYY HH:mm",LLLL:"dddd, D MMMM [năm] YYYY HH:mm",l:"DD/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[Hôm nay lúc] LT",nextDay:"[Ngày mai lúc] LT",nextWeek:"dddd [tuần tới lúc] LT",lastDay:"[Hôm qua lúc] LT",lastWeek:"dddd [tuần rồi lúc] LT",sameElse:"L"},relativeTime:{future:"%s tới",past:"%s trước",s:"vài giây",ss:"%d giây",m:"một phút",mm:"%d phút",h:"một giờ",hh:"%d giờ",d:"một ngày",dd:"%d ngày",M:"một tháng",MM:"%d tháng",y:"một năm",yy:"%d năm"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("x-pseudo",{months:"J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér".split("_"),monthsShort:"J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc".split("_"),monthsParseExact:!0,weekdays:"S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý".split("_"),weekdaysShort:"S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát".split("_"),weekdaysMin:"S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[T~ódá~ý át] LT",nextDay:"[T~ómó~rró~w át] LT",nextWeek:"dddd [át] LT",lastDay:"[Ý~ést~érdá~ý át] LT",lastWeek:"[L~ást] dddd [át] LT",sameElse:"L"},relativeTime:{future:"í~ñ %s",past:"%s á~gó",s:"á ~féw ~sécó~ñds",ss:"%d s~écóñ~ds",m:"á ~míñ~úté",mm:"%d m~íñú~tés",h:"á~ñ hó~úr",hh:"%d h~óúrs",d:"á ~dáý",dd:"%d d~áýs",M:"á ~móñ~th",MM:"%d m~óñt~hs",y:"á ~ýéár",yy:"%d ý~éárs"},dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("yo",{months:"Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀".split("_"),monthsShort:"Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀".split("_"),weekdays:"Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta".split("_"),weekdaysShort:"Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá".split("_"),weekdaysMin:"Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Ònì ni] LT",nextDay:"[Ọ̀la ni] LT",nextWeek:"dddd [Ọsẹ̀ tón'bọ] [ni] LT",lastDay:"[Àna ni] LT",lastWeek:"dddd [Ọsẹ̀ tólọ́] [ni] LT",sameElse:"L"},relativeTime:{future:"ní %s",past:"%s kọjá",s:"ìsẹjú aayá die",ss:"aayá %d",m:"ìsẹjú kan",mm:"ìsẹjú %d",h:"wákati kan",hh:"wákati %d",d:"ọjọ́ kan",dd:"ọjọ́ %d",M:"osù kan",MM:"osù %d",y:"ọdún kan",yy:"ọdún %d"},dayOfMonthOrdinalParse:/ọjọ́\s\d{1,2}/,ordinal:"ọjọ́ %d",week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("zh-cn",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"周日_周一_周二_周三_周四_周五_周六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日Ah点mm分",LLLL:"YYYY年M月D日ddddAh点mm分",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"下午"===t||"晚上"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|周)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"周";default:return e}},relativeTime:{future:"%s内",past:"%s前",s:"几秒",ss:"%d 秒",m:"1 分钟",mm:"%d 分钟",h:"1 小时",hh:"%d 小时",d:"1 天",dd:"%d 天",M:"1 个月",MM:"%d 个月",y:"1 年",yy:"%d 年"},week:{dow:1,doy:4}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("zh-hk",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(1))},function(e,t,n){!function(e){"use strict";e.defineLocale("zh-tw",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天] LT",nextDay:"[明天] LT",nextWeek:"[下]dddd LT",lastDay:"[昨天] LT",lastWeek:"[上]dddd LT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(1))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.PureCalendarDay=void 0;var a=r(n(11)),o=r(n(12)),i=r(n(13)),s=r(n(8)),u=(r(n(7)),r(n(0))),l=(r(n(3)),r(n(16)),n(6),n(14)),d=r(n(1)),c=r(n(284)),f=n(9),h=(r(n(10)),r(n(287))),_=(r(n(42)),n(4));var m={day:(0,d.default)(),daySize:_.DAY_SIZE,isOutsideDay:!1,modifiers:new Set,isFocused:!1,tabIndex:-1,onDayClick:function(){},onDayMouseEnter:function(){},onDayMouseLeave:function(){},renderDayContents:null,ariaLabelFormat:"dddd, LL",phrases:f.CalendarDayPhrases},p=function(e){(0,s.default)(n,e);var t=n.prototype;function n(){for(var t,n=arguments.length,r=new Array(n),a=0;a<n;a++)r[a]=arguments[a];return(t=e.call.apply(e,[this].concat(r))||this).setButtonRef=t.setButtonRef.bind((0,i.default)(t)),t}return t[!u.default.PureComponent&&"shouldComponentUpdate"]=function(e,t){return!(0,a.default)(this.props,e)||!(0,a.default)(this.state,t)},t.componentDidUpdate=function(e){var t=this,n=this.props,r=n.isFocused,a=n.tabIndex;0===a&&(r||a!==e.tabIndex)&&(0,c.default)((function(){t.buttonRef&&t.buttonRef.focus()}))},t.onDayClick=function(e,t){var n=this.props.onDayClick;n(e,t)},t.onDayMouseEnter=function(e,t){var n=this.props.onDayMouseEnter;n(e,t)},t.onDayMouseLeave=function(e,t){var n=this.props.onDayMouseLeave;n(e,t)},t.onKeyDown=function(e,t){var n=this.props.onDayClick,r=t.key;"Enter"!==r&&" "!==r||n(e,t)},t.setButtonRef=function(e){this.buttonRef=e},t.render=function(){var e=this,t=this.props,n=t.day,r=t.ariaLabelFormat,a=t.daySize,i=t.isOutsideDay,s=t.modifiers,d=t.renderDayContents,c=t.tabIndex,f=t.styles,_=t.phrases;if(!n)return u.default.createElement("td",null);var m=(0,h.default)(n,r,a,s,_),p=m.daySizeStyles,y=m.useDefaultCursor,v=m.selected,g=m.hoveredSpan,b=m.isOutsideRange,M=m.ariaLabel;return u.default.createElement("td",(0,o.default)({},(0,l.css)(f.CalendarDay,y&&f.CalendarDay__defaultCursor,f.CalendarDay__default,i&&f.CalendarDay__outside,s.has("today")&&f.CalendarDay__today,s.has("first-day-of-week")&&f.CalendarDay__firstDayOfWeek,s.has("last-day-of-week")&&f.CalendarDay__lastDayOfWeek,s.has("hovered-offset")&&f.CalendarDay__hovered_offset,s.has("hovered-start-first-possible-end")&&f.CalendarDay__hovered_start_first_possible_end,s.has("hovered-start-blocked-minimum-nights")&&f.CalendarDay__hovered_start_blocked_min_nights,s.has("highlighted-calendar")&&f.CalendarDay__highlighted_calendar,s.has("blocked-minimum-nights")&&f.CalendarDay__blocked_minimum_nights,s.has("blocked-calendar")&&f.CalendarDay__blocked_calendar,g&&f.CalendarDay__hovered_span,s.has("after-hovered-start")&&f.CalendarDay__after_hovered_start,s.has("selected-span")&&f.CalendarDay__selected_span,s.has("selected-start")&&f.CalendarDay__selected_start,s.has("selected-end")&&f.CalendarDay__selected_end,v&&!s.has("selected-span")&&f.CalendarDay__selected,s.has("before-hovered-end")&&f.CalendarDay__before_hovered_end,s.has("no-selected-start-before-selected-end")&&f.CalendarDay__no_selected_start_before_selected_end,s.has("selected-start-in-hovered-span")&&f.CalendarDay__selected_start_in_hovered_span,s.has("selected-end-in-hovered-span")&&f.CalendarDay__selected_end_in_hovered_span,s.has("selected-start-no-selected-end")&&f.CalendarDay__selected_start_no_selected_end,s.has("selected-end-no-selected-start")&&f.CalendarDay__selected_end_no_selected_start,b&&f.CalendarDay__blocked_out_of_range,p),{role:"button",ref:this.setButtonRef,"aria-disabled":s.has("blocked"),"aria-label":M,onMouseEnter:function(t){e.onDayMouseEnter(n,t)},onMouseLeave:function(t){e.onDayMouseLeave(n,t)},onMouseUp:function(e){e.currentTarget.blur()},onClick:function(t){e.onDayClick(n,t)},onKeyDown:function(t){e.onKeyDown(n,t)},tabIndex:c}),d?d(n,s):n.format("D"))},n}(u.default.PureComponent||u.default.Component);t.PureCalendarDay=p,p.propTypes={},p.defaultProps=m;var y=(0,l.withStyles)((function(e){var t=e.reactDates,n=t.color;return{CalendarDay:{boxSizing:"border-box",cursor:"pointer",fontSize:t.font.size,textAlign:"center",":active":{outline:0}},CalendarDay__defaultCursor:{cursor:"default"},CalendarDay__default:{border:"1px solid ".concat(n.core.borderLight),color:n.text,background:n.background,":hover":{background:n.core.borderLight,border:"1px solid ".concat(n.core.borderLight),color:"inherit"}},CalendarDay__hovered_offset:{background:n.core.borderBright,border:"1px double ".concat(n.core.borderLight),color:"inherit"},CalendarDay__outside:{border:0,background:n.outside.backgroundColor,color:n.outside.color,":hover":{border:0}},CalendarDay__blocked_minimum_nights:{background:n.minimumNights.backgroundColor,border:"1px solid ".concat(n.minimumNights.borderColor),color:n.minimumNights.color,":hover":{background:n.minimumNights.backgroundColor_hover,color:n.minimumNights.color_active},":active":{background:n.minimumNights.backgroundColor_active,color:n.minimumNights.color_active}},CalendarDay__highlighted_calendar:{background:n.highlighted.backgroundColor,color:n.highlighted.color,":hover":{background:n.highlighted.backgroundColor_hover,color:n.highlighted.color_active},":active":{background:n.highlighted.backgroundColor_active,color:n.highlighted.color_active}},CalendarDay__selected_span:{background:n.selectedSpan.backgroundColor,border:"1px double ".concat(n.selectedSpan.borderColor),color:n.selectedSpan.color,":hover":{background:n.selectedSpan.backgroundColor_hover,border:"1px double ".concat(n.selectedSpan.borderColor),color:n.selectedSpan.color_active},":active":{background:n.selectedSpan.backgroundColor_active,border:"1px double ".concat(n.selectedSpan.borderColor),color:n.selectedSpan.color_active}},CalendarDay__selected:{background:n.selected.backgroundColor,border:"1px double ".concat(n.selected.borderColor),color:n.selected.color,":hover":{background:n.selected.backgroundColor_hover,border:"1px double ".concat(n.selected.borderColor),color:n.selected.color_active},":active":{background:n.selected.backgroundColor_active,border:"1px double ".concat(n.selected.borderColor),color:n.selected.color_active}},CalendarDay__hovered_span:{background:n.hoveredSpan.backgroundColor,border:"1px double ".concat(n.hoveredSpan.borderColor),color:n.hoveredSpan.color,":hover":{background:n.hoveredSpan.backgroundColor_hover,border:"1px double ".concat(n.hoveredSpan.borderColor),color:n.hoveredSpan.color_active},":active":{background:n.hoveredSpan.backgroundColor_active,border:"1px double ".concat(n.hoveredSpan.borderColor),color:n.hoveredSpan.color_active}},CalendarDay__blocked_calendar:{background:n.blocked_calendar.backgroundColor,border:"1px solid ".concat(n.blocked_calendar.borderColor),color:n.blocked_calendar.color,":hover":{background:n.blocked_calendar.backgroundColor_hover,border:"1px solid ".concat(n.blocked_calendar.borderColor),color:n.blocked_calendar.color_active},":active":{background:n.blocked_calendar.backgroundColor_active,border:"1px solid ".concat(n.blocked_calendar.borderColor),color:n.blocked_calendar.color_active}},CalendarDay__blocked_out_of_range:{background:n.blocked_out_of_range.backgroundColor,border:"1px solid ".concat(n.blocked_out_of_range.borderColor),color:n.blocked_out_of_range.color,":hover":{background:n.blocked_out_of_range.backgroundColor_hover,border:"1px solid ".concat(n.blocked_out_of_range.borderColor),color:n.blocked_out_of_range.color_active},":active":{background:n.blocked_out_of_range.backgroundColor_active,border:"1px solid ".concat(n.blocked_out_of_range.borderColor),color:n.blocked_out_of_range.color_active}},CalendarDay__hovered_start_first_possible_end:{background:n.core.borderLighter,border:"1px double ".concat(n.core.borderLighter)},CalendarDay__hovered_start_blocked_min_nights:{background:n.core.borderLighter,border:"1px double ".concat(n.core.borderLight)},CalendarDay__selected_start:{},CalendarDay__selected_end:{},CalendarDay__today:{},CalendarDay__firstDayOfWeek:{},CalendarDay__lastDayOfWeek:{},CalendarDay__after_hovered_start:{},CalendarDay__before_hovered_end:{},CalendarDay__no_selected_start_before_selected_end:{},CalendarDay__selected_start_in_hovered_span:{},CalendarDay__selected_end_in_hovered_span:{},CalendarDay__selected_start_no_selected_end:{},CalendarDay__selected_end_no_selected_start:{}}}),{pureComponent:void 0!==u.default.PureComponent})(p);t.default=y},function(e,t,n){var r=n(268);function a(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return a=function(){return e},e}e.exports=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==r(e)&&"function"!=typeof e)return{default:e};var t=a();if(t&&t.has(e))return t.get(e);var n={},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in e)if(Object.prototype.hasOwnProperty.call(e,i)){var s=o?Object.getOwnPropertyDescriptor(e,i):null;s&&(s.get||s.set)?Object.defineProperty(n,i,s):n[i]=e[i]}return n.default=e,t&&t.set(e,n),n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function e(t){if("string"==typeof t)return t;if("function"==typeof t)return t.displayName||(0,a.default)(t);if((0,o.isForwardRef)({type:t,$$typeof:o.Element}))return t.displayName;if((0,o.isMemo)(t))return e(t.type);return null};var r,a=(r=n(269))&&r.__esModule?r:{default:r},o=n(39)},function(e,t,n){"use strict";var r=Object.prototype.toString;e.exports=function(e){var t=r.call(e),n="[object Arguments]"===t;return n||(n="[object Array]"!==t&&null!==e&&"object"==typeof e&&"number"==typeof e.length&&e.length>=0&&"[object Function]"===r.call(e.callee)),n}},function(e,t,n){"use strict";(function(t){var r=t.Symbol,a=n(272);e.exports=function(){return"function"==typeof r&&("function"==typeof Symbol&&("symbol"==typeof r("foo")&&("symbol"==typeof Symbol("bar")&&a())))}}).call(this,n(25))},function(e,t,n){"use strict";var r=n(49),a=n(198)(),o=n(26),i=o("Function.prototype.toString"),s=o("String.prototype.match"),u=/^class /,l=/\s*function\s+([^(\s]*)\s*/,d=Function.prototype;e.exports=function(){if(!function(e){if(r(e))return!1;if("function"!=typeof e)return!1;try{return!!s(i(e),u)}catch(e){}return!1}(this)&&!r(this))throw new TypeError("Function.prototype.name sham getter called on non-function");if(a)return this.name;if(this===d)return"";var e=i(this),t=s(e,l);return t&&t[1]}},function(e,t,n){"use strict";var r=Function.prototype.toString,a=/^\s*class\b/,o=function(e){try{var t=r.call(e);return a.test(t)}catch(e){return!1}},i=Object.prototype.toString,s="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;e.exports=function(e){if(!e)return!1;if("function"!=typeof e&&"object"!=typeof e)return!1;if("function"==typeof e&&!e.prototype)return!0;if(s)return function(e){try{return!o(e)&&(r.call(e),!0)}catch(e){return!1}}(e);if(o(e))return!1;var t=i.call(e);return"[object Function]"===t||"[object GeneratorFunction]"===t}},function(e,t,n){"use strict";var r=function(){return"string"==typeof function(){}.name},a=Object.getOwnPropertyDescriptor;if(a)try{a([],"length")}catch(e){a=null}r.functionsHaveConfigurableNames=function(){return r()&&a&&!!a((function(){}),"name").configurable};var o=Function.prototype.bind;r.boundFunctionsHaveNames=function(){return r()&&"function"==typeof o&&""!==function(){}.bind().name},e.exports=r},function(e,t,n){"use strict";var r=n(196);e.exports=function(){return r}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.CHANNEL="__direction__",t.DIRECTIONS={LTR:"ltr",RTL:"rtl"}},function(e,t,n){"use strict";var r=n(20),a=n(202),o=n(26)("Object.prototype.propertyIsEnumerable");e.exports=function(e){var t=a(e),n=[];for(var i in t)r(t,i)&&o(t,i)&&n.push(t[i]);return n}},function(e,t,n){"use strict";e.exports=n(281)},function(e,t,n){"use strict";var r=n(201);e.exports=function(){return"function"==typeof Object.values?Object.values:r}},function(e,t,n){"use strict";var r,a;Object.defineProperty(t,"__esModule",{value:!0}),t._getInterface=function(){return r},t._getTheme=s,t.default=void 0;function o(e,t){var n=t(e(a));return function(){return n}}function i(e){return o(e,r.createLTR||r.create)}function s(){return a}function u(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var a=r.resolve(t);return a}function l(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return r.resolveLTR?r.resolveLTR(t):u(t)}var d={registerTheme:function(e){a=e},registerInterface:function(e){r=e},create:i,createLTR:i,createRTL:function(e){return o(e,r.createRTL||r.create)},get:s,resolve:l,resolveLTR:l,resolveRTL:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return r.resolveRTL?r.resolveRTL(t):u(t)},flush:function(){r.flush&&r.flush()}};t.default=d},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(11)),o=r(n(12)),i=r(n(13)),s=r(n(8)),u=(r(n(7)),r(n(0))),l=(r(n(3)),r(n(16)),n(6),n(14)),d=r(n(1)),c=n(9),f=(r(n(10)),r(n(292))),h=r(n(191)),_=r(n(206)),m=r(n(293)),p=r(n(21)),y=r(n(33)),v=(r(n(42)),r(n(28)),r(n(22)),n(4));var g={month:(0,d.default)(),horizontalMonthPadding:13,isVisible:!0,enableOutsideDays:!1,modifiers:{},orientation:v.HORIZONTAL_ORIENTATION,daySize:v.DAY_SIZE,onDayClick:function(){},onDayMouseEnter:function(){},onDayMouseLeave:function(){},onMonthSelect:function(){},onYearSelect:function(){},renderMonthText:null,renderCalendarDay:function(e){return u.default.createElement(h.default,e)},renderDayContents:null,renderMonthElement:null,firstDayOfWeek:null,setMonthTitleHeight:null,focusedDate:null,isFocused:!1,monthFormat:"MMMM YYYY",phrases:c.CalendarDayPhrases,dayAriaLabelFormat:void 0,verticalBorderSpacing:void 0},b=function(e){(0,s.default)(n,e);var t=n.prototype;function n(t){var n;return(n=e.call(this,t)||this).state={weeks:(0,m.default)(t.month,t.enableOutsideDays,null==t.firstDayOfWeek?d.default.localeData().firstDayOfWeek():t.firstDayOfWeek)},n.setCaptionRef=n.setCaptionRef.bind((0,i.default)(n)),n.setMonthTitleHeight=n.setMonthTitleHeight.bind((0,i.default)(n)),n}return t[!u.default.PureComponent&&"shouldComponentUpdate"]=function(e,t){return!(0,a.default)(this.props,e)||!(0,a.default)(this.state,t)},t.componentDidMount=function(){this.setMonthTitleHeightTimeout=setTimeout(this.setMonthTitleHeight,0)},t.componentWillReceiveProps=function(e){var t=e.month,n=e.enableOutsideDays,r=e.firstDayOfWeek,a=this.props,o=a.month,i=a.enableOutsideDays,s=a.firstDayOfWeek;t.isSame(o)&&n===i&&r===s||this.setState({weeks:(0,m.default)(t,n,null==r?d.default.localeData().firstDayOfWeek():r)})},t.componentWillUnmount=function(){this.setMonthTitleHeightTimeout&&clearTimeout(this.setMonthTitleHeightTimeout)},t.setMonthTitleHeight=function(){var e=this.props.setMonthTitleHeight;e&&e((0,_.default)(this.captionRef,"height",!0,!0))},t.setCaptionRef=function(e){this.captionRef=e},t.render=function(){var e=this.props,t=e.dayAriaLabelFormat,n=e.daySize,r=e.focusedDate,a=e.horizontalMonthPadding,i=e.isFocused,s=e.isVisible,d=e.modifiers,c=e.month,h=e.monthFormat,_=e.onDayClick,m=e.onDayMouseEnter,g=e.onDayMouseLeave,b=e.onMonthSelect,M=e.onYearSelect,D=e.orientation,k=e.phrases,L=e.renderCalendarDay,w=e.renderDayContents,T=e.renderMonthElement,S=e.renderMonthText,Y=e.styles,P=e.verticalBorderSpacing,O=this.state.weeks,E=S?S(c):c.format(h),x=D===v.VERTICAL_SCROLLABLE;return u.default.createElement("div",(0,o.default)({},(0,l.css)(Y.CalendarMonth,{padding:"0 ".concat(a,"px")}),{"data-visible":s}),u.default.createElement("div",(0,o.default)({ref:this.setCaptionRef},(0,l.css)(Y.CalendarMonth_caption,x&&Y.CalendarMonth_caption__verticalScrollable)),T?T({month:c,onMonthSelect:b,onYearSelect:M,isVisible:s}):u.default.createElement("strong",null,E)),u.default.createElement("table",(0,o.default)({},(0,l.css)(!P&&Y.CalendarMonth_table,P&&Y.CalendarMonth_verticalSpacing,P&&{borderSpacing:"0px ".concat(P,"px")}),{role:"presentation"}),u.default.createElement("tbody",null,O.map((function(e,a){return u.default.createElement(f.default,{key:a},e.map((function(e,a){return L({key:a,day:e,daySize:n,isOutsideDay:!e||e.month()!==c.month(),tabIndex:s&&(0,p.default)(e,r)?0:-1,isFocused:i,onDayMouseEnter:m,onDayMouseLeave:g,onDayClick:_,renderDayContents:w,phrases:k,modifiers:d[(0,y.default)(e)],ariaLabelFormat:t})})))})))))},n}(u.default.PureComponent||u.default.Component);b.propTypes={},b.defaultProps=g;var M=(0,l.withStyles)((function(e){var t=e.reactDates,n=t.color,r=t.font,a=t.spacing;return{CalendarMonth:{background:n.background,textAlign:"center",verticalAlign:"top",userSelect:"none"},CalendarMonth_table:{borderCollapse:"collapse",borderSpacing:0},CalendarMonth_verticalSpacing:{borderCollapse:"separate"},CalendarMonth_caption:{color:n.text,fontSize:r.captionSize,textAlign:"center",paddingTop:a.captionPaddingTop,paddingBottom:a.captionPaddingBottom,captionSide:"initial"},CalendarMonth_caption__verticalScrollable:{paddingTop:12,paddingBottom:7}}}),{pureComponent:void 0!==u.default.PureComponent})(b);t.default=M},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];if(!e)return 0;var a="width"===t?"Left":"Top",o="width"===t?"Right":"Bottom",i=!n||r?window.getComputedStyle(e):null,s=e.offsetWidth,u=e.offsetHeight,l="width"===t?s:u;n||(l-=parseFloat(i["padding".concat(a)])+parseFloat(i["padding".concat(o)])+parseFloat(i["border".concat(a,"Width")])+parseFloat(i["border".concat(o,"Width")]));r&&(l+=parseFloat(i["margin".concat(a)])+parseFloat(i["margin".concat(o)]));return l}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(11)),o=r(n(12)),i=r(n(13)),s=r(n(8)),u=r(n(7)),l=r(n(0)),d=(r(n(3)),r(n(16)),n(6),n(14)),c=r(n(1)),f=n(43),h=n(9),_=(r(n(10)),r(n(19))),m=r(n(205)),p=r(n(294)),y=r(n(295)),v=r(n(208)),g=r(n(44)),b=r(n(296)),M=r(n(297)),D=(r(n(42)),r(n(28)),r(n(22)),n(4));function k(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}var L={enableOutsideDays:!1,firstVisibleMonthIndex:0,horizontalMonthPadding:13,initialMonth:(0,c.default)(),isAnimating:!1,numberOfMonths:1,modifiers:{},orientation:D.HORIZONTAL_ORIENTATION,onDayClick:function(){},onDayMouseEnter:function(){},onDayMouseLeave:function(){},onMonthChange:function(){},onYearChange:function(){},onMonthTransitionEnd:function(){},renderMonthText:null,renderCalendarDay:void 0,renderDayContents:null,translationValue:null,renderMonthElement:null,daySize:D.DAY_SIZE,focusedDate:null,isFocused:!1,firstDayOfWeek:null,setMonthTitleHeight:null,isRTL:!1,transitionDuration:200,verticalBorderSpacing:void 0,monthFormat:"MMMM YYYY",phrases:h.CalendarDayPhrases,dayAriaLabelFormat:void 0};function w(e,t,n){var r=e.clone();n||(r=r.subtract(1,"month"));for(var a=[],o=0;o<(n?t:t+2);o+=1)a.push(r),r=r.clone().add(1,"month");return a}var T=function(e){(0,s.default)(n,e);var t=n.prototype;function n(t){var n;n=e.call(this,t)||this;var r=t.orientation===D.VERTICAL_SCROLLABLE;return n.state={months:w(t.initialMonth,t.numberOfMonths,r)},n.isTransitionEndSupported=(0,p.default)(),n.onTransitionEnd=n.onTransitionEnd.bind((0,i.default)(n)),n.setContainerRef=n.setContainerRef.bind((0,i.default)(n)),n.locale=c.default.locale(),n.onMonthSelect=n.onMonthSelect.bind((0,i.default)(n)),n.onYearSelect=n.onYearSelect.bind((0,i.default)(n)),n}return t[!l.default.PureComponent&&"shouldComponentUpdate"]=function(e,t){return!(0,a.default)(this.props,e)||!(0,a.default)(this.state,t)},t.componentDidMount=function(){this.removeEventListener=(0,f.addEventListener)(this.container,"transitionend",this.onTransitionEnd)},t.componentWillReceiveProps=function(e){var t=this,n=e.initialMonth,r=e.numberOfMonths,a=e.orientation,o=this.state.months,i=this.props,s=i.initialMonth,u=i.numberOfMonths!==r,l=o;if(!s.isSame(n,"month")&&!u)if((0,M.default)(s,n))(l=o.slice(1)).push(o[o.length-1].clone().add(1,"month"));else if((0,b.default)(s,n))(l=o.slice(0,o.length-1)).unshift(o[0].clone().subtract(1,"month"));else{l=w(n,r,a===D.VERTICAL_SCROLLABLE)}u&&(l=w(n,r,a===D.VERTICAL_SCROLLABLE));var d=c.default.locale();this.locale!==d&&(this.locale=d,l=l.map((function(e){return e.locale(t.locale)}))),this.setState({months:l})},t.componentDidUpdate=function(){var e=this.props,t=e.isAnimating,n=e.transitionDuration,r=e.onMonthTransitionEnd;this.isTransitionEndSupported&&n||!t||r()},t.componentWillUnmount=function(){this.removeEventListener&&this.removeEventListener()},t.onTransitionEnd=function(){(0,this.props.onMonthTransitionEnd)()},t.onMonthSelect=function(e,t){var n=e.clone(),r=this.props,a=r.onMonthChange,o=r.orientation,i=this.state.months,s=o===D.VERTICAL_SCROLLABLE,u=i.indexOf(e);s||(u-=1),n.set("month",t).subtract(u,"months"),a(n)},t.onYearSelect=function(e,t){var n=e.clone(),r=this.props,a=r.onYearChange,o=r.orientation,i=this.state.months,s=o===D.VERTICAL_SCROLLABLE,u=i.indexOf(e);s||(u-=1),n.set("year",t).subtract(u,"months"),a(n)},t.setContainerRef=function(e){this.container=e},t.render=function(){var e=this,t=this.props,n=t.enableOutsideDays,r=t.firstVisibleMonthIndex,a=t.horizontalMonthPadding,i=t.isAnimating,s=t.modifiers,c=t.numberOfMonths,f=t.monthFormat,h=t.orientation,_=t.translationValue,p=t.daySize,b=t.onDayMouseEnter,M=t.onDayMouseLeave,L=t.onDayClick,w=t.renderMonthText,T=t.renderCalendarDay,S=t.renderDayContents,Y=t.renderMonthElement,P=t.onMonthTransitionEnd,O=t.firstDayOfWeek,E=t.focusedDate,x=t.isFocused,C=t.isRTL,j=t.styles,H=t.phrases,I=t.dayAriaLabelFormat,N=t.transitionDuration,A=t.verticalBorderSpacing,F=t.setMonthTitleHeight,R=this.state.months,W=h===D.VERTICAL_ORIENTATION,z=h===D.VERTICAL_SCROLLABLE,B=h===D.HORIZONTAL_ORIENTATION,K=(0,v.default)(p,a),U=W||z?K:(c+2)*K,V="".concat(W||z?"translateY":"translateX","(").concat(_,"px)");return l.default.createElement("div",(0,o.default)({},(0,d.css)(j.CalendarMonthGrid,B&&j.CalendarMonthGrid__horizontal,W&&j.CalendarMonthGrid__vertical,z&&j.CalendarMonthGrid__vertical_scrollable,i&&j.CalendarMonthGrid__animating,i&&N&&{transition:"transform ".concat(N,"ms ease-in-out")},function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?k(Object(n),!0).forEach((function(t){(0,u.default)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):k(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},(0,y.default)(V),{width:U})),{ref:this.setContainerRef,onTransitionEnd:P}),R.map((function(t,u){var y=u>=r&&u<r+c,v=0===u&&!y,D=0===u&&i&&y,k=(0,g.default)(t);return l.default.createElement("div",(0,o.default)({key:k},(0,d.css)(B&&j.CalendarMonthGrid_month__horizontal,v&&j.CalendarMonthGrid_month__hideForAnimation,D&&!W&&!C&&{position:"absolute",left:-K},D&&!W&&C&&{position:"absolute",right:0},D&&W&&{position:"absolute",top:-_},!y&&!i&&j.CalendarMonthGrid_month__hidden)),l.default.createElement(m.default,{month:t,isVisible:y,enableOutsideDays:n,modifiers:s[k],monthFormat:f,orientation:h,onDayMouseEnter:b,onDayMouseLeave:M,onDayClick:L,onMonthSelect:e.onMonthSelect,onYearSelect:e.onYearSelect,renderMonthText:w,renderCalendarDay:T,renderDayContents:S,renderMonthElement:Y,firstDayOfWeek:O,daySize:p,focusedDate:y?E:null,isFocused:x,phrases:H,setMonthTitleHeight:F,dayAriaLabelFormat:I,verticalBorderSpacing:A,horizontalMonthPadding:a}))})))},n}(l.default.PureComponent||l.default.Component);T.propTypes={},T.defaultProps=L;var S=(0,d.withStyles)((function(e){var t=e.reactDates,n=t.color,r=t.spacing,a=t.zIndex;return{CalendarMonthGrid:{background:n.background,textAlign:(0,_.default)("left"),zIndex:a},CalendarMonthGrid__animating:{zIndex:a+1},CalendarMonthGrid__horizontal:{position:"absolute",left:(0,_.default)(r.dayPickerHorizontalPadding)},CalendarMonthGrid__vertical:{margin:"0 auto"},CalendarMonthGrid__vertical_scrollable:{margin:"0 auto"},CalendarMonthGrid_month__horizontal:{display:"inline-block",verticalAlign:"top",minHeight:"100%"},CalendarMonthGrid_month__hideForAnimation:{position:"absolute",zIndex:a-1,opacity:0,pointerEvents:"none"},CalendarMonthGrid_month__hidden:{visibility:"hidden"}}}),{pureComponent:void 0!==l.default.PureComponent})(T);t.default=S},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;return 7*e+2*t+1}},function(e,t,n){"use strict";e.exports=function(e){if(arguments.length<1)throw new TypeError("1 argument is required");if("object"!=typeof e)throw new TypeError("Argument 1 (”other“) to Node.contains must be an instance of Node");var t=e;do{if(this===t)return!0;t&&(t=t.parentNode)}while(t);return!1}},function(e,t,n){"use strict";var r=n(209);e.exports=function(){if("undefined"!=typeof document){if(document.contains)return document.contains;if(document.body&&document.body.contains)return document.body.contains}return r}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(3)),o=r(n(16)),i=n(6),s=n(9),u=r(n(10)),l=r(n(212)),d=r(n(30)),c=r(n(213)),f=r(n(34)),h=r(n(214)),_=r(n(23)),m=r(n(22)),p=r(n(35)),y=r(n(31)),v={startDate:o.default.momentObj,endDate:o.default.momentObj,onDatesChange:a.default.func.isRequired,focusedInput:l.default,onFocusChange:a.default.func.isRequired,onClose:a.default.func,startDateId:a.default.string.isRequired,startDatePlaceholderText:a.default.string,startDateOffset:a.default.func,endDateOffset:a.default.func,endDateId:a.default.string.isRequired,endDatePlaceholderText:a.default.string,startDateAriaLabel:a.default.string,endDateAriaLabel:a.default.string,disabled:f.default,required:a.default.bool,readOnly:a.default.bool,screenReaderInputMessage:a.default.string,showClearDates:a.default.bool,showDefaultInputIcon:a.default.bool,inputIconPosition:d.default,customInputIcon:a.default.node,customArrowIcon:a.default.node,customCloseIcon:a.default.node,noBorder:a.default.bool,block:a.default.bool,small:a.default.bool,regular:a.default.bool,keepFocusOnInput:a.default.bool,renderMonthText:(0,i.mutuallyExclusiveProps)(a.default.func,"renderMonthText","renderMonthElement"),renderMonthElement:(0,i.mutuallyExclusiveProps)(a.default.func,"renderMonthText","renderMonthElement"),renderWeekHeaderElement:a.default.func,orientation:c.default,anchorDirection:h.default,openDirection:_.default,horizontalMargin:a.default.number,withPortal:a.default.bool,withFullScreenPortal:a.default.bool,appendToBody:a.default.bool,disableScroll:a.default.bool,daySize:i.nonNegativeInteger,isRTL:a.default.bool,firstDayOfWeek:m.default,initialVisibleMonth:a.default.func,numberOfMonths:a.default.number,keepOpenOnDateSelect:a.default.bool,reopenPickerOnClearDates:a.default.bool,renderCalendarInfo:a.default.func,calendarInfoPosition:p.default,hideKeyboardShortcutsPanel:a.default.bool,verticalHeight:i.nonNegativeInteger,transitionDuration:i.nonNegativeInteger,verticalSpacing:i.nonNegativeInteger,horizontalMonthPadding:i.nonNegativeInteger,dayPickerNavigationInlineStyles:a.default.object,navPosition:y.default,navPrev:a.default.node,navNext:a.default.node,renderNavPrevButton:a.default.func,renderNavNextButton:a.default.func,onPrevMonthClick:a.default.func,onNextMonthClick:a.default.func,renderCalendarDay:a.default.func,renderDayContents:a.default.func,minimumNights:a.default.number,minDate:o.default.momentObj,maxDate:o.default.momentObj,enableOutsideDays:a.default.bool,isDayBlocked:a.default.func,isOutsideRange:a.default.func,isDayHighlighted:a.default.func,displayFormat:a.default.oneOfType([a.default.string,a.default.func]),monthFormat:a.default.string,weekDayFormat:a.default.string,phrases:a.default.shape((0,u.default)(s.DateRangePickerPhrases)),dayAriaLabelFormat:a.default.string};t.default=v},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(3)),o=n(4),i=a.default.oneOf([o.START_DATE,o.END_DATE]);t.default=i},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(3)),o=n(4),i=a.default.oneOf([o.HORIZONTAL_ORIENTATION,o.VERTICAL_ORIENTATION]);t.default=i},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(3)),o=n(4),i=a.default.oneOf([o.ANCHOR_LEFT,o.ANCHOR_RIGHT]);t.default=i},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,r){var i="undefined"!=typeof window?window.innerWidth:0,s=e===o.ANCHOR_LEFT?i-n:n,u=r||0;return(0,a.default)({},e,Math.min(t+s-u,0))};var a=r(n(7)),o=n(4)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){var a=n.getBoundingClientRect(),o=a.left,i=a.top;e===r.OPEN_UP&&(i=-(window.innerHeight-a.bottom));t===r.ANCHOR_RIGHT&&(o=-(window.innerWidth-a.right));return{transform:"translate3d(".concat(Math.round(o),"px, ").concat(Math.round(i),"px, 0)")}};var r=n(4)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getScrollParent=a,t.getScrollAncestorsOverflowY=o,t.default=function(e){var t=o(e),n=function(e){return t.forEach((function(t,n){n.style.setProperty("overflow-y",e?"hidden":t)}))};return n(!0),function(){return n(!1)}};var r=function(){return document.scrollingElement||document.documentElement};function a(e){var t=e.parentElement;if(null==t)return r();var n=window.getComputedStyle(t).overflowY;return"visible"!==n&&"hidden"!==n&&t.scrollHeight>t.clientHeight?t:a(t)}function o(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:new Map,n=r(),i=a(e);return t.set(i,i.style.overflowY),i===n?t:o(i,t)}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(11)),o=r(n(13)),i=r(n(8)),s=r(n(0)),u=(r(n(3)),r(n(1))),l=(r(n(16)),n(6),r(n(23)),n(9)),d=(r(n(10)),r(n(219))),c=(r(n(30)),r(n(34)),r(n(27))),f=r(n(55)),h=r(n(32)),_=r(n(36)),m=n(4),p={children:null,startDate:null,startDateId:m.START_DATE,startDatePlaceholderText:"Start Date",isStartDateFocused:!1,startDateAriaLabel:void 0,endDate:null,endDateId:m.END_DATE,endDatePlaceholderText:"End Date",isEndDateFocused:!1,endDateAriaLabel:void 0,screenReaderMessage:"",showClearDates:!1,showCaret:!1,showDefaultInputIcon:!1,inputIconPosition:m.ICON_BEFORE_POSITION,disabled:!1,required:!1,readOnly:!1,openDirection:m.OPEN_DOWN,noBorder:!1,block:!1,small:!1,regular:!1,verticalSpacing:void 0,keepOpenOnDateSelect:!1,reopenPickerOnClearDates:!1,withFullScreenPortal:!1,minimumNights:1,isOutsideRange:function(e){return!(0,h.default)(e,(0,u.default)())},displayFormat:function(){return u.default.localeData().longDateFormat("L")},onFocusChange:function(){},onClose:function(){},onDatesChange:function(){},onKeyDownArrowDown:function(){},onKeyDownQuestionMark:function(){},customInputIcon:null,customArrowIcon:null,customCloseIcon:null,isFocused:!1,phrases:l.DateRangePickerInputPhrases,isRTL:!1},y=function(e){(0,i.default)(n,e);var t=n.prototype;function n(t){var n;return(n=e.call(this,t)||this).onClearFocus=n.onClearFocus.bind((0,o.default)(n)),n.onStartDateChange=n.onStartDateChange.bind((0,o.default)(n)),n.onStartDateFocus=n.onStartDateFocus.bind((0,o.default)(n)),n.onEndDateChange=n.onEndDateChange.bind((0,o.default)(n)),n.onEndDateFocus=n.onEndDateFocus.bind((0,o.default)(n)),n.clearDates=n.clearDates.bind((0,o.default)(n)),n}return t[!s.default.PureComponent&&"shouldComponentUpdate"]=function(e,t){return!(0,a.default)(this.props,e)||!(0,a.default)(this.state,t)},t.onClearFocus=function(){var e=this.props,t=e.onFocusChange,n=e.onClose,r=e.startDate,a=e.endDate;t(null),n({startDate:r,endDate:a})},t.onEndDateChange=function(e){var t=this.props,n=t.startDate,r=t.isOutsideRange,a=t.minimumNights,o=t.keepOpenOnDateSelect,i=t.onDatesChange,s=(0,c.default)(e,this.getDisplayFormat());s&&!r(s)&&!(n&&(0,_.default)(s,n.clone().add(a,"days")))?(i({startDate:n,endDate:s}),o||this.onClearFocus()):i({startDate:n,endDate:null})},t.onEndDateFocus=function(){var e=this.props,t=e.startDate,n=e.onFocusChange,r=e.withFullScreenPortal,a=e.disabled;t||!r||a&&a!==m.END_DATE?a&&a!==m.START_DATE||n(m.END_DATE):n(m.START_DATE)},t.onStartDateChange=function(e){var t=this.props.endDate,n=this.props,r=n.isOutsideRange,a=n.minimumNights,o=n.onDatesChange,i=n.onFocusChange,s=n.disabled,u=(0,c.default)(e,this.getDisplayFormat()),l=u&&(0,_.default)(t,u.clone().add(a,"days"));u&&!r(u)&&!(s===m.END_DATE&&l)?(l&&(t=null),o({startDate:u,endDate:t}),i(m.END_DATE)):o({startDate:null,endDate:t})},t.onStartDateFocus=function(){var e=this.props,t=e.disabled,n=e.onFocusChange;t&&t!==m.END_DATE||n(m.START_DATE)},t.getDisplayFormat=function(){var e=this.props.displayFormat;return"string"==typeof e?e:e()},t.getDateString=function(e){var t=this.getDisplayFormat();return e&&t?e&&e.format(t):(0,f.default)(e)},t.clearDates=function(){var e=this.props,t=e.onDatesChange,n=e.reopenPickerOnClearDates,r=e.onFocusChange;t({startDate:null,endDate:null}),n&&r(m.START_DATE)},t.render=function(){var e=this.props,t=e.children,n=e.startDate,r=e.startDateId,a=e.startDatePlaceholderText,o=e.isStartDateFocused,i=e.startDateAriaLabel,u=e.endDate,l=e.endDateId,c=e.endDatePlaceholderText,f=e.endDateAriaLabel,h=e.isEndDateFocused,_=e.screenReaderMessage,m=e.showClearDates,p=e.showCaret,y=e.showDefaultInputIcon,v=e.inputIconPosition,g=e.customInputIcon,b=e.customArrowIcon,M=e.customCloseIcon,D=e.disabled,k=e.required,L=e.readOnly,w=e.openDirection,T=e.isFocused,S=e.phrases,Y=e.onKeyDownArrowDown,P=e.onKeyDownQuestionMark,O=e.isRTL,E=e.noBorder,x=e.block,C=e.small,j=e.regular,H=e.verticalSpacing,I=this.getDateString(n),N=this.getDateString(u);return s.default.createElement(d.default,{startDate:I,startDateId:r,startDatePlaceholderText:a,isStartDateFocused:o,startDateAriaLabel:i,endDate:N,endDateId:l,endDatePlaceholderText:c,isEndDateFocused:h,endDateAriaLabel:f,isFocused:T,disabled:D,required:k,readOnly:L,openDirection:w,showCaret:p,showDefaultInputIcon:y,inputIconPosition:v,customInputIcon:g,customArrowIcon:b,customCloseIcon:M,phrases:S,onStartDateChange:this.onStartDateChange,onStartDateFocus:this.onStartDateFocus,onStartDateShiftTab:this.onClearFocus,onEndDateChange:this.onEndDateChange,onEndDateFocus:this.onEndDateFocus,showClearDates:m,onClearDates:this.clearDates,screenReaderMessage:_,onKeyDownArrowDown:Y,onKeyDownQuestionMark:P,isRTL:O,noBorder:E,block:x,small:C,regular:j,verticalSpacing:H},t)},n}(s.default.PureComponent||s.default.Component);t.default=y,y.propTypes={},y.defaultProps=p},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(12)),o=(r(n(7)),r(n(0))),i=(r(n(3)),n(6),n(14)),s=n(9),u=(r(n(10)),r(n(19))),l=(r(n(23)),r(n(220))),d=(r(n(30)),r(n(34)),r(n(224))),c=r(n(225)),f=r(n(37)),h=r(n(226)),_=n(4);var m={children:null,startDateId:_.START_DATE,endDateId:_.END_DATE,startDatePlaceholderText:"Start Date",endDatePlaceholderText:"End Date",startDateAriaLabel:void 0,endDateAriaLabel:void 0,screenReaderMessage:"",onStartDateFocus:function(){},onEndDateFocus:function(){},onStartDateChange:function(){},onEndDateChange:function(){},onStartDateShiftTab:function(){},onEndDateTab:function(){},onClearDates:function(){},onKeyDownArrowDown:function(){},onKeyDownQuestionMark:function(){},startDate:"",endDate:"",isStartDateFocused:!1,isEndDateFocused:!1,showClearDates:!1,disabled:!1,required:!1,readOnly:!1,openDirection:_.OPEN_DOWN,showCaret:!1,showDefaultInputIcon:!1,inputIconPosition:_.ICON_BEFORE_POSITION,customInputIcon:null,customArrowIcon:null,customCloseIcon:null,noBorder:!1,block:!1,small:!1,regular:!1,verticalSpacing:void 0,isFocused:!1,phrases:s.DateRangePickerInputPhrases,isRTL:!1};function p(e){var t=e.children,n=e.startDate,r=e.startDateId,s=e.startDatePlaceholderText,u=e.screenReaderMessage,m=e.isStartDateFocused,p=e.onStartDateChange,y=e.onStartDateFocus,v=e.onStartDateShiftTab,g=e.startDateAriaLabel,b=e.endDate,M=e.endDateId,D=e.endDatePlaceholderText,k=e.isEndDateFocused,L=e.onEndDateChange,w=e.onEndDateFocus,T=e.onEndDateTab,S=e.endDateAriaLabel,Y=e.onKeyDownArrowDown,P=e.onKeyDownQuestionMark,O=e.onClearDates,E=e.showClearDates,x=e.disabled,C=e.required,j=e.readOnly,H=e.showCaret,I=e.openDirection,N=e.showDefaultInputIcon,A=e.inputIconPosition,F=e.customInputIcon,R=e.customArrowIcon,W=e.customCloseIcon,z=e.isFocused,B=e.phrases,K=e.isRTL,U=e.noBorder,V=e.block,G=e.verticalSpacing,J=e.small,$=e.regular,q=e.styles,Q=F||o.default.createElement(h.default,(0,i.css)(q.DateRangePickerInput_calendarIcon_svg)),Z=R||o.default.createElement(d.default,(0,i.css)(q.DateRangePickerInput_arrow_svg));K&&(Z=o.default.createElement(c.default,(0,i.css)(q.DateRangePickerInput_arrow_svg))),J&&(Z="-");var X=W||o.default.createElement(f.default,(0,i.css)(q.DateRangePickerInput_clearDates_svg,J&&q.DateRangePickerInput_clearDates_svg__small)),ee=u||B.keyboardForwardNavigationInstructions,te=u||B.keyboardBackwardNavigationInstructions,ne=(N||null!==F)&&o.default.createElement("button",(0,a.default)({},(0,i.css)(q.DateRangePickerInput_calendarIcon),{type:"button",disabled:x,"aria-label":B.focusStartDate,onClick:Y}),Q),re=x===_.START_DATE||!0===x,ae=x===_.END_DATE||!0===x;return o.default.createElement("div",(0,i.css)(q.DateRangePickerInput,x&&q.DateRangePickerInput__disabled,K&&q.DateRangePickerInput__rtl,!U&&q.DateRangePickerInput__withBorder,V&&q.DateRangePickerInput__block,E&&q.DateRangePickerInput__showClearDates),A===_.ICON_BEFORE_POSITION&&ne,o.default.createElement(l.default,{id:r,placeholder:s,ariaLabel:g,displayValue:n,screenReaderMessage:ee,focused:m,isFocused:z,disabled:re,required:C,readOnly:j,showCaret:H,openDirection:I,onChange:p,onFocus:y,onKeyDownShiftTab:v,onKeyDownArrowDown:Y,onKeyDownQuestionMark:P,verticalSpacing:G,small:J,regular:$}),t,o.default.createElement("div",(0,a.default)({},(0,i.css)(q.DateRangePickerInput_arrow),{"aria-hidden":"true",role:"presentation"}),Z),o.default.createElement(l.default,{id:M,placeholder:D,ariaLabel:S,displayValue:b,screenReaderMessage:te,focused:k,isFocused:z,disabled:ae,required:C,readOnly:j,showCaret:H,openDirection:I,onChange:L,onFocus:w,onKeyDownArrowDown:Y,onKeyDownQuestionMark:P,onKeyDownTab:T,verticalSpacing:G,small:J,regular:$}),E&&o.default.createElement("button",(0,a.default)({type:"button","aria-label":B.clearDates},(0,i.css)(q.DateRangePickerInput_clearDates,J&&q.DateRangePickerInput_clearDates__small,!W&&q.DateRangePickerInput_clearDates_default,!(n||b)&&q.DateRangePickerInput_clearDates__hide),{onClick:O,disabled:x}),X),A===_.ICON_AFTER_POSITION&&ne)}p.propTypes={},p.defaultProps=m;var y=(0,i.withStyles)((function(e){var t=e.reactDates,n=t.border,r=t.color,a=t.sizing;return{DateRangePickerInput:{backgroundColor:r.background,display:"inline-block"},DateRangePickerInput__disabled:{background:r.disabled},DateRangePickerInput__withBorder:{borderColor:r.border,borderWidth:n.pickerInput.borderWidth,borderStyle:n.pickerInput.borderStyle,borderRadius:n.pickerInput.borderRadius},DateRangePickerInput__rtl:{direction:(0,u.default)("rtl")},DateRangePickerInput__block:{display:"block"},DateRangePickerInput__showClearDates:{paddingRight:30},DateRangePickerInput_arrow:{display:"inline-block",verticalAlign:"middle",color:r.text},DateRangePickerInput_arrow_svg:{verticalAlign:"middle",fill:r.text,height:a.arrowWidth,width:a.arrowWidth},DateRangePickerInput_clearDates:{background:"none",border:0,color:"inherit",font:"inherit",lineHeight:"normal",overflow:"visible",cursor:"pointer",padding:10,margin:"0 10px 0 5px",position:"absolute",right:0,top:"50%",transform:"translateY(-50%)"},DateRangePickerInput_clearDates__small:{padding:6},DateRangePickerInput_clearDates_default:{":focus":{background:r.core.border,borderRadius:"50%"},":hover":{background:r.core.border,borderRadius:"50%"}},DateRangePickerInput_clearDates__hide:{visibility:"hidden"},DateRangePickerInput_clearDates_svg:{fill:r.core.grayLight,height:12,width:15,verticalAlign:"middle"},DateRangePickerInput_clearDates_svg__small:{height:9},DateRangePickerInput_calendarIcon:{background:"none",border:0,color:"inherit",font:"inherit",lineHeight:"normal",overflow:"visible",cursor:"pointer",display:"inline-block",verticalAlign:"middle",padding:10,margin:"0 5px 0 10px"},DateRangePickerInput_calendarIcon_svg:{fill:r.core.grayLight,height:15,width:14,verticalAlign:"middle"}}}),{pureComponent:void 0!==o.default.PureComponent})(p);t.default=y},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(11)),o=r(n(12)),i=r(n(13)),s=r(n(8)),u=(r(n(7)),r(n(0))),l=(r(n(3)),n(6),n(14)),d=r(n(221)),c=r(n(29)),f=r(n(19)),h=r(n(53)),_=(r(n(23)),n(4));var m="M0,".concat(_.FANG_HEIGHT_PX," ").concat(_.FANG_WIDTH_PX,",").concat(_.FANG_HEIGHT_PX," ").concat(_.FANG_WIDTH_PX/2,",0z"),p="M0,".concat(_.FANG_HEIGHT_PX," ").concat(_.FANG_WIDTH_PX/2,",0 ").concat(_.FANG_WIDTH_PX,",").concat(_.FANG_HEIGHT_PX),y="M0,0 ".concat(_.FANG_WIDTH_PX,",0 ").concat(_.FANG_WIDTH_PX/2,",").concat(_.FANG_HEIGHT_PX,"z"),v="M0,0 ".concat(_.FANG_WIDTH_PX/2,",").concat(_.FANG_HEIGHT_PX," ").concat(_.FANG_WIDTH_PX,",0"),g={placeholder:"Select Date",displayValue:"",ariaLabel:void 0,screenReaderMessage:"",focused:!1,disabled:!1,required:!1,readOnly:null,openDirection:_.OPEN_DOWN,showCaret:!1,verticalSpacing:_.DEFAULT_VERTICAL_SPACING,small:!1,block:!1,regular:!1,onChange:function(){},onFocus:function(){},onKeyDownShiftTab:function(){},onKeyDownTab:function(){},onKeyDownArrowDown:function(){},onKeyDownQuestionMark:function(){},isFocused:!1},b=function(e){(0,s.default)(n,e);var t=n.prototype;function n(t){var n;return(n=e.call(this,t)||this).state={dateString:"",isTouchDevice:!1},n.onChange=n.onChange.bind((0,i.default)(n)),n.onKeyDown=n.onKeyDown.bind((0,i.default)(n)),n.setInputRef=n.setInputRef.bind((0,i.default)(n)),n.throttledKeyDown=(0,d.default)(n.onFinalKeyDown,300,{trailing:!1}),n}return t[!u.default.PureComponent&&"shouldComponentUpdate"]=function(e,t){return!(0,a.default)(this.props,e)||!(0,a.default)(this.state,t)},t.componentDidMount=function(){this.setState({isTouchDevice:(0,c.default)()})},t.componentWillReceiveProps=function(e){this.state.dateString&&e.displayValue&&this.setState({dateString:""})},t.componentDidUpdate=function(e){var t=this.props,n=t.focused,r=t.isFocused;e.focused===n&&e.isFocused===r||n&&r&&this.inputRef.focus()},t.onChange=function(e){var t=this.props,n=t.onChange,r=t.onKeyDownQuestionMark,a=e.target.value;"?"===a[a.length-1]?r(e):this.setState({dateString:a},(function(){return n(a)}))},t.onKeyDown=function(e){e.stopPropagation(),_.MODIFIER_KEY_NAMES.has(e.key)||this.throttledKeyDown(e)},t.onFinalKeyDown=function(e){var t=this.props,n=t.onKeyDownShiftTab,r=t.onKeyDownTab,a=t.onKeyDownArrowDown,o=t.onKeyDownQuestionMark,i=e.key;"Tab"===i?e.shiftKey?n(e):r(e):"ArrowDown"===i?a(e):"?"===i&&(e.preventDefault(),o(e))},t.setInputRef=function(e){this.inputRef=e},t.render=function(){var e=this.state,t=e.dateString,n=e.isTouchDevice,r=this.props,a=r.id,i=r.placeholder,s=r.ariaLabel,d=r.displayValue,c=r.screenReaderMessage,f=r.focused,g=r.showCaret,b=r.onFocus,M=r.disabled,D=r.required,k=r.readOnly,L=r.openDirection,w=r.verticalSpacing,T=r.small,S=r.regular,Y=r.block,P=r.styles,O=r.theme.reactDates,E=t||d||"",x="DateInput__screen-reader-message-".concat(a),C=g&&f,j=(0,h.default)(O,T);return u.default.createElement("div",(0,l.css)(P.DateInput,T&&P.DateInput__small,Y&&P.DateInput__block,C&&P.DateInput__withFang,M&&P.DateInput__disabled,C&&L===_.OPEN_DOWN&&P.DateInput__openDown,C&&L===_.OPEN_UP&&P.DateInput__openUp),u.default.createElement("input",(0,o.default)({},(0,l.css)(P.DateInput_input,T&&P.DateInput_input__small,S&&P.DateInput_input__regular,k&&P.DateInput_input__readOnly,f&&P.DateInput_input__focused,M&&P.DateInput_input__disabled),{"aria-label":void 0===s?i:s,type:"text",id:a,name:a,ref:this.setInputRef,value:E,onChange:this.onChange,onKeyDown:this.onKeyDown,onFocus:b,placeholder:i,autoComplete:"off",disabled:M,readOnly:"boolean"==typeof k?k:n,required:D,"aria-describedby":c&&x})),C&&u.default.createElement("svg",(0,o.default)({role:"presentation",focusable:"false"},(0,l.css)(P.DateInput_fang,L===_.OPEN_DOWN&&{top:j+w-_.FANG_HEIGHT_PX-1},L===_.OPEN_UP&&{bottom:j+w-_.FANG_HEIGHT_PX-1})),u.default.createElement("path",(0,o.default)({},(0,l.css)(P.DateInput_fangShape),{d:L===_.OPEN_DOWN?m:y})),u.default.createElement("path",(0,o.default)({},(0,l.css)(P.DateInput_fangStroke),{d:L===_.OPEN_DOWN?p:v}))),c&&u.default.createElement("p",(0,o.default)({},(0,l.css)(P.DateInput_screenReaderMessage),{id:x}),c))},n}(u.default.PureComponent||u.default.Component);b.propTypes={},b.defaultProps=g;var M=(0,l.withStyles)((function(e){var t=e.reactDates,n=t.border,r=t.color,a=t.sizing,o=t.spacing,i=t.font,s=t.zIndex;return{DateInput:{margin:0,padding:o.inputPadding,background:r.background,position:"relative",display:"inline-block",width:a.inputWidth,verticalAlign:"middle"},DateInput__small:{width:a.inputWidth_small},DateInput__block:{width:"100%"},DateInput__disabled:{background:r.disabled,color:r.textDisabled},DateInput_input:{fontWeight:i.input.weight,fontSize:i.input.size,lineHeight:i.input.lineHeight,color:r.text,backgroundColor:r.background,width:"100%",padding:"".concat(o.displayTextPaddingVertical,"px ").concat(o.displayTextPaddingHorizontal,"px"),paddingTop:o.displayTextPaddingTop,paddingBottom:o.displayTextPaddingBottom,paddingLeft:(0,f.default)(o.displayTextPaddingLeft),paddingRight:(0,f.default)(o.displayTextPaddingRight),border:n.input.border,borderTop:n.input.borderTop,borderRight:(0,f.default)(n.input.borderRight),borderBottom:n.input.borderBottom,borderLeft:(0,f.default)(n.input.borderLeft),borderRadius:n.input.borderRadius},DateInput_input__small:{fontSize:i.input.size_small,lineHeight:i.input.lineHeight_small,letterSpacing:i.input.letterSpacing_small,padding:"".concat(o.displayTextPaddingVertical_small,"px ").concat(o.displayTextPaddingHorizontal_small,"px"),paddingTop:o.displayTextPaddingTop_small,paddingBottom:o.displayTextPaddingBottom_small,paddingLeft:(0,f.default)(o.displayTextPaddingLeft_small),paddingRight:(0,f.default)(o.displayTextPaddingRight_small)},DateInput_input__regular:{fontWeight:"auto"},DateInput_input__readOnly:{userSelect:"none"},DateInput_input__focused:{outline:n.input.outlineFocused,background:r.backgroundFocused,border:n.input.borderFocused,borderTop:n.input.borderTopFocused,borderRight:(0,f.default)(n.input.borderRightFocused),borderBottom:n.input.borderBottomFocused,borderLeft:(0,f.default)(n.input.borderLeftFocused)},DateInput_input__disabled:{background:r.disabled,fontStyle:i.input.styleDisabled},DateInput_screenReaderMessage:{border:0,clip:"rect(0, 0, 0, 0)",height:1,margin:-1,overflow:"hidden",padding:0,position:"absolute",width:1},DateInput_fang:{position:"absolute",width:_.FANG_WIDTH_PX,height:_.FANG_HEIGHT_PX,left:22,zIndex:s+2},DateInput_fangShape:{fill:r.background},DateInput_fangStroke:{stroke:r.core.border,fill:"transparent"}}}),{pureComponent:void 0!==u.default.PureComponent})(b);t.default=M},function(e,t,n){var r=n(302),a=n(54);e.exports=function(e,t,n){var o=!0,i=!0;if("function"!=typeof e)throw new TypeError("Expected a function");return a(n)&&(o="leading"in n?!!n.leading:o,i="trailing"in n?!!n.trailing:i),r(e,t,{leading:o,maxWait:t,trailing:i})}},function(e,t,n){var r=n(304),a="object"==typeof self&&self&&self.Object===Object&&self,o=r||a||Function("return this")();e.exports=o},function(e,t,n){var r=n(222).Symbol;e.exports=r},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(0)),o=function(e){return a.default.createElement("svg",e,a.default.createElement("path",{d:"M694 242l249 250c12 11 12 21 1 32L694 773c-5 5-10 7-16 7s-11-2-16-7c-11-11-11-21 0-32l210-210H68c-13 0-23-10-23-23s10-23 23-23h806L662 275c-21-22 11-54 32-33z"}))};o.defaultProps={focusable:"false",viewBox:"0 0 1000 1000"};var i=o;t.default=i},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(0)),o=function(e){return a.default.createElement("svg",e,a.default.createElement("path",{d:"M336 275L126 485h806c13 0 23 10 23 23s-10 23-23 23H126l210 210c11 11 11 21 0 32-5 5-10 7-16 7s-11-2-16-7L55 524c-11-11-11-21 0-32l249-249c21-22 53 10 32 32z"}))};o.defaultProps={focusable:"false",viewBox:"0 0 1000 1000"};var i=o;t.default=i},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(0)),o=function(e){return a.default.createElement("svg",e,a.default.createElement("path",{d:"m107 1393h241v-241h-241zm295 0h268v-241h-268zm-295-295h241v-268h-241zm295 0h268v-268h-268zm-295-321h241v-241h-241zm616 616h268v-241h-268zm-321-616h268v-241h-268zm643 616h241v-241h-241zm-322-295h268v-268h-268zm-294-723v-241c0-7-3-14-8-19-6-5-12-8-19-8h-54c-7 0-13 3-19 8-5 5-8 12-8 19v241c0 7 3 14 8 19 6 5 12 8 19 8h54c7 0 13-3 19-8 5-5 8-12 8-19zm616 723h241v-268h-241zm-322-321h268v-241h-268zm322 0h241v-241h-241zm27-402v-241c0-7-3-14-8-19-6-5-12-8-19-8h-54c-7 0-13 3-19 8-5 5-8 12-8 19v241c0 7 3 14 8 19 6 5 12 8 19 8h54c7 0 13-3 19-8 5-5 8-12 8-19zm321-54v1072c0 29-11 54-32 75s-46 32-75 32h-1179c-29 0-54-11-75-32s-32-46-32-75v-1072c0-29 11-54 32-75s46-32 75-32h107v-80c0-37 13-68 40-95s57-39 94-39h54c37 0 68 13 95 39 26 26 39 58 39 95v80h321v-80c0-37 13-69 40-95 26-26 57-39 94-39h54c37 0 68 13 94 39s40 58 40 95v80h107c29 0 54 11 75 32s32 46 32 75z"}))};o.defaultProps={focusable:"false",viewBox:"0 0 1393.1 1500"};var i=o;t.default=i},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(11)),o=r(n(228)),i=r(n(7)),s=r(n(13)),u=r(n(8)),l=r(n(0)),d=(r(n(3)),r(n(16)),n(6),r(n(1))),c=r(n(41)),f=r(n(29)),h=n(9),_=(r(n(10)),r(n(32))),m=r(n(229)),p=r(n(21)),y=r(n(45)),v=r(n(36)),g=r(n(314)),b=r(n(230)),M=r(n(56)),D=r(n(315)),k=r(n(33)),L=n(231),w=(r(n(34)),r(n(212)),r(n(28)),r(n(22)),r(n(35)),r(n(31)),n(4)),T=r(n(57)),S=r(n(232));function Y(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function P(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Y(Object(n),!0).forEach((function(t){(0,i.default)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Y(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var O={startDate:void 0,endDate:void 0,minDate:null,maxDate:null,onDatesChange:function(){},startDateOffset:void 0,endDateOffset:void 0,focusedInput:null,onFocusChange:function(){},onClose:function(){},keepOpenOnDateSelect:!1,minimumNights:1,disabled:!1,isOutsideRange:function(){},isDayBlocked:function(){},isDayHighlighted:function(){},getMinNightsForHoverDate:function(){},daysViolatingMinNightsCanBeClicked:!1,renderMonthText:null,renderWeekHeaderElement:null,enableOutsideDays:!1,numberOfMonths:1,orientation:w.HORIZONTAL_ORIENTATION,withPortal:!1,hideKeyboardShortcutsPanel:!1,initialVisibleMonth:null,daySize:w.DAY_SIZE,dayPickerNavigationInlineStyles:null,navPosition:w.NAV_POSITION_TOP,navPrev:null,navNext:null,renderNavPrevButton:null,renderNavNextButton:null,noNavButtons:!1,noNavNextButton:!1,noNavPrevButton:!1,onPrevMonthClick:function(){},onNextMonthClick:function(){},onOutsideClick:function(){},renderCalendarDay:void 0,renderDayContents:null,renderCalendarInfo:null,renderMonthElement:null,renderKeyboardShortcutsButton:void 0,renderKeyboardShortcutsPanel:void 0,calendarInfoPosition:w.INFO_POSITION_BOTTOM,firstDayOfWeek:null,verticalHeight:null,noBorder:!1,transitionDuration:void 0,verticalBorderSpacing:void 0,horizontalMonthPadding:13,onBlur:function(){},isFocused:!1,showKeyboardShortcuts:!1,onTab:function(){},onShiftTab:function(){},monthFormat:"MMMM YYYY",weekDayFormat:"dd",phrases:h.DayPickerPhrases,dayAriaLabelFormat:void 0,isRTL:!1},E=function(e,t){return t===w.START_DATE?e.chooseAvailableStartDate:t===w.END_DATE?e.chooseAvailableEndDate:e.chooseAvailableDate},x=function(e){(0,u.default)(n,e);var t=n.prototype;function n(t){var n;(n=e.call(this,t)||this).isTouchDevice=(0,f.default)(),n.today=(0,d.default)(),n.modifiers={today:function(e){return n.isToday(e)},blocked:function(e){return n.isBlocked(e)},"blocked-calendar":function(e){return t.isDayBlocked(e)},"blocked-out-of-range":function(e){return t.isOutsideRange(e)},"highlighted-calendar":function(e){return t.isDayHighlighted(e)},valid:function(e){return!n.isBlocked(e)},"selected-start":function(e){return n.isStartDate(e)},"selected-end":function(e){return n.isEndDate(e)},"blocked-minimum-nights":function(e){return n.doesNotMeetMinimumNights(e)},"selected-span":function(e){return n.isInSelectedSpan(e)},"last-in-range":function(e){return n.isLastInRange(e)},hovered:function(e){return n.isHovered(e)},"hovered-span":function(e){return n.isInHoveredSpan(e)},"hovered-offset":function(e){return n.isInHoveredSpan(e)},"after-hovered-start":function(e){return n.isDayAfterHoveredStartDate(e)},"first-day-of-week":function(e){return n.isFirstDayOfWeek(e)},"last-day-of-week":function(e){return n.isLastDayOfWeek(e)},"hovered-start-first-possible-end":function(e,t){return n.isFirstPossibleEndDateForHoveredStartDate(e,t)},"hovered-start-blocked-minimum-nights":function(e,t){return n.doesNotMeetMinNightsForHoveredStartDate(e,t)},"before-hovered-end":function(e){return n.isDayBeforeHoveredEndDate(e)},"no-selected-start-before-selected-end":function(e){return n.beforeSelectedEnd(e)&&!t.startDate},"selected-start-in-hovered-span":function(e,t){return n.isStartDate(e)&&(0,y.default)(t,e)},"selected-start-no-selected-end":function(e){return n.isStartDate(e)&&!t.endDate},"selected-end-no-selected-start":function(e){return n.isEndDate(e)&&!t.startDate}};var r=n.getStateForNewMonth(t),a=r.currentMonth,o=r.visibleDays,i=E(t.phrases,t.focusedInput);return n.state={hoverDate:null,currentMonth:a,phrases:P({},t.phrases,{chooseAvailableDate:i}),visibleDays:o,disablePrev:n.shouldDisableMonthNavigation(t.minDate,a),disableNext:n.shouldDisableMonthNavigation(t.maxDate,a)},n.onDayClick=n.onDayClick.bind((0,s.default)(n)),n.onDayMouseEnter=n.onDayMouseEnter.bind((0,s.default)(n)),n.onDayMouseLeave=n.onDayMouseLeave.bind((0,s.default)(n)),n.onPrevMonthClick=n.onPrevMonthClick.bind((0,s.default)(n)),n.onNextMonthClick=n.onNextMonthClick.bind((0,s.default)(n)),n.onMonthChange=n.onMonthChange.bind((0,s.default)(n)),n.onYearChange=n.onYearChange.bind((0,s.default)(n)),n.onGetNextScrollableMonths=n.onGetNextScrollableMonths.bind((0,s.default)(n)),n.onGetPrevScrollableMonths=n.onGetPrevScrollableMonths.bind((0,s.default)(n)),n.getFirstFocusableDay=n.getFirstFocusableDay.bind((0,s.default)(n)),n}return t[!l.default.PureComponent&&"shouldComponentUpdate"]=function(e,t){return!(0,a.default)(this.props,e)||!(0,a.default)(this.state,t)},t.componentWillReceiveProps=function(e){var t=this,n=e.startDate,r=e.endDate,a=e.focusedInput,o=e.getMinNightsForHoverDate,i=e.minimumNights,s=e.isOutsideRange,u=e.isDayBlocked,l=e.isDayHighlighted,f=e.phrases,h=e.initialVisibleMonth,_=e.numberOfMonths,m=e.enableOutsideDays,y=this.props,g=y.startDate,b=y.endDate,M=y.focusedInput,D=y.minimumNights,k=y.isOutsideRange,L=y.isDayBlocked,T=y.isDayHighlighted,Y=y.phrases,O=y.initialVisibleMonth,x=y.numberOfMonths,C=y.enableOutsideDays,j=this.state.hoverDate,H=this.state.visibleDays,I=!1,N=!1,A=!1;s!==k&&(this.modifiers["blocked-out-of-range"]=function(e){return s(e)},I=!0),u!==L&&(this.modifiers["blocked-calendar"]=function(e){return u(e)},N=!0),l!==T&&(this.modifiers["highlighted-calendar"]=function(e){return l(e)},A=!0);var F=I||N||A,R=n!==g,W=r!==b,z=a!==M;if(_!==x||m!==C||h!==O&&!M&&z){var B=this.getStateForNewMonth(e),K=B.currentMonth;H=B.visibleDays,this.setState({currentMonth:K,visibleDays:H})}var U={};if(R){if(U=this.deleteModifier(U,g,"selected-start"),U=this.addModifier(U,n,"selected-start"),g){var V=g.clone().add(1,"day"),G=g.clone().add(D+1,"days");U=this.deleteModifierFromRange(U,V,G,"after-hovered-start"),r&&b||(U=this.deleteModifier(U,g,"selected-start-no-selected-end"))}!g&&r&&n&&(U=this.deleteModifier(U,r,"selected-end-no-selected-start"),U=this.deleteModifier(U,r,"selected-end-in-hovered-span"),(0,c.default)(H).forEach((function(e){Object.keys(e).forEach((function(e){var n=(0,d.default)(e);U=t.deleteModifier(U,n,"no-selected-start-before-selected-end")}))})))}if(W&&(U=this.deleteModifier(U,b,"selected-end"),U=this.addModifier(U,r,"selected-end"),!b||n&&g||(U=this.deleteModifier(U,b,"selected-end-no-selected-start"))),(R||W)&&(g&&b&&(U=this.deleteModifierFromRange(U,g,b.clone().add(1,"day"),"selected-span")),n&&r&&(U=this.deleteModifierFromRange(U,n,r.clone().add(1,"day"),"hovered-span"),U=this.addModifierToRange(U,n.clone().add(1,"day"),r,"selected-span")),n&&!r&&(U=this.addModifier(U,n,"selected-start-no-selected-end")),r&&!n&&(U=this.addModifier(U,r,"selected-end-no-selected-start")),!n&&r&&(0,c.default)(H).forEach((function(e){Object.keys(e).forEach((function(e){var n=(0,d.default)(e);(0,v.default)(n,r)&&(U=t.addModifier(U,n,"no-selected-start-before-selected-end"))}))}))),!this.isTouchDevice&&R&&n&&!r){var J=n.clone().add(1,"day"),$=n.clone().add(i+1,"days");U=this.addModifierToRange(U,J,$,"after-hovered-start")}if(!this.isTouchDevice&&W&&!n&&r){var q=r.clone().subtract(i,"days"),Q=r.clone();U=this.addModifierToRange(U,q,Q,"before-hovered-end")}if(D>0&&(z||R||i!==D)){var Z=g||this.today;U=this.deleteModifierFromRange(U,Z,Z.clone().add(D,"days"),"blocked-minimum-nights"),U=this.deleteModifierFromRange(U,Z,Z.clone().add(D,"days"),"blocked")}if((z||F)&&(0,c.default)(H).forEach((function(e){Object.keys(e).forEach((function(e){var n=(0,S.default)(e),r=!1;(z||I)&&(s(n)?(U=t.addModifier(U,n,"blocked-out-of-range"),r=!0):U=t.deleteModifier(U,n,"blocked-out-of-range")),(z||N)&&(u(n)?(U=t.addModifier(U,n,"blocked-calendar"),r=!0):U=t.deleteModifier(U,n,"blocked-calendar")),U=r?t.addModifier(U,n,"blocked"):t.deleteModifier(U,n,"blocked"),(z||A)&&(U=l(n)?t.addModifier(U,n,"highlighted-calendar"):t.deleteModifier(U,n,"highlighted-calendar"))}))})),!this.isTouchDevice&&z&&j&&!this.isBlocked(j)){var X=o(j);X>0&&a===w.END_DATE&&(U=this.deleteModifierFromRange(U,j.clone().add(1,"days"),j.clone().add(X,"days"),"hovered-start-blocked-minimum-nights"),U=this.deleteModifier(U,j.clone().add(X,"days"),"hovered-start-first-possible-end")),X>0&&a===w.START_DATE&&(U=this.addModifierToRange(U,j.clone().add(1,"days"),j.clone().add(X,"days"),"hovered-start-blocked-minimum-nights"),U=this.addModifier(U,j.clone().add(X,"days"),"hovered-start-first-possible-end"))}i>0&&n&&a===w.END_DATE&&(U=this.addModifierToRange(U,n,n.clone().add(i,"days"),"blocked-minimum-nights"),U=this.addModifierToRange(U,n,n.clone().add(i,"days"),"blocked"));var ee=(0,d.default)();if((0,p.default)(this.today,ee)||(U=this.deleteModifier(U,this.today,"today"),U=this.addModifier(U,ee,"today"),this.today=ee),Object.keys(U).length>0&&this.setState({visibleDays:P({},H,{},U)}),z||f!==Y){var te=E(f,a);this.setState({phrases:P({},f,{chooseAvailableDate:te})})}},t.onDayClick=function(e,t){var n=this.props,r=n.keepOpenOnDateSelect,a=n.minimumNights,o=n.onBlur,i=n.focusedInput,s=n.onFocusChange,u=n.onClose,l=n.onDatesChange,d=n.startDateOffset,c=n.endDateOffset,f=n.disabled,h=n.daysViolatingMinNightsCanBeClicked;if(t&&t.preventDefault(),!this.isBlocked(e,!h)){var m=this.props,p=m.startDate,g=m.endDate;if(d||c){if(p=(0,D.default)(d,e),g=(0,D.default)(c,e),this.isBlocked(p)||this.isBlocked(g))return;l({startDate:p,endDate:g}),r||(s(null),u({startDate:p,endDate:g}))}else if(i===w.START_DATE){var b=g&&g.clone().subtract(a,"days"),M=(0,v.default)(b,e)||(0,y.default)(p,g),k=f===w.END_DATE;k&&M||(p=e,M&&(g=null)),l({startDate:p,endDate:g}),k&&!M?(s(null),u({startDate:p,endDate:g})):k||s(w.END_DATE)}else if(i===w.END_DATE){var L=p&&p.clone().add(a,"days");p?(0,_.default)(e,L)?(l({startDate:p,endDate:g=e}),r||(s(null),u({startDate:p,endDate:g}))):h&&this.doesNotMeetMinimumNights(e)?l({startDate:p,endDate:g=e}):f!==w.START_DATE?l({startDate:p=e,endDate:g=null}):l({startDate:p,endDate:g}):(l({startDate:p,endDate:g=e}),s(w.START_DATE))}else l({startDate:p,endDate:g});o()}},t.onDayMouseEnter=function(e){if(!this.isTouchDevice){var t=this.props,n=t.startDate,r=t.endDate,a=t.focusedInput,o=t.getMinNightsForHoverDate,i=t.minimumNights,s=t.startDateOffset,u=t.endDateOffset,l=this.state,d=l.hoverDate,c=l.visibleDays,f=l.dateOffset,h=null;if(a){var _=s||u,m={};if(_){var g=(0,D.default)(s,e),b=(0,D.default)(u,e,(function(e){return e.add(1,"day")}));h={start:g,end:b},f&&f.start&&f.end&&(m=this.deleteModifierFromRange(m,f.start,f.end,"hovered-offset")),m=this.addModifierToRange(m,g,b,"hovered-offset")}if(!_){if(m=this.deleteModifier(m,d,"hovered"),m=this.addModifier(m,e,"hovered"),n&&!r&&a===w.END_DATE){if((0,y.default)(d,n)){var M=d.clone().add(1,"day");m=this.deleteModifierFromRange(m,n,M,"hovered-span")}if(((0,v.default)(e,n)||(0,p.default)(e,n))&&(m=this.deleteModifier(m,n,"selected-start-in-hovered-span")),!this.isBlocked(e)&&(0,y.default)(e,n)){var k=e.clone().add(1,"day");m=this.addModifierToRange(m,n,k,"hovered-span"),m=this.addModifier(m,n,"selected-start-in-hovered-span")}}if(!n&&r&&a===w.START_DATE&&((0,v.default)(d,r)&&(m=this.deleteModifierFromRange(m,d,r,"hovered-span")),((0,y.default)(e,r)||(0,p.default)(e,r))&&(m=this.deleteModifier(m,r,"selected-end-in-hovered-span")),!this.isBlocked(e)&&(0,v.default)(e,r)&&(m=this.addModifierToRange(m,e,r,"hovered-span"),m=this.addModifier(m,r,"selected-end-in-hovered-span"))),n){var L=n.clone().add(1,"day"),T=n.clone().add(i+1,"days");if(m=this.deleteModifierFromRange(m,L,T,"after-hovered-start"),(0,p.default)(e,n)){var S=n.clone().add(1,"day"),Y=n.clone().add(i+1,"days");m=this.addModifierToRange(m,S,Y,"after-hovered-start")}}if(r){var O=r.clone().subtract(i,"days");if(m=this.deleteModifierFromRange(m,O,r,"before-hovered-end"),(0,p.default)(e,r)){var E=r.clone().subtract(i,"days");m=this.addModifierToRange(m,E,r,"before-hovered-end")}}if(d&&!this.isBlocked(d)){var x=o(d);x>0&&a===w.START_DATE&&(m=this.deleteModifierFromRange(m,d.clone().add(1,"days"),d.clone().add(x,"days"),"hovered-start-blocked-minimum-nights"),m=this.deleteModifier(m,d.clone().add(x,"days"),"hovered-start-first-possible-end"))}if(!this.isBlocked(e)){var C=o(e);C>0&&a===w.START_DATE&&(m=this.addModifierToRange(m,e.clone().add(1,"days"),e.clone().add(C,"days"),"hovered-start-blocked-minimum-nights"),m=this.addModifier(m,e.clone().add(C,"days"),"hovered-start-first-possible-end"))}}this.setState({hoverDate:e,dateOffset:h,visibleDays:P({},c,{},m)})}}},t.onDayMouseLeave=function(e){var t=this.props,n=t.startDate,r=t.endDate,a=t.focusedInput,o=t.getMinNightsForHoverDate,i=t.minimumNights,s=this.state,u=s.hoverDate,l=s.visibleDays,d=s.dateOffset;if(!this.isTouchDevice&&u){var c={};if(c=this.deleteModifier(c,u,"hovered"),d&&(c=this.deleteModifierFromRange(c,d.start,d.end,"hovered-offset")),n&&!r){if((0,y.default)(u,n)){var f=u.clone().add(1,"day");c=this.deleteModifierFromRange(c,n,f,"hovered-span")}(0,y.default)(e,n)&&(c=this.deleteModifier(c,n,"selected-start-in-hovered-span"))}if(!n&&r&&((0,y.default)(r,u)&&(c=this.deleteModifierFromRange(c,u,r,"hovered-span")),(0,v.default)(e,r)&&(c=this.deleteModifier(c,r,"selected-end-in-hovered-span"))),n&&(0,p.default)(e,n)){var h=n.clone().add(1,"day"),_=n.clone().add(i+1,"days");c=this.deleteModifierFromRange(c,h,_,"after-hovered-start")}if(r&&(0,p.default)(e,r)){var m=r.clone().subtract(i,"days");c=this.deleteModifierFromRange(c,m,r,"before-hovered-end")}if(!this.isBlocked(u)){var g=o(u);g>0&&a===w.START_DATE&&(c=this.deleteModifierFromRange(c,u.clone().add(1,"days"),u.clone().add(g,"days"),"hovered-start-blocked-minimum-nights"),c=this.deleteModifier(c,u.clone().add(g,"days"),"hovered-start-first-possible-end"))}this.setState({hoverDate:null,visibleDays:P({},l,{},c)})}},t.onPrevMonthClick=function(){var e=this.props,t=e.enableOutsideDays,n=e.maxDate,r=e.minDate,a=e.numberOfMonths,o=e.onPrevMonthClick,i=this.state,s=i.currentMonth,u=i.visibleDays,l={};Object.keys(u).sort().slice(0,a+1).forEach((function(e){l[e]=u[e]}));var d=s.clone().subtract(2,"months"),c=(0,b.default)(d,1,t,!0),f=s.clone().subtract(1,"month");this.setState({currentMonth:f,disablePrev:this.shouldDisableMonthNavigation(r,f),disableNext:this.shouldDisableMonthNavigation(n,f),visibleDays:P({},l,{},this.getModifiers(c))},(function(){o(f.clone())}))},t.onNextMonthClick=function(){var e=this.props,t=e.enableOutsideDays,n=e.maxDate,r=e.minDate,a=e.numberOfMonths,o=e.onNextMonthClick,i=this.state,s=i.currentMonth,u=i.visibleDays,l={};Object.keys(u).sort().slice(1).forEach((function(e){l[e]=u[e]}));var d=s.clone().add(a+1,"month"),c=(0,b.default)(d,1,t,!0),f=s.clone().add(1,"month");this.setState({currentMonth:f,disablePrev:this.shouldDisableMonthNavigation(r,f),disableNext:this.shouldDisableMonthNavigation(n,f),visibleDays:P({},l,{},this.getModifiers(c))},(function(){o(f.clone())}))},t.onMonthChange=function(e){var t=this.props,n=t.numberOfMonths,r=t.enableOutsideDays,a=t.orientation===w.VERTICAL_SCROLLABLE,o=(0,b.default)(e,n,r,a);this.setState({currentMonth:e.clone(),visibleDays:this.getModifiers(o)})},t.onYearChange=function(e){var t=this.props,n=t.numberOfMonths,r=t.enableOutsideDays,a=t.orientation===w.VERTICAL_SCROLLABLE,o=(0,b.default)(e,n,r,a);this.setState({currentMonth:e.clone(),visibleDays:this.getModifiers(o)})},t.onGetNextScrollableMonths=function(){var e=this.props,t=e.numberOfMonths,n=e.enableOutsideDays,r=this.state,a=r.currentMonth,o=r.visibleDays,i=Object.keys(o).length,s=a.clone().add(i,"month"),u=(0,b.default)(s,t,n,!0);this.setState({visibleDays:P({},o,{},this.getModifiers(u))})},t.onGetPrevScrollableMonths=function(){var e=this.props,t=e.numberOfMonths,n=e.enableOutsideDays,r=this.state,a=r.currentMonth,o=r.visibleDays,i=a.clone().subtract(t,"month"),s=(0,b.default)(i,t,n,!0);this.setState({currentMonth:i.clone(),visibleDays:P({},o,{},this.getModifiers(s))})},t.getFirstFocusableDay=function(e){var t=this,n=this.props,r=n.startDate,a=n.endDate,i=n.focusedInput,s=n.minimumNights,u=n.numberOfMonths,l=e.clone().startOf("month");if(i===w.START_DATE&&r?l=r.clone():i===w.END_DATE&&!a&&r?l=r.clone().add(s,"days"):i===w.END_DATE&&a&&(l=a.clone()),this.isBlocked(l)){for(var d=[],c=e.clone().add(u-1,"months").endOf("month"),f=l.clone();!(0,y.default)(f,c);)f=f.clone().add(1,"day"),d.push(f);var h=d.filter((function(e){return!t.isBlocked(e)}));if(h.length>0)l=(0,o.default)(h,1)[0]}return l},t.getModifiers=function(e){var t=this,n={};return Object.keys(e).forEach((function(r){n[r]={},e[r].forEach((function(e){n[r][(0,k.default)(e)]=t.getModifiersForDay(e)}))})),n},t.getModifiersForDay=function(e){var t=this;return new Set(Object.keys(this.modifiers).filter((function(n){return t.modifiers[n](e)})))},t.getStateForNewMonth=function(e){var t=this,n=e.initialVisibleMonth,r=e.numberOfMonths,a=e.enableOutsideDays,o=e.orientation,i=e.startDate,s=(n||(i?function(){return i}:function(){return t.today}))(),u=o===w.VERTICAL_SCROLLABLE;return{currentMonth:s,visibleDays:this.getModifiers((0,b.default)(s,r,a,u))}},t.shouldDisableMonthNavigation=function(e,t){if(!e)return!1;var n=this.props,r=n.numberOfMonths,a=n.enableOutsideDays;return(0,M.default)(e,t,r,a)},t.addModifier=function(e,t,n){return(0,L.addModifier)(e,t,n,this.props,this.state)},t.addModifierToRange=function(e,t,n,r){for(var a=e,o=t.clone();(0,v.default)(o,n);)a=this.addModifier(a,o,r),o=o.clone().add(1,"day");return a},t.deleteModifier=function(e,t,n){return(0,L.deleteModifier)(e,t,n,this.props,this.state)},t.deleteModifierFromRange=function(e,t,n,r){for(var a=e,o=t.clone();(0,v.default)(o,n);)a=this.deleteModifier(a,o,r),o=o.clone().add(1,"day");return a},t.doesNotMeetMinimumNights=function(e){var t=this.props,n=t.startDate,r=t.isOutsideRange,a=t.focusedInput,o=t.minimumNights;if(a!==w.END_DATE)return!1;if(n){var i=e.diff(n.clone().startOf("day").hour(12),"days");return i<o&&i>=0}return r((0,d.default)(e).subtract(o,"days"))},t.doesNotMeetMinNightsForHoveredStartDate=function(e,t){var n=this.props,r=n.focusedInput,a=n.getMinNightsForHoverDate;if(r!==w.END_DATE)return!1;if(t&&!this.isBlocked(t)){var o=a(t),i=e.diff(t.clone().startOf("day").hour(12),"days");return i<o&&i>=0}return!1},t.isDayAfterHoveredStartDate=function(e){var t=this.props,n=t.startDate,r=t.endDate,a=t.minimumNights,o=(this.state||{}).hoverDate;return!!n&&!r&&!this.isBlocked(e)&&(0,m.default)(o,e)&&a>0&&(0,p.default)(o,n)},t.isEndDate=function(e){var t=this.props.endDate;return(0,p.default)(e,t)},t.isHovered=function(e){var t=(this.state||{}).hoverDate;return!!this.props.focusedInput&&(0,p.default)(e,t)},t.isInHoveredSpan=function(e){var t=this.props,n=t.startDate,r=t.endDate,a=(this.state||{}).hoverDate,o=!!n&&!r&&(e.isBetween(n,a)||(0,p.default)(a,e)),i=!!r&&!n&&(e.isBetween(a,r)||(0,p.default)(a,e)),s=a&&!this.isBlocked(a);return(o||i)&&s},t.isInSelectedSpan=function(e){var t=this.props,n=t.startDate,r=t.endDate;return e.isBetween(n,r,"days")},t.isLastInRange=function(e){var t=this.props.endDate;return this.isInSelectedSpan(e)&&(0,m.default)(e,t)},t.isStartDate=function(e){var t=this.props.startDate;return(0,p.default)(e,t)},t.isBlocked=function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=this.props,r=n.isDayBlocked,a=n.isOutsideRange;return r(e)||a(e)||t&&this.doesNotMeetMinimumNights(e)},t.isToday=function(e){return(0,p.default)(e,this.today)},t.isFirstDayOfWeek=function(e){var t=this.props.firstDayOfWeek;return e.day()===(t||d.default.localeData().firstDayOfWeek())},t.isLastDayOfWeek=function(e){var t=this.props.firstDayOfWeek;return e.day()===((t||d.default.localeData().firstDayOfWeek())+6)%7},t.isFirstPossibleEndDateForHoveredStartDate=function(e,t){var n=this.props,r=n.focusedInput,a=n.getMinNightsForHoverDate;if(r!==w.END_DATE||!t||this.isBlocked(t))return!1;var o=a(t),i=t.clone().add(o,"days");return(0,p.default)(e,i)},t.beforeSelectedEnd=function(e){var t=this.props.endDate;return(0,v.default)(e,t)},t.isDayBeforeHoveredEndDate=function(e){var t=this.props,n=t.startDate,r=t.endDate,a=t.minimumNights,o=(this.state||{}).hoverDate;return!!r&&!n&&!this.isBlocked(e)&&(0,g.default)(o,e)&&a>0&&(0,p.default)(o,r)},t.render=function(){var e=this.props,t=e.numberOfMonths,n=e.orientation,r=e.monthFormat,a=e.renderMonthText,o=e.renderWeekHeaderElement,i=e.dayPickerNavigationInlineStyles,s=e.navPosition,u=e.navPrev,d=e.navNext,c=e.renderNavPrevButton,f=e.renderNavNextButton,h=e.noNavButtons,_=e.noNavNextButton,m=e.noNavPrevButton,p=e.onOutsideClick,y=e.withPortal,v=e.enableOutsideDays,g=e.firstDayOfWeek,b=e.renderKeyboardShortcutsButton,M=e.renderKeyboardShortcutsPanel,D=e.hideKeyboardShortcutsPanel,k=e.daySize,L=e.focusedInput,w=e.renderCalendarDay,S=e.renderDayContents,Y=e.renderCalendarInfo,P=e.renderMonthElement,O=e.calendarInfoPosition,E=e.onBlur,x=e.onShiftTab,C=e.onTab,j=e.isFocused,H=e.showKeyboardShortcuts,I=e.isRTL,N=e.weekDayFormat,A=e.dayAriaLabelFormat,F=e.verticalHeight,R=e.noBorder,W=e.transitionDuration,z=e.verticalBorderSpacing,B=e.horizontalMonthPadding,K=this.state,U=K.currentMonth,V=K.phrases,G=K.visibleDays,J=K.disablePrev,$=K.disableNext;return l.default.createElement(T.default,{orientation:n,enableOutsideDays:v,modifiers:G,numberOfMonths:t,onDayClick:this.onDayClick,onDayMouseEnter:this.onDayMouseEnter,onDayMouseLeave:this.onDayMouseLeave,onPrevMonthClick:this.onPrevMonthClick,onNextMonthClick:this.onNextMonthClick,onMonthChange:this.onMonthChange,onTab:C,onShiftTab:x,onYearChange:this.onYearChange,onGetNextScrollableMonths:this.onGetNextScrollableMonths,onGetPrevScrollableMonths:this.onGetPrevScrollableMonths,monthFormat:r,renderMonthText:a,renderWeekHeaderElement:o,withPortal:y,hidden:!L,initialVisibleMonth:function(){return U},daySize:k,onOutsideClick:p,disablePrev:J,disableNext:$,dayPickerNavigationInlineStyles:i,navPosition:s,navPrev:u,navNext:d,renderNavPrevButton:c,renderNavNextButton:f,noNavButtons:h,noNavPrevButton:m,noNavNextButton:_,renderCalendarDay:w,renderDayContents:S,renderCalendarInfo:Y,renderMonthElement:P,renderKeyboardShortcutsButton:b,renderKeyboardShortcutsPanel:M,calendarInfoPosition:O,firstDayOfWeek:g,hideKeyboardShortcutsPanel:D,isFocused:j,getFirstFocusableDay:this.getFirstFocusableDay,onBlur:E,showKeyboardShortcuts:H,phrases:V,isRTL:I,weekDayFormat:N,dayAriaLabelFormat:A,verticalHeight:F,verticalBorderSpacing:z,noBorder:R,transitionDuration:W,horizontalMonthPadding:B})},n}(l.default.PureComponent||l.default.Component);t.default=x,x.propTypes={},x.defaultProps=O},function(e,t,n){var r=n(311),a=n(312),o=n(313);e.exports=function(e,t){return r(e)||a(e,t)||o()}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(!a.default.isMoment(e)||!a.default.isMoment(t))return!1;var n=(0,a.default)(e).add(1,"day");return(0,o.default)(n,t)};var a=r(n(1)),o=r(n(21))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,r){if(!a.default.isMoment(e))return{};for(var i={},s=r?e.clone():e.clone().subtract(1,"month"),u=0;u<(r?t:t+2);u+=1){var l=[],d=s.clone(),c=d.clone().startOf("month").hour(12),f=d.clone().endOf("month").hour(12),h=c.clone();if(n)for(var _=0;_<h.weekday();_+=1){var m=h.clone().subtract(_+1,"day");l.unshift(m)}for(;h<f;)l.push(h.clone()),h.add(1,"day");if(n&&0!==h.weekday())for(var p=h.weekday(),y=0;p<7;p+=1,y+=1){var v=h.clone().add(y,"day");l.push(v)}i[(0,o.default)(s)]=l,s=s.clone().add(1,"month")}return i};var a=r(n(1)),o=r(n(44))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.addModifier=function(e,t,n,r,d){var f=r.numberOfMonths,h=r.enableOutsideDays,_=r.orientation,m=d.currentMonth,p=d.visibleDays,y=m,v=f;_===l.VERTICAL_SCROLLABLE?v=Object.keys(p).length:(y=(0,u.default)(y),v+=2);if(!t||!(0,o.default)(t,y,v,h))return e;var g=(0,i.default)(t),b=c({},e);if(h){var M=Object.keys(p).filter((function(e){return Object.keys(p[e]).indexOf(g)>-1}));b=M.reduce((function(t,r){var o=e[r]||p[r];if(!o[g]||!o[g].has(n)){var i=new Set(o[g]);i.add(n),t[r]=c({},o,(0,a.default)({},g,i))}return t}),b)}else{var D=(0,s.default)(t),k=e[D]||p[D]||{};if(!k[g]||!k[g].has(n)){var L=new Set(k[g]);L.add(n),b[D]=c({},k,(0,a.default)({},g,L))}}return b},t.deleteModifier=function(e,t,n,r,d){var f=r.numberOfMonths,h=r.enableOutsideDays,_=r.orientation,m=d.currentMonth,p=d.visibleDays,y=m,v=f;_===l.VERTICAL_SCROLLABLE?v=Object.keys(p).length:(y=(0,u.default)(y),v+=2);if(!t||!(0,o.default)(t,y,v,h))return e;var g=(0,i.default)(t),b=c({},e);if(h){var M=Object.keys(p).filter((function(e){return Object.keys(p[e]).indexOf(g)>-1}));b=M.reduce((function(t,r){var o=e[r]||p[r];if(o[g]&&o[g].has(n)){var i=new Set(o[g]);i.delete(n),t[r]=c({},o,(0,a.default)({},g,i))}return t}),b)}else{var D=(0,s.default)(t),k=e[D]||p[D]||{};if(k[g]&&k[g].has(n)){var L=new Set(k[g]);L.delete(n),b[D]=c({},k,(0,a.default)({},g,L))}}return b};var a=r(n(7)),o=r(n(56)),i=r(n(33)),s=r(n(44)),u=r(n(316)),l=n(4);function d(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?d(Object(n),!0).forEach((function(t){(0,a.default)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):d(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){o.has(e)||o.set(e,(0,a.default)(e));return o.get(e)};var a=r(n(1)),o=new Map},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(11)),o=r(n(228)),i=r(n(7)),s=r(n(13)),u=r(n(8)),l=r(n(0)),d=(r(n(3)),r(n(16)),n(6),r(n(1))),c=r(n(41)),f=r(n(29)),h=n(9),_=(r(n(10)),r(n(21))),m=r(n(45)),p=r(n(230)),y=r(n(33)),v=n(231),g=(r(n(28)),r(n(22)),r(n(35)),r(n(31)),n(4)),b=r(n(57)),M=r(n(232));function D(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function k(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?D(Object(n),!0).forEach((function(t){(0,i.default)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):D(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var L={date:void 0,onDateChange:function(){},focused:!1,onFocusChange:function(){},onClose:function(){},keepOpenOnDateSelect:!1,isOutsideRange:function(){},isDayBlocked:function(){},isDayHighlighted:function(){},renderMonthText:null,renderWeekHeaderElement:null,enableOutsideDays:!1,numberOfMonths:1,orientation:g.HORIZONTAL_ORIENTATION,withPortal:!1,hideKeyboardShortcutsPanel:!1,initialVisibleMonth:null,firstDayOfWeek:null,daySize:g.DAY_SIZE,verticalHeight:null,noBorder:!1,verticalBorderSpacing:void 0,transitionDuration:void 0,horizontalMonthPadding:13,dayPickerNavigationInlineStyles:null,navPosition:g.NAV_POSITION_TOP,navPrev:null,navNext:null,renderNavPrevButton:null,renderNavNextButton:null,noNavButtons:!1,noNavNextButton:!1,noNavPrevButton:!1,onPrevMonthClick:function(){},onNextMonthClick:function(){},onOutsideClick:function(){},renderCalendarDay:void 0,renderDayContents:null,renderCalendarInfo:null,renderMonthElement:null,calendarInfoPosition:g.INFO_POSITION_BOTTOM,onBlur:function(){},isFocused:!1,showKeyboardShortcuts:!1,onTab:function(){},onShiftTab:function(){},monthFormat:"MMMM YYYY",weekDayFormat:"dd",phrases:h.DayPickerPhrases,dayAriaLabelFormat:void 0,isRTL:!1},w=function(e){(0,u.default)(n,e);var t=n.prototype;function n(t){var n;(n=e.call(this,t)||this).isTouchDevice=!1,n.today=(0,d.default)(),n.modifiers={today:function(e){return n.isToday(e)},blocked:function(e){return n.isBlocked(e)},"blocked-calendar":function(e){return t.isDayBlocked(e)},"blocked-out-of-range":function(e){return t.isOutsideRange(e)},"highlighted-calendar":function(e){return t.isDayHighlighted(e)},valid:function(e){return!n.isBlocked(e)},hovered:function(e){return n.isHovered(e)},selected:function(e){return n.isSelected(e)},"first-day-of-week":function(e){return n.isFirstDayOfWeek(e)},"last-day-of-week":function(e){return n.isLastDayOfWeek(e)}};var r=n.getStateForNewMonth(t),a=r.currentMonth,o=r.visibleDays;return n.state={hoverDate:null,currentMonth:a,visibleDays:o},n.onDayMouseEnter=n.onDayMouseEnter.bind((0,s.default)(n)),n.onDayMouseLeave=n.onDayMouseLeave.bind((0,s.default)(n)),n.onDayClick=n.onDayClick.bind((0,s.default)(n)),n.onPrevMonthClick=n.onPrevMonthClick.bind((0,s.default)(n)),n.onNextMonthClick=n.onNextMonthClick.bind((0,s.default)(n)),n.onMonthChange=n.onMonthChange.bind((0,s.default)(n)),n.onYearChange=n.onYearChange.bind((0,s.default)(n)),n.onGetNextScrollableMonths=n.onGetNextScrollableMonths.bind((0,s.default)(n)),n.onGetPrevScrollableMonths=n.onGetPrevScrollableMonths.bind((0,s.default)(n)),n.getFirstFocusableDay=n.getFirstFocusableDay.bind((0,s.default)(n)),n}return t[!l.default.PureComponent&&"shouldComponentUpdate"]=function(e,t){return!(0,a.default)(this.props,e)||!(0,a.default)(this.state,t)},t.componentDidMount=function(){this.isTouchDevice=(0,f.default)()},t.componentWillReceiveProps=function(e){var t=this,n=e.date,r=e.focused,a=e.isOutsideRange,o=e.isDayBlocked,i=e.isDayHighlighted,s=e.initialVisibleMonth,u=e.numberOfMonths,l=e.enableOutsideDays,f=this.props,h=f.isOutsideRange,m=f.isDayBlocked,p=f.isDayHighlighted,y=f.numberOfMonths,v=f.enableOutsideDays,g=f.initialVisibleMonth,b=f.focused,D=f.date,L=this.state.visibleDays,w=!1,T=!1,S=!1;a!==h&&(this.modifiers["blocked-out-of-range"]=function(e){return a(e)},w=!0),o!==m&&(this.modifiers["blocked-calendar"]=function(e){return o(e)},T=!0),i!==p&&(this.modifiers["highlighted-calendar"]=function(e){return i(e)},S=!0);var Y=w||T||S;if(u!==y||l!==v||s!==g&&!b&&r){var P=this.getStateForNewMonth(e),O=P.currentMonth;L=P.visibleDays,this.setState({currentMonth:O,visibleDays:L})}var E=r!==b,x={};n!==D&&(x=this.deleteModifier(x,D,"selected"),x=this.addModifier(x,n,"selected")),(E||Y)&&(0,c.default)(L).forEach((function(e){Object.keys(e).forEach((function(e){var n=(0,M.default)(e);x=t.isBlocked(n)?t.addModifier(x,n,"blocked"):t.deleteModifier(x,n,"blocked"),(E||w)&&(x=a(n)?t.addModifier(x,n,"blocked-out-of-range"):t.deleteModifier(x,n,"blocked-out-of-range")),(E||T)&&(x=o(n)?t.addModifier(x,n,"blocked-calendar"):t.deleteModifier(x,n,"blocked-calendar")),(E||S)&&(x=i(n)?t.addModifier(x,n,"highlighted-calendar"):t.deleteModifier(x,n,"highlighted-calendar"))}))}));var C=(0,d.default)();(0,_.default)(this.today,C)||(x=this.deleteModifier(x,this.today,"today"),x=this.addModifier(x,C,"today"),this.today=C),Object.keys(x).length>0&&this.setState({visibleDays:k({},L,{},x)})},t.componentWillUpdate=function(){this.today=(0,d.default)()},t.onDayClick=function(e,t){if(t&&t.preventDefault(),!this.isBlocked(e)){var n=this.props,r=n.onDateChange,a=n.keepOpenOnDateSelect,o=n.onFocusChange,i=n.onClose;r(e),a||(o({focused:!1}),i({date:e}))}},t.onDayMouseEnter=function(e){if(!this.isTouchDevice){var t=this.state,n=t.hoverDate,r=t.visibleDays,a=this.deleteModifier({},n,"hovered");a=this.addModifier(a,e,"hovered"),this.setState({hoverDate:e,visibleDays:k({},r,{},a)})}},t.onDayMouseLeave=function(){var e=this.state,t=e.hoverDate,n=e.visibleDays;if(!this.isTouchDevice&&t){var r=this.deleteModifier({},t,"hovered");this.setState({hoverDate:null,visibleDays:k({},n,{},r)})}},t.onPrevMonthClick=function(){var e=this.props,t=e.onPrevMonthClick,n=e.numberOfMonths,r=e.enableOutsideDays,a=this.state,o=a.currentMonth,i=a.visibleDays,s={};Object.keys(i).sort().slice(0,n+1).forEach((function(e){s[e]=i[e]}));var u=o.clone().subtract(1,"month"),l=(0,p.default)(u,1,r);this.setState({currentMonth:u,visibleDays:k({},s,{},this.getModifiers(l))},(function(){t(u.clone())}))},t.onNextMonthClick=function(){var e=this.props,t=e.onNextMonthClick,n=e.numberOfMonths,r=e.enableOutsideDays,a=this.state,o=a.currentMonth,i=a.visibleDays,s={};Object.keys(i).sort().slice(1).forEach((function(e){s[e]=i[e]}));var u=o.clone().add(n,"month"),l=(0,p.default)(u,1,r),d=o.clone().add(1,"month");this.setState({currentMonth:d,visibleDays:k({},s,{},this.getModifiers(l))},(function(){t(d.clone())}))},t.onMonthChange=function(e){var t=this.props,n=t.numberOfMonths,r=t.enableOutsideDays,a=t.orientation===g.VERTICAL_SCROLLABLE,o=(0,p.default)(e,n,r,a);this.setState({currentMonth:e.clone(),visibleDays:this.getModifiers(o)})},t.onYearChange=function(e){var t=this.props,n=t.numberOfMonths,r=t.enableOutsideDays,a=t.orientation===g.VERTICAL_SCROLLABLE,o=(0,p.default)(e,n,r,a);this.setState({currentMonth:e.clone(),visibleDays:this.getModifiers(o)})},t.onGetNextScrollableMonths=function(){var e=this.props,t=e.numberOfMonths,n=e.enableOutsideDays,r=this.state,a=r.currentMonth,o=r.visibleDays,i=Object.keys(o).length,s=a.clone().add(i,"month"),u=(0,p.default)(s,t,n,!0);this.setState({visibleDays:k({},o,{},this.getModifiers(u))})},t.onGetPrevScrollableMonths=function(){var e=this.props,t=e.numberOfMonths,n=e.enableOutsideDays,r=this.state,a=r.currentMonth,o=r.visibleDays,i=a.clone().subtract(t,"month"),s=(0,p.default)(i,t,n,!0);this.setState({currentMonth:i.clone(),visibleDays:k({},o,{},this.getModifiers(s))})},t.getFirstFocusableDay=function(e){var t=this,n=this.props,r=n.date,a=n.numberOfMonths,i=e.clone().startOf("month");if(r&&(i=r.clone()),this.isBlocked(i)){for(var s=[],u=e.clone().add(a-1,"months").endOf("month"),l=i.clone();!(0,m.default)(l,u);)l=l.clone().add(1,"day"),s.push(l);var d=s.filter((function(e){return!t.isBlocked(e)&&(0,m.default)(e,i)}));if(d.length>0){var c=(0,o.default)(d,1);i=c[0]}}return i},t.getModifiers=function(e){var t=this,n={};return Object.keys(e).forEach((function(r){n[r]={},e[r].forEach((function(e){n[r][(0,y.default)(e)]=t.getModifiersForDay(e)}))})),n},t.getModifiersForDay=function(e){var t=this;return new Set(Object.keys(this.modifiers).filter((function(n){return t.modifiers[n](e)})))},t.getStateForNewMonth=function(e){var t=this,n=e.initialVisibleMonth,r=e.date,a=e.numberOfMonths,o=e.orientation,i=e.enableOutsideDays,s=(n||(r?function(){return r}:function(){return t.today}))(),u=o===g.VERTICAL_SCROLLABLE;return{currentMonth:s,visibleDays:this.getModifiers((0,p.default)(s,a,i,u))}},t.addModifier=function(e,t,n){return(0,v.addModifier)(e,t,n,this.props,this.state)},t.deleteModifier=function(e,t,n){return(0,v.deleteModifier)(e,t,n,this.props,this.state)},t.isBlocked=function(e){var t=this.props,n=t.isDayBlocked,r=t.isOutsideRange;return n(e)||r(e)},t.isHovered=function(e){var t=(this.state||{}).hoverDate;return(0,_.default)(e,t)},t.isSelected=function(e){var t=this.props.date;return(0,_.default)(e,t)},t.isToday=function(e){return(0,_.default)(e,this.today)},t.isFirstDayOfWeek=function(e){var t=this.props.firstDayOfWeek;return e.day()===(t||d.default.localeData().firstDayOfWeek())},t.isLastDayOfWeek=function(e){var t=this.props.firstDayOfWeek;return e.day()===((t||d.default.localeData().firstDayOfWeek())+6)%7},t.render=function(){var e=this.props,t=e.numberOfMonths,n=e.orientation,r=e.monthFormat,a=e.renderMonthText,o=e.renderWeekHeaderElement,i=e.dayPickerNavigationInlineStyles,s=e.navPosition,u=e.navPrev,d=e.navNext,c=e.renderNavPrevButton,f=e.renderNavNextButton,h=e.noNavButtons,_=e.noNavPrevButton,m=e.noNavNextButton,p=e.onOutsideClick,y=e.onShiftTab,v=e.onTab,g=e.withPortal,M=e.focused,D=e.enableOutsideDays,k=e.hideKeyboardShortcutsPanel,L=e.daySize,w=e.firstDayOfWeek,T=e.renderCalendarDay,S=e.renderDayContents,Y=e.renderCalendarInfo,P=e.renderMonthElement,O=e.calendarInfoPosition,E=e.isFocused,x=e.isRTL,C=e.phrases,j=e.dayAriaLabelFormat,H=e.onBlur,I=e.showKeyboardShortcuts,N=e.weekDayFormat,A=e.verticalHeight,F=e.noBorder,R=e.transitionDuration,W=e.verticalBorderSpacing,z=e.horizontalMonthPadding,B=this.state,K=B.currentMonth,U=B.visibleDays;return l.default.createElement(b.default,{orientation:n,enableOutsideDays:D,modifiers:U,numberOfMonths:t,onDayClick:this.onDayClick,onDayMouseEnter:this.onDayMouseEnter,onDayMouseLeave:this.onDayMouseLeave,onPrevMonthClick:this.onPrevMonthClick,onNextMonthClick:this.onNextMonthClick,onMonthChange:this.onMonthChange,onYearChange:this.onYearChange,onGetNextScrollableMonths:this.onGetNextScrollableMonths,onGetPrevScrollableMonths:this.onGetPrevScrollableMonths,monthFormat:r,withPortal:g,hidden:!M,hideKeyboardShortcutsPanel:k,initialVisibleMonth:function(){return K},firstDayOfWeek:w,onOutsideClick:p,dayPickerNavigationInlineStyles:i,navPosition:s,navPrev:u,navNext:d,renderNavPrevButton:c,renderNavNextButton:f,noNavButtons:h,noNavNextButton:m,noNavPrevButton:_,renderMonthText:a,renderWeekHeaderElement:o,renderCalendarDay:T,renderDayContents:S,renderCalendarInfo:Y,renderMonthElement:P,calendarInfoPosition:O,isFocused:E,getFirstFocusableDay:this.getFirstFocusableDay,onBlur:H,onTab:v,onShiftTab:y,phrases:C,daySize:L,isRTL:x,showKeyboardShortcuts:I,weekDayFormat:N,dayAriaLabelFormat:j,verticalHeight:A,noBorder:F,transitionDuration:R,verticalBorderSpacing:W,horizontalMonthPadding:z})},n}(l.default.PureComponent||l.default.Component);t.default=w,w.propTypes={},w.defaultProps=L},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(3)),o=r(n(16)),i=n(6),s=n(9),u=r(n(10)),l=r(n(30)),d=r(n(213)),c=r(n(214)),f=r(n(23)),h=r(n(22)),_=r(n(35)),m=r(n(31)),p={date:o.default.momentObj,onDateChange:a.default.func.isRequired,focused:a.default.bool,onFocusChange:a.default.func.isRequired,id:a.default.string.isRequired,placeholder:a.default.string,ariaLabel:a.default.string,disabled:a.default.bool,required:a.default.bool,readOnly:a.default.bool,screenReaderInputMessage:a.default.string,showClearDate:a.default.bool,customCloseIcon:a.default.node,showDefaultInputIcon:a.default.bool,inputIconPosition:l.default,customInputIcon:a.default.node,noBorder:a.default.bool,block:a.default.bool,small:a.default.bool,regular:a.default.bool,verticalSpacing:i.nonNegativeInteger,keepFocusOnInput:a.default.bool,renderMonthText:(0,i.mutuallyExclusiveProps)(a.default.func,"renderMonthText","renderMonthElement"),renderMonthElement:(0,i.mutuallyExclusiveProps)(a.default.func,"renderMonthText","renderMonthElement"),renderWeekHeaderElement:a.default.func,orientation:d.default,anchorDirection:c.default,openDirection:f.default,horizontalMargin:a.default.number,withPortal:a.default.bool,withFullScreenPortal:a.default.bool,appendToBody:a.default.bool,disableScroll:a.default.bool,initialVisibleMonth:a.default.func,firstDayOfWeek:h.default,numberOfMonths:a.default.number,keepOpenOnDateSelect:a.default.bool,reopenPickerOnClearDate:a.default.bool,renderCalendarInfo:a.default.func,calendarInfoPosition:_.default,hideKeyboardShortcutsPanel:a.default.bool,daySize:i.nonNegativeInteger,isRTL:a.default.bool,verticalHeight:i.nonNegativeInteger,transitionDuration:i.nonNegativeInteger,horizontalMonthPadding:i.nonNegativeInteger,dayPickerNavigationInlineStyles:a.default.object,navPosition:m.default,navPrev:a.default.node,navNext:a.default.node,renderNavPrevButton:a.default.func,renderNavNextButton:a.default.func,onPrevMonthClick:a.default.func,onNextMonthClick:a.default.func,onClose:a.default.func,renderCalendarDay:a.default.func,renderDayContents:a.default.func,enableOutsideDays:a.default.bool,isDayBlocked:a.default.func,isOutsideRange:a.default.func,isDayHighlighted:a.default.func,displayFormat:a.default.oneOfType([a.default.string,a.default.func]),monthFormat:a.default.string,weekDayFormat:a.default.string,phrases:a.default.shape((0,u.default)(s.SingleDatePickerPhrases)),dayAriaLabelFormat:a.default.string};t.default=p},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(12)),o=(r(n(7)),r(n(0))),i=(r(n(3)),n(6),n(14)),s=n(9),u=(r(n(10)),r(n(19))),l=r(n(220)),d=(r(n(30)),r(n(37))),c=r(n(226)),f=(r(n(23)),n(4));var h={children:null,placeholder:"Select Date",ariaLabel:void 0,displayValue:"",screenReaderMessage:"",focused:!1,isFocused:!1,disabled:!1,required:!1,readOnly:!1,openDirection:f.OPEN_DOWN,showCaret:!1,showClearDate:!1,showDefaultInputIcon:!1,inputIconPosition:f.ICON_BEFORE_POSITION,customCloseIcon:null,customInputIcon:null,isRTL:!1,noBorder:!1,block:!1,small:!1,regular:!1,verticalSpacing:void 0,onChange:function(){},onClearDate:function(){},onFocus:function(){},onKeyDownShiftTab:function(){},onKeyDownTab:function(){},onKeyDownArrowDown:function(){},onKeyDownQuestionMark:function(){},phrases:s.SingleDatePickerInputPhrases};function _(e){var t=e.id,n=e.children,r=e.placeholder,s=e.ariaLabel,u=e.displayValue,h=e.focused,_=e.isFocused,m=e.disabled,p=e.required,y=e.readOnly,v=e.showCaret,g=e.showClearDate,b=e.showDefaultInputIcon,M=e.inputIconPosition,D=e.phrases,k=e.onClearDate,L=e.onChange,w=e.onFocus,T=e.onKeyDownShiftTab,S=e.onKeyDownTab,Y=e.onKeyDownArrowDown,P=e.onKeyDownQuestionMark,O=e.screenReaderMessage,E=e.customCloseIcon,x=e.customInputIcon,C=e.openDirection,j=e.isRTL,H=e.noBorder,I=e.block,N=e.small,A=e.regular,F=e.verticalSpacing,R=e.styles,W=x||o.default.createElement(c.default,(0,i.css)(R.SingleDatePickerInput_calendarIcon_svg)),z=E||o.default.createElement(d.default,(0,i.css)(R.SingleDatePickerInput_clearDate_svg,N&&R.SingleDatePickerInput_clearDate_svg__small)),B=O||D.keyboardForwardNavigationInstructions,K=(b||null!==x)&&o.default.createElement("button",(0,a.default)({},(0,i.css)(R.SingleDatePickerInput_calendarIcon),{type:"button",disabled:m,"aria-label":D.focusStartDate,onClick:w}),W);return o.default.createElement("div",(0,i.css)(R.SingleDatePickerInput,m&&R.SingleDatePickerInput__disabled,j&&R.SingleDatePickerInput__rtl,!H&&R.SingleDatePickerInput__withBorder,I&&R.SingleDatePickerInput__block,g&&R.SingleDatePickerInput__showClearDate),M===f.ICON_BEFORE_POSITION&&K,o.default.createElement(l.default,{id:t,placeholder:r,ariaLabel:s,displayValue:u,screenReaderMessage:B,focused:h,isFocused:_,disabled:m,required:p,readOnly:y,showCaret:v,onChange:L,onFocus:w,onKeyDownShiftTab:T,onKeyDownTab:S,onKeyDownArrowDown:Y,onKeyDownQuestionMark:P,openDirection:C,verticalSpacing:F,small:N,regular:A,block:I}),n,g&&o.default.createElement("button",(0,a.default)({},(0,i.css)(R.SingleDatePickerInput_clearDate,N&&R.SingleDatePickerInput_clearDate__small,!E&&R.SingleDatePickerInput_clearDate__default,!u&&R.SingleDatePickerInput_clearDate__hide),{type:"button","aria-label":D.clearDate,disabled:m,onClick:k}),z),M===f.ICON_AFTER_POSITION&&K)}_.propTypes={},_.defaultProps=h;var m=(0,i.withStyles)((function(e){var t=e.reactDates,n=t.border,r=t.color;return{SingleDatePickerInput:{display:"inline-block",backgroundColor:r.background},SingleDatePickerInput__withBorder:{borderColor:r.border,borderWidth:n.pickerInput.borderWidth,borderStyle:n.pickerInput.borderStyle,borderRadius:n.pickerInput.borderRadius},SingleDatePickerInput__rtl:{direction:(0,u.default)("rtl")},SingleDatePickerInput__disabled:{backgroundColor:r.disabled},SingleDatePickerInput__block:{display:"block"},SingleDatePickerInput__showClearDate:{paddingRight:30},SingleDatePickerInput_clearDate:{background:"none",border:0,color:"inherit",font:"inherit",lineHeight:"normal",overflow:"visible",cursor:"pointer",padding:10,margin:"0 10px 0 5px",position:"absolute",right:0,top:"50%",transform:"translateY(-50%)"},SingleDatePickerInput_clearDate__default:{":focus":{background:r.core.border,borderRadius:"50%"},":hover":{background:r.core.border,borderRadius:"50%"}},SingleDatePickerInput_clearDate__small:{padding:6},SingleDatePickerInput_clearDate__hide:{visibility:"hidden"},SingleDatePickerInput_clearDate_svg:{fill:r.core.grayLight,height:12,width:15,verticalAlign:"middle"},SingleDatePickerInput_clearDate_svg__small:{height:9},SingleDatePickerInput_calendarIcon:{background:"none",border:0,color:"inherit",font:"inherit",lineHeight:"normal",overflow:"visible",cursor:"pointer",display:"inline-block",verticalAlign:"middle",padding:10,margin:"0 5px 0 10px"},SingleDatePickerInput_calendarIcon_svg:{fill:r.core.grayLight,height:15,width:14,verticalAlign:"middle"}}}),{pureComponent:void 0!==o.default.PureComponent})(_);t.default=m},function(e,t,n){"use strict";var r=n(336),a=n(341),o=n(58),i=n(244),s=n(243),u=n(366);e.exports=function(){var e=u(this),t=s(o(e,"length")),n=1;arguments.length>0&&void 0!==arguments[0]&&(n=i(arguments[0]));var l=r(e,0);return a(l,e,t,0,n),l}},function(e,t,n){var r="function"==typeof Map&&Map.prototype,a=Object.getOwnPropertyDescriptor&&r?Object.getOwnPropertyDescriptor(Map.prototype,"size"):null,o=r&&a&&"function"==typeof a.get?a.get:null,i=r&&Map.prototype.forEach,s="function"==typeof Set&&Set.prototype,u=Object.getOwnPropertyDescriptor&&s?Object.getOwnPropertyDescriptor(Set.prototype,"size"):null,l=s&&u&&"function"==typeof u.get?u.get:null,d=s&&Set.prototype.forEach,c="function"==typeof WeakMap&&WeakMap.prototype?WeakMap.prototype.has:null,f="function"==typeof WeakSet&&WeakSet.prototype?WeakSet.prototype.has:null,h=Boolean.prototype.valueOf,_=Object.prototype.toString,m=String.prototype.match,p="function"==typeof BigInt?BigInt.prototype.valueOf:null,y=n(337).custom,v=y&&D(y)?y:null;function g(e,t,n){var r="double"===(n.quoteStyle||t)?'"':"'";return r+e+r}function b(e){return String(e).replace(/"/g,"&quot;")}function M(e){return"[object Array]"===w(e)}function D(e){return"[object Symbol]"===w(e)}e.exports=function e(t,n,r,a){var s=n||{};if(L(s,"quoteStyle")&&"single"!==s.quoteStyle&&"double"!==s.quoteStyle)throw new TypeError('option "quoteStyle" must be "single" or "double"');if(void 0===t)return"undefined";if(null===t)return"null";if("boolean"==typeof t)return t?"true":"false";if("string"==typeof t)return function(e,t){return g(e.replace(/(['\\])/g,"\\$1").replace(/[\x00-\x1f]/g,T),"single",t)}(t,s);if("number"==typeof t)return 0===t?1/0/t>0?"0":"-0":String(t);if("bigint"==typeof t)return String(t)+"n";var u=void 0===s.depth?5:s.depth;if(void 0===r&&(r=0),r>=u&&u>0&&"object"==typeof t)return"[Object]";if(void 0===a)a=[];else if(function(e,t){if(e.indexOf)return e.indexOf(t);for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1}(a,t)>=0)return"[Circular]";function _(t,n){return n&&(a=a.slice()).push(n),e(t,s,r+1,a)}if("function"==typeof t){var y=function(e){if(e.name)return e.name;var t=m.call(e,/^function\s*([\w$]+)/);if(t)return t[1];return null}(t);return"[Function"+(y?": "+y:"")+"]"}if(D(t)){var k=Symbol.prototype.toString.call(t);return"object"==typeof t?S(k):k}if(function(e){if(!e||"object"!=typeof e)return!1;if("undefined"!=typeof HTMLElement&&e instanceof HTMLElement)return!0;return"string"==typeof e.nodeName&&"function"==typeof e.getAttribute}(t)){for(var E="<"+String(t.nodeName).toLowerCase(),x=t.attributes||[],C=0;C<x.length;C++)E+=" "+x[C].name+"="+g(b(x[C].value),"double",s);return E+=">",t.childNodes&&t.childNodes.length&&(E+="..."),E+="</"+String(t.nodeName).toLowerCase()+">"}if(M(t))return 0===t.length?"[]":"[ "+O(t,_).join(", ")+" ]";if(function(e){return"[object Error]"===w(e)}(t)){var j=O(t,_);return 0===j.length?"["+String(t)+"]":"{ ["+String(t)+"] "+j.join(", ")+" }"}if("object"==typeof t){if(v&&"function"==typeof t[v])return t[v]();if("function"==typeof t.inspect)return t.inspect()}if(function(e){if(!o||!e||"object"!=typeof e)return!1;try{o.call(e);try{l.call(e)}catch(e){return!0}return e instanceof Map}catch(e){}return!1}(t)){var H=[];return i.call(t,(function(e,n){H.push(_(n,t)+" => "+_(e,t))})),P("Map",o.call(t),H)}if(function(e){if(!l||!e||"object"!=typeof e)return!1;try{l.call(e);try{o.call(e)}catch(e){return!0}return e instanceof Set}catch(e){}return!1}(t)){var I=[];return d.call(t,(function(e){I.push(_(e,t))})),P("Set",l.call(t),I)}if(function(e){if(!c||!e||"object"!=typeof e)return!1;try{c.call(e,c);try{f.call(e,f)}catch(e){return!0}return e instanceof WeakMap}catch(e){}return!1}(t))return Y("WeakMap");if(function(e){if(!f||!e||"object"!=typeof e)return!1;try{f.call(e,f);try{c.call(e,c)}catch(e){return!0}return e instanceof WeakSet}catch(e){}return!1}(t))return Y("WeakSet");if(function(e){return"[object Number]"===w(e)}(t))return S(_(Number(t)));if(function(e){return"[object BigInt]"===w(e)}(t))return S(_(p.call(t)));if(function(e){return"[object Boolean]"===w(e)}(t))return S(h.call(t));if(function(e){return"[object String]"===w(e)}(t))return S(_(String(t)));if(!function(e){return"[object Date]"===w(e)}(t)&&!function(e){return"[object RegExp]"===w(e)}(t)){var N=O(t,_);return 0===N.length?"{}":"{ "+N.join(", ")+" }"}return String(t)};var k=Object.prototype.hasOwnProperty||function(e){return e in this};function L(e,t){return k.call(e,t)}function w(e){return _.call(e)}function T(e){var t=e.charCodeAt(0),n={8:"b",9:"t",10:"n",12:"f",13:"r"}[t];return n?"\\"+n:"\\x"+(t<16?"0":"")+t.toString(16)}function S(e){return"Object("+e+")"}function Y(e){return e+" { ? }"}function P(e,t,n){return e+" ("+t+") {"+n.join(", ")+"}"}function O(e,t){var n=M(e),r=[];if(n){r.length=e.length;for(var a=0;a<e.length;a++)r[a]=L(e,a)?t(e[a],e):""}for(var o in e)L(e,o)&&(n&&String(Number(o))===o&&o<e.length||(/[^\w$]/.test(o)?r.push(t(o,e)+": "+t(e[o],e)):r.push(o+": "+t(e[o],e))));return r}},function(e,t,n){"use strict";var r=Number.isNaN||function(e){return e!=e};e.exports=Number.isFinite||function(e){return"number"==typeof e&&!r(e)&&e!==1/0&&e!==-1/0}},function(e,t,n){"use strict";var r=n(5),a=r("%Math%"),o=r("%Number%");e.exports=o.MAX_SAFE_INTEGER||a.pow(2,53)-1},function(e,t,n){"use strict";var r=n(5),a=r("%TypeError%"),o=r("%SyntaxError%"),i=n(20),s={"Property Descriptor":function(e,t){if("Object"!==e(t))return!1;var n={"[[Configurable]]":!0,"[[Enumerable]]":!0,"[[Get]]":!0,"[[Set]]":!0,"[[Value]]":!0,"[[Writable]]":!0};for(var r in t)if(i(t,r)&&!n[r])return!1;var o=i(t,"[[Value]]"),s=i(t,"[[Get]]")||i(t,"[[Set]]");if(o&&s)throw new a("Property Descriptors may not be both accessor and data descriptors");return!0}};e.exports=function(e,t,n,r){var i=s[t];if("function"!=typeof i)throw new o("unknown record type: "+t);if(!i(e,r))throw new a(n+" must be a "+t)}},function(e,t,n){"use strict";e.exports=function(e){return!!e}},function(e,t,n){"use strict";e.exports=function(e){return null===e||"function"!=typeof e&&"object"!=typeof e}},function(e,t,n){"use strict";var r=n(239),a=n(244);e.exports=function(e){var t=a(e);return t<=0?0:t>r?r:t}},function(e,t,n){"use strict";var r=n(356),a=n(359);e.exports=function(e){var t=a(e);return r(t)}},function(e,t,n){"use strict";var r=Object.prototype.toString;if(n(195)()){var a=Symbol.prototype.toString,o=/^Symbol\(.*\)$/;e.exports=function(e){if("symbol"==typeof e)return!0;if("[object Symbol]"!==r.call(e))return!1;try{return function(e){return"symbol"==typeof e.valueOf()&&o.test(a.call(e))}(e)}catch(e){return!1}}}else e.exports=function(e){return!1}},function(e,t,n){"use strict";var r=n(236);e.exports=function(){return Array.prototype.flat||r}},function(e,t,n){"use strict";n.r(t),n.d(t,"Portal",(function(){return b})),n.d(t,"PortalWithState",(function(){return L}));var r=n(15),a=n.n(r),o=n(0),i=n.n(o),s=n(3),u=n.n(s),l=!("undefined"==typeof window||!window.document||!window.document.createElement),d=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function c(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function f(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var h=function(e){function t(){return c(this,t),f(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),d(t,[{key:"componentWillUnmount",value:function(){this.defaultNode&&document.body.removeChild(this.defaultNode),this.defaultNode=null}},{key:"render",value:function(){return l?(this.props.node||this.defaultNode||(this.defaultNode=document.createElement("div"),document.body.appendChild(this.defaultNode)),a.a.createPortal(this.props.children,this.props.node||this.defaultNode)):null}}]),t}(i.a.Component);h.propTypes={children:u.a.node.isRequired,node:u.a.any};var _=h,m=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function p(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function y(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var v=function(e){function t(){return p(this,t),y(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),m(t,[{key:"componentDidMount",value:function(){this.renderPortal()}},{key:"componentDidUpdate",value:function(e){this.renderPortal()}},{key:"componentWillUnmount",value:function(){a.a.unmountComponentAtNode(this.defaultNode||this.props.node),this.defaultNode&&document.body.removeChild(this.defaultNode),this.defaultNode=null,this.portal=null}},{key:"renderPortal",value:function(e){this.props.node||this.defaultNode||(this.defaultNode=document.createElement("div"),document.body.appendChild(this.defaultNode));var t=this.props.children;"function"==typeof this.props.children.type&&(t=i.a.cloneElement(this.props.children)),this.portal=a.a.unstable_renderSubtreeIntoContainer(this,t,this.props.node||this.defaultNode)}},{key:"render",value:function(){return null}}]),t}(i.a.Component),g=v;v.propTypes={children:u.a.node.isRequired,node:u.a.any};var b=a.a.createPortal?_:g,M=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var D=27,k=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.portalNode=null,n.state={active:!!e.defaultOpen},n.openPortal=n.openPortal.bind(n),n.closePortal=n.closePortal.bind(n),n.wrapWithPortal=n.wrapWithPortal.bind(n),n.handleOutsideMouseClick=n.handleOutsideMouseClick.bind(n),n.handleKeydown=n.handleKeydown.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),M(t,[{key:"componentDidMount",value:function(){this.props.closeOnEsc&&document.addEventListener("keydown",this.handleKeydown),this.props.closeOnOutsideClick&&document.addEventListener("click",this.handleOutsideMouseClick)}},{key:"componentWillUnmount",value:function(){this.props.closeOnEsc&&document.removeEventListener("keydown",this.handleKeydown),this.props.closeOnOutsideClick&&document.removeEventListener("click",this.handleOutsideMouseClick)}},{key:"openPortal",value:function(e){this.state.active||(e&&e.nativeEvent&&e.nativeEvent.stopImmediatePropagation(),this.setState({active:!0},this.props.onOpen))}},{key:"closePortal",value:function(){this.state.active&&this.setState({active:!1},this.props.onClose)}},{key:"wrapWithPortal",value:function(e){var t=this;return this.state.active?i.a.createElement(b,{node:this.props.node,key:"react-portal",ref:function(e){return t.portalNode=e}},e):null}},{key:"handleOutsideMouseClick",value:function(e){if(this.state.active){var t=this.portalNode&&(this.portalNode.props.node||this.portalNode.defaultNode);!t||t.contains(e.target)||e.button&&0!==e.button||this.closePortal()}}},{key:"handleKeydown",value:function(e){e.keyCode===D&&this.state.active&&this.closePortal()}},{key:"render",value:function(){return this.props.children({openPortal:this.openPortal,closePortal:this.closePortal,portal:this.wrapWithPortal,isOpen:this.state.active})}}]),t}(i.a.Component);k.propTypes={children:u.a.func.isRequired,defaultOpen:u.a.bool,node:u.a.any,closeOnEsc:u.a.bool,closeOnOutsideClick:u.a.bool,onOpen:u.a.func,onClose:u.a.func},k.defaultProps={onOpen:function(){},onClose:function(){}};var L=k},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";(function(t){var n="__global_unique_id__";e.exports=function(){return t[n]=(t[n]||0)+1}}).call(this,n(25))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(375);t.uuid=function(){return r.v4()};const a={v4:/(?:^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}$)|(?:^0{8}-0{4}-0{4}-0{4}-0{12}$)/u,v5:/(?:^[a-f0-9]{8}-[a-f0-9]{4}-5[a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}$)|(?:^0{8}-0{4}-0{4}-0{4}-0{12}$)/u};t.regex=a;t.isUuid=function(e){return a.v4.test(e)||a.v5.test(e)};t.empty=function(){return"00000000-0000-0000-0000-000000000000"};t.fromString=function(e){return r.v5(e,"bb5d0ffa-9a4c-4d7c-8fc2-0a7d2220ba45")}},function(e,t,n){"use strict";
/** @license React v16.13.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(63),a="function"==typeof Symbol&&Symbol.for,o=a?Symbol.for("react.element"):60103,i=a?Symbol.for("react.portal"):60106,s=a?Symbol.for("react.fragment"):60107,u=a?Symbol.for("react.strict_mode"):60108,l=a?Symbol.for("react.profiler"):60114,d=a?Symbol.for("react.provider"):60109,c=a?Symbol.for("react.context"):60110,f=a?Symbol.for("react.forward_ref"):60112,h=a?Symbol.for("react.suspense"):60113,_=a?Symbol.for("react.memo"):60115,m=a?Symbol.for("react.lazy"):60116,p="function"==typeof Symbol&&Symbol.iterator;function y(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var v={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g={};function b(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||v}function M(){}function D(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||v}b.prototype.isReactComponent={},b.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(y(85));this.updater.enqueueSetState(this,e,t,"setState")},b.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},M.prototype=b.prototype;var k=D.prototype=new M;k.constructor=D,r(k,b.prototype),k.isPureReactComponent=!0;var L={current:null},w=Object.prototype.hasOwnProperty,T={key:!0,ref:!0,__self:!0,__source:!0};function S(e,t,n){var r,a={},i=null,s=null;if(null!=t)for(r in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(i=""+t.key),t)w.call(t,r)&&!T.hasOwnProperty(r)&&(a[r]=t[r]);var u=arguments.length-2;if(1===u)a.children=n;else if(1<u){for(var l=Array(u),d=0;d<u;d++)l[d]=arguments[d+2];a.children=l}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===a[r]&&(a[r]=u[r]);return{$$typeof:o,type:e,key:i,ref:s,props:a,_owner:L.current}}function Y(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var P=/\/+/g,O=[];function E(e,t,n,r){if(O.length){var a=O.pop();return a.result=e,a.keyPrefix=t,a.func=n,a.context=r,a.count=0,a}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function x(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>O.length&&O.push(e)}function C(e,t,n){return null==e?0:function e(t,n,r,a){var s=typeof t;"undefined"!==s&&"boolean"!==s||(t=null);var u=!1;if(null===t)u=!0;else switch(s){case"string":case"number":u=!0;break;case"object":switch(t.$$typeof){case o:case i:u=!0}}if(u)return r(a,t,""===n?"."+j(t,0):n),1;if(u=0,n=""===n?".":n+":",Array.isArray(t))for(var l=0;l<t.length;l++){var d=n+j(s=t[l],l);u+=e(s,d,r,a)}else if(null===t||"object"!=typeof t?d=null:d="function"==typeof(d=p&&t[p]||t["@@iterator"])?d:null,"function"==typeof d)for(t=d.call(t),l=0;!(s=t.next()).done;)u+=e(s=s.value,d=n+j(s,l++),r,a);else if("object"===s)throw r=""+t,Error(y(31,"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,""));return u}(e,"",t,n)}function j(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function H(e,t){e.func.call(e.context,t,e.count++)}function I(e,t,n){var r=e.result,a=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?N(e,r,n,(function(e){return e})):null!=e&&(Y(e)&&(e=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,a+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(P,"$&/")+"/")+n)),r.push(e))}function N(e,t,n,r,a){var o="";null!=n&&(o=(""+n).replace(P,"$&/")+"/"),C(e,I,t=E(t,o,r,a)),x(t)}var A={current:null};function F(){var e=A.current;if(null===e)throw Error(y(321));return e}var R={ReactCurrentDispatcher:A,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:L,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:function(e,t,n){if(null==e)return e;var r=[];return N(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;C(e,H,t=E(null,null,t,n)),x(t)},count:function(e){return C(e,(function(){return null}),null)},toArray:function(e){var t=[];return N(e,t,null,(function(e){return e})),t},only:function(e){if(!Y(e))throw Error(y(143));return e}},t.Component=b,t.Fragment=s,t.Profiler=l,t.PureComponent=D,t.StrictMode=u,t.Suspense=h,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=R,t.cloneElement=function(e,t,n){if(null==e)throw Error(y(267,e));var a=r({},e.props),i=e.key,s=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(s=t.ref,u=L.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(d in t)w.call(t,d)&&!T.hasOwnProperty(d)&&(a[d]=void 0===t[d]&&void 0!==l?l[d]:t[d])}var d=arguments.length-2;if(1===d)a.children=n;else if(1<d){l=Array(d);for(var c=0;c<d;c++)l[c]=arguments[c+2];a.children=l}return{$$typeof:o,type:e.type,key:i,ref:s,props:a,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:c,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:d,_context:e},e.Consumer=e},t.createElement=S,t.createFactory=function(e){var t=S.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:f,render:e}},t.isValidElement=Y,t.lazy=function(e){return{$$typeof:m,_ctor:e,_status:-1,_result:null}},t.memo=function(e,t){return{$$typeof:_,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return F().useCallback(e,t)},t.useContext=function(e,t){return F().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return F().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return F().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return F().useLayoutEffect(e,t)},t.useMemo=function(e,t){return F().useMemo(e,t)},t.useReducer=function(e,t,n){return F().useReducer(e,t,n)},t.useRef=function(e){return F().useRef(e)},t.useState=function(e){return F().useState(e)},t.version="16.13.0"},function(e,t,n){"use strict";
/** @license React v16.13.0
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),a=n(63),o=n(253);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(i(227));function s(e,t,n,r,a,o,i,s,u){var l=Array.prototype.slice.call(arguments,3);try{t.apply(n,l)}catch(e){this.onError(e)}}var u=!1,l=null,d=!1,c=null,f={onError:function(e){u=!0,l=e}};function h(e,t,n,r,a,o,i,d,c){u=!1,l=null,s.apply(f,arguments)}var _=null,m=null,p=null;function y(e,t,n){var r=e.type||"unknown-event";e.currentTarget=p(n),function(e,t,n,r,a,o,s,f,_){if(h.apply(this,arguments),u){if(!u)throw Error(i(198));var m=l;u=!1,l=null,d||(d=!0,c=m)}}(r,t,void 0,e),e.currentTarget=null}var v=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;v.hasOwnProperty("ReactCurrentDispatcher")||(v.ReactCurrentDispatcher={current:null}),v.hasOwnProperty("ReactCurrentBatchConfig")||(v.ReactCurrentBatchConfig={suspense:null});var g=/^(.*)[\\\/]/,b="function"==typeof Symbol&&Symbol.for,M=b?Symbol.for("react.element"):60103,D=b?Symbol.for("react.portal"):60106,k=b?Symbol.for("react.fragment"):60107,L=b?Symbol.for("react.strict_mode"):60108,w=b?Symbol.for("react.profiler"):60114,T=b?Symbol.for("react.provider"):60109,S=b?Symbol.for("react.context"):60110,Y=b?Symbol.for("react.concurrent_mode"):60111,P=b?Symbol.for("react.forward_ref"):60112,O=b?Symbol.for("react.suspense"):60113,E=b?Symbol.for("react.suspense_list"):60120,x=b?Symbol.for("react.memo"):60115,C=b?Symbol.for("react.lazy"):60116,j=b?Symbol.for("react.block"):60121,H="function"==typeof Symbol&&Symbol.iterator;function I(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=H&&e[H]||e["@@iterator"])?e:null}function N(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case k:return"Fragment";case D:return"Portal";case w:return"Profiler";case L:return"StrictMode";case O:return"Suspense";case E:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case S:return"Context.Consumer";case T:return"Context.Provider";case P:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case x:return N(e.type);case j:return N(e.render);case C:if(e=1===e._status?e._result:null)return N(e)}return null}function A(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,a=e._debugSource,o=N(e.type);n=null,r&&(n=N(r.type)),r=o,o="",a?o=" (at "+a.fileName.replace(g,"")+":"+a.lineNumber+")":n&&(o=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+o}t+=n,e=e.return}while(e);return t}var F=null,R={};function W(){if(F)for(var e in R){var t=R[e],n=F.indexOf(e);if(!(-1<n))throw Error(i(96,e));if(!B[n]){if(!t.extractEvents)throw Error(i(97,e));for(var r in B[n]=t,n=t.eventTypes){var a=void 0,o=n[r],s=t,u=r;if(K.hasOwnProperty(u))throw Error(i(99,u));K[u]=o;var l=o.phasedRegistrationNames;if(l){for(a in l)l.hasOwnProperty(a)&&z(l[a],s,u);a=!0}else o.registrationName?(z(o.registrationName,s,u),a=!0):a=!1;if(!a)throw Error(i(98,r,e))}}}}function z(e,t,n){if(U[e])throw Error(i(100,e));U[e]=t,V[e]=t.eventTypes[n].dependencies}var B=[],K={},U={},V={};function G(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!R.hasOwnProperty(t)||R[t]!==r){if(R[t])throw Error(i(102,t));R[t]=r,n=!0}}n&&W()}var J=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),$=null,q=null,Q=null;function Z(e){if(e=m(e)){if("function"!=typeof $)throw Error(i(280));var t=e.stateNode;t&&(t=_(t),$(e.stateNode,e.type,t))}}function X(e){q?Q?Q.push(e):Q=[e]:q=e}function ee(){if(q){var e=q,t=Q;if(Q=q=null,Z(e),t)for(e=0;e<t.length;e++)Z(t[e])}}function te(e,t){return e(t)}function ne(e,t,n,r,a){return e(t,n,r,a)}function re(){}var ae=te,oe=!1,ie=!1;function se(){null===q&&null===Q||(re(),ee())}function ue(e,t,n){if(ie)return e(t,n);ie=!0;try{return ae(e,t,n)}finally{ie=!1,se()}}var le=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,de=Object.prototype.hasOwnProperty,ce={},fe={};function he(e,t,n,r,a,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o}var _e={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){_e[e]=new he(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];_e[t]=new he(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){_e[e]=new he(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){_e[e]=new he(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){_e[e]=new he(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){_e[e]=new he(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){_e[e]=new he(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){_e[e]=new he(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){_e[e]=new he(e,5,!1,e.toLowerCase(),null,!1)}));var me=/[\-:]([a-z])/g;function pe(e){return e[1].toUpperCase()}function ye(e,t,n,r){var a=_e.hasOwnProperty(t)?_e[t]:null;(null!==a?0===a.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!de.call(fe,e)||!de.call(ce,e)&&(le.test(e)?fe[e]=!0:(ce[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function ve(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function ge(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function be(e){e._valueTracker||(e._valueTracker=function(e){var t=ge(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Me(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=ge(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function De(e,t){var n=t.checked;return a({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ke(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=ve(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Le(e,t){null!=(t=t.checked)&&ye(e,"checked",t,!1)}function we(e,t){Le(e,t);var n=ve(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Se(e,t.type,n):t.hasOwnProperty("defaultValue")&&Se(e,t.type,ve(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Te(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Se(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Ye(e,t){return e=a({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function Pe(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+ve(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function Oe(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return a({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Ee(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(i(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(i(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:ve(n)}}function xe(e,t){var n=ve(t.value),r=ve(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Ce(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(me,pe);_e[t]=new he(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(me,pe);_e[t]=new he(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(me,pe);_e[t]=new he(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){_e[e]=new he(e,1,!1,e.toLowerCase(),null,!1)})),_e.xlinkHref=new he("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){_e[e]=new he(e,1,!1,e.toLowerCase(),null,!0)}));var je="http://www.w3.org/1999/xhtml",He="http://www.w3.org/2000/svg";function Ie(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Ne(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Ie(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Ae,Fe=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,a){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==He||"innerHTML"in e)e.innerHTML=t;else{for((Ae=Ae||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=Ae.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function Re(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function We(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var ze={animationend:We("Animation","AnimationEnd"),animationiteration:We("Animation","AnimationIteration"),animationstart:We("Animation","AnimationStart"),transitionend:We("Transition","TransitionEnd")},Be={},Ke={};function Ue(e){if(Be[e])return Be[e];if(!ze[e])return e;var t,n=ze[e];for(t in n)if(n.hasOwnProperty(t)&&t in Ke)return Be[e]=n[t];return e}J&&(Ke=document.createElement("div").style,"AnimationEvent"in window||(delete ze.animationend.animation,delete ze.animationiteration.animation,delete ze.animationstart.animation),"TransitionEvent"in window||delete ze.transitionend.transition);var Ve=Ue("animationend"),Ge=Ue("animationiteration"),Je=Ue("animationstart"),$e=Ue("transitionend"),qe="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Qe=new("function"==typeof WeakMap?WeakMap:Map);function Ze(e){var t=Qe.get(e);return void 0===t&&(t=new Map,Qe.set(e,t)),t}function Xe(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function et(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function tt(e){if(Xe(e)!==e)throw Error(i(188))}function nt(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Xe(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var o=a.alternate;if(null===o){if(null!==(r=a.return)){n=r;continue}break}if(a.child===o.child){for(o=a.child;o;){if(o===n)return tt(a),e;if(o===r)return tt(a),t;o=o.sibling}throw Error(i(188))}if(n.return!==r.return)n=a,r=o;else{for(var s=!1,u=a.child;u;){if(u===n){s=!0,n=a,r=o;break}if(u===r){s=!0,r=a,n=o;break}u=u.sibling}if(!s){for(u=o.child;u;){if(u===n){s=!0,n=o,r=a;break}if(u===r){s=!0,r=o,n=a;break}u=u.sibling}if(!s)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function rt(e,t){if(null==t)throw Error(i(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function at(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var ot=null;function it(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)y(e,t[r],n[r]);else t&&y(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function st(e){if(null!==e&&(ot=rt(ot,e)),e=ot,ot=null,e){if(at(e,it),ot)throw Error(i(95));if(d)throw e=c,d=!1,c=null,e}}function ut(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function lt(e){if(!J)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var dt=[];function ct(e){e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>dt.length&&dt.push(e)}function ft(e,t,n,r){if(dt.length){var a=dt.pop();return a.topLevelType=e,a.eventSystemFlags=r,a.nativeEvent=t,a.targetInst=n,a}return{topLevelType:e,eventSystemFlags:r,nativeEvent:t,targetInst:n,ancestors:[]}}function ht(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;5!==(t=n.tag)&&6!==t||e.ancestors.push(n),n=Sn(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var a=ut(e.nativeEvent);r=e.topLevelType;var o=e.nativeEvent,i=e.eventSystemFlags;0===n&&(i|=64);for(var s=null,u=0;u<B.length;u++){var l=B[u];l&&(l=l.extractEvents(r,t,o,a,i))&&(s=rt(s,l))}st(s)}}function _t(e,t,n){if(!n.has(e)){switch(e){case"scroll":Jt(t,"scroll",!0);break;case"focus":case"blur":Jt(t,"focus",!0),Jt(t,"blur",!0),n.set("blur",null),n.set("focus",null);break;case"cancel":case"close":lt(e)&&Jt(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===qe.indexOf(e)&&Gt(e,t)}n.set(e,null)}}var mt,pt,yt,vt=!1,gt=[],bt=null,Mt=null,Dt=null,kt=new Map,Lt=new Map,wt=[],Tt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),St="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function Yt(e,t,n,r,a){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:a,container:r}}function Pt(e,t){switch(e){case"focus":case"blur":bt=null;break;case"dragenter":case"dragleave":Mt=null;break;case"mouseover":case"mouseout":Dt=null;break;case"pointerover":case"pointerout":kt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Lt.delete(t.pointerId)}}function Ot(e,t,n,r,a,o){return null===e||e.nativeEvent!==o?(e=Yt(t,n,r,a,o),null!==t&&(null!==(t=Yn(t))&&pt(t)),e):(e.eventSystemFlags|=r,e)}function Et(e){var t=Sn(e.target);if(null!==t){var n=Xe(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=et(n)))return e.blockedOn=t,void o.unstable_runWithPriority(e.priority,(function(){yt(n)}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function xt(e){if(null!==e.blockedOn)return!1;var t=Zt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);if(null!==t){var n=Yn(t);return null!==n&&pt(n),e.blockedOn=t,!1}return!0}function Ct(e,t,n){xt(e)&&n.delete(t)}function jt(){for(vt=!1;0<gt.length;){var e=gt[0];if(null!==e.blockedOn){null!==(e=Yn(e.blockedOn))&&mt(e);break}var t=Zt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);null!==t?e.blockedOn=t:gt.shift()}null!==bt&&xt(bt)&&(bt=null),null!==Mt&&xt(Mt)&&(Mt=null),null!==Dt&&xt(Dt)&&(Dt=null),kt.forEach(Ct),Lt.forEach(Ct)}function Ht(e,t){e.blockedOn===t&&(e.blockedOn=null,vt||(vt=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,jt)))}function It(e){function t(t){return Ht(t,e)}if(0<gt.length){Ht(gt[0],e);for(var n=1;n<gt.length;n++){var r=gt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==bt&&Ht(bt,e),null!==Mt&&Ht(Mt,e),null!==Dt&&Ht(Dt,e),kt.forEach(t),Lt.forEach(t),n=0;n<wt.length;n++)(r=wt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<wt.length&&null===(n=wt[0]).blockedOn;)Et(n),null===n.blockedOn&&wt.shift()}var Nt={},At=new Map,Ft=new Map,Rt=["abort","abort",Ve,"animationEnd",Ge,"animationIteration",Je,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",$e,"transitionEnd","waiting","waiting"];function Wt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],a=e[n+1],o="on"+(a[0].toUpperCase()+a.slice(1));o={phasedRegistrationNames:{bubbled:o,captured:o+"Capture"},dependencies:[r],eventPriority:t},Ft.set(r,t),At.set(r,o),Nt[a]=o}}Wt("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Wt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Wt(Rt,2);for(var zt="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Bt=0;Bt<zt.length;Bt++)Ft.set(zt[Bt],0);var Kt=o.unstable_UserBlockingPriority,Ut=o.unstable_runWithPriority,Vt=!0;function Gt(e,t){Jt(t,e,!1)}function Jt(e,t,n){var r=Ft.get(t);switch(void 0===r?2:r){case 0:r=$t.bind(null,t,1,e);break;case 1:r=qt.bind(null,t,1,e);break;default:r=Qt.bind(null,t,1,e)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function $t(e,t,n,r){oe||re();var a=Qt,o=oe;oe=!0;try{ne(a,e,t,n,r)}finally{(oe=o)||se()}}function qt(e,t,n,r){Ut(Kt,Qt.bind(null,e,t,n,r))}function Qt(e,t,n,r){if(Vt)if(0<gt.length&&-1<Tt.indexOf(e))e=Yt(null,e,t,n,r),gt.push(e);else{var a=Zt(e,t,n,r);if(null===a)Pt(e,r);else if(-1<Tt.indexOf(e))e=Yt(a,e,t,n,r),gt.push(e);else if(!function(e,t,n,r,a){switch(t){case"focus":return bt=Ot(bt,e,t,n,r,a),!0;case"dragenter":return Mt=Ot(Mt,e,t,n,r,a),!0;case"mouseover":return Dt=Ot(Dt,e,t,n,r,a),!0;case"pointerover":var o=a.pointerId;return kt.set(o,Ot(kt.get(o)||null,e,t,n,r,a)),!0;case"gotpointercapture":return o=a.pointerId,Lt.set(o,Ot(Lt.get(o)||null,e,t,n,r,a)),!0}return!1}(a,e,t,n,r)){Pt(e,r),e=ft(e,r,null,t);try{ue(ht,e)}finally{ct(e)}}}}function Zt(e,t,n,r){if(null!==(n=Sn(n=ut(r)))){var a=Xe(n);if(null===a)n=null;else{var o=a.tag;if(13===o){if(null!==(n=et(a)))return n;n=null}else if(3===o){if(a.stateNode.hydrate)return 3===a.tag?a.stateNode.containerInfo:null;n=null}else a!==n&&(n=null)}}e=ft(e,r,n,t);try{ue(ht,e)}finally{ct(e)}return null}var Xt={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},en=["Webkit","ms","Moz","O"];function tn(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||Xt.hasOwnProperty(e)&&Xt[e]?(""+t).trim():t+"px"}function nn(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=tn(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(Xt).forEach((function(e){en.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Xt[t]=Xt[e]}))}));var rn=a({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function an(e,t){if(t){if(rn[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62,""))}}function on(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var sn=je;function un(e,t){var n=Ze(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=V[t];for(var r=0;r<t.length;r++)_t(t[r],e,n)}function ln(){}function dn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function cn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function fn(e,t){var n,r=cn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=cn(r)}}function hn(){for(var e=window,t=dn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=dn((e=t.contentWindow).document)}return t}function _n(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var mn=null,pn=null;function yn(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function vn(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var gn="function"==typeof setTimeout?setTimeout:void 0,bn="function"==typeof clearTimeout?clearTimeout:void 0;function Mn(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Dn(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var kn=Math.random().toString(36).slice(2),Ln="__reactInternalInstance$"+kn,wn="__reactEventHandlers$"+kn,Tn="__reactContainere$"+kn;function Sn(e){var t=e[Ln];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Tn]||n[Ln]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Dn(e);null!==e;){if(n=e[Ln])return n;e=Dn(e)}return t}n=(e=n).parentNode}return null}function Yn(e){return!(e=e[Ln]||e[Tn])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Pn(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function On(e){return e[wn]||null}function En(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function xn(e,t){var n=e.stateNode;if(!n)return null;var r=_(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}function Cn(e,t,n){(t=xn(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function jn(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=En(t);for(t=n.length;0<t--;)Cn(n[t],"captured",e);for(t=0;t<n.length;t++)Cn(n[t],"bubbled",e)}}function Hn(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=xn(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function In(e){e&&e.dispatchConfig.registrationName&&Hn(e._targetInst,null,e)}function Nn(e){at(e,jn)}var An=null,Fn=null,Rn=null;function Wn(){if(Rn)return Rn;var e,t,n=Fn,r=n.length,a="value"in An?An.value:An.textContent,o=a.length;for(e=0;e<r&&n[e]===a[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===a[o-t];t++);return Rn=a.slice(e,1<t?1-t:void 0)}function zn(){return!0}function Bn(){return!1}function Kn(e,t,n,r){for(var a in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(a)&&((t=e[a])?this[a]=t(n):"target"===a?this.target=r:this[a]=n[a]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?zn:Bn,this.isPropagationStopped=Bn,this}function Un(e,t,n,r){if(this.eventPool.length){var a=this.eventPool.pop();return this.call(a,e,t,n,r),a}return new this(e,t,n,r)}function Vn(e){if(!(e instanceof this))throw Error(i(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Gn(e){e.eventPool=[],e.getPooled=Un,e.release=Vn}a(Kn.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=zn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=zn)},persist:function(){this.isPersistent=zn},isPersistent:Bn,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=Bn,this._dispatchInstances=this._dispatchListeners=null}}),Kn.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},Kn.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return a(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=a({},r.Interface,e),n.extend=r.extend,Gn(n),n},Gn(Kn);var Jn=Kn.extend({data:null}),$n=Kn.extend({data:null}),qn=[9,13,27,32],Qn=J&&"CompositionEvent"in window,Zn=null;J&&"documentMode"in document&&(Zn=document.documentMode);var Xn=J&&"TextEvent"in window&&!Zn,er=J&&(!Qn||Zn&&8<Zn&&11>=Zn),tr=String.fromCharCode(32),nr={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},rr=!1;function ar(e,t){switch(e){case"keyup":return-1!==qn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function or(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var ir=!1;var sr={eventTypes:nr,extractEvents:function(e,t,n,r){var a;if(Qn)e:{switch(e){case"compositionstart":var o=nr.compositionStart;break e;case"compositionend":o=nr.compositionEnd;break e;case"compositionupdate":o=nr.compositionUpdate;break e}o=void 0}else ir?ar(e,n)&&(o=nr.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=nr.compositionStart);return o?(er&&"ko"!==n.locale&&(ir||o!==nr.compositionStart?o===nr.compositionEnd&&ir&&(a=Wn()):(Fn="value"in(An=r)?An.value:An.textContent,ir=!0)),o=Jn.getPooled(o,t,n,r),a?o.data=a:null!==(a=or(n))&&(o.data=a),Nn(o),a=o):a=null,(e=Xn?function(e,t){switch(e){case"compositionend":return or(t);case"keypress":return 32!==t.which?null:(rr=!0,tr);case"textInput":return(e=t.data)===tr&&rr?null:e;default:return null}}(e,n):function(e,t){if(ir)return"compositionend"===e||!Qn&&ar(e,t)?(e=Wn(),Rn=Fn=An=null,ir=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return er&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=$n.getPooled(nr.beforeInput,t,n,r)).data=e,Nn(t)):t=null,null===a?t:null===t?a:[a,t]}},ur={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function lr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!ur[e.type]:"textarea"===t}var dr={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function cr(e,t,n){return(e=Kn.getPooled(dr.change,e,t,n)).type="change",X(n),Nn(e),e}var fr=null,hr=null;function _r(e){st(e)}function mr(e){if(Me(Pn(e)))return e}function pr(e,t){if("change"===e)return t}var yr=!1;function vr(){fr&&(fr.detachEvent("onpropertychange",gr),hr=fr=null)}function gr(e){if("value"===e.propertyName&&mr(hr))if(e=cr(hr,e,ut(e)),oe)st(e);else{oe=!0;try{te(_r,e)}finally{oe=!1,se()}}}function br(e,t,n){"focus"===e?(vr(),hr=n,(fr=t).attachEvent("onpropertychange",gr)):"blur"===e&&vr()}function Mr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return mr(hr)}function Dr(e,t){if("click"===e)return mr(t)}function kr(e,t){if("input"===e||"change"===e)return mr(t)}J&&(yr=lt("input")&&(!document.documentMode||9<document.documentMode));var Lr={eventTypes:dr,_isInputEventSupported:yr,extractEvents:function(e,t,n,r){var a=t?Pn(t):window,o=a.nodeName&&a.nodeName.toLowerCase();if("select"===o||"input"===o&&"file"===a.type)var i=pr;else if(lr(a))if(yr)i=kr;else{i=Mr;var s=br}else(o=a.nodeName)&&"input"===o.toLowerCase()&&("checkbox"===a.type||"radio"===a.type)&&(i=Dr);if(i&&(i=i(e,t)))return cr(i,n,r);s&&s(e,a,t),"blur"===e&&(e=a._wrapperState)&&e.controlled&&"number"===a.type&&Se(a,"number",a.value)}},wr=Kn.extend({view:null,detail:null}),Tr={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Sr(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Tr[e])&&!!t[e]}function Yr(){return Sr}var Pr=0,Or=0,Er=!1,xr=!1,Cr=wr.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Yr,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Pr;return Pr=e.screenX,Er?"mousemove"===e.type?e.screenX-t:0:(Er=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Or;return Or=e.screenY,xr?"mousemove"===e.type?e.screenY-t:0:(xr=!0,0)}}),jr=Cr.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Hr={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Ir={eventTypes:Hr,extractEvents:function(e,t,n,r,a){var o="mouseover"===e||"pointerover"===e,i="mouseout"===e||"pointerout"===e;if(o&&0==(32&a)&&(n.relatedTarget||n.fromElement)||!i&&!o)return null;(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,i)?(i=t,null!==(t=(t=n.relatedTarget||n.toElement)?Sn(t):null)&&(t!==Xe(t)||5!==t.tag&&6!==t.tag)&&(t=null)):i=null;if(i===t)return null;if("mouseout"===e||"mouseover"===e)var s=Cr,u=Hr.mouseLeave,l=Hr.mouseEnter,d="mouse";else"pointerout"!==e&&"pointerover"!==e||(s=jr,u=Hr.pointerLeave,l=Hr.pointerEnter,d="pointer");if(e=null==i?o:Pn(i),o=null==t?o:Pn(t),(u=s.getPooled(u,i,n,r)).type=d+"leave",u.target=e,u.relatedTarget=o,(n=s.getPooled(l,t,n,r)).type=d+"enter",n.target=o,n.relatedTarget=e,d=t,(r=i)&&d)e:{for(l=d,i=0,e=s=r;e;e=En(e))i++;for(e=0,t=l;t;t=En(t))e++;for(;0<i-e;)s=En(s),i--;for(;0<e-i;)l=En(l),e--;for(;i--;){if(s===l||s===l.alternate)break e;s=En(s),l=En(l)}s=null}else s=null;for(l=s,s=[];r&&r!==l&&(null===(i=r.alternate)||i!==l);)s.push(r),r=En(r);for(r=[];d&&d!==l&&(null===(i=d.alternate)||i!==l);)r.push(d),d=En(d);for(d=0;d<s.length;d++)Hn(s[d],"bubbled",u);for(d=r.length;0<d--;)Hn(r[d],"captured",n);return 0==(64&a)?[u]:[u,n]}};var Nr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},Ar=Object.prototype.hasOwnProperty;function Fr(e,t){if(Nr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Ar.call(t,n[r])||!Nr(e[n[r]],t[n[r]]))return!1;return!0}var Rr=J&&"documentMode"in document&&11>=document.documentMode,Wr={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},zr=null,Br=null,Kr=null,Ur=!1;function Vr(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Ur||null==zr||zr!==dn(n)?null:("selectionStart"in(n=zr)&&_n(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Kr&&Fr(Kr,n)?null:(Kr=n,(e=Kn.getPooled(Wr.select,Br,e,t)).type="select",e.target=zr,Nn(e),e))}var Gr={eventTypes:Wr,extractEvents:function(e,t,n,r,a,o){if(!(o=!(a=o||(r.window===r?r.document:9===r.nodeType?r:r.ownerDocument)))){e:{a=Ze(a),o=V.onSelect;for(var i=0;i<o.length;i++)if(!a.has(o[i])){a=!1;break e}a=!0}o=!a}if(o)return null;switch(a=t?Pn(t):window,e){case"focus":(lr(a)||"true"===a.contentEditable)&&(zr=a,Br=t,Kr=null);break;case"blur":Kr=Br=zr=null;break;case"mousedown":Ur=!0;break;case"contextmenu":case"mouseup":case"dragend":return Ur=!1,Vr(n,r);case"selectionchange":if(Rr)break;case"keydown":case"keyup":return Vr(n,r)}return null}},Jr=Kn.extend({animationName:null,elapsedTime:null,pseudoElement:null}),$r=Kn.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),qr=wr.extend({relatedTarget:null});function Qr(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var Zr={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Xr={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},ea=wr.extend({key:function(e){if(e.key){var t=Zr[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Qr(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Xr[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Yr,charCode:function(e){return"keypress"===e.type?Qr(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Qr(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),ta=Cr.extend({dataTransfer:null}),na=wr.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Yr}),ra=Kn.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),aa=Cr.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),oa={eventTypes:Nt,extractEvents:function(e,t,n,r){var a=At.get(e);if(!a)return null;switch(e){case"keypress":if(0===Qr(n))return null;case"keydown":case"keyup":e=ea;break;case"blur":case"focus":e=qr;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Cr;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=ta;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=na;break;case Ve:case Ge:case Je:e=Jr;break;case $e:e=ra;break;case"scroll":e=wr;break;case"wheel":e=aa;break;case"copy":case"cut":case"paste":e=$r;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=jr;break;default:e=Kn}return Nn(t=e.getPooled(a,t,n,r)),t}};if(F)throw Error(i(101));F=Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),W(),_=On,m=Yn,p=Pn,G({SimpleEventPlugin:oa,EnterLeaveEventPlugin:Ir,ChangeEventPlugin:Lr,SelectEventPlugin:Gr,BeforeInputEventPlugin:sr});var ia=[],sa=-1;function ua(e){0>sa||(e.current=ia[sa],ia[sa]=null,sa--)}function la(e,t){sa++,ia[sa]=e.current,e.current=t}var da={},ca={current:da},fa={current:!1},ha=da;function _a(e,t){var n=e.type.contextTypes;if(!n)return da;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,o={};for(a in n)o[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function ma(e){return null!=(e=e.childContextTypes)}function pa(){ua(fa),ua(ca)}function ya(e,t,n){if(ca.current!==da)throw Error(i(168));la(ca,t),la(fa,n)}function va(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in e))throw Error(i(108,N(t)||"Unknown",o));return a({},n,{},r)}function ga(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||da,ha=ca.current,la(ca,e),la(fa,fa.current),!0}function ba(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(e=va(e,t,ha),r.__reactInternalMemoizedMergedChildContext=e,ua(fa),ua(ca),la(ca,e)):ua(fa),la(fa,n)}var Ma=o.unstable_runWithPriority,Da=o.unstable_scheduleCallback,ka=o.unstable_cancelCallback,La=o.unstable_requestPaint,wa=o.unstable_now,Ta=o.unstable_getCurrentPriorityLevel,Sa=o.unstable_ImmediatePriority,Ya=o.unstable_UserBlockingPriority,Pa=o.unstable_NormalPriority,Oa=o.unstable_LowPriority,Ea=o.unstable_IdlePriority,xa={},Ca=o.unstable_shouldYield,ja=void 0!==La?La:function(){},Ha=null,Ia=null,Na=!1,Aa=wa(),Fa=1e4>Aa?wa:function(){return wa()-Aa};function Ra(){switch(Ta()){case Sa:return 99;case Ya:return 98;case Pa:return 97;case Oa:return 96;case Ea:return 95;default:throw Error(i(332))}}function Wa(e){switch(e){case 99:return Sa;case 98:return Ya;case 97:return Pa;case 96:return Oa;case 95:return Ea;default:throw Error(i(332))}}function za(e,t){return e=Wa(e),Ma(e,t)}function Ba(e,t,n){return e=Wa(e),Da(e,t,n)}function Ka(e){return null===Ha?(Ha=[e],Ia=Da(Sa,Va)):Ha.push(e),xa}function Ua(){if(null!==Ia){var e=Ia;Ia=null,ka(e)}Va()}function Va(){if(!Na&&null!==Ha){Na=!0;var e=0;try{var t=Ha;za(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Ha=null}catch(t){throw null!==Ha&&(Ha=Ha.slice(e+1)),Da(Sa,Ua),t}finally{Na=!1}}}function Ga(e,t,n){return 1073741821-(1+((1073741821-e+t/10)/(n/=10)|0))*n}function Ja(e,t){if(e&&e.defaultProps)for(var n in t=a({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var $a={current:null},qa=null,Qa=null,Za=null;function Xa(){Za=Qa=qa=null}function eo(e){var t=$a.current;ua($a),e.type._context._currentValue=t}function to(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function no(e,t){qa=e,Za=Qa=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(Oi=!0),e.firstContext=null)}function ro(e,t){if(Za!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Za=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Qa){if(null===qa)throw Error(i(308));Qa=t,qa.dependencies={expirationTime:0,firstContext:t,responders:null}}else Qa=Qa.next=t;return e._currentValue}var ao=!1;function oo(e){e.updateQueue={baseState:e.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}function io(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,baseQueue:e.baseQueue,shared:e.shared,effects:e.effects})}function so(e,t){return(e={expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null}).next=e}function uo(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function lo(e,t){var n=e.alternate;null!==n&&io(n,e),null===(n=(e=e.updateQueue).baseQueue)?(e.baseQueue=t.next=t,t.next=t):(t.next=n.next,n.next=t)}function co(e,t,n,r){var o=e.updateQueue;ao=!1;var i=o.baseQueue,s=o.shared.pending;if(null!==s){if(null!==i){var u=i.next;i.next=s.next,s.next=u}i=s,o.shared.pending=null,null!==(u=e.alternate)&&(null!==(u=u.updateQueue)&&(u.baseQueue=s))}if(null!==i){u=i.next;var l=o.baseState,d=0,c=null,f=null,h=null;if(null!==u)for(var _=u;;){if((s=_.expirationTime)<r){var m={expirationTime:_.expirationTime,suspenseConfig:_.suspenseConfig,tag:_.tag,payload:_.payload,callback:_.callback,next:null};null===h?(f=h=m,c=l):h=h.next=m,s>d&&(d=s)}else{null!==h&&(h=h.next={expirationTime:1073741823,suspenseConfig:_.suspenseConfig,tag:_.tag,payload:_.payload,callback:_.callback,next:null}),ou(s,_.suspenseConfig);e:{var p=e,y=_;switch(s=t,m=n,y.tag){case 1:if("function"==typeof(p=y.payload)){l=p.call(m,l,s);break e}l=p;break e;case 3:p.effectTag=-4097&p.effectTag|64;case 0:if(null==(s="function"==typeof(p=y.payload)?p.call(m,l,s):p))break e;l=a({},l,s);break e;case 2:ao=!0}}null!==_.callback&&(e.effectTag|=32,null===(s=o.effects)?o.effects=[_]:s.push(_))}if(null===(_=_.next)||_===u){if(null===(s=o.shared.pending))break;_=i.next=s.next,s.next=u,o.baseQueue=i=s,o.shared.pending=null}}null===h?c=l:h.next=f,o.baseState=c,o.baseQueue=h,iu(d),e.expirationTime=d,e.memoizedState=l}}function fo(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],a=r.callback;if(null!==a){if(r.callback=null,r=a,a=n,"function"!=typeof r)throw Error(i(191,r));r.call(a)}}}var ho=v.ReactCurrentBatchConfig,_o=(new r.Component).refs;function mo(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:a({},t,n),e.memoizedState=n,0===e.expirationTime&&(e.updateQueue.baseState=n)}var po={isMounted:function(e){return!!(e=e._reactInternalFiber)&&Xe(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=Vs(),a=ho.suspense;(a=so(r=Gs(r,e,a),a)).payload=t,null!=n&&(a.callback=n),uo(e,a),Js(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=Vs(),a=ho.suspense;(a=so(r=Gs(r,e,a),a)).tag=1,a.payload=t,null!=n&&(a.callback=n),uo(e,a),Js(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=Vs(),r=ho.suspense;(r=so(n=Gs(n,e,r),r)).tag=2,null!=t&&(r.callback=t),uo(e,r),Js(e,n)}};function yo(e,t,n,r,a,o,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,i):!t.prototype||!t.prototype.isPureReactComponent||(!Fr(n,r)||!Fr(a,o))}function vo(e,t,n){var r=!1,a=da,o=t.contextType;return"object"==typeof o&&null!==o?o=ro(o):(a=ma(t)?ha:ca.current,o=(r=null!=(r=t.contextTypes))?_a(e,a):da),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=po,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=o),t}function go(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&po.enqueueReplaceState(t,t.state,null)}function bo(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs=_o,oo(e);var o=t.contextType;"object"==typeof o&&null!==o?a.context=ro(o):(o=ma(t)?ha:ca.current,a.context=_a(e,o)),co(e,n,a,r),a.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(mo(e,t,o,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&po.enqueueReplaceState(a,a.state,null),co(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.effectTag|=4)}var Mo=Array.isArray;function Do(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var a=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===a?t.ref:((t=function(e){var t=r.refs;t===_o&&(t=r.refs={}),null===e?delete t[a]:t[a]=e})._stringRef=a,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function ko(e,t){if("textarea"!==e.type)throw Error(i(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function Lo(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=Tu(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function s(t){return e&&null===t.alternate&&(t.effectTag=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Pu(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function l(e,t,n,r){return null!==t&&t.elementType===n.type?((r=a(t,n.props)).ref=Do(e,t,n),r.return=e,r):((r=Su(n.type,n.key,n.props,null,e.mode,r)).ref=Do(e,t,n),r.return=e,r)}function d(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Ou(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function c(e,t,n,r,o){return null===t||7!==t.tag?((t=Yu(n,e.mode,r,o)).return=e,t):((t=a(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Pu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case M:return(n=Su(t.type,t.key,t.props,null,e.mode,n)).ref=Do(e,null,t),n.return=e,n;case D:return(t=Ou(t,e.mode,n)).return=e,t}if(Mo(t)||I(t))return(t=Yu(t,e.mode,n,null)).return=e,t;ko(e,t)}return null}function h(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==a?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case M:return n.key===a?n.type===k?c(e,t,n.props.children,r,a):l(e,t,n,r):null;case D:return n.key===a?d(e,t,n,r):null}if(Mo(n)||I(n))return null!==a?null:c(e,t,n,r,null);ko(e,n)}return null}function _(e,t,n,r,a){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case M:return e=e.get(null===r.key?n:r.key)||null,r.type===k?c(t,e,r.props.children,a,r.key):l(t,e,r,a);case D:return d(t,e=e.get(null===r.key?n:r.key)||null,r,a)}if(Mo(r)||I(r))return c(t,e=e.get(n)||null,r,a,null);ko(t,r)}return null}function m(a,i,s,u){for(var l=null,d=null,c=i,m=i=0,p=null;null!==c&&m<s.length;m++){c.index>m?(p=c,c=null):p=c.sibling;var y=h(a,c,s[m],u);if(null===y){null===c&&(c=p);break}e&&c&&null===y.alternate&&t(a,c),i=o(y,i,m),null===d?l=y:d.sibling=y,d=y,c=p}if(m===s.length)return n(a,c),l;if(null===c){for(;m<s.length;m++)null!==(c=f(a,s[m],u))&&(i=o(c,i,m),null===d?l=c:d.sibling=c,d=c);return l}for(c=r(a,c);m<s.length;m++)null!==(p=_(c,a,m,s[m],u))&&(e&&null!==p.alternate&&c.delete(null===p.key?m:p.key),i=o(p,i,m),null===d?l=p:d.sibling=p,d=p);return e&&c.forEach((function(e){return t(a,e)})),l}function p(a,s,u,l){var d=I(u);if("function"!=typeof d)throw Error(i(150));if(null==(u=d.call(u)))throw Error(i(151));for(var c=d=null,m=s,p=s=0,y=null,v=u.next();null!==m&&!v.done;p++,v=u.next()){m.index>p?(y=m,m=null):y=m.sibling;var g=h(a,m,v.value,l);if(null===g){null===m&&(m=y);break}e&&m&&null===g.alternate&&t(a,m),s=o(g,s,p),null===c?d=g:c.sibling=g,c=g,m=y}if(v.done)return n(a,m),d;if(null===m){for(;!v.done;p++,v=u.next())null!==(v=f(a,v.value,l))&&(s=o(v,s,p),null===c?d=v:c.sibling=v,c=v);return d}for(m=r(a,m);!v.done;p++,v=u.next())null!==(v=_(m,a,p,v.value,l))&&(e&&null!==v.alternate&&m.delete(null===v.key?p:v.key),s=o(v,s,p),null===c?d=v:c.sibling=v,c=v);return e&&m.forEach((function(e){return t(a,e)})),d}return function(e,r,o,u){var l="object"==typeof o&&null!==o&&o.type===k&&null===o.key;l&&(o=o.props.children);var d="object"==typeof o&&null!==o;if(d)switch(o.$$typeof){case M:e:{for(d=o.key,l=r;null!==l;){if(l.key===d){switch(l.tag){case 7:if(o.type===k){n(e,l.sibling),(r=a(l,o.props.children)).return=e,e=r;break e}break;default:if(l.elementType===o.type){n(e,l.sibling),(r=a(l,o.props)).ref=Do(e,l,o),r.return=e,e=r;break e}}n(e,l);break}t(e,l),l=l.sibling}o.type===k?((r=Yu(o.props.children,e.mode,u,o.key)).return=e,e=r):((u=Su(o.type,o.key,o.props,null,e.mode,u)).ref=Do(e,r,o),u.return=e,e=u)}return s(e);case D:e:{for(l=o.key;null!==r;){if(r.key===l){if(4===r.tag&&r.stateNode.containerInfo===o.containerInfo&&r.stateNode.implementation===o.implementation){n(e,r.sibling),(r=a(r,o.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Ou(o,e.mode,u)).return=e,e=r}return s(e)}if("string"==typeof o||"number"==typeof o)return o=""+o,null!==r&&6===r.tag?(n(e,r.sibling),(r=a(r,o)).return=e,e=r):(n(e,r),(r=Pu(o,e.mode,u)).return=e,e=r),s(e);if(Mo(o))return m(e,r,o,u);if(I(o))return p(e,r,o,u);if(d&&ko(e,o),void 0===o&&!l)switch(e.tag){case 1:case 0:throw e=e.type,Error(i(152,e.displayName||e.name||"Component"))}return n(e,r)}}var wo=Lo(!0),To=Lo(!1),So={},Yo={current:So},Po={current:So},Oo={current:So};function Eo(e){if(e===So)throw Error(i(174));return e}function xo(e,t){switch(la(Oo,t),la(Po,e),la(Yo,So),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Ne(null,"");break;default:t=Ne(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}ua(Yo),la(Yo,t)}function Co(){ua(Yo),ua(Po),ua(Oo)}function jo(e){Eo(Oo.current);var t=Eo(Yo.current),n=Ne(t,e.type);t!==n&&(la(Po,e),la(Yo,n))}function Ho(e){Po.current===e&&(ua(Yo),ua(Po))}var Io={current:0};function No(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function Ao(e,t){return{responder:e,props:t}}var Fo=v.ReactCurrentDispatcher,Ro=v.ReactCurrentBatchConfig,Wo=0,zo=null,Bo=null,Ko=null,Uo=!1;function Vo(){throw Error(i(321))}function Go(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Nr(e[n],t[n]))return!1;return!0}function Jo(e,t,n,r,a,o){if(Wo=o,zo=t,t.memoizedState=null,t.updateQueue=null,t.expirationTime=0,Fo.current=null===e||null===e.memoizedState?yi:vi,e=n(r,a),t.expirationTime===Wo){o=0;do{if(t.expirationTime=0,!(25>o))throw Error(i(301));o+=1,Ko=Bo=null,t.updateQueue=null,Fo.current=gi,e=n(r,a)}while(t.expirationTime===Wo)}if(Fo.current=pi,t=null!==Bo&&null!==Bo.next,Wo=0,Ko=Bo=zo=null,Uo=!1,t)throw Error(i(300));return e}function $o(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Ko?zo.memoizedState=Ko=e:Ko=Ko.next=e,Ko}function qo(){if(null===Bo){var e=zo.alternate;e=null!==e?e.memoizedState:null}else e=Bo.next;var t=null===Ko?zo.memoizedState:Ko.next;if(null!==t)Ko=t,Bo=e;else{if(null===e)throw Error(i(310));e={memoizedState:(Bo=e).memoizedState,baseState:Bo.baseState,baseQueue:Bo.baseQueue,queue:Bo.queue,next:null},null===Ko?zo.memoizedState=Ko=e:Ko=Ko.next=e}return Ko}function Qo(e,t){return"function"==typeof t?t(e):t}function Zo(e){var t=qo(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=Bo,a=r.baseQueue,o=n.pending;if(null!==o){if(null!==a){var s=a.next;a.next=o.next,o.next=s}r.baseQueue=a=o,n.pending=null}if(null!==a){a=a.next,r=r.baseState;var u=s=o=null,l=a;do{var d=l.expirationTime;if(d<Wo){var c={expirationTime:l.expirationTime,suspenseConfig:l.suspenseConfig,action:l.action,eagerReducer:l.eagerReducer,eagerState:l.eagerState,next:null};null===u?(s=u=c,o=r):u=u.next=c,d>zo.expirationTime&&(zo.expirationTime=d,iu(d))}else null!==u&&(u=u.next={expirationTime:1073741823,suspenseConfig:l.suspenseConfig,action:l.action,eagerReducer:l.eagerReducer,eagerState:l.eagerState,next:null}),ou(d,l.suspenseConfig),r=l.eagerReducer===e?l.eagerState:e(r,l.action);l=l.next}while(null!==l&&l!==a);null===u?o=r:u.next=s,Nr(r,t.memoizedState)||(Oi=!0),t.memoizedState=r,t.baseState=o,t.baseQueue=u,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function Xo(e){var t=qo(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,o=t.memoizedState;if(null!==a){n.pending=null;var s=a=a.next;do{o=e(o,s.action),s=s.next}while(s!==a);Nr(o,t.memoizedState)||(Oi=!0),t.memoizedState=o,null===t.baseQueue&&(t.baseState=o),n.lastRenderedState=o}return[o,r]}function ei(e){var t=$o();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:Qo,lastRenderedState:e}).dispatch=mi.bind(null,zo,e),[t.memoizedState,e]}function ti(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=zo.updateQueue)?(t={lastEffect:null},zo.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function ni(){return qo().memoizedState}function ri(e,t,n,r){var a=$o();zo.effectTag|=e,a.memoizedState=ti(1|t,n,void 0,void 0===r?null:r)}function ai(e,t,n,r){var a=qo();r=void 0===r?null:r;var o=void 0;if(null!==Bo){var i=Bo.memoizedState;if(o=i.destroy,null!==r&&Go(r,i.deps))return void ti(t,n,o,r)}zo.effectTag|=e,a.memoizedState=ti(1|t,n,o,r)}function oi(e,t){return ri(516,4,e,t)}function ii(e,t){return ai(516,4,e,t)}function si(e,t){return ai(4,2,e,t)}function ui(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function li(e,t,n){return n=null!=n?n.concat([e]):null,ai(4,2,ui.bind(null,t,e),n)}function di(){}function ci(e,t){return $o().memoizedState=[e,void 0===t?null:t],e}function fi(e,t){var n=qo();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Go(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function hi(e,t){var n=qo();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Go(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function _i(e,t,n){var r=Ra();za(98>r?98:r,(function(){e(!0)})),za(97<r?97:r,(function(){var r=Ro.suspense;Ro.suspense=void 0===t?null:t;try{e(!1),n()}finally{Ro.suspense=r}}))}function mi(e,t,n){var r=Vs(),a=ho.suspense;a={expirationTime:r=Gs(r,e,a),suspenseConfig:a,action:n,eagerReducer:null,eagerState:null,next:null};var o=t.pending;if(null===o?a.next=a:(a.next=o.next,o.next=a),t.pending=a,o=e.alternate,e===zo||null!==o&&o===zo)Uo=!0,a.expirationTime=Wo,zo.expirationTime=Wo;else{if(0===e.expirationTime&&(null===o||0===o.expirationTime)&&null!==(o=t.lastRenderedReducer))try{var i=t.lastRenderedState,s=o(i,n);if(a.eagerReducer=o,a.eagerState=s,Nr(s,i))return}catch(e){}Js(e,r)}}var pi={readContext:ro,useCallback:Vo,useContext:Vo,useEffect:Vo,useImperativeHandle:Vo,useLayoutEffect:Vo,useMemo:Vo,useReducer:Vo,useRef:Vo,useState:Vo,useDebugValue:Vo,useResponder:Vo,useDeferredValue:Vo,useTransition:Vo},yi={readContext:ro,useCallback:ci,useContext:ro,useEffect:oi,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ri(4,2,ui.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ri(4,2,e,t)},useMemo:function(e,t){var n=$o();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=$o();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=mi.bind(null,zo,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},$o().memoizedState=e},useState:ei,useDebugValue:di,useResponder:Ao,useDeferredValue:function(e,t){var n=ei(e),r=n[0],a=n[1];return oi((function(){var n=Ro.suspense;Ro.suspense=void 0===t?null:t;try{a(e)}finally{Ro.suspense=n}}),[e,t]),r},useTransition:function(e){var t=ei(!1),n=t[0];return t=t[1],[ci(_i.bind(null,t,e),[t,e]),n]}},vi={readContext:ro,useCallback:fi,useContext:ro,useEffect:ii,useImperativeHandle:li,useLayoutEffect:si,useMemo:hi,useReducer:Zo,useRef:ni,useState:function(){return Zo(Qo)},useDebugValue:di,useResponder:Ao,useDeferredValue:function(e,t){var n=Zo(Qo),r=n[0],a=n[1];return ii((function(){var n=Ro.suspense;Ro.suspense=void 0===t?null:t;try{a(e)}finally{Ro.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Zo(Qo),n=t[0];return t=t[1],[fi(_i.bind(null,t,e),[t,e]),n]}},gi={readContext:ro,useCallback:fi,useContext:ro,useEffect:ii,useImperativeHandle:li,useLayoutEffect:si,useMemo:hi,useReducer:Xo,useRef:ni,useState:function(){return Xo(Qo)},useDebugValue:di,useResponder:Ao,useDeferredValue:function(e,t){var n=Xo(Qo),r=n[0],a=n[1];return ii((function(){var n=Ro.suspense;Ro.suspense=void 0===t?null:t;try{a(e)}finally{Ro.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Xo(Qo),n=t[0];return t=t[1],[fi(_i.bind(null,t,e),[t,e]),n]}},bi=null,Mi=null,Di=!1;function ki(e,t){var n=Lu(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Li(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function wi(e){if(Di){var t=Mi;if(t){var n=t;if(!Li(e,t)){if(!(t=Mn(n.nextSibling))||!Li(e,t))return e.effectTag=-1025&e.effectTag|2,Di=!1,void(bi=e);ki(bi,n)}bi=e,Mi=Mn(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,Di=!1,bi=e}}function Ti(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;bi=e}function Si(e){if(e!==bi)return!1;if(!Di)return Ti(e),Di=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!vn(t,e.memoizedProps))for(t=Mi;t;)ki(e,t),t=Mn(t.nextSibling);if(Ti(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Mi=Mn(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Mi=null}}else Mi=bi?Mn(e.stateNode.nextSibling):null;return!0}function Yi(){Mi=bi=null,Di=!1}var Pi=v.ReactCurrentOwner,Oi=!1;function Ei(e,t,n,r){t.child=null===e?To(t,null,n,r):wo(t,e.child,n,r)}function xi(e,t,n,r,a){n=n.render;var o=t.ref;return no(t,a),r=Jo(e,t,n,r,o,a),null===e||Oi?(t.effectTag|=1,Ei(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=a&&(e.expirationTime=0),Ji(e,t,a))}function Ci(e,t,n,r,a,o){if(null===e){var i=n.type;return"function"!=typeof i||wu(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Su(n.type,null,r,null,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,ji(e,t,i,r,a,o))}return i=e.child,a<o&&(a=i.memoizedProps,(n=null!==(n=n.compare)?n:Fr)(a,r)&&e.ref===t.ref)?Ji(e,t,o):(t.effectTag|=1,(e=Tu(i,r)).ref=t.ref,e.return=t,t.child=e)}function ji(e,t,n,r,a,o){return null!==e&&Fr(e.memoizedProps,r)&&e.ref===t.ref&&(Oi=!1,a<o)?(t.expirationTime=e.expirationTime,Ji(e,t,o)):Ii(e,t,n,r,o)}function Hi(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Ii(e,t,n,r,a){var o=ma(n)?ha:ca.current;return o=_a(t,o),no(t,a),n=Jo(e,t,n,r,o,a),null===e||Oi?(t.effectTag|=1,Ei(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=a&&(e.expirationTime=0),Ji(e,t,a))}function Ni(e,t,n,r,a){if(ma(n)){var o=!0;ga(t)}else o=!1;if(no(t,a),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),vo(t,n,r),bo(t,n,r,a),r=!0;else if(null===e){var i=t.stateNode,s=t.memoizedProps;i.props=s;var u=i.context,l=n.contextType;"object"==typeof l&&null!==l?l=ro(l):l=_a(t,l=ma(n)?ha:ca.current);var d=n.getDerivedStateFromProps,c="function"==typeof d||"function"==typeof i.getSnapshotBeforeUpdate;c||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(s!==r||u!==l)&&go(t,i,r,l),ao=!1;var f=t.memoizedState;i.state=f,co(t,r,i,a),u=t.memoizedState,s!==r||f!==u||fa.current||ao?("function"==typeof d&&(mo(t,n,d,r),u=t.memoizedState),(s=ao||yo(t,n,s,r,f,u,l))?(c||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.effectTag|=4)):("function"==typeof i.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=u),i.props=r,i.state=u,i.context=l,r=s):("function"==typeof i.componentDidMount&&(t.effectTag|=4),r=!1)}else i=t.stateNode,io(e,t),s=t.memoizedProps,i.props=t.type===t.elementType?s:Ja(t.type,s),u=i.context,"object"==typeof(l=n.contextType)&&null!==l?l=ro(l):l=_a(t,l=ma(n)?ha:ca.current),(c="function"==typeof(d=n.getDerivedStateFromProps)||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(s!==r||u!==l)&&go(t,i,r,l),ao=!1,u=t.memoizedState,i.state=u,co(t,r,i,a),f=t.memoizedState,s!==r||u!==f||fa.current||ao?("function"==typeof d&&(mo(t,n,d,r),f=t.memoizedState),(d=ao||yo(t,n,s,r,u,f,l))?(c||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,f,l),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,f,l)),"function"==typeof i.componentDidUpdate&&(t.effectTag|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof i.componentDidUpdate||s===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof i.getSnapshotBeforeUpdate||s===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=f),i.props=r,i.state=f,i.context=l,r=d):("function"!=typeof i.componentDidUpdate||s===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof i.getSnapshotBeforeUpdate||s===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),r=!1);return Ai(e,t,n,r,o,a)}function Ai(e,t,n,r,a,o){Hi(e,t);var i=0!=(64&t.effectTag);if(!r&&!i)return a&&ba(t,n,!1),Ji(e,t,o);r=t.stateNode,Pi.current=t;var s=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&i?(t.child=wo(t,e.child,null,o),t.child=wo(t,null,s,o)):Ei(e,t,s,o),t.memoizedState=r.state,a&&ba(t,n,!0),t.child}function Fi(e){var t=e.stateNode;t.pendingContext?ya(0,t.pendingContext,t.pendingContext!==t.context):t.context&&ya(0,t.context,!1),xo(e,t.containerInfo)}var Ri,Wi,zi,Bi={dehydrated:null,retryTime:0};function Ki(e,t,n){var r,a=t.mode,o=t.pendingProps,i=Io.current,s=!1;if((r=0!=(64&t.effectTag))||(r=0!=(2&i)&&(null===e||null!==e.memoizedState)),r?(s=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(i|=1),la(Io,1&i),null===e){if(void 0!==o.fallback&&wi(t),s){if(s=o.fallback,(o=Yu(null,a,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,o.child=e;null!==e;)e.return=o,e=e.sibling;return(n=Yu(s,a,n,null)).return=t,o.sibling=n,t.memoizedState=Bi,t.child=o,n}return a=o.children,t.memoizedState=null,t.child=To(t,null,a,n)}if(null!==e.memoizedState){if(a=(e=e.child).sibling,s){if(o=o.fallback,(n=Tu(e,e.pendingProps)).return=t,0==(2&t.mode)&&(s=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=s;null!==s;)s.return=n,s=s.sibling;return(a=Tu(a,o)).return=t,n.sibling=a,n.childExpirationTime=0,t.memoizedState=Bi,t.child=n,a}return n=wo(t,e.child,o.children,n),t.memoizedState=null,t.child=n}if(e=e.child,s){if(s=o.fallback,(o=Yu(null,a,0,null)).return=t,o.child=e,null!==e&&(e.return=o),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,o.child=e;null!==e;)e.return=o,e=e.sibling;return(n=Yu(s,a,n,null)).return=t,o.sibling=n,n.effectTag|=2,o.childExpirationTime=0,t.memoizedState=Bi,t.child=o,n}return t.memoizedState=null,t.child=wo(t,e,o.children,n)}function Ui(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),to(e.return,t)}function Vi(e,t,n,r,a,o){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailExpiration:0,tailMode:a,lastEffect:o}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailExpiration=0,i.tailMode=a,i.lastEffect=o)}function Gi(e,t,n){var r=t.pendingProps,a=r.revealOrder,o=r.tail;if(Ei(e,t,r.children,n),0!=(2&(r=Io.current)))r=1&r|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ui(e,n);else if(19===e.tag)Ui(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(la(Io,r),0==(2&t.mode))t.memoizedState=null;else switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===No(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),Vi(t,!1,a,n,o,t.lastEffect);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===No(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}Vi(t,!0,n,null,o,t.lastEffect);break;case"together":Vi(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Ji(e,t,n){null!==e&&(t.dependencies=e.dependencies);var r=t.expirationTime;if(0!==r&&iu(r),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=Tu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Tu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function $i(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function qi(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return ma(t.type)&&pa(),null;case 3:return Co(),ua(fa),ua(ca),(n=t.stateNode).pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||!Si(t)||(t.effectTag|=4),null;case 5:Ho(t),n=Eo(Oo.current);var o=t.type;if(null!==e&&null!=t.stateNode)Wi(e,t,o,r,n),e.ref!==t.ref&&(t.effectTag|=128);else{if(!r){if(null===t.stateNode)throw Error(i(166));return null}if(e=Eo(Yo.current),Si(t)){r=t.stateNode,o=t.type;var s=t.memoizedProps;switch(r[Ln]=t,r[wn]=s,o){case"iframe":case"object":case"embed":Gt("load",r);break;case"video":case"audio":for(e=0;e<qe.length;e++)Gt(qe[e],r);break;case"source":Gt("error",r);break;case"img":case"image":case"link":Gt("error",r),Gt("load",r);break;case"form":Gt("reset",r),Gt("submit",r);break;case"details":Gt("toggle",r);break;case"input":ke(r,s),Gt("invalid",r),un(n,"onChange");break;case"select":r._wrapperState={wasMultiple:!!s.multiple},Gt("invalid",r),un(n,"onChange");break;case"textarea":Ee(r,s),Gt("invalid",r),un(n,"onChange")}for(var u in an(o,s),e=null,s)if(s.hasOwnProperty(u)){var l=s[u];"children"===u?"string"==typeof l?r.textContent!==l&&(e=["children",l]):"number"==typeof l&&r.textContent!==""+l&&(e=["children",""+l]):U.hasOwnProperty(u)&&null!=l&&un(n,u)}switch(o){case"input":be(r),Te(r,s,!0);break;case"textarea":be(r),Ce(r);break;case"select":case"option":break;default:"function"==typeof s.onClick&&(r.onclick=ln)}n=e,t.updateQueue=n,null!==n&&(t.effectTag|=4)}else{switch(u=9===n.nodeType?n:n.ownerDocument,e===sn&&(e=Ie(o)),e===sn?"script"===o?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(o,{is:r.is}):(e=u.createElement(o),"select"===o&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,o),e[Ln]=t,e[wn]=r,Ri(e,t),t.stateNode=e,u=on(o,r),o){case"iframe":case"object":case"embed":Gt("load",e),l=r;break;case"video":case"audio":for(l=0;l<qe.length;l++)Gt(qe[l],e);l=r;break;case"source":Gt("error",e),l=r;break;case"img":case"image":case"link":Gt("error",e),Gt("load",e),l=r;break;case"form":Gt("reset",e),Gt("submit",e),l=r;break;case"details":Gt("toggle",e),l=r;break;case"input":ke(e,r),l=De(e,r),Gt("invalid",e),un(n,"onChange");break;case"option":l=Ye(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},l=a({},r,{value:void 0}),Gt("invalid",e),un(n,"onChange");break;case"textarea":Ee(e,r),l=Oe(e,r),Gt("invalid",e),un(n,"onChange");break;default:l=r}an(o,l);var d=l;for(s in d)if(d.hasOwnProperty(s)){var c=d[s];"style"===s?nn(e,c):"dangerouslySetInnerHTML"===s?null!=(c=c?c.__html:void 0)&&Fe(e,c):"children"===s?"string"==typeof c?("textarea"!==o||""!==c)&&Re(e,c):"number"==typeof c&&Re(e,""+c):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(U.hasOwnProperty(s)?null!=c&&un(n,s):null!=c&&ye(e,s,c,u))}switch(o){case"input":be(e),Te(e,r,!1);break;case"textarea":be(e),Ce(e);break;case"option":null!=r.value&&e.setAttribute("value",""+ve(r.value));break;case"select":e.multiple=!!r.multiple,null!=(n=r.value)?Pe(e,!!r.multiple,n,!1):null!=r.defaultValue&&Pe(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof l.onClick&&(e.onclick=ln)}yn(o,r)&&(t.effectTag|=4)}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)zi(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));n=Eo(Oo.current),Eo(Yo.current),Si(t)?(n=t.stateNode,r=t.memoizedProps,n[Ln]=t,n.nodeValue!==r&&(t.effectTag|=4)):((n=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Ln]=t,t.stateNode=n)}return null;case 13:return ua(Io),r=t.memoizedState,0!=(64&t.effectTag)?(t.expirationTime=n,t):(n=null!==r,r=!1,null===e?void 0!==t.memoizedProps.fallback&&Si(t):(r=null!==(o=e.memoizedState),n||null===o||null!==(o=e.child.sibling)&&(null!==(s=t.firstEffect)?(t.firstEffect=o,o.nextEffect=s):(t.firstEffect=t.lastEffect=o,o.nextEffect=null),o.effectTag=8)),n&&!r&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Io.current)?Ss===bs&&(Ss=Ms):(Ss!==bs&&Ss!==Ms||(Ss=Ds),0!==xs&&null!==Ls&&(Cu(Ls,Ts),ju(Ls,xs)))),(n||r)&&(t.effectTag|=4),null);case 4:return Co(),null;case 10:return eo(t),null;case 17:return ma(t.type)&&pa(),null;case 19:if(ua(Io),null===(r=t.memoizedState))return null;if(o=0!=(64&t.effectTag),null===(s=r.rendering)){if(o)$i(r,!1);else if(Ss!==bs||null!==e&&0!=(64&e.effectTag))for(s=t.child;null!==s;){if(null!==(e=No(s))){for(t.effectTag|=64,$i(r,!1),null!==(o=e.updateQueue)&&(t.updateQueue=o,t.effectTag|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=t.child;null!==r;)s=n,(o=r).effectTag&=2,o.nextEffect=null,o.firstEffect=null,o.lastEffect=null,null===(e=o.alternate)?(o.childExpirationTime=0,o.expirationTime=s,o.child=null,o.memoizedProps=null,o.memoizedState=null,o.updateQueue=null,o.dependencies=null):(o.childExpirationTime=e.childExpirationTime,o.expirationTime=e.expirationTime,o.child=e.child,o.memoizedProps=e.memoizedProps,o.memoizedState=e.memoizedState,o.updateQueue=e.updateQueue,s=e.dependencies,o.dependencies=null===s?null:{expirationTime:s.expirationTime,firstContext:s.firstContext,responders:s.responders}),r=r.sibling;return la(Io,1&Io.current|2),t.child}s=s.sibling}}else{if(!o)if(null!==(e=No(s))){if(t.effectTag|=64,o=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.effectTag|=4),$i(r,!0),null===r.tail&&"hidden"===r.tailMode&&!s.alternate)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Fa()-r.renderingStartTime>r.tailExpiration&&1<n&&(t.effectTag|=64,o=!0,$i(r,!1),t.expirationTime=t.childExpirationTime=n-1);r.isBackwards?(s.sibling=t.child,t.child=s):(null!==(n=r.last)?n.sibling=s:t.child=s,r.last=s)}return null!==r.tail?(0===r.tailExpiration&&(r.tailExpiration=Fa()+500),n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Fa(),n.sibling=null,t=Io.current,la(Io,o?1&t|2:1&t),n):null}throw Error(i(156,t.tag))}function Qi(e){switch(e.tag){case 1:ma(e.type)&&pa();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(Co(),ua(fa),ua(ca),0!=(64&(t=e.effectTag)))throw Error(i(285));return e.effectTag=-4097&t|64,e;case 5:return Ho(e),null;case 13:return ua(Io),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return ua(Io),null;case 4:return Co(),null;case 10:return eo(e),null;default:return null}}function Zi(e,t){return{value:e,source:t,stack:A(t)}}Ri=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Wi=function(e,t,n,r,o){var i=e.memoizedProps;if(i!==r){var s,u,l=t.stateNode;switch(Eo(Yo.current),e=null,n){case"input":i=De(l,i),r=De(l,r),e=[];break;case"option":i=Ye(l,i),r=Ye(l,r),e=[];break;case"select":i=a({},i,{value:void 0}),r=a({},r,{value:void 0}),e=[];break;case"textarea":i=Oe(l,i),r=Oe(l,r),e=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(l.onclick=ln)}for(s in an(n,r),n=null,i)if(!r.hasOwnProperty(s)&&i.hasOwnProperty(s)&&null!=i[s])if("style"===s)for(u in l=i[s])l.hasOwnProperty(u)&&(n||(n={}),n[u]="");else"dangerouslySetInnerHTML"!==s&&"children"!==s&&"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(U.hasOwnProperty(s)?e||(e=[]):(e=e||[]).push(s,null));for(s in r){var d=r[s];if(l=null!=i?i[s]:void 0,r.hasOwnProperty(s)&&d!==l&&(null!=d||null!=l))if("style"===s)if(l){for(u in l)!l.hasOwnProperty(u)||d&&d.hasOwnProperty(u)||(n||(n={}),n[u]="");for(u in d)d.hasOwnProperty(u)&&l[u]!==d[u]&&(n||(n={}),n[u]=d[u])}else n||(e||(e=[]),e.push(s,n)),n=d;else"dangerouslySetInnerHTML"===s?(d=d?d.__html:void 0,l=l?l.__html:void 0,null!=d&&l!==d&&(e=e||[]).push(s,d)):"children"===s?l===d||"string"!=typeof d&&"number"!=typeof d||(e=e||[]).push(s,""+d):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&(U.hasOwnProperty(s)?(null!=d&&un(o,s),e||l===d||(e=[])):(e=e||[]).push(s,d))}n&&(e=e||[]).push("style",n),o=e,(t.updateQueue=o)&&(t.effectTag|=4)}},zi=function(e,t,n,r){n!==r&&(t.effectTag|=4)};var Xi="function"==typeof WeakSet?WeakSet:Set;function es(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=A(n)),null!==n&&N(n.type),t=t.value,null!==e&&1===e.tag&&N(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function ts(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){vu(e,t)}else t.current=null}function ns(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Ja(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:case 5:case 6:case 4:case 17:return}throw Error(i(163))}function rs(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.destroy;n.destroy=void 0,void 0!==r&&r()}n=n.next}while(n!==t)}}function as(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function os(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:return void as(3,n);case 1:if(e=n.stateNode,4&n.effectTag)if(null===t)e.componentDidMount();else{var r=n.elementType===n.type?t.memoizedProps:Ja(n.type,t.memoizedProps);e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate)}return void(null!==(t=n.updateQueue)&&fo(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}fo(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.effectTag&&yn(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&It(n)))));case 19:case 17:case 20:case 21:return}throw Error(i(163))}function is(e,t,n){switch("function"==typeof Du&&Du(t),t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e.next;za(97<n?97:n,(function(){var e=r;do{var n=e.destroy;if(void 0!==n){var a=t;try{n()}catch(e){vu(a,e)}}e=e.next}while(e!==r)}))}break;case 1:ts(t),"function"==typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){vu(e,t)}}(t,n);break;case 5:ts(t);break;case 4:ds(e,t,n)}}function ss(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,e.stateNode=null,null!==t&&ss(t)}function us(e){return 5===e.tag||3===e.tag||4===e.tag}function ls(e){e:{for(var t=e.return;null!==t;){if(us(t)){var n=t;break e}t=t.return}throw Error(i(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(i(161))}16&n.effectTag&&(Re(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||us(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}r?function e(t,n,r){var a=t.tag,o=5===a||6===a;if(o)t=o?t.stateNode:t.stateNode.instance,n?8===r.nodeType?r.parentNode.insertBefore(t,n):r.insertBefore(t,n):(8===r.nodeType?(n=r.parentNode).insertBefore(t,r):(n=r).appendChild(t),null!==(r=r._reactRootContainer)&&void 0!==r||null!==n.onclick||(n.onclick=ln));else if(4!==a&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t):function e(t,n,r){var a=t.tag,o=5===a||6===a;if(o)t=o?t.stateNode:t.stateNode.instance,n?r.insertBefore(t,n):r.appendChild(t);else if(4!==a&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t)}function ds(e,t,n){for(var r,a,o=t,s=!1;;){if(!s){s=o.return;e:for(;;){if(null===s)throw Error(i(160));switch(r=s.stateNode,s.tag){case 5:a=!1;break e;case 3:case 4:r=r.containerInfo,a=!0;break e}s=s.return}s=!0}if(5===o.tag||6===o.tag){e:for(var u=e,l=o,d=n,c=l;;)if(is(u,c,d),null!==c.child&&4!==c.tag)c.child.return=c,c=c.child;else{if(c===l)break e;for(;null===c.sibling;){if(null===c.return||c.return===l)break e;c=c.return}c.sibling.return=c.return,c=c.sibling}a?(u=r,l=o.stateNode,8===u.nodeType?u.parentNode.removeChild(l):u.removeChild(l)):r.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){r=o.stateNode.containerInfo,a=!0,o.child.return=o,o=o.child;continue}}else if(is(e,o,n),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(s=!1)}o.sibling.return=o.return,o=o.sibling}}function cs(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:return void rs(3,t);case 1:return;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,a=null!==e?e.memoizedProps:r;e=t.type;var o=t.updateQueue;if(t.updateQueue=null,null!==o){for(n[wn]=r,"input"===e&&"radio"===r.type&&null!=r.name&&Le(n,r),on(e,a),t=on(e,r),a=0;a<o.length;a+=2){var s=o[a],u=o[a+1];"style"===s?nn(n,u):"dangerouslySetInnerHTML"===s?Fe(n,u):"children"===s?Re(n,u):ye(n,s,u,t)}switch(e){case"input":we(n,r);break;case"textarea":xe(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?Pe(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?Pe(n,!!r.multiple,r.defaultValue,!0):Pe(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(i(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((t=t.stateNode).hydrate&&(t.hydrate=!1,It(t.containerInfo)));case 12:return;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,js=Fa()),null!==n)e:for(e=n;;){if(5===e.tag)o=e.stateNode,r?"function"==typeof(o=o.style).setProperty?o.setProperty("display","none","important"):o.display="none":(o=e.stateNode,a=null!=(a=e.memoizedProps.style)&&a.hasOwnProperty("display")?a.display:null,o.style.display=tn("display",a));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(o=e.child.sibling).return=e,e=o;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}return void fs(t);case 19:return void fs(t);case 17:return}throw Error(i(163))}function fs(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Xi),t.forEach((function(t){var r=bu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var hs="function"==typeof WeakMap?WeakMap:Map;function _s(e,t,n){(n=so(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Is||(Is=!0,Ns=r),es(e,t)},n}function ms(e,t,n){(n=so(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return es(e,t),r(a)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===As?As=new Set([this]):As.add(this),es(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var ps,ys=Math.ceil,vs=v.ReactCurrentDispatcher,gs=v.ReactCurrentOwner,bs=0,Ms=3,Ds=4,ks=0,Ls=null,ws=null,Ts=0,Ss=bs,Ys=null,Ps=1073741823,Os=1073741823,Es=null,xs=0,Cs=!1,js=0,Hs=null,Is=!1,Ns=null,As=null,Fs=!1,Rs=null,Ws=90,zs=null,Bs=0,Ks=null,Us=0;function Vs(){return 0!=(48&ks)?1073741821-(Fa()/10|0):0!==Us?Us:Us=1073741821-(Fa()/10|0)}function Gs(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=Ra();if(0==(4&t))return 99===r?1073741823:1073741822;if(0!=(16&ks))return Ts;if(null!==n)e=Ga(e,0|n.timeoutMs||5e3,250);else switch(r){case 99:e=1073741823;break;case 98:e=Ga(e,150,100);break;case 97:case 96:e=Ga(e,5e3,250);break;case 95:e=2;break;default:throw Error(i(326))}return null!==Ls&&e===Ts&&--e,e}function Js(e,t){if(50<Bs)throw Bs=0,Ks=null,Error(i(185));if(null!==(e=$s(e,t))){var n=Ra();1073741823===t?0!=(8&ks)&&0==(48&ks)?Xs(e):(Qs(e),0===ks&&Ua()):Qs(e),0==(4&ks)||98!==n&&99!==n||(null===zs?zs=new Map([[e,t]]):(void 0===(n=zs.get(e))||n>t)&&zs.set(e,t))}}function $s(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,a=null;if(null===r&&3===e.tag)a=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){a=r.stateNode;break}r=r.return}return null!==a&&(Ls===a&&(iu(t),Ss===Ds&&Cu(a,Ts)),ju(a,t)),a}function qs(e){var t=e.lastExpiredTime;if(0!==t)return t;if(!xu(e,t=e.firstPendingTime))return t;var n=e.lastPingedTime;return 2>=(e=n>(e=e.nextKnownPendingLevel)?n:e)&&t!==e?0:e}function Qs(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=Ka(Xs.bind(null,e));else{var t=qs(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var r=Vs();if(1073741823===t?r=99:1===t||2===t?r=95:r=0>=(r=10*(1073741821-t)-10*(1073741821-r))?99:250>=r?98:5250>=r?97:95,null!==n){var a=e.callbackPriority;if(e.callbackExpirationTime===t&&a>=r)return;n!==xa&&ka(n)}e.callbackExpirationTime=t,e.callbackPriority=r,t=1073741823===t?Ka(Xs.bind(null,e)):Ba(r,Zs.bind(null,e),{timeout:10*(1073741821-t)-Fa()}),e.callbackNode=t}}}function Zs(e,t){if(Us=0,t)return Hu(e,t=Vs()),Qs(e),null;var n=qs(e);if(0!==n){if(t=e.callbackNode,0!=(48&ks))throw Error(i(327));if(mu(),e===Ls&&n===Ts||nu(e,n),null!==ws){var r=ks;ks|=16;for(var a=au();;)try{uu();break}catch(t){ru(e,t)}if(Xa(),ks=r,vs.current=a,1===Ss)throw t=Ys,nu(e,n),Cu(e,n),Qs(e),t;if(null===ws)switch(a=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,r=Ss,Ls=null,r){case bs:case 1:throw Error(i(345));case 2:Hu(e,2<n?2:n);break;case Ms:if(Cu(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=cu(a)),1073741823===Ps&&10<(a=js+500-Fa())){if(Cs){var o=e.lastPingedTime;if(0===o||o>=n){e.lastPingedTime=n,nu(e,n);break}}if(0!==(o=qs(e))&&o!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}e.timeoutHandle=gn(fu.bind(null,e),a);break}fu(e);break;case Ds:if(Cu(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=cu(a)),Cs&&(0===(a=e.lastPingedTime)||a>=n)){e.lastPingedTime=n,nu(e,n);break}if(0!==(a=qs(e))&&a!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}if(1073741823!==Os?r=10*(1073741821-Os)-Fa():1073741823===Ps?r=0:(r=10*(1073741821-Ps)-5e3,0>(r=(a=Fa())-r)&&(r=0),(n=10*(1073741821-n)-a)<(r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*ys(r/1960))-r)&&(r=n)),10<r){e.timeoutHandle=gn(fu.bind(null,e),r);break}fu(e);break;case 5:if(1073741823!==Ps&&null!==Es){o=Ps;var s=Es;if(0>=(r=0|s.busyMinDurationMs)?r=0:(a=0|s.busyDelayMs,r=(o=Fa()-(10*(1073741821-o)-(0|s.timeoutMs||5e3)))<=a?0:a+r-o),10<r){Cu(e,n),e.timeoutHandle=gn(fu.bind(null,e),r);break}}fu(e);break;default:throw Error(i(329))}if(Qs(e),e.callbackNode===t)return Zs.bind(null,e)}}return null}function Xs(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,0!=(48&ks))throw Error(i(327));if(mu(),e===Ls&&t===Ts||nu(e,t),null!==ws){var n=ks;ks|=16;for(var r=au();;)try{su();break}catch(t){ru(e,t)}if(Xa(),ks=n,vs.current=r,1===Ss)throw n=Ys,nu(e,t),Cu(e,t),Qs(e),n;if(null!==ws)throw Error(i(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,Ls=null,fu(e),Qs(e)}return null}function eu(e,t){var n=ks;ks|=1;try{return e(t)}finally{0===(ks=n)&&Ua()}}function tu(e,t){var n=ks;ks&=-2,ks|=8;try{return e(t)}finally{0===(ks=n)&&Ua()}}function nu(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,bn(n)),null!==ws)for(n=ws.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&pa();break;case 3:Co(),ua(fa),ua(ca);break;case 5:Ho(r);break;case 4:Co();break;case 13:case 19:ua(Io);break;case 10:eo(r)}n=n.return}Ls=e,ws=Tu(e.current,null),Ts=t,Ss=bs,Ys=null,Os=Ps=1073741823,Es=null,xs=0,Cs=!1}function ru(e,t){for(;;){try{if(Xa(),Fo.current=pi,Uo)for(var n=zo.memoizedState;null!==n;){var r=n.queue;null!==r&&(r.pending=null),n=n.next}if(Wo=0,Ko=Bo=zo=null,Uo=!1,null===ws||null===ws.return)return Ss=1,Ys=t,ws=null;e:{var a=e,o=ws.return,i=ws,s=t;if(t=Ts,i.effectTag|=2048,i.firstEffect=i.lastEffect=null,null!==s&&"object"==typeof s&&"function"==typeof s.then){var u=s;if(0==(2&i.mode)){var l=i.alternate;l?(i.memoizedState=l.memoizedState,i.expirationTime=l.expirationTime):i.memoizedState=null}var d=0!=(1&Io.current),c=o;do{var f;if(f=13===c.tag){var h=c.memoizedState;if(null!==h)f=null!==h.dehydrated;else{var _=c.memoizedProps;f=void 0!==_.fallback&&(!0!==_.unstable_avoidThisFallback||!d)}}if(f){var m=c.updateQueue;if(null===m){var p=new Set;p.add(u),c.updateQueue=p}else m.add(u);if(0==(2&c.mode)){if(c.effectTag|=64,i.effectTag&=-2981,1===i.tag)if(null===i.alternate)i.tag=17;else{var y=so(1073741823,null);y.tag=2,uo(i,y)}i.expirationTime=1073741823;break e}s=void 0,i=t;var v=a.pingCache;if(null===v?(v=a.pingCache=new hs,s=new Set,v.set(u,s)):void 0===(s=v.get(u))&&(s=new Set,v.set(u,s)),!s.has(i)){s.add(i);var g=gu.bind(null,a,u,i);u.then(g,g)}c.effectTag|=4096,c.expirationTime=t;break e}c=c.return}while(null!==c);s=Error((N(i.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+A(i))}5!==Ss&&(Ss=2),s=Zi(s,i),c=o;do{switch(c.tag){case 3:u=s,c.effectTag|=4096,c.expirationTime=t,lo(c,_s(c,u,t));break e;case 1:u=s;var b=c.type,M=c.stateNode;if(0==(64&c.effectTag)&&("function"==typeof b.getDerivedStateFromError||null!==M&&"function"==typeof M.componentDidCatch&&(null===As||!As.has(M)))){c.effectTag|=4096,c.expirationTime=t,lo(c,ms(c,u,t));break e}}c=c.return}while(null!==c)}ws=du(ws)}catch(e){t=e;continue}break}}function au(){var e=vs.current;return vs.current=pi,null===e?pi:e}function ou(e,t){e<Ps&&2<e&&(Ps=e),null!==t&&e<Os&&2<e&&(Os=e,Es=t)}function iu(e){e>xs&&(xs=e)}function su(){for(;null!==ws;)ws=lu(ws)}function uu(){for(;null!==ws&&!Ca();)ws=lu(ws)}function lu(e){var t=ps(e.alternate,e,Ts);return e.memoizedProps=e.pendingProps,null===t&&(t=du(e)),gs.current=null,t}function du(e){ws=e;do{var t=ws.alternate;if(e=ws.return,0==(2048&ws.effectTag)){if(t=qi(t,ws,Ts),1===Ts||1!==ws.childExpirationTime){for(var n=0,r=ws.child;null!==r;){var a=r.expirationTime,o=r.childExpirationTime;a>n&&(n=a),o>n&&(n=o),r=r.sibling}ws.childExpirationTime=n}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=ws.firstEffect),null!==ws.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=ws.firstEffect),e.lastEffect=ws.lastEffect),1<ws.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=ws:e.firstEffect=ws,e.lastEffect=ws))}else{if(null!==(t=Qi(ws)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=ws.sibling))return t;ws=e}while(null!==ws);return Ss===bs&&(Ss=5),null}function cu(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function fu(e){var t=Ra();return za(99,hu.bind(null,e,t)),null}function hu(e,t){do{mu()}while(null!==Rs);if(0!=(48&ks))throw Error(i(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(i(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var a=cu(n);if(e.firstPendingTime=a,r<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:r<=e.firstSuspendedTime&&(e.firstSuspendedTime=r-1),r<=e.lastPingedTime&&(e.lastPingedTime=0),r<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===Ls&&(ws=Ls=null,Ts=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,a=n.firstEffect):a=n:a=n.firstEffect,null!==a){var o=ks;ks|=32,gs.current=null,mn=Vt;var s=hn();if(_n(s)){if("selectionStart"in s)var u={start:s.selectionStart,end:s.selectionEnd};else e:{var l=(u=(u=s.ownerDocument)&&u.defaultView||window).getSelection&&u.getSelection();if(l&&0!==l.rangeCount){u=l.anchorNode;var d=l.anchorOffset,c=l.focusNode;l=l.focusOffset;try{u.nodeType,c.nodeType}catch(e){u=null;break e}var f=0,h=-1,_=-1,m=0,p=0,y=s,v=null;t:for(;;){for(var g;y!==u||0!==d&&3!==y.nodeType||(h=f+d),y!==c||0!==l&&3!==y.nodeType||(_=f+l),3===y.nodeType&&(f+=y.nodeValue.length),null!==(g=y.firstChild);)v=y,y=g;for(;;){if(y===s)break t;if(v===u&&++m===d&&(h=f),v===c&&++p===l&&(_=f),null!==(g=y.nextSibling))break;v=(y=v).parentNode}y=g}u=-1===h||-1===_?null:{start:h,end:_}}else u=null}u=u||{start:0,end:0}}else u=null;pn={activeElementDetached:null,focusedElem:s,selectionRange:u},Vt=!1,Hs=a;do{try{_u()}catch(e){if(null===Hs)throw Error(i(330));vu(Hs,e),Hs=Hs.nextEffect}}while(null!==Hs);Hs=a;do{try{for(s=e,u=t;null!==Hs;){var b=Hs.effectTag;if(16&b&&Re(Hs.stateNode,""),128&b){var M=Hs.alternate;if(null!==M){var D=M.ref;null!==D&&("function"==typeof D?D(null):D.current=null)}}switch(1038&b){case 2:ls(Hs),Hs.effectTag&=-3;break;case 6:ls(Hs),Hs.effectTag&=-3,cs(Hs.alternate,Hs);break;case 1024:Hs.effectTag&=-1025;break;case 1028:Hs.effectTag&=-1025,cs(Hs.alternate,Hs);break;case 4:cs(Hs.alternate,Hs);break;case 8:ds(s,d=Hs,u),ss(d)}Hs=Hs.nextEffect}}catch(e){if(null===Hs)throw Error(i(330));vu(Hs,e),Hs=Hs.nextEffect}}while(null!==Hs);if(D=pn,M=hn(),b=D.focusedElem,u=D.selectionRange,M!==b&&b&&b.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(b.ownerDocument.documentElement,b)){null!==u&&_n(b)&&(M=u.start,void 0===(D=u.end)&&(D=M),"selectionStart"in b?(b.selectionStart=M,b.selectionEnd=Math.min(D,b.value.length)):(D=(M=b.ownerDocument||document)&&M.defaultView||window).getSelection&&(D=D.getSelection(),d=b.textContent.length,s=Math.min(u.start,d),u=void 0===u.end?s:Math.min(u.end,d),!D.extend&&s>u&&(d=u,u=s,s=d),d=fn(b,s),c=fn(b,u),d&&c&&(1!==D.rangeCount||D.anchorNode!==d.node||D.anchorOffset!==d.offset||D.focusNode!==c.node||D.focusOffset!==c.offset)&&((M=M.createRange()).setStart(d.node,d.offset),D.removeAllRanges(),s>u?(D.addRange(M),D.extend(c.node,c.offset)):(M.setEnd(c.node,c.offset),D.addRange(M))))),M=[];for(D=b;D=D.parentNode;)1===D.nodeType&&M.push({element:D,left:D.scrollLeft,top:D.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<M.length;b++)(D=M[b]).element.scrollLeft=D.left,D.element.scrollTop=D.top}Vt=!!mn,pn=mn=null,e.current=n,Hs=a;do{try{for(b=e;null!==Hs;){var k=Hs.effectTag;if(36&k&&os(b,Hs.alternate,Hs),128&k){M=void 0;var L=Hs.ref;if(null!==L){var w=Hs.stateNode;switch(Hs.tag){case 5:M=w;break;default:M=w}"function"==typeof L?L(M):L.current=M}}Hs=Hs.nextEffect}}catch(e){if(null===Hs)throw Error(i(330));vu(Hs,e),Hs=Hs.nextEffect}}while(null!==Hs);Hs=null,ja(),ks=o}else e.current=n;if(Fs)Fs=!1,Rs=e,Ws=t;else for(Hs=a;null!==Hs;)t=Hs.nextEffect,Hs.nextEffect=null,Hs=t;if(0===(t=e.firstPendingTime)&&(As=null),1073741823===t?e===Ks?Bs++:(Bs=0,Ks=e):Bs=0,"function"==typeof Mu&&Mu(n.stateNode,r),Qs(e),Is)throw Is=!1,e=Ns,Ns=null,e;return 0!=(8&ks)||Ua(),null}function _u(){for(;null!==Hs;){var e=Hs.effectTag;0!=(256&e)&&ns(Hs.alternate,Hs),0==(512&e)||Fs||(Fs=!0,Ba(97,(function(){return mu(),null}))),Hs=Hs.nextEffect}}function mu(){if(90!==Ws){var e=97<Ws?97:Ws;return Ws=90,za(e,pu)}}function pu(){if(null===Rs)return!1;var e=Rs;if(Rs=null,0!=(48&ks))throw Error(i(331));var t=ks;for(ks|=32,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:case 22:rs(5,n),as(5,n)}}catch(t){if(null===e)throw Error(i(330));vu(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return ks=t,Ua(),!0}function yu(e,t,n){uo(e,t=_s(e,t=Zi(n,t),1073741823)),null!==(e=$s(e,1073741823))&&Qs(e)}function vu(e,t){if(3===e.tag)yu(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){yu(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===As||!As.has(r))){uo(n,e=ms(n,e=Zi(t,e),1073741823)),null!==(n=$s(n,1073741823))&&Qs(n);break}}n=n.return}}function gu(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),Ls===e&&Ts===n?Ss===Ds||Ss===Ms&&1073741823===Ps&&Fa()-js<500?nu(e,Ts):Cs=!0:xu(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,Qs(e)))}function bu(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(t=Gs(t=Vs(),e,null)),null!==(e=$s(e,t))&&Qs(e)}ps=function(e,t,n){var r=t.expirationTime;if(null!==e){var a=t.pendingProps;if(e.memoizedProps!==a||fa.current)Oi=!0;else{if(r<n){switch(Oi=!1,t.tag){case 3:Fi(t),Yi();break;case 5:if(jo(t),4&t.mode&&1!==n&&a.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:ma(t.type)&&ga(t);break;case 4:xo(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value,a=t.type._context,la($a,a._currentValue),a._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?Ki(e,t,n):(la(Io,1&Io.current),null!==(t=Ji(e,t,n))?t.sibling:null);la(Io,1&Io.current);break;case 19:if(r=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(r)return Gi(e,t,n);t.effectTag|=64}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null),la(Io,Io.current),!r)return null}return Ji(e,t,n)}Oi=!1}}else Oi=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,a=_a(t,ca.current),no(t,n),a=Jo(null,t,r,e,a,n),t.effectTag|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,ma(r)){var o=!0;ga(t)}else o=!1;t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,oo(t);var s=r.getDerivedStateFromProps;"function"==typeof s&&mo(t,r,s,e),a.updater=po,t.stateNode=a,a._reactInternalFiber=t,bo(t,r,e,n),t=Ai(null,t,r,!0,o,n)}else t.tag=0,Ei(null,t,a,n),t=t.child;return t;case 16:e:{if(a=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(a),1!==a._status)throw a._result;switch(a=a._result,t.type=a,o=t.tag=function(e){if("function"==typeof e)return wu(e)?1:0;if(null!=e){if((e=e.$$typeof)===P)return 11;if(e===x)return 14}return 2}(a),e=Ja(a,e),o){case 0:t=Ii(null,t,a,e,n);break e;case 1:t=Ni(null,t,a,e,n);break e;case 11:t=xi(null,t,a,e,n);break e;case 14:t=Ci(null,t,a,Ja(a.type,e),r,n);break e}throw Error(i(306,a,""))}return t;case 0:return r=t.type,a=t.pendingProps,Ii(e,t,r,a=t.elementType===r?a:Ja(r,a),n);case 1:return r=t.type,a=t.pendingProps,Ni(e,t,r,a=t.elementType===r?a:Ja(r,a),n);case 3:if(Fi(t),r=t.updateQueue,null===e||null===r)throw Error(i(282));if(r=t.pendingProps,a=null!==(a=t.memoizedState)?a.element:null,io(e,t),co(t,r,null,n),(r=t.memoizedState.element)===a)Yi(),t=Ji(e,t,n);else{if((a=t.stateNode.hydrate)&&(Mi=Mn(t.stateNode.containerInfo.firstChild),bi=t,a=Di=!0),a)for(n=To(t,null,r,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else Ei(e,t,r,n),Yi();t=t.child}return t;case 5:return jo(t),null===e&&wi(t),r=t.type,a=t.pendingProps,o=null!==e?e.memoizedProps:null,s=a.children,vn(r,a)?s=null:null!==o&&vn(r,o)&&(t.effectTag|=16),Hi(e,t),4&t.mode&&1!==n&&a.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(Ei(e,t,s,n),t=t.child),t;case 6:return null===e&&wi(t),null;case 13:return Ki(e,t,n);case 4:return xo(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=wo(t,null,r,n):Ei(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,xi(e,t,r,a=t.elementType===r?a:Ja(r,a),n);case 7:return Ei(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ei(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,a=t.pendingProps,s=t.memoizedProps,o=a.value;var u=t.type._context;if(la($a,u._currentValue),u._currentValue=o,null!==s)if(u=s.value,0===(o=Nr(u,o)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,o):1073741823))){if(s.children===a.children&&!fa.current){t=Ji(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var l=u.dependencies;if(null!==l){s=u.child;for(var d=l.firstContext;null!==d;){if(d.context===r&&0!=(d.observedBits&o)){1===u.tag&&((d=so(n,null)).tag=2,uo(u,d)),u.expirationTime<n&&(u.expirationTime=n),null!==(d=u.alternate)&&d.expirationTime<n&&(d.expirationTime=n),to(u.return,n),l.expirationTime<n&&(l.expirationTime=n);break}d=d.next}}else s=10===u.tag&&u.type===t.type?null:u.child;if(null!==s)s.return=u;else for(s=u;null!==s;){if(s===t){s=null;break}if(null!==(u=s.sibling)){u.return=s.return,s=u;break}s=s.return}u=s}Ei(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=(o=t.pendingProps).children,no(t,n),r=r(a=ro(a,o.unstable_observedBits)),t.effectTag|=1,Ei(e,t,r,n),t.child;case 14:return o=Ja(a=t.type,t.pendingProps),Ci(e,t,a,o=Ja(a.type,o),r,n);case 15:return ji(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:Ja(r,a),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,ma(r)?(e=!0,ga(t)):e=!1,no(t,n),vo(t,r,a),bo(t,r,a,n),Ai(null,t,r,!0,e,n);case 19:return Gi(e,t,n)}throw Error(i(156,t.tag))};var Mu=null,Du=null;function ku(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Lu(e,t,n,r){return new ku(e,t,n,r)}function wu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Tu(e,t){var n=e.alternate;return null===n?((n=Lu(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Su(e,t,n,r,a,o){var s=2;if(r=e,"function"==typeof e)wu(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case k:return Yu(n.children,a,o,t);case Y:s=8,a|=7;break;case L:s=8,a|=1;break;case w:return(e=Lu(12,n,t,8|a)).elementType=w,e.type=w,e.expirationTime=o,e;case O:return(e=Lu(13,n,t,a)).type=O,e.elementType=O,e.expirationTime=o,e;case E:return(e=Lu(19,n,t,a)).elementType=E,e.expirationTime=o,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case T:s=10;break e;case S:s=9;break e;case P:s=11;break e;case x:s=14;break e;case C:s=16,r=null;break e;case j:s=22;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Lu(s,n,t,a)).elementType=e,t.type=r,t.expirationTime=o,t}function Yu(e,t,n,r){return(e=Lu(7,e,r,t)).expirationTime=n,e}function Pu(e,t,n){return(e=Lu(6,e,null,t)).expirationTime=n,e}function Ou(e,t,n){return(t=Lu(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Eu(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function xu(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function Cu(e,t){var n=e.firstSuspendedTime,r=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(r>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function ju(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function Hu(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function Iu(e,t,n,r){var a=t.current,o=Vs(),s=ho.suspense;o=Gs(o,a,s);e:if(n){t:{if(Xe(n=n._reactInternalFiber)!==n||1!==n.tag)throw Error(i(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(ma(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(i(171))}if(1===n.tag){var l=n.type;if(ma(l)){n=va(n,l,u);break e}}n=u}else n=da;return null===t.context?t.context=n:t.pendingContext=n,(t=so(o,s)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),uo(a,t),Js(a,o),o}function Nu(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Au(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function Fu(e,t){Au(e,t),(e=e.alternate)&&Au(e,t)}function Ru(e,t,n){var r=new Eu(e,t,n=null!=n&&!0===n.hydrate),a=Lu(3,null,null,2===t?7:1===t?3:0);r.current=a,a.stateNode=r,oo(a),e[Tn]=r.current,n&&0!==t&&function(e,t){var n=Ze(t);Tt.forEach((function(e){_t(e,t,n)})),St.forEach((function(e){_t(e,t,n)}))}(0,9===e.nodeType?e:e.ownerDocument),this._internalRoot=r}function Wu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function zu(e,t,n,r,a){var o=n._reactRootContainer;if(o){var i=o._internalRoot;if("function"==typeof a){var s=a;a=function(){var e=Nu(i);s.call(e)}}Iu(t,i,e,a)}else{if(o=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Ru(e,0,t?{hydrate:!0}:void 0)}(n,r),i=o._internalRoot,"function"==typeof a){var u=a;a=function(){var e=Nu(i);u.call(e)}}tu((function(){Iu(t,i,e,a)}))}return Nu(i)}function Bu(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:D,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Ku(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Wu(t))throw Error(i(200));return Bu(e,t,null,n)}Ru.prototype.render=function(e){Iu(e,this._internalRoot,null,null)},Ru.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Iu(null,e,null,(function(){t[Tn]=null}))},mt=function(e){if(13===e.tag){var t=Ga(Vs(),150,100);Js(e,t),Fu(e,t)}},pt=function(e){13===e.tag&&(Js(e,3),Fu(e,3))},yt=function(e){if(13===e.tag){var t=Vs();Js(e,t=Gs(t,e,null)),Fu(e,t)}},$=function(e,t,n){switch(t){case"input":if(we(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=On(r);if(!a)throw Error(i(90));Me(r),we(r,a)}}}break;case"textarea":xe(e,n);break;case"select":null!=(t=n.value)&&Pe(e,!!n.multiple,t,!1)}},te=eu,ne=function(e,t,n,r,a){var o=ks;ks|=4;try{return za(98,e.bind(null,t,n,r,a))}finally{0===(ks=o)&&Ua()}},re=function(){0==(49&ks)&&(function(){if(null!==zs){var e=zs;zs=null,e.forEach((function(e,t){Hu(t,e),Qs(t)})),Ua()}}(),mu())},ae=function(e,t){var n=ks;ks|=2;try{return e(t)}finally{0===(ks=n)&&Ua()}};var Uu,Vu,Gu={Events:[Yn,Pn,On,G,K,Nn,function(e){at(e,In)},X,ee,Qt,st,mu,{current:!1}]};Vu=(Uu={findFiberByHostInstance:Sn,bundleType:0,version:"16.13.0",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Mu=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},Du=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(a({},Uu,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:v.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=nt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return Vu?Vu(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null})),t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Gu,t.createPortal=Ku,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw Error(i(268,Object.keys(e)))}return e=null===(e=nt(t))?null:e.stateNode},t.flushSync=function(e,t){if(0!=(48&ks))throw Error(i(187));var n=ks;ks|=1;try{return za(99,e.bind(null,t))}finally{ks=n,Ua()}},t.hydrate=function(e,t,n){if(!Wu(t))throw Error(i(200));return zu(null,e,t,!0,n)},t.render=function(e,t,n){if(!Wu(t))throw Error(i(200));return zu(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Wu(e))throw Error(i(40));return!!e._reactRootContainer&&(tu((function(){zu(null,null,e,!1,(function(){e._reactRootContainer=null,e[Tn]=null}))})),!0)},t.unstable_batchedUpdates=eu,t.unstable_createPortal=function(e,t){return Ku(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Wu(n))throw Error(i(200));if(null==e||void 0===e._reactInternalFiber)throw Error(i(38));return zu(e,t,n,!1,r)},t.version="16.13.0"},function(e,t,n){"use strict";e.exports=n(254)},function(e,t,n){"use strict";
/** @license React v0.19.0
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,a,o,i,s;if("undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,l=null,d=function(){if(null!==u)try{var e=t.unstable_now();u(!0,e),u=null}catch(e){throw setTimeout(d,0),e}},c=Date.now();t.unstable_now=function(){return Date.now()-c},r=function(e){null!==u?setTimeout(r,0,e):(u=e,setTimeout(d,0))},a=function(e,t){l=setTimeout(e,t)},o=function(){clearTimeout(l)},i=function(){return!1},s=t.unstable_forceFrameRate=function(){}}else{var f=window.performance,h=window.Date,_=window.setTimeout,m=window.clearTimeout;if("undefined"!=typeof console){var p=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof p&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof f&&"function"==typeof f.now)t.unstable_now=function(){return f.now()};else{var y=h.now();t.unstable_now=function(){return h.now()-y}}var v=!1,g=null,b=-1,M=5,D=0;i=function(){return t.unstable_now()>=D},s=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):M=0<e?Math.floor(1e3/e):5};var k=new MessageChannel,L=k.port2;k.port1.onmessage=function(){if(null!==g){var e=t.unstable_now();D=e+M;try{g(!0,e)?L.postMessage(null):(v=!1,g=null)}catch(e){throw L.postMessage(null),e}}else v=!1},r=function(e){g=e,v||(v=!0,L.postMessage(null))},a=function(e,n){b=_((function(){e(t.unstable_now())}),n)},o=function(){m(b),b=-1}}function w(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,a=e[r];if(!(void 0!==a&&0<Y(a,t)))break e;e[r]=t,e[n]=a,n=r}}function T(e){return void 0===(e=e[0])?null:e}function S(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length;r<a;){var o=2*(r+1)-1,i=e[o],s=o+1,u=e[s];if(void 0!==i&&0>Y(i,n))void 0!==u&&0>Y(u,i)?(e[r]=u,e[s]=n,r=s):(e[r]=i,e[o]=n,r=o);else{if(!(void 0!==u&&0>Y(u,n)))break e;e[r]=u,e[s]=n,r=s}}}return t}return null}function Y(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var P=[],O=[],E=1,x=null,C=3,j=!1,H=!1,I=!1;function N(e){for(var t=T(O);null!==t;){if(null===t.callback)S(O);else{if(!(t.startTime<=e))break;S(O),t.sortIndex=t.expirationTime,w(P,t)}t=T(O)}}function A(e){if(I=!1,N(e),!H)if(null!==T(P))H=!0,r(F);else{var t=T(O);null!==t&&a(A,t.startTime-e)}}function F(e,n){H=!1,I&&(I=!1,o()),j=!0;var r=C;try{for(N(n),x=T(P);null!==x&&(!(x.expirationTime>n)||e&&!i());){var s=x.callback;if(null!==s){x.callback=null,C=x.priorityLevel;var u=s(x.expirationTime<=n);n=t.unstable_now(),"function"==typeof u?x.callback=u:x===T(P)&&S(P),N(n)}else S(P);x=T(P)}if(null!==x)var l=!0;else{var d=T(O);null!==d&&a(A,d.startTime-n),l=!1}return l}finally{x=null,C=r,j=!1}}function R(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var W=s;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){H||j||(H=!0,r(F))},t.unstable_getCurrentPriorityLevel=function(){return C},t.unstable_getFirstCallbackNode=function(){return T(P)},t.unstable_next=function(e){switch(C){case 1:case 2:case 3:var t=3;break;default:t=C}var n=C;C=t;try{return e()}finally{C=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=W,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=C;C=e;try{return t()}finally{C=n}},t.unstable_scheduleCallback=function(e,n,i){var s=t.unstable_now();if("object"==typeof i&&null!==i){var u=i.delay;u="number"==typeof u&&0<u?s+u:s,i="number"==typeof i.timeout?i.timeout:R(e)}else i=R(e),u=s;return e={id:E++,callback:n,priorityLevel:e,startTime:u,expirationTime:i=u+i,sortIndex:-1},u>s?(e.sortIndex=u,w(O,e),null===T(P)&&e===T(O)&&(I?o():I=!0,a(A,u-s))):(e.sortIndex=i,w(P,e),H||j||(H=!0,r(F))),e},t.unstable_shouldYield=function(){var e=t.unstable_now();N(e);var n=T(P);return n!==x&&null!==x&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<x.expirationTime||i()},t.unstable_wrapCallback=function(e){var t=C;return function(){var n=C;C=t;try{return e.apply(this,arguments)}finally{C=n}}}},function(e,t,n){"use strict";var r=n(256);function a(){}function o(){}o.resetWarningCache=a,e.exports=function(){function e(e,t,n,a,o,i){if(i!==r){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:o,resetWarningCache:a};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";
/** @license React v16.13.0
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r="function"==typeof Symbol&&Symbol.for,a=r?Symbol.for("react.element"):60103,o=r?Symbol.for("react.portal"):60106,i=r?Symbol.for("react.fragment"):60107,s=r?Symbol.for("react.strict_mode"):60108,u=r?Symbol.for("react.profiler"):60114,l=r?Symbol.for("react.provider"):60109,d=r?Symbol.for("react.context"):60110,c=r?Symbol.for("react.async_mode"):60111,f=r?Symbol.for("react.concurrent_mode"):60111,h=r?Symbol.for("react.forward_ref"):60112,_=r?Symbol.for("react.suspense"):60113,m=r?Symbol.for("react.suspense_list"):60120,p=r?Symbol.for("react.memo"):60115,y=r?Symbol.for("react.lazy"):60116,v=r?Symbol.for("react.block"):60121,g=r?Symbol.for("react.fundamental"):60117,b=r?Symbol.for("react.responder"):60118,M=r?Symbol.for("react.scope"):60119;function D(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case a:switch(e=e.type){case c:case f:case i:case u:case s:case _:return e;default:switch(e=e&&e.$$typeof){case d:case h:case y:case p:case l:return e;default:return t}}case o:return t}}}function k(e){return D(e)===f}t.AsyncMode=c,t.ConcurrentMode=f,t.ContextConsumer=d,t.ContextProvider=l,t.Element=a,t.ForwardRef=h,t.Fragment=i,t.Lazy=y,t.Memo=p,t.Portal=o,t.Profiler=u,t.StrictMode=s,t.Suspense=_,t.isAsyncMode=function(e){return k(e)||D(e)===c},t.isConcurrentMode=k,t.isContextConsumer=function(e){return D(e)===d},t.isContextProvider=function(e){return D(e)===l},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===a},t.isForwardRef=function(e){return D(e)===h},t.isFragment=function(e){return D(e)===i},t.isLazy=function(e){return D(e)===y},t.isMemo=function(e){return D(e)===p},t.isPortal=function(e){return D(e)===o},t.isProfiler=function(e){return D(e)===u},t.isStrictMode=function(e){return D(e)===s},t.isSuspense=function(e){return D(e)===_},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===f||e===u||e===s||e===_||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===y||e.$$typeof===p||e.$$typeof===l||e.$$typeof===d||e.$$typeof===h||e.$$typeof===g||e.$$typeof===b||e.$$typeof===M||e.$$typeof===v)},t.typeOf=D},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){var r={"./af":64,"./af.js":64,"./ar":65,"./ar-dz":66,"./ar-dz.js":66,"./ar-kw":67,"./ar-kw.js":67,"./ar-ly":68,"./ar-ly.js":68,"./ar-ma":69,"./ar-ma.js":69,"./ar-sa":70,"./ar-sa.js":70,"./ar-tn":71,"./ar-tn.js":71,"./ar.js":65,"./az":72,"./az.js":72,"./be":73,"./be.js":73,"./bg":74,"./bg.js":74,"./bm":75,"./bm.js":75,"./bn":76,"./bn.js":76,"./bo":77,"./bo.js":77,"./br":78,"./br.js":78,"./bs":79,"./bs.js":79,"./ca":80,"./ca.js":80,"./cs":81,"./cs.js":81,"./cv":82,"./cv.js":82,"./cy":83,"./cy.js":83,"./da":84,"./da.js":84,"./de":85,"./de-at":86,"./de-at.js":86,"./de-ch":87,"./de-ch.js":87,"./de.js":85,"./dv":88,"./dv.js":88,"./el":89,"./el.js":89,"./en-SG":90,"./en-SG.js":90,"./en-au":91,"./en-au.js":91,"./en-ca":92,"./en-ca.js":92,"./en-gb":93,"./en-gb.js":93,"./en-ie":94,"./en-ie.js":94,"./en-il":95,"./en-il.js":95,"./en-nz":96,"./en-nz.js":96,"./eo":97,"./eo.js":97,"./es":98,"./es-do":99,"./es-do.js":99,"./es-us":100,"./es-us.js":100,"./es.js":98,"./et":101,"./et.js":101,"./eu":102,"./eu.js":102,"./fa":103,"./fa.js":103,"./fi":104,"./fi.js":104,"./fo":105,"./fo.js":105,"./fr":106,"./fr-ca":107,"./fr-ca.js":107,"./fr-ch":108,"./fr-ch.js":108,"./fr.js":106,"./fy":109,"./fy.js":109,"./ga":110,"./ga.js":110,"./gd":111,"./gd.js":111,"./gl":112,"./gl.js":112,"./gom-latn":113,"./gom-latn.js":113,"./gu":114,"./gu.js":114,"./he":115,"./he.js":115,"./hi":116,"./hi.js":116,"./hr":117,"./hr.js":117,"./hu":118,"./hu.js":118,"./hy-am":119,"./hy-am.js":119,"./id":120,"./id.js":120,"./is":121,"./is.js":121,"./it":122,"./it-ch":123,"./it-ch.js":123,"./it.js":122,"./ja":124,"./ja.js":124,"./jv":125,"./jv.js":125,"./ka":126,"./ka.js":126,"./kk":127,"./kk.js":127,"./km":128,"./km.js":128,"./kn":129,"./kn.js":129,"./ko":130,"./ko.js":130,"./ku":131,"./ku.js":131,"./ky":132,"./ky.js":132,"./lb":133,"./lb.js":133,"./lo":134,"./lo.js":134,"./lt":135,"./lt.js":135,"./lv":136,"./lv.js":136,"./me":137,"./me.js":137,"./mi":138,"./mi.js":138,"./mk":139,"./mk.js":139,"./ml":140,"./ml.js":140,"./mn":141,"./mn.js":141,"./mr":142,"./mr.js":142,"./ms":143,"./ms-my":144,"./ms-my.js":144,"./ms.js":143,"./mt":145,"./mt.js":145,"./my":146,"./my.js":146,"./nb":147,"./nb.js":147,"./ne":148,"./ne.js":148,"./nl":149,"./nl-be":150,"./nl-be.js":150,"./nl.js":149,"./nn":151,"./nn.js":151,"./pa-in":152,"./pa-in.js":152,"./pl":153,"./pl.js":153,"./pt":154,"./pt-br":155,"./pt-br.js":155,"./pt.js":154,"./ro":156,"./ro.js":156,"./ru":157,"./ru.js":157,"./sd":158,"./sd.js":158,"./se":159,"./se.js":159,"./si":160,"./si.js":160,"./sk":161,"./sk.js":161,"./sl":162,"./sl.js":162,"./sq":163,"./sq.js":163,"./sr":164,"./sr-cyrl":165,"./sr-cyrl.js":165,"./sr.js":164,"./ss":166,"./ss.js":166,"./sv":167,"./sv.js":167,"./sw":168,"./sw.js":168,"./ta":169,"./ta.js":169,"./te":170,"./te.js":170,"./tet":171,"./tet.js":171,"./tg":172,"./tg.js":172,"./th":173,"./th.js":173,"./tl-ph":174,"./tl-ph.js":174,"./tlh":175,"./tlh.js":175,"./tr":176,"./tr.js":176,"./tzl":177,"./tzl.js":177,"./tzm":178,"./tzm-latn":179,"./tzm-latn.js":179,"./tzm.js":178,"./ug-cn":180,"./ug-cn.js":180,"./uk":181,"./uk.js":181,"./ur":182,"./ur.js":182,"./uz":183,"./uz-latn":184,"./uz-latn.js":184,"./uz.js":183,"./vi":185,"./vi.js":185,"./x-pseudo":186,"./x-pseudo.js":186,"./yo":187,"./yo.js":187,"./zh-cn":188,"./zh-cn.js":188,"./zh-hk":189,"./zh-hk.js":189,"./zh-tw":190,"./zh-tw.js":190};function a(e){var t=o(e);return n(t)}function o(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}a.keys=function(){return Object.keys(r)},a.resolve=o,e.exports=a,a.id=261},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"CalendarDay",{enumerable:!0,get:function(){return a.default}}),Object.defineProperty(t,"CalendarMonth",{enumerable:!0,get:function(){return o.default}}),Object.defineProperty(t,"CalendarMonthGrid",{enumerable:!0,get:function(){return i.default}}),Object.defineProperty(t,"DateRangePicker",{enumerable:!0,get:function(){return s.default}}),Object.defineProperty(t,"DateRangePickerInput",{enumerable:!0,get:function(){return u.default}}),Object.defineProperty(t,"DateRangePickerInputController",{enumerable:!0,get:function(){return l.default}}),Object.defineProperty(t,"DateRangePickerShape",{enumerable:!0,get:function(){return d.default}}),Object.defineProperty(t,"DayPicker",{enumerable:!0,get:function(){return c.default}}),Object.defineProperty(t,"DayPickerRangeController",{enumerable:!0,get:function(){return f.default}}),Object.defineProperty(t,"DayPickerSingleDateController",{enumerable:!0,get:function(){return h.default}}),Object.defineProperty(t,"SingleDatePicker",{enumerable:!0,get:function(){return _.default}}),Object.defineProperty(t,"SingleDatePickerInput",{enumerable:!0,get:function(){return m.default}}),Object.defineProperty(t,"SingleDatePickerShape",{enumerable:!0,get:function(){return p.default}}),Object.defineProperty(t,"isInclusivelyAfterDay",{enumerable:!0,get:function(){return y.default}}),Object.defineProperty(t,"isInclusivelyBeforeDay",{enumerable:!0,get:function(){return v.default}}),Object.defineProperty(t,"isNextDay",{enumerable:!0,get:function(){return g.default}}),Object.defineProperty(t,"isSameDay",{enumerable:!0,get:function(){return b.default}}),Object.defineProperty(t,"toISODateString",{enumerable:!0,get:function(){return M.default}}),Object.defineProperty(t,"toLocalizedDateString",{enumerable:!0,get:function(){return D.default}}),Object.defineProperty(t,"toMomentObject",{enumerable:!0,get:function(){return k.default}});var a=r(n(191)),o=r(n(205)),i=r(n(207)),s=r(n(298)),u=r(n(219)),l=r(n(218)),d=r(n(211)),c=r(n(57)),f=r(n(227)),h=r(n(233)),_=r(n(324)),m=r(n(235)),p=r(n(234)),y=r(n(32)),v=r(n(326)),g=r(n(229)),b=r(n(21)),M=r(n(33)),D=r(n(55)),k=r(n(27))},function(e,t,n){"use strict";var r=function(e){return e!=e};e.exports=function(e,t){return 0===e&&0===t?1/e==1/t:e===t||!(!r(e)||!r(t))}},function(e,t,n){"use strict";var r="Function.prototype.bind called on incompatible ",a=Array.prototype.slice,o=Object.prototype.toString;e.exports=function(e){var t=this;if("function"!=typeof t||"[object Function]"!==o.call(t))throw new TypeError(r+t);for(var n,i=a.call(arguments,1),s=function(){if(this instanceof n){var r=t.apply(this,i.concat(a.call(arguments)));return Object(r)===r?r:this}return t.apply(e,i.concat(a.call(arguments)))},u=Math.max(0,t.length-i.length),l=[],d=0;d<u;d++)l.push("$"+d);if(n=Function("binder","return function ("+l.join(",")+"){ return binder.apply(this,arguments); }")(s),t.prototype){var c=function(){};c.prototype=t.prototype,n.prototype=new c,c.prototype=null}return n}},function(e,t,n){var r=n(1);e.exports={isValidMoment:function(e){return!("function"==typeof r.isMoment&&!r.isMoment(e))&&("function"==typeof e.isValid?e.isValid():!isNaN(e))}}},function(e,t){var n={invalidPredicate:"`predicate` must be a function",invalidPropValidator:"`propValidator` must be a function",requiredCore:"is marked as required",invalidTypeCore:"Invalid input type",predicateFailureCore:"Failed to succeed with predicate",anonymousMessage:"<<anonymous>>",baseInvalidMessage:"Invalid "};function r(e){if("function"!=typeof e)throw new Error(n.invalidPropValidator);var t=e.bind(null,!1,null);return t.isRequired=e.bind(null,!0,null),t.withPredicate=function(t){if("function"!=typeof t)throw new Error(n.invalidPredicate);var r=e.bind(null,!1,t);return r.isRequired=e.bind(null,!0,t),r},t}function a(e,t,r){return new Error("The prop `"+e+"` "+n.requiredCore+" in `"+t+"`, but its value is `"+r+"`.")}e.exports={constructPropValidatorVariations:r,createMomentChecker:function(e,t,o,i){return r((function(r,s,u,l,d,c,f){var h=u[l],_=typeof h,m=function(e,t,n,r){var o=void 0===r,i=null===r;if(e){if(o)return a(n,t,"undefined");if(i)return a(n,t,"null")}return o||i?null:-1}(r,d=d||n.anonymousMessage,f=f||l,h);if(-1!==m)return m;if(t&&!t(h))return new Error(n.invalidTypeCore+": `"+l+"` of type `"+_+"` supplied to `"+d+"`, expected `"+e+"`.");if(!o(h))return new Error(n.baseInvalidMessage+c+" `"+l+"` of type `"+_+"` supplied to `"+d+"`, expected `"+i+"`.");if(s&&!s(h)){var p=s.name||n.anonymousMessage;return new Error(n.baseInvalidMessage+c+" `"+l+"` of type `"+_+"` supplied to `"+d+"`. "+n.predicateFailureCore+" `"+p+"`.")}return null}))},messages:n}},function(e,t,n){"use strict";function r(){return null}function a(){return r}r.isRequired=r,e.exports={and:a,between:a,booleanSome:a,childrenHavePropXorChildren:a,childrenOf:a,childrenOfType:a,childrenSequenceOf:a,componentWithName:a,disallowedIf:a,elementType:a,empty:a,explicitNull:a,forbidExtraProps:Object,integer:a,keysOf:a,mutuallyExclusiveProps:a,mutuallyExclusiveTrueProps:a,nChildren:a,nonNegativeInteger:r,nonNegativeNumber:a,numericString:a,object:a,or:a,range:a,ref:a,requiredBy:a,restrictedProp:a,sequenceOf:a,shape:a,stringEndsWith:a,stringStartsWith:a,uniqueArray:a,uniqueArrayOf:a,valuesOf:a,withShape:a}},function(e,t){function n(t){return"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?e.exports=n=function(e){return typeof e}:e.exports=n=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(t)}e.exports=n},function(e,t,n){"use strict";var r=n(17),a=n(40),o=n(196),i=n(199),s=n(273),u=a(o);r(u,{getPolyfill:i,implementation:o,shim:s}),e.exports=u},function(e,t,n){"use strict";var r=Array.prototype.slice,a=n(194),o=Object.keys,i=o?function(e){return o(e)}:n(271),s=Object.keys;i.shim=function(){Object.keys?function(){var e=Object.keys(arguments);return e&&e.length===arguments.length}(1,2)||(Object.keys=function(e){return a(e)?s(r.call(e)):s(e)}):Object.keys=i;return Object.keys||i},e.exports=i},function(e,t,n){"use strict";var r;if(!Object.keys){var a=Object.prototype.hasOwnProperty,o=Object.prototype.toString,i=n(194),s=Object.prototype.propertyIsEnumerable,u=!s.call({toString:null},"toString"),l=s.call((function(){}),"prototype"),d=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],c=function(e){var t=e.constructor;return t&&t.prototype===e},f={$applicationCache:!0,$console:!0,$external:!0,$frame:!0,$frameElement:!0,$frames:!0,$innerHeight:!0,$innerWidth:!0,$onmozfullscreenchange:!0,$onmozfullscreenerror:!0,$outerHeight:!0,$outerWidth:!0,$pageXOffset:!0,$pageYOffset:!0,$parent:!0,$scrollLeft:!0,$scrollTop:!0,$scrollX:!0,$scrollY:!0,$self:!0,$webkitIndexedDB:!0,$webkitStorageInfo:!0,$window:!0},h=function(){if("undefined"==typeof window)return!1;for(var e in window)try{if(!f["$"+e]&&a.call(window,e)&&null!==window[e]&&"object"==typeof window[e])try{c(window[e])}catch(e){return!0}}catch(e){return!0}return!1}();r=function(e){var t=null!==e&&"object"==typeof e,n="[object Function]"===o.call(e),r=i(e),s=t&&"[object String]"===o.call(e),f=[];if(!t&&!n&&!r)throw new TypeError("Object.keys called on a non-object");var _=l&&n;if(s&&e.length>0&&!a.call(e,0))for(var m=0;m<e.length;++m)f.push(String(m));if(r&&e.length>0)for(var p=0;p<e.length;++p)f.push(String(p));else for(var y in e)_&&"prototype"===y||!a.call(e,y)||f.push(String(y));if(u)for(var v=function(e){if("undefined"==typeof window||!h)return c(e);try{return c(e)}catch(e){return!1}}(e),g=0;g<d.length;++g)v&&"constructor"===d[g]||!a.call(e,d[g])||f.push(d[g]);return f}}e.exports=r},function(e,t,n){"use strict";e.exports=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var e={},t=Symbol("test"),n=Object(t);if("string"==typeof t)return!1;if("[object Symbol]"!==Object.prototype.toString.call(t))return!1;if("[object Symbol]"!==Object.prototype.toString.call(n))return!1;for(t in e[t]=42,e)return!1;if("function"==typeof Object.keys&&0!==Object.keys(e).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(e).length)return!1;var r=Object.getOwnPropertySymbols(e);if(1!==r.length||r[0]!==t)return!1;if(!Object.prototype.propertyIsEnumerable.call(e,t))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var a=Object.getOwnPropertyDescriptor(e,t);if(42!==a.value||!0!==a.enumerable)return!1}return!0}},function(e,t,n){"use strict";var r=n(17).supportsDescriptors,a=n(198)(),o=n(199),i=Object.defineProperty,s=TypeError;e.exports=function(){var e=o();if(a)return e;if(!r)throw new s("Shimming Function.prototype.name support requires ES5 property descriptor support.");var t=Function.prototype;return i(t,"name",{configurable:!0,enumerable:!1,get:function(){var n=e.call(this);return this!==t&&i(this,"name",{configurable:!0,enumerable:!1,value:n,writable:!1}),n}}),e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={},a=function(){return r};t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.perfStart=function(e){"undefined"!=typeof performance&&void 0!==performance.mark&&"function"==typeof performance.clearMarks&&e&&(performance.clearMarks(e),performance.mark(e))},t.perfEnd=function(e,t,n){"undefined"!=typeof performance&&void 0!==performance.mark&&"function"==typeof performance.clearMarks&&(performance.clearMarks(t),performance.mark(t),performance.measure(n,e,t),performance.clearMarks(n))},t.default=function(e){"react-with-styles.".concat(e,".start"),"react-with-styles.".concat(e,".end"),"👩‍🎨 [".concat(e,"]");return function(e){return function(){var t=e.apply(void 0,arguments);return t}}}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"DIRECTIONS",{enumerable:!0,get:function(){return i.DIRECTIONS}}),t.default=void 0;var a=n(0),o=r(n(3)),i=n(277);var s,u=(s={stylesInterface:null,stylesTheme:null,direction:null},a.createContext?(0,a.createContext)(s):{Provider:function(){throw new ReferenceError("WithStylesContext requires React 16.3 or later")},Consumer:function(){throw new ReferenceError("WithStylesContext requires React 16.3 or later")}});u.Provider.propTypes={stylesInterface:o.default.object,stylesTheme:o.default.object,direction:o.default.oneOf([i.DIRECTIONS.LTR,i.DIRECTIONS.RTL])};var l=u;t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.withDirectionPropTypes=t.DIRECTIONS=void 0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();t.default=function(e){var t=function(t){function n(e,t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,e,t));return r.state={direction:t[l.CHANNEL]?t[l.CHANNEL].getState():y},r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(n,t),a(n,[{key:"componentDidMount",value:function(){var e=this;this.context[l.CHANNEL]&&(this.channelUnsubscribe=this.context[l.CHANNEL].subscribe((function(t){e.setState({direction:t})})))}},{key:"componentWillUnmount",value:function(){this.channelUnsubscribe&&this.channelUnsubscribe()}},{key:"render",value:function(){var t=this.state.direction;return o.default.createElement(e,r({},this.props,{direction:t}))}}]),n}(o.default.Component),n=(0,u.default)(e)||"Component";t.WrappedComponent=e,t.contextTypes=p,t.displayName="withDirection("+String(n)+")",e.propTypes&&(t.propTypes=(0,s.default)({},e.propTypes),delete t.propTypes.direction);e.defaultProps&&(t.defaultProps=(0,s.default)({},e.defaultProps));return(0,i.default)(t,e)};var o=f(n(0)),i=f(n(24)),s=f(n(278)),u=f(n(193)),l=n(200),d=f(n(279)),c=f(n(280));function f(e){return e&&e.__esModule?e:{default:e}}var h,_,m,p=(h={},_=l.CHANNEL,m=d.default,_ in h?Object.defineProperty(h,_,{value:m,enumerable:!0,configurable:!0,writable:!0}):h[_]=m,h);t.DIRECTIONS=l.DIRECTIONS;var y=l.DIRECTIONS.LTR;t.withDirectionPropTypes={direction:c.default.isRequired}},function(e,t,n){"use strict";var r=function(e){return function(e){return!!e&&"object"==typeof e}(e)&&!function(e){var t=Object.prototype.toString.call(e);return"[object RegExp]"===t||"[object Date]"===t||function(e){return e.$$typeof===a}(e)}(e)};var a="function"==typeof Symbol&&Symbol.for?Symbol.for("react.element"):60103;function o(e,t){var n;return t&&!0===t.clone&&r(e)?s((n=e,Array.isArray(n)?[]:{}),e,t):e}function i(e,t,n){var a=e.slice();return t.forEach((function(t,i){void 0===a[i]?a[i]=o(t,n):r(t)?a[i]=s(e[i],t,n):-1===e.indexOf(t)&&a.push(o(t,n))})),a}function s(e,t,n){var a=Array.isArray(t);return a===Array.isArray(e)?a?((n||{arrayMerge:i}).arrayMerge||i)(e,t,n):function(e,t,n){var a={};return r(e)&&Object.keys(e).forEach((function(t){a[t]=o(e[t],n)})),Object.keys(t).forEach((function(i){r(t[i])&&e[i]?a[i]=s(e[i],t[i],n):a[i]=o(t[i],n)})),a}(e,t,n):o(t,n)}s.all=function(e,t){if(!Array.isArray(e)||e.length<2)throw new Error("first argument should be an array with at least two elements");return e.reduce((function(e,n){return s(e,n,t)}))};var u=s;e.exports=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,a=n(3),o=(r=a)&&r.__esModule?r:{default:r};t.default=o.default.shape({getState:o.default.func,setState:o.default.func,subscribe:o.default.func})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=i(n(41)),a=i(n(3)),o=n(200);function i(e){return e&&e.__esModule?e:{default:e}}t.default=a.default.oneOf((0,r.default)(o.DIRECTIONS))},function(e,t,n){"use strict";var r=n(5)("%TypeError%");e.exports=function(e,t){if(null==e)throw new r(t||"Cannot call method on "+e);return e}},function(e,t,n){"use strict";var r=n(203),a=n(17);e.exports=function(){var e=r();return a(Object,{values:e},{values:function(){return Object.values!==e}}),e}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.withStylesPropTypes=void 0;var a=r(n(3)),o={styles:a.default.object.isRequired,theme:a.default.object.isRequired,css:a.default.func.isRequired};t.withStylesPropTypes=o;var i=o;t.default=i},function(e,t,n){(function(t){for(var r=n(285),a="undefined"==typeof window?t:window,o=["moz","webkit"],i="AnimationFrame",s=a["request"+i],u=a["cancel"+i]||a["cancelRequest"+i],l=0;!s&&l<o.length;l++)s=a[o[l]+"Request"+i],u=a[o[l]+"Cancel"+i]||a[o[l]+"CancelRequest"+i];if(!s||!u){var d=0,c=0,f=[];s=function(e){if(0===f.length){var t=r(),n=Math.max(0,1e3/60-(t-d));d=n+t,setTimeout((function(){var e=f.slice(0);f.length=0;for(var t=0;t<e.length;t++)if(!e[t].cancelled)try{e[t].callback(d)}catch(e){setTimeout((function(){throw e}),0)}}),Math.round(n))}return f.push({handle:++c,callback:e,cancelled:!1}),c},u=function(e){for(var t=0;t<f.length;t++)f[t].handle===e&&(f[t].cancelled=!0)}}e.exports=function(e){return s.call(a,e)},e.exports.cancel=function(){u.apply(a,arguments)},e.exports.polyfill=function(e){e||(e=a),e.requestAnimationFrame=s,e.cancelAnimationFrame=u}}).call(this,n(25))},function(e,t,n){(function(t){(function(){var n,r,a,o,i,s;"undefined"!=typeof performance&&null!==performance&&performance.now?e.exports=function(){return performance.now()}:null!=t&&t.hrtime?(e.exports=function(){return(n()-i)/1e6},r=t.hrtime,o=(n=function(){var e;return 1e9*(e=r())[0]+e[1]})(),s=1e9*t.uptime(),i=o-s):Date.now?(e.exports=function(){return Date.now()-a},a=Date.now()):(e.exports=function(){return(new Date).getTime()-a},a=(new Date).getTime())}).call(this)}).call(this,n(286))},function(e,t){var n,r,a=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{r="function"==typeof clearTimeout?clearTimeout:i}catch(e){r=i}}();var u,l=[],d=!1,c=-1;function f(){d&&u&&(d=!1,u.length?l=u.concat(l):c=-1,l.length&&h())}function h(){if(!d){var e=s(f);d=!0;for(var t=l.length;t;){for(u=l,l=[];++c<t;)u&&u[c].run();c=-1,t=l.length}u=null,d=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===i||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function _(e,t){this.fun=e,this.array=t}function m(){}a.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];l.push(new _(e,t)),1!==l.length||d||s(h)},_.prototype.run=function(){this.fun.apply(null,this.array)},a.title="browser",a.browser=!0,a.env={},a.argv=[],a.version="",a.versions={},a.on=m,a.addListener=m,a.once=m,a.off=m,a.removeListener=m,a.removeAllListeners=m,a.emit=m,a.prependListener=m,a.prependOnceListener=m,a.listeners=function(e){return[]},a.binding=function(e){throw new Error("process.binding is not supported")},a.cwd=function(){return"/"},a.chdir=function(e){throw new Error("process.chdir is not supported")},a.umask=function(){return 0}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,r,a){return{ariaLabel:l(a,r,e,t),hoveredSpan:u(r),isOutsideRange:r.has("blocked-out-of-range"),selected:i(r),useDefaultCursor:s(r),daySizeStyles:{width:n,height:n-1}}};var a=r(n(288)),o=n(4);function i(e){return e.has("selected")||e.has("selected-span")||e.has("selected-start")||e.has("selected-end")}function s(e){return e.has("blocked-minimum-nights")||e.has("blocked-calendar")||e.has("blocked-out-of-range")}function u(e){return!i(e)&&(e.has("hovered-span")||e.has("after-hovered-start")||e.has("before-hovered-end"))}function l(e,t,n,r){var s=e.chooseAvailableDate,u=e.dateIsUnavailable,l=e.dateIsSelected,d=e.dateIsSelectedAsStartDate,c=e.dateIsSelectedAsEndDate,f={date:n.format(r)};return t.has("selected-start")&&d?(0,a.default)(d,f):t.has("selected-end")&&c?(0,a.default)(c,f):i(t)&&l?(0,a.default)(l,f):t.has(o.BLOCKED_MODIFIER)?(0,a.default)(u,f):(0,a.default)(s,f)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof e)return e;if("function"==typeof e)return e(t);return""}},function(e,t){e.exports=function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}},function(e,t){e.exports=function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}},function(e,t){e.exports=function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=o;var a=r(n(0));r(n(3)),n(6);function o(e){var t=e.children;return a.default.createElement("tr",null,t)}o.propTypes={}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:a.default.localeData().firstDayOfWeek();if(!a.default.isMoment(e)||!e.isValid())throw new TypeError("`month` must be a valid moment object");if(-1===o.WEEKDAYS.indexOf(n))throw new TypeError("`firstDayOfWeek` must be an integer between 0 and 6");for(var r=e.clone().startOf("month").hour(12),i=e.clone().endOf("month").hour(12),s=(r.day()+7-n)%7,u=(n+6-i.day())%7,l=r.clone().subtract(s,"day"),d=i.clone().add(u,"day"),c=d.diff(l,"days")+1,f=l.clone(),h=[],_=0;_<c;_+=1){_%7==0&&h.push([]);var m=null;(_>=s&&_<c-u||t)&&(m=f.clone()),h[h.length-1].push(m),f.add(1,"day")}return h};var a=r(n(1)),o=n(4)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){return!("undefined"==typeof window||!("TransitionEvent"in window))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return{transform:e,msTransform:e,MozTransform:e,WebkitTransform:e}}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return!(!a.default.isMoment(e)||!a.default.isMoment(t))&&(0,o.default)(e.clone().subtract(1,"month"),t)};var a=r(n(1)),o=r(n(51))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return!(!a.default.isMoment(e)||!a.default.isMoment(t))&&(0,o.default)(e.clone().add(1,"month"),t)};var a=r(n(1)),o=r(n(51))},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.PureDateRangePicker=void 0;var a=r(n(11)),o=r(n(12)),i=r(n(13)),s=r(n(8)),u=r(n(7)),l=r(n(0)),d=r(n(1)),c=n(14),f=n(247),h=(n(6),n(43)),_=r(n(29)),m=r(n(52)),p=(r(n(211)),n(9)),y=r(n(215)),v=r(n(216)),g=r(n(53)),b=r(n(32)),M=r(n(217)),D=r(n(19)),k=r(n(218)),L=r(n(227)),w=r(n(37)),T=n(4);function S(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Y(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?S(Object(n),!0).forEach((function(t){(0,u.default)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):S(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var P={startDate:null,endDate:null,focusedInput:null,startDatePlaceholderText:"Start Date",endDatePlaceholderText:"End Date",startDateAriaLabel:void 0,endDateAriaLabel:void 0,startDateOffset:void 0,endDateOffset:void 0,disabled:!1,required:!1,readOnly:!1,screenReaderInputMessage:"",showClearDates:!1,showDefaultInputIcon:!1,inputIconPosition:T.ICON_BEFORE_POSITION,customInputIcon:null,customArrowIcon:null,customCloseIcon:null,noBorder:!1,block:!1,small:!1,regular:!1,keepFocusOnInput:!1,renderMonthText:null,renderWeekHeaderElement:null,orientation:T.HORIZONTAL_ORIENTATION,anchorDirection:T.ANCHOR_LEFT,openDirection:T.OPEN_DOWN,horizontalMargin:0,withPortal:!1,withFullScreenPortal:!1,appendToBody:!1,disableScroll:!1,initialVisibleMonth:null,numberOfMonths:2,keepOpenOnDateSelect:!1,reopenPickerOnClearDates:!1,renderCalendarInfo:null,calendarInfoPosition:T.INFO_POSITION_BOTTOM,hideKeyboardShortcutsPanel:!1,daySize:T.DAY_SIZE,isRTL:!1,firstDayOfWeek:null,verticalHeight:null,transitionDuration:void 0,verticalSpacing:T.DEFAULT_VERTICAL_SPACING,horizontalMonthPadding:void 0,dayPickerNavigationInlineStyles:null,navPosition:T.NAV_POSITION_TOP,navPrev:null,navNext:null,renderNavPrevButton:null,renderNavNextButton:null,onPrevMonthClick:function(){},onNextMonthClick:function(){},onClose:function(){},renderCalendarDay:void 0,renderDayContents:null,renderMonthElement:null,minimumNights:1,enableOutsideDays:!1,isDayBlocked:function(){return!1},isOutsideRange:function(e){return!(0,b.default)(e,(0,d.default)())},isDayHighlighted:function(){return!1},minDate:void 0,maxDate:void 0,displayFormat:function(){return d.default.localeData().longDateFormat("L")},monthFormat:"MMMM YYYY",weekDayFormat:"dd",phrases:p.DateRangePickerPhrases,dayAriaLabelFormat:void 0},O=function(e){(0,s.default)(n,e);var t=n.prototype;function n(t){var n;return(n=e.call(this,t)||this).state={dayPickerContainerStyles:{},isDateRangePickerInputFocused:!1,isDayPickerFocused:!1,showKeyboardShortcuts:!1},n.isTouchDevice=!1,n.onOutsideClick=n.onOutsideClick.bind((0,i.default)(n)),n.onDateRangePickerInputFocus=n.onDateRangePickerInputFocus.bind((0,i.default)(n)),n.onDayPickerFocus=n.onDayPickerFocus.bind((0,i.default)(n)),n.onDayPickerFocusOut=n.onDayPickerFocusOut.bind((0,i.default)(n)),n.onDayPickerBlur=n.onDayPickerBlur.bind((0,i.default)(n)),n.showKeyboardShortcutsPanel=n.showKeyboardShortcutsPanel.bind((0,i.default)(n)),n.responsivizePickerPosition=n.responsivizePickerPosition.bind((0,i.default)(n)),n.disableScroll=n.disableScroll.bind((0,i.default)(n)),n.setDayPickerContainerRef=n.setDayPickerContainerRef.bind((0,i.default)(n)),n.setContainerRef=n.setContainerRef.bind((0,i.default)(n)),n}return t[!l.default.PureComponent&&"shouldComponentUpdate"]=function(e,t){return!(0,a.default)(this.props,e)||!(0,a.default)(this.state,t)},t.componentDidMount=function(){this.removeEventListener=(0,h.addEventListener)(window,"resize",this.responsivizePickerPosition,{passive:!0}),this.responsivizePickerPosition(),this.disableScroll(),this.props.focusedInput&&this.setState({isDateRangePickerInputFocused:!0}),this.isTouchDevice=(0,_.default)()},t.componentDidUpdate=function(e){var t=this.props.focusedInput;!e.focusedInput&&t&&this.isOpened()?(this.responsivizePickerPosition(),this.disableScroll()):!e.focusedInput||t||this.isOpened()||this.enableScroll&&this.enableScroll()},t.componentWillUnmount=function(){this.removeDayPickerEventListeners(),this.removeEventListener&&this.removeEventListener(),this.enableScroll&&this.enableScroll()},t.onOutsideClick=function(e){var t=this.props,n=t.onFocusChange,r=t.onClose,a=t.startDate,o=t.endDate,i=t.appendToBody;this.isOpened()&&(i&&this.dayPickerContainer.contains(e.target)||(this.setState({isDateRangePickerInputFocused:!1,isDayPickerFocused:!1,showKeyboardShortcuts:!1}),n(null),r({startDate:a,endDate:o})))},t.onDateRangePickerInputFocus=function(e){var t=this.props,n=t.onFocusChange,r=t.readOnly,a=t.withPortal,o=t.withFullScreenPortal,i=t.keepFocusOnInput;e&&(a||o||r&&!i||this.isTouchDevice&&!i?this.onDayPickerFocus():this.onDayPickerBlur());n(e)},t.onDayPickerFocus=function(){var e=this.props,t=e.focusedInput,n=e.onFocusChange;t||n(T.START_DATE),this.setState({isDateRangePickerInputFocused:!1,isDayPickerFocused:!0,showKeyboardShortcuts:!1})},t.onDayPickerFocusOut=function(e){var t=e.relatedTarget===document.body?e.target:e.relatedTarget||e.target;this.dayPickerContainer.contains(t)||this.onOutsideClick(e)},t.onDayPickerBlur=function(){this.setState({isDateRangePickerInputFocused:!0,isDayPickerFocused:!1,showKeyboardShortcuts:!1})},t.setDayPickerContainerRef=function(e){e!==this.dayPickerContainer&&(this.dayPickerContainer&&this.removeDayPickerEventListeners(),this.dayPickerContainer=e,e&&this.addDayPickerEventListeners())},t.setContainerRef=function(e){this.container=e},t.addDayPickerEventListeners=function(){this.removeDayPickerFocusOut=(0,h.addEventListener)(this.dayPickerContainer,"focusout",this.onDayPickerFocusOut)},t.removeDayPickerEventListeners=function(){this.removeDayPickerFocusOut&&this.removeDayPickerFocusOut()},t.isOpened=function(){var e=this.props.focusedInput;return e===T.START_DATE||e===T.END_DATE},t.disableScroll=function(){var e=this.props,t=e.appendToBody,n=e.disableScroll;(t||n)&&this.isOpened()&&(this.enableScroll=(0,M.default)(this.container))},t.responsivizePickerPosition=function(){var e=this.state.dayPickerContainerStyles;if(Object.keys(e).length>0&&this.setState({dayPickerContainerStyles:{}}),this.isOpened()){var t=this.props,n=t.openDirection,r=t.anchorDirection,a=t.horizontalMargin,o=t.withPortal,i=t.withFullScreenPortal,s=t.appendToBody,u=r===T.ANCHOR_LEFT;if(!o&&!i){var l=this.dayPickerContainer.getBoundingClientRect(),d=e[r]||0,c=u?l[T.ANCHOR_RIGHT]:l[T.ANCHOR_LEFT];this.setState({dayPickerContainerStyles:Y({},(0,y.default)(r,d,c,a),{},s&&(0,v.default)(n,r,this.container))})}}},t.showKeyboardShortcutsPanel=function(){this.setState({isDateRangePickerInputFocused:!1,isDayPickerFocused:!0,showKeyboardShortcuts:!0})},t.maybeRenderDayPickerWithPortal=function(){var e=this.props,t=e.withPortal,n=e.withFullScreenPortal,r=e.appendToBody;return this.isOpened()?t||n||r?l.default.createElement(f.Portal,null,this.renderDayPicker()):this.renderDayPicker():null},t.renderDayPicker=function(){var e=this.props,t=e.anchorDirection,n=e.openDirection,r=e.isDayBlocked,a=e.isDayHighlighted,i=e.isOutsideRange,s=e.numberOfMonths,u=e.orientation,f=e.monthFormat,h=e.renderMonthText,_=e.renderWeekHeaderElement,m=e.dayPickerNavigationInlineStyles,p=e.navPosition,y=e.navPrev,v=e.navNext,b=e.renderNavPrevButton,M=e.renderNavNextButton,D=e.onPrevMonthClick,k=e.onNextMonthClick,S=e.onDatesChange,Y=e.onFocusChange,P=e.withPortal,O=e.withFullScreenPortal,E=e.daySize,x=e.enableOutsideDays,C=e.focusedInput,j=e.startDate,H=e.startDateOffset,I=e.endDate,N=e.endDateOffset,A=e.minDate,F=e.maxDate,R=e.minimumNights,W=e.keepOpenOnDateSelect,z=e.renderCalendarDay,B=e.renderDayContents,K=e.renderCalendarInfo,U=e.renderMonthElement,V=e.calendarInfoPosition,G=e.firstDayOfWeek,J=e.initialVisibleMonth,$=e.hideKeyboardShortcutsPanel,q=e.customCloseIcon,Q=e.onClose,Z=e.phrases,X=e.dayAriaLabelFormat,ee=e.isRTL,te=e.weekDayFormat,ne=e.styles,re=e.verticalHeight,ae=e.transitionDuration,oe=e.verticalSpacing,ie=e.horizontalMonthPadding,se=e.small,ue=e.disabled,le=e.theme.reactDates,de=this.state,ce=de.dayPickerContainerStyles,fe=de.isDayPickerFocused,he=de.showKeyboardShortcuts,_e=!O&&P?this.onOutsideClick:void 0,me=J||function(){return j||I||(0,d.default)()},pe=q||l.default.createElement(w.default,(0,c.css)(ne.DateRangePicker_closeButton_svg)),ye=(0,g.default)(le,se),ve=P||O;return l.default.createElement("div",(0,o.default)({ref:this.setDayPickerContainerRef},(0,c.css)(ne.DateRangePicker_picker,t===T.ANCHOR_LEFT&&ne.DateRangePicker_picker__directionLeft,t===T.ANCHOR_RIGHT&&ne.DateRangePicker_picker__directionRight,u===T.HORIZONTAL_ORIENTATION&&ne.DateRangePicker_picker__horizontal,u===T.VERTICAL_ORIENTATION&&ne.DateRangePicker_picker__vertical,!ve&&n===T.OPEN_DOWN&&{top:ye+oe},!ve&&n===T.OPEN_UP&&{bottom:ye+oe},ve&&ne.DateRangePicker_picker__portal,O&&ne.DateRangePicker_picker__fullScreenPortal,ee&&ne.DateRangePicker_picker__rtl,ce),{onClick:_e}),l.default.createElement(L.default,{orientation:u,enableOutsideDays:x,numberOfMonths:s,onPrevMonthClick:D,onNextMonthClick:k,onDatesChange:S,onFocusChange:Y,onClose:Q,focusedInput:C,startDate:j,startDateOffset:H,endDate:I,endDateOffset:N,minDate:A,maxDate:F,monthFormat:f,renderMonthText:h,renderWeekHeaderElement:_,withPortal:ve,daySize:E,initialVisibleMonth:me,hideKeyboardShortcutsPanel:$,dayPickerNavigationInlineStyles:m,navPosition:p,navPrev:y,navNext:v,renderNavPrevButton:b,renderNavNextButton:M,minimumNights:R,isOutsideRange:i,isDayHighlighted:a,isDayBlocked:r,keepOpenOnDateSelect:W,renderCalendarDay:z,renderDayContents:B,renderCalendarInfo:K,renderMonthElement:U,calendarInfoPosition:V,isFocused:fe,showKeyboardShortcuts:he,onBlur:this.onDayPickerBlur,phrases:Z,dayAriaLabelFormat:X,isRTL:ee,firstDayOfWeek:G,weekDayFormat:te,verticalHeight:re,transitionDuration:ae,disabled:ue,horizontalMonthPadding:ie}),O&&l.default.createElement("button",(0,o.default)({},(0,c.css)(ne.DateRangePicker_closeButton),{type:"button",onClick:this.onOutsideClick,"aria-label":Z.closeDatePicker}),pe))},t.render=function(){var e=this.props,t=e.startDate,n=e.startDateId,r=e.startDatePlaceholderText,a=e.startDateAriaLabel,i=e.endDate,s=e.endDateId,u=e.endDatePlaceholderText,d=e.endDateAriaLabel,f=e.focusedInput,h=e.screenReaderInputMessage,_=e.showClearDates,p=e.showDefaultInputIcon,y=e.inputIconPosition,v=e.customInputIcon,g=e.customArrowIcon,b=e.customCloseIcon,M=e.disabled,D=e.required,L=e.readOnly,w=e.openDirection,S=e.phrases,Y=e.isOutsideRange,P=e.minimumNights,O=e.withPortal,E=e.withFullScreenPortal,x=e.displayFormat,C=e.reopenPickerOnClearDates,j=e.keepOpenOnDateSelect,H=e.onDatesChange,I=e.onClose,N=e.isRTL,A=e.noBorder,F=e.block,R=e.verticalSpacing,W=e.small,z=e.regular,B=e.styles,K=this.state.isDateRangePickerInputFocused,U=!O&&!E,V=R<T.FANG_HEIGHT_PX,G=l.default.createElement(k.default,{startDate:t,startDateId:n,startDatePlaceholderText:r,isStartDateFocused:f===T.START_DATE,startDateAriaLabel:a,endDate:i,endDateId:s,endDatePlaceholderText:u,isEndDateFocused:f===T.END_DATE,endDateAriaLabel:d,displayFormat:x,showClearDates:_,showCaret:!O&&!E&&!V,showDefaultInputIcon:p,inputIconPosition:y,customInputIcon:v,customArrowIcon:g,customCloseIcon:b,disabled:M,required:D,readOnly:L,openDirection:w,reopenPickerOnClearDates:C,keepOpenOnDateSelect:j,isOutsideRange:Y,minimumNights:P,withFullScreenPortal:E,onDatesChange:H,onFocusChange:this.onDateRangePickerInputFocus,onKeyDownArrowDown:this.onDayPickerFocus,onKeyDownQuestionMark:this.showKeyboardShortcutsPanel,onClose:I,phrases:S,screenReaderMessage:h,isFocused:K,isRTL:N,noBorder:A,block:F,small:W,regular:z,verticalSpacing:R},this.maybeRenderDayPickerWithPortal());return l.default.createElement("div",(0,o.default)({ref:this.setContainerRef},(0,c.css)(B.DateRangePicker,F&&B.DateRangePicker__block)),U&&l.default.createElement(m.default,{onOutsideClick:this.onOutsideClick},G),U||G)},n}(l.default.PureComponent||l.default.Component);t.PureDateRangePicker=O,O.propTypes={},O.defaultProps=P;var E=(0,c.withStyles)((function(e){var t=e.reactDates,n=t.color,r=t.zIndex;return{DateRangePicker:{position:"relative",display:"inline-block"},DateRangePicker__block:{display:"block"},DateRangePicker_picker:{zIndex:r+1,backgroundColor:n.background,position:"absolute"},DateRangePicker_picker__rtl:{direction:(0,D.default)("rtl")},DateRangePicker_picker__directionLeft:{left:(0,D.default)(0)},DateRangePicker_picker__directionRight:{right:(0,D.default)(0)},DateRangePicker_picker__portal:{backgroundColor:"rgba(0, 0, 0, 0.3)",position:"fixed",top:0,left:(0,D.default)(0),height:"100%",width:"100%"},DateRangePicker_picker__fullScreenPortal:{backgroundColor:n.background},DateRangePicker_closeButton:{background:"none",border:0,color:"inherit",font:"inherit",lineHeight:"normal",overflow:"visible",cursor:"pointer",position:"absolute",top:0,right:(0,D.default)(0),padding:15,zIndex:r+2,":hover":{color:"darken(".concat(n.core.grayLighter,", 10%)"),textDecoration:"none"},":focus":{color:"darken(".concat(n.core.grayLighter,", 10%)"),textDecoration:"none"}},DateRangePicker_closeButton_svg:{height:15,width:15,fill:n.core.grayLighter}}}),{pureComponent:void 0!==l.default.PureComponent})(O);t.default=E},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=d(n(0)),o=d(n(3)),i=n(6),s=n(43),u=d(n(41)),l=d(n(300));function d(e){return e&&e.__esModule?e:{default:e}}function c(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function f(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var h={BLOCK:"block",FLEX:"flex",INLINE:"inline",INLINE_BLOCK:"inline-block",CONTENTS:"contents"},_=(0,i.forbidExtraProps)({children:o.default.node.isRequired,onOutsideClick:o.default.func.isRequired,disabled:o.default.bool,useCapture:o.default.bool,display:o.default.oneOf((0,u.default)(h))}),m={disabled:!1,useCapture:!0,display:h.BLOCK},p=function(e){function t(){var e;c(this,t);for(var n=arguments.length,r=Array(n),a=0;a<n;a++)r[a]=arguments[a];var o=f(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(r)));return o.onMouseDown=o.onMouseDown.bind(o),o.onMouseUp=o.onMouseUp.bind(o),o.setChildNodeRef=o.setChildNodeRef.bind(o),o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,[{key:"componentDidMount",value:function(){var e=this.props,t=e.disabled,n=e.useCapture;t||this.addMouseDownEventListener(n)}},{key:"componentDidUpdate",value:function(e){var t=e.disabled,n=this.props,r=n.disabled,a=n.useCapture;t!==r&&(r?this.removeEventListeners():this.addMouseDownEventListener(a))}},{key:"componentWillUnmount",value:function(){this.removeEventListeners()}},{key:"onMouseDown",value:function(e){var t=this.props.useCapture;this.childNode&&(0,l.default)(this.childNode,e.target)||(this.removeMouseUp&&(this.removeMouseUp(),this.removeMouseUp=null),this.removeMouseUp=(0,s.addEventListener)(document,"mouseup",this.onMouseUp,{capture:t}))}},{key:"onMouseUp",value:function(e){var t=this.props.onOutsideClick,n=this.childNode&&(0,l.default)(this.childNode,e.target);this.removeMouseUp&&(this.removeMouseUp(),this.removeMouseUp=null),n||t(e)}},{key:"setChildNodeRef",value:function(e){this.childNode=e}},{key:"addMouseDownEventListener",value:function(e){this.removeMouseDown=(0,s.addEventListener)(document,"mousedown",this.onMouseDown,{capture:e})}},{key:"removeEventListeners",value:function(){this.removeMouseDown&&this.removeMouseDown(),this.removeMouseUp&&this.removeMouseUp()}},{key:"render",value:function(){var e=this.props,t=e.children,n=e.display;return a.default.createElement("div",{ref:this.setChildNodeRef,style:n!==h.BLOCK&&(0,u.default)(h).includes(n)?{display:n}:void 0},t)}}]),t}(a.default.Component);t.default=p,p.propTypes=_,p.defaultProps=m},function(e,t,n){"use strict";var r=n(17),a=n(209),o=n(210),i=o(),s=function(e,t){return i.apply(e,[t])};r(s,{getPolyfill:o,implementation:a,shim:n(301)}),e.exports=s},function(e,t,n){"use strict";var r=n(17),a=n(210);e.exports=function(){var e=a();return"undefined"!=typeof document&&(r(document,{contains:e},{contains:function(){return document.contains!==e}}),"undefined"!=typeof Element&&r(Element.prototype,{contains:e},{contains:function(){return Element.prototype.contains!==e}})),e}},function(e,t,n){var r=n(54),a=n(303),o=n(305),i=Math.max,s=Math.min;e.exports=function(e,t,n){var u,l,d,c,f,h,_=0,m=!1,p=!1,y=!0;if("function"!=typeof e)throw new TypeError("Expected a function");function v(t){var n=u,r=l;return u=l=void 0,_=t,c=e.apply(r,n)}function g(e){return _=e,f=setTimeout(M,t),m?v(e):c}function b(e){var n=e-h;return void 0===h||n>=t||n<0||p&&e-_>=d}function M(){var e=a();if(b(e))return D(e);f=setTimeout(M,function(e){var n=t-(e-h);return p?s(n,d-(e-_)):n}(e))}function D(e){return f=void 0,y&&u?v(e):(u=l=void 0,c)}function k(){var e=a(),n=b(e);if(u=arguments,l=this,h=e,n){if(void 0===f)return g(h);if(p)return clearTimeout(f),f=setTimeout(M,t),v(h)}return void 0===f&&(f=setTimeout(M,t)),c}return t=o(t)||0,r(n)&&(m=!!n.leading,d=(p="maxWait"in n)?i(o(n.maxWait)||0,t):d,y="trailing"in n?!!n.trailing:y),k.cancel=function(){void 0!==f&&clearTimeout(f),_=0,u=h=l=f=void 0},k.flush=function(){return void 0===f?c:D(a())},k}},function(e,t,n){var r=n(222);e.exports=function(){return r.Date.now()}},function(e,t,n){(function(t){var n="object"==typeof t&&t&&t.Object===Object&&t;e.exports=n}).call(this,n(25))},function(e,t,n){var r=n(54),a=n(306),o=/^\s+|\s+$/g,i=/^[-+]0x[0-9a-f]+$/i,s=/^0b[01]+$/i,u=/^0o[0-7]+$/i,l=parseInt;e.exports=function(e){if("number"==typeof e)return e;if(a(e))return NaN;if(r(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=r(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(o,"");var n=s.test(e);return n||u.test(e)?l(e.slice(2),n?2:8):i.test(e)?NaN:+e}},function(e,t,n){var r=n(307),a=n(310);e.exports=function(e){return"symbol"==typeof e||a(e)&&"[object Symbol]"==r(e)}},function(e,t,n){var r=n(223),a=n(308),o=n(309),i=r?r.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":i&&i in Object(e)?a(e):o(e)}},function(e,t,n){var r=n(223),a=Object.prototype,o=a.hasOwnProperty,i=a.toString,s=r?r.toStringTag:void 0;e.exports=function(e){var t=o.call(e,s),n=e[s];try{e[s]=void 0;var r=!0}catch(e){}var a=i.call(e);return r&&(t?e[s]=n:delete e[s]),a}},function(e,t){var n=Object.prototype.toString;e.exports=function(e){return n.call(e)}},function(e,t){e.exports=function(e){return null!=e&&"object"==typeof e}},function(e,t){e.exports=function(e){if(Array.isArray(e))return e}},function(e,t){e.exports=function(e,t){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e)){var n=[],r=!0,a=!1,o=void 0;try{for(var i,s=e[Symbol.iterator]();!(r=(i=s.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){a=!0,o=e}finally{try{r||null==s.return||s.return()}finally{if(a)throw o}}return n}}},function(e,t){e.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(!a.default.isMoment(e)||!a.default.isMoment(t))return!1;var n=(0,a.default)(e).subtract(1,"day");return(0,o.default)(n,t)};var a=r(n(1)),o=r(n(21))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:r;return e?n(e(t.clone())):t};var r=function(e){return e}},function(e,t,n){"use strict";var r,a;Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){e!==r&&(r=e,a=e.clone().subtract(1,"month"));return a}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(11)),o=r(n(12)),i=r(n(50)),s=r(n(8)),u=(r(n(7)),r(n(0))),l=(r(n(3)),n(6),n(14)),d=n(9),c=(r(n(10)),r(n(19))),f=r(n(225)),h=r(n(224)),_=r(n(318)),m=r(n(319)),p=(r(n(31)),r(n(28)),n(4));var y={disablePrev:!1,disableNext:!1,inlineStyles:null,isRTL:!1,navPosition:p.NAV_POSITION_TOP,navPrev:null,navNext:null,orientation:p.HORIZONTAL_ORIENTATION,onPrevMonthClick:function(){},onNextMonthClick:function(){},phrases:d.DayPickerNavigationPhrases,renderNavPrevButton:null,renderNavNextButton:null,showNavPrevButton:!0,showNavNextButton:!0},v=function(e){function t(){return e.apply(this,arguments)||this}(0,s.default)(t,e);var n=t.prototype;return n[!u.default.PureComponent&&"shouldComponentUpdate"]=function(e,t){return!(0,a.default)(this.props,e)||!(0,a.default)(this.state,t)},n.render=function(){var e=this.props,t=e.inlineStyles,n=e.isRTL,r=e.disablePrev,a=e.disableNext,s=e.navPosition,d=e.navPrev,c=e.navNext,y=e.onPrevMonthClick,v=e.onNextMonthClick,g=e.orientation,b=e.phrases,M=e.renderNavPrevButton,D=e.renderNavNextButton,k=e.showNavPrevButton,L=e.showNavNextButton,w=e.styles;if(!L&&!k)return null;var T=g===p.HORIZONTAL_ORIENTATION,S=g!==p.HORIZONTAL_ORIENTATION,Y=g===p.VERTICAL_SCROLLABLE,P=s===p.NAV_POSITION_BOTTOM,O=!!t,E=d,x=c,C=!1,j=!1,H={},I={};if(!E&&!M&&k){H={tabIndex:"0"},C=!0;var N=S?_.default:f.default;n&&!S&&(N=h.default),E=u.default.createElement(N,(0,l.css)(T&&w.DayPickerNavigation_svg__horizontal,S&&w.DayPickerNavigation_svg__vertical,r&&w.DayPickerNavigation_svg__disabled))}if(!x&&!D&&L){I={tabIndex:"0"},j=!0;var A=S?m.default:h.default;n&&!S&&(A=f.default),x=u.default.createElement(A,(0,l.css)(T&&w.DayPickerNavigation_svg__horizontal,S&&w.DayPickerNavigation_svg__vertical,a&&w.DayPickerNavigation_svg__disabled))}var F=j||C;return u.default.createElement("div",l.css.apply(void 0,[w.DayPickerNavigation,T&&w.DayPickerNavigation__horizontal].concat((0,i.default)(S?[w.DayPickerNavigation__vertical,F&&w.DayPickerNavigation__verticalDefault]:[]),(0,i.default)(Y?[w.DayPickerNavigation__verticalScrollable,F&&w.DayPickerNavigation__verticalScrollableDefault,k&&w.DayPickerNavigation__verticalScrollable_prevNav]:[]),(0,i.default)(P?[w.DayPickerNavigation__bottom,F&&w.DayPickerNavigation__bottomDefault]:[]),[O&&t])),k&&(M?M({ariaLabel:b.jumpToPrevMonth,disabled:r,onClick:r?void 0:y,onKeyUp:r?void 0:function(e){var t=e.key;"Enter"!==t&&" "!==t||y(e)},onMouseUp:r?void 0:function(e){e.currentTarget.blur()}}):u.default.createElement("div",(0,o.default)({role:"button"},H,l.css.apply(void 0,[w.DayPickerNavigation_button,C&&w.DayPickerNavigation_button__default,r&&w.DayPickerNavigation_button__disabled].concat((0,i.default)(T?[w.DayPickerNavigation_button__horizontal].concat((0,i.default)(C?[w.DayPickerNavigation_button__horizontalDefault,P&&w.DayPickerNavigation_bottomButton__horizontalDefault,!n&&w.DayPickerNavigation_leftButton__horizontalDefault,n&&w.DayPickerNavigation_rightButton__horizontalDefault]:[])):[]),(0,i.default)(S?[w.DayPickerNavigation_button__vertical].concat((0,i.default)(C?[w.DayPickerNavigation_button__verticalDefault,w.DayPickerNavigation_prevButton__verticalDefault,Y&&w.DayPickerNavigation_prevButton__verticalScrollableDefault]:[])):[]))),{"aria-disabled":!!r||void 0,"aria-label":b.jumpToPrevMonth,onClick:r?void 0:y,onKeyUp:r?void 0:function(e){var t=e.key;"Enter"!==t&&" "!==t||y(e)},onMouseUp:r?void 0:function(e){e.currentTarget.blur()}}),E)),L&&(D?D({ariaLabel:b.jumpToNextMonth,disabled:a,onClick:a?void 0:v,onKeyUp:a?void 0:function(e){var t=e.key;"Enter"!==t&&" "!==t||v(e)},onMouseUp:a?void 0:function(e){e.currentTarget.blur()}}):u.default.createElement("div",(0,o.default)({role:"button"},I,l.css.apply(void 0,[w.DayPickerNavigation_button,j&&w.DayPickerNavigation_button__default,a&&w.DayPickerNavigation_button__disabled].concat((0,i.default)(T?[w.DayPickerNavigation_button__horizontal].concat((0,i.default)(j?[w.DayPickerNavigation_button__horizontalDefault,P&&w.DayPickerNavigation_bottomButton__horizontalDefault,n&&w.DayPickerNavigation_leftButton__horizontalDefault,!n&&w.DayPickerNavigation_rightButton__horizontalDefault]:[])):[]),(0,i.default)(S?[w.DayPickerNavigation_button__vertical].concat((0,i.default)(j?[w.DayPickerNavigation_button__verticalDefault,w.DayPickerNavigation_nextButton__verticalDefault,Y&&w.DayPickerNavigation_nextButton__verticalScrollableDefault]:[])):[]))),{"aria-disabled":!!a||void 0,"aria-label":b.jumpToNextMonth,onClick:a?void 0:v,onKeyUp:a?void 0:function(e){var t=e.key;"Enter"!==t&&" "!==t||v(e)},onMouseUp:a?void 0:function(e){e.currentTarget.blur()}}),x)))},t}(u.default.PureComponent||u.default.Component);v.propTypes={},v.defaultProps=y;var g=(0,l.withStyles)((function(e){var t=e.reactDates,n=t.color,r=t.zIndex;return{DayPickerNavigation:{position:"relative",zIndex:r+2},DayPickerNavigation__horizontal:{height:0},DayPickerNavigation__vertical:{},DayPickerNavigation__verticalScrollable:{},DayPickerNavigation__verticalScrollable_prevNav:{zIndex:r+1},DayPickerNavigation__verticalDefault:{position:"absolute",width:"100%",height:52,bottom:0,left:(0,c.default)(0)},DayPickerNavigation__verticalScrollableDefault:{position:"relative"},DayPickerNavigation__bottom:{height:"auto"},DayPickerNavigation__bottomDefault:{display:"flex",justifyContent:"space-between"},DayPickerNavigation_button:{cursor:"pointer",userSelect:"none",border:0,padding:0,margin:0},DayPickerNavigation_button__default:{border:"1px solid ".concat(n.core.borderLight),backgroundColor:n.background,color:n.placeholderText,":focus":{border:"1px solid ".concat(n.core.borderMedium)},":hover":{border:"1px solid ".concat(n.core.borderMedium)},":active":{background:n.backgroundDark}},DayPickerNavigation_button__disabled:{cursor:"default",border:"1px solid ".concat(n.disabled),":focus":{border:"1px solid ".concat(n.disabled)},":hover":{border:"1px solid ".concat(n.disabled)},":active":{background:"none"}},DayPickerNavigation_button__horizontal:{},DayPickerNavigation_button__horizontalDefault:{position:"absolute",top:18,lineHeight:.78,borderRadius:3,padding:"6px 9px"},DayPickerNavigation_bottomButton__horizontalDefault:{position:"static",marginLeft:22,marginRight:22,marginBottom:30,marginTop:-10},DayPickerNavigation_leftButton__horizontalDefault:{left:(0,c.default)(22)},DayPickerNavigation_rightButton__horizontalDefault:{right:(0,c.default)(22)},DayPickerNavigation_button__vertical:{},DayPickerNavigation_button__verticalDefault:{padding:5,background:n.background,boxShadow:(0,c.default)("0 0 5px 2px rgba(0, 0, 0, 0.1)"),position:"relative",display:"inline-block",textAlign:"center",height:"100%",width:"50%"},DayPickerNavigation_prevButton__verticalDefault:{},DayPickerNavigation_nextButton__verticalDefault:{borderLeft:(0,c.default)(0)},DayPickerNavigation_nextButton__verticalScrollableDefault:{width:"100%"},DayPickerNavigation_prevButton__verticalScrollableDefault:{width:"100%"},DayPickerNavigation_svg__horizontal:{height:19,width:19,fill:n.core.grayLight,display:"block"},DayPickerNavigation_svg__vertical:{height:42,width:42,fill:n.text},DayPickerNavigation_svg__disabled:{fill:n.disabled}}}),{pureComponent:void 0!==u.default.PureComponent})(v);t.default=g},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(0)),o=function(e){return a.default.createElement("svg",e,a.default.createElement("path",{d:"M32 713l453-453c11-11 21-11 32 0l453 453c5 5 7 10 7 16 0 13-10 23-22 23-7 0-12-2-16-7L501 309 64 745c-4 5-9 7-15 7-7 0-12-2-17-7-9-11-9-21 0-32z"}))};o.defaultProps={focusable:"false",viewBox:"0 0 1000 1000"};var i=o;t.default=i},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(0)),o=function(e){return a.default.createElement("svg",e,a.default.createElement("path",{d:"M968 289L514 741c-11 11-21 11-32 0L29 289c-4-5-6-11-6-16 0-13 10-23 23-23 6 0 11 2 15 7l437 436 438-436c4-5 9-7 16-7 6 0 11 2 16 7 9 10 9 21 0 32z"}))};o.defaultProps={focusable:"false",viewBox:"0 0 1000 1000"};var i=o;t.default=i},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.BOTTOM_RIGHT=t.TOP_RIGHT=t.TOP_LEFT=void 0;var a=r(n(11)),o=r(n(12)),i=r(n(13)),s=r(n(8)),u=(r(n(7)),r(n(0))),l=(r(n(3)),n(6),n(14)),d=n(9),c=(r(n(10)),r(n(321))),f=r(n(37));t.TOP_LEFT="top-left";t.TOP_RIGHT="top-right";t.BOTTOM_RIGHT="bottom-right";var h={block:!1,buttonLocation:"bottom-right",showKeyboardShortcutsPanel:!1,openKeyboardShortcutsPanel:function(){},closeKeyboardShortcutsPanel:function(){},phrases:d.DayPickerKeyboardShortcutsPhrases,renderKeyboardShortcutsButton:void 0,renderKeyboardShortcutsPanel:void 0};function _(e){return[{unicode:"↵",label:e.enterKey,action:e.selectFocusedDate},{unicode:"←/→",label:e.leftArrowRightArrow,action:e.moveFocusByOneDay},{unicode:"↑/↓",label:e.upArrowDownArrow,action:e.moveFocusByOneWeek},{unicode:"PgUp/PgDn",label:e.pageUpPageDown,action:e.moveFocusByOneMonth},{unicode:"Home/End",label:e.homeEnd,action:e.moveFocustoStartAndEndOfWeek},{unicode:"Esc",label:e.escape,action:e.returnFocusToInput},{unicode:"?",label:e.questionMark,action:e.openThisPanel}]}var m=function(e){(0,s.default)(n,e);var t=n.prototype;function n(){for(var t,n=arguments.length,r=new Array(n),a=0;a<n;a++)r[a]=arguments[a];var o=(t=e.call.apply(e,[this].concat(r))||this).props.phrases;return t.keyboardShortcuts=_(o),t.onShowKeyboardShortcutsButtonClick=t.onShowKeyboardShortcutsButtonClick.bind((0,i.default)(t)),t.setShowKeyboardShortcutsButtonRef=t.setShowKeyboardShortcutsButtonRef.bind((0,i.default)(t)),t.setHideKeyboardShortcutsButtonRef=t.setHideKeyboardShortcutsButtonRef.bind((0,i.default)(t)),t.handleFocus=t.handleFocus.bind((0,i.default)(t)),t.onKeyDown=t.onKeyDown.bind((0,i.default)(t)),t}return t[!u.default.PureComponent&&"shouldComponentUpdate"]=function(e,t){return!(0,a.default)(this.props,e)||!(0,a.default)(this.state,t)},t.componentWillReceiveProps=function(e){var t=this.props.phrases;e.phrases!==t&&(this.keyboardShortcuts=_(e.phrases))},t.componentDidUpdate=function(){this.handleFocus()},t.onKeyDown=function(e){e.stopPropagation();var t=this.props.closeKeyboardShortcutsPanel;switch(e.key){case"Escape":t();break;case"ArrowUp":case"ArrowDown":break;case"Tab":case"Home":case"End":case"PageUp":case"PageDown":case"ArrowLeft":case"ArrowRight":e.preventDefault()}},t.onShowKeyboardShortcutsButtonClick=function(){var e=this;(0,this.props.openKeyboardShortcutsPanel)((function(){e.showKeyboardShortcutsButton.focus()}))},t.setShowKeyboardShortcutsButtonRef=function(e){this.showKeyboardShortcutsButton=e},t.setHideKeyboardShortcutsButtonRef=function(e){this.hideKeyboardShortcutsButton=e},t.handleFocus=function(){this.hideKeyboardShortcutsButton&&this.hideKeyboardShortcutsButton.focus()},t.render=function(){var e=this.props,t=e.block,n=e.buttonLocation,r=e.showKeyboardShortcutsPanel,a=e.closeKeyboardShortcutsPanel,i=e.styles,s=e.phrases,d=e.renderKeyboardShortcutsButton,h=e.renderKeyboardShortcutsPanel,_=r?s.hideKeyboardShortcutsPanel:s.showKeyboardShortcutsPanel,m="bottom-right"===n,p="top-right"===n,y="top-left"===n;return u.default.createElement("div",null,d&&d({ref:this.setShowKeyboardShortcutsButtonRef,onClick:this.onShowKeyboardShortcutsButtonClick,ariaLabel:_}),!d&&u.default.createElement("button",(0,o.default)({ref:this.setShowKeyboardShortcutsButtonRef},(0,l.css)(i.DayPickerKeyboardShortcuts_buttonReset,i.DayPickerKeyboardShortcuts_show,m&&i.DayPickerKeyboardShortcuts_show__bottomRight,p&&i.DayPickerKeyboardShortcuts_show__topRight,y&&i.DayPickerKeyboardShortcuts_show__topLeft),{type:"button","aria-label":_,onClick:this.onShowKeyboardShortcutsButtonClick,onMouseUp:function(e){e.currentTarget.blur()}}),u.default.createElement("span",(0,l.css)(i.DayPickerKeyboardShortcuts_showSpan,m&&i.DayPickerKeyboardShortcuts_showSpan__bottomRight,p&&i.DayPickerKeyboardShortcuts_showSpan__topRight,y&&i.DayPickerKeyboardShortcuts_showSpan__topLeft),"?")),r&&(h?h({closeButtonAriaLabel:s.hideKeyboardShortcutsPanel,keyboardShortcuts:this.keyboardShortcuts,onCloseButtonClick:a,onKeyDown:this.onKeyDown,title:s.keyboardShortcuts}):u.default.createElement("div",(0,o.default)({},(0,l.css)(i.DayPickerKeyboardShortcuts_panel),{role:"dialog","aria-labelledby":"DayPickerKeyboardShortcuts_title","aria-describedby":"DayPickerKeyboardShortcuts_description"}),u.default.createElement("div",(0,o.default)({},(0,l.css)(i.DayPickerKeyboardShortcuts_title),{id:"DayPickerKeyboardShortcuts_title"}),s.keyboardShortcuts),u.default.createElement("button",(0,o.default)({ref:this.setHideKeyboardShortcutsButtonRef},(0,l.css)(i.DayPickerKeyboardShortcuts_buttonReset,i.DayPickerKeyboardShortcuts_close),{type:"button",tabIndex:"0","aria-label":s.hideKeyboardShortcutsPanel,onClick:a,onKeyDown:this.onKeyDown}),u.default.createElement(f.default,(0,l.css)(i.DayPickerKeyboardShortcuts_closeSvg))),u.default.createElement("ul",(0,o.default)({},(0,l.css)(i.DayPickerKeyboardShortcuts_list),{id:"DayPickerKeyboardShortcuts_description"}),this.keyboardShortcuts.map((function(e){var n=e.unicode,r=e.label,a=e.action;return u.default.createElement(c.default,{key:r,unicode:n,label:r,action:a,block:t})}))))))},n}(u.default.PureComponent||u.default.Component);m.propTypes={},m.defaultProps=h;var p=(0,l.withStyles)((function(e){var t=e.reactDates,n=t.color,r=t.font,a=t.zIndex;return{DayPickerKeyboardShortcuts_buttonReset:{background:"none",border:0,borderRadius:0,color:"inherit",font:"inherit",lineHeight:"normal",overflow:"visible",padding:0,cursor:"pointer",fontSize:r.size,":active":{outline:"none"}},DayPickerKeyboardShortcuts_show:{width:33,height:26,position:"absolute",zIndex:a+2,"::before":{content:'""',display:"block",position:"absolute"}},DayPickerKeyboardShortcuts_show__bottomRight:{bottom:0,right:0,"::before":{borderTop:"26px solid transparent",borderRight:"33px solid ".concat(n.core.primary),bottom:0,right:0},":hover::before":{borderRight:"33px solid ".concat(n.core.primary_dark)}},DayPickerKeyboardShortcuts_show__topRight:{top:0,right:0,"::before":{borderBottom:"26px solid transparent",borderRight:"33px solid ".concat(n.core.primary),top:0,right:0},":hover::before":{borderRight:"33px solid ".concat(n.core.primary_dark)}},DayPickerKeyboardShortcuts_show__topLeft:{top:0,left:0,"::before":{borderBottom:"26px solid transparent",borderLeft:"33px solid ".concat(n.core.primary),top:0,left:0},":hover::before":{borderLeft:"33px solid ".concat(n.core.primary_dark)}},DayPickerKeyboardShortcuts_showSpan:{color:n.core.white,position:"absolute"},DayPickerKeyboardShortcuts_showSpan__bottomRight:{bottom:0,right:5},DayPickerKeyboardShortcuts_showSpan__topRight:{top:1,right:5},DayPickerKeyboardShortcuts_showSpan__topLeft:{top:1,left:5},DayPickerKeyboardShortcuts_panel:{overflow:"auto",background:n.background,border:"1px solid ".concat(n.core.border),borderRadius:2,position:"absolute",top:0,bottom:0,right:0,left:0,zIndex:a+2,padding:22,margin:33,textAlign:"left"},DayPickerKeyboardShortcuts_title:{fontSize:16,fontWeight:"bold",margin:0},DayPickerKeyboardShortcuts_list:{listStyle:"none",padding:0,fontSize:r.size},DayPickerKeyboardShortcuts_close:{position:"absolute",right:22,top:22,zIndex:a+2,":active":{outline:"none"}},DayPickerKeyboardShortcuts_closeSvg:{height:15,width:15,fill:n.core.grayLighter,":hover":{fill:n.core.grayLight},":focus":{fill:n.core.grayLight}}}}),{pureComponent:void 0!==u.default.PureComponent})(m);t.default=p},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(12)),o=(r(n(7)),r(n(0))),i=(r(n(3)),n(6),n(14));function s(e){var t=e.unicode,n=e.label,r=e.action,s=e.block,u=e.styles;return o.default.createElement("li",(0,i.css)(u.KeyboardShortcutRow,s&&u.KeyboardShortcutRow__block),o.default.createElement("div",(0,i.css)(u.KeyboardShortcutRow_keyContainer,s&&u.KeyboardShortcutRow_keyContainer__block),o.default.createElement("span",(0,a.default)({},(0,i.css)(u.KeyboardShortcutRow_key),{role:"img","aria-label":"".concat(n,",")}),t)),o.default.createElement("div",(0,i.css)(u.KeyboardShortcutRow_action),r))}s.propTypes={},s.defaultProps={block:!1};var u=(0,i.withStyles)((function(e){return{KeyboardShortcutRow:{listStyle:"none",margin:"6px 0"},KeyboardShortcutRow__block:{marginBottom:16},KeyboardShortcutRow_keyContainer:{display:"inline-block",whiteSpace:"nowrap",textAlign:"right",marginRight:6},KeyboardShortcutRow_keyContainer__block:{textAlign:"left",display:"inline"},KeyboardShortcutRow_key:{fontFamily:"monospace",fontSize:12,textTransform:"uppercase",background:e.reactDates.color.core.grayLightest,padding:"2px 6px"},KeyboardShortcutRow_action:{display:"inline",wordBreak:"break-word",marginLeft:8}}}),{pureComponent:void 0!==o.default.PureComponent})(s);t.default=u},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:a.default.localeData().firstDayOfWeek(),n=e.clone().startOf("month"),r=o(n,t);return Math.ceil((r+e.daysInMonth())/7)};var a=r(n(1));function o(e,t){return(e.day()-t+7)%7}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){return"undefined"!=typeof document&&document.activeElement}},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.PureSingleDatePicker=void 0;var a=r(n(11)),o=r(n(12)),i=r(n(13)),s=r(n(8)),u=r(n(7)),l=r(n(0)),d=r(n(1)),c=n(14),f=n(247),h=(n(6),n(43)),_=r(n(29)),m=r(n(52)),p=(r(n(234)),n(9)),y=r(n(215)),v=r(n(216)),g=r(n(53)),b=r(n(32)),M=r(n(217)),D=r(n(19)),k=r(n(325)),L=r(n(233)),w=r(n(37)),T=n(4);function S(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Y(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?S(Object(n),!0).forEach((function(t){(0,u.default)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):S(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var P={date:null,focused:!1,id:"date",placeholder:"Date",ariaLabel:void 0,disabled:!1,required:!1,readOnly:!1,screenReaderInputMessage:"",showClearDate:!1,showDefaultInputIcon:!1,inputIconPosition:T.ICON_BEFORE_POSITION,customInputIcon:null,customCloseIcon:null,noBorder:!1,block:!1,small:!1,regular:!1,verticalSpacing:T.DEFAULT_VERTICAL_SPACING,keepFocusOnInput:!1,orientation:T.HORIZONTAL_ORIENTATION,anchorDirection:T.ANCHOR_LEFT,openDirection:T.OPEN_DOWN,horizontalMargin:0,withPortal:!1,withFullScreenPortal:!1,appendToBody:!1,disableScroll:!1,initialVisibleMonth:null,firstDayOfWeek:null,numberOfMonths:2,keepOpenOnDateSelect:!1,reopenPickerOnClearDate:!1,renderCalendarInfo:null,calendarInfoPosition:T.INFO_POSITION_BOTTOM,hideKeyboardShortcutsPanel:!1,daySize:T.DAY_SIZE,isRTL:!1,verticalHeight:null,transitionDuration:void 0,horizontalMonthPadding:13,dayPickerNavigationInlineStyles:null,navPosition:T.NAV_POSITION_TOP,navPrev:null,navNext:null,renderNavPrevButton:null,renderNavNextButton:null,onPrevMonthClick:function(){},onNextMonthClick:function(){},onClose:function(){},renderMonthText:null,renderWeekHeaderElement:null,renderCalendarDay:void 0,renderDayContents:null,renderMonthElement:null,enableOutsideDays:!1,isDayBlocked:function(){return!1},isOutsideRange:function(e){return!(0,b.default)(e,(0,d.default)())},isDayHighlighted:function(){},displayFormat:function(){return d.default.localeData().longDateFormat("L")},monthFormat:"MMMM YYYY",weekDayFormat:"dd",phrases:p.SingleDatePickerPhrases,dayAriaLabelFormat:void 0},O=function(e){(0,s.default)(n,e);var t=n.prototype;function n(t){var n;return(n=e.call(this,t)||this).isTouchDevice=!1,n.state={dayPickerContainerStyles:{},isDayPickerFocused:!1,isInputFocused:!1,showKeyboardShortcuts:!1},n.onFocusOut=n.onFocusOut.bind((0,i.default)(n)),n.onOutsideClick=n.onOutsideClick.bind((0,i.default)(n)),n.onInputFocus=n.onInputFocus.bind((0,i.default)(n)),n.onDayPickerFocus=n.onDayPickerFocus.bind((0,i.default)(n)),n.onDayPickerBlur=n.onDayPickerBlur.bind((0,i.default)(n)),n.showKeyboardShortcutsPanel=n.showKeyboardShortcutsPanel.bind((0,i.default)(n)),n.responsivizePickerPosition=n.responsivizePickerPosition.bind((0,i.default)(n)),n.disableScroll=n.disableScroll.bind((0,i.default)(n)),n.setDayPickerContainerRef=n.setDayPickerContainerRef.bind((0,i.default)(n)),n.setContainerRef=n.setContainerRef.bind((0,i.default)(n)),n}return t[!l.default.PureComponent&&"shouldComponentUpdate"]=function(e,t){return!(0,a.default)(this.props,e)||!(0,a.default)(this.state,t)},t.componentDidMount=function(){this.removeResizeEventListener=(0,h.addEventListener)(window,"resize",this.responsivizePickerPosition,{passive:!0}),this.responsivizePickerPosition(),this.disableScroll(),this.props.focused&&this.setState({isInputFocused:!0}),this.isTouchDevice=(0,_.default)()},t.componentDidUpdate=function(e){var t=this.props.focused;!e.focused&&t?(this.responsivizePickerPosition(),this.disableScroll()):e.focused&&!t&&this.enableScroll&&this.enableScroll()},t.componentWillUnmount=function(){this.removeResizeEventListener&&this.removeResizeEventListener(),this.removeFocusOutEventListener&&this.removeFocusOutEventListener(),this.enableScroll&&this.enableScroll()},t.onOutsideClick=function(e){var t=this.props,n=t.focused,r=t.onFocusChange,a=t.onClose,o=t.date,i=t.appendToBody;n&&(i&&this.dayPickerContainer.contains(e.target)||(this.setState({isInputFocused:!1,isDayPickerFocused:!1,showKeyboardShortcuts:!1}),r({focused:!1}),a({date:o})))},t.onInputFocus=function(e){var t=e.focused,n=this.props,r=n.onFocusChange,a=n.readOnly,o=n.withPortal,i=n.withFullScreenPortal,s=n.keepFocusOnInput;t&&(o||i||a&&!s||this.isTouchDevice&&!s?this.onDayPickerFocus():this.onDayPickerBlur());r({focused:t})},t.onDayPickerFocus=function(){this.setState({isInputFocused:!1,isDayPickerFocused:!0,showKeyboardShortcuts:!1})},t.onDayPickerBlur=function(){this.setState({isInputFocused:!0,isDayPickerFocused:!1,showKeyboardShortcuts:!1})},t.onFocusOut=function(e){var t=this.props.onFocusChange,n=e.relatedTarget===document.body?e.target:e.relatedTarget||e.target;this.dayPickerContainer.contains(n)||t({focused:!1})},t.setDayPickerContainerRef=function(e){e!==this.dayPickerContainer&&(this.removeEventListeners(),this.dayPickerContainer=e,e&&this.addEventListeners())},t.setContainerRef=function(e){this.container=e},t.addEventListeners=function(){this.removeFocusOutEventListener=(0,h.addEventListener)(this.dayPickerContainer,"focusout",this.onFocusOut)},t.removeEventListeners=function(){this.removeFocusOutEventListener&&this.removeFocusOutEventListener()},t.disableScroll=function(){var e=this.props,t=e.appendToBody,n=e.disableScroll,r=e.focused;(t||n)&&r&&(this.enableScroll=(0,M.default)(this.container))},t.responsivizePickerPosition=function(){this.setState({dayPickerContainerStyles:{}});var e=this.props,t=e.openDirection,n=e.anchorDirection,r=e.horizontalMargin,a=e.withPortal,o=e.withFullScreenPortal,i=e.appendToBody,s=e.focused,u=this.state.dayPickerContainerStyles;if(s){var l=n===T.ANCHOR_LEFT;if(!a&&!o){var d=this.dayPickerContainer.getBoundingClientRect(),c=u[n]||0,f=l?d[T.ANCHOR_RIGHT]:d[T.ANCHOR_LEFT];this.setState({dayPickerContainerStyles:Y({},(0,y.default)(n,c,f,r),{},i&&(0,v.default)(t,n,this.container))})}}},t.showKeyboardShortcutsPanel=function(){this.setState({isInputFocused:!1,isDayPickerFocused:!0,showKeyboardShortcuts:!0})},t.maybeRenderDayPickerWithPortal=function(){var e=this.props,t=e.focused,n=e.withPortal,r=e.withFullScreenPortal,a=e.appendToBody;return t?n||r||a?l.default.createElement(f.Portal,null,this.renderDayPicker()):this.renderDayPicker():null},t.renderDayPicker=function(){var e=this.props,t=e.anchorDirection,n=e.openDirection,r=e.onDateChange,a=e.date,i=e.onFocusChange,s=e.focused,u=e.enableOutsideDays,d=e.numberOfMonths,f=e.orientation,h=e.monthFormat,_=e.dayPickerNavigationInlineStyles,m=e.navPosition,p=e.navPrev,y=e.navNext,v=e.renderNavPrevButton,b=e.renderNavNextButton,M=e.onPrevMonthClick,D=e.onNextMonthClick,k=e.onClose,S=e.withPortal,Y=e.withFullScreenPortal,P=e.keepOpenOnDateSelect,O=e.initialVisibleMonth,E=e.renderMonthText,x=e.renderWeekHeaderElement,C=e.renderCalendarDay,j=e.renderDayContents,H=e.renderCalendarInfo,I=e.renderMonthElement,N=e.calendarInfoPosition,A=e.hideKeyboardShortcutsPanel,F=e.firstDayOfWeek,R=e.customCloseIcon,W=e.phrases,z=e.dayAriaLabelFormat,B=e.daySize,K=e.isRTL,U=e.isOutsideRange,V=e.isDayBlocked,G=e.isDayHighlighted,J=e.weekDayFormat,$=e.styles,q=e.verticalHeight,Q=e.transitionDuration,Z=e.verticalSpacing,X=e.horizontalMonthPadding,ee=e.small,te=e.theme.reactDates,ne=this.state,re=ne.dayPickerContainerStyles,ae=ne.isDayPickerFocused,oe=ne.showKeyboardShortcuts,ie=!Y&&S?this.onOutsideClick:void 0,se=R||l.default.createElement(w.default,null),ue=(0,g.default)(te,ee),le=S||Y;return l.default.createElement("div",(0,o.default)({ref:this.setDayPickerContainerRef},(0,c.css)($.SingleDatePicker_picker,t===T.ANCHOR_LEFT&&$.SingleDatePicker_picker__directionLeft,t===T.ANCHOR_RIGHT&&$.SingleDatePicker_picker__directionRight,n===T.OPEN_DOWN&&$.SingleDatePicker_picker__openDown,n===T.OPEN_UP&&$.SingleDatePicker_picker__openUp,!le&&n===T.OPEN_DOWN&&{top:ue+Z},!le&&n===T.OPEN_UP&&{bottom:ue+Z},f===T.HORIZONTAL_ORIENTATION&&$.SingleDatePicker_picker__horizontal,f===T.VERTICAL_ORIENTATION&&$.SingleDatePicker_picker__vertical,le&&$.SingleDatePicker_picker__portal,Y&&$.SingleDatePicker_picker__fullScreenPortal,K&&$.SingleDatePicker_picker__rtl,re),{onClick:ie}),l.default.createElement(L.default,{date:a,onDateChange:r,onFocusChange:i,orientation:f,enableOutsideDays:u,numberOfMonths:d,monthFormat:h,withPortal:le,focused:s,keepOpenOnDateSelect:P,hideKeyboardShortcutsPanel:A,initialVisibleMonth:O,dayPickerNavigationInlineStyles:_,navPosition:m,navPrev:p,navNext:y,renderNavPrevButton:v,renderNavNextButton:b,onPrevMonthClick:M,onNextMonthClick:D,onClose:k,renderMonthText:E,renderWeekHeaderElement:x,renderCalendarDay:C,renderDayContents:j,renderCalendarInfo:H,renderMonthElement:I,calendarInfoPosition:N,isFocused:ae,showKeyboardShortcuts:oe,onBlur:this.onDayPickerBlur,phrases:W,dayAriaLabelFormat:z,daySize:B,isRTL:K,isOutsideRange:U,isDayBlocked:V,isDayHighlighted:G,firstDayOfWeek:F,weekDayFormat:J,verticalHeight:q,transitionDuration:Q,horizontalMonthPadding:X}),Y&&l.default.createElement("button",(0,o.default)({},(0,c.css)($.SingleDatePicker_closeButton),{"aria-label":W.closeDatePicker,type:"button",onClick:this.onOutsideClick}),l.default.createElement("div",(0,c.css)($.SingleDatePicker_closeButton_svg),se)))},t.render=function(){var e=this.props,t=e.id,n=e.placeholder,r=e.ariaLabel,a=e.disabled,i=e.focused,s=e.required,u=e.readOnly,d=e.openDirection,f=e.showClearDate,h=e.showDefaultInputIcon,_=e.inputIconPosition,p=e.customCloseIcon,y=e.customInputIcon,v=e.date,g=e.onDateChange,b=e.displayFormat,M=e.phrases,D=e.withPortal,L=e.withFullScreenPortal,w=e.screenReaderInputMessage,S=e.isRTL,Y=e.noBorder,P=e.block,O=e.small,E=e.regular,x=e.verticalSpacing,C=e.reopenPickerOnClearDate,j=e.keepOpenOnDateSelect,H=e.styles,I=e.isOutsideRange,N=this.state.isInputFocused,A=!D&&!L,F=x<T.FANG_HEIGHT_PX,R=l.default.createElement(k.default,{id:t,placeholder:n,ariaLabel:r,focused:i,isFocused:N,disabled:a,required:s,readOnly:u,openDirection:d,showCaret:!D&&!L&&!F,showClearDate:f,showDefaultInputIcon:h,inputIconPosition:_,isOutsideRange:I,customCloseIcon:p,customInputIcon:y,date:v,onDateChange:g,displayFormat:b,onFocusChange:this.onInputFocus,onKeyDownArrowDown:this.onDayPickerFocus,onKeyDownQuestionMark:this.showKeyboardShortcutsPanel,screenReaderMessage:w,phrases:M,isRTL:S,noBorder:Y,block:P,small:O,regular:E,verticalSpacing:x,reopenPickerOnClearDate:C,keepOpenOnDateSelect:j},this.maybeRenderDayPickerWithPortal());return l.default.createElement("div",(0,o.default)({ref:this.setContainerRef},(0,c.css)(H.SingleDatePicker,P&&H.SingleDatePicker__block)),A&&l.default.createElement(m.default,{onOutsideClick:this.onOutsideClick},R),A||R)},n}(l.default.PureComponent||l.default.Component);t.PureSingleDatePicker=O,O.propTypes={},O.defaultProps=P;var E=(0,c.withStyles)((function(e){var t=e.reactDates,n=t.color,r=t.zIndex;return{SingleDatePicker:{position:"relative",display:"inline-block"},SingleDatePicker__block:{display:"block"},SingleDatePicker_picker:{zIndex:r+1,backgroundColor:n.background,position:"absolute"},SingleDatePicker_picker__rtl:{direction:(0,D.default)("rtl")},SingleDatePicker_picker__directionLeft:{left:(0,D.default)(0)},SingleDatePicker_picker__directionRight:{right:(0,D.default)(0)},SingleDatePicker_picker__portal:{backgroundColor:"rgba(0, 0, 0, 0.3)",position:"fixed",top:0,left:(0,D.default)(0),height:"100%",width:"100%"},SingleDatePicker_picker__fullScreenPortal:{backgroundColor:n.background},SingleDatePicker_closeButton:{background:"none",border:0,color:"inherit",font:"inherit",lineHeight:"normal",overflow:"visible",cursor:"pointer",position:"absolute",top:0,right:(0,D.default)(0),padding:15,zIndex:r+2,":hover":{color:"darken(".concat(n.core.grayLighter,", 10%)"),textDecoration:"none"},":focus":{color:"darken(".concat(n.core.grayLighter,", 10%)"),textDecoration:"none"}},SingleDatePicker_closeButton_svg:{height:15,width:15,fill:n.core.grayLighter}}}),{pureComponent:void 0!==l.default.PureComponent})(O);t.default=E},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(11)),o=r(n(13)),i=r(n(8)),s=r(n(0)),u=(r(n(3)),r(n(1))),l=(r(n(16)),n(6),r(n(23)),n(9)),d=(r(n(10)),r(n(235))),c=(r(n(30)),r(n(34)),r(n(27))),f=r(n(55)),h=r(n(32)),_=n(4),m={children:null,date:null,focused:!1,placeholder:"",ariaLabel:void 0,screenReaderMessage:"Date",showClearDate:!1,showCaret:!1,showDefaultInputIcon:!1,inputIconPosition:_.ICON_BEFORE_POSITION,disabled:!1,required:!1,readOnly:!1,openDirection:_.OPEN_DOWN,noBorder:!1,block:!1,small:!1,regular:!1,verticalSpacing:void 0,keepOpenOnDateSelect:!1,reopenPickerOnClearDate:!1,isOutsideRange:function(e){return!(0,h.default)(e,(0,u.default)())},displayFormat:function(){return u.default.localeData().longDateFormat("L")},onClose:function(){},onKeyDownArrowDown:function(){},onKeyDownQuestionMark:function(){},customInputIcon:null,customCloseIcon:null,isFocused:!1,phrases:l.SingleDatePickerInputPhrases,isRTL:!1},p=function(e){(0,i.default)(n,e);var t=n.prototype;function n(t){var n;return(n=e.call(this,t)||this).onChange=n.onChange.bind((0,o.default)(n)),n.onFocus=n.onFocus.bind((0,o.default)(n)),n.onClearFocus=n.onClearFocus.bind((0,o.default)(n)),n.clearDate=n.clearDate.bind((0,o.default)(n)),n}return t[!s.default.PureComponent&&"shouldComponentUpdate"]=function(e,t){return!(0,a.default)(this.props,e)||!(0,a.default)(this.state,t)},t.onChange=function(e){var t=this.props,n=t.isOutsideRange,r=t.keepOpenOnDateSelect,a=t.onDateChange,o=t.onFocusChange,i=t.onClose,s=(0,c.default)(e,this.getDisplayFormat());s&&!n(s)?(a(s),r||(o({focused:!1}),i({date:s}))):a(null)},t.onFocus=function(){var e=this.props,t=e.onFocusChange;e.disabled||t({focused:!0})},t.onClearFocus=function(){var e=this.props,t=e.focused,n=e.onFocusChange,r=e.onClose,a=e.date;t&&(n({focused:!1}),r({date:a}))},t.getDisplayFormat=function(){var e=this.props.displayFormat;return"string"==typeof e?e:e()},t.getDateString=function(e){var t=this.getDisplayFormat();return e&&t?e&&e.format(t):(0,f.default)(e)},t.clearDate=function(){var e=this.props,t=e.onDateChange,n=e.reopenPickerOnClearDate,r=e.onFocusChange;t(null),n&&r({focused:!0})},t.render=function(){var e=this.props,t=e.children,n=e.id,r=e.placeholder,a=e.ariaLabel,o=e.disabled,i=e.focused,u=e.isFocused,l=e.required,c=e.readOnly,f=e.openDirection,h=e.showClearDate,_=e.showCaret,m=e.showDefaultInputIcon,p=e.inputIconPosition,y=e.customCloseIcon,v=e.customInputIcon,g=e.date,b=e.phrases,M=e.onKeyDownArrowDown,D=e.onKeyDownQuestionMark,k=e.screenReaderMessage,L=e.isRTL,w=e.noBorder,T=e.block,S=e.small,Y=e.regular,P=e.verticalSpacing,O=this.getDateString(g);return s.default.createElement(d.default,{id:n,placeholder:r,ariaLabel:a,focused:i,isFocused:u,disabled:o,required:l,readOnly:c,openDirection:f,showCaret:_,onClearDate:this.clearDate,showClearDate:h,showDefaultInputIcon:m,inputIconPosition:p,customCloseIcon:y,customInputIcon:v,displayValue:O,onChange:this.onChange,onFocus:this.onFocus,onKeyDownShiftTab:this.onClearFocus,onKeyDownArrowDown:M,onKeyDownQuestionMark:D,screenReaderMessage:k,phrases:b,isRTL:L,noBorder:w,block:T,small:S,regular:Y,verticalSpacing:P},t)},n}(s.default.PureComponent||s.default.Component);t.default=p,p.propTypes={},p.defaultProps=m},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return!(!a.default.isMoment(e)||!a.default.isMoment(t))&&!(0,o.default)(e,t)};var a=r(n(1)),o=r(n(45))},function(e,t,n){},function(e,t,n){},function(e,t,n){},function(e,t,n){n(331)},function(e,t,n){"use strict";(0,n(2)(n(332)).default)()},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){(0,o.default)(a.default)};var a=r(n(333)),o=r(n(372))},function(e,t,n){e.exports=n(334).default},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(335)),o=r(n(368)),i=n(369),s=r(n(370)),u=r(n(371));var l={create:function(e){var t={},n=Object.keys(e),r=(o.default.get(i.GLOBAL_CACHE_KEY)||{}).namespace,a=void 0===r?"":r;return n.forEach((function(e){var n=(0,s.default)(a,e);t[e]=n})),t},resolve:function(e){var t=(0,a.default)(e,1/0),n=(0,u.default)(t),r=n.classNames,o=n.hasInlineStyles,i=n.inlineStyles,s={className:r.map((function(e,t){return"".concat(e," ").concat(e,"_").concat(t+1)})).join(" ")};return o&&(s.style=i),s}};t.default=l},function(e,t,n){"use strict";var r=n(17),a=n(40),o=n(236),i=n(246),s=i(),u=n(367),l=a(s);r(l,{getPolyfill:i,implementation:o,shim:u}),e.exports=l},function(e,t,n){"use strict";var r=n(5),a=r("%Array%"),o=r("%Symbol.species%",!0),i=r("%TypeError%"),s=n(58),u=n(59),l=n(339),d=n(340),c=n(18);e.exports=function(e,t){if(!d(t)||t<0)throw new i("Assertion failed: length must be an integer >= 0");var n,r=0===t?0:t;if(u(e)&&(n=s(e,"constructor"),o&&"Object"===c(n)&&null===(n=s(n,o))&&(n=void 0)),void 0===n)return a(r);if(!l(n))throw new i("C must be a constructor");return new n(r)}},function(e,t){},function(e,t,n){"use strict";e.exports=function(e){return null===e?"Null":void 0===e?"Undefined":"function"==typeof e||"object"==typeof e?"Object":"number"==typeof e?"Number":"boolean"==typeof e?"Boolean":"string"==typeof e?"String":void 0}},function(e,t,n){"use strict";e.exports=function(e){return"function"==typeof e&&!!e.prototype}},function(e,t,n){"use strict";var r=n(5)("%Math%"),a=r.floor,o=r.abs,i=n(60),s=n(238);e.exports=function(e){if("number"!=typeof e||i(e)||!s(e))return!1;var t=o(e);return a(t)===t}},function(e,t,n){"use strict";var r=n(5)("%TypeError%"),a=n(239),o=n(342),i=n(343),s=n(58),u=n(355),l=n(59),d=n(243),c=n(365);e.exports=function e(t,n,f,h,_){var m;arguments.length>5&&(m=arguments[5]);for(var p=h,y=0;y<f;){var v=c(y),g=u(n,v);if(!0===g){var b=s(n,v);if(void 0!==m){if(arguments.length<=6)throw new r("Assertion failed: thisArg is required when mapperFunction is provided");b=o(m,arguments[6],[b,y,n])}var M=!1;if(_>0&&(M=l(b)),M){var D=d(s(b,"length"));p=e(t,b,D,p,_-1)}else{if(p>=a)throw new r("index too large");i(t,c(p),b),p+=1}}y+=1}return p}},function(e,t,n){"use strict";var r=n(5)("%TypeError%"),a=n(237),o=n(49);e.exports=function(e,t){var n=arguments.length>2?arguments[2]:[];if(!o(e))throw new r(a(e)+" is not a function");return e.apply(t,n)}},function(e,t,n){"use strict";var r=n(5)("%TypeError%"),a=n(344),o=n(38),i=n(18);e.exports=function(e,t,n){if("Object"!==i(e))throw new r("Assertion failed: Type(O) is not Object");if(!o(t))throw new r("Assertion failed: IsPropertyKey(P) is not true");var s=a(e,t,n);if(!s)throw new r("unable to create data property");return s}},function(e,t,n){"use strict";var r=n(5)("%TypeError%"),a=n(345),o=n(346),i=n(347),s=n(352),u=n(353),l=n(38),d=n(354),c=n(18);e.exports=function(e,t,n){if("Object"!==c(e))throw new r("Assertion failed: Type(O) is not Object");if(!l(t))throw new r("Assertion failed: IsPropertyKey(P) is not true");var f=i(e,t),h=f||u(e);return!(f&&(!f.writable||!f.configurable)||!h)&&a(s,d,o,e,t,{"[[Configurable]]":!0,"[[Enumerable]]":!0,"[[Value]]":n,"[[Writable]]":!0})}},function(e,t,n){"use strict";var r=n(5)("%Object.defineProperty%",!0);if(r)try{r({},"a",{value:1})}catch(e){r=null}var a=n(26)("Object.prototype.propertyIsEnumerable");e.exports=function(e,t,n,o,i,s){if(!r){if(!e(s))return!1;if(!s["[[Configurable]]"]||!s["[[Writable]]"])return!1;if(i in o&&a(o,i)!==!!s["[[Enumerable]]"])return!1;var u=s["[[Value]]"];return o[i]=u,t(o[i],u)}return r(o,i,n(s)),!0}},function(e,t,n){"use strict";var r=n(240),a=n(18);e.exports=function(e){if(void 0===e)return e;r(a,"Property Descriptor","Desc",e);var t={};return"[[Value]]"in e&&(t.value=e["[[Value]]"]),"[[Writable]]"in e&&(t.writable=e["[[Writable]]"]),"[[Get]]"in e&&(t.get=e["[[Get]]"]),"[[Set]]"in e&&(t.set=e["[[Set]]"]),"[[Enumerable]]"in e&&(t.enumerable=e["[[Enumerable]]"]),"[[Configurable]]"in e&&(t.configurable=e["[[Configurable]]"]),t}},function(e,t,n){"use strict";var r=n(5),a=n(348),o=r("%TypeError%"),i=n(26)("Object.prototype.propertyIsEnumerable"),s=n(20),u=n(59),l=n(38),d=n(349),c=n(351),f=n(18);e.exports=function(e,t){if("Object"!==f(e))throw new o("Assertion failed: O must be an Object");if(!l(t))throw new o("Assertion failed: P must be a Property Key");if(s(e,t)){if(!a){var n=u(e)&&"length"===t,r=d(e)&&"lastIndex"===t;return{"[[Configurable]]":!(n||r),"[[Enumerable]]":i(e,t),"[[Value]]":e[t],"[[Writable]]":!0}}return c(a(e,t))}}},function(e,t,n){"use strict";var r=n(5)("%Object.getOwnPropertyDescriptor%");if(r)try{r([],"length")}catch(e){r=null}e.exports=r},function(e,t,n){"use strict";var r=n(5)("%Symbol.match%",!0),a=n(350),o=n(241);e.exports=function(e){if(!e||"object"!=typeof e)return!1;if(r){var t=e[r];if(void 0!==t)return o(t)}return a(e)}},function(e,t,n){"use strict";var r=n(20),a=RegExp.prototype.exec,o=Object.getOwnPropertyDescriptor,i=Object.prototype.toString,s="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;e.exports=function(e){if(!e||"object"!=typeof e)return!1;if(!s)return"[object RegExp]"===i.call(e);var t=o(e,"lastIndex");return!(!t||!r(t,"value"))&&function(e){try{var t=e.lastIndex;return e.lastIndex=0,a.call(e),!0}catch(e){return!1}finally{e.lastIndex=t}}(e)}},function(e,t,n){"use strict";var r=n(20),a=n(5)("%TypeError%"),o=n(18),i=n(241),s=n(49);e.exports=function(e){if("Object"!==o(e))throw new a("ToPropertyDescriptor requires an object");var t={};if(r(e,"enumerable")&&(t["[[Enumerable]]"]=i(e.enumerable)),r(e,"configurable")&&(t["[[Configurable]]"]=i(e.configurable)),r(e,"value")&&(t["[[Value]]"]=e.value),r(e,"writable")&&(t["[[Writable]]"]=i(e.writable)),r(e,"get")){var n=e.get;if(void 0!==n&&!s(n))throw new TypeError("getter must be a function");t["[[Get]]"]=n}if(r(e,"set")){var u=e.set;if(void 0!==u&&!s(u))throw new a("setter must be a function");t["[[Set]]"]=u}if((r(t,"[[Get]]")||r(t,"[[Set]]"))&&(r(t,"[[Value]]")||r(t,"[[Writable]]")))throw new a("Invalid property descriptor. Cannot both specify accessors and a value or writable attribute");return t}},function(e,t,n){"use strict";var r=n(20),a=n(240),o=n(18);e.exports=function(e){return void 0!==e&&(a(o,"Property Descriptor","Desc",e),!(!r(e,"[[Value]]")&&!r(e,"[[Writable]]")))}},function(e,t,n){"use strict";var r=n(5)("%Object%"),a=n(242),o=r.preventExtensions,i=r.isExtensible;e.exports=o?function(e){return!a(e)&&i(e)}:function(e){return!a(e)}},function(e,t,n){"use strict";var r=n(60);e.exports=function(e,t){return e===t?0!==e||1/e==1/t:r(e)&&r(t)}},function(e,t,n){"use strict";var r=n(5)("%TypeError%"),a=n(38),o=n(18);e.exports=function(e,t){if("Object"!==o(e))throw new r("Assertion failed: `O` must be an Object");if(!a(t))throw new r("Assertion failed: `P` must be a Property Key");return t in e}},function(e,t,n){"use strict";var r=n(5)("%Math%"),a=n(357),o=n(60),i=n(238),s=n(358),u=r.floor,l=r.abs;e.exports=function(e){var t=a(e);return o(t)?0:0!==t&&i(t)?s(t)*u(l(t)):t}},function(e,t,n){"use strict";e.exports=function(e){return+e}},function(e,t,n){"use strict";e.exports=function(e){return e>=0?1:-1}},function(e,t,n){"use strict";var r=n(5),a=r("%TypeError%"),o=r("%Number%"),i=r("%RegExp%"),s=r("%parseInt%"),u=n(26),l=n(360),d=n(242),c=u("String.prototype.slice"),f=l(/^0b[01]+$/i),h=l(/^0o[0-7]+$/i),_=l(/^[-+]0x[0-9a-f]+$/i),m=l(new i("["+["","​","￾"].join("")+"]","g")),p=["\t\n\v\f\r   ᠎    ","         　\u2028","\u2029\ufeff"].join(""),y=new RegExp("(^["+p+"]+)|(["+p+"]+$)","g"),v=u("String.prototype.replace"),g=n(361);e.exports=function e(t){var n=d(t)?t:g(t,o);if("symbol"==typeof n)throw new a("Cannot convert a Symbol value to a number");if("string"==typeof n){if(f(n))return e(s(c(n,2),2));if(h(n))return e(s(c(n,2),8));if(m(n)||_(n))return NaN;var r=function(e){return v(e,y,"")}(n);if(r!==n)return e(r)}return o(n)}},function(e,t,n){"use strict";var r=n(5)("RegExp.prototype.test"),a=n(40);e.exports=function(e){return a(r,e)}},function(e,t,n){"use strict";var r=n(362);e.exports=function(e){return arguments.length>1?r(e,arguments[1]):r(e)}},function(e,t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator,a=n(363),o=n(197),i=n(364),s=n(245),u=function(e,t){if(null==e)throw new TypeError("Cannot call method on "+e);if("string"!=typeof t||"number"!==t&&"string"!==t)throw new TypeError('hint must be "string" or "number"');var n,r,i,s="string"===t?["toString","valueOf"]:["valueOf","toString"];for(i=0;i<s.length;++i)if(n=e[s[i]],o(n)&&(r=n.call(e),a(r)))return r;throw new TypeError("No default value")},l=function(e,t){var n=e[t];if(null!=n){if(!o(n))throw new TypeError(n+" returned for property "+t+" of object "+e+" is not a function");return n}};e.exports=function(e){if(a(e))return e;var t,n="default";if(arguments.length>1&&(arguments[1]===String?n="string":arguments[1]===Number&&(n="number")),r&&(Symbol.toPrimitive?t=l(e,Symbol.toPrimitive):s(e)&&(t=Symbol.prototype.valueOf)),void 0!==t){var o=t.call(e,n);if(a(o))return o;throw new TypeError("unable to convert exotic object to primitive")}return"default"===n&&(i(e)||s(e))&&(n="string"),u(e,"default"===n?"number":n)}},function(e,t,n){"use strict";e.exports=function(e){return null===e||"function"!=typeof e&&"object"!=typeof e}},function(e,t,n){"use strict";var r=Date.prototype.getDay,a=Object.prototype.toString,o="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;e.exports=function(e){return"object"==typeof e&&null!==e&&(o?function(e){try{return r.call(e),!0}catch(e){return!1}}(e):"[object Date]"===a.call(e))}},function(e,t,n){"use strict";var r=n(5),a=r("%String%"),o=r("%TypeError%");e.exports=function(e){if("symbol"==typeof e)throw new o("Cannot convert a Symbol value to a string");return a(e)}},function(e,t,n){"use strict";var r=n(5)("%Object%"),a=n(202);e.exports=function(e){return a(e),r(e)}},function(e,t,n){"use strict";var r=n(17),a=n(246);e.exports=function(){var e=a();return r(Array.prototype,{flat:e},{flat:function(){return Array.prototype.flat!==e}}),e}},function(e,t,n){"use strict";(function(t){var r=n(17),a=n(245),o="__ global cache key __";"function"==typeof Symbol&&a(Symbol("foo"))&&"function"==typeof Symbol.for&&(o=Symbol.for(o));var i=function(){return!0},s=function(){if(!t[o]){var e={};e[o]={};var n={};n[o]=i,r(t,e,n)}return t[o]},u=s(),l=function(e){return a(e)?Symbol.prototype.valueOf.call(e):typeof e+" | "+String(e)},d=function(e){if(!function(e){return null===e||"object"!=typeof e&&"function"!=typeof e}(e))throw new TypeError("key must not be an object")},c={clear:function(){delete t[o],u=s()},delete:function(e){return d(e),delete u[l(e)],!c.has(e)},get:function(e){return d(e),u[l(e)]},has:function(e){return d(e),l(e)in u},set:function(e,t){d(e);var n=l(e),a={};a[n]=t;var o={};return o[n]=i,r(u,a,o),c.has(e)},setIfMissingThenGet:function(e,t){if(c.has(e))return c.get(e);var n=t();return c.set(e,n),n}};e.exports=c}).call(this,n(25))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MAX_SPECIFICITY=t.GLOBAL_CACHE_KEY=void 0;t.GLOBAL_CACHE_KEY="reactWithStylesInterfaceCSS";t.MAX_SPECIFICITY=20},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=e.length>0?"".concat(e,"__"):"";return"".concat(n).concat(t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(e){for(var t=[],n=!1,r={},a=0;a<e.length;a++){var o=e[a];o&&("string"==typeof o?t.push(o):(Object.assign(r,o),n=!0))}return{classNames:t,hasInlineStyles:n,inlineStyles:r}};t.default=r},function(e,t,n){"use strict";var r=n(2);Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){a.default.registerInterface(e),a.default.registerTheme(o.default)};var a=r(n(204)),o=r(n(373))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r={white:"#fff",gray:"#484848",grayLight:"#82888a",grayLighter:"#cacccd",grayLightest:"#f2f2f2",borderMedium:"#c4c4c4",border:"#dbdbdb",borderLight:"#e4e7e7",borderLighter:"#eceeee",borderBright:"#f4f5f5",primary:"#00a699",primaryShade_1:"#33dacd",primaryShade_2:"#66e2da",primaryShade_3:"#80e8e0",primaryShade_4:"#b2f1ec",primary_dark:"#008489",secondary:"#007a87",yellow:"#ffe8bc",yellow_dark:"#ffce71"},a={reactDates:{zIndex:0,border:{input:{border:0,borderTop:0,borderRight:0,borderBottom:"2px solid transparent",borderLeft:0,outlineFocused:0,borderFocused:0,borderTopFocused:0,borderLeftFocused:0,borderBottomFocused:"2px solid ".concat(r.primary_dark),borderRightFocused:0,borderRadius:0},pickerInput:{borderWidth:1,borderStyle:"solid",borderRadius:2}},color:{core:r,disabled:r.grayLightest,background:r.white,backgroundDark:"#f2f2f2",backgroundFocused:r.white,border:"rgb(219, 219, 219)",text:r.gray,textDisabled:r.border,textFocused:"#007a87",placeholderText:"#757575",outside:{backgroundColor:r.white,backgroundColor_active:r.white,backgroundColor_hover:r.white,color:r.gray,color_active:r.gray,color_hover:r.gray},highlighted:{backgroundColor:r.yellow,backgroundColor_active:r.yellow_dark,backgroundColor_hover:r.yellow_dark,color:r.gray,color_active:r.gray,color_hover:r.gray},minimumNights:{backgroundColor:r.white,backgroundColor_active:r.white,backgroundColor_hover:r.white,borderColor:r.borderLighter,color:r.grayLighter,color_active:r.grayLighter,color_hover:r.grayLighter},hoveredSpan:{backgroundColor:r.primaryShade_4,backgroundColor_active:r.primaryShade_3,backgroundColor_hover:r.primaryShade_4,borderColor:r.primaryShade_3,borderColor_active:r.primaryShade_3,borderColor_hover:r.primaryShade_3,color:r.secondary,color_active:r.secondary,color_hover:r.secondary},selectedSpan:{backgroundColor:r.primaryShade_2,backgroundColor_active:r.primaryShade_1,backgroundColor_hover:r.primaryShade_1,borderColor:r.primaryShade_1,borderColor_active:r.primary,borderColor_hover:r.primary,color:r.white,color_active:r.white,color_hover:r.white},selected:{backgroundColor:r.primary,backgroundColor_active:r.primary,backgroundColor_hover:r.primary,borderColor:r.primary,borderColor_active:r.primary,borderColor_hover:r.primary,color:r.white,color_active:r.white,color_hover:r.white},blocked_calendar:{backgroundColor:r.grayLighter,backgroundColor_active:r.grayLighter,backgroundColor_hover:r.grayLighter,borderColor:r.grayLighter,borderColor_active:r.grayLighter,borderColor_hover:r.grayLighter,color:r.grayLight,color_active:r.grayLight,color_hover:r.grayLight},blocked_out_of_range:{backgroundColor:r.white,backgroundColor_active:r.white,backgroundColor_hover:r.white,borderColor:r.borderLight,borderColor_active:r.borderLight,borderColor_hover:r.borderLight,color:r.grayLighter,color_active:r.grayLighter,color_hover:r.grayLighter}},spacing:{dayPickerHorizontalPadding:9,captionPaddingTop:22,captionPaddingBottom:37,inputPadding:0,displayTextPaddingVertical:void 0,displayTextPaddingTop:11,displayTextPaddingBottom:9,displayTextPaddingHorizontal:void 0,displayTextPaddingLeft:11,displayTextPaddingRight:11,displayTextPaddingVertical_small:void 0,displayTextPaddingTop_small:7,displayTextPaddingBottom_small:5,displayTextPaddingHorizontal_small:void 0,displayTextPaddingLeft_small:7,displayTextPaddingRight_small:7},sizing:{inputWidth:130,inputWidth_small:97,arrowWidth:24},noScrollBarOnVerticalScrollable:!1,font:{size:14,captionSize:18,input:{size:19,weight:200,lineHeight:"24px",size_small:15,lineHeight_small:"18px",letterSpacing_small:"0.2px",styleDisabled:"italic"}}}};t.default=a},function(e,t,n){"use strict";n.r(t);var r=n(0),a=n.n(r),o=n(15),i=n.n(o),s=n(3),u=n.n(s),l=a.a.createContext(null);var d=function(e){e()},c={notify:function(){}};function f(){var e=d,t=null,n=null;return{clear:function(){t=null,n=null},notify:function(){e((function(){for(var e=t;e;)e.callback(),e=e.next}))},get:function(){for(var e=[],n=t;n;)e.push(n),n=n.next;return e},subscribe:function(e){var r=!0,a=n={callback:e,next:null,prev:n};return a.prev?a.prev.next=a:t=a,function(){r&&null!==t&&(r=!1,a.next?a.next.prev=a.prev:n=a.prev,a.prev?a.prev.next=a.next:t=a.next)}}}}var h=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=c,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=f())},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=c)},e}();var _=function(e){var t=e.store,n=e.context,o=e.children,i=Object(r.useMemo)((function(){var e=new h(t);return e.onStateChange=e.notifyNestedSubs,{store:t,subscription:e}}),[t]),s=Object(r.useMemo)((function(){return t.getState()}),[t]);Object(r.useEffect)((function(){var e=i.subscription;return e.trySubscribe(),s!==t.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[i,s]);var u=n||l;return a.a.createElement(u.Provider,{value:i},o)};function m(){return(m=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function p(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}var y=n(24),v=n.n(y),g=n(39),b="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?r.useLayoutEffect:r.useEffect,M=[],D=[null,null];function k(e,t){var n=e[1];return[t.payload,n+1]}function L(e,t,n){b((function(){return e.apply(void 0,t)}),n)}function w(e,t,n,r,a,o,i){e.current=r,t.current=a,n.current=!1,o.current&&(o.current=null,i())}function T(e,t,n,r,a,o,i,s,u,l){if(e){var d=!1,c=null,f=function(){if(!d){var e,n,f=t.getState();try{e=r(f,a.current)}catch(e){n=e,c=e}n||(c=null),e===o.current?i.current||u():(o.current=e,s.current=e,i.current=!0,l({type:"STORE_UPDATED",payload:{error:n}}))}};n.onStateChange=f,n.trySubscribe(),f();return function(){if(d=!0,n.tryUnsubscribe(),n.onStateChange=null,c)throw c}}}var S=function(){return[null,0]};function Y(e,t){void 0===t&&(t={});var n=t,o=n.getDisplayName,i=void 0===o?function(e){return"ConnectAdvanced("+e+")"}:o,s=n.methodName,u=void 0===s?"connectAdvanced":s,d=n.renderCountProp,c=void 0===d?void 0:d,f=n.shouldHandleStateChanges,_=void 0===f||f,y=n.storeKey,b=void 0===y?"store":y,Y=(n.withRef,n.forwardRef),P=void 0!==Y&&Y,O=n.context,E=void 0===O?l:O,x=p(n,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"]),C=E;return function(t){var n=t.displayName||t.name||"Component",o=i(n),s=m({},x,{getDisplayName:i,methodName:u,renderCountProp:c,shouldHandleStateChanges:_,storeKey:b,displayName:o,wrappedComponentName:n,WrappedComponent:t}),l=x.pure;var d=l?r.useMemo:function(e){return e()};function f(n){var o=Object(r.useMemo)((function(){var e=n.forwardedRef,t=p(n,["forwardedRef"]);return[n.context,e,t]}),[n]),i=o[0],u=o[1],l=o[2],c=Object(r.useMemo)((function(){return i&&i.Consumer&&Object(g.isContextConsumer)(a.a.createElement(i.Consumer,null))?i:C}),[i,C]),f=Object(r.useContext)(c),y=Boolean(n.store)&&Boolean(n.store.getState)&&Boolean(n.store.dispatch);Boolean(f)&&Boolean(f.store);var v=y?n.store:f.store,b=Object(r.useMemo)((function(){return function(t){return e(t.dispatch,s)}(v)}),[v]),Y=Object(r.useMemo)((function(){if(!_)return D;var e=new h(v,y?null:f.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]}),[v,y,f]),P=Y[0],O=Y[1],E=Object(r.useMemo)((function(){return y?f:m({},f,{subscription:P})}),[y,f,P]),x=Object(r.useReducer)(k,M,S),j=x[0][0],H=x[1];if(j&&j.error)throw j.error;var I=Object(r.useRef)(),N=Object(r.useRef)(l),A=Object(r.useRef)(),F=Object(r.useRef)(!1),R=d((function(){return A.current&&l===N.current?A.current:b(v.getState(),l)}),[v,j,l]);L(w,[N,I,F,l,R,A,O]),L(T,[_,v,P,b,N,I,F,A,O,H],[v,P,b]);var W=Object(r.useMemo)((function(){return a.a.createElement(t,m({},R,{ref:u}))}),[u,t,R]);return Object(r.useMemo)((function(){return _?a.a.createElement(c.Provider,{value:E},W):W}),[c,W,E])}var y=l?a.a.memo(f):f;if(y.WrappedComponent=t,y.displayName=o,P){var Y=a.a.forwardRef((function(e,t){return a.a.createElement(y,m({},e,{forwardedRef:t}))}));return Y.displayName=o,Y.WrappedComponent=t,v()(Y,t)}return v()(y,t)}}function P(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function O(e,t){if(P(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var a=0;a<n.length;a++)if(!Object.prototype.hasOwnProperty.call(t,n[a])||!P(e[n[a]],t[n[a]]))return!1;return!0}var E=n(61),x=function(){return Math.random().toString(36).substring(7).split("").join(".")},C={INIT:"@@redux/INIT"+x(),REPLACE:"@@redux/REPLACE"+x(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+x()}};function j(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function H(e,t,n){var r;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(H)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var a=e,o=t,i=[],s=i,u=!1;function l(){s===i&&(s=i.slice())}function d(){if(u)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return o}function c(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(u)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var t=!0;return l(),s.push(e),function(){if(t){if(u)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");t=!1,l();var n=s.indexOf(e);s.splice(n,1),i=null}}}function f(e){if(!j(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(u)throw new Error("Reducers may not dispatch actions.");try{u=!0,o=a(o,e)}finally{u=!1}for(var t=i=s,n=0;n<t.length;n++){(0,t[n])()}return e}function h(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");a=e,f({type:C.REPLACE})}function _(){var e,t=c;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(d())}return n(),{unsubscribe:t(n)}}})[E.a]=function(){return this},e}return f({type:C.INIT}),(r={dispatch:f,subscribe:c,getState:d,replaceReducer:h})[E.a]=_,r}function I(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function N(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var a=t[r];0,"function"==typeof e[a]&&(n[a]=e[a])}var o,i=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:C.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:C.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+C.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(n)}catch(e){o=e}return function(e,t){if(void 0===e&&(e={}),o)throw o;for(var r=!1,a={},s=0;s<i.length;s++){var u=i[s],l=n[u],d=e[u],c=l(d,t);if(void 0===c){var f=I(u,t);throw new Error(f)}a[u]=c,r=r||c!==d}return(r=r||i.length!==Object.keys(e).length)?a:e}}function A(e,t){return function(){return t(e.apply(this,arguments))}}function F(e){return function(t,n){var r=e(t,n);function a(){return r}return a.dependsOnOwnProps=!1,a}}function R(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function W(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=R(e);var a=r(t,n);return"function"==typeof a&&(r.mapToProps=a,r.dependsOnOwnProps=R(a),a=r(t,n)),a},r}}var z=[function(e){return"function"==typeof e?W(e):void 0},function(e){return e?void 0:F((function(e){return{dispatch:e}}))},function(e){return e&&"object"==typeof e?F((function(t){return function(e,t){if("function"==typeof e)return A(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var n={};for(var r in e){var a=e[r];"function"==typeof a&&(n[r]=A(a,t))}return n}(e,t)})):void 0}];var B=[function(e){return"function"==typeof e?W(e):void 0},function(e){return e?void 0:F((function(){return{}}))}];function K(e,t,n){return m({},n,{},e,{},t)}var U=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,a=n.pure,o=n.areMergedPropsEqual,i=!1;return function(t,n,s){var u=e(t,n,s);return i?a&&o(u,r)||(r=u):(i=!0,r=u),r}}}(e):void 0},function(e){return e?void 0:function(){return K}}];function V(e,t,n,r){return function(a,o){return n(e(a,o),t(r,o),o)}}function G(e,t,n,r,a){var o,i,s,u,l,d=a.areStatesEqual,c=a.areOwnPropsEqual,f=a.areStatePropsEqual,h=!1;function _(a,h){var _,m,p=!c(h,i),y=!d(a,o);return o=a,i=h,p&&y?(s=e(o,i),t.dependsOnOwnProps&&(u=t(r,i)),l=n(s,u,i)):p?(e.dependsOnOwnProps&&(s=e(o,i)),t.dependsOnOwnProps&&(u=t(r,i)),l=n(s,u,i)):y?(_=e(o,i),m=!f(_,s),s=_,m&&(l=n(s,u,i)),l):l}return function(a,d){return h?_(a,d):(s=e(o=a,i=d),u=t(r,i),l=n(s,u,i),h=!0,l)}}function J(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,a=t.initMergeProps,o=p(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),i=n(e,o),s=r(e,o),u=a(e,o);return(o.pure?G:V)(i,s,u,e,o)}function $(e,t,n){for(var r=t.length-1;r>=0;r--){var a=t[r](e);if(a)return a}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function q(e,t){return e===t}function Q(e){var t=void 0===e?{}:e,n=t.connectHOC,r=void 0===n?Y:n,a=t.mapStateToPropsFactories,o=void 0===a?B:a,i=t.mapDispatchToPropsFactories,s=void 0===i?z:i,u=t.mergePropsFactories,l=void 0===u?U:u,d=t.selectorFactory,c=void 0===d?J:d;return function(e,t,n,a){void 0===a&&(a={});var i=a,u=i.pure,d=void 0===u||u,f=i.areStatesEqual,h=void 0===f?q:f,_=i.areOwnPropsEqual,y=void 0===_?O:_,v=i.areStatePropsEqual,g=void 0===v?O:v,b=i.areMergedPropsEqual,M=void 0===b?O:b,D=p(i,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),k=$(e,o,"mapStateToProps"),L=$(t,s,"mapDispatchToProps"),w=$(n,l,"mergeProps");return r(c,m({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:k,initMapDispatchToProps:L,initMergeProps:w,pure:d,areStatesEqual:h,areOwnPropsEqual:y,areStatePropsEqual:g,areMergedPropsEqual:M},D))}}var Z=Q();var X;function ee(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}function te(e){return"/"===e.charAt(0)}function ne(e,t){for(var n=t,r=n+1,a=e.length;r<a;n+=1,r+=1)e[n]=e[r];e.pop()}X=o.unstable_batchedUpdates,d=X;var re=function(e,t){void 0===t&&(t="");var n,r=e&&e.split("/")||[],a=t&&t.split("/")||[],o=e&&te(e),i=t&&te(t),s=o||i;if(e&&te(e)?a=r:r.length&&(a.pop(),a=a.concat(r)),!a.length)return"/";if(a.length){var u=a[a.length-1];n="."===u||".."===u||""===u}else n=!1;for(var l=0,d=a.length;d>=0;d--){var c=a[d];"."===c?ne(a,d):".."===c?(ne(a,d),l++):l&&(ne(a,d),l--)}if(!s)for(;l--;l)a.unshift("..");!s||""===a[0]||a[0]&&te(a[0])||a.unshift("");var f=a.join("/");return n&&"/"!==f.substr(-1)&&(f+="/"),f};var ae=function(e,t){if(!e)throw new Error("Invariant failed")};function oe(e){return"/"===e.charAt(0)?e:"/"+e}function ie(e){return"/"===e.charAt(0)?e.substr(1):e}function se(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function ue(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function le(e){var t=e.pathname,n=e.search,r=e.hash,a=t||"/";return n&&"?"!==n&&(a+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(a+="#"===r.charAt(0)?r:"#"+r),a}function de(e,t,n,r){var a;"string"==typeof e?(a=function(e){var t=e||"/",n="",r="",a=t.indexOf("#");-1!==a&&(r=t.substr(a),t=t.substr(0,a));var o=t.indexOf("?");return-1!==o&&(n=t.substr(o),t=t.substr(0,o)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(a=m({},e)).pathname&&(a.pathname=""),a.search?"?"!==a.search.charAt(0)&&(a.search="?"+a.search):a.search="",a.hash?"#"!==a.hash.charAt(0)&&(a.hash="#"+a.hash):a.hash="",void 0!==t&&void 0===a.state&&(a.state=t));try{a.pathname=decodeURI(a.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+a.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(a.key=n),r?a.pathname?"/"!==a.pathname.charAt(0)&&(a.pathname=re(a.pathname,r.pathname)):a.pathname=r.pathname:a.pathname||(a.pathname="/"),a}function ce(){var e=null;var t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,a){if(null!=e){var o="function"==typeof e?e(t,n):e;"string"==typeof o?"function"==typeof r?r(o,a):a(!0):a(!1!==o)}else a(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}var fe=!("undefined"==typeof window||!window.document||!window.document.createElement);function he(e,t){t(window.confirm(e))}function _e(){try{return window.history.state||{}}catch(e){return{}}}function me(e){void 0===e&&(e={}),fe||ae(!1);var t,n=window.history,r=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,a=!(-1===window.navigator.userAgent.indexOf("Trident")),o=e,i=o.forceRefresh,s=void 0!==i&&i,u=o.getUserConfirmation,l=void 0===u?he:u,d=o.keyLength,c=void 0===d?6:d,f=e.basename?ue(oe(e.basename)):"";function h(e){var t=e||{},n=t.key,r=t.state,a=window.location,o=a.pathname+a.search+a.hash;return f&&(o=se(o,f)),de(o,r,n)}function _(){return Math.random().toString(36).substr(2,c)}var p=ce();function y(e){m(P,e),P.length=n.length,p.notifyListeners(P.location,P.action)}function v(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||M(h(e.state))}function g(){M(h(_e()))}var b=!1;function M(e){if(b)b=!1,y();else{p.confirmTransitionTo(e,"POP",l,(function(t){t?y({action:"POP",location:e}):function(e){var t=P.location,n=k.indexOf(t.key);-1===n&&(n=0);var r=k.indexOf(e.key);-1===r&&(r=0);var a=n-r;a&&(b=!0,w(a))}(e)}))}}var D=h(_e()),k=[D.key];function L(e){return f+le(e)}function w(e){n.go(e)}var T=0;function S(e){1===(T+=e)&&1===e?(window.addEventListener("popstate",v),a&&window.addEventListener("hashchange",g)):0===T&&(window.removeEventListener("popstate",v),a&&window.removeEventListener("hashchange",g))}var Y=!1;var P={length:n.length,action:"POP",location:D,createHref:L,push:function(e,t){var a=de(e,t,_(),P.location);p.confirmTransitionTo(a,"PUSH",l,(function(e){if(e){var t=L(a),o=a.key,i=a.state;if(r)if(n.pushState({key:o,state:i},null,t),s)window.location.href=t;else{var u=k.indexOf(P.location.key),l=k.slice(0,u+1);l.push(a.key),k=l,y({action:"PUSH",location:a})}else window.location.href=t}}))},replace:function(e,t){var a=de(e,t,_(),P.location);p.confirmTransitionTo(a,"REPLACE",l,(function(e){if(e){var t=L(a),o=a.key,i=a.state;if(r)if(n.replaceState({key:o,state:i},null,t),s)window.location.replace(t);else{var u=k.indexOf(P.location.key);-1!==u&&(k[u]=a.key),y({action:"REPLACE",location:a})}else window.location.replace(t)}}))},go:w,goBack:function(){w(-1)},goForward:function(){w(1)},block:function(e){void 0===e&&(e=!1);var t=p.setPrompt(e);return Y||(S(1),Y=!0),function(){return Y&&(Y=!1,S(-1)),t()}},listen:function(e){var t=p.appendListener(e);return S(1),function(){S(-1),t()}}};return P}var pe={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+ie(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:ie,decodePath:oe},slash:{encodePath:oe,decodePath:oe}};function ye(e){var t=e.indexOf("#");return-1===t?e:e.slice(0,t)}function ve(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)}function ge(e){window.location.replace(ye(window.location.href)+"#"+e)}function be(e){void 0===e&&(e={}),fe||ae(!1);var t=window.history,n=(window.navigator.userAgent.indexOf("Firefox"),e),r=n.getUserConfirmation,a=void 0===r?he:r,o=n.hashType,i=void 0===o?"slash":o,s=e.basename?ue(oe(e.basename)):"",u=pe[i],l=u.encodePath,d=u.decodePath;function c(){var e=d(ve());return s&&(e=se(e,s)),de(e)}var f=ce();function h(e){m(T,e),T.length=t.length,f.notifyListeners(T.location,T.action)}var _=!1,p=null;function y(){var e,t,n=ve(),r=l(n);if(n!==r)ge(r);else{var o=c(),i=T.location;if(!_&&(t=o,(e=i).pathname===t.pathname&&e.search===t.search&&e.hash===t.hash))return;if(p===le(o))return;p=null,function(e){if(_)_=!1,h();else{f.confirmTransitionTo(e,"POP",a,(function(t){t?h({action:"POP",location:e}):function(e){var t=T.location,n=M.lastIndexOf(le(t));-1===n&&(n=0);var r=M.lastIndexOf(le(e));-1===r&&(r=0);var a=n-r;a&&(_=!0,D(a))}(e)}))}}(o)}}var v=ve(),g=l(v);v!==g&&ge(g);var b=c(),M=[le(b)];function D(e){t.go(e)}var k=0;function L(e){1===(k+=e)&&1===e?window.addEventListener("hashchange",y):0===k&&window.removeEventListener("hashchange",y)}var w=!1;var T={length:t.length,action:"POP",location:b,createHref:function(e){var t=document.querySelector("base"),n="";return t&&t.getAttribute("href")&&(n=ye(window.location.href)),n+"#"+l(s+le(e))},push:function(e,t){var n=de(e,void 0,void 0,T.location);f.confirmTransitionTo(n,"PUSH",a,(function(e){if(e){var t=le(n),r=l(s+t);if(ve()!==r){p=t,function(e){window.location.hash=e}(r);var a=M.lastIndexOf(le(T.location)),o=M.slice(0,a+1);o.push(t),M=o,h({action:"PUSH",location:n})}else h()}}))},replace:function(e,t){var n=de(e,void 0,void 0,T.location);f.confirmTransitionTo(n,"REPLACE",a,(function(e){if(e){var t=le(n),r=l(s+t);ve()!==r&&(p=t,ge(r));var a=M.indexOf(le(T.location));-1!==a&&(M[a]=t),h({action:"REPLACE",location:n})}}))},go:D,goBack:function(){D(-1)},goForward:function(){D(1)},block:function(e){void 0===e&&(e=!1);var t=f.setPrompt(e);return w||(L(1),w=!0),function(){return w&&(w=!1,L(-1)),t()}},listen:function(e){var t=f.appendListener(e);return L(1),function(){L(-1),t()}}};return T}function Me(e,t,n){return Math.min(Math.max(e,t),n)}function De(e){void 0===e&&(e={});var t=e,n=t.getUserConfirmation,r=t.initialEntries,a=void 0===r?["/"]:r,o=t.initialIndex,i=void 0===o?0:o,s=t.keyLength,u=void 0===s?6:s,l=ce();function d(e){m(y,e),y.length=y.entries.length,l.notifyListeners(y.location,y.action)}function c(){return Math.random().toString(36).substr(2,u)}var f=Me(i,0,a.length-1),h=a.map((function(e){return de(e,void 0,"string"==typeof e?c():e.key||c())})),_=le;function p(e){var t=Me(y.index+e,0,y.entries.length-1),r=y.entries[t];l.confirmTransitionTo(r,"POP",n,(function(e){e?d({action:"POP",location:r,index:t}):d()}))}var y={length:h.length,action:"POP",location:h[f],index:f,entries:h,createHref:_,push:function(e,t){var r=de(e,t,c(),y.location);l.confirmTransitionTo(r,"PUSH",n,(function(e){if(e){var t=y.index+1,n=y.entries.slice(0);n.length>t?n.splice(t,n.length-t,r):n.push(r),d({action:"PUSH",location:r,index:t,entries:n})}}))},replace:function(e,t){var r=de(e,t,c(),y.location);l.confirmTransitionTo(r,"REPLACE",n,(function(e){e&&(y.entries[y.index]=r,d({action:"REPLACE",location:r}))}))},go:p,goBack:function(){p(-1)},goForward:function(){p(1)},canGo:function(e){var t=y.index+e;return t>=0&&t<y.entries.length},block:function(e){return void 0===e&&(e=!1),l.setPrompt(e)},listen:function(e){return l.appendListener(e)}};return y}var ke=n(8),Le=n.n(ke),we=n(249),Te=n.n(we);function Se(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter((function(t){return t!==e}))},get:function(){return e},set:function(n,r){e=n,t.forEach((function(t){return t(e,r)}))}}}var Ye=a.a.createContext||function(e,t){var n,a,o="__create-react-context-"+Te()()+"__",i=function(e){function n(){var t;return(t=e.apply(this,arguments)||this).emitter=Se(t.props.value),t}Le()(n,e);var r=n.prototype;return r.getChildContext=function(){var e;return(e={})[o]=this.emitter,e},r.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var n,r=this.props.value,a=e.value;((o=r)===(i=a)?0!==o||1/o==1/i:o!=o&&i!=i)?n=0:(n="function"==typeof t?t(r,a):1073741823,0!==(n|=0)&&this.emitter.set(e.value,n))}var o,i},r.render=function(){return this.props.children},n}(r.Component);i.childContextTypes=((n={})[o]=u.a.object.isRequired,n);var s=function(t){function n(){var e;return(e=t.apply(this,arguments)||this).state={value:e.getValue()},e.onUpdate=function(t,n){0!=((0|e.observedBits)&n)&&e.setState({value:e.getValue()})},e}Le()(n,t);var r=n.prototype;return r.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?1073741823:t},r.componentDidMount=function(){this.context[o]&&this.context[o].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?1073741823:e},r.componentWillUnmount=function(){this.context[o]&&this.context[o].off(this.onUpdate)},r.getValue=function(){return this.context[o]?this.context[o].get():e},r.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(r.Component);return s.contextTypes=((a={})[o]=u.a.object,a),{Provider:i,Consumer:s}},Pe=n(62),Oe=n.n(Pe),Ee=function(e){var t=Ye();return t.displayName=e,t}("Router"),xe=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={location:t.history.location},n._isMounted=!1,n._pendingLocation=null,t.staticContext||(n.unlisten=t.history.listen((function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e}))),n}ee(t,e),t.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var n=t.prototype;return n.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},n.componentWillUnmount=function(){this.unlisten&&this.unlisten()},n.render=function(){return a.a.createElement(Ee.Provider,{children:this.props.children||null,value:{history:this.props.history,location:this.state.location,match:t.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}})},t}(a.a.Component);a.a.Component;a.a.Component;var Ce={},je=0;function He(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,r=n.path,a=n.exact,o=void 0!==a&&a,i=n.strict,s=void 0!==i&&i,u=n.sensitive,l=void 0!==u&&u;return[].concat(r).reduce((function(t,n){if(!n&&""!==n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=Ce[n]||(Ce[n]={});if(r[e])return r[e];var a=[],o={regexp:Oe()(e,a,t),keys:a};return je<1e4&&(r[e]=o,je++),o}(n,{end:o,strict:s,sensitive:l}),a=r.regexp,i=r.keys,u=a.exec(e);if(!u)return null;var d=u[0],c=u.slice(1),f=e===d;return o&&!f?null:{path:n,url:"/"===n&&""===d?"/":d,isExact:f,params:i.reduce((function(e,t,n){return e[t.name]=c[n],e}),{})}}),null)}var Ie=function(e){function t(){return e.apply(this,arguments)||this}return ee(t,e),t.prototype.render=function(){var e=this;return a.a.createElement(Ee.Consumer,null,(function(t){t||ae(!1);var n=e.props.location||t.location,r=m({},t,{location:n,match:e.props.computedMatch?e.props.computedMatch:e.props.path?He(n.pathname,e.props):t.match}),o=e.props,i=o.children,s=o.component,u=o.render;return Array.isArray(i)&&0===i.length&&(i=null),a.a.createElement(Ee.Provider,{value:r},r.match?i?"function"==typeof i?i(r):i:s?a.a.createElement(s,r):u?u(r):null:"function"==typeof i?i(r):null)}))},t}(a.a.Component);function Ne(e){return"/"===e.charAt(0)?e:"/"+e}function Ae(e,t){if(!e)return t;var n=Ne(e);return 0!==t.pathname.indexOf(n)?t:m({},t,{pathname:t.pathname.substr(n.length)})}function Fe(e){return"string"==typeof e?e:le(e)}function Re(e){return function(){ae(!1)}}function We(){}a.a.Component;var ze=function(e){function t(){return e.apply(this,arguments)||this}return ee(t,e),t.prototype.render=function(){var e=this;return a.a.createElement(Ee.Consumer,null,(function(t){t||ae(!1);var n,r,o=e.props.location||t.location;return a.a.Children.forEach(e.props.children,(function(e){if(null==r&&a.a.isValidElement(e)){n=e;var i=e.props.path||e.props.from;r=i?He(o.pathname,m({},e.props,{path:i})):t.match}})),r?a.a.cloneElement(n,{location:o,computedMatch:r}):null}))},t}(a.a.Component);a.a.useContext;var Be=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),a=0;a<n;a++)r[a]=arguments[a];return(t=e.call.apply(e,[this].concat(r))||this).history=me(t.props),t}return ee(t,e),t.prototype.render=function(){return a.a.createElement(xe,{history:this.history,children:this.props.children})},t}(a.a.Component);a.a.Component;var Ke=function(e,t){return"function"==typeof e?e(t):e},Ue=function(e,t){return"string"==typeof e?de(e,null,null,t):e},Ve=function(e){return e},Ge=a.a.forwardRef;void 0===Ge&&(Ge=Ve);var Je=Ge((function(e,t){var n=e.innerRef,r=e.navigate,o=e.onClick,i=p(e,["innerRef","navigate","onClick"]),s=i.target,u=m({},i,{onClick:function(e){try{o&&o(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||s&&"_self"!==s||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),r())}});return u.ref=Ve!==Ge&&t||n,a.a.createElement("a",u)}));var $e=Ge((function(e,t){var n=e.component,r=void 0===n?Je:n,o=e.replace,i=e.to,s=e.innerRef,u=p(e,["component","replace","to","innerRef"]);return a.a.createElement(Ee.Consumer,null,(function(e){e||ae(!1);var n=e.history,l=Ue(Ke(i,e.location),e.location),d=l?n.createHref(l):"",c=m({},u,{href:d,navigate:function(){var t=Ke(i,e.location);(o?n.replace:n.push)(t)}});return Ve!==Ge?c.ref=t||s:c.innerRef=s,a.a.createElement(r,c)}))})),qe=function(e){return e},Qe=a.a.forwardRef;void 0===Qe&&(Qe=qe);var Ze=Qe((function(e,t){var n=e["aria-current"],r=void 0===n?"page":n,o=e.activeClassName,i=void 0===o?"active":o,s=e.activeStyle,u=e.className,l=e.exact,d=e.isActive,c=e.location,f=e.strict,h=e.style,_=e.to,y=e.innerRef,v=p(e,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","strict","style","to","innerRef"]);return a.a.createElement(Ee.Consumer,null,(function(e){e||ae(!1);var n=c||e.location,o=Ue(Ke(_,n),n),p=o.pathname,g=p&&p.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),b=g?He(n.pathname,{path:g,exact:l,strict:f}):null,M=!!(d?d(b,n):b),D=M?function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return e})).join(" ")}(u,i):u,k=M?m({},h,{},s):h,L=m({"aria-current":M&&r||null,className:D,style:k,to:o},v);return qe!==Qe?L.ref=t||y:L.innerRef=y,a.a.createElement($e,L)}))})),Xe=function(e){var t=e.id,n=e.description,r=e.amount,o=e.createdAt;return a.a.createElement("div",null,a.a.createElement($e,{to:"/edit/".concat(t)},a.a.createElement("h3",null,n)),a.a.createElement("p",null,r," - ",o))},et=n(1),tt=n.n(et),nt=function(e,t){var n=t.text,r=t.sortBy,a=t.startDate,o=t.endDate;return e.filter((function(e){var t=tt()(e.createdAt),r=!a||a.isSameOrBefore(t,"day"),i=!o||o.isSameOrAfter(t,"day"),s=e.description.toLowerCase().includes(n.toLowerCase());return r&&i&&s})).sort((function(e,t){return"date"===r?e.createdAt<t.createdAt?1:-1:"amount"===r?e.amount<t.amount?1:-1:void 0}))};function rt(){return(rt=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var at=Z((function(e){return{expenses:nt(e.expenses,e.filters)}}))((function(e){return a.a.createElement("div",null,0===e.expenses.length?a.a.createElement("p",null,"No expenses found"):e.expenses.map((function(e){return a.a.createElement(Xe,rt({key:e.id},e))})))})),ot=n(46),it=function(e){return{type:"SET_START_DATE",startDate:e}};function st(e){return(st="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ut(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function lt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function dt(e,t){return!t||"object"!==st(t)&&"function"!=typeof t?ct(e):t}function ct(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ft(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function ht(e){return(ht=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _t(e,t){return(_t=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function mt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var pt=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_t(e,t)}(s,e);var t,n,r,o,i=(t=s,function(){var e,n=ht(t);if(ft()){var r=ht(this).constructor;e=Reflect.construct(n,arguments,r)}else e=n.apply(this,arguments);return dt(this,e)});function s(){var e;ut(this,s);for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return mt(ct(e=i.call.apply(i,[this].concat(n))),"state",{calendarFocused:null}),mt(ct(e),"onDatesChange",(function(t){var n=t.startDate,r=t.endDate;e.props.setStartDate(n),e.props.setEndDate(r)})),mt(ct(e),"onFocusChange",(function(t){e.setState({calendarFocused:t})})),mt(ct(e),"inputOnChange",(function(t){e.props.setTextFilter(t.target.value)})),mt(ct(e),"selectOnChange",(function(t){"date"===t.target.value?e.props.sortByDate():"amount"===t.target.value&&e.props.sortByAmount()})),e}return n=s,(r=[{key:"render",value:function(){return a.a.createElement("div",null,a.a.createElement("input",{type:"text",value:this.props.filters.text,onChange:this.inputOnChange}),a.a.createElement("select",{value:this.props.filters.sortBy,onChange:this.selectOnChange},a.a.createElement("option",{value:"date"},"Date"),a.a.createElement("option",{value:"amount"},"Amount")),a.a.createElement(ot.DateRangePicker,{startDate:this.props.filters.startDate,startDateId:"MyDatePicker",endDate:this.props.filters.endDate,endDateId:"endDateID",onDatesChange:this.onDatesChange,focusedInput:this.state.calendarFocused,onFocusChange:this.onFocusChange,numberOfMonths:1,isOutsideRange:function(){return!1},showClearDates:!0,showDefaultInputIcon:!0}))}}])&&lt(n.prototype,r),o&&lt(n,o),s}(a.a.Component),yt=Z((function(e){return{filters:e.filters}}),(function(e){return{setStartDate:function(t){return e(it(t))},setEndDate:function(t){return e(it(t))},setTextFilter:function(t){return e(function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return{type:"SET_TEXT_FILTER",text:e}}(t))},sortByDate:function(){return e({type:"SORT_BY_DATE"})},sortByAmount:function(){return e({type:"SORT_BY_AMOUNT"})}}}))(pt),vt=function(){return a.a.createElement("div",null,a.a.createElement(yt,null),a.a.createElement(at,null))};function gt(e){return(gt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function bt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Mt(e,t){return!t||"object"!==gt(t)&&"function"!=typeof t?Dt(e):t}function Dt(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function kt(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function Lt(e){return(Lt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function wt(e,t){return(wt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Tt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var St=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&wt(e,t)}(s,e);var t,n,r,o,i=(t=s,function(){var e,n=Lt(t);if(kt()){var r=Lt(this).constructor;e=Reflect.construct(n,arguments,r)}else e=n.apply(this,arguments);return Mt(this,e)});function s(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,s),Tt(Dt(t=i.call(this,e)),"onDescriptionChange",(function(e){var n=e.target.value;t.setState((function(){return{description:n}}))})),Tt(Dt(t),"onNoteChange",(function(e){var n=e.target.value;t.setState((function(){return{note:n}}))})),Tt(Dt(t),"onAmountChange",(function(e){var n=e.target.value;n&&!n.match(/^\d{1,}(\.\d{0,2})?$/)||t.setState((function(){return{amount:n}}))})),Tt(Dt(t),"onDateChange",(function(e){e&&t.setState((function(){return{createdAt:e}}))})),Tt(Dt(t),"onFocusChange",(function(e){var n=e.focused;t.setState((function(){return{calendarFocused:n}}))})),Tt(Dt(t),"onSubmit",(function(e){e.preventDefault(),t.state.description&&t.state.amount?(t.setState((function(){return{error:""}})),t.props.onSubmit({description:t.state.description,amount:100*parseFloat(t.state.amount,10),createdAt:t.state.createdAt.valueOf(),note:t.state.note})):t.setState((function(){return{error:"Please provide description and amount."}}))})),t.state={description:e.expense?e.expense.description:"",note:e.expense?e.expense.note:"",amount:e.expense?(e.expense.amount/100).toString():"",createdAt:e.expense?tt()(e.expense.createdAt):tt()(),calendarFocused:!1,error:""},t}return n=s,(r=[{key:"render",value:function(){return a.a.createElement("div",null,this.state.error&&a.a.createElement("p",null,this.state.error),a.a.createElement("form",{onSubmit:this.onSubmit},a.a.createElement("input",{type:"text",placeholder:"Description",autoFocus:!0,value:this.state.description,onChange:this.onDescriptionChange}),a.a.createElement("input",{type:"text",placeholder:"Amount",value:this.state.amount,onChange:this.onAmountChange}),a.a.createElement(ot.SingleDatePicker,{date:this.state.createdAt,onDateChange:this.onDateChange,focused:this.state.calendarFocused,onFocusChange:this.onFocusChange,numberOfMonths:1,isOutsideRange:function(){return!1}}),a.a.createElement("textarea",{placeholder:"Add a note for your expense (optional)",value:this.state.note,onChange:this.onNoteChange}),a.a.createElement("button",null,"Add Expense")))}}])&&bt(n.prototype,r),o&&bt(n,o),s}(a.a.Component),Yt=n(250);function Pt(e){return(Pt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ot(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function Et(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function xt(e,t){return!t||"object"!==Pt(t)&&"function"!=typeof t?Ct(e):t}function Ct(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function jt(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function Ht(e){return(Ht=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function It(e,t){return(It=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Nt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var At=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&It(e,t)}(s,e);var t,n,r,o,i=(t=s,function(){var e,n=Ht(t);if(jt()){var r=Ht(this).constructor;e=Reflect.construct(n,arguments,r)}else e=n.apply(this,arguments);return xt(this,e)});function s(){var e;Ot(this,s);for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return Nt(Ct(e=i.call.apply(i,[this].concat(n))),"onSubmit",(function(t){e.props.addExpense(t),e.props.history.push("/")})),e}return n=s,(r=[{key:"render",value:function(){var e=this;return a.a.createElement("div",null,a.a.createElement("h1",null,"Add Expense"),a.a.createElement(St,{onSubmit:function(t){e.props.addExpense(t),e.props.history.push("/")}}))}}])&&Et(n.prototype,r),o&&Et(n,o),s}(a.a.Component),Ft=Z(void 0,(function(e){return{addExpense:function(t){return e(function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.description,n=void 0===t?"":t,r=e.note,a=void 0===r?"":r,o=e.amount,i=void 0===o?0:o,s=e.createdAt,u=void 0===s?0:s;return{type:"ADD_EXPENSE",expense:{id:Object(Yt.uuid)(),description:n,note:a,amount:i,createdAt:u}}}(t))}}}))(At);function Rt(e){return(Rt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Wt(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function zt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Bt(e,t){return!t||"object"!==Rt(t)&&"function"!=typeof t?Kt(e):t}function Kt(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Ut(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function Vt(e){return(Vt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Gt(e,t){return(Gt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Jt(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var $t=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Gt(e,t)}(s,e);var t,n,r,o,i=(t=s,function(){var e,n=Vt(t);if(Ut()){var r=Vt(this).constructor;e=Reflect.construct(n,arguments,r)}else e=n.apply(this,arguments);return Bt(this,e)});function s(){var e;Wt(this,s);for(var t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return Jt(Kt(e=i.call.apply(i,[this].concat(n))),"onSubmit",(function(t){e.props.editExpense(e.props.expense.id,t),e.props.history.push("/")})),Jt(Kt(e),"onRemove",(function(){e.props.removeExpense({id:e.props.expense.id}),e.props.history.push("/")})),e}return n=s,(r=[{key:"render",value:function(){return a.a.createElement("div",null,a.a.createElement(St,{expense:this.props.expense,onSubmit:this.onSubmit}),a.a.createElement("button",{onClick:this.onRemove},"Remove"))}}])&&zt(n.prototype,r),o&&zt(n,o),s}(a.a.Component),qt=Z((function(e,t){return{expense:e.expenses.find((function(e){return e.id===t.match.params.id}))}}),(function(e,t){return{editExpense:function(t,n){return e(function(e,t){return{type:"EDIT_EXPENSE",id:e,updates:t}}(t,n))},removeExpense:function(t){return e(function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.id;return{type:"REMOVE_EXPENSE",id:t}}(t))}}}))($t),Qt=function(){return a.a.createElement("div",null,"This is from my help component")},Zt=function(){return a.a.createElement("div",null,"404 - ",a.a.createElement($e,{to:"/"},"Go home"))},Xt=function(){return a.a.createElement("header",null,a.a.createElement("h1",null,"Expensify"),a.a.createElement(Ze,{to:"/",activeClassName:"is-active",exact:!0},"Dashboard"),a.a.createElement(Ze,{to:"/create",activeClassName:"is-active"},"Create Expense"))},en=function(){return a.a.createElement(Be,null,a.a.createElement("div",null,a.a.createElement(Xt,null),a.a.createElement(ze,null,a.a.createElement(Ie,{path:"/",component:vt,exact:!0}),a.a.createElement(Ie,{path:"/create",component:Ft}),a.a.createElement(Ie,{path:"/edit/:id",component:qt}),a.a.createElement(Ie,{path:"/help",component:Qt}),a.a.createElement(Ie,{component:Zt}))))};function tn(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function nn(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?tn(Object(n),!0).forEach((function(t){rn(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):tn(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function rn(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function an(e){return function(e){if(Array.isArray(e))return on(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return on(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(n);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return on(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function on(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var sn=[],un=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:sn,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"ADD_EXPENSE":return[].concat(an(e),[t.expense]);case"REMOVE_EXPENSE":return e.filter((function(e){return e.id!==t.id}));case"EDIT_EXPENSE":return e.map((function(e){return e.id===t.id?nn({},e,{},t.updates):e}));default:return e}};function ln(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function dn(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ln(Object(n),!0).forEach((function(t){cn(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ln(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function cn(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var fn={text:"",sortBy:"date",startDate:tt()().startOf("month"),endDate:tt()().endOf("month")},hn=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:fn,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case"SET_TEXT_FILTER":return dn({},e,{text:t.text});case"SORT_BY_AMOUNT":return dn({},e,{sortBy:"amount"});case"SORT_BY_DATE":return dn({},e,{sortBy:"date"});case"SET_START_DATE":return dn({},e,{startDate:t.startDate});case"SET_END_DATE":return dn({},e,{endDate:t.endDate});default:return e}},_n=(n(327),n(328),n(329),n(330),H(N({expenses:un,filters:hn}),window.__REDUX_DEVTOOLS_EXTENSION__&&window.__REDUX_DEVTOOLS_EXTENSION__())),mn=_n.getState();nt(mn.expenses,mn.filters);console.log("thank you for viewing my app");var pn=a.a.createElement(_,{store:_n},a.a.createElement(en,null));i.a.render(pn,document.getElementById("app"))},function(e,t,n){"use strict";n.r(t),n.d(t,"v1",(function(){return h})),n.d(t,"v3",(function(){return M})),n.d(t,"v4",(function(){return D})),n.d(t,"v5",(function(){return w}));var r="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto),a=new Uint8Array(16);function o(){if(!r)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return r(a)}for(var i=[],s=0;s<256;++s)i[s]=(s+256).toString(16).substr(1);var u,l,d=function(e,t){var n=t||0,r=i;return[r[e[n++]],r[e[n++]],r[e[n++]],r[e[n++]],"-",r[e[n++]],r[e[n++]],"-",r[e[n++]],r[e[n++]],"-",r[e[n++]],r[e[n++]],"-",r[e[n++]],r[e[n++]],r[e[n++]],r[e[n++]],r[e[n++]],r[e[n++]]].join("")},c=0,f=0;var h=function(e,t,n){var r=t&&n||0,a=t||[],i=(e=e||{}).node||u,s=void 0!==e.clockseq?e.clockseq:l;if(null==i||null==s){var h=e.random||(e.rng||o)();null==i&&(i=u=[1|h[0],h[1],h[2],h[3],h[4],h[5]]),null==s&&(s=l=16383&(h[6]<<8|h[7]))}var _=void 0!==e.msecs?e.msecs:(new Date).getTime(),m=void 0!==e.nsecs?e.nsecs:f+1,p=_-c+(m-f)/1e4;if(p<0&&void 0===e.clockseq&&(s=s+1&16383),(p<0||_>c)&&void 0===e.nsecs&&(m=0),m>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");c=_,f=m,l=s;var y=(1e4*(268435455&(_+=122192928e5))+m)%4294967296;a[r++]=y>>>24&255,a[r++]=y>>>16&255,a[r++]=y>>>8&255,a[r++]=255&y;var v=_/4294967296*1e4&268435455;a[r++]=v>>>8&255,a[r++]=255&v,a[r++]=v>>>24&15|16,a[r++]=v>>>16&255,a[r++]=s>>>8|128,a[r++]=255&s;for(var g=0;g<6;++g)a[r+g]=i[g];return t||d(a)};var _=function(e,t,n){var r=function(e,r,a,o){var i=a&&o||0;if("string"==typeof e&&(e=function(e){e=unescape(encodeURIComponent(e));for(var t=new Array(e.length),n=0;n<e.length;n++)t[n]=e.charCodeAt(n);return t}(e)),"string"==typeof r&&(r=function(e){var t=[];return e.replace(/[a-fA-F0-9]{2}/g,(function(e){t.push(parseInt(e,16))})),t}(r)),!Array.isArray(e))throw TypeError("value must be an array of bytes");if(!Array.isArray(r)||16!==r.length)throw TypeError("namespace must be uuid string or an Array of 16 byte values");var s=n(r.concat(e));if(s[6]=15&s[6]|t,s[8]=63&s[8]|128,a)for(var u=0;u<16;++u)a[i+u]=s[u];return a||d(s)};try{r.name=e}catch(e){}return r.DNS="6ba7b810-9dad-11d1-80b4-00c04fd430c8",r.URL="6ba7b811-9dad-11d1-80b4-00c04fd430c8",r};function m(e,t){var n=(65535&e)+(65535&t);return(e>>16)+(t>>16)+(n>>16)<<16|65535&n}function p(e,t,n,r,a,o){return m((i=m(m(t,e),m(r,o)))<<(s=a)|i>>>32-s,n);var i,s}function y(e,t,n,r,a,o,i){return p(t&n|~t&r,e,t,a,o,i)}function v(e,t,n,r,a,o,i){return p(t&r|n&~r,e,t,a,o,i)}function g(e,t,n,r,a,o,i){return p(t^n^r,e,t,a,o,i)}function b(e,t,n,r,a,o,i){return p(n^(t|~r),e,t,a,o,i)}var M=_("v3",48,(function(e){if("string"==typeof e){var t=unescape(encodeURIComponent(e));e=new Array(t.length);for(var n=0;n<t.length;n++)e[n]=t.charCodeAt(n)}return function(e){var t,n,r,a=[],o=32*e.length;for(t=0;t<o;t+=8)n=e[t>>5]>>>t%32&255,r=parseInt("0123456789abcdef".charAt(n>>>4&15)+"0123456789abcdef".charAt(15&n),16),a.push(r);return a}(function(e,t){var n,r,a,o,i;e[t>>5]|=128<<t%32,e[14+(t+64>>>9<<4)]=t;var s=1732584193,u=-271733879,l=-1732584194,d=271733878;for(n=0;n<e.length;n+=16)r=s,a=u,o=l,i=d,s=y(s,u,l,d,e[n],7,-680876936),d=y(d,s,u,l,e[n+1],12,-389564586),l=y(l,d,s,u,e[n+2],17,606105819),u=y(u,l,d,s,e[n+3],22,-1044525330),s=y(s,u,l,d,e[n+4],7,-176418897),d=y(d,s,u,l,e[n+5],12,1200080426),l=y(l,d,s,u,e[n+6],17,-1473231341),u=y(u,l,d,s,e[n+7],22,-45705983),s=y(s,u,l,d,e[n+8],7,1770035416),d=y(d,s,u,l,e[n+9],12,-1958414417),l=y(l,d,s,u,e[n+10],17,-42063),u=y(u,l,d,s,e[n+11],22,-1990404162),s=y(s,u,l,d,e[n+12],7,1804603682),d=y(d,s,u,l,e[n+13],12,-40341101),l=y(l,d,s,u,e[n+14],17,-1502002290),u=y(u,l,d,s,e[n+15],22,1236535329),s=v(s,u,l,d,e[n+1],5,-165796510),d=v(d,s,u,l,e[n+6],9,-1069501632),l=v(l,d,s,u,e[n+11],14,643717713),u=v(u,l,d,s,e[n],20,-373897302),s=v(s,u,l,d,e[n+5],5,-701558691),d=v(d,s,u,l,e[n+10],9,38016083),l=v(l,d,s,u,e[n+15],14,-660478335),u=v(u,l,d,s,e[n+4],20,-405537848),s=v(s,u,l,d,e[n+9],5,568446438),d=v(d,s,u,l,e[n+14],9,-1019803690),l=v(l,d,s,u,e[n+3],14,-187363961),u=v(u,l,d,s,e[n+8],20,1163531501),s=v(s,u,l,d,e[n+13],5,-1444681467),d=v(d,s,u,l,e[n+2],9,-51403784),l=v(l,d,s,u,e[n+7],14,1735328473),u=v(u,l,d,s,e[n+12],20,-1926607734),s=g(s,u,l,d,e[n+5],4,-378558),d=g(d,s,u,l,e[n+8],11,-2022574463),l=g(l,d,s,u,e[n+11],16,1839030562),u=g(u,l,d,s,e[n+14],23,-35309556),s=g(s,u,l,d,e[n+1],4,-1530992060),d=g(d,s,u,l,e[n+4],11,1272893353),l=g(l,d,s,u,e[n+7],16,-155497632),u=g(u,l,d,s,e[n+10],23,-1094730640),s=g(s,u,l,d,e[n+13],4,681279174),d=g(d,s,u,l,e[n],11,-358537222),l=g(l,d,s,u,e[n+3],16,-722521979),u=g(u,l,d,s,e[n+6],23,76029189),s=g(s,u,l,d,e[n+9],4,-640364487),d=g(d,s,u,l,e[n+12],11,-421815835),l=g(l,d,s,u,e[n+15],16,530742520),u=g(u,l,d,s,e[n+2],23,-995338651),s=b(s,u,l,d,e[n],6,-198630844),d=b(d,s,u,l,e[n+7],10,1126891415),l=b(l,d,s,u,e[n+14],15,-1416354905),u=b(u,l,d,s,e[n+5],21,-57434055),s=b(s,u,l,d,e[n+12],6,1700485571),d=b(d,s,u,l,e[n+3],10,-1894986606),l=b(l,d,s,u,e[n+10],15,-1051523),u=b(u,l,d,s,e[n+1],21,-2054922799),s=b(s,u,l,d,e[n+8],6,1873313359),d=b(d,s,u,l,e[n+15],10,-30611744),l=b(l,d,s,u,e[n+6],15,-1560198380),u=b(u,l,d,s,e[n+13],21,1309151649),s=b(s,u,l,d,e[n+4],6,-145523070),d=b(d,s,u,l,e[n+11],10,-1120210379),l=b(l,d,s,u,e[n+2],15,718787259),u=b(u,l,d,s,e[n+9],21,-343485551),s=m(s,r),u=m(u,a),l=m(l,o),d=m(d,i);return[s,u,l,d]}(function(e){var t,n=[];for(n[(e.length>>2)-1]=void 0,t=0;t<n.length;t+=1)n[t]=0;var r=8*e.length;for(t=0;t<r;t+=8)n[t>>5]|=(255&e[t/8])<<t%32;return n}(e),8*e.length))}));var D=function(e,t,n){var r=t&&n||0;"string"==typeof e&&(t="binary"===e?new Array(16):null,e=null);var a=(e=e||{}).random||(e.rng||o)();if(a[6]=15&a[6]|64,a[8]=63&a[8]|128,t)for(var i=0;i<16;++i)t[r+i]=a[i];return t||d(a)};function k(e,t,n,r){switch(e){case 0:return t&n^~t&r;case 1:return t^n^r;case 2:return t&n^t&r^n&r;case 3:return t^n^r}}function L(e,t){return e<<t|e>>>32-t}var w=_("v5",80,(function(e){var t=[1518500249,1859775393,2400959708,3395469782],n=[1732584193,4023233417,2562383102,271733878,3285377520];if("string"==typeof e){var r=unescape(encodeURIComponent(e));e=new Array(r.length);for(var a=0;a<r.length;a++)e[a]=r.charCodeAt(a)}e.push(128);var o=e.length/4+2,i=Math.ceil(o/16),s=new Array(i);for(a=0;a<i;a++){s[a]=new Array(16);for(var u=0;u<16;u++)s[a][u]=e[64*a+4*u]<<24|e[64*a+4*u+1]<<16|e[64*a+4*u+2]<<8|e[64*a+4*u+3]}for(s[i-1][14]=8*(e.length-1)/Math.pow(2,32),s[i-1][14]=Math.floor(s[i-1][14]),s[i-1][15]=8*(e.length-1)&4294967295,a=0;a<i;a++){for(var l=new Array(80),d=0;d<16;d++)l[d]=s[a][d];for(d=16;d<80;d++)l[d]=L(l[d-3]^l[d-8]^l[d-14]^l[d-16],1);var c=n[0],f=n[1],h=n[2],_=n[3],m=n[4];for(d=0;d<80;d++){var p=Math.floor(d/20),y=L(c,5)+k(p,f,h,_)+m+t[p]+l[d]>>>0;m=_,_=h,h=L(f,30)>>>0,f=c,c=y}n[0]=n[0]+c>>>0,n[1]=n[1]+f>>>0,n[2]=n[2]+h>>>0,n[3]=n[3]+_>>>0,n[4]=n[4]+m>>>0}return[n[0]>>24&255,n[0]>>16&255,n[0]>>8&255,255&n[0],n[1]>>24&255,n[1]>>16&255,n[1]>>8&255,255&n[1],n[2]>>24&255,n[2]>>16&255,n[2]>>8&255,255&n[2],n[3]>>24&255,n[3]>>16&255,n[3]>>8&255,255&n[3],n[4]>>24&255,n[4]>>16&255,n[4]>>8&255,255&n[4]]}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbW9tZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvR2V0SW50cmluc2ljLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9haXJibmItcHJvcC10eXBlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c0xvb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvZGVmYXVsdFBocmFzZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi91dGlscy9nZXRQaHJhc2VQcm9wVHlwZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VuenltZS1zaGFsbG93LWVxdWFsL2J1aWxkL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC13aXRoLXN0eWxlcy9saWIvd2l0aFN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1tb21lbnQtcHJvcHR5cGVzL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGVmaW5lLXByb3BlcnRpZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvVHlwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL3V0aWxzL25vZmxpcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGFzL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL3V0aWxzL2lzU2FtZURheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL3NoYXBlcy9EYXlPZldlZWtTaGFwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL3NoYXBlcy9PcGVuRGlyZWN0aW9uU2hhcGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0L2hlbHBlcnMvY2FsbEJvdW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvdXRpbHMvdG9Nb21lbnRPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi9zaGFwZXMvU2Nyb2xsYWJsZU9yaWVudGF0aW9uU2hhcGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzLXRvdWNoLWRldmljZS9idWlsZC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL3NoYXBlcy9JY29uUG9zaXRpb25TaGFwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL3NoYXBlcy9OYXZQb3NpdGlvblNoYXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvdXRpbHMvaXNJbmNsdXNpdmVseUFmdGVyRGF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvdXRpbHMvdG9JU09EYXRlU3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvc2hhcGVzL0Rpc2FibGVkU2hhcGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi9zaGFwZXMvQ2FsZW5kYXJJbmZvUG9zaXRpb25TaGFwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL3V0aWxzL2lzQmVmb3JlRGF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvY29tcG9uZW50cy9DbG9zZUJ1dHRvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9Jc1Byb3BlcnR5S2V5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvaGVscGVycy9jYWxsQmluZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LnZhbHVlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL3NoYXBlcy9Nb2RpZmllcnNTaGFwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29uc29saWRhdGVkLWV2ZW50cy9saWIvaW5kZXguZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvdXRpbHMvdG9JU09Nb250aFN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL3V0aWxzL2lzQWZ0ZXJEYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mdW5jdGlvbi1iaW5kL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE5L0lzQ2FsbGFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdG9Db25zdW1hYmxlQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi91dGlscy9pc1NhbWVNb250aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtb3V0c2lkZS1jbGljay1oYW5kbGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvdXRpbHMvZ2V0SW5wdXRIZWlnaHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc09iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL3V0aWxzL3RvTG9jYWxpemVkRGF0ZVN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL3V0aWxzL2lzRGF5VmlzaWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL2NvbXBvbmVudHMvRGF5UGlja2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE5L0dldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9Jc0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC9oZWxwZXJzL2lzTmFOLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zeW1ib2wtb2JzZXJ2YWJsZS9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL25vZGVfbW9kdWxlcy9wYXRoLXRvLXJlZ2V4cC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci1kei5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci1rdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci1seS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci1tYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci1zYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hci10bi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9hei5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9iZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9iZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ibS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ibi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9iby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ici5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9icy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9jYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9jcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9jdi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9jeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9kYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9kZS1hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9kZS1jaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9kdi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbi1TRy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbi1hdS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbi1jYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbi1nYi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbi1pZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbi1pbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lbi1uei5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lcy1kby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9lcy11cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ldS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9mYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9maS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9mby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9mci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9mci1jYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9mci1jaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9meS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9nYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9nZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9nbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9nb20tbGF0bi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ndS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9oZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9oaS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9oci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9odS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9oeS1hbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9pZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9pcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9pdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9pdC1jaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9qYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9qdi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9rYS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ray5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9rbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9rbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9rby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9rdS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9reS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9sYi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9sby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9sdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9sdi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9tZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9taS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9tay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9tbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9tbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9tci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9tcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9tcy1teS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9tdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9teS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9uYi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9uZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ubC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ubC1iZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ubi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9wYS1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9wbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9wdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9wdC1ici5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9yby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9ydS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zaS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zcS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS9zci1jeXJsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3NzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3N2LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3N3LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3RhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3RldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90Zy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90bC1waC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90bGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUvdHpsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3R6bS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS90em0tbGF0bi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS91Zy1jbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS91ay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS91ci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS91ei5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9tZW50L2xvY2FsZS91ei1sYXRuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3ZpLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3gtcHNldWRvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3lvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3poLWNuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3poLWhrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb21lbnQvbG9jYWxlL3poLXR3LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvY29tcG9uZW50cy9DYWxlbmRhckRheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9haXJibmItcHJvcC10eXBlcy9idWlsZC9oZWxwZXJzL2dldENvbXBvbmVudE5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC1rZXlzL2lzQXJndW1lbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYXMtc3ltYm9scy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZnVuY3Rpb24ucHJvdG90eXBlLm5hbWUvaW1wbGVtZW50YXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzLWNhbGxhYmxlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mdW5jdGlvbnMtaGF2ZS1uYW1lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZnVuY3Rpb24ucHJvdG90eXBlLm5hbWUvcG9seWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXdpdGgtZGlyZWN0aW9uL2Rpc3QvY29uc3RhbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QudmFsdWVzL2ltcGxlbWVudGF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE5L1JlcXVpcmVPYmplY3RDb2VyY2libGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC52YWx1ZXMvcG9seWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXdpdGgtc3R5bGVzL2xpYi9UaGVtZWRTdHlsZVNoZWV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvY29tcG9uZW50cy9DYWxlbmRhck1vbnRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvdXRpbHMvY2FsY3VsYXRlRGltZW5zaW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvY29tcG9uZW50cy9DYWxlbmRhck1vbnRoR3JpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL3V0aWxzL2dldENhbGVuZGFyTW9udGhXaWR0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9jdW1lbnQuY29udGFpbnMvaW1wbGVtZW50YXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvY3VtZW50LmNvbnRhaW5zL3BvbHlmaWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvc2hhcGVzL0RhdGVSYW5nZVBpY2tlclNoYXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvc2hhcGVzL0ZvY3VzZWRJbnB1dFNoYXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvc2hhcGVzL09yaWVudGF0aW9uU2hhcGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi9zaGFwZXMvQW5jaG9yRGlyZWN0aW9uU2hhcGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi91dGlscy9nZXRSZXNwb25zaXZlQ29udGFpbmVyU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvdXRpbHMvZ2V0RGV0YWNoZWRDb250YWluZXJTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi91dGlscy9kaXNhYmxlU2Nyb2xsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvY29tcG9uZW50cy9EYXRlUmFuZ2VQaWNrZXJJbnB1dENvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi9jb21wb25lbnRzL0RhdGVSYW5nZVBpY2tlcklucHV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvY29tcG9uZW50cy9EYXRlSW5wdXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC90aHJvdHRsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19yb290LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1N5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL2NvbXBvbmVudHMvUmlnaHRBcnJvdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL2NvbXBvbmVudHMvTGVmdEFycm93LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvY29tcG9uZW50cy9DYWxlbmRhckljb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi9jb21wb25lbnRzL0RheVBpY2tlclJhbmdlQ29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9zbGljZWRUb0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvdXRpbHMvaXNOZXh0RGF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvdXRpbHMvZ2V0VmlzaWJsZURheXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi91dGlscy9tb2RpZmllcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi91dGlscy9nZXRQb29sZWRNb21lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi9jb21wb25lbnRzL0RheVBpY2tlclNpbmdsZURhdGVDb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvc2hhcGVzL1NpbmdsZURhdGVQaWNrZXJTaGFwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL2NvbXBvbmVudHMvU2luZ2xlRGF0ZVBpY2tlcklucHV0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hcnJheS5wcm90b3R5cGUuZmxhdC9pbXBsZW1lbnRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWluc3BlY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0L2hlbHBlcnMvaXNGaW5pdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0L2hlbHBlcnMvbWF4U2FmZUludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0L2hlbHBlcnMvYXNzZXJ0UmVjb3JkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE5L1RvQm9vbGVhbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvaGVscGVycy9pc1ByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9Ub0xlbmd0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9Ub0ludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzLXN5bWJvbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXJyYXkucHJvdG90eXBlLmZsYXQvcG9seWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXBvcnRhbC9lcy91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcG9ydGFsL2VzL1BvcnRhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcG9ydGFsL2VzL0xlZ2FjeVBvcnRhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcG9ydGFsL2VzL1BvcnRhbENvbXBhdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcG9ydGFsL2VzL1BvcnRhbFdpdGhTdGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvcG9ueWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2d1ZC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXVpZHY0L2J1aWxkL2xpYi91dWlkdjQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9oYXJtb255LW1vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbWVudC9sb2NhbGUgc3luYyBeXFwuXFwvLiokIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZnVuY3Rpb24tYmluZC9pbXBsZW1lbnRhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtbW9tZW50LXByb3B0eXBlcy9zcmMvbW9tZW50LXZhbGlkYXRpb24td3JhcHBlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtbW9tZW50LXByb3B0eXBlcy9zcmMvY29yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYWlyYm5iLXByb3AtdHlwZXMvYnVpbGQvbW9ja3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mdW5jdGlvbi5wcm90b3R5cGUubmFtZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LWtleXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL29iamVjdC1rZXlzL2ltcGxlbWVudGF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYXMtc3ltYm9scy9zaGFtcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZnVuY3Rpb24ucHJvdG90eXBlLm5hbWUvc2hpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtd2l0aC1zdHlsZXMvbGliL3V0aWxzL2VtcHR5U3R5bGVzRm4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXdpdGgtc3R5bGVzL2xpYi91dGlscy9wZXJmLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC13aXRoLXN0eWxlcy9saWIvV2l0aFN0eWxlc0NvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXdpdGgtZGlyZWN0aW9uL2Rpc3Qvd2l0aERpcmVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZGVlcG1lcmdlL2Rpc3QvY2pzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC13aXRoLWRpcmVjdGlvbi9kaXN0L3Byb3B0eXBlcy9icmNhc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXdpdGgtZGlyZWN0aW9uL2Rpc3QvcHJvcHR5cGVzL2RpcmVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvNS9DaGVja09iamVjdENvZXJjaWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvb2JqZWN0LnZhbHVlcy9zaGltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC13aXRoLXN0eWxlcy9saWIvd2l0aFN0eWxlc1Byb3BUeXBlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmFmL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wZXJmb3JtYW5jZS1ub3cvbGliL3BlcmZvcm1hbmNlLW5vdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvdXRpbHMvZ2V0Q2FsZW5kYXJEYXlTZXR0aW5ncy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL3V0aWxzL2dldFBocmFzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hcnJheVdpdGhvdXRIb2xlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pdGVyYWJsZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvbm9uSXRlcmFibGVTcHJlYWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi9jb21wb25lbnRzL0NhbGVuZGFyV2Vlay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL3V0aWxzL2dldENhbGVuZGFyTW9udGhXZWVrcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL3V0aWxzL2lzVHJhbnNpdGlvbkVuZFN1cHBvcnRlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL3V0aWxzL2dldFRyYW5zZm9ybVN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL3V0aWxzL2lzUHJldk1vbnRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvdXRpbHMvaXNOZXh0TW9udGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi9jb21wb25lbnRzL0RhdGVSYW5nZVBpY2tlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtb3V0c2lkZS1jbGljay1oYW5kbGVyL2J1aWxkL091dHNpZGVDbGlja0hhbmRsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RvY3VtZW50LmNvbnRhaW5zL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb2N1bWVudC5jb250YWlucy9zaGltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZGVib3VuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9ub3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZnJlZUdsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL3RvTnVtYmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNTeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUdldFRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoL19nZXRSYXdUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fb2JqZWN0VG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc09iamVjdExpa2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXJyYXlXaXRoSG9sZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvaXRlcmFibGVUb0FycmF5TGltaXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvbm9uSXRlcmFibGVSZXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvdXRpbHMvaXNQcmV2aW91c0RheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL3V0aWxzL2dldFNlbGVjdGVkRGF0ZU9mZnNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL3V0aWxzL2dldFByZXZpb3VzTW9udGhNZW1vTGFzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL2NvbXBvbmVudHMvRGF5UGlja2VyTmF2aWdhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL2NvbXBvbmVudHMvQ2hldnJvblVwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvY29tcG9uZW50cy9DaGV2cm9uRG93bi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL2NvbXBvbmVudHMvRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi9jb21wb25lbnRzL0tleWJvYXJkU2hvcnRjdXRSb3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi91dGlscy9nZXROdW1iZXJPZkNhbGVuZGFyTW9udGhXZWVrcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL3V0aWxzL2dldEFjdGl2ZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi9jb21wb25lbnRzL1NpbmdsZURhdGVQaWNrZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi9jb21wb25lbnRzL1NpbmdsZURhdGVQaWNrZXJJbnB1dENvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGVzL2xpYi91dGlscy9pc0luY2x1c2l2ZWx5QmVmb3JlRGF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9pbml0aWFsaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvaW5pdGlhbGl6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0ZXMvbGliL3V0aWxzL3JlZ2lzdGVyQ1NTSW50ZXJmYWNlV2l0aERlZmF1bHRUaGVtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtd2l0aC1zdHlsZXMtaW50ZXJmYWNlLWNzcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtd2l0aC1zdHlsZXMtaW50ZXJmYWNlLWNzcy9kaXN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9hcnJheS5wcm90b3R5cGUuZmxhdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9BcnJheVNwZWNpZXNDcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzUvVHlwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9Jc0NvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE5L0lzSW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9GbGF0dGVuSW50b0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE5L0NhbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvQ3JlYXRlRGF0YVByb3BlcnR5T3JUaHJvdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9DcmVhdGVEYXRhUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0L2hlbHBlcnMvRGVmaW5lT3duUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvRnJvbVByb3BlcnR5RGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9PcmRpbmFyeUdldE93blByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC9oZWxwZXJzL2dldE93blByb3BlcnR5RGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9Jc1JlZ0V4cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtcmVnZXgvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvVG9Qcm9wZXJ0eURlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvSXNEYXRhRGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvMjAxOS9Jc0V4dGVuc2libGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvU2FtZVZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE5L0hhc1Byb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC81L1RvSW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvNS9Ub051bWJlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvaGVscGVycy9zaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE5L1RvTnVtYmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC9oZWxwZXJzL3JlZ2V4VGVzdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC8yMDE5L1RvUHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy10by1wcmltaXRpdmUvZXMyMDE1LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lcy10by1wcmltaXRpdmUvaGVscGVycy9pc1ByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaXMtZGF0ZS1vYmplY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvVG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0LzIwMTkvVG9PYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2FycmF5LnByb3RvdHlwZS5mbGF0L3NoaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dsb2JhbC1jYWNoZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtd2l0aC1zdHlsZXMtaW50ZXJmYWNlLWNzcy9kaXN0L3V0aWxzL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtd2l0aC1zdHlsZXMtaW50ZXJmYWNlLWNzcy9kaXN0L3V0aWxzL2dldENsYXNzTmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtd2l0aC1zdHlsZXMtaW50ZXJmYWNlLWNzcy9kaXN0L3V0aWxzL3NlcGFyYXRlU3R5bGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvdXRpbHMvcmVnaXN0ZXJJbnRlcmZhY2VXaXRoRGVmYXVsdFRoZW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRlcy9saWIvdGhlbWUvRGVmYXVsdFRoZW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL0NvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL2JhdGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9TdWJzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvY29ubmVjdEFkdmFuY2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9zaGFsbG93RXF1YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4L2VzL3JlZHV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L3dyYXBNYXBUb1Byb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb25uZWN0L21hcERpc3BhdGNoVG9Qcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9tYXBTdGF0ZVRvUHJvcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvbWVyZ2VQcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29ubmVjdC9zZWxlY3RvckZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2Nvbm5lY3QvY29ubmVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlU2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Jlc29sdmUtcGF0aG5hbWUvZXNtL3Jlc29sdmUtcGF0aG5hbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aW55LWludmFyaWFudC9kaXN0L3RpbnktaW52YXJpYW50LmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lc20vaGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWluaS1jcmVhdGUtcmVhY3QtY29udGV4dC9kaXN0L2VzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzbS9yZWFjdC1yb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXNtL3JlYWN0LXJvdXRlci1kb20uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbXBvbmVudHMvRXhwZW5zZUxpc3RJdGVtLmpzIiwid2VicGFjazovLy8uL3NyYy9zZWxlY3RvcnMvZXhwZW5zZXMtc2VsZWN0b3JzLmpzIiwid2VicGFjazovLy8uL3NyYy9Db21wb25lbnRzL0V4cGVuc2VMaXN0LmpzIiwid2VicGFjazovLy8uL3NyYy9hY3Rpb25zL2ZpbHRlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbXBvbmVudHMvRXhwZW5zZUxpc3RGaWx0ZXJzLmpzIiwid2VicGFjazovLy8uL3NyYy9Db21wb25lbnRzL0Rhc2hib2FyZFBhZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbXBvbmVudHMvRXhwZW5zZUZvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbXBvbmVudHMvQWRkRXhwZW5zZVBhZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FjdGlvbnMvZXhwZW5zZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbXBvbmVudHMvRWRpdEV4cGVuc2VQYWdlLmpzIiwid2VicGFjazovLy8uL3NyYy9Db21wb25lbnRzL0hlbHBQYWdlLmpzIiwid2VicGFjazovLy8uL3NyYy9Db21wb25lbnRzL05vdEZvdW5kUGFnZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29tcG9uZW50cy9IZWFkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JvdXRlci9BcHBSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlZHVjZXJzL2V4cGVuc2VzLXJlZHVjZXJzLmpzIiwid2VicGFjazovLy8uL3NyYy9yZWR1Y2Vycy9maWx0ZXJzLXJlZHVjZXJzLmpzIiwid2VicGFjazovLy8uL3NyYy9hcHAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3JlL2NvbmZpZ3VyZVN0b3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvcm5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvYnl0ZXNUb1V1aWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci92MS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3YzNS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL21kNS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3YzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvdjQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci9zaGExLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvdjUuanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJob29rQ2FsbGJhY2siLCJzb21lIiwiaG9va3MiLCJhcHBseSIsImFyZ3VtZW50cyIsImlzQXJyYXkiLCJpbnB1dCIsIkFycmF5IiwidG9TdHJpbmciLCJpc09iamVjdCIsImlzVW5kZWZpbmVkIiwiaXNOdW1iZXIiLCJpc0RhdGUiLCJEYXRlIiwibWFwIiwiYXJyIiwiZm4iLCJyZXMiLCJsZW5ndGgiLCJwdXNoIiwiaGFzT3duUHJvcCIsImEiLCJiIiwiZXh0ZW5kIiwidmFsdWVPZiIsImNyZWF0ZVVUQyIsImZvcm1hdCIsImxvY2FsZSIsInN0cmljdCIsImNyZWF0ZUxvY2FsT3JVVEMiLCJ1dGMiLCJnZXRQYXJzaW5nRmxhZ3MiLCJfcGYiLCJlbXB0eSIsInVudXNlZFRva2VucyIsInVudXNlZElucHV0Iiwib3ZlcmZsb3ciLCJjaGFyc0xlZnRPdmVyIiwibnVsbElucHV0IiwiaW52YWxpZE1vbnRoIiwiaW52YWxpZEZvcm1hdCIsInVzZXJJbnZhbGlkYXRlZCIsImlzbyIsInBhcnNlZERhdGVQYXJ0cyIsIm1lcmlkaWVtIiwicmZjMjgyMiIsIndlZWtkYXlNaXNtYXRjaCIsImlzVmFsaWQiLCJfaXNWYWxpZCIsImZsYWdzIiwicGFyc2VkUGFydHMiLCJpc05vd1ZhbGlkIiwiaXNOYU4iLCJfZCIsImdldFRpbWUiLCJpbnZhbGlkV2Vla2RheSIsIl9zdHJpY3QiLCJ1bmRlZmluZWQiLCJiaWdIb3VyIiwiaXNGcm96ZW4iLCJjcmVhdGVJbnZhbGlkIiwiTmFOIiwiZnVuIiwidGhpcyIsImxlbiIsIm1vbWVudFByb3BlcnRpZXMiLCJjb3B5Q29uZmlnIiwidG8iLCJmcm9tIiwicHJvcCIsInZhbCIsIl9pc0FNb21lbnRPYmplY3QiLCJfaSIsIl9mIiwiX2wiLCJfdHptIiwiX2lzVVRDIiwiX29mZnNldCIsIl9sb2NhbGUiLCJ1cGRhdGVJblByb2dyZXNzIiwiTW9tZW50IiwiY29uZmlnIiwidXBkYXRlT2Zmc2V0IiwiaXNNb21lbnQiLCJvYmoiLCJhYnNGbG9vciIsIm51bWJlciIsIk1hdGgiLCJjZWlsIiwiZmxvb3IiLCJ0b0ludCIsImFyZ3VtZW50Rm9yQ29lcmNpb24iLCJjb2VyY2VkTnVtYmVyIiwiaXNGaW5pdGUiLCJjb21wYXJlQXJyYXlzIiwiYXJyYXkxIiwiYXJyYXkyIiwiZG9udENvbnZlcnQiLCJtaW4iLCJsZW5ndGhEaWZmIiwiYWJzIiwiZGlmZnMiLCJ3YXJuIiwibXNnIiwic3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmdzIiwiY29uc29sZSIsImRlcHJlY2F0ZSIsImZpcnN0VGltZSIsImRlcHJlY2F0aW9uSGFuZGxlciIsImFyZyIsImFyZ3MiLCJzbGljZSIsImpvaW4iLCJFcnJvciIsInN0YWNrIiwia2V5cyIsImRlcHJlY2F0aW9ucyIsImRlcHJlY2F0ZVNpbXBsZSIsImlzRnVuY3Rpb24iLCJGdW5jdGlvbiIsIm1lcmdlQ29uZmlncyIsInBhcmVudENvbmZpZyIsImNoaWxkQ29uZmlnIiwiTG9jYWxlIiwic2V0IiwiYWxpYXNlcyIsImFkZFVuaXRBbGlhcyIsInVuaXQiLCJzaG9ydGhhbmQiLCJsb3dlckNhc2UiLCJ0b0xvd2VyQ2FzZSIsIm5vcm1hbGl6ZVVuaXRzIiwidW5pdHMiLCJub3JtYWxpemVPYmplY3RVbml0cyIsImlucHV0T2JqZWN0Iiwibm9ybWFsaXplZFByb3AiLCJub3JtYWxpemVkSW5wdXQiLCJwcmlvcml0aWVzIiwiYWRkVW5pdFByaW9yaXR5IiwicHJpb3JpdHkiLCJ6ZXJvRmlsbCIsInRhcmdldExlbmd0aCIsImZvcmNlU2lnbiIsImFic051bWJlciIsInplcm9zVG9GaWxsIiwicG93IiwibWF4Iiwic3Vic3RyIiwiZm9ybWF0dGluZ1Rva2VucyIsImxvY2FsRm9ybWF0dGluZ1Rva2VucyIsImZvcm1hdEZ1bmN0aW9ucyIsImZvcm1hdFRva2VuRnVuY3Rpb25zIiwiYWRkRm9ybWF0VG9rZW4iLCJ0b2tlbiIsInBhZGRlZCIsIm9yZGluYWwiLCJjYWxsYmFjayIsImZ1bmMiLCJsb2NhbGVEYXRhIiwiZm9ybWF0TW9tZW50IiwiZXhwYW5kRm9ybWF0IiwiYXJyYXkiLCJtYXRjaCIsInJlcGxhY2UiLCJtb20iLCJvdXRwdXQiLCJtYWtlRm9ybWF0RnVuY3Rpb24iLCJpbnZhbGlkRGF0ZSIsInJlcGxhY2VMb25nRGF0ZUZvcm1hdFRva2VucyIsImxvbmdEYXRlRm9ybWF0IiwibGFzdEluZGV4IiwidGVzdCIsIm1hdGNoMSIsIm1hdGNoMiIsIm1hdGNoMyIsIm1hdGNoNCIsIm1hdGNoNiIsIm1hdGNoMXRvMiIsIm1hdGNoM3RvNCIsIm1hdGNoNXRvNiIsIm1hdGNoMXRvMyIsIm1hdGNoMXRvNCIsIm1hdGNoMXRvNiIsIm1hdGNoVW5zaWduZWQiLCJtYXRjaFNpZ25lZCIsIm1hdGNoT2Zmc2V0IiwibWF0Y2hTaG9ydE9mZnNldCIsIm1hdGNoV29yZCIsInJlZ2V4ZXMiLCJhZGRSZWdleFRva2VuIiwicmVnZXgiLCJzdHJpY3RSZWdleCIsImlzU3RyaWN0IiwiZ2V0UGFyc2VSZWdleEZvclRva2VuIiwiUmVnRXhwIiwicmVnZXhFc2NhcGUiLCJtYXRjaGVkIiwicDEiLCJwMiIsInAzIiwicDQiLCJ0b2tlbnMiLCJhZGRQYXJzZVRva2VuIiwiYWRkV2Vla1BhcnNlVG9rZW4iLCJfdyIsImFkZFRpbWVUb0FycmF5RnJvbVRva2VuIiwiX2EiLCJkYXlzSW5ZZWFyIiwieWVhciIsImlzTGVhcFllYXIiLCJ5IiwicGFyc2VUd29EaWdpdFllYXIiLCJwYXJzZUludCIsImluZGV4T2YiLCJnZXRTZXRZZWFyIiwibWFrZUdldFNldCIsImtlZXBUaW1lIiwic2V0JDEiLCJtb250aCIsImRhdGUiLCJkYXlzSW5Nb250aCIsIngiLCJtb2RNb250aCIsIm1vbnRoc1Nob3J0IiwibW9udGhzIiwibW9udGhzU2hvcnRSZWdleCIsIm1vbnRoc1JlZ2V4IiwibW9udGhzUGFyc2UiLCJNT05USFNfSU5fRk9STUFUIiwiZGVmYXVsdExvY2FsZU1vbnRocyIsInNwbGl0IiwiZGVmYXVsdExvY2FsZU1vbnRoc1Nob3J0IiwiaGFuZGxlU3RyaWN0UGFyc2UiLCJtb250aE5hbWUiLCJpaSIsImxsYyIsInRvTG9jYWxlTG93ZXJDYXNlIiwiX21vbnRoc1BhcnNlIiwiX2xvbmdNb250aHNQYXJzZSIsIl9zaG9ydE1vbnRoc1BhcnNlIiwic2V0TW9udGgiLCJkYXlPZk1vbnRoIiwiZ2V0U2V0TW9udGgiLCJkZWZhdWx0TW9udGhzU2hvcnRSZWdleCIsImRlZmF1bHRNb250aHNSZWdleCIsImNvbXB1dGVNb250aHNQYXJzZSIsImNtcExlblJldiIsInNob3J0UGllY2VzIiwibG9uZ1BpZWNlcyIsIm1peGVkUGllY2VzIiwic29ydCIsIl9tb250aHNSZWdleCIsIl9tb250aHNTaG9ydFJlZ2V4IiwiX21vbnRoc1N0cmljdFJlZ2V4IiwiX21vbnRoc1Nob3J0U3RyaWN0UmVnZXgiLCJjcmVhdGVEYXRlIiwiaCIsIk0iLCJtcyIsImdldEZ1bGxZZWFyIiwic2V0RnVsbFllYXIiLCJjcmVhdGVVVENEYXRlIiwiVVRDIiwiZ2V0VVRDRnVsbFllYXIiLCJzZXRVVENGdWxsWWVhciIsImZpcnN0V2Vla09mZnNldCIsImRvdyIsImRveSIsImZ3ZCIsImdldFVUQ0RheSIsImRheU9mWWVhckZyb21XZWVrcyIsIndlZWsiLCJ3ZWVrZGF5IiwicmVzWWVhciIsInJlc0RheU9mWWVhciIsImRheU9mWWVhciIsIndlZWtPZlllYXIiLCJyZXNXZWVrIiwid2Vla09mZnNldCIsIndlZWtzSW5ZZWFyIiwid2Vla09mZnNldE5leHQiLCJzaGlmdFdlZWtkYXlzIiwid3MiLCJjb25jYXQiLCJ3ZWVrZGF5c01pbiIsIndlZWtkYXlzU2hvcnQiLCJ3ZWVrZGF5cyIsIndlZWtkYXlzTWluUmVnZXgiLCJ3ZWVrZGF5c1Nob3J0UmVnZXgiLCJ3ZWVrZGF5c1JlZ2V4Iiwid2Vla2RheXNQYXJzZSIsImRlZmF1bHRMb2NhbGVXZWVrZGF5cyIsImRlZmF1bHRMb2NhbGVXZWVrZGF5c1Nob3J0IiwiZGVmYXVsdExvY2FsZVdlZWtkYXlzTWluIiwiaGFuZGxlU3RyaWN0UGFyc2UkMSIsIndlZWtkYXlOYW1lIiwiX3dlZWtkYXlzUGFyc2UiLCJfc2hvcnRXZWVrZGF5c1BhcnNlIiwiX21pbldlZWtkYXlzUGFyc2UiLCJkYXkiLCJkZWZhdWx0V2Vla2RheXNSZWdleCIsImRlZmF1bHRXZWVrZGF5c1Nob3J0UmVnZXgiLCJkZWZhdWx0V2Vla2RheXNNaW5SZWdleCIsImNvbXB1dGVXZWVrZGF5c1BhcnNlIiwibWlucCIsInNob3J0cCIsImxvbmdwIiwibWluUGllY2VzIiwiX3dlZWtkYXlzUmVnZXgiLCJfd2Vla2RheXNTaG9ydFJlZ2V4IiwiX3dlZWtkYXlzTWluUmVnZXgiLCJfd2Vla2RheXNTdHJpY3RSZWdleCIsIl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXgiLCJfd2Vla2RheXNNaW5TdHJpY3RSZWdleCIsImhGb3JtYXQiLCJob3VycyIsImxvd2VyY2FzZSIsIm1pbnV0ZXMiLCJtYXRjaE1lcmlkaWVtIiwiX21lcmlkaWVtUGFyc2UiLCJzZWNvbmRzIiwia0lucHV0IiwiX2lzUG0iLCJpc1BNIiwiX21lcmlkaWVtIiwicG9zIiwicG9zMSIsInBvczIiLCJnbG9iYWxMb2NhbGUiLCJnZXRTZXRIb3VyIiwiYmFzZUNvbmZpZyIsImNhbGVuZGFyIiwic2FtZURheSIsIm5leHREYXkiLCJuZXh0V2VlayIsImxhc3REYXkiLCJsYXN0V2VlayIsInNhbWVFbHNlIiwiTFRTIiwiTFQiLCJMIiwiTEwiLCJMTEwiLCJMTExMIiwiZGF5T2ZNb250aE9yZGluYWxQYXJzZSIsInJlbGF0aXZlVGltZSIsImZ1dHVyZSIsInBhc3QiLCJzcyIsIm1tIiwiaGgiLCJkZCIsIk1NIiwieXkiLCJtZXJpZGllbVBhcnNlIiwibG9jYWxlcyIsImxvY2FsZUZhbWlsaWVzIiwibm9ybWFsaXplTG9jYWxlIiwibG9hZExvY2FsZSIsIm9sZExvY2FsZSIsIl9hYmJyIiwiZ2V0U2V0R2xvYmFsTG9jYWxlIiwiZSIsInZhbHVlcyIsImRhdGEiLCJnZXRMb2NhbGUiLCJkZWZpbmVMb2NhbGUiLCJhYmJyIiwiX2NvbmZpZyIsInBhcmVudExvY2FsZSIsImZvckVhY2giLCJuYW1lcyIsImoiLCJuZXh0IiwiY2hvb3NlTG9jYWxlIiwiY2hlY2tPdmVyZmxvdyIsIl9vdmVyZmxvd0RheU9mWWVhciIsIl9vdmVyZmxvd1dlZWtzIiwiX292ZXJmbG93V2Vla2RheSIsImRlZmF1bHRzIiwiY29uZmlnRnJvbUFycmF5IiwiY3VycmVudERhdGUiLCJleHBlY3RlZFdlZWtkYXkiLCJ5ZWFyVG9Vc2UiLCJub3dWYWx1ZSIsIm5vdyIsIl91c2VVVEMiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJnZXRNb250aCIsImdldERhdGUiLCJjdXJyZW50RGF0ZUFycmF5IiwidyIsIndlZWtZZWFyIiwidGVtcCIsIndlZWtkYXlPdmVyZmxvdyIsIkdHIiwiVyIsIkUiLCJjcmVhdGVMb2NhbCIsIl93ZWVrIiwiY3VyV2VlayIsImdnIiwiX2RheU9mWWVhciIsImRheU9mWWVhckZyb21XZWVrSW5mbyIsIl9uZXh0RGF5IiwiZ2V0RGF5Iiwic2V0VVRDTWludXRlcyIsImdldFVUQ01pbnV0ZXMiLCJleHRlbmRlZElzb1JlZ2V4IiwiYmFzaWNJc29SZWdleCIsInR6UmVnZXgiLCJpc29EYXRlcyIsImlzb1RpbWVzIiwiYXNwTmV0SnNvblJlZ2V4IiwiY29uZmlnRnJvbUlTTyIsImFsbG93VGltZSIsImRhdGVGb3JtYXQiLCJ0aW1lRm9ybWF0IiwidHpGb3JtYXQiLCJzdHJpbmciLCJleGVjIiwiY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdCIsInVudHJ1bmNhdGVZZWFyIiwieWVhclN0ciIsIm9ic09mZnNldHMiLCJVVCIsIkdNVCIsIkVEVCIsIkVTVCIsIkNEVCIsIkNTVCIsIk1EVCIsIk1TVCIsIlBEVCIsIlBTVCIsImNvbmZpZ0Zyb21SRkMyODIyIiwibW9udGhTdHIiLCJkYXlTdHIiLCJob3VyU3RyIiwibWludXRlU3RyIiwic2Vjb25kU3RyIiwicmVzdWx0IiwicGFyc2VkQXJyYXkiLCJ3ZWVrZGF5U3RyIiwicGFyc2VkSW5wdXQiLCJjaGVja1dlZWtkYXkiLCJvYnNPZmZzZXQiLCJtaWxpdGFyeU9mZnNldCIsIm51bU9mZnNldCIsImhtIiwiY2FsY3VsYXRlT2Zmc2V0IiwiSVNPXzg2MDEiLCJSRkNfMjgyMiIsInNraXBwZWQiLCJzdHJpbmdMZW5ndGgiLCJ0b3RhbFBhcnNlZElucHV0TGVuZ3RoIiwiaG91ciIsImlzUG0iLCJtZXJpZGllbUhvdXIiLCJtZXJpZGllbUZpeFdyYXAiLCJwcmVwYXJlQ29uZmlnIiwicHJlcGFyc2UiLCJ0ZW1wQ29uZmlnIiwiYmVzdE1vbWVudCIsInNjb3JlVG9CZWF0IiwiY3VycmVudFNjb3JlIiwic2NvcmUiLCJjb25maWdGcm9tU3RyaW5nQW5kQXJyYXkiLCJjcmVhdGVGcm9tSW5wdXRGYWxsYmFjayIsImNvbmZpZ0Zyb21TdHJpbmciLCJtaW51dGUiLCJzZWNvbmQiLCJtaWxsaXNlY29uZCIsImNvbmZpZ0Zyb21PYmplY3QiLCJjb25maWdGcm9tSW5wdXQiLCJpc1VUQyIsImdldE93blByb3BlcnR5TmFtZXMiLCJrIiwiaXNPYmplY3RFbXB0eSIsImFkZCIsInByb3RvdHlwZU1pbiIsIm90aGVyIiwicHJvdG90eXBlTWF4IiwicGlja0J5IiwibW9tZW50cyIsIm9yZGVyaW5nIiwiRHVyYXRpb24iLCJkdXJhdGlvbiIsInllYXJzIiwicXVhcnRlcnMiLCJxdWFydGVyIiwid2Vla3MiLCJpc29XZWVrIiwiZGF5cyIsIm1pbGxpc2Vjb25kcyIsInVuaXRIYXNEZWNpbWFsIiwicGFyc2VGbG9hdCIsImlzRHVyYXRpb25WYWxpZCIsIl9taWxsaXNlY29uZHMiLCJfZGF5cyIsIl9tb250aHMiLCJfZGF0YSIsIl9idWJibGUiLCJpc0R1cmF0aW9uIiwiYWJzUm91bmQiLCJyb3VuZCIsIm9mZnNldCIsInNlcGFyYXRvciIsInV0Y09mZnNldCIsInNpZ24iLCJvZmZzZXRGcm9tU3RyaW5nIiwiY2h1bmtPZmZzZXQiLCJtYXRjaGVyIiwibWF0Y2hlcyIsInBhcnRzIiwiY2xvbmVXaXRoT2Zmc2V0IiwibW9kZWwiLCJkaWZmIiwiY2xvbmUiLCJzZXRUaW1lIiwibG9jYWwiLCJnZXREYXRlT2Zmc2V0IiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJpc1V0YyIsImFzcE5ldFJlZ2V4IiwiaXNvUmVnZXgiLCJjcmVhdGVEdXJhdGlvbiIsInJldCIsImRpZmZSZXMiLCJiYXNlIiwicGFyc2VJc28iLCJpc0JlZm9yZSIsInBvc2l0aXZlTW9tZW50c0RpZmZlcmVuY2UiLCJpbnAiLCJpc0FmdGVyIiwiY3JlYXRlQWRkZXIiLCJkaXJlY3Rpb24iLCJwZXJpb2QiLCJ0bXAiLCJhZGRTdWJ0cmFjdCIsImlzQWRkaW5nIiwiaW52YWxpZCIsInN1YnRyYWN0IiwibW9udGhEaWZmIiwid2hvbGVNb250aERpZmYiLCJhbmNob3IiLCJuZXdMb2NhbGVEYXRhIiwiZGVmYXVsdEZvcm1hdCIsImRlZmF1bHRGb3JtYXRVdGMiLCJsYW5nIiwibW9kJDEiLCJkaXZpZGVuZCIsImRpdmlzb3IiLCJsb2NhbFN0YXJ0T2ZEYXRlIiwidXRjU3RhcnRPZkRhdGUiLCJhZGRXZWVrWWVhckZvcm1hdFRva2VuIiwiZ2V0U2V0V2Vla1llYXJIZWxwZXIiLCJ3ZWVrc1RhcmdldCIsInNldFdlZWtBbGwiLCJkYXlPZlllYXJEYXRhIiwiaXNvV2Vla1llYXIiLCJfZGF5T2ZNb250aE9yZGluYWxQYXJzZSIsIl9vcmRpbmFsUGFyc2UiLCJfZGF5T2ZNb250aE9yZGluYWxQYXJzZUxlbmllbnQiLCJnZXRTZXREYXlPZk1vbnRoIiwiZ2V0U2V0TWludXRlIiwiZ2V0U2V0U2Vjb25kIiwicGFyc2VNcyIsImdldFNldE1pbGxpc2Vjb25kIiwicHJvdG8iLCJwcmVQYXJzZVBvc3RGb3JtYXQiLCJ0aW1lIiwiZm9ybWF0cyIsInNvZCIsInN0YXJ0T2YiLCJjYWxlbmRhckZvcm1hdCIsImFzRmxvYXQiLCJ0aGF0Iiwiem9uZURlbHRhIiwiZW5kT2YiLCJzdGFydE9mRGF0ZSIsImlzb1dlZWtkYXkiLCJpbnB1dFN0cmluZyIsInBvc3Rmb3JtYXQiLCJ3aXRob3V0U3VmZml4IiwiaHVtYW5pemUiLCJmcm9tTm93IiwidG9Ob3ciLCJpbnZhbGlkQXQiLCJsb2NhbElucHV0IiwiaXNCZXR3ZWVuIiwiaW5jbHVzaXZpdHkiLCJsb2NhbEZyb20iLCJsb2NhbFRvIiwiaXNTYW1lIiwiaW5wdXRNcyIsImlzU2FtZU9yQWZ0ZXIiLCJpc1NhbWVPckJlZm9yZSIsInBhcnNpbmdGbGFncyIsInByaW9yaXRpemVkIiwidW5pdHNPYmoiLCJ1IiwiZ2V0UHJpb3JpdGl6ZWRVbml0cyIsInRvQXJyYXkiLCJ0b09iamVjdCIsInRvRGF0ZSIsInRvSVNPU3RyaW5nIiwia2VlcE9mZnNldCIsImluc3BlY3QiLCJ6b25lIiwiaXNMb2NhbCIsInByZWZpeCIsInN1ZmZpeCIsInRvSlNPTiIsInVuaXgiLCJjcmVhdGlvbkRhdGEiLCJpc29XZWVrcyIsIndlZWtJbmZvIiwiaXNvV2Vla3NJblllYXIiLCJwYXJzZVdlZWtkYXkiLCJwYXJzZUlzb1dlZWtkYXkiLCJrZWVwTG9jYWxUaW1lIiwia2VlcE1pbnV0ZXMiLCJsb2NhbEFkanVzdCIsIl9jaGFuZ2VJblByb2dyZXNzIiwicGFyc2Vab25lIiwidFpvbmUiLCJoYXNBbGlnbmVkSG91ck9mZnNldCIsImlzRFNUIiwiaXNVdGNPZmZzZXQiLCJ6b25lQWJiciIsInpvbmVOYW1lIiwiZGF0ZXMiLCJpc0RTVFNoaWZ0ZWQiLCJfaXNEU1RTaGlmdGVkIiwicHJvdG8kMSIsImdldCQxIiwiaW5kZXgiLCJmaWVsZCIsInNldHRlciIsImxpc3RNb250aHNJbXBsIiwib3V0IiwibGlzdFdlZWtkYXlzSW1wbCIsImxvY2FsZVNvcnRlZCIsInNoaWZ0IiwiX2NhbGVuZGFyIiwiX2xvbmdEYXRlRm9ybWF0IiwiZm9ybWF0VXBwZXIiLCJ0b1VwcGVyQ2FzZSIsIl9pbnZhbGlkRGF0ZSIsIl9vcmRpbmFsIiwiaXNGdXR1cmUiLCJfcmVsYXRpdmVUaW1lIiwicGFzdEZ1dHVyZSIsInNvdXJjZSIsImlzRm9ybWF0IiwiX21vbnRoc1Nob3J0IiwiX21vbnRoc1BhcnNlRXhhY3QiLCJmaXJzdERheU9mWWVhciIsImZpcnN0RGF5T2ZXZWVrIiwiX3dlZWtkYXlzIiwiX3dlZWtkYXlzTWluIiwiX3dlZWtkYXlzU2hvcnQiLCJfd2Vla2RheXNQYXJzZUV4YWN0IiwiX2Z1bGxXZWVrZGF5c1BhcnNlIiwiY2hhckF0IiwiaXNMb3dlciIsImxhbmdEYXRhIiwibWF0aEFicyIsImFkZFN1YnRyYWN0JDEiLCJhYnNDZWlsIiwiZGF5c1RvTW9udGhzIiwibW9udGhzVG9EYXlzIiwibWFrZUFzIiwiYWxpYXMiLCJhcyIsImFzTWlsbGlzZWNvbmRzIiwiYXNTZWNvbmRzIiwiYXNNaW51dGVzIiwiYXNIb3VycyIsImFzRGF5cyIsImFzV2Vla3MiLCJhc01vbnRocyIsImFzUXVhcnRlcnMiLCJhc1llYXJzIiwibWFrZUdldHRlciIsInRocmVzaG9sZHMiLCJzdWJzdGl0dXRlVGltZUFnbyIsImFicyQxIiwidG9JU09TdHJpbmckMSIsIlkiLCJEIiwidG9GaXhlZCIsInRvdGFsIiwidG90YWxTaWduIiwieW1TaWduIiwiZGF5c1NpZ24iLCJobXNTaWduIiwicHJvdG8kMiIsIm1vbnRoc0Zyb21EYXlzIiwid2l0aFN1ZmZpeCIsInBvc05lZ0R1cmF0aW9uIiwicmVsYXRpdmVUaW1lJDEiLCJ0b0lzb1N0cmluZyIsInZlcnNpb24iLCJ1cGRhdGVMb2NhbGUiLCJ0bXBMb2NhbGUiLCJyZWxhdGl2ZVRpbWVSb3VuZGluZyIsInJvdW5kaW5nRnVuY3Rpb24iLCJyZWxhdGl2ZVRpbWVUaHJlc2hvbGQiLCJ0aHJlc2hvbGQiLCJsaW1pdCIsIm15TW9tZW50IiwiSFRNTDVfRk1UIiwiREFURVRJTUVfTE9DQUwiLCJEQVRFVElNRV9MT0NBTF9TRUNPTkRTIiwiREFURVRJTUVfTE9DQUxfTVMiLCJEQVRFIiwiVElNRSIsIlRJTUVfU0VDT05EUyIsIlRJTUVfTVMiLCJXRUVLIiwiTU9OVEgiLCJmYWN0b3J5IiwiTU9ESUZJRVJfS0VZX05BTUVTIiwiREVGQVVMVF9WRVJUSUNBTF9TUEFDSU5HIiwiRkFOR19IRUlHSFRfUFgiLCJGQU5HX1dJRFRIX1BYIiwiV0VFS0RBWVMiLCJCTE9DS0VEX01PRElGSUVSIiwiREFZX1NJWkUiLCJPUEVOX1VQIiwiT1BFTl9ET1dOIiwiQU5DSE9SX1JJR0hUIiwiQU5DSE9SX0xFRlQiLCJJTkZPX1BPU0lUSU9OX0FGVEVSIiwiSU5GT19QT1NJVElPTl9CRUZPUkUiLCJJTkZPX1BPU0lUSU9OX0JPVFRPTSIsIklORk9fUE9TSVRJT05fVE9QIiwiSUNPTl9BRlRFUl9QT1NJVElPTiIsIklDT05fQkVGT1JFX1BPU0lUSU9OIiwiTkFWX1BPU0lUSU9OX1RPUCIsIk5BVl9QT1NJVElPTl9CT1RUT00iLCJWRVJUSUNBTF9TQ1JPTExBQkxFIiwiVkVSVElDQUxfT1JJRU5UQVRJT04iLCJIT1JJWk9OVEFMX09SSUVOVEFUSU9OIiwiRU5EX0RBVEUiLCJTVEFSVF9EQVRFIiwiSVNPX01PTlRIX0ZPUk1BVCIsIklTT19GT1JNQVQiLCJESVNQTEFZX0ZPUk1BVCIsIlNldCIsIiRUeXBlRXJyb3IiLCJUeXBlRXJyb3IiLCIkZ09QRCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInRocm93VHlwZUVycm9yIiwiVGhyb3dUeXBlRXJyb3IiLCJjYWxsZWUiLCJjYWxsZWVUaHJvd3MiLCJnT1BEdGhyb3dzIiwiaGFzU3ltYm9scyIsImdldFByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJhc3luY0dlbkl0ZXJhdG9yIiwiVHlwZWRBcnJheSIsIlVpbnQ4QXJyYXkiLCJJTlRSSU5TSUNTIiwiQXJyYXlCdWZmZXIiLCJpdGVyYXRvciIsImVudHJpZXMiLCJhc3luY0l0ZXJhdG9yIiwiQXRvbWljcyIsIkJvb2xlYW4iLCJEYXRhVmlldyIsImRlY29kZVVSSSIsImRlY29kZVVSSUNvbXBvbmVudCIsImVuY29kZVVSSSIsImVuY29kZVVSSUNvbXBvbmVudCIsImV2YWwiLCJFdmFsRXJyb3IiLCJGbG9hdDMyQXJyYXkiLCJGbG9hdDY0QXJyYXkiLCJJbnQ4QXJyYXkiLCJJbnQxNkFycmF5IiwiSW50MzJBcnJheSIsIkpTT04iLCJwYXJzZSIsIk1hcCIsIk51bWJlciIsIlByb21pc2UiLCJ0aGVuIiwiYWxsIiwicmVqZWN0IiwicmVzb2x2ZSIsIlByb3h5IiwiUmFuZ2VFcnJvciIsIlJlZmVyZW5jZUVycm9yIiwiUmVmbGVjdCIsIlNoYXJlZEFycmF5QnVmZmVyIiwiU3RyaW5nIiwiU3ludGF4RXJyb3IiLCJVaW50OENsYW1wZWRBcnJheSIsIlVpbnQxNkFycmF5IiwiVWludDMyQXJyYXkiLCJVUklFcnJvciIsIldlYWtNYXAiLCJXZWFrU2V0IiwiJHJlcGxhY2UiLCJyZVByb3BOYW1lIiwicmVFc2NhcGVDaGFyIiwic3RyaW5nVG9QYXRoIiwicXVvdGUiLCJzdWJTdHJpbmciLCJnZXRCYXNlSW50cmluc2ljIiwiYWxsb3dNaXNzaW5nIiwiZGVzYyIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY29uc3RydWN0b3IiLCJDYWxlbmRhckRheVBocmFzZXMiLCJEYXlQaWNrZXJOYXZpZ2F0aW9uUGhyYXNlcyIsIkRheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzUGhyYXNlcyIsIkRheVBpY2tlclBocmFzZXMiLCJTaW5nbGVEYXRlUGlja2VySW5wdXRQaHJhc2VzIiwiU2luZ2xlRGF0ZVBpY2tlclBocmFzZXMiLCJEYXRlUmFuZ2VQaWNrZXJJbnB1dFBocmFzZXMiLCJEYXRlUmFuZ2VQaWNrZXJQaHJhc2VzIiwiZm9jdXNTdGFydERhdGUiLCJqdW1wVG9QcmV2TW9udGgiLCJqdW1wVG9OZXh0TW9udGgiLCJwYWdlVXBQYWdlRG93biIsImhvbWVFbmQiLCJlc2NhcGUiLCJzZWxlY3RGb2N1c2VkRGF0ZSIsIm1vdmVGb2N1c0J5T25lRGF5IiwibW92ZUZvY3VzQnlPbmVXZWVrIiwicmV0dXJuRm9jdXNUb0lucHV0Iiwia2V5Ym9hcmRGb3J3YXJkTmF2aWdhdGlvbkluc3RydWN0aW9ucyIsImtleWJvYXJkQmFja3dhcmROYXZpZ2F0aW9uSW5zdHJ1Y3Rpb25zIiwiY2hvb3NlQXZhaWxhYmxlU3RhcnREYXRlIiwiX3JlZiIsImNob29zZUF2YWlsYWJsZUVuZERhdGUiLCJfcmVmMiIsImNob29zZUF2YWlsYWJsZURhdGUiLCJfcmVmMyIsImRhdGVJc1VuYXZhaWxhYmxlIiwiX3JlZjQiLCJkYXRlSXNTZWxlY3RlZCIsIl9yZWY1IiwiZGF0ZUlzU2VsZWN0ZWRBc1N0YXJ0RGF0ZSIsIl9yZWY2IiwiZGF0ZUlzU2VsZWN0ZWRBc0VuZERhdGUiLCJfcmVmNyIsIl9kZWZhdWx0IiwiY2FsZW5kYXJMYWJlbCIsInJvbGVEZXNjcmlwdGlvbiIsImNsb3NlRGF0ZVBpY2tlciIsImNsZWFyRGF0ZSIsImNsZWFyRGF0ZXMiLCJrZXlib2FyZFNob3J0Y3V0cyIsInNob3dLZXlib2FyZFNob3J0Y3V0c1BhbmVsIiwiaGlkZUtleWJvYXJkU2hvcnRjdXRzUGFuZWwiLCJvcGVuVGhpc1BhbmVsIiwiZW50ZXJLZXkiLCJsZWZ0QXJyb3dSaWdodEFycm93IiwidXBBcnJvd0Rvd25BcnJvdyIsInF1ZXN0aW9uTWFyayIsIm1vdmVGb2N1c0J5T25lTW9udGgiLCJtb3ZlRm9jdXN0b1N0YXJ0QW5kRW5kT2ZXZWVrIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsImRlZmF1bHRQaHJhc2VzIiwicmVkdWNlIiwicGhyYXNlcyIsInRhcmdldCIsIm93bktleXMiLCJfZGVmaW5lUHJvcGVydHkyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJfb2JqZWN0U3ByZWFkIiwiX3Byb3BUeXBlcyIsIm9uZU9mVHlwZSIsIm5vZGUiLCJlbnVtZXJhYmxlT25seSIsImdldE93blByb3BlcnR5U3ltYm9scyIsInN5bWJvbHMiLCJmaWx0ZXIiLCJzeW0iLCJfdHlwZW9mIiwib2JqQSIsIm9iakIiLCJfb2JqZWN0SXMyIiwia2V5c0EiLCJrZXlzQiIsIl9oYXMyIiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJzZWxmIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJ3aXRoU3R5bGVzIiwiX3dpdGhTdHlsZXNQcm9wVHlwZXMiLCJ3aXRoU3R5bGVzUHJvcFR5cGVzIiwiY3NzIiwiX2V4dGVuZHMyIiwiX2luaGVyaXRzTG9vc2UyIiwiX3JlYWN0IiwiX2hvaXN0Tm9uUmVhY3RTdGF0aWNzIiwiX2dldENvbXBvbmVudE5hbWUiLCJfZW1wdHlTdHlsZXNGbiIsIl9XaXRoU3R5bGVzQ29udGV4dCIsIl9UaGVtZWRTdHlsZVNoZWV0Iiwic3R5bGVzRm4iLCJfcmVmJHN0eWxlc1Byb3BOYW1lIiwic3R5bGVzUHJvcE5hbWUiLCJfcmVmJHRoZW1lUHJvcE5hbWUiLCJ0aGVtZVByb3BOYW1lIiwiX3JlZiRjc3NQcm9wTmFtZSIsImNzc1Byb3BOYW1lIiwiX3JlZiRmbHVzaEJlZm9yZSIsImZsdXNoQmVmb3JlIiwiX3JlZiRwdXJlQ29tcG9uZW50IiwicHVyZUNvbXBvbmVudCIsIkJhc2VDbGFzcyIsIlB1cmVDb21wb25lbnQiLCJDb21wb25lbnQiLCJzdHlsZXNGblJlc3VsdENhY2hlTWFwIiwiZ2V0T3JDcmVhdGVTdHlsZXNGblJlc3VsdENhY2hlIiwidGhlbWUiLCJzdHlsZXNGblJlc3VsdCIsIndpdGhTdHlsZXNDYWNoZSIsImdldENvbXBvbmVudENhY2hlIiwiY29tcG9uZW50IiwidGhlbWVDYWNoZSIsImNvbXBvbmVudENhY2hlIiwidXBkYXRlQ29tcG9uZW50Q2FjaGUiLCJyZXN1bHRzIiwibHRyIiwicnRsIiwibWFrZUNyZWF0ZUZuIiwic3R5bGVzSW50ZXJmYWNlIiwiZGlyZWN0aW9uU2VsZWN0b3IiLCJESVJFQ1RJT05TIiwiUlRMIiwibWFrZVJlc29sdmVGbiIsIldyYXBwZWRDb21wb25lbnQiLCJ3cmFwcGVkQ29tcG9uZW50TmFtZSIsIldpdGhTdHlsZXMiLCJfQmFzZUNsYXNzIiwiX3Byb3RvIiwiZ2V0Q3VycmVudEludGVyZmFjZSIsImNvbnRleHQiLCJfZ2V0SW50ZXJmYWNlIiwiZ2V0Q3VycmVudFRoZW1lIiwic3R5bGVzVGhlbWUiLCJfZ2V0VGhlbWUiLCJnZXRDdXJyZW50RGlyZWN0aW9uIiwiTFRSIiwiZ2V0UHJvcHMiLCJpbnRlcmZhY2VDaGFuZ2VkIiwidGhlbWVDaGFuZ2VkIiwicHJvcHMiLCJfbGVuIiwiX2tleSIsInN0eWxlcyIsImZsdXNoIiwicmVuZGVyIiwiX3RoaXMkZ2V0UHJvcHMiLCJjcmVhdGVFbGVtZW50IiwicHJvcFR5cGVzIiwiZGVmYXVsdFByb3BzIiwiY29udGV4dFR5cGUiLCJkaXNwbGF5TmFtZSIsInJlc29sdmVMVFIiLCJjaGVja0RDRSIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsImVyciIsImVycm9yIiwibW9tZW50IiwibW9tZW50VmFsaWRhdGlvbldyYXBwZXIiLCJjb3JlIiwibW9tZW50T2JqIiwiY3JlYXRlTW9tZW50Q2hlY2tlciIsImlzVmFsaWRNb21lbnQiLCJtb21lbnRTdHJpbmciLCJzdHIiLCJtb21lbnREdXJhdGlvbk9iaiIsInRvU3RyIiwib3JpZ0RlZmluZVByb3BlcnR5Iiwic3VwcG9ydHNEZXNjcmlwdG9ycyIsIl8iLCJhcmVQcm9wZXJ0eURlc2NyaXB0b3JzU3VwcG9ydGVkIiwicHJlZGljYXRlIiwicHJlZGljYXRlcyIsIkVTNVR5cGUiLCJfbW9tZW50IiwiX2NvbnN0YW50cyIsIm9uZU9mIiwicmVhY3RJcyIsIlJFQUNUX1NUQVRJQ1MiLCJjaGlsZENvbnRleHRUeXBlcyIsImNvbnRleHRUeXBlcyIsImdldERlZmF1bHRQcm9wcyIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIm1peGlucyIsInR5cGUiLCJLTk9XTl9TVEFUSUNTIiwiY2FsbGVyIiwiYXJpdHkiLCJNRU1PX1NUQVRJQ1MiLCJjb21wYXJlIiwiVFlQRV9TVEFUSUNTIiwiZ2V0U3RhdGljcyIsImlzTWVtbyIsIkZvcndhcmRSZWYiLCJNZW1vIiwib2JqZWN0UHJvdG90eXBlIiwiaG9pc3ROb25SZWFjdFN0YXRpY3MiLCJ0YXJnZXRDb21wb25lbnQiLCJzb3VyY2VDb21wb25lbnQiLCJibGFja2xpc3QiLCJpbmhlcml0ZWRDb21wb25lbnQiLCJ0YXJnZXRTdGF0aWNzIiwic291cmNlU3RhdGljcyIsImRlc2NyaXB0b3IiLCJnIiwid2luZG93IiwiR2V0SW50cmluc2ljIiwiY2FsbEJpbmQiLCIkaW5kZXhPZiIsImludHJpbnNpYyIsImRhdGVTdHJpbmciLCJjdXN0b21Gb3JtYXQiLCJkYXRlRm9ybWF0cyIsIkRvY3VtZW50VG91Y2giLCJkb2N1bWVudCIsIm5hdmlnYXRvciIsIm1heFRvdWNoUG9pbnRzIiwibXNNYXhUb3VjaFBvaW50cyIsIl9pc0JlZm9yZURheSIsImN1cnJlbnRGb3JtYXQiLCJkYXRlT2JqIiwiX3RvTW9tZW50T2JqZWN0IiwicGFkU3RhcnQiLCJib29sIiwiYVllYXIiLCJhTW9udGgiLCJiWWVhciIsImJNb250aCIsImlzU2FtZVllYXIiLCJpc1NhbWVNb250aCIsIkNsb3NlQnV0dG9uIiwiZmlsbFJ1bGUiLCJmb2N1c2FibGUiLCJ2aWV3Qm94IiwiYXJndW1lbnQiLCIkRnVuY3Rpb24iLCIkYXBwbHkiLCIkY2FsbCIsImRlZmluZSIsImltcGxlbWVudGF0aW9uIiwiZ2V0UG9seWZpbGwiLCJzaGltIiwicG9seWZpbGwiLCJfdG9Db25zdW1hYmxlQXJyYXkyIiwiYW5kIiwiaW5zdGFuY2VPZiIsInByb3BOYW1lIiwicmVzdCIsImZpcnN0RXJyb3IiLCJwcm9wVmFsdWUiLCJ2IiwiX1Byb3BUeXBlcyRzdHJpbmciLCJmYWtlUHJvcE5hbWUiLCJpc1JlcXVpcmVkIiwiQ0FOX1VTRV9ET00iLCJtZW1vaXplZCIsImNhblVzZVBhc3NpdmVFdmVudExpc3RlbmVycyIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwic3VwcG9ydHNQYXNzaXZlT3B0aW9uIiwib3B0cyIsIm5vb3AiLCJ0ZXN0UGFzc2l2ZUV2ZW50TGlzdGVuZXJzIiwiZW5zdXJlQ2FuTXV0YXRlTmV4dEV2ZW50SGFuZGxlcnMiLCJldmVudEhhbmRsZXJzIiwiaGFuZGxlcnMiLCJuZXh0SGFuZGxlcnMiLCJUYXJnZXRFdmVudEhhbmRsZXJzIiwiZXZlbnRzIiwiZ2V0RXZlbnRIYW5kbGVycyIsImV2ZW50TmFtZSIsIm9wdGlvbnMiLCJub3JtYWxpemVkRXZlbnRPcHRpb25zIiwiY2FwdHVyZSIsInBhc3NpdmUiLCJvbmNlIiwiaGFuZGxlRXZlbnQiLCJldmVudCIsImhhbmRsZXIiLCJsaXN0ZW5lciIsIl90aGlzIiwiaXNTdWJzY3JpYmVkIiwic3BsaWNlIiwiZXZlbnRPcHRpb25zIiwibm9ybWFsaXplRXZlbnRPcHRpb25zIiwiX2lzU2FtZURheSIsImFycmF5V2l0aG91dEhvbGVzIiwiaXRlcmFibGVUb0FycmF5Iiwibm9uSXRlcmFibGVTcHJlYWQiLCJnZXRQYWRkaW5nIiwidmVydGljYWwiLCJ0b3AiLCJib3R0b20iLCJpc1RvcERlZmluZWQiLCJpc0JvdHRvbURlZmluZWQiLCJpc1ZlcnRpY2FsRGVmaW5lZCIsInNtYWxsIiwiX3JlZiRmb250JGlucHV0IiwiZm9udCIsImxpbmVIZWlnaHQiLCJsaW5lSGVpZ2h0X3NtYWxsIiwiX3JlZiRzcGFjaW5nIiwic3BhY2luZyIsImlucHV0UGFkZGluZyIsImRpc3BsYXlUZXh0UGFkZGluZ1ZlcnRpY2FsIiwiZGlzcGxheVRleHRQYWRkaW5nVG9wIiwiZGlzcGxheVRleHRQYWRkaW5nQm90dG9tIiwiZGlzcGxheVRleHRQYWRkaW5nVmVydGljYWxfc21hbGwiLCJkaXNwbGF5VGV4dFBhZGRpbmdUb3Bfc21hbGwiLCJkaXNwbGF5VGV4dFBhZGRpbmdCb3R0b21fc21hbGwiLCJjYWxjTGluZUhlaWdodCIsInBhZGRpbmciLCJudW1iZXJPZk1vbnRocyIsImVuYWJsZU91dHNpZGVEYXlzIiwic3RhcnRLZXkiLCJfdG9JU09Nb250aFN0cmluZyIsImVuZEtleSIsInN0YXJ0Q2FjaGVPdXRzaWRlRGF5cyIsImhhcyIsImVuZENhY2hlT3V0c2lkZURheXMiLCJfaXNBZnRlckRheSIsInN0YXJ0Q2FjaGVJbnNpZGVEYXlzIiwiZW5kQ2FjaGVJbnNpZGVEYXlzIiwiUHVyZURheVBpY2tlciIsIl9lbnp5bWVTaGFsbG93RXF1YWwiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkMiIsIl9yZWFjdFdpdGhTdHlsZXMiLCJfdGhyb3R0bGUiLCJfaXNUb3VjaERldmljZSIsIl9yZWFjdE91dHNpZGVDbGlja0hhbmRsZXIiLCJfZGVmYXVsdFBocmFzZXMiLCJfbm9mbGlwIiwiX0NhbGVuZGFyTW9udGhHcmlkIiwiX0RheVBpY2tlck5hdmlnYXRpb24iLCJfRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHMiLCJfZ2V0TnVtYmVyT2ZDYWxlbmRhck1vbnRoV2Vla3MiLCJfZ2V0Q2FsZW5kYXJNb250aFdpZHRoIiwiX2NhbGN1bGF0ZURpbWVuc2lvbiIsIl9nZXRBY3RpdmVFbGVtZW50IiwiX2lzRGF5VmlzaWJsZSIsIl9pc1NhbWVNb250aCIsIm9yaWVudGF0aW9uIiwid2l0aFBvcnRhbCIsIm9uT3V0c2lkZUNsaWNrIiwiaGlkZGVuIiwiaW5pdGlhbFZpc2libGVNb250aCIsInJlbmRlckNhbGVuZGFySW5mbyIsImNhbGVuZGFySW5mb1Bvc2l0aW9uIiwiZGF5U2l6ZSIsImlzUlRMIiwidmVydGljYWxIZWlnaHQiLCJub0JvcmRlciIsInRyYW5zaXRpb25EdXJhdGlvbiIsInZlcnRpY2FsQm9yZGVyU3BhY2luZyIsImhvcml6b250YWxNb250aFBhZGRpbmciLCJyZW5kZXJLZXlib2FyZFNob3J0Y3V0c0J1dHRvbiIsInJlbmRlcktleWJvYXJkU2hvcnRjdXRzUGFuZWwiLCJkYXlQaWNrZXJOYXZpZ2F0aW9uSW5saW5lU3R5bGVzIiwiZGlzYWJsZVByZXYiLCJkaXNhYmxlTmV4dCIsIm5hdlBvc2l0aW9uIiwibmF2UHJldiIsIm5hdk5leHQiLCJyZW5kZXJOYXZQcmV2QnV0dG9uIiwicmVuZGVyTmF2TmV4dEJ1dHRvbiIsIm5vTmF2QnV0dG9ucyIsIm5vTmF2TmV4dEJ1dHRvbiIsIm5vTmF2UHJldkJ1dHRvbiIsIm9uUHJldk1vbnRoQ2xpY2siLCJvbk5leHRNb250aENsaWNrIiwib25Nb250aENoYW5nZSIsIm9uWWVhckNoYW5nZSIsIm9uR2V0TmV4dFNjcm9sbGFibGVNb250aHMiLCJvbkdldFByZXZTY3JvbGxhYmxlTW9udGhzIiwicmVuZGVyTW9udGhUZXh0IiwicmVuZGVyTW9udGhFbGVtZW50IiwicmVuZGVyV2Vla0hlYWRlckVsZW1lbnQiLCJtb2RpZmllcnMiLCJyZW5kZXJDYWxlbmRhckRheSIsInJlbmRlckRheUNvbnRlbnRzIiwib25EYXlDbGljayIsIm9uRGF5TW91c2VFbnRlciIsIm9uRGF5TW91c2VMZWF2ZSIsImlzRm9jdXNlZCIsImdldEZpcnN0Rm9jdXNhYmxlRGF5Iiwib25CbHVyIiwic2hvd0tleWJvYXJkU2hvcnRjdXRzIiwib25UYWIiLCJvblNoaWZ0VGFiIiwibW9udGhGb3JtYXQiLCJ3ZWVrRGF5Rm9ybWF0IiwiZGF5QXJpYUxhYmVsRm9ybWF0IiwiRGF5UGlja2VyIiwiY3VycmVudE1vbnRoIiwiZm9jdXNlZERhdGUiLCJ0cmFuc2xhdGlvblZhbHVlIiwiaXNIb3Jpem9udGFsIiwiaGFzU2V0SW5pdGlhbFZpc2libGVNb250aCIsInN0YXRlIiwiY3VycmVudE1vbnRoU2Nyb2xsVG9wIiwibW9udGhUcmFuc2l0aW9uIiwic2Nyb2xsYWJsZU1vbnRoTXVsdGlwbGUiLCJjYWxlbmRhck1vbnRoV2lkdGgiLCJuZXh0Rm9jdXNlZERhdGUiLCJvbktleWJvYXJkU2hvcnRjdXRzUGFuZWxDbG9zZSIsImlzVG91Y2hEZXZpY2UiLCJ3aXRoTW91c2VJbnRlcmFjdGlvbnMiLCJjYWxlbmRhckluZm9XaWR0aCIsIm1vbnRoVGl0bGVIZWlnaHQiLCJoYXNTZXRIZWlnaHQiLCJzZXRDYWxlbmRhck1vbnRoV2Vla3MiLCJjYWxlbmRhck1vbnRoR3JpZEhlaWdodCIsInNldENhbGVuZGFySW5mb1dpZHRoVGltZW91dCIsInNldENhbGVuZGFyTW9udGhHcmlkSGVpZ2h0VGltZW91dCIsIm9uS2V5RG93biIsInRocm90dGxlZEtleURvd24iLCJvbkZpbmFsS2V5RG93biIsInRyYWlsaW5nIiwib25QcmV2TW9udGhUcmFuc2l0aW9uIiwib25OZXh0TW9udGhUcmFuc2l0aW9uIiwiZ2V0TmV4dFNjcm9sbGFibGVNb250aHMiLCJnZXRQcmV2U2Nyb2xsYWJsZU1vbnRocyIsInVwZGF0ZVN0YXRlQWZ0ZXJNb250aFRyYW5zaXRpb24iLCJvcGVuS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCIsImNsb3NlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCIsInNldENhbGVuZGFySW5mb1JlZiIsInNldENvbnRhaW5lclJlZiIsInNldFRyYW5zaXRpb25Db250YWluZXJSZWYiLCJzZXRNb250aFRpdGxlSGVpZ2h0IiwibmV4dFByb3BzIiwibmV4dFN0YXRlIiwiY29tcG9uZW50RGlkTW91bnQiLCJjYWxlbmRhckluZm8iLCJ0cmFuc2l0aW9uQ29udGFpbmVyIiwic2Nyb2xsSGVpZ2h0Iiwic2Nyb2xsVG9wIiwic2V0U3RhdGUiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwibmV4dEN1cnJlbnRNb250aCIsIl90aGlzJHByb3BzIiwicHJldklzRm9jdXNlZCIsInByZXZSZW5kZXJNb250aFRleHQiLCJnZXRGb2N1c2VkRGF5IiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsIl90aGlzMiIsInNldFRpbWVvdXQiLCJjYWxlbmRhckluZm9QYW5lbFdpZHRoIiwiY29tcG9uZW50RGlkVXBkYXRlIiwicHJldlByb3BzIiwicHJldlN0YXRlIiwiX3RoaXMkcHJvcHMyIiwiX3RoaXMkc3RhdGUiLCJ2aXNpYmxlQ2FsZW5kYXJXZWVrcyIsImNhbGVuZGFyTW9udGhXZWVrcyIsIm5ld01vbnRoSGVpZ2h0IiwiYWRqdXN0RGF5UGlja2VySGVpZ2h0IiwiY29udGFpbmVyIiwiZm9jdXMiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImNsZWFyVGltZW91dCIsInN0b3BQcm9wYWdhdGlvbiIsIl90aGlzJHByb3BzMyIsIl90aGlzJHN0YXRlMiIsIm5ld0ZvY3VzZWREYXRlIiwiZGlkVHJhbnNpdGlvbk1vbnRoIiwiYWN0aXZlRWxlbWVudCIsInByZXZlbnREZWZhdWx0IiwibWF5YmVUcmFuc2l0aW9uUHJldk1vbnRoIiwibWF5YmVUcmFuc2l0aW9uTmV4dE1vbnRoIiwic2hpZnRLZXkiLCJfdGhpcyRwcm9wczQiLCJfdGhpcyRzdGF0ZTMiLCJpc1ZlcnRpY2FsIiwiY2FsY3VsYXRlQW5kU2V0RGF5UGlja2VySGVpZ2h0IiwiX3RoaXMkcHJvcHM1IiwiX3RoaXMkc3RhdGU0IiwiZ2V0Rmlyc3REYXlPZldlZWsiLCJnZXRXZWVrSGVhZGVycyIsIndlZWtIZWFkZXJzIiwiZ2V0Rmlyc3RWaXNpYmxlSW5kZXgiLCJmaXJzdFZpc2libGVNb250aEluZGV4IiwibmV3TW9udGgiLCJfdGhpcyRwcm9wczYiLCJfdGhpczMiLCJudW1iZXJPZldlZWtzIiwicmVmIiwiX3RoaXMkcHJvcHM3IiwiX3RoaXMkc3RhdGU1IiwibmV3Rm9jdXNlZERhdGVNb250aCIsImZvY3VzZWREYXRlTW9udGgiLCJpc05ld0ZvY3VzZWREYXRlVmlzaWJsZSIsIl90aGlzJHN0YXRlNiIsIl90aGlzNCIsIl90aGlzJHByb3BzOCIsIl90aGlzJHN0YXRlNyIsIm5ld0ludmlzaWJsZU1vbnRoIiwiX25ld0ludmlzaWJsZU1vbnRoIiwiX251bWJlck9mV2Vla3MiLCJib2R5IiwiY29udGFpbnMiLCJibHVyIiwiX3RoaXM1IiwibW9udGhIZWlnaHQiLCJzdHlsZSIsImhlaWdodCIsIl90aGlzJHByb3BzOSIsIm9uQ2xvc2VDYWxsQmFjayIsInJlbmRlck5hdmlnYXRpb24iLCJuYXZEaXJlY3Rpb24iLCJfdGhpcyRwcm9wczEwIiwiaW5saW5lU3R5bGVzIiwic2hvd05hdk5leHRCdXR0b24iLCJzaG93TmF2UHJldkJ1dHRvbiIsInJlbmRlcldlZWtIZWFkZXIiLCJfdGhpcyRwcm9wczExIiwidmVydGljYWxTY3JvbGxhYmxlIiwiaG9yaXpvbnRhbFN0eWxlIiwibGVmdCIsInZlcnRpY2FsU3R5bGUiLCJtYXJnaW5MZWZ0Iiwid2Vla0hlYWRlclN0eWxlIiwiaGVhZGVyIiwiRGF5UGlja2VyX3dlZWtIZWFkZXJfbGkiLCJ3aWR0aCIsIkRheVBpY2tlcl93ZWVrSGVhZGVyIiwiRGF5UGlja2VyX3dlZWtIZWFkZXJfX3ZlcnRpY2FsIiwiRGF5UGlja2VyX3dlZWtIZWFkZXJfX3ZlcnRpY2FsU2Nyb2xsYWJsZSIsIkRheVBpY2tlcl93ZWVrSGVhZGVyX3VsIiwiX3RoaXM2IiwiX3RoaXMkc3RhdGU4IiwiaXNUb3VjaCIsIl90aGlzJHByb3BzMTIiLCJkYXlQaWNrZXJIb3Jpem9udGFsUGFkZGluZyIsInJlYWN0RGF0ZXMiLCJudW1PZldlZWtIZWFkZXJzIiwiaXNDYWxlbmRhck1vbnRoR3JpZEFuaW1hdGluZyIsInNob3VsZEZvY3VzRGF0ZSIsImtleWJvYXJkU2hvcnRjdXRCdXR0b25Mb2NhdGlvbiIsIkJPVFRPTV9SSUdIVCIsIlRPUF9MRUZUIiwiVE9QX1JJR0hUIiwic2hvdWxkQW5pbWF0ZUhlaWdodCIsImNhbGVuZGFySW5mb1Bvc2l0aW9uVG9wIiwiY2FsZW5kYXJJbmZvUG9zaXRpb25Cb3R0b20iLCJjYWxlbmRhckluZm9Qb3NpdGlvbkJlZm9yZSIsImNhbGVuZGFySW5mb1Bvc2l0aW9uQWZ0ZXIiLCJjYWxlbmRhckluZm9Jc0lubGluZSIsIkRheVBpY2tlcl9jYWxlbmRhckluZm9fX2hvcml6b250YWwiLCJ3cmFwcGVySG9yaXpvbnRhbFdpZHRoIiwiZnVsbEhvcml6b250YWxXaWR0aCIsInRyYW5zaXRpb25Db250YWluZXJTdHlsZSIsImRheVBpY2tlcldyYXBwZXJTdHlsZSIsImRheVBpY2tlclN0eWxlIiwibWFyZ2luVG9wIiwiRGF5UGlja2VyX19ob3Jpem9udGFsIiwiRGF5UGlja2VyX192ZXJ0aWNhbFNjcm9sbGFibGUiLCJEYXlQaWNrZXJfcG9ydGFsX19ob3Jpem9udGFsIiwiRGF5UGlja2VyX3BvcnRhbF9fdmVydGljYWwiLCJEYXlQaWNrZXJfX2hpZGRlbiIsIkRheVBpY2tlcl9fd2l0aEJvcmRlciIsIkRheVBpY2tlcl93cmFwcGVyX19ob3Jpem9udGFsIiwiRGF5UGlja2VyX3dlZWtIZWFkZXJzIiwiRGF5UGlja2VyX3dlZWtIZWFkZXJzX19ob3Jpem9udGFsIiwicm9sZSIsIkRheVBpY2tlcl9mb2N1c1JlZ2lvbiIsIm9uQ2xpY2siLCJvbk1vdXNlVXAiLCJ0YWJJbmRleCIsIkRheVBpY2tlcl90cmFuc2l0aW9uQ29udGFpbmVyIiwiRGF5UGlja2VyX3RyYW5zaXRpb25Db250YWluZXJfX2hvcml6b250YWwiLCJEYXlQaWNrZXJfdHJhbnNpdGlvbkNvbnRhaW5lcl9fdmVydGljYWwiLCJEYXlQaWNrZXJfdHJhbnNpdGlvbkNvbnRhaW5lcl9fdmVydGljYWxTY3JvbGxhYmxlIiwiaW5pdGlhbE1vbnRoIiwiaXNBbmltYXRpbmciLCJvbk1vbnRoVHJhbnNpdGlvbkVuZCIsImJsb2NrIiwiYnV0dG9uTG9jYXRpb24iLCJfcmVmNCRyZWFjdERhdGVzIiwiY29sb3IiLCJub1Njcm9sbEJhck9uVmVydGljYWxTY3JvbGxhYmxlIiwiekluZGV4IiwiYmFja2dyb3VuZCIsInBvc2l0aW9uIiwidGV4dEFsaWduIiwidmlzaWJpbGl0eSIsImJveFNoYWRvdyIsImJvcmRlclJhZGl1cyIsIm91dGxpbmUiLCJkaXNwbGF5IiwidmVydGljYWxBbGlnbiIsInBsYWNlaG9sZGVyVGV4dCIsImJvcmRlckJvdHRvbSIsImJvcmRlciIsImxpc3RTdHlsZSIsIm1hcmdpbiIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwiZm9udFNpemUiLCJzaXplIiwidHJhbnNpdGlvbiIsInBhZGRpbmdUb3AiLCJyaWdodCIsIm92ZXJmbG93WSIsIklzUHJvcGVydHlLZXkiLCJUeXBlIiwiTyIsIlAiLCIkQXJyYXkiLCJyb290IiwiZ2xvYmFsIiwiaXNhcnJheSIsInBhdGhUb1JlZ2V4cCIsImNvbXBpbGUiLCJ0b2tlbnNUb0Z1bmN0aW9uIiwidG9rZW5zVG9SZWdFeHAiLCJQQVRIX1JFR0VYUCIsInBhdGgiLCJkZWZhdWx0RGVsaW1pdGVyIiwiZGVsaW1pdGVyIiwiZXNjYXBlZCIsImdyb3VwIiwibW9kaWZpZXIiLCJhc3RlcmlzayIsInBhcnRpYWwiLCJyZXBlYXQiLCJvcHRpb25hbCIsInBhdHRlcm4iLCJlc2NhcGVHcm91cCIsImVzY2FwZVN0cmluZyIsImVuY29kZVVSSUNvbXBvbmVudFByZXR0eSIsImNoYXJDb2RlQXQiLCJlbmNvZGUiLCJwcmV0dHkiLCJzZWdtZW50Iiwic3RyaW5naWZ5IiwiYXR0YWNoS2V5cyIsInJlIiwic2Vuc2l0aXZlIiwiZW5kIiwicm91dGUiLCJlbmRzV2l0aERlbGltaXRlciIsImdyb3VwcyIsInJlZ2V4cFRvUmVnZXhwIiwiYXJyYXlUb1JlZ2V4cCIsInN0cmluZ1RvUmVnZXhwIiwicHJvcElzRW51bWVyYWJsZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwidGVzdDEiLCJ0ZXN0MiIsImZyb21DaGFyQ29kZSIsInRlc3QzIiwibGV0dGVyIiwic2hvdWxkVXNlTmF0aXZlIiwic3ltYm9sTWFwIiwibnVtYmVyTWFwIiwicGx1cmFsRm9ybSIsInBsdXJhbHMiLCJwbHVyYWxpemUiLCJmIiwid2Vla2RheXNQYXJzZUV4YWN0Iiwic3VmZml4ZXMiLCIxIiwiNSIsIjgiLCI3MCIsIjgwIiwiMiIsIjciLCIyMCIsIjUwIiwiMyIsIjQiLCIxMDAiLCI2IiwiOSIsIjEwIiwiMzAiLCI2MCIsIjkwIiwicmVsYXRpdmVUaW1lV2l0aFBsdXJhbCIsIm51bSIsImZvcm1zIiwic3RhbmRhbG9uZSIsImxhc3REaWdpdCIsImxhc3QyRGlnaXRzIiwicmVsYXRpdmVUaW1lV2l0aE11dGF0aW9uIiwidGV4dCIsIm11dGF0aW9uVGFibGUiLCJzdWJzdHJpbmciLCJzb2Z0TXV0YXRpb24iLCJtdXRhdGlvbiIsImxhc3ROdW1iZXIiLCJ0cmFuc2xhdGUiLCJtb250aHNQYXJzZUV4YWN0IiwibGwiLCJsbGwiLCJsbGxsIiwicGx1cmFsIiwibW9udGhzU3RyaWN0UmVnZXgiLCJtb250aHNTaG9ydFN0cmljdFJlZ2V4IiwibG9uZ01vbnRoc1BhcnNlIiwic2hvcnRNb250aHNQYXJzZSIsInByb2Nlc3NSZWxhdGl2ZVRpbWUiLCJtb250aHNOb21pbmF0aXZlRWwiLCJtb250aHNHZW5pdGl2ZUVsIiwibW9tZW50VG9Gb3JtYXQiLCJfbW9udGhzR2VuaXRpdmVFbCIsIl9tb250aHNOb21pbmF0aXZlRWwiLCJjYWxlbmRhckVsIiwiX2NhbGVuZGFyRWwiLCJtb250aHNTaG9ydERvdCIsIm51bWJlcnNQYXN0IiwibnVtYmVyc0Z1dHVyZSIsInZlcmJhbE51bWJlciIsIm1vbnRoc1Nob3J0V2l0aERvdHMiLCJtb250aHNTaG9ydFdpdGhvdXREb3RzIiwid2Vla0VuZGluZ3MiLCIwIiwiNDAiLCJpc1VwcGVyIiwiZWlmZWxlclJlZ2VsQXBwbGllc1RvTnVtYmVyIiwidHJhbnNsYXRlU2luZ3VsYXIiLCJzcGVjaWFsIiwicmVsYXRpdmVUaW1lV2l0aFNpbmd1bGFyIiwidHJhbnNsYXRvciIsIndvcmRzIiwiY29ycmVjdEdyYW1tYXRpY2FsQ2FzZSIsIndvcmRLZXkiLCJyZWxhdGl2ZVRpbWVNciIsIm1vbnRoc05vbWluYXRpdmUiLCJtb250aHNTdWJqZWN0aXZlIiwiMTIiLCIxMyIsIm51bWJlcnNOb3VucyIsIm51bWJlck5vdW4iLCJodW5kcmVkIiwidGVuIiwib25lIiwid29yZCIsIm51bWJlckFzTm91biIsInByb2Nlc3NIb3Vyc0Z1bmN0aW9uIiwiUHVyZUNhbGVuZGFyRGF5IiwiX3JhZiIsIl9nZXRDYWxlbmRhckRheVNldHRpbmdzIiwiaXNPdXRzaWRlRGF5IiwiYXJpYUxhYmVsRm9ybWF0IiwiQ2FsZW5kYXJEYXkiLCJzZXRCdXR0b25SZWYiLCJidXR0b25SZWYiLCJfZ2V0Q2FsZW5kYXJEYXlTZXR0aW4iLCJkYXlTaXplU3R5bGVzIiwidXNlRGVmYXVsdEN1cnNvciIsInNlbGVjdGVkIiwiaG92ZXJlZFNwYW4iLCJpc091dHNpZGVSYW5nZSIsImFyaWFMYWJlbCIsIkNhbGVuZGFyRGF5X19kZWZhdWx0Q3Vyc29yIiwiQ2FsZW5kYXJEYXlfX2RlZmF1bHQiLCJDYWxlbmRhckRheV9fb3V0c2lkZSIsIkNhbGVuZGFyRGF5X190b2RheSIsIkNhbGVuZGFyRGF5X19maXJzdERheU9mV2VlayIsIkNhbGVuZGFyRGF5X19sYXN0RGF5T2ZXZWVrIiwiQ2FsZW5kYXJEYXlfX2hvdmVyZWRfb2Zmc2V0IiwiQ2FsZW5kYXJEYXlfX2hvdmVyZWRfc3RhcnRfZmlyc3RfcG9zc2libGVfZW5kIiwiQ2FsZW5kYXJEYXlfX2hvdmVyZWRfc3RhcnRfYmxvY2tlZF9taW5fbmlnaHRzIiwiQ2FsZW5kYXJEYXlfX2hpZ2hsaWdodGVkX2NhbGVuZGFyIiwiQ2FsZW5kYXJEYXlfX2Jsb2NrZWRfbWluaW11bV9uaWdodHMiLCJDYWxlbmRhckRheV9fYmxvY2tlZF9jYWxlbmRhciIsIkNhbGVuZGFyRGF5X19ob3ZlcmVkX3NwYW4iLCJDYWxlbmRhckRheV9fYWZ0ZXJfaG92ZXJlZF9zdGFydCIsIkNhbGVuZGFyRGF5X19zZWxlY3RlZF9zcGFuIiwiQ2FsZW5kYXJEYXlfX3NlbGVjdGVkX3N0YXJ0IiwiQ2FsZW5kYXJEYXlfX3NlbGVjdGVkX2VuZCIsIkNhbGVuZGFyRGF5X19zZWxlY3RlZCIsIkNhbGVuZGFyRGF5X19iZWZvcmVfaG92ZXJlZF9lbmQiLCJDYWxlbmRhckRheV9fbm9fc2VsZWN0ZWRfc3RhcnRfYmVmb3JlX3NlbGVjdGVkX2VuZCIsIkNhbGVuZGFyRGF5X19zZWxlY3RlZF9zdGFydF9pbl9ob3ZlcmVkX3NwYW4iLCJDYWxlbmRhckRheV9fc2VsZWN0ZWRfZW5kX2luX2hvdmVyZWRfc3BhbiIsIkNhbGVuZGFyRGF5X19zZWxlY3RlZF9zdGFydF9ub19zZWxlY3RlZF9lbmQiLCJDYWxlbmRhckRheV9fc2VsZWN0ZWRfZW5kX25vX3NlbGVjdGVkX3N0YXJ0IiwiQ2FsZW5kYXJEYXlfX2Jsb2NrZWRfb3V0X29mX3JhbmdlIiwib25Nb3VzZUVudGVyIiwib25Nb3VzZUxlYXZlIiwiY3VycmVudFRhcmdldCIsIl9yZWYyJHJlYWN0RGF0ZXMiLCJib3hTaXppbmciLCJjdXJzb3IiLCJib3JkZXJMaWdodCIsImJvcmRlckJyaWdodCIsIm91dHNpZGUiLCJiYWNrZ3JvdW5kQ29sb3IiLCJtaW5pbXVtTmlnaHRzIiwiYm9yZGVyQ29sb3IiLCJiYWNrZ3JvdW5kQ29sb3JfaG92ZXIiLCJjb2xvcl9hY3RpdmUiLCJiYWNrZ3JvdW5kQ29sb3JfYWN0aXZlIiwiaGlnaGxpZ2h0ZWQiLCJzZWxlY3RlZFNwYW4iLCJibG9ja2VkX2NhbGVuZGFyIiwiYmxvY2tlZF9vdXRfb2ZfcmFuZ2UiLCJib3JkZXJMaWdodGVyIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiY2FjaGUiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRDb21wb25lbnROYW1lIiwiX2Z1bmN0aW9uUHJvdG90eXBlIiwiX3JlYWN0SXMiLCJpc0ZvcndhcmRSZWYiLCIkJHR5cGVvZiIsIkVsZW1lbnQiLCJpc0FyZ3MiLCJvcmlnU3ltYm9sIiwiaGFzU3ltYm9sU2hhbSIsIklzQ2FsbGFibGUiLCJmdW5jdGlvbnNIYXZlTmFtZXMiLCJjYWxsQm91bmQiLCIkZnVuY3Rpb25Ub1N0cmluZyIsIiRzdHJpbmdNYXRjaCIsImNsYXNzUmVnZXgiLCJmdW5jdGlvblByb3RvIiwiaXNDbGFzcyIsImZuVG9TdHIiLCJjb25zdHJ1Y3RvclJlZ2V4IiwiaXNFUzZDbGFzc0ZuIiwiZm5TdHIiLCJoYXNUb1N0cmluZ1RhZyIsInRyeUZ1bmN0aW9uT2JqZWN0Iiwic3RyQ2xhc3MiLCJnT1BEIiwiZnVuY3Rpb25zSGF2ZUNvbmZpZ3VyYWJsZU5hbWVzIiwiJGJpbmQiLCJib3VuZEZ1bmN0aW9uc0hhdmVOYW1lcyIsIkNIQU5ORUwiLCJSZXF1aXJlT2JqZWN0Q29lcmNpYmxlIiwiJGlzRW51bWVyYWJsZSIsInZhbHMiLCJzdHlsZUludGVyZmFjZSIsInN0eWxlVGhlbWUiLCJtYWtlRnJvbVRoZW1lIiwiY3JlYXRlV2l0aERpcmVjdGlvbiIsImNyZWF0ZUxUUiIsIl9sZW4yIiwiX2tleTIiLCJyZWdpc3RlclRoZW1lIiwicmVnaXN0ZXJJbnRlcmZhY2UiLCJpbnRlcmZhY2VUb1JlZ2lzdGVyIiwiY3JlYXRlUlRMIiwicmVzb2x2ZVJUTCIsIl9sZW4zIiwiX2tleTMiLCJfQ2FsZW5kYXJXZWVrIiwiX0NhbGVuZGFyRGF5IiwiX2dldENhbGVuZGFyTW9udGhXZWVrcyIsIl90b0lTT0RhdGVTdHJpbmciLCJpc1Zpc2libGUiLCJvbk1vbnRoU2VsZWN0Iiwib25ZZWFyU2VsZWN0IiwiQ2FsZW5kYXJNb250aCIsInNldENhcHRpb25SZWYiLCJzZXRNb250aFRpdGxlSGVpZ2h0VGltZW91dCIsInByZXZNb250aCIsInByZXZFbmFibGVPdXRzaWRlRGF5cyIsInByZXZGaXJzdERheU9mV2VlayIsImNhcHRpb25SZWYiLCJtb250aFRpdGxlIiwiQ2FsZW5kYXJNb250aF9jYXB0aW9uIiwiQ2FsZW5kYXJNb250aF9jYXB0aW9uX192ZXJ0aWNhbFNjcm9sbGFibGUiLCJDYWxlbmRhck1vbnRoX3RhYmxlIiwiQ2FsZW5kYXJNb250aF92ZXJ0aWNhbFNwYWNpbmciLCJib3JkZXJTcGFjaW5nIiwiZGF5T2ZXZWVrIiwidXNlclNlbGVjdCIsImJvcmRlckNvbGxhcHNlIiwiY2FwdGlvblNpemUiLCJjYXB0aW9uUGFkZGluZ1RvcCIsInBhZGRpbmdCb3R0b20iLCJjYXB0aW9uUGFkZGluZ0JvdHRvbSIsImNhcHRpb25TaWRlIiwiZWwiLCJheGlzIiwiYm9yZGVyQm94Iiwid2l0aE1hcmdpbiIsImF4aXNTdGFydCIsImF4aXNFbmQiLCJnZXRDb21wdXRlZFN0eWxlIiwib2Zmc2V0V2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJfY29uc29saWRhdGVkRXZlbnRzIiwiX0NhbGVuZGFyTW9udGgiLCJfaXNUcmFuc2l0aW9uRW5kU3VwcG9ydGVkIiwiX2dldFRyYW5zZm9ybVN0eWxlcyIsIl9pc1ByZXZNb250aCIsIl9pc05leHRNb250aCIsImdldE1vbnRocyIsIndpdGhvdXRUcmFuc2l0aW9uTW9udGhzIiwiQ2FsZW5kYXJNb250aEdyaWQiLCJpc1RyYW5zaXRpb25FbmRTdXBwb3J0ZWQiLCJvblRyYW5zaXRpb25FbmQiLCJwcmV2SW5pdGlhbE1vbnRoIiwiaGFzTnVtYmVyT2ZNb250aHNDaGFuZ2VkIiwibmV3TW9udGhzIiwidW5zaGlmdCIsIm1vbWVudExvY2FsZSIsIm5ld01vbnRoVmFsIiwiaW5pdGlhbE1vbnRoU3VidHJhY3Rpb24iLCJuZXdZZWFyVmFsIiwiaXNWZXJ0aWNhbFNjcm9sbGFibGUiLCJ0cmFuc2Zvcm1WYWx1ZSIsIkNhbGVuZGFyTW9udGhHcmlkX19ob3Jpem9udGFsIiwiQ2FsZW5kYXJNb250aEdyaWRfX3ZlcnRpY2FsIiwiQ2FsZW5kYXJNb250aEdyaWRfX3ZlcnRpY2FsX3Njcm9sbGFibGUiLCJDYWxlbmRhck1vbnRoR3JpZF9fYW5pbWF0aW5nIiwiaGlkZUZvckFuaW1hdGlvbiIsInNob3dGb3JBbmltYXRpb24iLCJtb250aFN0cmluZyIsIkNhbGVuZGFyTW9udGhHcmlkX21vbnRoX19ob3Jpem9udGFsIiwiQ2FsZW5kYXJNb250aEdyaWRfbW9udGhfX2hpZGVGb3JBbmltYXRpb24iLCJDYWxlbmRhck1vbnRoR3JpZF9tb250aF9faGlkZGVuIiwibWluSGVpZ2h0Iiwib3BhY2l0eSIsInBvaW50ZXJFdmVudHMiLCJjYWxlbmRhck1vbnRoUGFkZGluZyIsInBhcmVudE5vZGUiLCJfcmVhY3RNb21lbnRQcm9wdHlwZXMiLCJfYWlyYm5iUHJvcFR5cGVzIiwiX2dldFBocmFzZVByb3BUeXBlcyIsIl9Gb2N1c2VkSW5wdXRTaGFwZSIsIl9JY29uUG9zaXRpb25TaGFwZSIsIl9PcmllbnRhdGlvblNoYXBlIiwiX0Rpc2FibGVkU2hhcGUiLCJfQW5jaG9yRGlyZWN0aW9uU2hhcGUiLCJfT3BlbkRpcmVjdGlvblNoYXBlIiwiX0RheU9mV2Vla1NoYXBlIiwiX0NhbGVuZGFySW5mb1Bvc2l0aW9uU2hhcGUiLCJfTmF2UG9zaXRpb25TaGFwZSIsInN0YXJ0RGF0ZSIsImVuZERhdGUiLCJvbkRhdGVzQ2hhbmdlIiwiZm9jdXNlZElucHV0Iiwib25Gb2N1c0NoYW5nZSIsIm9uQ2xvc2UiLCJzdGFydERhdGVJZCIsInN0YXJ0RGF0ZVBsYWNlaG9sZGVyVGV4dCIsInN0YXJ0RGF0ZU9mZnNldCIsImVuZERhdGVPZmZzZXQiLCJlbmREYXRlSWQiLCJlbmREYXRlUGxhY2Vob2xkZXJUZXh0Iiwic3RhcnREYXRlQXJpYUxhYmVsIiwiZW5kRGF0ZUFyaWFMYWJlbCIsImRpc2FibGVkIiwicmVxdWlyZWQiLCJyZWFkT25seSIsInNjcmVlblJlYWRlcklucHV0TWVzc2FnZSIsInNob3dDbGVhckRhdGVzIiwic2hvd0RlZmF1bHRJbnB1dEljb24iLCJpbnB1dEljb25Qb3NpdGlvbiIsImN1c3RvbUlucHV0SWNvbiIsImN1c3RvbUFycm93SWNvbiIsImN1c3RvbUNsb3NlSWNvbiIsInJlZ3VsYXIiLCJrZWVwRm9jdXNPbklucHV0IiwibXV0dWFsbHlFeGNsdXNpdmVQcm9wcyIsImFuY2hvckRpcmVjdGlvbiIsIm9wZW5EaXJlY3Rpb24iLCJob3Jpem9udGFsTWFyZ2luIiwid2l0aEZ1bGxTY3JlZW5Qb3J0YWwiLCJhcHBlbmRUb0JvZHkiLCJkaXNhYmxlU2Nyb2xsIiwibm9uTmVnYXRpdmVJbnRlZ2VyIiwia2VlcE9wZW5PbkRhdGVTZWxlY3QiLCJyZW9wZW5QaWNrZXJPbkNsZWFyRGF0ZXMiLCJ2ZXJ0aWNhbFNwYWNpbmciLCJtaW5EYXRlIiwibWF4RGF0ZSIsImlzRGF5QmxvY2tlZCIsImlzRGF5SGlnaGxpZ2h0ZWQiLCJkaXNwbGF5Rm9ybWF0Iiwic2hhcGUiLCJjdXJyZW50T2Zmc2V0IiwiY29udGFpbmVyRWRnZSIsIndpbmRvd1dpZHRoIiwiaW5uZXJXaWR0aCIsImNhbGN1bGF0ZWRPZmZzZXQiLCJjYWxjdWxhdGVkTWFyZ2luIiwicmVmZXJlbmNlRWwiLCJyZWZlcmVuY2VSZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwib2Zmc2V0WCIsIm9mZnNldFkiLCJpbm5lckhlaWdodCIsInRyYW5zZm9ybSIsImdldFNjcm9sbFBhcmVudCIsImdldFNjcm9sbEFuY2VzdG9yc092ZXJmbG93WSIsInNjcm9sbEFuY2VzdG9yc092ZXJmbG93WSIsInRvZ2dsZSIsIm9uIiwiYW5jZXN0b3IiLCJzZXRQcm9wZXJ0eSIsImdldFNjcm9sbGluZ1Jvb3QiLCJzY3JvbGxpbmdFbGVtZW50IiwiZG9jdW1lbnRFbGVtZW50IiwicGFyZW50IiwicGFyZW50RWxlbWVudCIsImNsaWVudEhlaWdodCIsImFjYyIsInNjcm9sbGluZ1Jvb3QiLCJzY3JvbGxQYXJlbnQiLCJfRGF0ZVJhbmdlUGlja2VySW5wdXQiLCJfdG9Mb2NhbGl6ZWREYXRlU3RyaW5nIiwiX2lzSW5jbHVzaXZlbHlBZnRlckRheSIsImNoaWxkcmVuIiwiaXNTdGFydERhdGVGb2N1c2VkIiwiaXNFbmREYXRlRm9jdXNlZCIsInNjcmVlblJlYWRlck1lc3NhZ2UiLCJzaG93Q2FyZXQiLCJvbktleURvd25BcnJvd0Rvd24iLCJvbktleURvd25RdWVzdGlvbk1hcmsiLCJEYXRlUmFuZ2VQaWNrZXJJbnB1dENvbnRyb2xsZXIiLCJvbkNsZWFyRm9jdXMiLCJvblN0YXJ0RGF0ZUNoYW5nZSIsIm9uU3RhcnREYXRlRm9jdXMiLCJvbkVuZERhdGVDaGFuZ2UiLCJvbkVuZERhdGVGb2N1cyIsImVuZERhdGVTdHJpbmciLCJnZXREaXNwbGF5Rm9ybWF0Iiwic3RhcnREYXRlU3RyaW5nIiwiaXNFbmREYXRlQmVmb3JlU3RhcnREYXRlIiwiZ2V0RGF0ZVN0cmluZyIsIm9uU3RhcnREYXRlU2hpZnRUYWIiLCJvbkNsZWFyRGF0ZXMiLCJfRGF0ZUlucHV0IiwiX1JpZ2h0QXJyb3ciLCJfTGVmdEFycm93IiwiX0Nsb3NlQnV0dG9uIiwiX0NhbGVuZGFySWNvbiIsIm9uRW5kRGF0ZVRhYiIsIkRhdGVSYW5nZVBpY2tlcklucHV0IiwiY2FsZW5kYXJJY29uIiwiRGF0ZVJhbmdlUGlja2VySW5wdXRfY2FsZW5kYXJJY29uX3N2ZyIsImFycm93SWNvbiIsIkRhdGVSYW5nZVBpY2tlcklucHV0X2Fycm93X3N2ZyIsImNsb3NlSWNvbiIsIkRhdGVSYW5nZVBpY2tlcklucHV0X2NsZWFyRGF0ZXNfc3ZnIiwiRGF0ZVJhbmdlUGlja2VySW5wdXRfY2xlYXJEYXRlc19zdmdfX3NtYWxsIiwic2NyZWVuUmVhZGVyU3RhcnREYXRlVGV4dCIsInNjcmVlblJlYWRlckVuZERhdGVUZXh0IiwiaW5wdXRJY29uIiwiRGF0ZVJhbmdlUGlja2VySW5wdXRfY2FsZW5kYXJJY29uIiwic3RhcnREYXRlRGlzYWJsZWQiLCJlbmREYXRlRGlzYWJsZWQiLCJEYXRlUmFuZ2VQaWNrZXJJbnB1dF9fZGlzYWJsZWQiLCJEYXRlUmFuZ2VQaWNrZXJJbnB1dF9fcnRsIiwiRGF0ZVJhbmdlUGlja2VySW5wdXRfX3dpdGhCb3JkZXIiLCJEYXRlUmFuZ2VQaWNrZXJJbnB1dF9fYmxvY2siLCJEYXRlUmFuZ2VQaWNrZXJJbnB1dF9fc2hvd0NsZWFyRGF0ZXMiLCJpZCIsInBsYWNlaG9sZGVyIiwiZGlzcGxheVZhbHVlIiwiZm9jdXNlZCIsIm9uQ2hhbmdlIiwib25Gb2N1cyIsIm9uS2V5RG93blNoaWZ0VGFiIiwiRGF0ZVJhbmdlUGlja2VySW5wdXRfYXJyb3ciLCJvbktleURvd25UYWIiLCJEYXRlUmFuZ2VQaWNrZXJJbnB1dF9jbGVhckRhdGVzIiwiRGF0ZVJhbmdlUGlja2VySW5wdXRfY2xlYXJEYXRlc19fc21hbGwiLCJEYXRlUmFuZ2VQaWNrZXJJbnB1dF9jbGVhckRhdGVzX2RlZmF1bHQiLCJEYXRlUmFuZ2VQaWNrZXJJbnB1dF9jbGVhckRhdGVzX19oaWRlIiwic2l6aW5nIiwiYm9yZGVyV2lkdGgiLCJwaWNrZXJJbnB1dCIsImJvcmRlclN0eWxlIiwiZmlsbCIsImFycm93V2lkdGgiLCJncmF5TGlnaHQiLCJfZ2V0SW5wdXRIZWlnaHQiLCJGQU5HX1BBVEhfVE9QIiwiRkFOR19TVFJPS0VfVE9QIiwiRkFOR19QQVRIX0JPVFRPTSIsIkZBTkdfU1RST0tFX0JPVFRPTSIsIkRhdGVJbnB1dCIsInNldElucHV0UmVmIiwiaW5wdXRSZWYiLCJzY3JlZW5SZWFkZXJNZXNzYWdlSWQiLCJ3aXRoRmFuZyIsImlucHV0SGVpZ2h0IiwiRGF0ZUlucHV0X19zbWFsbCIsIkRhdGVJbnB1dF9fYmxvY2siLCJEYXRlSW5wdXRfX3dpdGhGYW5nIiwiRGF0ZUlucHV0X19kaXNhYmxlZCIsIkRhdGVJbnB1dF9fb3BlbkRvd24iLCJEYXRlSW5wdXRfX29wZW5VcCIsIkRhdGVJbnB1dF9pbnB1dCIsIkRhdGVJbnB1dF9pbnB1dF9fc21hbGwiLCJEYXRlSW5wdXRfaW5wdXRfX3JlZ3VsYXIiLCJEYXRlSW5wdXRfaW5wdXRfX3JlYWRPbmx5IiwiRGF0ZUlucHV0X2lucHV0X19mb2N1c2VkIiwiRGF0ZUlucHV0X2lucHV0X19kaXNhYmxlZCIsImF1dG9Db21wbGV0ZSIsIkRhdGVJbnB1dF9mYW5nIiwiRGF0ZUlucHV0X2ZhbmdTaGFwZSIsIkRhdGVJbnB1dF9mYW5nU3Ryb2tlIiwiRGF0ZUlucHV0X3NjcmVlblJlYWRlck1lc3NhZ2UiLCJpbnB1dFdpZHRoIiwiaW5wdXRXaWR0aF9zbWFsbCIsInRleHREaXNhYmxlZCIsImZvbnRXZWlnaHQiLCJ3ZWlnaHQiLCJkaXNwbGF5VGV4dFBhZGRpbmdIb3Jpem9udGFsIiwiZGlzcGxheVRleHRQYWRkaW5nTGVmdCIsImRpc3BsYXlUZXh0UGFkZGluZ1JpZ2h0IiwiYm9yZGVyVG9wIiwiYm9yZGVyUmlnaHQiLCJib3JkZXJMZWZ0Iiwic2l6ZV9zbWFsbCIsImxldHRlclNwYWNpbmciLCJsZXR0ZXJTcGFjaW5nX3NtYWxsIiwiZGlzcGxheVRleHRQYWRkaW5nSG9yaXpvbnRhbF9zbWFsbCIsImRpc3BsYXlUZXh0UGFkZGluZ0xlZnRfc21hbGwiLCJkaXNwbGF5VGV4dFBhZGRpbmdSaWdodF9zbWFsbCIsIm91dGxpbmVGb2N1c2VkIiwiYmFja2dyb3VuZEZvY3VzZWQiLCJib3JkZXJGb2N1c2VkIiwiYm9yZGVyVG9wRm9jdXNlZCIsImJvcmRlclJpZ2h0Rm9jdXNlZCIsImJvcmRlckJvdHRvbUZvY3VzZWQiLCJib3JkZXJMZWZ0Rm9jdXNlZCIsImZvbnRTdHlsZSIsInN0eWxlRGlzYWJsZWQiLCJjbGlwIiwic3Ryb2tlIiwiZGVib3VuY2UiLCJ3YWl0IiwibGVhZGluZyIsImZyZWVHbG9iYWwiLCJmcmVlU2VsZiIsIlJpZ2h0QXJyb3ciLCJMZWZ0QXJyb3ciLCJDYWxlbmRhckljb24iLCJfc2xpY2VkVG9BcnJheTIiLCJfb2JqZWN0IiwiX2lzTmV4dERheSIsIl9pc1ByZXZpb3VzRGF5IiwiX2dldFZpc2libGVEYXlzIiwiX2dldFNlbGVjdGVkRGF0ZU9mZnNldCIsIl9tb2RpZmllcnMiLCJfRGF5UGlja2VyIiwiX2dldFBvb2xlZE1vbWVudCIsImdldE1pbk5pZ2h0c0ZvckhvdmVyRGF0ZSIsImRheXNWaW9sYXRpbmdNaW5OaWdodHNDYW5CZUNsaWNrZWQiLCJnZXRDaG9vc2VBdmFpbGFibGVEYXRlUGhyYXNlIiwiRGF5UGlja2VyUmFuZ2VDb250cm9sbGVyIiwidG9kYXkiLCJpc1RvZGF5IiwiYmxvY2tlZCIsImlzQmxvY2tlZCIsInZhbGlkIiwiaXNTdGFydERhdGUiLCJpc0VuZERhdGUiLCJkb2VzTm90TWVldE1pbmltdW1OaWdodHMiLCJpc0luU2VsZWN0ZWRTcGFuIiwiaXNMYXN0SW5SYW5nZSIsImhvdmVyZWQiLCJpc0hvdmVyZWQiLCJpc0luSG92ZXJlZFNwYW4iLCJpc0RheUFmdGVySG92ZXJlZFN0YXJ0RGF0ZSIsImlzRmlyc3REYXlPZldlZWsiLCJpc0xhc3REYXlPZldlZWsiLCJob3ZlckRhdGUiLCJpc0ZpcnN0UG9zc2libGVFbmREYXRlRm9ySG92ZXJlZFN0YXJ0RGF0ZSIsImRvZXNOb3RNZWV0TWluTmlnaHRzRm9ySG92ZXJlZFN0YXJ0RGF0ZSIsImlzRGF5QmVmb3JlSG92ZXJlZEVuZERhdGUiLCJiZWZvcmVTZWxlY3RlZEVuZCIsIl90aGlzJGdldFN0YXRlRm9yTmV3TSIsImdldFN0YXRlRm9yTmV3TW9udGgiLCJ2aXNpYmxlRGF5cyIsInNob3VsZERpc2FibGVNb250aE5hdmlnYXRpb24iLCJwcmV2U3RhcnREYXRlIiwicHJldkVuZERhdGUiLCJwcmV2Rm9jdXNlZElucHV0IiwicHJldk1pbmltdW1OaWdodHMiLCJwcmV2SXNPdXRzaWRlUmFuZ2UiLCJwcmV2SXNEYXlCbG9ja2VkIiwicHJldklzRGF5SGlnaGxpZ2h0ZWQiLCJwcmV2UGhyYXNlcyIsInByZXZJbml0aWFsVmlzaWJsZU1vbnRoIiwicHJldk51bWJlck9mTW9udGhzIiwicmVjb21wdXRlT3V0c2lkZVJhbmdlIiwicmVjb21wdXRlRGF5QmxvY2tlZCIsInJlY29tcHV0ZURheUhpZ2hsaWdodGVkIiwicmVjb21wdXRlUHJvcE1vZGlmaWVycyIsImRpZFN0YXJ0RGF0ZUNoYW5nZSIsImRpZEVuZERhdGVDaGFuZ2UiLCJkaWRGb2N1c0NoYW5nZSIsIm5ld01vbnRoU3RhdGUiLCJkZWxldGVNb2RpZmllciIsImFkZE1vZGlmaWVyIiwic3RhcnRTcGFuIiwiZW5kU3BhbiIsImRlbGV0ZU1vZGlmaWVyRnJvbVJhbmdlIiwiYWRkTW9kaWZpZXJUb1JhbmdlIiwiX3N0YXJ0U3BhbiIsIl9lbmRTcGFuIiwiX3N0YXJ0U3BhbjIiLCJfZW5kU3BhbjIiLCJfc3RhcnRTcGFuMyIsIm1pbk5pZ2h0c0ZvckhvdmVyRGF0ZSIsImxhc3RBbGxvd2VkU3RhcnREYXRlIiwiaXNTdGFydERhdGVBZnRlckVuZERhdGUiLCJpc0VuZERhdGVEaXNhYmxlZCIsImZpcnN0QWxsb3dlZEVuZERhdGUiLCJkYXRlT2Zmc2V0IiwibmV4dERhdGVPZmZzZXQiLCJoYXNPZmZzZXQiLCJzdGFydCIsInJhbmdlRGF5IiwiX2VuZFNwYW4zIiwiX2VuZFNwYW40IiwibmV3U3RhcnRTcGFuIiwibmV3RW5kU3BhbiIsIl9zdGFydFNwYW40IiwiX25ld1N0YXJ0U3BhbiIsIm1pbk5pZ2h0c0ZvclByZXZIb3ZlckRhdGUiLCJfZW5kU3BhbjUiLCJfc3RhcnRTcGFuNSIsIm5ld1Zpc2libGVEYXlzIiwicHJldk1vbnRoVmlzaWJsZURheXMiLCJuZXdDdXJyZW50TW9udGgiLCJnZXRNb2RpZmllcnMiLCJuZXh0TW9udGgiLCJuZXh0TW9udGhWaXNpYmxlRGF5cyIsIm51bWJlck9mVmlzaWJsZU1vbnRocyIsImZpcnN0UHJldmlvdXNNb250aCIsImxhc3RWaXNpYmxlRGF5IiwiY3VycmVudERheSIsInZpYWJsZURheXMiLCJnZXRNb2RpZmllcnNGb3JEYXkiLCJ2aXNpYmxlTW9udGgiLCJfdGhpcyRwcm9wczEzIiwidXBkYXRlZERheXMiLCJzcGFuU3RhcnQiLCJfdGhpcyRwcm9wczE0IiwiZGF5RGlmZiIsIl90aGlzJHByb3BzMTUiLCJtaW5OaWdodHMiLCJfdGhpcyRwcm9wczE2IiwiX3RoaXMkcHJvcHMxNyIsImlzRm9yd2FyZFJhbmdlIiwiaXNCYWNrd2FyZFJhbmdlIiwiaXNWYWxpZERheUhvdmVyZWQiLCJfdGhpcyRwcm9wczE4IiwiYmxvY2tEYXlzVmlvbGF0aW5nTWluTmlnaHRzIiwiX3RoaXMkcHJvcHMxOSIsIl90aGlzJHByb3BzMjAiLCJmaXJzdEF2YWlsYWJsZUVuZERhdGUiLCJfdGhpcyRwcm9wczIxIiwiX3RoaXMkcHJvcHMyMiIsImFycmF5V2l0aEhvbGVzIiwiaXRlcmFibGVUb0FycmF5TGltaXQiLCJub25JdGVyYWJsZVJlc3QiLCJ2aXNpYmxlRGF5c0J5TW9udGgiLCJiYXNlRGF0ZSIsImZpcnN0T2ZNb250aCIsImxhc3RPZk1vbnRoIiwicHJldkRheSIsImNvdW50IiwiZmlyc3RWaXNpYmxlTW9udGgiLCJfZ2V0UHJldmlvdXNNb250aE1lbW9MYXN0IiwidXBkYXRlZERheXNBZnRlckFkZGl0aW9uIiwibW9udGhzVG9VcGRhdGUiLCJtb250aEtleSIsIm1vbnRoSXNvIiwidXBkYXRlZERheXNBZnRlckRlbGV0aW9uIiwiZGF5U3RyaW5nIiwibW9tZW50UG9vbCIsIm9uRGF0ZUNoYW5nZSIsIkRheVBpY2tlclNpbmdsZURhdGVDb250cm9sbGVyIiwiaXNTZWxlY3RlZCIsInByZXZGb2N1c2VkIiwicHJldkRhdGUiLCJfdmlhYmxlRGF5cyIsInNob3dDbGVhckRhdGUiLCJyZW9wZW5QaWNrZXJPbkNsZWFyRGF0ZSIsIm9uQ2xlYXJEYXRlIiwiU2luZ2xlRGF0ZVBpY2tlcklucHV0IiwiU2luZ2xlRGF0ZVBpY2tlcklucHV0X2NhbGVuZGFySWNvbl9zdmciLCJTaW5nbGVEYXRlUGlja2VySW5wdXRfY2xlYXJEYXRlX3N2ZyIsIlNpbmdsZURhdGVQaWNrZXJJbnB1dF9jbGVhckRhdGVfc3ZnX19zbWFsbCIsInNjcmVlblJlYWRlclRleHQiLCJTaW5nbGVEYXRlUGlja2VySW5wdXRfY2FsZW5kYXJJY29uIiwiU2luZ2xlRGF0ZVBpY2tlcklucHV0X19kaXNhYmxlZCIsIlNpbmdsZURhdGVQaWNrZXJJbnB1dF9fcnRsIiwiU2luZ2xlRGF0ZVBpY2tlcklucHV0X193aXRoQm9yZGVyIiwiU2luZ2xlRGF0ZVBpY2tlcklucHV0X19ibG9jayIsIlNpbmdsZURhdGVQaWNrZXJJbnB1dF9fc2hvd0NsZWFyRGF0ZSIsIlNpbmdsZURhdGVQaWNrZXJJbnB1dF9jbGVhckRhdGUiLCJTaW5nbGVEYXRlUGlja2VySW5wdXRfY2xlYXJEYXRlX19zbWFsbCIsIlNpbmdsZURhdGVQaWNrZXJJbnB1dF9jbGVhckRhdGVfX2RlZmF1bHQiLCJTaW5nbGVEYXRlUGlja2VySW5wdXRfY2xlYXJEYXRlX19oaWRlIiwiQXJyYXlTcGVjaWVzQ3JlYXRlIiwiRmxhdHRlbkludG9BcnJheSIsIkdldCIsIlRvSW50ZWdlciIsIlRvTGVuZ3RoIiwiVG9PYmplY3QiLCJzb3VyY2VMZW4iLCJkZXB0aE51bSIsIkEiLCJoYXNNYXAiLCJtYXBTaXplRGVzY3JpcHRvciIsIm1hcFNpemUiLCJtYXBGb3JFYWNoIiwiaGFzU2V0Iiwic2V0U2l6ZURlc2NyaXB0b3IiLCJzZXRTaXplIiwic2V0Rm9yRWFjaCIsIndlYWtNYXBIYXMiLCJ3ZWFrU2V0SGFzIiwiYm9vbGVhblZhbHVlT2YiLCJvYmplY3RUb1N0cmluZyIsImJpZ0ludFZhbHVlT2YiLCJCaWdJbnQiLCJpbnNwZWN0Q3VzdG9tIiwiY3VzdG9tIiwiaW5zcGVjdFN5bWJvbCIsImlzU3ltYm9sIiwid3JhcFF1b3RlcyIsImRlZmF1bHRTdHlsZSIsInF1b3RlQ2hhciIsInF1b3RlU3R5bGUiLCJpbnNwZWN0XyIsImRlcHRoIiwic2VlbiIsImxvd2J5dGUiLCJpbnNwZWN0U3RyaW5nIiwiSW5maW5pdHkiLCJtYXhEZXB0aCIsInhzIiwibmFtZU9mIiwic3ltU3RyaW5nIiwibWFya0JveGVkIiwiSFRNTEVsZW1lbnQiLCJub2RlTmFtZSIsImdldEF0dHJpYnV0ZSIsImlzRWxlbWVudCIsImF0dHJzIiwiYXR0cmlidXRlcyIsImNoaWxkTm9kZXMiLCJhcnJPYmpLZXlzIiwiaXNFcnJvciIsImlzTWFwIiwibWFwUGFydHMiLCJjb2xsZWN0aW9uT2YiLCJpc1NldCIsInNldFBhcnRzIiwiaXNXZWFrTWFwIiwid2Vha0NvbGxlY3Rpb25PZiIsImlzV2Vha1NldCIsImlzQmlnSW50IiwiaXNCb29sZWFuIiwiaXNTdHJpbmciLCJpc1JlZ0V4cCIsImhhc093biIsImlzQXJyIiwiJGlzTmFOIiwiJE1hdGgiLCIkTnVtYmVyIiwiTUFYX1NBRkVfSU5URUdFUiIsIiRTeW50YXhFcnJvciIsIkRlc2MiLCJhbGxvd2VkIiwiaXNEYXRhIiwiSXNBY2Nlc3NvciIsInJlY29yZFR5cGUiLCJhcmd1bWVudE5hbWUiLCJFUzVUb0ludGVnZXIiLCJUb051bWJlciIsInN5bVRvU3RyIiwic3ltU3RyaW5nUmVnZXgiLCJpc1N5bWJvbE9iamVjdCIsImZsYXQiLCJjYW5Vc2VET00iLCJfY3JlYXRlQ2xhc3MiLCJDb25zdHJ1Y3RvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJfUmVhY3QkQ29tcG9uZW50IiwiUG9ydGFsIiwic2V0UHJvdG90eXBlT2YiLCJfaW5oZXJpdHMiLCJkZWZhdWx0Tm9kZSIsInJlbW92ZUNoaWxkIiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVQb3J0YWwiLCJhbnkiLCJyZW5kZXJQb3J0YWwiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwicG9ydGFsIiwiY2xvbmVFbGVtZW50IiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJMZWdhY3lQb3J0YWwiLCJLRVlDT0RFUyIsIlBvcnRhbFdpdGhTdGF0ZSIsInBvcnRhbE5vZGUiLCJhY3RpdmUiLCJkZWZhdWx0T3BlbiIsIm9wZW5Qb3J0YWwiLCJjbG9zZVBvcnRhbCIsIndyYXBXaXRoUG9ydGFsIiwiaGFuZGxlT3V0c2lkZU1vdXNlQ2xpY2siLCJoYW5kbGVLZXlkb3duIiwiY2xvc2VPbkVzYyIsImNsb3NlT25PdXRzaWRlQ2xpY2siLCJuYXRpdmVFdmVudCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsIm9uT3BlbiIsImJ1dHRvbiIsImtleUNvZGUiLCJpc09wZW4iLCJzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwiLCJvYnNlcnZhYmxlIiwidXVpZF8xIiwidXVpZCIsInY0IiwidjUiLCJpc1V1aWQiLCJmcm9tU3RyaW5nIiwiZm9yIiwicSIsInoiLCJCIiwiQyIsImlzTW91bnRlZCIsImVucXVldWVGb3JjZVVwZGF0ZSIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlU2V0U3RhdGUiLCJGIiwicmVmcyIsInVwZGF0ZXIiLCJHIiwiSCIsImlzUmVhY3RDb21wb25lbnQiLCJmb3JjZVVwZGF0ZSIsIkkiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsIkoiLCJjdXJyZW50IiwiSyIsIl9fc2VsZiIsIl9fc291cmNlIiwiX293bmVyIiwiUSIsIlIiLCJwb3AiLCJrZXlQcmVmaXgiLCJTIiwiViIsIlQiLCJVIiwiZG9uZSIsImFhIiwiWCIsIk4iLCJaIiwiYmEiLCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyIiwiUmVhY3RDdXJyZW50QmF0Y2hDb25maWciLCJzdXNwZW5zZSIsIlJlYWN0Q3VycmVudE93bmVyIiwiSXNTb21lUmVuZGVyZXJBY3RpbmciLCJDaGlsZHJlbiIsIm9ubHkiLCJGcmFnbWVudCIsIlByb2ZpbGVyIiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJjcmVhdGVDb250ZXh0IiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX2N1cnJlbnRWYWx1ZSIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiUHJvdmlkZXIiLCJDb25zdW1lciIsIl9jb250ZXh0IiwiY3JlYXRlRmFjdG9yeSIsImNyZWF0ZVJlZiIsImZvcndhcmRSZWYiLCJpc1ZhbGlkRWxlbWVudCIsImxhenkiLCJfY3RvciIsIl9zdGF0dXMiLCJfcmVzdWx0IiwibWVtbyIsInVzZUNhbGxiYWNrIiwidXNlQ29udGV4dCIsInVzZURlYnVnVmFsdWUiLCJ1c2VFZmZlY3QiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwidXNlTGF5b3V0RWZmZWN0IiwidXNlTWVtbyIsInVzZVJlZHVjZXIiLCJ1c2VSZWYiLCJ1c2VTdGF0ZSIsIm9uRXJyb3IiLCJkYSIsImVhIiwiZmEiLCJoYSIsImlhIiwiamEiLCJsYSIsIm1hIiwibmEiLCJvYSIsImthIiwicGEiLCJxYSIsInJhIiwic2EiLCJ0YSIsInVhIiwidmEiLCJ3YSIsInhhIiwieWEiLCJ6YSIsIkFhIiwiQmEiLCJDYSIsIkRhIiwiRWEiLCJGYSIsIkdhIiwiSWEiLCJKYSIsInRhZyIsIl9kZWJ1Z093bmVyIiwiX2RlYnVnU291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwicmV0dXJuIiwiS2EiLCJMYSIsIk1hIiwiTmEiLCJleHRyYWN0RXZlbnRzIiwiZXZlbnRUeXBlcyIsIk9hIiwicGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMiLCJQYSIsInJlZ2lzdHJhdGlvbk5hbWUiLCJRYSIsIlJhIiwiZGVwZW5kZW5jaWVzIiwiU2EiLCJUYSIsIlVhIiwiVmEiLCJXYSIsIlhhIiwic3RhdGVOb2RlIiwiWWEiLCJaYSIsIiRhIiwiYWIiLCJiYiIsImNiIiwiZGIiLCJlYiIsImZiIiwiZ2IiLCJoYiIsImliIiwiamIiLCJrYiIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJzYW5pdGl6ZVVSTCIsIm9iIiwicGIiLCJxYiIsIm1iIiwibmIiLCJsYiIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZU5TIiwicmIiLCJzYiIsInhiIiwiX3ZhbHVlVHJhY2tlciIsImdldFZhbHVlIiwic2V0VmFsdWUiLCJzdG9wVHJhY2tpbmciLCJ0YiIsInliIiwiY2hlY2tlZCIsInpiIiwiZGVmYXVsdENoZWNrZWQiLCJkZWZhdWx0VmFsdWUiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJBYiIsImluaXRpYWxWYWx1ZSIsImNvbnRyb2xsZWQiLCJCYiIsIkNiIiwiRGIiLCJFYiIsIm93bmVyRG9jdW1lbnQiLCJHYiIsIkZiIiwiSGIiLCJkZWZhdWx0U2VsZWN0ZWQiLCJJYiIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiSmIiLCJLYiIsIkxiIiwidGV4dENvbnRlbnQiLCJ4bGlua0hyZWYiLCJNYiIsIk5iIiwiT2IiLCJQYiIsIlFiIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsImZpcnN0Q2hpbGQiLCJSYiIsImxhc3RDaGlsZCIsIm5vZGVUeXBlIiwibm9kZVZhbHVlIiwiU2IiLCJUYiIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsIlViIiwiVmIiLCJXYiIsImFuaW1hdGlvbiIsIlhiIiwiWWIiLCJaYiIsIiRiIiwiYWMiLCJiYyIsImNjIiwiZGMiLCJhbHRlcm5hdGUiLCJlZmZlY3RUYWciLCJlYyIsIm1lbW9pemVkU3RhdGUiLCJkZWh5ZHJhdGVkIiwiZmMiLCJoYyIsImNoaWxkIiwic2libGluZyIsImdjIiwiaWMiLCJqYyIsImtjIiwibGMiLCJfZGlzcGF0Y2hMaXN0ZW5lcnMiLCJfZGlzcGF0Y2hJbnN0YW5jZXMiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImlzUGVyc2lzdGVudCIsInJlbGVhc2UiLCJtYyIsIm5jIiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50Iiwib2MiLCJwYyIsInFjIiwidG9wTGV2ZWxUeXBlIiwidGFyZ2V0SW5zdCIsImFuY2VzdG9ycyIsInJjIiwiZXZlbnRTeXN0ZW1GbGFncyIsInNjIiwiY29udGFpbmVySW5mbyIsInRjIiwidWMiLCJ2YyIsIndjIiwieGMiLCJ5YyIsInpjIiwiQWMiLCJCYyIsIkNjIiwiRGMiLCJFYyIsIkZjIiwiR2MiLCJIYyIsIkljIiwiS2MiLCJibG9ja2VkT24iLCJMYyIsImRlbGV0ZSIsInBvaW50ZXJJZCIsIk1jIiwiTmMiLCJQYyIsInVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSIsImh5ZHJhdGUiLCJRYyIsIlJjIiwiU2MiLCJUYyIsIlVjIiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwiVmMiLCJXYyIsIlljIiwiWmMiLCIkYyIsImFkIiwiYnViYmxlZCIsImNhcHR1cmVkIiwiZXZlbnRQcmlvcml0eSIsImJkIiwiY2QiLCJ1bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSIsImVkIiwiZmQiLCJnZCIsImhkIiwiT2MiLCJqZCIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZEFyZWEiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsImxpbmVDbGFtcCIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwia2QiLCJsZCIsInRyaW0iLCJtZCIsIm5kIiwibWVudWl0ZW0iLCJhcmVhIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwia2V5Z2VuIiwibGluayIsIm1ldGEiLCJwYXJhbSIsInRyYWNrIiwid2JyIiwib2QiLCJwZCIsImlzIiwicWQiLCJyZCIsInNkIiwidGQiLCJ1ZCIsInZkIiwibmV4dFNpYmxpbmciLCJ4ZCIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudFdpbmRvdyIsImxvY2F0aW9uIiwiaHJlZiIsInlkIiwiY29udGVudEVkaXRhYmxlIiwiRGQiLCJFZCIsIkZkIiwiYXV0b0ZvY3VzIiwiR2QiLCJfX2h0bWwiLCJIZCIsIklkIiwiSmQiLCJLZCIsInByZXZpb3VzU2libGluZyIsIkxkIiwicmFuZG9tIiwiTWQiLCJOZCIsIk9kIiwiUGQiLCJRZCIsIlJkIiwiU2QiLCJUZCIsImRpc3BhdGNoQ29uZmlnIiwiVWQiLCJfdGFyZ2V0SW5zdCIsIlZkIiwiV2QiLCJYZCIsIllkIiwiWmQiLCIkZCIsImFlIiwiYmUiLCJjZSIsIkludGVyZmFjZSIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsImVlIiwiZXZlbnRQb29sIiwiZmUiLCJkZXN0cnVjdG9yIiwiZGUiLCJnZXRQb29sZWQiLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiaXNUcnVzdGVkIiwiZ2UiLCJoZSIsImllIiwiamUiLCJrZSIsImRvY3VtZW50TW9kZSIsImxlIiwibWUiLCJuZSIsIm9lIiwiYmVmb3JlSW5wdXQiLCJjb21wb3NpdGlvbkVuZCIsImNvbXBvc2l0aW9uU3RhcnQiLCJjb21wb3NpdGlvblVwZGF0ZSIsInBlIiwicWUiLCJkZXRhaWwiLCJzZSIsInZlIiwid2hpY2giLCJ0ZSIsImN0cmxLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwiY2hhciIsInVlIiwid2UiLCJkYXRldGltZSIsImVtYWlsIiwicGFzc3dvcmQiLCJyYW5nZSIsInNlYXJjaCIsInRlbCIsInVybCIsInhlIiwieWUiLCJjaGFuZ2UiLCJ6ZSIsIkFlIiwiQmUiLCJDZSIsIkRlIiwiRWUiLCJGZSIsIkdlIiwiZGV0YWNoRXZlbnQiLCJIZSIsIkllIiwiYXR0YWNoRXZlbnQiLCJKZSIsIktlIiwiTGUiLCJNZSIsIl9pc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJOZSIsInZpZXciLCJPZSIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJQZSIsImdldE1vZGlmaWVyU3RhdGUiLCJRZSIsIlJlIiwiU2UiLCJUZSIsIlVlIiwiVmUiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJtb3ZlbWVudFgiLCJtb3ZlbWVudFkiLCJXZSIsInByZXNzdXJlIiwidGFuZ2VudGlhbFByZXNzdXJlIiwidGlsdFgiLCJ0aWx0WSIsInR3aXN0IiwicG9pbnRlclR5cGUiLCJpc1ByaW1hcnkiLCJYZSIsIm1vdXNlRW50ZXIiLCJtb3VzZUxlYXZlIiwicG9pbnRlckVudGVyIiwicG9pbnRlckxlYXZlIiwiWWUiLCJkZWZhdWx0VmlldyIsInBhcmVudFdpbmRvdyIsIiRlIiwiYWYiLCJiZiIsImNmIiwiZGYiLCJzZWxlY3QiLCJlZiIsImZmIiwiZ2YiLCJoZiIsImpmIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJhbmNob3JOb2RlIiwiZ2V0U2VsZWN0aW9uIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJrZiIsIm9uU2VsZWN0IiwibGYiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50IiwibWYiLCJjbGlwYm9hcmREYXRhIiwibmYiLCJvZiIsImNoYXJDb2RlIiwicGYiLCJFc2MiLCJTcGFjZWJhciIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5IiwicWYiLCIxNiIsIjE3IiwiMTgiLCIxOSIsIjI3IiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsIjQ1IiwiNDYiLCIxMTIiLCIxMTMiLCIxMTQiLCIxMTUiLCIxMTYiLCIxMTciLCIxMTgiLCIxMTkiLCIxMjAiLCIxMjEiLCIxMjIiLCIxMjMiLCIxNDQiLCIxNDUiLCIyMjQiLCJyZiIsInNmIiwiZGF0YVRyYW5zZmVyIiwidGYiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwidWYiLCJ2ZiIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwid2YiLCJTaW1wbGVFdmVudFBsdWdpbiIsIkVudGVyTGVhdmVFdmVudFBsdWdpbiIsIkNoYW5nZUV2ZW50UGx1Z2luIiwiU2VsZWN0RXZlbnRQbHVnaW4iLCJCZWZvcmVJbnB1dEV2ZW50UGx1Z2luIiwieWYiLCJ6ZiIsIkFmIiwiQmYiLCJDZiIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dCIsIkRmIiwiRWYiLCJGZiIsImdldENoaWxkQ29udGV4dCIsIkdmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJIZiIsIklmIiwiSmYiLCJLZiIsInVuc3RhYmxlX2NhbmNlbENhbGxiYWNrIiwiTGYiLCJ1bnN0YWJsZV9yZXF1ZXN0UGFpbnQiLCJNZiIsInVuc3RhYmxlX25vdyIsIk5mIiwidW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwiLCJPZiIsInVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5IiwiUGYiLCJRZiIsIlJmIiwidW5zdGFibGVfTG93UHJpb3JpdHkiLCJTZiIsInVuc3RhYmxlX0lkbGVQcmlvcml0eSIsIlRmIiwiVWYiLCJ1bnN0YWJsZV9zaG91bGRZaWVsZCIsIlZmIiwiV2YiLCJYZiIsIllmIiwiWmYiLCIkZiIsImFnIiwiYmciLCJjZyIsImRnIiwiZWciLCJmZyIsImhnIiwiaWciLCJqZyIsImtnIiwibGciLCJtZyIsIm5nIiwib2ciLCJwZyIsImNoaWxkRXhwaXJhdGlvblRpbWUiLCJxZyIsImZpcnN0Q29udGV4dCIsImV4cGlyYXRpb25UaW1lIiwicmciLCJzZyIsIm9ic2VydmVkQml0cyIsInJlc3BvbmRlcnMiLCJ0ZyIsInVnIiwidXBkYXRlUXVldWUiLCJiYXNlU3RhdGUiLCJiYXNlUXVldWUiLCJzaGFyZWQiLCJwZW5kaW5nIiwiZWZmZWN0cyIsInZnIiwid2ciLCJzdXNwZW5zZUNvbmZpZyIsInBheWxvYWQiLCJ4ZyIsInlnIiwiemciLCJjYSIsIkFnIiwiQmciLCJDZyIsIkRnIiwiRWciLCJGZyIsIkpnIiwiX3JlYWN0SW50ZXJuYWxGaWJlciIsIkdnIiwiSGciLCJJZyIsIktnIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiTGciLCJNZyIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiTmciLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQiLCJjb21wb25lbnRXaWxsTW91bnQiLCJPZyIsIlBnIiwiX3N0cmluZ1JlZiIsIlFnIiwiUmciLCJsYXN0RWZmZWN0IiwibmV4dEVmZmVjdCIsImZpcnN0RWZmZWN0IiwiU2ciLCJUZyIsImVsZW1lbnRUeXBlIiwiVWciLCJWZyIsIldnIiwiWGciLCJZZyIsIlpnIiwiJGciLCJhaCIsImJoIiwiY2giLCJkaCIsInRhZ05hbWUiLCJlaCIsImZoIiwiZ2giLCJtZW1vaXplZFByb3BzIiwicmV2ZWFsT3JkZXIiLCJpaCIsInJlc3BvbmRlciIsImpoIiwia2giLCJsaCIsIm1oIiwibmgiLCJvaCIsInBoIiwicWgiLCJyaCIsInNoIiwidGgiLCJxdWV1ZSIsInVoIiwidmgiLCJ3aCIsImxhc3RSZW5kZXJlZFJlZHVjZXIiLCJhY3Rpb24iLCJlYWdlclJlZHVjZXIiLCJlYWdlclN0YXRlIiwibGFzdFJlbmRlcmVkU3RhdGUiLCJkaXNwYXRjaCIsInhoIiwieWgiLCJ6aCIsIkFoIiwiZGVzdHJveSIsImRlcHMiLCJCaCIsIkNoIiwiRGgiLCJFaCIsIkZoIiwiR2giLCJIaCIsIkloIiwiSmgiLCJLaCIsIkxoIiwiTWgiLCJOaCIsInJlYWRDb250ZXh0IiwidXNlUmVzcG9uZGVyIiwidXNlRGVmZXJyZWRWYWx1ZSIsInVzZVRyYW5zaXRpb24iLCJPaCIsIlBoIiwiUWgiLCJSaCIsIlNoIiwiVGgiLCJwZW5kaW5nUHJvcHMiLCJVaCIsIlZoIiwiV2giLCJYaCIsIlloIiwiWmgiLCIkaCIsImFpIiwiYmkiLCJjaSIsImRpIiwiZWkiLCJmaSIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiZ2kiLCJoaSIsInBlbmRpbmdDb250ZXh0IiwibmkiLCJwaSIsInFpIiwicmV0cnlUaW1lIiwiamkiLCJmYWxsYmFjayIsInVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrIiwia2kiLCJsaSIsImlzQmFja3dhcmRzIiwicmVuZGVyaW5nIiwicmVuZGVyaW5nU3RhcnRUaW1lIiwibGFzdCIsInRhaWwiLCJ0YWlsRXhwaXJhdGlvbiIsInRhaWxNb2RlIiwibWkiLCJyaSIsInNpIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsIm9uY2xpY2siLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdGVUZXh0Tm9kZSIsInRpIiwidWkiLCJ2aSIsIndpIiwieGkiLCJ5aSIsInppIiwiQWkiLCJCaSIsIkNpIiwiRmkiLCJFaSIsIkdpIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJIaSIsIklpIiwiSmkiLCJLaSIsIkxpIiwiRGkiLCJNaSIsIk5pIiwiT2kiLCJQaSIsIlFpIiwiaW5zZXJ0QmVmb3JlIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsIlJpIiwiU2kiLCJUaSIsIlVpIiwiVmkiLCJXaSIsIlhpIiwiZWxlbWVudCIsIllpIiwiWmkiLCIkaSIsImNvbXBvbmVudERpZENhdGNoIiwiYWoiLCJjb21wb25lbnRTdGFjayIsIlJqIiwiYmoiLCJjaiIsImRqIiwia2oiLCJsaiIsIm1qIiwibmoiLCJvaiIsInFqIiwicmoiLCJzaiIsInRqIiwidWoiLCJ2aiIsIndqIiwidGltZW91dE1zIiwieGoiLCJ5aiIsInpqIiwibGFzdEV4cGlyZWRUaW1lIiwiQWoiLCJmaXJzdFBlbmRpbmdUaW1lIiwibGFzdFBpbmdlZFRpbWUiLCJuZXh0S25vd25QZW5kaW5nTGV2ZWwiLCJjYWxsYmFja0V4cGlyYXRpb25UaW1lIiwiY2FsbGJhY2tQcmlvcml0eSIsImNhbGxiYWNrTm9kZSIsIkJqIiwidGltZW91dCIsIkNqIiwiRGoiLCJFaiIsIkZqIiwiR2oiLCJIaiIsImZpbmlzaGVkV29yayIsImZpbmlzaGVkRXhwaXJhdGlvblRpbWUiLCJsYXN0U3VzcGVuZGVkVGltZSIsIklqIiwidGltZW91dEhhbmRsZSIsIkpqIiwiYnVzeU1pbkR1cmF0aW9uTXMiLCJidXN5RGVsYXlNcyIsIktqIiwiTWoiLCJOaiIsInBpbmdDYWNoZSIsIk9qIiwidWIiLCJQaiIsIlhjIiwiUWoiLCJTaiIsImZpcnN0U3VzcGVuZGVkVGltZSIsInJhbmdlQ291bnQiLCJ3YiIsImFjdGl2ZUVsZW1lbnREZXRhY2hlZCIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJUaiIsIndkIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0IiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJzZXRFbmQiLCJzY3JvbGxMZWZ0IiwidmIiLCJVaiIsIlZqIiwiV2oiLCJkZWZhdWx0IiwiSGEiLCJYaiIsInVuc3RhYmxlX29ic2VydmVkQml0cyIsIlpqIiwicGVuZGluZ0NoaWxkcmVuIiwiYWsiLCJiayIsImNrIiwiZGsiLCJlayIsImZrIiwiSmMiLCJfaW50ZXJuYWxSb290IiwiZ2siLCJpayIsImhhc0F0dHJpYnV0ZSIsImhrIiwiamsiLCJrayIsInVubW91bnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9ybSIsIkxqIiwibGsiLCJFdmVudHMiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImJ1bmRsZVR5cGUiLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiWWoiLCJvdmVycmlkZUhvb2tTdGF0ZSIsIm92ZXJyaWRlUHJvcHMiLCJzZXRTdXNwZW5zZUhhbmRsZXIiLCJzY2hlZHVsZVVwZGF0ZSIsImN1cnJlbnREaXNwYXRjaGVyUmVmIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2giLCJzY2hlZHVsZVJlZnJlc2giLCJzY2hlZHVsZVJvb3QiLCJzZXRSZWZyZXNoSGFuZGxlciIsImdldEN1cnJlbnRGaWJlciIsImZpbmRET01Ob2RlIiwiZmx1c2hTeW5jIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9jcmVhdGVQb3J0YWwiLCJNZXNzYWdlQ2hhbm5lbCIsInVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlIiwicGVyZm9ybWFuY2UiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsInNvcnRJbmRleCIsInN0YXJ0VGltZSIsInByaW9yaXR5TGV2ZWwiLCJ1bnN0YWJsZV9Qcm9maWxpbmciLCJ1bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbiIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwidW5zdGFibGVfbmV4dCIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwiZGVsYXkiLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsImVtcHR5RnVuY3Rpb24iLCJlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0IiwicmVzZXRXYXJuaW5nQ2FjaGUiLCJjb21wb25lbnROYW1lIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiZ2V0U2hpbSIsIlJlYWN0UHJvcFR5cGVzIiwic3ltYm9sIiwiYXJyYXlPZiIsIm9iamVjdE9mIiwiZXhhY3QiLCJjaGVja1Byb3BUeXBlcyIsIlByb3BUeXBlcyIsIkFzeW5jTW9kZSIsIkNvbmN1cnJlbnRNb2RlIiwiQ29udGV4dENvbnN1bWVyIiwiQ29udGV4dFByb3ZpZGVyIiwiTGF6eSIsImlzQXN5bmNNb2RlIiwiaXNDb25jdXJyZW50TW9kZSIsImlzQ29udGV4dENvbnN1bWVyIiwiaXNDb250ZXh0UHJvdmlkZXIiLCJpc0ZyYWdtZW50IiwiaXNMYXp5IiwiaXNQb3J0YWwiLCJpc1Byb2ZpbGVyIiwiaXNTdHJpY3RNb2RlIiwiaXNTdXNwZW5zZSIsImlzVmFsaWRFbGVtZW50VHlwZSIsInR5cGVPZiIsIm9yaWdpbmFsTW9kdWxlIiwid2VicGFja1BvbHlmaWxsIiwicGF0aHMiLCJ3ZWJwYWNrQ29udGV4dCIsInJlcSIsIndlYnBhY2tDb250ZXh0UmVzb2x2ZSIsImNvZGUiLCJfRGF0ZVJhbmdlUGlja2VyIiwiX0RhdGVSYW5nZVBpY2tlcklucHV0Q29udHJvbGxlciIsIl9EYXRlUmFuZ2VQaWNrZXJTaGFwZSIsIl9EYXlQaWNrZXJSYW5nZUNvbnRyb2xsZXIiLCJfRGF5UGlja2VyU2luZ2xlRGF0ZUNvbnRyb2xsZXIiLCJfU2luZ2xlRGF0ZVBpY2tlciIsIl9TaW5nbGVEYXRlUGlja2VySW5wdXQiLCJfU2luZ2xlRGF0ZVBpY2tlclNoYXBlIiwiX2lzSW5jbHVzaXZlbHlCZWZvcmVEYXkiLCJudW1iZXJJc05hTiIsIkVSUk9SX01FU1NBR0UiLCJib3VuZCIsImJpbmRlciIsImJvdW5kTGVuZ3RoIiwiYm91bmRBcmdzIiwiRW1wdHkiLCJ0ZXN0TW9tZW50IiwibWVzc2FnZXMiLCJpbnZhbGlkUHJlZGljYXRlIiwiaW52YWxpZFByb3BWYWxpZGF0b3IiLCJyZXF1aXJlZENvcmUiLCJpbnZhbGlkVHlwZUNvcmUiLCJwcmVkaWNhdGVGYWlsdXJlQ29yZSIsImFub255bW91c01lc3NhZ2UiLCJiYXNlSW52YWxpZE1lc3NhZ2UiLCJjb25zdHJ1Y3RQcm9wVmFsaWRhdG9yVmFyaWF0aW9ucyIsInByb3BWYWxpZGF0b3IiLCJyZXF1aXJlZFByb3BWYWxpZGF0b3IiLCJ3aXRoUHJlZGljYXRlIiwiYmFzZVByb3BWYWxpZGF0b3IiLCJjcmVhdGVJbnZhbGlkUmVxdWlyZWRFcnJvck1lc3NhZ2UiLCJ0eXBlVmFsaWRhdG9yIiwidmFsaWRhdG9yIiwibW9tZW50VHlwZSIsInByb3BUeXBlIiwicHJlVmFsaWRhdGlvblJlcXVpcmVDaGVja1ZhbHVlIiwiaXNQcm9wVmFsdWVVbmRlZmluZWQiLCJpc1Byb3BWYWx1ZU51bGwiLCJwcmVWYWxpZGF0aW9uUmVxdWlyZUNoZWNrIiwicHJlZGljYXRlTmFtZSIsIm5vb3BUaHVuayIsImJldHdlZW4iLCJib29sZWFuU29tZSIsImNoaWxkcmVuSGF2ZVByb3BYb3JDaGlsZHJlbiIsImNoaWxkcmVuT2YiLCJjaGlsZHJlbk9mVHlwZSIsImNoaWxkcmVuU2VxdWVuY2VPZiIsImNvbXBvbmVudFdpdGhOYW1lIiwiZGlzYWxsb3dlZElmIiwiZXhwbGljaXROdWxsIiwiZm9yYmlkRXh0cmFQcm9wcyIsImludGVnZXIiLCJrZXlzT2YiLCJtdXR1YWxseUV4Y2x1c2l2ZVRydWVQcm9wcyIsIm5DaGlsZHJlbiIsIm5vbk5lZ2F0aXZlTnVtYmVyIiwibnVtZXJpY1N0cmluZyIsIm9yIiwicmVxdWlyZWRCeSIsInJlc3RyaWN0ZWRQcm9wIiwic2VxdWVuY2VPZiIsInN0cmluZ0VuZHNXaXRoIiwic3RyaW5nU3RhcnRzV2l0aCIsInVuaXF1ZUFycmF5IiwidW5pcXVlQXJyYXlPZiIsInZhbHVlc09mIiwid2l0aFNoYXBlIiwib3JpZ0tleXMiLCJrZXlzU2hpbSIsIm9yaWdpbmFsS2V5cyIsImlzRW51bWVyYWJsZSIsImhhc0RvbnRFbnVtQnVnIiwiaGFzUHJvdG9FbnVtQnVnIiwiZG9udEVudW1zIiwiZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGUiLCJjdG9yIiwiZXhjbHVkZWRLZXlzIiwiJGFwcGxpY2F0aW9uQ2FjaGUiLCIkY29uc29sZSIsIiRleHRlcm5hbCIsIiRmcmFtZSIsIiRmcmFtZUVsZW1lbnQiLCIkZnJhbWVzIiwiJGlubmVySGVpZ2h0IiwiJGlubmVyV2lkdGgiLCIkb25tb3pmdWxsc2NyZWVuY2hhbmdlIiwiJG9ubW96ZnVsbHNjcmVlbmVycm9yIiwiJG91dGVySGVpZ2h0IiwiJG91dGVyV2lkdGgiLCIkcGFnZVhPZmZzZXQiLCIkcGFnZVlPZmZzZXQiLCIkcGFyZW50IiwiJHNjcm9sbExlZnQiLCIkc2Nyb2xsVG9wIiwiJHNjcm9sbFgiLCIkc2Nyb2xsWSIsIiRzZWxmIiwiJHdlYmtpdEluZGV4ZWREQiIsIiR3ZWJraXRTdG9yYWdlSW5mbyIsIiR3aW5kb3ciLCJoYXNBdXRvbWF0aW9uRXF1YWxpdHlCdWciLCJpc0FyZ3VtZW50cyIsInRoZUtleXMiLCJza2lwUHJvdG8iLCJza2lwQ29uc3RydWN0b3IiLCJlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZUlmTm90QnVnZ3kiLCJzeW1PYmoiLCJzeW1zIiwiVHlwZUVyciIsIkVNUFRZX1NUWUxFUyIsInBlcmZTdGFydCIsInN0YXJ0TWFyayIsIm1hcmsiLCJjbGVhck1hcmtzIiwicGVyZkVuZCIsImVuZE1hcmsiLCJtZWFzdXJlTmFtZSIsIm1lYXN1cmUiLCJtZXRob2ROYW1lIiwiX3JlYWN0V2l0aERpcmVjdGlvbiIsIldpdGhTdHlsZXNDb250ZXh0Iiwid2l0aERpcmVjdGlvblByb3BUeXBlcyIsIldpdGhEaXJlY3Rpb24iLCJnZXRTdGF0ZSIsImRlZmF1bHREaXJlY3Rpb24iLCJjaGFubmVsVW5zdWJzY3JpYmUiLCJzdWJzY3JpYmUiLCJfcmVhY3QyIiwiX2dldENvbXBvbmVudE5hbWUyIiwiX2RlZXBtZXJnZTIiLCJfaG9pc3ROb25SZWFjdFN0YXRpY3MyIiwiX2JyY2FzdDIiLCJfZGlyZWN0aW9uMiIsImlzTWVyZ2VhYmxlT2JqZWN0IiwiaXNOb25OdWxsT2JqZWN0Iiwic3RyaW5nVmFsdWUiLCJSRUFDVF9FTEVNRU5UX1RZUEUiLCJpc1JlYWN0RWxlbWVudCIsImlzU3BlY2lhbCIsImNsb25lSWZOZWNlc3NhcnkiLCJvcHRpb25zQXJndW1lbnQiLCJkZWVwbWVyZ2UiLCJkZWZhdWx0QXJyYXlNZXJnZSIsImRlc3RpbmF0aW9uIiwic291cmNlSXNBcnJheSIsImFycmF5TWVyZ2UiLCJtZXJnZU9iamVjdCIsInByZXYiLCJkZWVwbWVyZ2VfMSIsIl9wcm9wVHlwZXMyIiwiX29iamVjdDIiLCJvcHRNZXNzYWdlIiwidmVuZG9ycyIsInJhZiIsImNhZiIsIl9ub3ciLCJjcCIsImNhbmNlbGxlZCIsImhhbmRsZSIsImNhbmNlbCIsImdldE5hbm9TZWNvbmRzIiwiaHJ0aW1lIiwibG9hZFRpbWUiLCJtb2R1bGVMb2FkVGltZSIsIm5vZGVMb2FkVGltZSIsInVwVGltZSIsInByb2Nlc3MiLCJ1cHRpbWUiLCJjYWNoZWRTZXRUaW1lb3V0IiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwiZGVmYXVsdFNldFRpbW91dCIsImRlZmF1bHRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwiY3VycmVudFF1ZXVlIiwiZHJhaW5pbmciLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiZHJhaW5RdWV1ZSIsInJ1biIsIm1hcmtlciIsInJ1bkNsZWFyVGltZW91dCIsIkl0ZW0iLCJuZXh0VGljayIsInRpdGxlIiwiYnJvd3NlciIsImVudiIsImFyZ3YiLCJ2ZXJzaW9ucyIsImFkZExpc3RlbmVyIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImxpc3RlbmVycyIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsImRpciIsInVtYXNrIiwiZ2V0QXJpYUxhYmVsIiwiaXNIb3ZlcmVkU3BhbiIsInNob3VsZFVzZURlZmF1bHRDdXJzb3IiLCJfZ2V0UGhyYXNlIiwiZm9ybWF0dGVkRGF0ZSIsInBocmFzZSIsImFycjIiLCJpdGVyIiwiQ2FsZW5kYXJXZWVrIiwicHJldkRheXMiLCJuZXh0RGF5cyIsImZpcnN0RGF5IiwidG90YWxEYXlzIiwid2Vla3NJbk1vbnRoIiwibXNUcmFuc2Zvcm0iLCJNb3pUcmFuc2Zvcm0iLCJXZWJraXRUcmFuc2Zvcm0iLCJQdXJlRGF0ZVJhbmdlUGlja2VyIiwiX3JlYWN0UG9ydGFsIiwiX2dldFJlc3BvbnNpdmVDb250YWluZXJTdHlsZXMiLCJfZ2V0RGV0YWNoZWRDb250YWluZXJTdHlsZXMiLCJfZGlzYWJsZVNjcm9sbDIiLCJEYXRlUmFuZ2VQaWNrZXIiLCJkYXlQaWNrZXJDb250YWluZXJTdHlsZXMiLCJpc0RhdGVSYW5nZVBpY2tlcklucHV0Rm9jdXNlZCIsImlzRGF5UGlja2VyRm9jdXNlZCIsIm9uRGF0ZVJhbmdlUGlja2VySW5wdXRGb2N1cyIsIm9uRGF5UGlja2VyRm9jdXMiLCJvbkRheVBpY2tlckZvY3VzT3V0Iiwib25EYXlQaWNrZXJCbHVyIiwicmVzcG9uc2l2aXplUGlja2VyUG9zaXRpb24iLCJzZXREYXlQaWNrZXJDb250YWluZXJSZWYiLCJpc09wZW5lZCIsImVuYWJsZVNjcm9sbCIsInJlbW92ZURheVBpY2tlckV2ZW50TGlzdGVuZXJzIiwiZGF5UGlja2VyQ29udGFpbmVyIiwiYWRkRGF5UGlja2VyRXZlbnRMaXN0ZW5lcnMiLCJyZW1vdmVEYXlQaWNrZXJGb2N1c091dCIsInByb3BEaXNhYmxlU2Nyb2xsIiwiaXNBbmNob3JlZExlZnQiLCJjb250YWluZXJSZWN0IiwibWF5YmVSZW5kZXJEYXlQaWNrZXJXaXRoUG9ydGFsIiwicmVuZGVyRGF5UGlja2VyIiwiaW5pdGlhbFZpc2libGVNb250aFRodW5rIiwiRGF0ZVJhbmdlUGlja2VyX2Nsb3NlQnV0dG9uX3N2ZyIsIndpdGhBbnlQb3J0YWwiLCJEYXRlUmFuZ2VQaWNrZXJfcGlja2VyIiwiRGF0ZVJhbmdlUGlja2VyX3BpY2tlcl9fZGlyZWN0aW9uTGVmdCIsIkRhdGVSYW5nZVBpY2tlcl9waWNrZXJfX2RpcmVjdGlvblJpZ2h0IiwiRGF0ZVJhbmdlUGlja2VyX3BpY2tlcl9faG9yaXpvbnRhbCIsIkRhdGVSYW5nZVBpY2tlcl9waWNrZXJfX3ZlcnRpY2FsIiwiRGF0ZVJhbmdlUGlja2VyX3BpY2tlcl9fcG9ydGFsIiwiRGF0ZVJhbmdlUGlja2VyX3BpY2tlcl9fZnVsbFNjcmVlblBvcnRhbCIsIkRhdGVSYW5nZVBpY2tlcl9waWNrZXJfX3J0bCIsIkRhdGVSYW5nZVBpY2tlcl9jbG9zZUJ1dHRvbiIsImVuYWJsZU91dHNpZGVDbGljayIsImhpZGVGYW5nIiwiRGF0ZVJhbmdlUGlja2VyX19ibG9jayIsImdyYXlMaWdodGVyIiwidGV4dERlY29yYXRpb24iLCJfZG9jdW1lbnQyIiwiRElTUExBWSIsIkJMT0NLIiwiRkxFWCIsIklOTElORSIsIklOTElORV9CTE9DSyIsIkNPTlRFTlRTIiwidXNlQ2FwdHVyZSIsIk91dHNpZGVDbGlja0hhbmRsZXIiLCJvbk1vdXNlRG93biIsInNldENoaWxkTm9kZVJlZiIsIl9wcm9wcyIsImFkZE1vdXNlRG93bkV2ZW50TGlzdGVuZXIiLCJwcmV2RGlzYWJsZWQiLCJfcHJvcHMyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lcnMiLCJjaGlsZE5vZGUiLCJyZW1vdmVNb3VzZVVwIiwiaXNEZXNjZW5kYW50T2ZSb290IiwicmVtb3ZlTW91c2VEb3duIiwiX3Byb3BzMyIsImluY2x1ZGVzIiwiYm91bmRDb250YWlucyIsInRvTnVtYmVyIiwibmF0aXZlTWF4IiwibmF0aXZlTWluIiwibGFzdEFyZ3MiLCJsYXN0VGhpcyIsIm1heFdhaXQiLCJ0aW1lcklkIiwibGFzdENhbGxUaW1lIiwibGFzdEludm9rZVRpbWUiLCJtYXhpbmciLCJpbnZva2VGdW5jIiwidGhpc0FyZyIsImxlYWRpbmdFZGdlIiwidGltZXJFeHBpcmVkIiwic2hvdWxkSW52b2tlIiwidGltZVNpbmNlTGFzdENhbGwiLCJ0cmFpbGluZ0VkZ2UiLCJ0aW1lV2FpdGluZyIsInJlbWFpbmluZ1dhaXQiLCJkZWJvdW5jZWQiLCJpc0ludm9raW5nIiwicmVUcmltIiwicmVJc0JhZEhleCIsInJlSXNCaW5hcnkiLCJyZUlzT2N0YWwiLCJmcmVlUGFyc2VJbnQiLCJpc0JpbmFyeSIsImJhc2VHZXRUYWciLCJpc09iamVjdExpa2UiLCJnZXRSYXdUYWciLCJzeW1Ub1N0cmluZ1RhZyIsIm9iamVjdFByb3RvIiwibmF0aXZlT2JqZWN0VG9TdHJpbmciLCJpc093biIsInVubWFza2VkIiwiX2FyciIsIl9uIiwiX2UiLCJfcyIsImRheUJlZm9yZSIsImRlZmF1bHRNb2RpZmllciIsImdldFByZXZpb3VzTW9udGhNZW1vS2V5IiwiZ2V0UHJldmlvdXNNb250aE1lbW9WYWx1ZSIsIl9DaGV2cm9uVXAiLCJfQ2hldnJvbkRvd24iLCJEYXlQaWNrZXJOYXZpZ2F0aW9uIiwiaXNCb3R0b21OYXZQb3NpdGlvbiIsImhhc0lubGluZVN0eWxlcyIsIm5hdlByZXZJY29uIiwibmF2TmV4dEljb24iLCJpc0RlZmF1bHROYXZQcmV2IiwiaXNEZWZhdWx0TmF2TmV4dCIsIm5hdlByZXZUYWJJbmRleCIsIm5hdk5leHRUYWJJbmRleCIsIkljb24iLCJEYXlQaWNrZXJOYXZpZ2F0aW9uX3N2Z19faG9yaXpvbnRhbCIsIkRheVBpY2tlck5hdmlnYXRpb25fc3ZnX192ZXJ0aWNhbCIsIkRheVBpY2tlck5hdmlnYXRpb25fc3ZnX19kaXNhYmxlZCIsIl9JY29uIiwiaXNEZWZhdWx0TmF2IiwiRGF5UGlja2VyTmF2aWdhdGlvbl9faG9yaXpvbnRhbCIsIkRheVBpY2tlck5hdmlnYXRpb25fX3ZlcnRpY2FsIiwiRGF5UGlja2VyTmF2aWdhdGlvbl9fdmVydGljYWxEZWZhdWx0IiwiRGF5UGlja2VyTmF2aWdhdGlvbl9fdmVydGljYWxTY3JvbGxhYmxlIiwiRGF5UGlja2VyTmF2aWdhdGlvbl9fdmVydGljYWxTY3JvbGxhYmxlRGVmYXVsdCIsIkRheVBpY2tlck5hdmlnYXRpb25fX3ZlcnRpY2FsU2Nyb2xsYWJsZV9wcmV2TmF2IiwiRGF5UGlja2VyTmF2aWdhdGlvbl9fYm90dG9tIiwiRGF5UGlja2VyTmF2aWdhdGlvbl9fYm90dG9tRGVmYXVsdCIsIm9uS2V5VXAiLCJEYXlQaWNrZXJOYXZpZ2F0aW9uX2J1dHRvbiIsIkRheVBpY2tlck5hdmlnYXRpb25fYnV0dG9uX19kZWZhdWx0IiwiRGF5UGlja2VyTmF2aWdhdGlvbl9idXR0b25fX2Rpc2FibGVkIiwiRGF5UGlja2VyTmF2aWdhdGlvbl9idXR0b25fX2hvcml6b250YWwiLCJEYXlQaWNrZXJOYXZpZ2F0aW9uX2J1dHRvbl9faG9yaXpvbnRhbERlZmF1bHQiLCJEYXlQaWNrZXJOYXZpZ2F0aW9uX2JvdHRvbUJ1dHRvbl9faG9yaXpvbnRhbERlZmF1bHQiLCJEYXlQaWNrZXJOYXZpZ2F0aW9uX2xlZnRCdXR0b25fX2hvcml6b250YWxEZWZhdWx0IiwiRGF5UGlja2VyTmF2aWdhdGlvbl9yaWdodEJ1dHRvbl9faG9yaXpvbnRhbERlZmF1bHQiLCJEYXlQaWNrZXJOYXZpZ2F0aW9uX2J1dHRvbl9fdmVydGljYWwiLCJEYXlQaWNrZXJOYXZpZ2F0aW9uX2J1dHRvbl9fdmVydGljYWxEZWZhdWx0IiwiRGF5UGlja2VyTmF2aWdhdGlvbl9wcmV2QnV0dG9uX192ZXJ0aWNhbERlZmF1bHQiLCJEYXlQaWNrZXJOYXZpZ2F0aW9uX3ByZXZCdXR0b25fX3ZlcnRpY2FsU2Nyb2xsYWJsZURlZmF1bHQiLCJEYXlQaWNrZXJOYXZpZ2F0aW9uX25leHRCdXR0b25fX3ZlcnRpY2FsRGVmYXVsdCIsIkRheVBpY2tlck5hdmlnYXRpb25fbmV4dEJ1dHRvbl9fdmVydGljYWxTY3JvbGxhYmxlRGVmYXVsdCIsImp1c3RpZnlDb250ZW50IiwiYm9yZGVyTWVkaXVtIiwiYmFja2dyb3VuZERhcmsiLCJtYXJnaW5SaWdodCIsIm1hcmdpbkJvdHRvbSIsIkNoZXZyb25VcCIsIkNoZXZyb25Eb3duIiwiX0tleWJvYXJkU2hvcnRjdXRSb3ciLCJnZXRLZXlib2FyZFNob3J0Y3V0cyIsInVuaWNvZGUiLCJsYWJlbCIsIkRheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzIiwib25TaG93S2V5Ym9hcmRTaG9ydGN1dHNCdXR0b25DbGljayIsInNldFNob3dLZXlib2FyZFNob3J0Y3V0c0J1dHRvblJlZiIsInNldEhpZGVLZXlib2FyZFNob3J0Y3V0c0J1dHRvblJlZiIsImhhbmRsZUZvY3VzIiwic2hvd0tleWJvYXJkU2hvcnRjdXRzQnV0dG9uIiwiaGlkZUtleWJvYXJkU2hvcnRjdXRzQnV0dG9uIiwidG9nZ2xlQnV0dG9uVGV4dCIsImJvdHRvbVJpZ2h0IiwidG9wUmlnaHQiLCJ0b3BMZWZ0IiwiRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHNfYnV0dG9uUmVzZXQiLCJEYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0c19zaG93IiwiRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHNfc2hvd19fYm90dG9tUmlnaHQiLCJEYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0c19zaG93X190b3BSaWdodCIsIkRheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzX3Nob3dfX3RvcExlZnQiLCJEYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0c19zaG93U3BhbiIsIkRheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzX3Nob3dTcGFuX19ib3R0b21SaWdodCIsIkRheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzX3Nob3dTcGFuX190b3BSaWdodCIsIkRheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzX3Nob3dTcGFuX190b3BMZWZ0IiwiY2xvc2VCdXR0b25BcmlhTGFiZWwiLCJvbkNsb3NlQnV0dG9uQ2xpY2siLCJEYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0c19wYW5lbCIsIkRheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzX3RpdGxlIiwiRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHNfY2xvc2UiLCJEYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0c19jbG9zZVN2ZyIsIkRheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzX2xpc3QiLCJfcmVmMyRyZWFjdERhdGVzIiwiY29udGVudCIsInByaW1hcnkiLCJwcmltYXJ5X2RhcmsiLCJ3aGl0ZSIsIktleWJvYXJkU2hvcnRjdXRSb3ciLCJLZXlib2FyZFNob3J0Y3V0Um93X19ibG9jayIsIktleWJvYXJkU2hvcnRjdXRSb3dfa2V5Q29udGFpbmVyIiwiS2V5Ym9hcmRTaG9ydGN1dFJvd19rZXlDb250YWluZXJfX2Jsb2NrIiwiS2V5Ym9hcmRTaG9ydGN1dFJvd19rZXkiLCJLZXlib2FyZFNob3J0Y3V0Um93X2FjdGlvbiIsIndoaXRlU3BhY2UiLCJmb250RmFtaWx5IiwidGV4dFRyYW5zZm9ybSIsImdyYXlMaWdodGVzdCIsIndvcmRCcmVhayIsImZpcnN0RGF5T2ZNb250aCIsIm51bUJsYW5rRGF5cyIsImdldEJsYW5rRGF5c0JlZm9yZUZpcnN0RGF5IiwiUHVyZVNpbmdsZURhdGVQaWNrZXIiLCJfU2luZ2xlRGF0ZVBpY2tlcklucHV0Q29udHJvbGxlciIsIlNpbmdsZURhdGVQaWNrZXIiLCJpc0lucHV0Rm9jdXNlZCIsIm9uRm9jdXNPdXQiLCJvbklucHV0Rm9jdXMiLCJyZW1vdmVSZXNpemVFdmVudExpc3RlbmVyIiwicmVtb3ZlRm9jdXNPdXRFdmVudExpc3RlbmVyIiwiYWRkRXZlbnRMaXN0ZW5lcnMiLCJTaW5nbGVEYXRlUGlja2VyX3BpY2tlciIsIlNpbmdsZURhdGVQaWNrZXJfcGlja2VyX19kaXJlY3Rpb25MZWZ0IiwiU2luZ2xlRGF0ZVBpY2tlcl9waWNrZXJfX2RpcmVjdGlvblJpZ2h0IiwiU2luZ2xlRGF0ZVBpY2tlcl9waWNrZXJfX29wZW5Eb3duIiwiU2luZ2xlRGF0ZVBpY2tlcl9waWNrZXJfX29wZW5VcCIsIlNpbmdsZURhdGVQaWNrZXJfcGlja2VyX19ob3Jpem9udGFsIiwiU2luZ2xlRGF0ZVBpY2tlcl9waWNrZXJfX3ZlcnRpY2FsIiwiU2luZ2xlRGF0ZVBpY2tlcl9waWNrZXJfX3BvcnRhbCIsIlNpbmdsZURhdGVQaWNrZXJfcGlja2VyX19mdWxsU2NyZWVuUG9ydGFsIiwiU2luZ2xlRGF0ZVBpY2tlcl9waWNrZXJfX3J0bCIsIlNpbmdsZURhdGVQaWNrZXJfY2xvc2VCdXR0b24iLCJTaW5nbGVEYXRlUGlja2VyX2Nsb3NlQnV0dG9uX3N2ZyIsIlNpbmdsZURhdGVQaWNrZXJfX2Jsb2NrIiwiU2luZ2xlRGF0ZVBpY2tlcklucHV0Q29udHJvbGxlciIsIm5ld0RhdGUiLCJfcmVnaXN0ZXJJbnRlcmZhY2VXaXRoRGVmYXVsdFRoZW1lIiwiX3JlYWN0V2l0aFN0eWxlc0ludGVyZmFjZUNzcyIsIl9hcnJheVByb3RvdHlwZSIsIl9nbG9iYWxDYWNoZSIsIl9nZXRDbGFzc05hbWUiLCJfc2VwYXJhdGVTdHlsZXMyIiwic3R5bGVzT2JqZWN0Iiwic3R5bGVzVG9DbGFzc2VzIiwic3R5bGVOYW1lcyIsIl9zaGFyZWRTdGF0ZSRuYW1lc3BhYyIsIkdMT0JBTF9DQUNIRV9LRVkiLCJuYW1lc3BhY2UiLCJzdHlsZU5hbWUiLCJjbGFzc05hbWUiLCJzdHlsZXNBcnJheSIsImZsYXR0ZW5lZFN0eWxlcyIsIl9zZXBhcmF0ZVN0eWxlcyIsImNsYXNzTmFtZXMiLCJib3VuZEZsYXQiLCIkc3BlY2llcyIsIklzQXJyYXkiLCJJc0NvbnN0cnVjdG9yIiwiSXNJbnRlZ2VyIiwib3JpZ2luYWxBcnJheSIsIiRmbG9vciIsIiRhYnMiLCIkaXNGaW5pdGUiLCJDYWxsIiwiQ3JlYXRlRGF0YVByb3BlcnR5T3JUaHJvdyIsIkhhc1Byb3BlcnR5IiwiVG9TdHJpbmciLCJtYXBwZXJGdW5jdGlvbiIsInRhcmdldEluZGV4Iiwic291cmNlSW5kZXgiLCJleGlzdHMiLCJzaG91bGRGbGF0dGVuIiwiZWxlbWVudExlbiIsIkNyZWF0ZURhdGFQcm9wZXJ0eSIsInN1Y2Nlc3MiLCJEZWZpbmVPd25Qcm9wZXJ0eSIsIkZyb21Qcm9wZXJ0eURlc2NyaXB0b3IiLCJPcmRpbmFyeUdldE93blByb3BlcnR5IiwiSXNEYXRhRGVzY3JpcHRvciIsIklzRXh0ZW5zaWJsZSIsIlNhbWVWYWx1ZSIsIm9sZERlc2MiLCJleHRlbnNpYmxlIiwiJGRlZmluZVByb3BlcnR5IiwiYXNzZXJ0UmVjb3JkIiwiSXNSZWdFeHAiLCJUb1Byb3BlcnR5RGVzY3JpcHRvciIsImFycmF5TGVuZ3RoIiwicmVnZXhMYXN0SW5kZXgiLCIkbWF0Y2giLCJoYXNSZWdFeHBNYXRjaGVyIiwiVG9Cb29sZWFuIiwicmVnZXhFeGVjIiwidHJ5UmVnZXhFeGVjQ2FsbCIsIk9iaiIsIiRPYmplY3QiLCJpc1ByaW1pdGl2ZSIsIiRwcmV2ZW50RXh0ZW5zaW9ucyIsInByZXZlbnRFeHRlbnNpb25zIiwiJGlzRXh0ZW5zaWJsZSIsImlzRXh0ZW5zaWJsZSIsIiRzaWduIiwiJFJlZ0V4cCIsIiRwYXJzZUludGVnZXIiLCJyZWdleFRlc3RlciIsIiRzdHJTbGljZSIsImlzT2N0YWwiLCJpc0ludmFsaWRIZXhMaXRlcmFsIiwiaGFzTm9uV1MiLCJ0cmltUmVnZXgiLCJUb1ByaW1pdGl2ZSIsInRyaW1tZWQiLCIkdHJpbSIsIiR0ZXN0IiwidG9QcmltaXRpdmUiLCJpc0NhbGxhYmxlIiwib3JkaW5hcnlUb1ByaW1pdGl2ZSIsImhpbnQiLCJtZXRob2QiLCJtZXRob2ROYW1lcyIsIkdldE1ldGhvZCIsImV4b3RpY1RvUHJpbSIsInRyeURhdGVPYmplY3QiLCIkU3RyaW5nIiwiZ2xvYmFsS2V5IiwidHJ1ZVRodW5rIiwiZW5zdXJlQ2FjaGUiLCJwcm9wZXJ0aWVzIiwiZ2V0UHJpbWl0aXZlS2V5IiwicmVxdWlyZVByaW1pdGl2ZUtleSIsImdsb2JhbENhY2hlIiwiY2xlYXIiLCJwcmltaXRpdmVLZXkiLCJzZXRJZk1pc3NpbmdUaGVuR2V0IiwidmFsdWVUaHVuayIsIml0ZW0iLCJNQVhfU1BFQ0lGSUNJVFkiLCJuYW1lc3BhY2VTZWdtZW50IiwicmVhY3RXaXRoU3R5bGVzSW50ZXJmYWNlIiwiX0RlZmF1bHRUaGVtZSIsImdyYXkiLCJwcmltYXJ5U2hhZGVfMSIsInByaW1hcnlTaGFkZV8yIiwicHJpbWFyeVNoYWRlXzMiLCJwcmltYXJ5U2hhZGVfNCIsInNlY29uZGFyeSIsInllbGxvdyIsInllbGxvd19kYXJrIiwidGV4dEZvY3VzZWQiLCJjb2xvcl9ob3ZlciIsImJvcmRlckNvbG9yX2FjdGl2ZSIsImJvcmRlckNvbG9yX2hvdmVyIiwiUmVhY3RSZWR1eENvbnRleHQiLCJudWxsTGlzdGVuZXJzIiwibm90aWZ5IiwiY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uIiwiYmF0Y2giLCJmaXJzdCIsIlN1YnNjcmlwdGlvbiIsInN0b3JlIiwicGFyZW50U3ViIiwidW5zdWJzY3JpYmUiLCJoYW5kbGVDaGFuZ2VXcmFwcGVyIiwiYWRkTmVzdGVkU3ViIiwidHJ5U3Vic2NyaWJlIiwibm90aWZ5TmVzdGVkU3VicyIsIm9uU3RhdGVDaGFuZ2UiLCJ0cnlVbnN1YnNjcmliZSIsImNvbnRleHRWYWx1ZSIsInN1YnNjcmlwdGlvbiIsInByZXZpb3VzU3RhdGUiLCJDb250ZXh0IiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJleGNsdWRlZCIsInNvdXJjZUtleXMiLCJ1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IiwiRU1QVFlfQVJSQVkiLCJOT19TVUJTQ1JJUFRJT05fQVJSQVkiLCJzdG9yZVN0YXRlVXBkYXRlc1JlZHVjZXIiLCJ1cGRhdGVDb3VudCIsInVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3RXaXRoQXJncyIsImVmZmVjdEZ1bmMiLCJlZmZlY3RBcmdzIiwiY2FwdHVyZVdyYXBwZXJQcm9wcyIsImxhc3RXcmFwcGVyUHJvcHMiLCJsYXN0Q2hpbGRQcm9wcyIsInJlbmRlcklzU2NoZWR1bGVkIiwid3JhcHBlclByb3BzIiwiYWN0dWFsQ2hpbGRQcm9wcyIsImNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUiLCJzdWJzY3JpYmVVcGRhdGVzIiwic2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzIiwiY2hpbGRQcm9wc1NlbGVjdG9yIiwiZm9yY2VDb21wb25lbnRVcGRhdGVEaXNwYXRjaCIsImRpZFVuc3Vic2NyaWJlIiwibGFzdFRocm93bkVycm9yIiwiY2hlY2tGb3JVcGRhdGVzIiwibmV3Q2hpbGRQcm9wcyIsImxhdGVzdFN0b3JlU3RhdGUiLCJpbml0U3RhdGVVcGRhdGVzIiwiY29ubmVjdEFkdmFuY2VkIiwic2VsZWN0b3JGYWN0b3J5IiwiX3JlZjIkZ2V0RGlzcGxheU5hbWUiLCJnZXREaXNwbGF5TmFtZSIsIl9yZWYyJG1ldGhvZE5hbWUiLCJfcmVmMiRyZW5kZXJDb3VudFByb3AiLCJyZW5kZXJDb3VudFByb3AiLCJfcmVmMiRzaG91bGRIYW5kbGVTdGEiLCJfcmVmMiRzdG9yZUtleSIsInN0b3JlS2V5IiwiX3JlZjIkZm9yd2FyZFJlZiIsIndpdGhSZWYiLCJfcmVmMiRjb250ZXh0IiwiY29ubmVjdE9wdGlvbnMiLCJzZWxlY3RvckZhY3RvcnlPcHRpb25zIiwicHVyZSIsInVzZVB1cmVPbmx5TWVtbyIsIkNvbm5lY3RGdW5jdGlvbiIsIl91c2VNZW1vIiwiZm9yd2FyZGVkUmVmIiwicHJvcHNDb250ZXh0IiwiQ29udGV4dFRvVXNlIiwiZGlkU3RvcmVDb21lRnJvbVByb3BzIiwiY3JlYXRlQ2hpbGRTZWxlY3RvciIsIl91c2VNZW1vMiIsIm92ZXJyaWRkZW5Db250ZXh0VmFsdWUiLCJfdXNlUmVkdWNlciIsInByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQiLCJyZW5kZXJlZFdyYXBwZWRDb21wb25lbnQiLCJDb25uZWN0IiwiZm9yd2FyZGVkIiwic2hhbGxvd0VxdWFsIiwicmFuZG9tU3RyaW5nIiwiQWN0aW9uVHlwZXMiLCJJTklUIiwiUkVQTEFDRSIsIlBST0JFX1VOS05PV05fQUNUSU9OIiwiaXNQbGFpbk9iamVjdCIsImNyZWF0ZVN0b3JlIiwicmVkdWNlciIsInByZWxvYWRlZFN0YXRlIiwiZW5oYW5jZXIiLCJjdXJyZW50UmVkdWNlciIsImN1cnJlbnRTdGF0ZSIsImN1cnJlbnRMaXN0ZW5lcnMiLCJuZXh0TGlzdGVuZXJzIiwiaXNEaXNwYXRjaGluZyIsImVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMiLCJyZXBsYWNlUmVkdWNlciIsIm5leHRSZWR1Y2VyIiwib3V0ZXJTdWJzY3JpYmUiLCJvYnNlcnZlciIsIm9ic2VydmVTdGF0ZSIsImdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlIiwiYWN0aW9uVHlwZSIsImNvbWJpbmVSZWR1Y2VycyIsInJlZHVjZXJzIiwicmVkdWNlcktleXMiLCJmaW5hbFJlZHVjZXJzIiwic2hhcGVBc3NlcnRpb25FcnJvciIsImZpbmFsUmVkdWNlcktleXMiLCJhc3NlcnRSZWR1Y2VyU2hhcGUiLCJoYXNDaGFuZ2VkIiwicHJldmlvdXNTdGF0ZUZvcktleSIsIm5leHRTdGF0ZUZvcktleSIsImVycm9yTWVzc2FnZSIsImJpbmRBY3Rpb25DcmVhdG9yIiwiYWN0aW9uQ3JlYXRvciIsIndyYXBNYXBUb1Byb3BzQ29uc3RhbnQiLCJnZXRDb25zdGFudCIsImNvbnN0YW50IiwiY29uc3RhbnRTZWxlY3RvciIsImRlcGVuZHNPbk93blByb3BzIiwiZ2V0RGVwZW5kc09uT3duUHJvcHMiLCJtYXBUb1Byb3BzIiwid3JhcE1hcFRvUHJvcHNGdW5jIiwicHJveHkiLCJzdGF0ZU9yRGlzcGF0Y2giLCJvd25Qcm9wcyIsIm1hcERpc3BhdGNoVG9Qcm9wcyIsImFjdGlvbkNyZWF0b3JzIiwiYm91bmRBY3Rpb25DcmVhdG9ycyIsImJpbmRBY3Rpb25DcmVhdG9ycyIsIm1hcFN0YXRlVG9Qcm9wcyIsImRlZmF1bHRNZXJnZVByb3BzIiwic3RhdGVQcm9wcyIsImRpc3BhdGNoUHJvcHMiLCJtZXJnZVByb3BzIiwibWVyZ2VkUHJvcHMiLCJhcmVNZXJnZWRQcm9wc0VxdWFsIiwiaGFzUnVuT25jZSIsIm5leHRNZXJnZWRQcm9wcyIsIndyYXBNZXJnZVByb3BzRnVuYyIsImltcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJwdXJlRmluYWxQcm9wc1NlbGVjdG9yRmFjdG9yeSIsImFyZVN0YXRlc0VxdWFsIiwiYXJlT3duUHJvcHNFcXVhbCIsImFyZVN0YXRlUHJvcHNFcXVhbCIsImhhc1J1bkF0TGVhc3RPbmNlIiwiaGFuZGxlU3Vic2VxdWVudENhbGxzIiwibmV4dE93blByb3BzIiwibmV4dFN0YXRlUHJvcHMiLCJzdGF0ZVByb3BzQ2hhbmdlZCIsInByb3BzQ2hhbmdlZCIsInN0YXRlQ2hhbmdlZCIsImZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkiLCJpbml0TWFwU3RhdGVUb1Byb3BzIiwiaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyIsImluaXRNZXJnZVByb3BzIiwiZmFjdG9yaWVzIiwic3RyaWN0RXF1YWwiLCJjcmVhdGVDb25uZWN0IiwiX3RlbXAiLCJfcmVmJGNvbm5lY3RIT0MiLCJjb25uZWN0SE9DIiwiX3JlZiRtYXBTdGF0ZVRvUHJvcHNGIiwibWFwU3RhdGVUb1Byb3BzRmFjdG9yaWVzIiwiX3JlZiRtYXBEaXNwYXRjaFRvUHJvIiwibWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzIiwiX3JlZiRtZXJnZVByb3BzRmFjdG9yIiwibWVyZ2VQcm9wc0ZhY3RvcmllcyIsIl9yZWYkc2VsZWN0b3JGYWN0b3J5IiwiX3JlZjMkcHVyZSIsIl9yZWYzJGFyZVN0YXRlc0VxdWFsIiwiX3JlZjMkYXJlT3duUHJvcHNFcXVhIiwiX3JlZjMkYXJlU3RhdGVQcm9wc0VxIiwiX3JlZjMkYXJlTWVyZ2VkUHJvcHNFIiwiZXh0cmFPcHRpb25zIiwibmV3QmF0Y2giLCJfaW5oZXJpdHNMb29zZSIsImlzQWJzb2x1dGUiLCJwYXRobmFtZSIsInNwbGljZU9uZSIsImxpc3QiLCJoYXNUcmFpbGluZ1NsYXNoIiwidG9QYXJ0cyIsImZyb21QYXJ0cyIsImlzVG9BYnMiLCJpc0Zyb21BYnMiLCJtdXN0RW5kQWJzIiwidXAiLCJwYXJ0IiwiY29uZGl0aW9uIiwibWVzc2FnZSIsImFkZExlYWRpbmdTbGFzaCIsInN0cmlwTGVhZGluZ1NsYXNoIiwic3RyaXBCYXNlbmFtZSIsImhhc0Jhc2VuYW1lIiwic3RyaXBUcmFpbGluZ1NsYXNoIiwiY3JlYXRlUGF0aCIsImhhc2giLCJjcmVhdGVMb2NhdGlvbiIsImN1cnJlbnRMb2NhdGlvbiIsImhhc2hJbmRleCIsInNlYXJjaEluZGV4IiwicGFyc2VQYXRoIiwiY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIiLCJwcm9tcHQiLCJzZXRQcm9tcHQiLCJuZXh0UHJvbXB0IiwiY29uZmlybVRyYW5zaXRpb25UbyIsImdldFVzZXJDb25maXJtYXRpb24iLCJhcHBlbmRMaXN0ZW5lciIsImlzQWN0aXZlIiwibm90aWZ5TGlzdGVuZXJzIiwiZ2V0Q29uZmlybWF0aW9uIiwiY29uZmlybSIsImdldEhpc3RvcnlTdGF0ZSIsImhpc3RvcnkiLCJjcmVhdGVCcm93c2VySGlzdG9yeSIsImdsb2JhbEhpc3RvcnkiLCJjYW5Vc2VIaXN0b3J5IiwidXNlckFnZW50IiwibmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIiLCJfcHJvcHMkZm9yY2VSZWZyZXNoIiwiZm9yY2VSZWZyZXNoIiwiX3Byb3BzJGdldFVzZXJDb25maXJtIiwiX3Byb3BzJGtleUxlbmd0aCIsImtleUxlbmd0aCIsImJhc2VuYW1lIiwiZ2V0RE9NTG9jYXRpb24iLCJoaXN0b3J5U3RhdGUiLCJfd2luZG93JGxvY2F0aW9uIiwiY3JlYXRlS2V5IiwidHJhbnNpdGlvbk1hbmFnZXIiLCJoYW5kbGVQb3BTdGF0ZSIsImlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQiLCJoYW5kbGVQb3AiLCJoYW5kbGVIYXNoQ2hhbmdlIiwiZm9yY2VOZXh0UG9wIiwib2siLCJmcm9tTG9jYXRpb24iLCJ0b0xvY2F0aW9uIiwidG9JbmRleCIsImFsbEtleXMiLCJmcm9tSW5kZXgiLCJkZWx0YSIsImdvIiwicmV2ZXJ0UG9wIiwiaW5pdGlhbExvY2F0aW9uIiwiY3JlYXRlSHJlZiIsImxpc3RlbmVyQ291bnQiLCJjaGVja0RPTUxpc3RlbmVycyIsInB1c2hTdGF0ZSIsInByZXZJbmRleCIsIm5leHRLZXlzIiwicmVwbGFjZVN0YXRlIiwiZ29CYWNrIiwiZ29Gb3J3YXJkIiwidW5ibG9jayIsImxpc3RlbiIsInVubGlzdGVuIiwiSGFzaFBhdGhDb2RlcnMiLCJoYXNoYmFuZyIsImVuY29kZVBhdGgiLCJkZWNvZGVQYXRoIiwibm9zbGFzaCIsInNsYXNoIiwic3RyaXBIYXNoIiwiZ2V0SGFzaFBhdGgiLCJyZXBsYWNlSGFzaFBhdGgiLCJjcmVhdGVIYXNoSGlzdG9yeSIsIl9wcm9wcyRoYXNoVHlwZSIsImhhc2hUeXBlIiwiX0hhc2hQYXRoQ29kZXJzJGhhc2hUIiwiaWdub3JlUGF0aCIsImVuY29kZWRQYXRoIiwicHJldkxvY2F0aW9uIiwiYWxsUGF0aHMiLCJsYXN0SW5kZXhPZiIsImJhc2VUYWciLCJxdWVyeVNlbGVjdG9yIiwicHVzaEhhc2hQYXRoIiwibmV4dFBhdGhzIiwiY2xhbXAiLCJsb3dlckJvdW5kIiwidXBwZXJCb3VuZCIsImNyZWF0ZU1lbW9yeUhpc3RvcnkiLCJfcHJvcHMkaW5pdGlhbEVudHJpZXMiLCJpbml0aWFsRW50cmllcyIsIl9wcm9wcyRpbml0aWFsSW5kZXgiLCJpbml0aWFsSW5kZXgiLCJlbnRyeSIsIm5leHRJbmRleCIsIm5leHRFbnRyaWVzIiwiY2FuR28iLCJjcmVhdGVFdmVudEVtaXR0ZXIiLCJuZXdWYWx1ZSIsImNoYW5nZWRCaXRzIiwiY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfUHJvdmlkZXIkY2hpbGRDb250ZXgiLCJfQ29uc3VtZXIkY29udGV4dFR5cGUiLCJjb250ZXh0UHJvcCIsIl9Db21wb25lbnQiLCJlbWl0dGVyIiwib2xkVmFsdWUiLCJfQ29tcG9uZW50MiIsIm9uVXBkYXRlIiwiX3Byb3RvMiIsIlJvdXRlciIsIl9pc01vdW50ZWQiLCJfcGVuZGluZ0xvY2F0aW9uIiwic3RhdGljQ29udGV4dCIsImNvbXB1dGVSb290TWF0Y2giLCJwYXJhbXMiLCJpc0V4YWN0IiwiY2FjaGUkMSIsImNhY2hlQ291bnQkMSIsIm1hdGNoUGF0aCIsIl9vcHRpb25zIiwiX29wdGlvbnMkZXhhY3QiLCJfb3B0aW9ucyRzdHJpY3QiLCJfb3B0aW9ucyRzZW5zaXRpdmUiLCJfY29tcGlsZVBhdGgiLCJjYWNoZUtleSIsInBhdGhDYWNoZSIsInJlZ2V4cCIsImNvbXBpbGVQYXRoJDEiLCJSb3V0ZSIsImNvbnRleHQkMSIsImNvbXB1dGVkTWF0Y2giLCJjcmVhdGVVUkwiLCJzdGF0aWNIYW5kbGVyIiwiU3dpdGNoIiwiQnJvd3NlclJvdXRlciIsInJlc29sdmVUb0xvY2F0aW9uIiwiZm9yd2FyZFJlZlNoaW0iLCJMaW5rQW5jaG9yIiwiaW5uZXJSZWYiLCJuYXZpZ2F0ZSIsIl9vbkNsaWNrIiwiZXgiLCJpc01vZGlmaWVkRXZlbnQiLCJMaW5rIiwiX3JlZjIkY29tcG9uZW50IiwiZm9yd2FyZFJlZlNoaW0kMSIsImZvcndhcmRSZWYkMSIsIk5hdkxpbmsiLCJfcmVmJGFyaWFDdXJyZW50IiwiYXJpYUN1cnJlbnQiLCJfcmVmJGFjdGl2ZUNsYXNzTmFtZSIsImFjdGl2ZUNsYXNzTmFtZSIsImFjdGl2ZVN0eWxlIiwiY2xhc3NOYW1lUHJvcCIsImlzQWN0aXZlUHJvcCIsImxvY2F0aW9uUHJvcCIsInN0eWxlUHJvcCIsImVzY2FwZWRQYXRoIiwiY2xhc3NuYW1lcyIsImpvaW5DbGFzc25hbWVzIiwiRXhwZW5zZUxpc3RJdGVtIiwiZGVzY3JpcHRpb24iLCJhbW91bnQiLCJjcmVhdGVkQXQiLCJleHBlbnNlcyIsInNvcnRCeSIsImV4cGVuc2UiLCJjcmVhdGVkQXRNb21lbnQiLCJzdGFydERhdGVNYXRjaCIsImVuZERhdGVNYXRjaCIsInRleHRNYXRjaCIsImNvbm5lY3QiLCJzZWxlY3RFeHBlbnNlcyIsImZpbHRlcnMiLCJzZXRTdGFydERhdGUiLCJFeHBlbnNlTGlzdEZpbHRlcnMiLCJjYWxlbmRhckZvY3VzZWQiLCJzZXRFbmREYXRlIiwic2V0VGV4dEZpbHRlciIsInNvcnRCeURhdGUiLCJzb3J0QnlBbW91bnQiLCJpbnB1dE9uQ2hhbmdlIiwic2VsZWN0T25DaGFuZ2UiLCJSZWFjdCIsIkV4cGVuc2VEYXNoYm9hcmRQYWdlIiwiRXhwZW5zZUZvcm0iLCJub3RlIiwib25TdWJtaXQiLCJvbkRlc2NyaXB0aW9uQ2hhbmdlIiwib25BbW91bnRDaGFuZ2UiLCJvbk5vdGVDaGFuZ2UiLCJBZGRFeHBlbnNlUGFnZSIsImFkZEV4cGVuc2UiLCJFZGl0RXhwZW5zZVBhZ2UiLCJlZGl0RXhwZW5zZSIsInJlbW92ZUV4cGVuc2UiLCJvblJlbW92ZSIsImZpbmQiLCJ1cGRhdGVzIiwiSGVscFBhZ2UiLCJOb3RGb3VuZFBhZ2UiLCJIZWFkZXIiLCJBcHBSb3V0ZXIiLCJEYXNoYm9hcmRQYWdlIiwiZXhwZW5zZXNSZWR1Y2VyRGVmYXVsdFN0YXRlIiwiZmlsdGVyc1JlZHVjZXJEZWZhdWx0U3RhdGUiLCJleHBlbnNlc1JlZHVjZXIiLCJmaWx0ZXJzUmVkdWNlciIsIl9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX18iLCJnZXRWaXNpYmxlRXhwZW5zZXMiLCJsb2ciLCJqc3giLCJSZWFjdERPTSIsImdldEVsZW1lbnRCeUlkIiwiZ2V0UmFuZG9tVmFsdWVzIiwiY3J5cHRvIiwibXNDcnlwdG8iLCJybmRzOCIsInJuZyIsImJ5dGVUb0hleCIsIl9ub2RlSWQiLCJfY2xvY2tzZXEiLCJidWYiLCJidGgiLCJfbGFzdE1TZWNzIiwiX2xhc3ROU2VjcyIsImNsb2Nrc2VxIiwic2VlZEJ5dGVzIiwibXNlY3MiLCJuc2VjcyIsImR0IiwidGwiLCJ0bWgiLCJnZW5lcmF0ZVVVSUQiLCJ1bmVzY2FwZSIsImJ5dGVzIiwic3RyaW5nVG9CeXRlcyIsImhleCIsInV1aWRUb0J5dGVzIiwiaGFzaGZ1bmMiLCJpZHgiLCJETlMiLCJVUkwiLCJzYWZlQWRkIiwibHN3IiwibWQ1Y21uIiwiY250IiwibWQ1ZmYiLCJtZDVnZyIsIm1kNWhoIiwibWQ1aWkiLCJ2MzUiLCJsZW5ndGgzMiIsIm1kNVRvSGV4RW5jb2RlZEFycmF5Iiwib2xkYSIsIm9sZGIiLCJvbGRjIiwib2xkZCIsIndvcmRzVG9NZDUiLCJsZW5ndGg4IiwiYnl0ZXNUb1dvcmRzIiwicm5kcyIsIlJPVEwiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFv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LEdBQ2QsVUFBVyxHQUNYLGFBQWMsR0FDZCxVQUFXLEdBQ1gsYUFBYyxHQUNkLFVBQVcsR0FDWCxhQUFjLEdBQ2QsVUFBVyxHQUNYLGFBQWMsR0FDZCxVQUFXLEdBQ1gsT0FBUSxHQUNSLFVBQVcsR0FDWCxPQUFRLEdBQ1IsVUFBVyxHQUNYLE9BQVEsR0FDUixVQUFXLEdBQ1gsT0FBUSxHQUNSLFVBQVcsR0FDWCxPQUFRLEdBQ1IsVUFBVyxHQUNYLE9BQVEsR0FDUixVQUFXLEdBQ1gsT0FBUSxHQUNSLFVBQVcsR0FDWCxPQUFRLEdBQ1IsVUFBVyxHQUNYLE9BQVEsR0FDUixVQUFXLEdBQ1gsT0FBUSxHQUNSLFVBQVcsR0FDWCxPQUFRLEdBQ1IsVUFBVyxHQUNYLE9BQVEsR0FDUixVQUFXLEdBQ1gsT0FBUSxHQUNSLFVBQVcsR0FDWCxPQUFRLEdBQ1IsVUFBVyxHQUNYLGFBQWMsR0FDZCxVQUFXLEdBQ1gsYUFBYyxHQUNkLFVBQVcsR0FDWCxPQUFRLEdBQ1IsVUFBVyxHQUNYLE9BQVEsR0FDUixVQUFXLEdBQ1gsVUFBVyxHQUNYLGFBQWMsR0FDZCxVQUFXLEdBQ1gsYUFBYyxHQUNkLFVBQVcsR0FDWCxhQUFjLEdBQ2QsVUFBVyxHQUNYLGFBQWMsR0FDZCxVQUFXLEdBQ1gsYUFBYyxHQUNkLFVBQVcsR0FDWCxhQUFjLEdBQ2QsVUFBVyxHQUNYLGFBQWMsR0FDZCxPQUFRLEdBQ1IsVUFBVyxHQUNYLE9BQVEsR0FDUixVQUFXLEdBQ1gsYUFBYyxHQUNkLFVBQVcsSUFDWCxhQUFjLElBQ2QsVUFBVyxHQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLGFBQWMsSUFDZCxVQUFXLElBQ1gsYUFBYyxJQUNkLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLGFBQWMsSUFDZCxnQkFBaUIsSUFDakIsT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLFVBQVcsSUFDWCxhQUFjLElBQ2QsT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsYUFBYyxJQUNkLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsYUFBYyxJQUNkLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLE9BQVEsSUFDUixVQUFXLElBQ1gsYUFBYyxJQUNkLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLFVBQVcsSUFDWCxhQUFjLElBQ2QsT0FBUSxJQUNSLFVBQVcsSUFDWCxPQUFRLElBQ1IsVUFBVyxJQUNYLGFBQWMsSUFDZCxVQUFXLElBQ1gsT0FBUSxJQUNSLFVBQVcsSUFDWCxP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LEVBQUksR0FBSSxJQUFLLFlBQ3JDc0QsRUFBSTR0SSxFQUFNNXRJLEVBQUdqRCxFQUFHQyxFQUFHK0MsRUFBR3dNLEVBQUU3UCxFQUFJLEdBQUksSUFBSyxVQUNyQ3FELEVBQUk2dEksRUFBTTd0SSxFQUFHQyxFQUFHakQsRUFBR0MsRUFBR3VQLEVBQUU3UCxFQUFJLEdBQUksRUFBRyxZQUNuQ00sRUFBSTR3SSxFQUFNNXdJLEVBQUcrQyxFQUFHQyxFQUFHakQsRUFBR3dQLEVBQUU3UCxFQUFJLEdBQUksSUFBSyxZQUNyQ0ssRUFBSTZ3SSxFQUFNN3dJLEVBQUdDLEVBQUcrQyxFQUFHQyxFQUFHdU0sRUFBRTdQLEVBQUksSUFBSyxJQUFLLE9BQ3RDc0QsRUFBSTR0SSxFQUFNNXRJLEVBQUdqRCxFQUFHQyxFQUFHK0MsRUFBR3dNLEVBQUU3UCxFQUFJLElBQUssSUFBSyxZQUN0Q3FELEVBQUk2dEksRUFBTTd0SSxFQUFHQyxFQUFHakQsRUFBR0MsRUFBR3VQLEVBQUU3UCxFQUFJLElBQUssRUFBRyxZQUNwQ00sRUFBSTR3SSxFQUFNNXdJLEVBQUcrQyxFQUFHQyxFQUFHakQsRUFBR3dQLEVBQUU3UCxFQUFJLElBQUssSUFBSyxVQUN0Q0ssRUFBSTZ3SSxFQUFNN3dJLEVBQUdDLEVBQUcrQyxFQUFHQyxFQUFHdU0sRUFBRTdQLEVBQUksSUFBSyxJQUFLLFlBQ3RDc0QsRUFBSTR0SSxFQUFNNXRJLEVBQUdqRCxFQUFHQyxFQUFHK0MsRUFBR3dNLEVBQUU3UCxFQUFJLElBQUssR0FBSSxZQUNyQ3FELEVBQUk4dEksRUFBTTl0SSxFQUFHQyxFQUFHakQsRUFBR0MsRUFBR3VQLEVBQUU3UCxFQUFJLEdBQUksR0FBSSxXQUNwQ00sRUFBSTZ3SSxFQUFNN3dJLEVBQUcrQyxFQUFHQyxFQUFHakQsRUFBR3dQLEVBQUU3UCxFQUFJLEdBQUksR0FBSSxZQUNwQ0ssRUFBSTh3SSxFQUFNOXdJLEVBQUdDLEVBQUcrQyxFQUFHQyxFQUFHdU0sRUFBRTdQLEVBQUksSUFBSyxHQUFJLFdBQ3JDc0QsRUFBSTZ0SSxFQUFN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LElBQU0sR0FBSyxJQUFNQSxFQUFFLElBQU0sR0FBSyxJQUFNQSxFQUFFLElBQU0sRUFBSSxJQUFhLElBQVBBLEVBQUUsR0FBV0EsRUFBRSxJQUFNLEdBQUssSUFBTUEsRUFBRSxJQUFNLEdBQUssSUFBTUEsRUFBRSxJQUFNLEVBQUksSUFBYSxJQUFQQSxFQUFFLEdBQVdBLEVBQUUsSUFBTSxHQUFLLElBQU1BLEVBQUUsSUFBTSxHQUFLLElBQU1BLEVBQUUsSUFBTSxFQUFJLElBQWEsSUFBUEEsRUFBRSxHQUFXQSxFQUFFLElBQU0sR0FBSyxJQUFNQSxFQUFFLElBQU0sR0FBSyxJQUFNQSxFQUFFLElBQU0sRUFBSSxJQUFhLElBQVBBLEVBQUUiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDM3NCk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8vISBtb21lbnQuanNcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuICAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG4gICAgZ2xvYmFsLm1vbWVudCA9IGZhY3RvcnkoKVxufSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgaG9va0NhbGxiYWNrO1xuXG4gICAgZnVuY3Rpb24gaG9va3MgKCkge1xuICAgICAgICByZXR1cm4gaG9va0NhbGxiYWNrLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgLy8gVGhpcyBpcyBkb25lIHRvIHJlZ2lzdGVyIHRoZSBtZXRob2QgY2FsbGVkIHdpdGggbW9tZW50KClcbiAgICAvLyB3aXRob3V0IGNyZWF0aW5nIGNpcmN1bGFyIGRlcGVuZGVuY2llcy5cbiAgICBmdW5jdGlvbiBzZXRIb29rQ2FsbGJhY2sgKGNhbGxiYWNrKSB7XG4gICAgICAgIGhvb2tDYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQXJyYXkoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0IGluc3RhbmNlb2YgQXJyYXkgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc09iamVjdChpbnB1dCkge1xuICAgICAgICAvLyBJRTggd2lsbCB0cmVhdCB1bmRlZmluZWQgYW5kIG51bGwgYXMgb2JqZWN0IGlmIGl0IHdhc24ndCBmb3JcbiAgICAgICAgLy8gaW5wdXQgIT0gbnVsbFxuICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBPYmplY3RdJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc09iamVjdEVtcHR5KG9iaikge1xuICAgICAgICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMpIHtcbiAgICAgICAgICAgIHJldHVybiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKS5sZW5ndGggPT09IDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGs7XG4gICAgICAgICAgICBmb3IgKGsgaW4gb2JqKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1VuZGVmaW5lZChpbnB1dCkge1xuICAgICAgICByZXR1cm4gaW5wdXQgPT09IHZvaWQgMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc051bWJlcihpbnB1dCkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJyB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBOdW1iZXJdJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0RhdGUoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0IGluc3RhbmNlb2YgRGF0ZSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBEYXRlXSc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFwKGFyciwgZm4pIHtcbiAgICAgICAgdmFyIHJlcyA9IFtdLCBpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICByZXMucHVzaChmbihhcnJbaV0sIGkpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhc093blByb3AoYSwgYikge1xuICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGEsIGIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGV4dGVuZChhLCBiKSB7XG4gICAgICAgIGZvciAodmFyIGkgaW4gYikge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3AoYiwgaSkpIHtcbiAgICAgICAgICAgICAgICBhW2ldID0gYltpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXNPd25Qcm9wKGIsICd0b1N0cmluZycpKSB7XG4gICAgICAgICAgICBhLnRvU3RyaW5nID0gYi50b1N0cmluZztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXNPd25Qcm9wKGIsICd2YWx1ZU9mJykpIHtcbiAgICAgICAgICAgIGEudmFsdWVPZiA9IGIudmFsdWVPZjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVVUQyAoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsT3JVVEMoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QsIHRydWUpLnV0YygpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlZmF1bHRQYXJzaW5nRmxhZ3MoKSB7XG4gICAgICAgIC8vIFdlIG5lZWQgdG8gZGVlcCBjbG9uZSB0aGlzIG9iamVjdC5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGVtcHR5ICAgICAgICAgICA6IGZhbHNlLFxuICAgICAgICAgICAgdW51c2VkVG9rZW5zICAgIDogW10sXG4gICAgICAgICAgICB1bnVzZWRJbnB1dCAgICAgOiBbXSxcbiAgICAgICAgICAgIG92ZXJmbG93ICAgICAgICA6IC0yLFxuICAgICAgICAgICAgY2hhcnNMZWZ0T3ZlciAgIDogMCxcbiAgICAgICAgICAgIG51bGxJbnB1dCAgICAgICA6IGZhbHNlLFxuICAgICAgICAgICAgaW52YWxpZE1vbnRoICAgIDogbnVsbCxcbiAgICAgICAgICAgIGludmFsaWRGb3JtYXQgICA6IGZhbHNlLFxuICAgICAgICAgICAgdXNlckludmFsaWRhdGVkIDogZmFsc2UsXG4gICAgICAgICAgICBpc28gICAgICAgICAgICAgOiBmYWxzZSxcbiAgICAgICAgICAgIHBhcnNlZERhdGVQYXJ0cyA6IFtdLFxuICAgICAgICAgICAgbWVyaWRpZW0gICAgICAgIDogbnVsbCxcbiAgICAgICAgICAgIHJmYzI4MjIgICAgICAgICA6IGZhbHNlLFxuICAgICAgICAgICAgd2Vla2RheU1pc21hdGNoIDogZmFsc2VcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRQYXJzaW5nRmxhZ3MobSkge1xuICAgICAgICBpZiAobS5fcGYgPT0gbnVsbCkge1xuICAgICAgICAgICAgbS5fcGYgPSBkZWZhdWx0UGFyc2luZ0ZsYWdzKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG0uX3BmO1xuICAgIH1cblxuICAgIHZhciBzb21lO1xuICAgIGlmIChBcnJheS5wcm90b3R5cGUuc29tZSkge1xuICAgICAgICBzb21lID0gQXJyYXkucHJvdG90eXBlLnNvbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc29tZSA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICAgICAgICAgIHZhciB0ID0gT2JqZWN0KHRoaXMpO1xuICAgICAgICAgICAgdmFyIGxlbiA9IHQubGVuZ3RoID4+PiAwO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgaW4gdCAmJiBmdW4uY2FsbCh0aGlzLCB0W2ldLCBpLCB0KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1ZhbGlkKG0pIHtcbiAgICAgICAgaWYgKG0uX2lzVmFsaWQgPT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIGZsYWdzID0gZ2V0UGFyc2luZ0ZsYWdzKG0pO1xuICAgICAgICAgICAgdmFyIHBhcnNlZFBhcnRzID0gc29tZS5jYWxsKGZsYWdzLnBhcnNlZERhdGVQYXJ0cywgZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaSAhPSBudWxsO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgaXNOb3dWYWxpZCA9ICFpc05hTihtLl9kLmdldFRpbWUoKSkgJiZcbiAgICAgICAgICAgICAgICBmbGFncy5vdmVyZmxvdyA8IDAgJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3MuZW1wdHkgJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3MuaW52YWxpZE1vbnRoICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLmludmFsaWRXZWVrZGF5ICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLndlZWtkYXlNaXNtYXRjaCAmJlxuICAgICAgICAgICAgICAgICFmbGFncy5udWxsSW5wdXQgJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3MuaW52YWxpZEZvcm1hdCAmJlxuICAgICAgICAgICAgICAgICFmbGFncy51c2VySW52YWxpZGF0ZWQgJiZcbiAgICAgICAgICAgICAgICAoIWZsYWdzLm1lcmlkaWVtIHx8IChmbGFncy5tZXJpZGllbSAmJiBwYXJzZWRQYXJ0cykpO1xuXG4gICAgICAgICAgICBpZiAobS5fc3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgaXNOb3dWYWxpZCA9IGlzTm93VmFsaWQgJiZcbiAgICAgICAgICAgICAgICAgICAgZmxhZ3MuY2hhcnNMZWZ0T3ZlciA9PT0gMCAmJlxuICAgICAgICAgICAgICAgICAgICBmbGFncy51bnVzZWRUb2tlbnMubGVuZ3RoID09PSAwICYmXG4gICAgICAgICAgICAgICAgICAgIGZsYWdzLmJpZ0hvdXIgPT09IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKE9iamVjdC5pc0Zyb3plbiA9PSBudWxsIHx8ICFPYmplY3QuaXNGcm96ZW4obSkpIHtcbiAgICAgICAgICAgICAgICBtLl9pc1ZhbGlkID0gaXNOb3dWYWxpZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc05vd1ZhbGlkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtLl9pc1ZhbGlkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUludmFsaWQgKGZsYWdzKSB7XG4gICAgICAgIHZhciBtID0gY3JlYXRlVVRDKE5hTik7XG4gICAgICAgIGlmIChmbGFncyAhPSBudWxsKSB7XG4gICAgICAgICAgICBleHRlbmQoZ2V0UGFyc2luZ0ZsYWdzKG0pLCBmbGFncyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MobSkudXNlckludmFsaWRhdGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtO1xuICAgIH1cblxuICAgIC8vIFBsdWdpbnMgdGhhdCBhZGQgcHJvcGVydGllcyBzaG91bGQgYWxzbyBhZGQgdGhlIGtleSBoZXJlIChudWxsIHZhbHVlKSxcbiAgICAvLyBzbyB3ZSBjYW4gcHJvcGVybHkgY2xvbmUgb3Vyc2VsdmVzLlxuICAgIHZhciBtb21lbnRQcm9wZXJ0aWVzID0gaG9va3MubW9tZW50UHJvcGVydGllcyA9IFtdO1xuXG4gICAgZnVuY3Rpb24gY29weUNvbmZpZyh0bywgZnJvbSkge1xuICAgICAgICB2YXIgaSwgcHJvcCwgdmFsO1xuXG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5faXNBTW9tZW50T2JqZWN0KSkge1xuICAgICAgICAgICAgdG8uX2lzQU1vbWVudE9iamVjdCA9IGZyb20uX2lzQU1vbWVudE9iamVjdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2kpKSB7XG4gICAgICAgICAgICB0by5faSA9IGZyb20uX2k7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9mKSkge1xuICAgICAgICAgICAgdG8uX2YgPSBmcm9tLl9mO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fbCkpIHtcbiAgICAgICAgICAgIHRvLl9sID0gZnJvbS5fbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX3N0cmljdCkpIHtcbiAgICAgICAgICAgIHRvLl9zdHJpY3QgPSBmcm9tLl9zdHJpY3Q7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl90em0pKSB7XG4gICAgICAgICAgICB0by5fdHptID0gZnJvbS5fdHptO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5faXNVVEMpKSB7XG4gICAgICAgICAgICB0by5faXNVVEMgPSBmcm9tLl9pc1VUQztcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX29mZnNldCkpIHtcbiAgICAgICAgICAgIHRvLl9vZmZzZXQgPSBmcm9tLl9vZmZzZXQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9wZikpIHtcbiAgICAgICAgICAgIHRvLl9wZiA9IGdldFBhcnNpbmdGbGFncyhmcm9tKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2xvY2FsZSkpIHtcbiAgICAgICAgICAgIHRvLl9sb2NhbGUgPSBmcm9tLl9sb2NhbGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobW9tZW50UHJvcGVydGllcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbW9tZW50UHJvcGVydGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHByb3AgPSBtb21lbnRQcm9wZXJ0aWVzW2ldO1xuICAgICAgICAgICAgICAgIHZhbCA9IGZyb21bcHJvcF07XG4gICAgICAgICAgICAgICAgaWYgKCFpc1VuZGVmaW5lZCh2YWwpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvW3Byb3BdID0gdmFsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0bztcbiAgICB9XG5cbiAgICB2YXIgdXBkYXRlSW5Qcm9ncmVzcyA9IGZhbHNlO1xuXG4gICAgLy8gTW9tZW50IHByb3RvdHlwZSBvYmplY3RcbiAgICBmdW5jdGlvbiBNb21lbnQoY29uZmlnKSB7XG4gICAgICAgIGNvcHlDb25maWcodGhpcywgY29uZmlnKTtcbiAgICAgICAgdGhpcy5fZCA9IG5ldyBEYXRlKGNvbmZpZy5fZCAhPSBudWxsID8gY29uZmlnLl9kLmdldFRpbWUoKSA6IE5hTik7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHRoaXMuX2QgPSBuZXcgRGF0ZShOYU4pO1xuICAgICAgICB9XG4gICAgICAgIC8vIFByZXZlbnQgaW5maW5pdGUgbG9vcCBpbiBjYXNlIHVwZGF0ZU9mZnNldCBjcmVhdGVzIG5ldyBtb21lbnRcbiAgICAgICAgLy8gb2JqZWN0cy5cbiAgICAgICAgaWYgKHVwZGF0ZUluUHJvZ3Jlc3MgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB1cGRhdGVJblByb2dyZXNzID0gdHJ1ZTtcbiAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzKTtcbiAgICAgICAgICAgIHVwZGF0ZUluUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzTW9tZW50IChvYmopIHtcbiAgICAgICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIE1vbWVudCB8fCAob2JqICE9IG51bGwgJiYgb2JqLl9pc0FNb21lbnRPYmplY3QgIT0gbnVsbCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWJzRmxvb3IgKG51bWJlcikge1xuICAgICAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgICAgICAgLy8gLTAgLT4gMFxuICAgICAgICAgICAgcmV0dXJuIE1hdGguY2VpbChudW1iZXIpIHx8IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihudW1iZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9JbnQoYXJndW1lbnRGb3JDb2VyY2lvbikge1xuICAgICAgICB2YXIgY29lcmNlZE51bWJlciA9ICthcmd1bWVudEZvckNvZXJjaW9uLFxuICAgICAgICAgICAgdmFsdWUgPSAwO1xuXG4gICAgICAgIGlmIChjb2VyY2VkTnVtYmVyICE9PSAwICYmIGlzRmluaXRlKGNvZXJjZWROdW1iZXIpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGFic0Zsb29yKGNvZXJjZWROdW1iZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIC8vIGNvbXBhcmUgdHdvIGFycmF5cywgcmV0dXJuIHRoZSBudW1iZXIgb2YgZGlmZmVyZW5jZXNcbiAgICBmdW5jdGlvbiBjb21wYXJlQXJyYXlzKGFycmF5MSwgYXJyYXkyLCBkb250Q29udmVydCkge1xuICAgICAgICB2YXIgbGVuID0gTWF0aC5taW4oYXJyYXkxLmxlbmd0aCwgYXJyYXkyLmxlbmd0aCksXG4gICAgICAgICAgICBsZW5ndGhEaWZmID0gTWF0aC5hYnMoYXJyYXkxLmxlbmd0aCAtIGFycmF5Mi5sZW5ndGgpLFxuICAgICAgICAgICAgZGlmZnMgPSAwLFxuICAgICAgICAgICAgaTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoKGRvbnRDb252ZXJ0ICYmIGFycmF5MVtpXSAhPT0gYXJyYXkyW2ldKSB8fFxuICAgICAgICAgICAgICAgICghZG9udENvbnZlcnQgJiYgdG9JbnQoYXJyYXkxW2ldKSAhPT0gdG9JbnQoYXJyYXkyW2ldKSkpIHtcbiAgICAgICAgICAgICAgICBkaWZmcysrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkaWZmcyArIGxlbmd0aERpZmY7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd2Fybihtc2cpIHtcbiAgICAgICAgaWYgKGhvb2tzLnN1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5ncyA9PT0gZmFsc2UgJiZcbiAgICAgICAgICAgICAgICAodHlwZW9mIGNvbnNvbGUgIT09ICAndW5kZWZpbmVkJykgJiYgY29uc29sZS53YXJuKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ0RlcHJlY2F0aW9uIHdhcm5pbmc6ICcgKyBtc2cpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVwcmVjYXRlKG1zZywgZm4pIHtcbiAgICAgICAgdmFyIGZpcnN0VGltZSA9IHRydWU7XG5cbiAgICAgICAgcmV0dXJuIGV4dGVuZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBob29rcy5kZXByZWNhdGlvbkhhbmRsZXIobnVsbCwgbXNnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChmaXJzdFRpbWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgICAgIHZhciBhcmc7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgYXJnID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXJndW1lbnRzW2ldID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJnICs9ICdcXG5bJyArIGkgKyAnXSAnO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGFyZ3VtZW50c1swXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZyArPSBrZXkgKyAnOiAnICsgYXJndW1lbnRzWzBdW2tleV0gKyAnLCAnO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJnLnNsaWNlKDAsIC0yKTsgLy8gUmVtb3ZlIHRyYWlsaW5nIGNvbW1hIGFuZCBzcGFjZVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaChhcmcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB3YXJuKG1zZyArICdcXG5Bcmd1bWVudHM6ICcgKyBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmdzKS5qb2luKCcnKSArICdcXG4nICsgKG5ldyBFcnJvcigpKS5zdGFjayk7XG4gICAgICAgICAgICAgICAgZmlyc3RUaW1lID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfSwgZm4pO1xuICAgIH1cblxuICAgIHZhciBkZXByZWNhdGlvbnMgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGRlcHJlY2F0ZVNpbXBsZShuYW1lLCBtc2cpIHtcbiAgICAgICAgaWYgKGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlciAhPSBudWxsKSB7XG4gICAgICAgICAgICBob29rcy5kZXByZWNhdGlvbkhhbmRsZXIobmFtZSwgbXNnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWRlcHJlY2F0aW9uc1tuYW1lXSkge1xuICAgICAgICAgICAgd2Fybihtc2cpO1xuICAgICAgICAgICAgZGVwcmVjYXRpb25zW25hbWVdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhvb2tzLnN1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5ncyA9IGZhbHNlO1xuICAgIGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlciA9IG51bGw7XG5cbiAgICBmdW5jdGlvbiBpc0Z1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBpbnB1dCBpbnN0YW5jZW9mIEZ1bmN0aW9uIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0IChjb25maWcpIHtcbiAgICAgICAgdmFyIHByb3AsIGk7XG4gICAgICAgIGZvciAoaSBpbiBjb25maWcpIHtcbiAgICAgICAgICAgIHByb3AgPSBjb25maWdbaV07XG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihwcm9wKSkge1xuICAgICAgICAgICAgICAgIHRoaXNbaV0gPSBwcm9wO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzWydfJyArIGldID0gcHJvcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jb25maWcgPSBjb25maWc7XG4gICAgICAgIC8vIExlbmllbnQgb3JkaW5hbCBwYXJzaW5nIGFjY2VwdHMganVzdCBhIG51bWJlciBpbiBhZGRpdGlvbiB0b1xuICAgICAgICAvLyBudW1iZXIgKyAocG9zc2libHkpIHN0dWZmIGNvbWluZyBmcm9tIF9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlLlxuICAgICAgICAvLyBUT0RPOiBSZW1vdmUgXCJvcmRpbmFsUGFyc2VcIiBmYWxsYmFjayBpbiBuZXh0IG1ham9yIHJlbGVhc2UuXG4gICAgICAgIHRoaXMuX2RheU9mTW9udGhPcmRpbmFsUGFyc2VMZW5pZW50ID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICh0aGlzLl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlLnNvdXJjZSB8fCB0aGlzLl9vcmRpbmFsUGFyc2Uuc291cmNlKSArXG4gICAgICAgICAgICAgICAgJ3wnICsgKC9cXGR7MSwyfS8pLnNvdXJjZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWVyZ2VDb25maWdzKHBhcmVudENvbmZpZywgY2hpbGRDb25maWcpIHtcbiAgICAgICAgdmFyIHJlcyA9IGV4dGVuZCh7fSwgcGFyZW50Q29uZmlnKSwgcHJvcDtcbiAgICAgICAgZm9yIChwcm9wIGluIGNoaWxkQ29uZmlnKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcChjaGlsZENvbmZpZywgcHJvcCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNPYmplY3QocGFyZW50Q29uZmlnW3Byb3BdKSAmJiBpc09iamVjdChjaGlsZENvbmZpZ1twcm9wXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzW3Byb3BdID0ge307XG4gICAgICAgICAgICAgICAgICAgIGV4dGVuZChyZXNbcHJvcF0sIHBhcmVudENvbmZpZ1twcm9wXSk7XG4gICAgICAgICAgICAgICAgICAgIGV4dGVuZChyZXNbcHJvcF0sIGNoaWxkQ29uZmlnW3Byb3BdKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNoaWxkQ29uZmlnW3Byb3BdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzW3Byb3BdID0gY2hpbGRDb25maWdbcHJvcF07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHJlc1twcm9wXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChwcm9wIGluIHBhcmVudENvbmZpZykge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3AocGFyZW50Q29uZmlnLCBwcm9wKSAmJlxuICAgICAgICAgICAgICAgICAgICAhaGFzT3duUHJvcChjaGlsZENvbmZpZywgcHJvcCkgJiZcbiAgICAgICAgICAgICAgICAgICAgaXNPYmplY3QocGFyZW50Q29uZmlnW3Byb3BdKSkge1xuICAgICAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSBjaGFuZ2VzIHRvIHByb3BlcnRpZXMgZG9uJ3QgbW9kaWZ5IHBhcmVudCBjb25maWdcbiAgICAgICAgICAgICAgICByZXNbcHJvcF0gPSBleHRlbmQoe30sIHJlc1twcm9wXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBMb2NhbGUoY29uZmlnKSB7XG4gICAgICAgIGlmIChjb25maWcgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5zZXQoY29uZmlnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBrZXlzO1xuXG4gICAgaWYgKE9iamVjdC5rZXlzKSB7XG4gICAgICAgIGtleXMgPSBPYmplY3Qua2V5cztcbiAgICB9IGVsc2Uge1xuICAgICAgICBrZXlzID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgdmFyIGksIHJlcyA9IFtdO1xuICAgICAgICAgICAgZm9yIChpIGluIG9iaikge1xuICAgICAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKG9iaiwgaSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzLnB1c2goaSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdENhbGVuZGFyID0ge1xuICAgICAgICBzYW1lRGF5IDogJ1tUb2RheSBhdF0gTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ1tUb21vcnJvdyBhdF0gTFQnLFxuICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFthdF0gTFQnLFxuICAgICAgICBsYXN0RGF5IDogJ1tZZXN0ZXJkYXkgYXRdIExUJyxcbiAgICAgICAgbGFzdFdlZWsgOiAnW0xhc3RdIGRkZGQgW2F0XSBMVCcsXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGNhbGVuZGFyIChrZXksIG1vbSwgbm93KSB7XG4gICAgICAgIHZhciBvdXRwdXQgPSB0aGlzLl9jYWxlbmRhcltrZXldIHx8IHRoaXMuX2NhbGVuZGFyWydzYW1lRWxzZSddO1xuICAgICAgICByZXR1cm4gaXNGdW5jdGlvbihvdXRwdXQpID8gb3V0cHV0LmNhbGwobW9tLCBub3cpIDogb3V0cHV0O1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TG9uZ0RhdGVGb3JtYXQgPSB7XG4gICAgICAgIExUUyAgOiAnaDptbTpzcyBBJyxcbiAgICAgICAgTFQgICA6ICdoOm1tIEEnLFxuICAgICAgICBMICAgIDogJ01NL0REL1lZWVknLFxuICAgICAgICBMTCAgIDogJ01NTU0gRCwgWVlZWScsXG4gICAgICAgIExMTCAgOiAnTU1NTSBELCBZWVlZIGg6bW0gQScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgTU1NTSBELCBZWVlZIGg6bW0gQSdcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gbG9uZ0RhdGVGb3JtYXQgKGtleSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0gdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5XSxcbiAgICAgICAgICAgIGZvcm1hdFVwcGVyID0gdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5LnRvVXBwZXJDYXNlKCldO1xuXG4gICAgICAgIGlmIChmb3JtYXQgfHwgIWZvcm1hdFVwcGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5XSA9IGZvcm1hdFVwcGVyLnJlcGxhY2UoL01NTU18TU18RER8ZGRkZC9nLCBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsLnNsaWNlKDEpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5XTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdEludmFsaWREYXRlID0gJ0ludmFsaWQgZGF0ZSc7XG5cbiAgICBmdW5jdGlvbiBpbnZhbGlkRGF0ZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZhbGlkRGF0ZTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdE9yZGluYWwgPSAnJWQnO1xuICAgIHZhciBkZWZhdWx0RGF5T2ZNb250aE9yZGluYWxQYXJzZSA9IC9cXGR7MSwyfS87XG5cbiAgICBmdW5jdGlvbiBvcmRpbmFsIChudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29yZGluYWwucmVwbGFjZSgnJWQnLCBudW1iZXIpO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0UmVsYXRpdmVUaW1lID0ge1xuICAgICAgICBmdXR1cmUgOiAnaW4gJXMnLFxuICAgICAgICBwYXN0ICAgOiAnJXMgYWdvJyxcbiAgICAgICAgcyAgOiAnYSBmZXcgc2Vjb25kcycsXG4gICAgICAgIHNzIDogJyVkIHNlY29uZHMnLFxuICAgICAgICBtICA6ICdhIG1pbnV0ZScsXG4gICAgICAgIG1tIDogJyVkIG1pbnV0ZXMnLFxuICAgICAgICBoICA6ICdhbiBob3VyJyxcbiAgICAgICAgaGggOiAnJWQgaG91cnMnLFxuICAgICAgICBkICA6ICdhIGRheScsXG4gICAgICAgIGRkIDogJyVkIGRheXMnLFxuICAgICAgICBNICA6ICdhIG1vbnRoJyxcbiAgICAgICAgTU0gOiAnJWQgbW9udGhzJyxcbiAgICAgICAgeSAgOiAnYSB5ZWFyJyxcbiAgICAgICAgeXkgOiAnJWQgeWVhcnMnXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHJlbGF0aXZlVGltZSAobnVtYmVyLCB3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciBvdXRwdXQgPSB0aGlzLl9yZWxhdGl2ZVRpbWVbc3RyaW5nXTtcbiAgICAgICAgcmV0dXJuIChpc0Z1bmN0aW9uKG91dHB1dCkpID9cbiAgICAgICAgICAgIG91dHB1dChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpIDpcbiAgICAgICAgICAgIG91dHB1dC5yZXBsYWNlKC8lZC9pLCBudW1iZXIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhc3RGdXR1cmUgKGRpZmYsIG91dHB1dCkge1xuICAgICAgICB2YXIgZm9ybWF0ID0gdGhpcy5fcmVsYXRpdmVUaW1lW2RpZmYgPiAwID8gJ2Z1dHVyZScgOiAncGFzdCddO1xuICAgICAgICByZXR1cm4gaXNGdW5jdGlvbihmb3JtYXQpID8gZm9ybWF0KG91dHB1dCkgOiBmb3JtYXQucmVwbGFjZSgvJXMvaSwgb3V0cHV0KTtcbiAgICB9XG5cbiAgICB2YXIgYWxpYXNlcyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gYWRkVW5pdEFsaWFzICh1bml0LCBzaG9ydGhhbmQpIHtcbiAgICAgICAgdmFyIGxvd2VyQ2FzZSA9IHVuaXQudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgYWxpYXNlc1tsb3dlckNhc2VdID0gYWxpYXNlc1tsb3dlckNhc2UgKyAncyddID0gYWxpYXNlc1tzaG9ydGhhbmRdID0gdW5pdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBub3JtYWxpemVVbml0cyh1bml0cykge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHVuaXRzID09PSAnc3RyaW5nJyA/IGFsaWFzZXNbdW5pdHNdIHx8IGFsaWFzZXNbdW5pdHMudG9Mb3dlckNhc2UoKV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbm9ybWFsaXplT2JqZWN0VW5pdHMoaW5wdXRPYmplY3QpIHtcbiAgICAgICAgdmFyIG5vcm1hbGl6ZWRJbnB1dCA9IHt9LFxuICAgICAgICAgICAgbm9ybWFsaXplZFByb3AsXG4gICAgICAgICAgICBwcm9wO1xuXG4gICAgICAgIGZvciAocHJvcCBpbiBpbnB1dE9iamVjdCkge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3AoaW5wdXRPYmplY3QsIHByb3ApKSB7XG4gICAgICAgICAgICAgICAgbm9ybWFsaXplZFByb3AgPSBub3JtYWxpemVVbml0cyhwcm9wKTtcbiAgICAgICAgICAgICAgICBpZiAobm9ybWFsaXplZFByb3ApIHtcbiAgICAgICAgICAgICAgICAgICAgbm9ybWFsaXplZElucHV0W25vcm1hbGl6ZWRQcm9wXSA9IGlucHV0T2JqZWN0W3Byb3BdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBub3JtYWxpemVkSW5wdXQ7XG4gICAgfVxuXG4gICAgdmFyIHByaW9yaXRpZXMgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGFkZFVuaXRQcmlvcml0eSh1bml0LCBwcmlvcml0eSkge1xuICAgICAgICBwcmlvcml0aWVzW3VuaXRdID0gcHJpb3JpdHk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0UHJpb3JpdGl6ZWRVbml0cyh1bml0c09iaikge1xuICAgICAgICB2YXIgdW5pdHMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgdSBpbiB1bml0c09iaikge1xuICAgICAgICAgICAgdW5pdHMucHVzaCh7dW5pdDogdSwgcHJpb3JpdHk6IHByaW9yaXRpZXNbdV19KTtcbiAgICAgICAgfVxuICAgICAgICB1bml0cy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gYS5wcmlvcml0eSAtIGIucHJpb3JpdHk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdW5pdHM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gemVyb0ZpbGwobnVtYmVyLCB0YXJnZXRMZW5ndGgsIGZvcmNlU2lnbikge1xuICAgICAgICB2YXIgYWJzTnVtYmVyID0gJycgKyBNYXRoLmFicyhudW1iZXIpLFxuICAgICAgICAgICAgemVyb3NUb0ZpbGwgPSB0YXJnZXRMZW5ndGggLSBhYnNOdW1iZXIubGVuZ3RoLFxuICAgICAgICAgICAgc2lnbiA9IG51bWJlciA+PSAwO1xuICAgICAgICByZXR1cm4gKHNpZ24gPyAoZm9yY2VTaWduID8gJysnIDogJycpIDogJy0nKSArXG4gICAgICAgICAgICBNYXRoLnBvdygxMCwgTWF0aC5tYXgoMCwgemVyb3NUb0ZpbGwpKS50b1N0cmluZygpLnN1YnN0cigxKSArIGFic051bWJlcjtcbiAgICB9XG5cbiAgICB2YXIgZm9ybWF0dGluZ1Rva2VucyA9IC8oXFxbW15cXFtdKlxcXSl8KFxcXFwpPyhbSGhdbW0oc3MpP3xNb3xNTT9NP00/fERvfERERG98REQ/RD9EP3xkZGQ/ZD98ZG8/fHdbb3x3XT98V1tvfFddP3xRbz98WVlZWVlZfFlZWVlZfFlZWVl8WVl8Z2coZ2dnPyk/fEdHKEdHRz8pP3xlfEV8YXxBfGhoP3xISD98a2s/fG1tP3xzcz98U3sxLDl9fHh8WHx6ej98Wlo/fC4pL2c7XG5cbiAgICB2YXIgbG9jYWxGb3JtYXR0aW5nVG9rZW5zID0gLyhcXFtbXlxcW10qXFxdKXwoXFxcXCk/KExUU3xMVHxMTD9MP0w/fGx7MSw0fSkvZztcblxuICAgIHZhciBmb3JtYXRGdW5jdGlvbnMgPSB7fTtcblxuICAgIHZhciBmb3JtYXRUb2tlbkZ1bmN0aW9ucyA9IHt9O1xuXG4gICAgLy8gdG9rZW46ICAgICdNJ1xuICAgIC8vIHBhZGRlZDogICBbJ01NJywgMl1cbiAgICAvLyBvcmRpbmFsOiAgJ01vJ1xuICAgIC8vIGNhbGxiYWNrOiBmdW5jdGlvbiAoKSB7IHRoaXMubW9udGgoKSArIDEgfVxuICAgIGZ1bmN0aW9uIGFkZEZvcm1hdFRva2VuICh0b2tlbiwgcGFkZGVkLCBvcmRpbmFsLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgZnVuYyA9IGNhbGxiYWNrO1xuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgZnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1tjYWxsYmFja10oKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRva2VuKSB7XG4gICAgICAgICAgICBmb3JtYXRUb2tlbkZ1bmN0aW9uc1t0b2tlbl0gPSBmdW5jO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYWRkZWQpIHtcbiAgICAgICAgICAgIGZvcm1hdFRva2VuRnVuY3Rpb25zW3BhZGRlZFswXV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHplcm9GaWxsKGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgcGFkZGVkWzFdLCBwYWRkZWRbMl0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3JkaW5hbCkge1xuICAgICAgICAgICAgZm9ybWF0VG9rZW5GdW5jdGlvbnNbb3JkaW5hbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm9yZGluYWwoZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCB0b2tlbik7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVtb3ZlRm9ybWF0dGluZ1Rva2VucyhpbnB1dCkge1xuICAgICAgICBpZiAoaW5wdXQubWF0Y2goL1xcW1tcXHNcXFNdLykpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dC5yZXBsYWNlKC9eXFxbfFxcXSQvZywgJycpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbnB1dC5yZXBsYWNlKC9cXFxcL2csICcnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWtlRm9ybWF0RnVuY3Rpb24oZm9ybWF0KSB7XG4gICAgICAgIHZhciBhcnJheSA9IGZvcm1hdC5tYXRjaChmb3JtYXR0aW5nVG9rZW5zKSwgaSwgbGVuZ3RoO1xuXG4gICAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZm9ybWF0VG9rZW5GdW5jdGlvbnNbYXJyYXlbaV1dKSB7XG4gICAgICAgICAgICAgICAgYXJyYXlbaV0gPSBmb3JtYXRUb2tlbkZ1bmN0aW9uc1thcnJheVtpXV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFycmF5W2ldID0gcmVtb3ZlRm9ybWF0dGluZ1Rva2VucyhhcnJheVtpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG1vbSkge1xuICAgICAgICAgICAgdmFyIG91dHB1dCA9ICcnLCBpO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0ICs9IGlzRnVuY3Rpb24oYXJyYXlbaV0pID8gYXJyYXlbaV0uY2FsbChtb20sIGZvcm1hdCkgOiBhcnJheVtpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gZm9ybWF0IGRhdGUgdXNpbmcgbmF0aXZlIGRhdGUgb2JqZWN0XG4gICAgZnVuY3Rpb24gZm9ybWF0TW9tZW50KG0sIGZvcm1hdCkge1xuICAgICAgICBpZiAoIW0uaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gbS5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvcm1hdCA9IGV4cGFuZEZvcm1hdChmb3JtYXQsIG0ubG9jYWxlRGF0YSgpKTtcbiAgICAgICAgZm9ybWF0RnVuY3Rpb25zW2Zvcm1hdF0gPSBmb3JtYXRGdW5jdGlvbnNbZm9ybWF0XSB8fCBtYWtlRm9ybWF0RnVuY3Rpb24oZm9ybWF0KTtcblxuICAgICAgICByZXR1cm4gZm9ybWF0RnVuY3Rpb25zW2Zvcm1hdF0obSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXhwYW5kRm9ybWF0KGZvcm1hdCwgbG9jYWxlKSB7XG4gICAgICAgIHZhciBpID0gNTtcblxuICAgICAgICBmdW5jdGlvbiByZXBsYWNlTG9uZ0RhdGVGb3JtYXRUb2tlbnMoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbGUubG9uZ0RhdGVGb3JtYXQoaW5wdXQpIHx8IGlucHV0O1xuICAgICAgICB9XG5cbiAgICAgICAgbG9jYWxGb3JtYXR0aW5nVG9rZW5zLmxhc3RJbmRleCA9IDA7XG4gICAgICAgIHdoaWxlIChpID49IDAgJiYgbG9jYWxGb3JtYXR0aW5nVG9rZW5zLnRlc3QoZm9ybWF0KSkge1xuICAgICAgICAgICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UobG9jYWxGb3JtYXR0aW5nVG9rZW5zLCByZXBsYWNlTG9uZ0RhdGVGb3JtYXRUb2tlbnMpO1xuICAgICAgICAgICAgbG9jYWxGb3JtYXR0aW5nVG9rZW5zLmxhc3RJbmRleCA9IDA7XG4gICAgICAgICAgICBpIC09IDE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZm9ybWF0O1xuICAgIH1cblxuICAgIHZhciBtYXRjaDEgICAgICAgICA9IC9cXGQvOyAgICAgICAgICAgIC8vICAgICAgIDAgLSA5XG4gICAgdmFyIG1hdGNoMiAgICAgICAgID0gL1xcZFxcZC87ICAgICAgICAgIC8vICAgICAgMDAgLSA5OVxuICAgIHZhciBtYXRjaDMgICAgICAgICA9IC9cXGR7M30vOyAgICAgICAgIC8vICAgICAwMDAgLSA5OTlcbiAgICB2YXIgbWF0Y2g0ICAgICAgICAgPSAvXFxkezR9LzsgICAgICAgICAvLyAgICAwMDAwIC0gOTk5OVxuICAgIHZhciBtYXRjaDYgICAgICAgICA9IC9bKy1dP1xcZHs2fS87ICAgIC8vIC05OTk5OTkgLSA5OTk5OTlcbiAgICB2YXIgbWF0Y2gxdG8yICAgICAgPSAvXFxkXFxkPy87ICAgICAgICAgLy8gICAgICAgMCAtIDk5XG4gICAgdmFyIG1hdGNoM3RvNCAgICAgID0gL1xcZFxcZFxcZFxcZD8vOyAgICAgLy8gICAgIDk5OSAtIDk5OTlcbiAgICB2YXIgbWF0Y2g1dG82ICAgICAgPSAvXFxkXFxkXFxkXFxkXFxkXFxkPy87IC8vICAgOTk5OTkgLSA5OTk5OTlcbiAgICB2YXIgbWF0Y2gxdG8zICAgICAgPSAvXFxkezEsM30vOyAgICAgICAvLyAgICAgICAwIC0gOTk5XG4gICAgdmFyIG1hdGNoMXRvNCAgICAgID0gL1xcZHsxLDR9LzsgICAgICAgLy8gICAgICAgMCAtIDk5OTlcbiAgICB2YXIgbWF0Y2gxdG82ICAgICAgPSAvWystXT9cXGR7MSw2fS87ICAvLyAtOTk5OTk5IC0gOTk5OTk5XG5cbiAgICB2YXIgbWF0Y2hVbnNpZ25lZCAgPSAvXFxkKy87ICAgICAgICAgICAvLyAgICAgICAwIC0gaW5mXG4gICAgdmFyIG1hdGNoU2lnbmVkICAgID0gL1srLV0/XFxkKy87ICAgICAgLy8gICAgLWluZiAtIGluZlxuXG4gICAgdmFyIG1hdGNoT2Zmc2V0ICAgID0gL1p8WystXVxcZFxcZDo/XFxkXFxkL2dpOyAvLyArMDA6MDAgLTAwOjAwICswMDAwIC0wMDAwIG9yIFpcbiAgICB2YXIgbWF0Y2hTaG9ydE9mZnNldCA9IC9afFsrLV1cXGRcXGQoPzo6P1xcZFxcZCk/L2dpOyAvLyArMDAgLTAwICswMDowMCAtMDA6MDAgKzAwMDAgLTAwMDAgb3IgWlxuXG4gICAgdmFyIG1hdGNoVGltZXN0YW1wID0gL1srLV0/XFxkKyhcXC5cXGR7MSwzfSk/LzsgLy8gMTIzNDU2Nzg5IDEyMzQ1Njc4OS4xMjNcblxuICAgIC8vIGFueSB3b3JkIChvciB0d28pIGNoYXJhY3RlcnMgb3IgbnVtYmVycyBpbmNsdWRpbmcgdHdvL3RocmVlIHdvcmQgbW9udGggaW4gYXJhYmljLlxuICAgIC8vIGluY2x1ZGVzIHNjb3R0aXNoIGdhZWxpYyB0d28gd29yZCBhbmQgaHlwaGVuYXRlZCBtb250aHNcbiAgICB2YXIgbWF0Y2hXb3JkID0gL1swLTldezAsMjU2fVsnYS16XFx1MDBBMC1cXHUwNUZGXFx1MDcwMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRjA3XFx1RkYxMC1cXHVGRkVGXXsxLDI1Nn18W1xcdTA2MDAtXFx1MDZGRlxcL117MSwyNTZ9KFxccyo/W1xcdTA2MDAtXFx1MDZGRl17MSwyNTZ9KXsxLDJ9L2k7XG5cbiAgICB2YXIgcmVnZXhlcyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gYWRkUmVnZXhUb2tlbiAodG9rZW4sIHJlZ2V4LCBzdHJpY3RSZWdleCkge1xuICAgICAgICByZWdleGVzW3Rva2VuXSA9IGlzRnVuY3Rpb24ocmVnZXgpID8gcmVnZXggOiBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZURhdGEpIHtcbiAgICAgICAgICAgIHJldHVybiAoaXNTdHJpY3QgJiYgc3RyaWN0UmVnZXgpID8gc3RyaWN0UmVnZXggOiByZWdleDtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRQYXJzZVJlZ2V4Rm9yVG9rZW4gKHRva2VuLCBjb25maWcpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHJlZ2V4ZXMsIHRva2VuKSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAodW5lc2NhcGVGb3JtYXQodG9rZW4pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZWdleGVzW3Rva2VuXShjb25maWcuX3N0cmljdCwgY29uZmlnLl9sb2NhbGUpO1xuICAgIH1cblxuICAgIC8vIENvZGUgZnJvbSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzM1NjE0OTMvaXMtdGhlcmUtYS1yZWdleHAtZXNjYXBlLWZ1bmN0aW9uLWluLWphdmFzY3JpcHRcbiAgICBmdW5jdGlvbiB1bmVzY2FwZUZvcm1hdChzKSB7XG4gICAgICAgIHJldHVybiByZWdleEVzY2FwZShzLnJlcGxhY2UoJ1xcXFwnLCAnJykucmVwbGFjZSgvXFxcXChcXFspfFxcXFwoXFxdKXxcXFsoW15cXF1cXFtdKilcXF18XFxcXCguKS9nLCBmdW5jdGlvbiAobWF0Y2hlZCwgcDEsIHAyLCBwMywgcDQpIHtcbiAgICAgICAgICAgIHJldHVybiBwMSB8fCBwMiB8fCBwMyB8fCBwNDtcbiAgICAgICAgfSkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlZ2V4RXNjYXBlKHMpIHtcbiAgICAgICAgcmV0dXJuIHMucmVwbGFjZSgvWy1cXC9cXFxcXiQqKz8uKCl8W1xcXXt9XS9nLCAnXFxcXCQmJyk7XG4gICAgfVxuXG4gICAgdmFyIHRva2VucyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gYWRkUGFyc2VUb2tlbiAodG9rZW4sIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBpLCBmdW5jID0gY2FsbGJhY2s7XG4gICAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0b2tlbiA9IFt0b2tlbl07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTnVtYmVyKGNhbGxiYWNrKSkge1xuICAgICAgICAgICAgZnVuYyA9IGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgICAgICAgICBhcnJheVtjYWxsYmFja10gPSB0b0ludChpbnB1dCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0b2tlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdG9rZW5zW3Rva2VuW2ldXSA9IGZ1bmM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRXZWVrUGFyc2VUb2tlbiAodG9rZW4sIGNhbGxiYWNrKSB7XG4gICAgICAgIGFkZFBhcnNlVG9rZW4odG9rZW4sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgICAgIGNvbmZpZy5fdyA9IGNvbmZpZy5fdyB8fCB7fTtcbiAgICAgICAgICAgIGNhbGxiYWNrKGlucHV0LCBjb25maWcuX3csIGNvbmZpZywgdG9rZW4pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRUaW1lVG9BcnJheUZyb21Ub2tlbih0b2tlbiwgaW5wdXQsIGNvbmZpZykge1xuICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCAmJiBoYXNPd25Qcm9wKHRva2VucywgdG9rZW4pKSB7XG4gICAgICAgICAgICB0b2tlbnNbdG9rZW5dKGlucHV0LCBjb25maWcuX2EsIGNvbmZpZywgdG9rZW4pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIFlFQVIgPSAwO1xuICAgIHZhciBNT05USCA9IDE7XG4gICAgdmFyIERBVEUgPSAyO1xuICAgIHZhciBIT1VSID0gMztcbiAgICB2YXIgTUlOVVRFID0gNDtcbiAgICB2YXIgU0VDT05EID0gNTtcbiAgICB2YXIgTUlMTElTRUNPTkQgPSA2O1xuICAgIHZhciBXRUVLID0gNztcbiAgICB2YXIgV0VFS0RBWSA9IDg7XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignWScsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHkgPSB0aGlzLnllYXIoKTtcbiAgICAgICAgcmV0dXJuIHkgPD0gOTk5OSA/ICcnICsgeSA6ICcrJyArIHk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1lZJywgMl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMueWVhcigpICUgMTAwO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydZWVlZJywgICA0XSwgICAgICAgMCwgJ3llYXInKTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1lZWVlZJywgIDVdLCAgICAgICAwLCAneWVhcicpO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnWVlZWVlZJywgNiwgdHJ1ZV0sIDAsICd5ZWFyJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ3llYXInLCAneScpO1xuXG4gICAgLy8gUFJJT1JJVElFU1xuXG4gICAgYWRkVW5pdFByaW9yaXR5KCd5ZWFyJywgMSk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdZJywgICAgICBtYXRjaFNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbignWVknLCAgICAgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1lZWVknLCAgIG1hdGNoMXRvNCwgbWF0Y2g0KTtcbiAgICBhZGRSZWdleFRva2VuKCdZWVlZWScsICBtYXRjaDF0bzYsIG1hdGNoNik7XG4gICAgYWRkUmVnZXhUb2tlbignWVlZWVlZJywgbWF0Y2gxdG82LCBtYXRjaDYpO1xuXG4gICAgYWRkUGFyc2VUb2tlbihbJ1lZWVlZJywgJ1lZWVlZWSddLCBZRUFSKTtcbiAgICBhZGRQYXJzZVRva2VuKCdZWVlZJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtZRUFSXSA9IGlucHV0Lmxlbmd0aCA9PT0gMiA/IGhvb2tzLnBhcnNlVHdvRGlnaXRZZWFyKGlucHV0KSA6IHRvSW50KGlucHV0KTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCdZWScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbWUVBUl0gPSBob29rcy5wYXJzZVR3b0RpZ2l0WWVhcihpbnB1dCk7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbignWScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbWUVBUl0gPSBwYXJzZUludChpbnB1dCwgMTApO1xuICAgIH0pO1xuXG4gICAgLy8gSEVMUEVSU1xuXG4gICAgZnVuY3Rpb24gZGF5c0luWWVhcih5ZWFyKSB7XG4gICAgICAgIHJldHVybiBpc0xlYXBZZWFyKHllYXIpID8gMzY2IDogMzY1O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzTGVhcFllYXIoeWVhcikge1xuICAgICAgICByZXR1cm4gKHllYXIgJSA0ID09PSAwICYmIHllYXIgJSAxMDAgIT09IDApIHx8IHllYXIgJSA0MDAgPT09IDA7XG4gICAgfVxuXG4gICAgLy8gSE9PS1NcblxuICAgIGhvb2tzLnBhcnNlVHdvRGlnaXRZZWFyID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgIHJldHVybiB0b0ludChpbnB1dCkgKyAodG9JbnQoaW5wdXQpID4gNjggPyAxOTAwIDogMjAwMCk7XG4gICAgfTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIHZhciBnZXRTZXRZZWFyID0gbWFrZUdldFNldCgnRnVsbFllYXInLCB0cnVlKTtcblxuICAgIGZ1bmN0aW9uIGdldElzTGVhcFllYXIgKCkge1xuICAgICAgICByZXR1cm4gaXNMZWFwWWVhcih0aGlzLnllYXIoKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFrZUdldFNldCAodW5pdCwga2VlcFRpbWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBzZXQkMSh0aGlzLCB1bml0LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIGtlZXBUaW1lKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldCh0aGlzLCB1bml0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXQgKG1vbSwgdW5pdCkge1xuICAgICAgICByZXR1cm4gbW9tLmlzVmFsaWQoKSA/XG4gICAgICAgICAgICBtb20uX2RbJ2dldCcgKyAobW9tLl9pc1VUQyA/ICdVVEMnIDogJycpICsgdW5pdF0oKSA6IE5hTjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXQkMSAobW9tLCB1bml0LCB2YWx1ZSkge1xuICAgICAgICBpZiAobW9tLmlzVmFsaWQoKSAmJiAhaXNOYU4odmFsdWUpKSB7XG4gICAgICAgICAgICBpZiAodW5pdCA9PT0gJ0Z1bGxZZWFyJyAmJiBpc0xlYXBZZWFyKG1vbS55ZWFyKCkpICYmIG1vbS5tb250aCgpID09PSAxICYmIG1vbS5kYXRlKCkgPT09IDI5KSB7XG4gICAgICAgICAgICAgICAgbW9tLl9kWydzZXQnICsgKG1vbS5faXNVVEMgPyAnVVRDJyA6ICcnKSArIHVuaXRdKHZhbHVlLCBtb20ubW9udGgoKSwgZGF5c0luTW9udGgodmFsdWUsIG1vbS5tb250aCgpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBtb20uX2RbJ3NldCcgKyAobW9tLl9pc1VUQyA/ICdVVEMnIDogJycpICsgdW5pdF0odmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gc3RyaW5nR2V0ICh1bml0cykge1xuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24odGhpc1t1bml0c10pKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpc1t1bml0c10oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIHN0cmluZ1NldCAodW5pdHMsIHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdW5pdHMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZU9iamVjdFVuaXRzKHVuaXRzKTtcbiAgICAgICAgICAgIHZhciBwcmlvcml0aXplZCA9IGdldFByaW9yaXRpemVkVW5pdHModW5pdHMpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmlvcml0aXplZC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXNbcHJpb3JpdGl6ZWRbaV0udW5pdF0odW5pdHNbcHJpb3JpdGl6ZWRbaV0udW5pdF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbih0aGlzW3VuaXRzXSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1t1bml0c10odmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vZChuLCB4KSB7XG4gICAgICAgIHJldHVybiAoKG4gJSB4KSArIHgpICUgeDtcbiAgICB9XG5cbiAgICB2YXIgaW5kZXhPZjtcblxuICAgIGlmIChBcnJheS5wcm90b3R5cGUuaW5kZXhPZikge1xuICAgICAgICBpbmRleE9mID0gQXJyYXkucHJvdG90eXBlLmluZGV4T2Y7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaW5kZXhPZiA9IGZ1bmN0aW9uIChvKSB7XG4gICAgICAgICAgICAvLyBJIGtub3dcbiAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpc1tpXSA9PT0gbykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGF5c0luTW9udGgoeWVhciwgbW9udGgpIHtcbiAgICAgICAgaWYgKGlzTmFOKHllYXIpIHx8IGlzTmFOKG1vbnRoKSkge1xuICAgICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbW9kTW9udGggPSBtb2QobW9udGgsIDEyKTtcbiAgICAgICAgeWVhciArPSAobW9udGggLSBtb2RNb250aCkgLyAxMjtcbiAgICAgICAgcmV0dXJuIG1vZE1vbnRoID09PSAxID8gKGlzTGVhcFllYXIoeWVhcikgPyAyOSA6IDI4KSA6ICgzMSAtIG1vZE1vbnRoICUgNyAlIDIpO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdNJywgWydNTScsIDJdLCAnTW8nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vbnRoKCkgKyAxO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ01NTScsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm1vbnRoc1Nob3J0KHRoaXMsIGZvcm1hdCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignTU1NTScsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm1vbnRocyh0aGlzLCBmb3JtYXQpO1xuICAgIH0pO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdtb250aCcsICdNJyk7XG5cbiAgICAvLyBQUklPUklUWVxuXG4gICAgYWRkVW5pdFByaW9yaXR5KCdtb250aCcsIDgpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignTScsICAgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignTU0nLCAgIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdNTU0nLCAgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5tb250aHNTaG9ydFJlZ2V4KGlzU3RyaWN0KTtcbiAgICB9KTtcbiAgICBhZGRSZWdleFRva2VuKCdNTU1NJywgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5tb250aHNSZWdleChpc1N0cmljdCk7XG4gICAgfSk7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsnTScsICdNTSddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W01PTlRIXSA9IHRvSW50KGlucHV0KSAtIDE7XG4gICAgfSk7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsnTU1NJywgJ01NTU0nXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnLCB0b2tlbikge1xuICAgICAgICB2YXIgbW9udGggPSBjb25maWcuX2xvY2FsZS5tb250aHNQYXJzZShpbnB1dCwgdG9rZW4sIGNvbmZpZy5fc3RyaWN0KTtcbiAgICAgICAgLy8gaWYgd2UgZGlkbid0IGZpbmQgYSBtb250aCBuYW1lLCBtYXJrIHRoZSBkYXRlIGFzIGludmFsaWQuXG4gICAgICAgIGlmIChtb250aCAhPSBudWxsKSB7XG4gICAgICAgICAgICBhcnJheVtNT05USF0gPSBtb250aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmludmFsaWRNb250aCA9IGlucHV0O1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBMT0NBTEVTXG5cbiAgICB2YXIgTU9OVEhTX0lOX0ZPUk1BVCA9IC9EW29EXT8oXFxbW15cXFtcXF1dKlxcXXxcXHMpK01NTU0/LztcbiAgICB2YXIgZGVmYXVsdExvY2FsZU1vbnRocyA9ICdKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyJy5zcGxpdCgnXycpO1xuICAgIGZ1bmN0aW9uIGxvY2FsZU1vbnRocyAobSwgZm9ybWF0KSB7XG4gICAgICAgIGlmICghbSkge1xuICAgICAgICAgICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fbW9udGhzKSA/IHRoaXMuX21vbnRocyA6XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9udGhzWydzdGFuZGFsb25lJ107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fbW9udGhzKSA/IHRoaXMuX21vbnRoc1ttLm1vbnRoKCldIDpcbiAgICAgICAgICAgIHRoaXMuX21vbnRoc1sodGhpcy5fbW9udGhzLmlzRm9ybWF0IHx8IE1PTlRIU19JTl9GT1JNQVQpLnRlc3QoZm9ybWF0KSA/ICdmb3JtYXQnIDogJ3N0YW5kYWxvbmUnXVttLm1vbnRoKCldO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TG9jYWxlTW9udGhzU2hvcnQgPSAnSmFuX0ZlYl9NYXJfQXByX01heV9KdW5fSnVsX0F1Z19TZXBfT2N0X05vdl9EZWMnLnNwbGl0KCdfJyk7XG4gICAgZnVuY3Rpb24gbG9jYWxlTW9udGhzU2hvcnQgKG0sIGZvcm1hdCkge1xuICAgICAgICBpZiAoIW0pIHtcbiAgICAgICAgICAgIHJldHVybiBpc0FycmF5KHRoaXMuX21vbnRoc1Nob3J0KSA/IHRoaXMuX21vbnRoc1Nob3J0IDpcbiAgICAgICAgICAgICAgICB0aGlzLl9tb250aHNTaG9ydFsnc3RhbmRhbG9uZSddO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc0FycmF5KHRoaXMuX21vbnRoc1Nob3J0KSA/IHRoaXMuX21vbnRoc1Nob3J0W20ubW9udGgoKV0gOlxuICAgICAgICAgICAgdGhpcy5fbW9udGhzU2hvcnRbTU9OVEhTX0lOX0ZPUk1BVC50ZXN0KGZvcm1hdCkgPyAnZm9ybWF0JyA6ICdzdGFuZGFsb25lJ11bbS5tb250aCgpXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVTdHJpY3RQYXJzZShtb250aE5hbWUsIGZvcm1hdCwgc3RyaWN0KSB7XG4gICAgICAgIHZhciBpLCBpaSwgbW9tLCBsbGMgPSBtb250aE5hbWUudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKCF0aGlzLl9tb250aHNQYXJzZSkge1xuICAgICAgICAgICAgLy8gdGhpcyBpcyBub3QgdXNlZFxuICAgICAgICAgICAgdGhpcy5fbW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IDEyOyArK2kpIHtcbiAgICAgICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIGldKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlW2ldID0gdGhpcy5tb250aHNTaG9ydChtb20sICcnKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZVtpXSA9IHRoaXMubW9udGhzKG1vbSwgJycpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RyaWN0KSB7XG4gICAgICAgICAgICBpZiAoZm9ybWF0ID09PSAnTU1NJykge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0TW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbG9uZ01vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoZm9ybWF0ID09PSAnTU1NJykge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0TW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX2xvbmdNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9sb25nTW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0TW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsZU1vbnRoc1BhcnNlIChtb250aE5hbWUsIGZvcm1hdCwgc3RyaWN0KSB7XG4gICAgICAgIHZhciBpLCBtb20sIHJlZ2V4O1xuXG4gICAgICAgIGlmICh0aGlzLl9tb250aHNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gaGFuZGxlU3RyaWN0UGFyc2UuY2FsbCh0aGlzLCBtb250aE5hbWUsIGZvcm1hdCwgc3RyaWN0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5fbW9udGhzUGFyc2UpIHtcbiAgICAgICAgICAgIHRoaXMuX21vbnRoc1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9sb25nTW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX3Nob3J0TW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRPRE86IGFkZCBzb3J0aW5nXG4gICAgICAgIC8vIFNvcnRpbmcgbWFrZXMgc3VyZSBpZiBvbmUgbW9udGggKG9yIGFiYnIpIGlzIGEgcHJlZml4IG9mIGFub3RoZXJcbiAgICAgICAgLy8gc2VlIHNvcnRpbmcgaW4gY29tcHV0ZU1vbnRoc1BhcnNlXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG4gICAgICAgICAgICAvLyBtYWtlIHRoZSByZWdleCBpZiB3ZSBkb24ndCBoYXZlIGl0IGFscmVhZHlcbiAgICAgICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgaV0pO1xuICAgICAgICAgICAgaWYgKHN0cmljdCAmJiAhdGhpcy5fbG9uZ01vbnRoc1BhcnNlW2ldKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlW2ldID0gbmV3IFJlZ0V4cCgnXicgKyB0aGlzLm1vbnRocyhtb20sICcnKS5yZXBsYWNlKCcuJywgJycpICsgJyQnLCAnaScpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3J0TW9udGhzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKCdeJyArIHRoaXMubW9udGhzU2hvcnQobW9tLCAnJykucmVwbGFjZSgnLicsICcnKSArICckJywgJ2knKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghc3RyaWN0ICYmICF0aGlzLl9tb250aHNQYXJzZVtpXSkge1xuICAgICAgICAgICAgICAgIHJlZ2V4ID0gJ14nICsgdGhpcy5tb250aHMobW9tLCAnJykgKyAnfF4nICsgdGhpcy5tb250aHNTaG9ydChtb20sICcnKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9tb250aHNQYXJzZVtpXSA9IG5ldyBSZWdFeHAocmVnZXgucmVwbGFjZSgnLicsICcnKSwgJ2knKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRlc3QgdGhlIHJlZ2V4XG4gICAgICAgICAgICBpZiAoc3RyaWN0ICYmIGZvcm1hdCA9PT0gJ01NTU0nICYmIHRoaXMuX2xvbmdNb250aHNQYXJzZVtpXS50ZXN0KG1vbnRoTmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RyaWN0ICYmIGZvcm1hdCA9PT0gJ01NTScgJiYgdGhpcy5fc2hvcnRNb250aHNQYXJzZVtpXS50ZXN0KG1vbnRoTmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXN0cmljdCAmJiB0aGlzLl9tb250aHNQYXJzZVtpXS50ZXN0KG1vbnRoTmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIHNldE1vbnRoIChtb20sIHZhbHVlKSB7XG4gICAgICAgIHZhciBkYXlPZk1vbnRoO1xuXG4gICAgICAgIGlmICghbW9tLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgLy8gTm8gb3BcbiAgICAgICAgICAgIHJldHVybiBtb207XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaWYgKC9eXFxkKyQvLnRlc3QodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0b0ludCh2YWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gbW9tLmxvY2FsZURhdGEoKS5tb250aHNQYXJzZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgLy8gVE9ETzogQW5vdGhlciBzaWxlbnQgZmFpbHVyZT9cbiAgICAgICAgICAgICAgICBpZiAoIWlzTnVtYmVyKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbW9tO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGRheU9mTW9udGggPSBNYXRoLm1pbihtb20uZGF0ZSgpLCBkYXlzSW5Nb250aChtb20ueWVhcigpLCB2YWx1ZSkpO1xuICAgICAgICBtb20uX2RbJ3NldCcgKyAobW9tLl9pc1VUQyA/ICdVVEMnIDogJycpICsgJ01vbnRoJ10odmFsdWUsIGRheU9mTW9udGgpO1xuICAgICAgICByZXR1cm4gbW9tO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldE1vbnRoICh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgc2V0TW9udGgodGhpcywgdmFsdWUpO1xuICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIHRydWUpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0KHRoaXMsICdNb250aCcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0RGF5c0luTW9udGggKCkge1xuICAgICAgICByZXR1cm4gZGF5c0luTW9udGgodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSk7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRNb250aHNTaG9ydFJlZ2V4ID0gbWF0Y2hXb3JkO1xuICAgIGZ1bmN0aW9uIG1vbnRoc1Nob3J0UmVnZXggKGlzU3RyaWN0KSB7XG4gICAgICAgIGlmICh0aGlzLl9tb250aHNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19tb250aHNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgY29tcHV0ZU1vbnRoc1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU2hvcnRTdHJpY3RSZWdleDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1Nob3J0UmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19tb250aHNTaG9ydFJlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9tb250aHNTaG9ydFJlZ2V4ID0gZGVmYXVsdE1vbnRoc1Nob3J0UmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU2hvcnRTdHJpY3RSZWdleCAmJiBpc1N0cmljdCA/XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9udGhzU2hvcnRTdHJpY3RSZWdleCA6IHRoaXMuX21vbnRoc1Nob3J0UmVnZXg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdE1vbnRoc1JlZ2V4ID0gbWF0Y2hXb3JkO1xuICAgIGZ1bmN0aW9uIG1vbnRoc1JlZ2V4IChpc1N0cmljdCkge1xuICAgICAgICBpZiAodGhpcy5fbW9udGhzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfbW9udGhzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIGNvbXB1dGVNb250aHNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1N0cmljdFJlZ2V4O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzUmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19tb250aHNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9udGhzUmVnZXggPSBkZWZhdWx0TW9udGhzUmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU3RyaWN0UmVnZXggJiYgaXNTdHJpY3QgP1xuICAgICAgICAgICAgICAgIHRoaXMuX21vbnRoc1N0cmljdFJlZ2V4IDogdGhpcy5fbW9udGhzUmVnZXg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb21wdXRlTW9udGhzUGFyc2UgKCkge1xuICAgICAgICBmdW5jdGlvbiBjbXBMZW5SZXYoYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuIGIubGVuZ3RoIC0gYS5sZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2hvcnRQaWVjZXMgPSBbXSwgbG9uZ1BpZWNlcyA9IFtdLCBtaXhlZFBpZWNlcyA9IFtdLFxuICAgICAgICAgICAgaSwgbW9tO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICAgICAgLy8gbWFrZSB0aGUgcmVnZXggaWYgd2UgZG9uJ3QgaGF2ZSBpdCBhbHJlYWR5XG4gICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIGldKTtcbiAgICAgICAgICAgIHNob3J0UGllY2VzLnB1c2godGhpcy5tb250aHNTaG9ydChtb20sICcnKSk7XG4gICAgICAgICAgICBsb25nUGllY2VzLnB1c2godGhpcy5tb250aHMobW9tLCAnJykpO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXMucHVzaCh0aGlzLm1vbnRocyhtb20sICcnKSk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKHRoaXMubW9udGhzU2hvcnQobW9tLCAnJykpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNvcnRpbmcgbWFrZXMgc3VyZSBpZiBvbmUgbW9udGggKG9yIGFiYnIpIGlzIGEgcHJlZml4IG9mIGFub3RoZXIgaXRcbiAgICAgICAgLy8gd2lsbCBtYXRjaCB0aGUgbG9uZ2VyIHBpZWNlLlxuICAgICAgICBzaG9ydFBpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgICAgIGxvbmdQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgICAgICBtaXhlZFBpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG4gICAgICAgICAgICBzaG9ydFBpZWNlc1tpXSA9IHJlZ2V4RXNjYXBlKHNob3J0UGllY2VzW2ldKTtcbiAgICAgICAgICAgIGxvbmdQaWVjZXNbaV0gPSByZWdleEVzY2FwZShsb25nUGllY2VzW2ldKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMjQ7IGkrKykge1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXNbaV0gPSByZWdleEVzY2FwZShtaXhlZFBpZWNlc1tpXSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9tb250aHNSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIG1peGVkUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICAgICAgdGhpcy5fbW9udGhzU2hvcnRSZWdleCA9IHRoaXMuX21vbnRoc1JlZ2V4O1xuICAgICAgICB0aGlzLl9tb250aHNTdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIGxvbmdQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgICAgICB0aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgc2hvcnRQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZURhdGUgKHksIG0sIGQsIGgsIE0sIHMsIG1zKSB7XG4gICAgICAgIC8vIGNhbid0IGp1c3QgYXBwbHkoKSB0byBjcmVhdGUgYSBkYXRlOlxuICAgICAgICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3EvMTgxMzQ4XG4gICAgICAgIHZhciBkYXRlO1xuICAgICAgICAvLyB0aGUgZGF0ZSBjb25zdHJ1Y3RvciByZW1hcHMgeWVhcnMgMC05OSB0byAxOTAwLTE5OTlcbiAgICAgICAgaWYgKHkgPCAxMDAgJiYgeSA+PSAwKSB7XG4gICAgICAgICAgICAvLyBwcmVzZXJ2ZSBsZWFwIHllYXJzIHVzaW5nIGEgZnVsbCA0MDAgeWVhciBjeWNsZSwgdGhlbiByZXNldFxuICAgICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKHkgKyA0MDAsIG0sIGQsIGgsIE0sIHMsIG1zKTtcbiAgICAgICAgICAgIGlmIChpc0Zpbml0ZShkYXRlLmdldEZ1bGxZZWFyKCkpKSB7XG4gICAgICAgICAgICAgICAgZGF0ZS5zZXRGdWxsWWVhcih5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRhdGUgPSBuZXcgRGF0ZSh5LCBtLCBkLCBoLCBNLCBzLCBtcyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVVVENEYXRlICh5KSB7XG4gICAgICAgIHZhciBkYXRlO1xuICAgICAgICAvLyB0aGUgRGF0ZS5VVEMgZnVuY3Rpb24gcmVtYXBzIHllYXJzIDAtOTkgdG8gMTkwMC0xOTk5XG4gICAgICAgIGlmICh5IDwgMTAwICYmIHkgPj0gMCkge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgICAgICAgICAgLy8gcHJlc2VydmUgbGVhcCB5ZWFycyB1c2luZyBhIGZ1bGwgNDAwIHllYXIgY3ljbGUsIHRoZW4gcmVzZXRcbiAgICAgICAgICAgIGFyZ3NbMF0gPSB5ICsgNDAwO1xuICAgICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKERhdGUuVVRDLmFwcGx5KG51bGwsIGFyZ3MpKTtcbiAgICAgICAgICAgIGlmIChpc0Zpbml0ZShkYXRlLmdldFVUQ0Z1bGxZZWFyKCkpKSB7XG4gICAgICAgICAgICAgICAgZGF0ZS5zZXRVVENGdWxsWWVhcih5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQy5hcHBseShudWxsLCBhcmd1bWVudHMpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkYXRlO1xuICAgIH1cblxuICAgIC8vIHN0YXJ0LW9mLWZpcnN0LXdlZWsgLSBzdGFydC1vZi15ZWFyXG4gICAgZnVuY3Rpb24gZmlyc3RXZWVrT2Zmc2V0KHllYXIsIGRvdywgZG95KSB7XG4gICAgICAgIHZhciAvLyBmaXJzdC13ZWVrIGRheSAtLSB3aGljaCBqYW51YXJ5IGlzIGFsd2F5cyBpbiB0aGUgZmlyc3Qgd2VlayAoNCBmb3IgaXNvLCAxIGZvciBvdGhlcilcbiAgICAgICAgICAgIGZ3ZCA9IDcgKyBkb3cgLSBkb3ksXG4gICAgICAgICAgICAvLyBmaXJzdC13ZWVrIGRheSBsb2NhbCB3ZWVrZGF5IC0tIHdoaWNoIGxvY2FsIHdlZWtkYXkgaXMgZndkXG4gICAgICAgICAgICBmd2RsdyA9ICg3ICsgY3JlYXRlVVRDRGF0ZSh5ZWFyLCAwLCBmd2QpLmdldFVUQ0RheSgpIC0gZG93KSAlIDc7XG5cbiAgICAgICAgcmV0dXJuIC1md2RsdyArIGZ3ZCAtIDE7XG4gICAgfVxuXG4gICAgLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPX3dlZWtfZGF0ZSNDYWxjdWxhdGluZ19hX2RhdGVfZ2l2ZW5fdGhlX3llYXIuMkNfd2Vla19udW1iZXJfYW5kX3dlZWtkYXlcbiAgICBmdW5jdGlvbiBkYXlPZlllYXJGcm9tV2Vla3MoeWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpIHtcbiAgICAgICAgdmFyIGxvY2FsV2Vla2RheSA9ICg3ICsgd2Vla2RheSAtIGRvdykgJSA3LFxuICAgICAgICAgICAgd2Vla09mZnNldCA9IGZpcnN0V2Vla09mZnNldCh5ZWFyLCBkb3csIGRveSksXG4gICAgICAgICAgICBkYXlPZlllYXIgPSAxICsgNyAqICh3ZWVrIC0gMSkgKyBsb2NhbFdlZWtkYXkgKyB3ZWVrT2Zmc2V0LFxuICAgICAgICAgICAgcmVzWWVhciwgcmVzRGF5T2ZZZWFyO1xuXG4gICAgICAgIGlmIChkYXlPZlllYXIgPD0gMCkge1xuICAgICAgICAgICAgcmVzWWVhciA9IHllYXIgLSAxO1xuICAgICAgICAgICAgcmVzRGF5T2ZZZWFyID0gZGF5c0luWWVhcihyZXNZZWFyKSArIGRheU9mWWVhcjtcbiAgICAgICAgfSBlbHNlIGlmIChkYXlPZlllYXIgPiBkYXlzSW5ZZWFyKHllYXIpKSB7XG4gICAgICAgICAgICByZXNZZWFyID0geWVhciArIDE7XG4gICAgICAgICAgICByZXNEYXlPZlllYXIgPSBkYXlPZlllYXIgLSBkYXlzSW5ZZWFyKHllYXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzWWVhciA9IHllYXI7XG4gICAgICAgICAgICByZXNEYXlPZlllYXIgPSBkYXlPZlllYXI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeWVhcjogcmVzWWVhcixcbiAgICAgICAgICAgIGRheU9mWWVhcjogcmVzRGF5T2ZZZWFyXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd2Vla09mWWVhcihtb20sIGRvdywgZG95KSB7XG4gICAgICAgIHZhciB3ZWVrT2Zmc2V0ID0gZmlyc3RXZWVrT2Zmc2V0KG1vbS55ZWFyKCksIGRvdywgZG95KSxcbiAgICAgICAgICAgIHdlZWsgPSBNYXRoLmZsb29yKChtb20uZGF5T2ZZZWFyKCkgLSB3ZWVrT2Zmc2V0IC0gMSkgLyA3KSArIDEsXG4gICAgICAgICAgICByZXNXZWVrLCByZXNZZWFyO1xuXG4gICAgICAgIGlmICh3ZWVrIDwgMSkge1xuICAgICAgICAgICAgcmVzWWVhciA9IG1vbS55ZWFyKCkgLSAxO1xuICAgICAgICAgICAgcmVzV2VlayA9IHdlZWsgKyB3ZWVrc0luWWVhcihyZXNZZWFyLCBkb3csIGRveSk7XG4gICAgICAgIH0gZWxzZSBpZiAod2VlayA+IHdlZWtzSW5ZZWFyKG1vbS55ZWFyKCksIGRvdywgZG95KSkge1xuICAgICAgICAgICAgcmVzV2VlayA9IHdlZWsgLSB3ZWVrc0luWWVhcihtb20ueWVhcigpLCBkb3csIGRveSk7XG4gICAgICAgICAgICByZXNZZWFyID0gbW9tLnllYXIoKSArIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNZZWFyID0gbW9tLnllYXIoKTtcbiAgICAgICAgICAgIHJlc1dlZWsgPSB3ZWVrO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHdlZWs6IHJlc1dlZWssXG4gICAgICAgICAgICB5ZWFyOiByZXNZZWFyXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd2Vla3NJblllYXIoeWVhciwgZG93LCBkb3kpIHtcbiAgICAgICAgdmFyIHdlZWtPZmZzZXQgPSBmaXJzdFdlZWtPZmZzZXQoeWVhciwgZG93LCBkb3kpLFxuICAgICAgICAgICAgd2Vla09mZnNldE5leHQgPSBmaXJzdFdlZWtPZmZzZXQoeWVhciArIDEsIGRvdywgZG95KTtcbiAgICAgICAgcmV0dXJuIChkYXlzSW5ZZWFyKHllYXIpIC0gd2Vla09mZnNldCArIHdlZWtPZmZzZXROZXh0KSAvIDc7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ3cnLCBbJ3d3JywgMl0sICd3bycsICd3ZWVrJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ1cnLCBbJ1dXJywgMl0sICdXbycsICdpc29XZWVrJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ3dlZWsnLCAndycpO1xuICAgIGFkZFVuaXRBbGlhcygnaXNvV2VlaycsICdXJyk7XG5cbiAgICAvLyBQUklPUklUSUVTXG5cbiAgICBhZGRVbml0UHJpb3JpdHkoJ3dlZWsnLCA1KTtcbiAgICBhZGRVbml0UHJpb3JpdHkoJ2lzb1dlZWsnLCA1KTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ3cnLCAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCd3dycsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdXJywgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignV1cnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG5cbiAgICBhZGRXZWVrUGFyc2VUb2tlbihbJ3cnLCAnd3cnLCAnVycsICdXVyddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgd2Vla1t0b2tlbi5zdWJzdHIoMCwgMSldID0gdG9JbnQoaW5wdXQpO1xuICAgIH0pO1xuXG4gICAgLy8gSEVMUEVSU1xuXG4gICAgLy8gTE9DQUxFU1xuXG4gICAgZnVuY3Rpb24gbG9jYWxlV2VlayAobW9tKSB7XG4gICAgICAgIHJldHVybiB3ZWVrT2ZZZWFyKG1vbSwgdGhpcy5fd2Vlay5kb3csIHRoaXMuX3dlZWsuZG95KS53ZWVrO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TG9jYWxlV2VlayA9IHtcbiAgICAgICAgZG93IDogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDYgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDZ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gbG9jYWxlRmlyc3REYXlPZldlZWsgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fd2Vlay5kb3c7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxlRmlyc3REYXlPZlllYXIgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fd2Vlay5kb3k7XG4gICAgfVxuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0U2V0V2VlayAoaW5wdXQpIHtcbiAgICAgICAgdmFyIHdlZWsgPSB0aGlzLmxvY2FsZURhdGEoKS53ZWVrKHRoaXMpO1xuICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IHdlZWsgOiB0aGlzLmFkZCgoaW5wdXQgLSB3ZWVrKSAqIDcsICdkJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0SVNPV2VlayAoaW5wdXQpIHtcbiAgICAgICAgdmFyIHdlZWsgPSB3ZWVrT2ZZZWFyKHRoaXMsIDEsIDQpLndlZWs7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gd2VlayA6IHRoaXMuYWRkKChpbnB1dCAtIHdlZWspICogNywgJ2QnKTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignZCcsIDAsICdkbycsICdkYXknKTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdkZCcsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLndlZWtkYXlzTWluKHRoaXMsIGZvcm1hdCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignZGRkJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkud2Vla2RheXNTaG9ydCh0aGlzLCBmb3JtYXQpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2RkZGQnLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS53ZWVrZGF5cyh0aGlzLCBmb3JtYXQpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2UnLCAwLCAwLCAnd2Vla2RheScpO1xuICAgIGFkZEZvcm1hdFRva2VuKCdFJywgMCwgMCwgJ2lzb1dlZWtkYXknKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnZGF5JywgJ2QnKTtcbiAgICBhZGRVbml0QWxpYXMoJ3dlZWtkYXknLCAnZScpO1xuICAgIGFkZFVuaXRBbGlhcygnaXNvV2Vla2RheScsICdFJyk7XG5cbiAgICAvLyBQUklPUklUWVxuICAgIGFkZFVuaXRQcmlvcml0eSgnZGF5JywgMTEpO1xuICAgIGFkZFVuaXRQcmlvcml0eSgnd2Vla2RheScsIDExKTtcbiAgICBhZGRVbml0UHJpb3JpdHkoJ2lzb1dlZWtkYXknLCAxMSk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdkJywgICAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdlJywgICAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdFJywgICAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdkZCcsICAgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS53ZWVrZGF5c01pblJlZ2V4KGlzU3RyaWN0KTtcbiAgICB9KTtcbiAgICBhZGRSZWdleFRva2VuKCdkZGQnLCAgIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUud2Vla2RheXNTaG9ydFJlZ2V4KGlzU3RyaWN0KTtcbiAgICB9KTtcbiAgICBhZGRSZWdleFRva2VuKCdkZGRkJywgICBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLndlZWtkYXlzUmVnZXgoaXNTdHJpY3QpO1xuICAgIH0pO1xuXG4gICAgYWRkV2Vla1BhcnNlVG9rZW4oWydkZCcsICdkZGQnLCAnZGRkZCddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgdmFyIHdlZWtkYXkgPSBjb25maWcuX2xvY2FsZS53ZWVrZGF5c1BhcnNlKGlucHV0LCB0b2tlbiwgY29uZmlnLl9zdHJpY3QpO1xuICAgICAgICAvLyBpZiB3ZSBkaWRuJ3QgZ2V0IGEgd2Vla2RheSBuYW1lLCBtYXJrIHRoZSBkYXRlIGFzIGludmFsaWRcbiAgICAgICAgaWYgKHdlZWtkYXkgIT0gbnVsbCkge1xuICAgICAgICAgICAgd2Vlay5kID0gd2Vla2RheTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmludmFsaWRXZWVrZGF5ID0gaW5wdXQ7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGFkZFdlZWtQYXJzZVRva2VuKFsnZCcsICdlJywgJ0UnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHdlZWtbdG9rZW5dID0gdG9JbnQoaW5wdXQpO1xuICAgIH0pO1xuXG4gICAgLy8gSEVMUEVSU1xuXG4gICAgZnVuY3Rpb24gcGFyc2VXZWVrZGF5KGlucHV0LCBsb2NhbGUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaXNOYU4oaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQoaW5wdXQsIDEwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlucHV0ID0gbG9jYWxlLndlZWtkYXlzUGFyc2UoaW5wdXQpO1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VJc29XZWVrZGF5KGlucHV0LCBsb2NhbGUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbGUud2Vla2RheXNQYXJzZShpbnB1dCkgJSA3IHx8IDc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzTmFOKGlucHV0KSA/IG51bGwgOiBpbnB1dDtcbiAgICB9XG5cbiAgICAvLyBMT0NBTEVTXG4gICAgZnVuY3Rpb24gc2hpZnRXZWVrZGF5cyAod3MsIG4pIHtcbiAgICAgICAgcmV0dXJuIHdzLnNsaWNlKG4sIDcpLmNvbmNhdCh3cy5zbGljZSgwLCBuKSk7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRMb2NhbGVXZWVrZGF5cyA9ICdTdW5kYXlfTW9uZGF5X1R1ZXNkYXlfV2VkbmVzZGF5X1RodXJzZGF5X0ZyaWRheV9TYXR1cmRheScuc3BsaXQoJ18nKTtcbiAgICBmdW5jdGlvbiBsb2NhbGVXZWVrZGF5cyAobSwgZm9ybWF0KSB7XG4gICAgICAgIHZhciB3ZWVrZGF5cyA9IGlzQXJyYXkodGhpcy5fd2Vla2RheXMpID8gdGhpcy5fd2Vla2RheXMgOlxuICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNbKG0gJiYgbSAhPT0gdHJ1ZSAmJiB0aGlzLl93ZWVrZGF5cy5pc0Zvcm1hdC50ZXN0KGZvcm1hdCkpID8gJ2Zvcm1hdCcgOiAnc3RhbmRhbG9uZSddO1xuICAgICAgICByZXR1cm4gKG0gPT09IHRydWUpID8gc2hpZnRXZWVrZGF5cyh3ZWVrZGF5cywgdGhpcy5fd2Vlay5kb3cpXG4gICAgICAgICAgICA6IChtKSA/IHdlZWtkYXlzW20uZGF5KCldIDogd2Vla2RheXM7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRMb2NhbGVXZWVrZGF5c1Nob3J0ID0gJ1N1bl9Nb25fVHVlX1dlZF9UaHVfRnJpX1NhdCcuc3BsaXQoJ18nKTtcbiAgICBmdW5jdGlvbiBsb2NhbGVXZWVrZGF5c1Nob3J0IChtKSB7XG4gICAgICAgIHJldHVybiAobSA9PT0gdHJ1ZSkgPyBzaGlmdFdlZWtkYXlzKHRoaXMuX3dlZWtkYXlzU2hvcnQsIHRoaXMuX3dlZWsuZG93KVxuICAgICAgICAgICAgOiAobSkgPyB0aGlzLl93ZWVrZGF5c1Nob3J0W20uZGF5KCldIDogdGhpcy5fd2Vla2RheXNTaG9ydDtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdExvY2FsZVdlZWtkYXlzTWluID0gJ1N1X01vX1R1X1dlX1RoX0ZyX1NhJy5zcGxpdCgnXycpO1xuICAgIGZ1bmN0aW9uIGxvY2FsZVdlZWtkYXlzTWluIChtKSB7XG4gICAgICAgIHJldHVybiAobSA9PT0gdHJ1ZSkgPyBzaGlmdFdlZWtkYXlzKHRoaXMuX3dlZWtkYXlzTWluLCB0aGlzLl93ZWVrLmRvdylcbiAgICAgICAgICAgIDogKG0pID8gdGhpcy5fd2Vla2RheXNNaW5bbS5kYXkoKV0gOiB0aGlzLl93ZWVrZGF5c01pbjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVTdHJpY3RQYXJzZSQxKHdlZWtkYXlOYW1lLCBmb3JtYXQsIHN0cmljdCkge1xuICAgICAgICB2YXIgaSwgaWksIG1vbSwgbGxjID0gd2Vla2RheU5hbWUudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKCF0aGlzLl93ZWVrZGF5c1BhcnNlKSB7XG4gICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2UgPSBbXTtcblxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IDc7ICsraSkge1xuICAgICAgICAgICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgMV0pLmRheShpKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlW2ldID0gdGhpcy53ZWVrZGF5c01pbihtb20sICcnKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZVtpXSA9IHRoaXMud2Vla2RheXNTaG9ydChtb20sICcnKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUGFyc2VbaV0gPSB0aGlzLndlZWtkYXlzKG1vbSwgJycpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RyaWN0KSB7XG4gICAgICAgICAgICBpZiAoZm9ybWF0ID09PSAnZGRkZCcpIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl93ZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZvcm1hdCA9PT0gJ2RkZCcpIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ2RkZGQnKSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fd2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9taW5XZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZvcm1hdCA9PT0gJ2RkZCcpIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3dlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX21pbldlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fd2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVXZWVrZGF5c1BhcnNlICh3ZWVrZGF5TmFtZSwgZm9ybWF0LCBzdHJpY3QpIHtcbiAgICAgICAgdmFyIGksIG1vbSwgcmVnZXg7XG5cbiAgICAgICAgaWYgKHRoaXMuX3dlZWtkYXlzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZVN0cmljdFBhcnNlJDEuY2FsbCh0aGlzLCB3ZWVrZGF5TmFtZSwgZm9ybWF0LCBzdHJpY3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLl93ZWVrZGF5c1BhcnNlKSB7XG4gICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX2Z1bGxXZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgICAgICAvLyBtYWtlIHRoZSByZWdleCBpZiB3ZSBkb24ndCBoYXZlIGl0IGFscmVhZHlcblxuICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCAxXSkuZGF5KGkpO1xuICAgICAgICAgICAgaWYgKHN0cmljdCAmJiAhdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9mdWxsV2Vla2RheXNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoJ14nICsgdGhpcy53ZWVrZGF5cyhtb20sICcnKS5yZXBsYWNlKCcuJywgJ1xcXFwuPycpICsgJyQnLCAnaScpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoJ14nICsgdGhpcy53ZWVrZGF5c1Nob3J0KG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnXFxcXC4/JykgKyAnJCcsICdpJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWluV2Vla2RheXNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoJ14nICsgdGhpcy53ZWVrZGF5c01pbihtb20sICcnKS5yZXBsYWNlKCcuJywgJ1xcXFwuPycpICsgJyQnLCAnaScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLl93ZWVrZGF5c1BhcnNlW2ldKSB7XG4gICAgICAgICAgICAgICAgcmVnZXggPSAnXicgKyB0aGlzLndlZWtkYXlzKG1vbSwgJycpICsgJ3xeJyArIHRoaXMud2Vla2RheXNTaG9ydChtb20sICcnKSArICd8XicgKyB0aGlzLndlZWtkYXlzTWluKG1vbSwgJycpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKHJlZ2V4LnJlcGxhY2UoJy4nLCAnJyksICdpJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0ZXN0IHRoZSByZWdleFxuICAgICAgICAgICAgaWYgKHN0cmljdCAmJiBmb3JtYXQgPT09ICdkZGRkJyAmJiB0aGlzLl9mdWxsV2Vla2RheXNQYXJzZVtpXS50ZXN0KHdlZWtkYXlOYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzdHJpY3QgJiYgZm9ybWF0ID09PSAnZGRkJyAmJiB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2VbaV0udGVzdCh3ZWVrZGF5TmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RyaWN0ICYmIGZvcm1hdCA9PT0gJ2RkJyAmJiB0aGlzLl9taW5XZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFzdHJpY3QgJiYgdGhpcy5fd2Vla2RheXNQYXJzZVtpXS50ZXN0KHdlZWtkYXlOYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0U2V0RGF5T2ZXZWVrIChpbnB1dCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCA/IHRoaXMgOiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRheSA9IHRoaXMuX2lzVVRDID8gdGhpcy5fZC5nZXRVVENEYXkoKSA6IHRoaXMuX2QuZ2V0RGF5KCk7XG4gICAgICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgICAgICBpbnB1dCA9IHBhcnNlV2Vla2RheShpbnB1dCwgdGhpcy5sb2NhbGVEYXRhKCkpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWRkKGlucHV0IC0gZGF5LCAnZCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGRheTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldExvY2FsZURheU9mV2VlayAoaW5wdXQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOO1xuICAgICAgICB9XG4gICAgICAgIHZhciB3ZWVrZGF5ID0gKHRoaXMuZGF5KCkgKyA3IC0gdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWsuZG93KSAlIDc7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gd2Vla2RheSA6IHRoaXMuYWRkKGlucHV0IC0gd2Vla2RheSwgJ2QnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRJU09EYXlPZldlZWsgKGlucHV0KSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCAhPSBudWxsID8gdGhpcyA6IE5hTjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGJlaGF2ZXMgdGhlIHNhbWUgYXMgbW9tZW50I2RheSBleGNlcHRcbiAgICAgICAgLy8gYXMgYSBnZXR0ZXIsIHJldHVybnMgNyBpbnN0ZWFkIG9mIDAgKDEtNyByYW5nZSBpbnN0ZWFkIG9mIDAtNilcbiAgICAgICAgLy8gYXMgYSBzZXR0ZXIsIHN1bmRheSBzaG91bGQgYmVsb25nIHRvIHRoZSBwcmV2aW91cyB3ZWVrLlxuXG4gICAgICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgd2Vla2RheSA9IHBhcnNlSXNvV2Vla2RheShpbnB1dCwgdGhpcy5sb2NhbGVEYXRhKCkpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF5KHRoaXMuZGF5KCkgJSA3ID8gd2Vla2RheSA6IHdlZWtkYXkgLSA3KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRheSgpIHx8IDc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdFdlZWtkYXlzUmVnZXggPSBtYXRjaFdvcmQ7XG4gICAgZnVuY3Rpb24gd2Vla2RheXNSZWdleCAoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKHRoaXMuX3dlZWtkYXlzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgY29tcHV0ZVdlZWtkYXlzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1N0cmljdFJlZ2V4O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUmVnZXggPSBkZWZhdWx0V2Vla2RheXNSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1N0cmljdFJlZ2V4ICYmIGlzU3RyaWN0ID9cbiAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1N0cmljdFJlZ2V4IDogdGhpcy5fd2Vla2RheXNSZWdleDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBkZWZhdWx0V2Vla2RheXNTaG9ydFJlZ2V4ID0gbWF0Y2hXb3JkO1xuICAgIGZ1bmN0aW9uIHdlZWtkYXlzU2hvcnRSZWdleCAoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKHRoaXMuX3dlZWtkYXlzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgY29tcHV0ZVdlZWtkYXlzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1Nob3J0UmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1Nob3J0UmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzU2hvcnRSZWdleCA9IGRlZmF1bHRXZWVrZGF5c1Nob3J0UmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4ICYmIGlzU3RyaWN0ID9cbiAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXggOiB0aGlzLl93ZWVrZGF5c1Nob3J0UmVnZXg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdFdlZWtkYXlzTWluUmVnZXggPSBtYXRjaFdvcmQ7XG4gICAgZnVuY3Rpb24gd2Vla2RheXNNaW5SZWdleCAoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKHRoaXMuX3dlZWtkYXlzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgY29tcHV0ZVdlZWtkYXlzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c01pblN0cmljdFJlZ2V4O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNNaW5SZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzTWluUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzTWluUmVnZXggPSBkZWZhdWx0V2Vla2RheXNNaW5SZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c01pblN0cmljdFJlZ2V4ICYmIGlzU3RyaWN0ID9cbiAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c01pblN0cmljdFJlZ2V4IDogdGhpcy5fd2Vla2RheXNNaW5SZWdleDtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gY29tcHV0ZVdlZWtkYXlzUGFyc2UgKCkge1xuICAgICAgICBmdW5jdGlvbiBjbXBMZW5SZXYoYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuIGIubGVuZ3RoIC0gYS5sZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbWluUGllY2VzID0gW10sIHNob3J0UGllY2VzID0gW10sIGxvbmdQaWVjZXMgPSBbXSwgbWl4ZWRQaWVjZXMgPSBbXSxcbiAgICAgICAgICAgIGksIG1vbSwgbWlucCwgc2hvcnRwLCBsb25ncDtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDc7IGkrKykge1xuICAgICAgICAgICAgLy8gbWFrZSB0aGUgcmVnZXggaWYgd2UgZG9uJ3QgaGF2ZSBpdCBhbHJlYWR5XG4gICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIDFdKS5kYXkoaSk7XG4gICAgICAgICAgICBtaW5wID0gdGhpcy53ZWVrZGF5c01pbihtb20sICcnKTtcbiAgICAgICAgICAgIHNob3J0cCA9IHRoaXMud2Vla2RheXNTaG9ydChtb20sICcnKTtcbiAgICAgICAgICAgIGxvbmdwID0gdGhpcy53ZWVrZGF5cyhtb20sICcnKTtcbiAgICAgICAgICAgIG1pblBpZWNlcy5wdXNoKG1pbnApO1xuICAgICAgICAgICAgc2hvcnRQaWVjZXMucHVzaChzaG9ydHApO1xuICAgICAgICAgICAgbG9uZ1BpZWNlcy5wdXNoKGxvbmdwKTtcbiAgICAgICAgICAgIG1peGVkUGllY2VzLnB1c2gobWlucCk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKHNob3J0cCk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKGxvbmdwKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTb3J0aW5nIG1ha2VzIHN1cmUgaWYgb25lIHdlZWtkYXkgKG9yIGFiYnIpIGlzIGEgcHJlZml4IG9mIGFub3RoZXIgaXRcbiAgICAgICAgLy8gd2lsbCBtYXRjaCB0aGUgbG9uZ2VyIHBpZWNlLlxuICAgICAgICBtaW5QaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgICAgICBzaG9ydFBpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgICAgIGxvbmdQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgICAgICBtaXhlZFBpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgICAgIHNob3J0UGllY2VzW2ldID0gcmVnZXhFc2NhcGUoc2hvcnRQaWVjZXNbaV0pO1xuICAgICAgICAgICAgbG9uZ1BpZWNlc1tpXSA9IHJlZ2V4RXNjYXBlKGxvbmdQaWVjZXNbaV0pO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXNbaV0gPSByZWdleEVzY2FwZShtaXhlZFBpZWNlc1tpXSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl93ZWVrZGF5c1JlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgbWl4ZWRQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgICAgICB0aGlzLl93ZWVrZGF5c1Nob3J0UmVnZXggPSB0aGlzLl93ZWVrZGF5c1JlZ2V4O1xuICAgICAgICB0aGlzLl93ZWVrZGF5c01pblJlZ2V4ID0gdGhpcy5fd2Vla2RheXNSZWdleDtcblxuICAgICAgICB0aGlzLl93ZWVrZGF5c1N0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgbG9uZ1BpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgICAgIHRoaXMuX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIHNob3J0UGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICAgICAgdGhpcy5fd2Vla2RheXNNaW5TdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIG1pblBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgZnVuY3Rpb24gaEZvcm1hdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaG91cnMoKSAlIDEyIHx8IDEyO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGtGb3JtYXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhvdXJzKCkgfHwgMjQ7XG4gICAgfVxuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ0gnLCBbJ0hIJywgMl0sIDAsICdob3VyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ2gnLCBbJ2hoJywgMl0sIDAsIGhGb3JtYXQpO1xuICAgIGFkZEZvcm1hdFRva2VuKCdrJywgWydraycsIDJdLCAwLCBrRm9ybWF0KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdobW0nLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAnJyArIGhGb3JtYXQuYXBwbHkodGhpcykgKyB6ZXJvRmlsbCh0aGlzLm1pbnV0ZXMoKSwgMik7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignaG1tc3MnLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAnJyArIGhGb3JtYXQuYXBwbHkodGhpcykgKyB6ZXJvRmlsbCh0aGlzLm1pbnV0ZXMoKSwgMikgK1xuICAgICAgICAgICAgemVyb0ZpbGwodGhpcy5zZWNvbmRzKCksIDIpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ0htbScsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICcnICsgdGhpcy5ob3VycygpICsgemVyb0ZpbGwodGhpcy5taW51dGVzKCksIDIpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ0htbXNzJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJycgKyB0aGlzLmhvdXJzKCkgKyB6ZXJvRmlsbCh0aGlzLm1pbnV0ZXMoKSwgMikgK1xuICAgICAgICAgICAgemVyb0ZpbGwodGhpcy5zZWNvbmRzKCksIDIpO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gbWVyaWRpZW0gKHRva2VuLCBsb3dlcmNhc2UpIHtcbiAgICAgICAgYWRkRm9ybWF0VG9rZW4odG9rZW4sIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5tZXJpZGllbSh0aGlzLmhvdXJzKCksIHRoaXMubWludXRlcygpLCBsb3dlcmNhc2UpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBtZXJpZGllbSgnYScsIHRydWUpO1xuICAgIG1lcmlkaWVtKCdBJywgZmFsc2UpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdob3VyJywgJ2gnKTtcblxuICAgIC8vIFBSSU9SSVRZXG4gICAgYWRkVW5pdFByaW9yaXR5KCdob3VyJywgMTMpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgZnVuY3Rpb24gbWF0Y2hNZXJpZGllbSAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLl9tZXJpZGllbVBhcnNlO1xuICAgIH1cblxuICAgIGFkZFJlZ2V4VG9rZW4oJ2EnLCAgbWF0Y2hNZXJpZGllbSk7XG4gICAgYWRkUmVnZXhUb2tlbignQScsICBtYXRjaE1lcmlkaWVtKTtcbiAgICBhZGRSZWdleFRva2VuKCdIJywgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignaCcsICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2snLCAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdISCcsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdoaCcsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdraycsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ2htbScsIG1hdGNoM3RvNCk7XG4gICAgYWRkUmVnZXhUb2tlbignaG1tc3MnLCBtYXRjaDV0bzYpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0htbScsIG1hdGNoM3RvNCk7XG4gICAgYWRkUmVnZXhUb2tlbignSG1tc3MnLCBtYXRjaDV0bzYpO1xuXG4gICAgYWRkUGFyc2VUb2tlbihbJ0gnLCAnSEgnXSwgSE9VUik7XG4gICAgYWRkUGFyc2VUb2tlbihbJ2snLCAna2snXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIHZhciBrSW5wdXQgPSB0b0ludChpbnB1dCk7XG4gICAgICAgIGFycmF5W0hPVVJdID0ga0lucHV0ID09PSAyNCA/IDAgOiBrSW5wdXQ7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbihbJ2EnLCAnQSddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgY29uZmlnLl9pc1BtID0gY29uZmlnLl9sb2NhbGUuaXNQTShpbnB1dCk7XG4gICAgICAgIGNvbmZpZy5fbWVyaWRpZW0gPSBpbnB1dDtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKFsnaCcsICdoaCddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dCk7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPSB0cnVlO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ2htbScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICB2YXIgcG9zID0gaW5wdXQubGVuZ3RoIC0gMjtcbiAgICAgICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dC5zdWJzdHIoMCwgcG9zKSk7XG4gICAgICAgIGFycmF5W01JTlVURV0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zKSk7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPSB0cnVlO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ2htbXNzJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIHZhciBwb3MxID0gaW5wdXQubGVuZ3RoIC0gNDtcbiAgICAgICAgdmFyIHBvczIgPSBpbnB1dC5sZW5ndGggLSAyO1xuICAgICAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0LnN1YnN0cigwLCBwb3MxKSk7XG4gICAgICAgIGFycmF5W01JTlVURV0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zMSwgMikpO1xuICAgICAgICBhcnJheVtTRUNPTkRdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvczIpKTtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHRydWU7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbignSG1tJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIHZhciBwb3MgPSBpbnB1dC5sZW5ndGggLSAyO1xuICAgICAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0LnN1YnN0cigwLCBwb3MpKTtcbiAgICAgICAgYXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MpKTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCdIbW1zcycsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICB2YXIgcG9zMSA9IGlucHV0Lmxlbmd0aCAtIDQ7XG4gICAgICAgIHZhciBwb3MyID0gaW5wdXQubGVuZ3RoIC0gMjtcbiAgICAgICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dC5zdWJzdHIoMCwgcG9zMSkpO1xuICAgICAgICBhcnJheVtNSU5VVEVdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvczEsIDIpKTtcbiAgICAgICAgYXJyYXlbU0VDT05EXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MyKSk7XG4gICAgfSk7XG5cbiAgICAvLyBMT0NBTEVTXG5cbiAgICBmdW5jdGlvbiBsb2NhbGVJc1BNIChpbnB1dCkge1xuICAgICAgICAvLyBJRTggUXVpcmtzIE1vZGUgJiBJRTcgU3RhbmRhcmRzIE1vZGUgZG8gbm90IGFsbG93IGFjY2Vzc2luZyBzdHJpbmdzIGxpa2UgYXJyYXlzXG4gICAgICAgIC8vIFVzaW5nIGNoYXJBdCBzaG91bGQgYmUgbW9yZSBjb21wYXRpYmxlLlxuICAgICAgICByZXR1cm4gKChpbnB1dCArICcnKS50b0xvd2VyQ2FzZSgpLmNoYXJBdCgwKSA9PT0gJ3AnKTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdExvY2FsZU1lcmlkaWVtUGFyc2UgPSAvW2FwXVxcLj9tP1xcLj8vaTtcbiAgICBmdW5jdGlvbiBsb2NhbGVNZXJpZGllbSAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgaWYgKGhvdXJzID4gMTEpIHtcbiAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ3BtJyA6ICdQTSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICdhbScgOiAnQU0nO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICAvLyBTZXR0aW5nIHRoZSBob3VyIHNob3VsZCBrZWVwIHRoZSB0aW1lLCBiZWNhdXNlIHRoZSB1c2VyIGV4cGxpY2l0bHlcbiAgICAvLyBzcGVjaWZpZWQgd2hpY2ggaG91ciB0aGV5IHdhbnQuIFNvIHRyeWluZyB0byBtYWludGFpbiB0aGUgc2FtZSBob3VyIChpblxuICAgIC8vIGEgbmV3IHRpbWV6b25lKSBtYWtlcyBzZW5zZS4gQWRkaW5nL3N1YnRyYWN0aW5nIGhvdXJzIGRvZXMgbm90IGZvbGxvd1xuICAgIC8vIHRoaXMgcnVsZS5cbiAgICB2YXIgZ2V0U2V0SG91ciA9IG1ha2VHZXRTZXQoJ0hvdXJzJywgdHJ1ZSk7XG5cbiAgICB2YXIgYmFzZUNvbmZpZyA9IHtcbiAgICAgICAgY2FsZW5kYXI6IGRlZmF1bHRDYWxlbmRhcixcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IGRlZmF1bHRMb25nRGF0ZUZvcm1hdCxcbiAgICAgICAgaW52YWxpZERhdGU6IGRlZmF1bHRJbnZhbGlkRGF0ZSxcbiAgICAgICAgb3JkaW5hbDogZGVmYXVsdE9yZGluYWwsXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IGRlZmF1bHREYXlPZk1vbnRoT3JkaW5hbFBhcnNlLFxuICAgICAgICByZWxhdGl2ZVRpbWU6IGRlZmF1bHRSZWxhdGl2ZVRpbWUsXG5cbiAgICAgICAgbW9udGhzOiBkZWZhdWx0TG9jYWxlTW9udGhzLFxuICAgICAgICBtb250aHNTaG9ydDogZGVmYXVsdExvY2FsZU1vbnRoc1Nob3J0LFxuXG4gICAgICAgIHdlZWs6IGRlZmF1bHRMb2NhbGVXZWVrLFxuXG4gICAgICAgIHdlZWtkYXlzOiBkZWZhdWx0TG9jYWxlV2Vla2RheXMsXG4gICAgICAgIHdlZWtkYXlzTWluOiBkZWZhdWx0TG9jYWxlV2Vla2RheXNNaW4sXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6IGRlZmF1bHRMb2NhbGVXZWVrZGF5c1Nob3J0LFxuXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IGRlZmF1bHRMb2NhbGVNZXJpZGllbVBhcnNlXG4gICAgfTtcblxuICAgIC8vIGludGVybmFsIHN0b3JhZ2UgZm9yIGxvY2FsZSBjb25maWcgZmlsZXNcbiAgICB2YXIgbG9jYWxlcyA9IHt9O1xuICAgIHZhciBsb2NhbGVGYW1pbGllcyA9IHt9O1xuICAgIHZhciBnbG9iYWxMb2NhbGU7XG5cbiAgICBmdW5jdGlvbiBub3JtYWxpemVMb2NhbGUoa2V5KSB7XG4gICAgICAgIHJldHVybiBrZXkgPyBrZXkudG9Mb3dlckNhc2UoKS5yZXBsYWNlKCdfJywgJy0nKSA6IGtleTtcbiAgICB9XG5cbiAgICAvLyBwaWNrIHRoZSBsb2NhbGUgZnJvbSB0aGUgYXJyYXlcbiAgICAvLyB0cnkgWydlbi1hdScsICdlbi1nYiddIGFzICdlbi1hdScsICdlbi1nYicsICdlbicsIGFzIGluIG1vdmUgdGhyb3VnaCB0aGUgbGlzdCB0cnlpbmcgZWFjaFxuICAgIC8vIHN1YnN0cmluZyBmcm9tIG1vc3Qgc3BlY2lmaWMgdG8gbGVhc3QsIGJ1dCBtb3ZlIHRvIHRoZSBuZXh0IGFycmF5IGl0ZW0gaWYgaXQncyBhIG1vcmUgc3BlY2lmaWMgdmFyaWFudCB0aGFuIHRoZSBjdXJyZW50IHJvb3RcbiAgICBmdW5jdGlvbiBjaG9vc2VMb2NhbGUobmFtZXMpIHtcbiAgICAgICAgdmFyIGkgPSAwLCBqLCBuZXh0LCBsb2NhbGUsIHNwbGl0O1xuXG4gICAgICAgIHdoaWxlIChpIDwgbmFtZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBzcGxpdCA9IG5vcm1hbGl6ZUxvY2FsZShuYW1lc1tpXSkuc3BsaXQoJy0nKTtcbiAgICAgICAgICAgIGogPSBzcGxpdC5sZW5ndGg7XG4gICAgICAgICAgICBuZXh0ID0gbm9ybWFsaXplTG9jYWxlKG5hbWVzW2kgKyAxXSk7XG4gICAgICAgICAgICBuZXh0ID0gbmV4dCA/IG5leHQuc3BsaXQoJy0nKSA6IG51bGw7XG4gICAgICAgICAgICB3aGlsZSAoaiA+IDApIHtcbiAgICAgICAgICAgICAgICBsb2NhbGUgPSBsb2FkTG9jYWxlKHNwbGl0LnNsaWNlKDAsIGopLmpvaW4oJy0nKSk7XG4gICAgICAgICAgICAgICAgaWYgKGxvY2FsZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbG9jYWxlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobmV4dCAmJiBuZXh0Lmxlbmd0aCA+PSBqICYmIGNvbXBhcmVBcnJheXMoc3BsaXQsIG5leHQsIHRydWUpID49IGogLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vdGhlIG5leHQgYXJyYXkgaXRlbSBpcyBiZXR0ZXIgdGhhbiBhIHNoYWxsb3dlciBzdWJzdHJpbmcgb2YgdGhpcyBvbmVcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGotLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZ2xvYmFsTG9jYWxlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvYWRMb2NhbGUobmFtZSkge1xuICAgICAgICB2YXIgb2xkTG9jYWxlID0gbnVsbDtcbiAgICAgICAgLy8gVE9ETzogRmluZCBhIGJldHRlciB3YXkgdG8gcmVnaXN0ZXIgYW5kIGxvYWQgYWxsIHRoZSBsb2NhbGVzIGluIE5vZGVcbiAgICAgICAgaWYgKCFsb2NhbGVzW25hbWVdICYmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykgJiZcbiAgICAgICAgICAgICAgICBtb2R1bGUgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgb2xkTG9jYWxlID0gZ2xvYmFsTG9jYWxlLl9hYmJyO1xuICAgICAgICAgICAgICAgIHZhciBhbGlhc2VkUmVxdWlyZSA9IHJlcXVpcmU7XG4gICAgICAgICAgICAgICAgYWxpYXNlZFJlcXVpcmUoJy4vbG9jYWxlLycgKyBuYW1lKTtcbiAgICAgICAgICAgICAgICBnZXRTZXRHbG9iYWxMb2NhbGUob2xkTG9jYWxlKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxvY2FsZXNbbmFtZV07XG4gICAgfVxuXG4gICAgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGxvYWQgbG9jYWxlIGFuZCB0aGVuIHNldCB0aGUgZ2xvYmFsIGxvY2FsZS4gIElmXG4gICAgLy8gbm8gYXJndW1lbnRzIGFyZSBwYXNzZWQgaW4sIGl0IHdpbGwgc2ltcGx5IHJldHVybiB0aGUgY3VycmVudCBnbG9iYWxcbiAgICAvLyBsb2NhbGUga2V5LlxuICAgIGZ1bmN0aW9uIGdldFNldEdsb2JhbExvY2FsZSAoa2V5LCB2YWx1ZXMpIHtcbiAgICAgICAgdmFyIGRhdGE7XG4gICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZXMpKSB7XG4gICAgICAgICAgICAgICAgZGF0YSA9IGdldExvY2FsZShrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZGF0YSA9IGRlZmluZUxvY2FsZShrZXksIHZhbHVlcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgLy8gbW9tZW50LmR1cmF0aW9uLl9sb2NhbGUgPSBtb21lbnQuX2xvY2FsZSA9IGRhdGE7XG4gICAgICAgICAgICAgICAgZ2xvYmFsTG9jYWxlID0gZGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICgodHlwZW9mIGNvbnNvbGUgIT09ICAndW5kZWZpbmVkJykgJiYgY29uc29sZS53YXJuKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vd2FybiB1c2VyIGlmIGFyZ3VtZW50cyBhcmUgcGFzc2VkIGJ1dCB0aGUgbG9jYWxlIGNvdWxkIG5vdCBiZSBzZXRcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdMb2NhbGUgJyArIGtleSArICAnIG5vdCBmb3VuZC4gRGlkIHlvdSBmb3JnZXQgdG8gbG9hZCBpdD8nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZ2xvYmFsTG9jYWxlLl9hYmJyO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlZmluZUxvY2FsZSAobmFtZSwgY29uZmlnKSB7XG4gICAgICAgIGlmIChjb25maWcgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHZhciBsb2NhbGUsIHBhcmVudENvbmZpZyA9IGJhc2VDb25maWc7XG4gICAgICAgICAgICBjb25maWcuYWJiciA9IG5hbWU7XG4gICAgICAgICAgICBpZiAobG9jYWxlc1tuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZGVwcmVjYXRlU2ltcGxlKCdkZWZpbmVMb2NhbGVPdmVycmlkZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAndXNlIG1vbWVudC51cGRhdGVMb2NhbGUobG9jYWxlTmFtZSwgY29uZmlnKSB0byBjaGFuZ2UgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnYW4gZXhpc3RpbmcgbG9jYWxlLiBtb21lbnQuZGVmaW5lTG9jYWxlKGxvY2FsZU5hbWUsICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbmZpZykgc2hvdWxkIG9ubHkgYmUgdXNlZCBmb3IgY3JlYXRpbmcgYSBuZXcgbG9jYWxlICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1NlZSBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL2RlZmluZS1sb2NhbGUvIGZvciBtb3JlIGluZm8uJyk7XG4gICAgICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gbG9jYWxlc1tuYW1lXS5fY29uZmlnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjb25maWcucGFyZW50TG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAobG9jYWxlc1tjb25maWcucGFyZW50TG9jYWxlXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IGxvY2FsZXNbY29uZmlnLnBhcmVudExvY2FsZV0uX2NvbmZpZztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsb2NhbGUgPSBsb2FkTG9jYWxlKGNvbmZpZy5wYXJlbnRMb2NhbGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IGxvY2FsZS5fY29uZmlnO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFsb2NhbGVGYW1pbGllc1tjb25maWcucGFyZW50TG9jYWxlXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsZUZhbWlsaWVzW2NvbmZpZy5wYXJlbnRMb2NhbGVdID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhbGVGYW1pbGllc1tjb25maWcucGFyZW50TG9jYWxlXS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZzogY29uZmlnXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbG9jYWxlc1tuYW1lXSA9IG5ldyBMb2NhbGUobWVyZ2VDb25maWdzKHBhcmVudENvbmZpZywgY29uZmlnKSk7XG5cbiAgICAgICAgICAgIGlmIChsb2NhbGVGYW1pbGllc1tuYW1lXSkge1xuICAgICAgICAgICAgICAgIGxvY2FsZUZhbWlsaWVzW25hbWVdLmZvckVhY2goZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5lTG9jYWxlKHgubmFtZSwgeC5jb25maWcpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBiYWNrd2FyZHMgY29tcGF0IGZvciBub3c6IGFsc28gc2V0IHRoZSBsb2NhbGVcbiAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGxvY2FsZSBBRlRFUiBhbGwgY2hpbGQgbG9jYWxlcyBoYXZlIGJlZW5cbiAgICAgICAgICAgIC8vIGNyZWF0ZWQsIHNvIHdlIHdvbid0IGVuZCB1cCB3aXRoIHRoZSBjaGlsZCBsb2NhbGUgc2V0LlxuICAgICAgICAgICAgZ2V0U2V0R2xvYmFsTG9jYWxlKG5hbWUpO1xuXG5cbiAgICAgICAgICAgIHJldHVybiBsb2NhbGVzW25hbWVdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gdXNlZnVsIGZvciB0ZXN0aW5nXG4gICAgICAgICAgICBkZWxldGUgbG9jYWxlc1tuYW1lXTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXBkYXRlTG9jYWxlKG5hbWUsIGNvbmZpZykge1xuICAgICAgICBpZiAoY29uZmlnICE9IG51bGwpIHtcbiAgICAgICAgICAgIHZhciBsb2NhbGUsIHRtcExvY2FsZSwgcGFyZW50Q29uZmlnID0gYmFzZUNvbmZpZztcbiAgICAgICAgICAgIC8vIE1FUkdFXG4gICAgICAgICAgICB0bXBMb2NhbGUgPSBsb2FkTG9jYWxlKG5hbWUpO1xuICAgICAgICAgICAgaWYgKHRtcExvY2FsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gdG1wTG9jYWxlLl9jb25maWc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25maWcgPSBtZXJnZUNvbmZpZ3MocGFyZW50Q29uZmlnLCBjb25maWcpO1xuICAgICAgICAgICAgbG9jYWxlID0gbmV3IExvY2FsZShjb25maWcpO1xuICAgICAgICAgICAgbG9jYWxlLnBhcmVudExvY2FsZSA9IGxvY2FsZXNbbmFtZV07XG4gICAgICAgICAgICBsb2NhbGVzW25hbWVdID0gbG9jYWxlO1xuXG4gICAgICAgICAgICAvLyBiYWNrd2FyZHMgY29tcGF0IGZvciBub3c6IGFsc28gc2V0IHRoZSBsb2NhbGVcbiAgICAgICAgICAgIGdldFNldEdsb2JhbExvY2FsZShuYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHBhc3MgbnVsbCBmb3IgY29uZmlnIHRvIHVudXBkYXRlLCB1c2VmdWwgZm9yIHRlc3RzXG4gICAgICAgICAgICBpZiAobG9jYWxlc1tuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxvY2FsZXNbbmFtZV0ucGFyZW50TG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxlc1tuYW1lXSA9IGxvY2FsZXNbbmFtZV0ucGFyZW50TG9jYWxlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobG9jYWxlc1tuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBsb2NhbGVzW25hbWVdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbG9jYWxlc1tuYW1lXTtcbiAgICB9XG5cbiAgICAvLyByZXR1cm5zIGxvY2FsZSBkYXRhXG4gICAgZnVuY3Rpb24gZ2V0TG9jYWxlIChrZXkpIHtcbiAgICAgICAgdmFyIGxvY2FsZTtcblxuICAgICAgICBpZiAoa2V5ICYmIGtleS5fbG9jYWxlICYmIGtleS5fbG9jYWxlLl9hYmJyKSB7XG4gICAgICAgICAgICBrZXkgPSBrZXkuX2xvY2FsZS5fYWJicjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgha2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gZ2xvYmFsTG9jYWxlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpc0FycmF5KGtleSkpIHtcbiAgICAgICAgICAgIC8vc2hvcnQtY2lyY3VpdCBldmVyeXRoaW5nIGVsc2VcbiAgICAgICAgICAgIGxvY2FsZSA9IGxvYWRMb2NhbGUoa2V5KTtcbiAgICAgICAgICAgIGlmIChsb2NhbGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9jYWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAga2V5ID0gW2tleV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2hvb3NlTG9jYWxlKGtleSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdExvY2FsZXMoKSB7XG4gICAgICAgIHJldHVybiBrZXlzKGxvY2FsZXMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNoZWNrT3ZlcmZsb3cgKG0pIHtcbiAgICAgICAgdmFyIG92ZXJmbG93O1xuICAgICAgICB2YXIgYSA9IG0uX2E7XG5cbiAgICAgICAgaWYgKGEgJiYgZ2V0UGFyc2luZ0ZsYWdzKG0pLm92ZXJmbG93ID09PSAtMikge1xuICAgICAgICAgICAgb3ZlcmZsb3cgPVxuICAgICAgICAgICAgICAgIGFbTU9OVEhdICAgICAgIDwgMCB8fCBhW01PTlRIXSAgICAgICA+IDExICA/IE1PTlRIIDpcbiAgICAgICAgICAgICAgICBhW0RBVEVdICAgICAgICA8IDEgfHwgYVtEQVRFXSAgICAgICAgPiBkYXlzSW5Nb250aChhW1lFQVJdLCBhW01PTlRIXSkgPyBEQVRFIDpcbiAgICAgICAgICAgICAgICBhW0hPVVJdICAgICAgICA8IDAgfHwgYVtIT1VSXSAgICAgICAgPiAyNCB8fCAoYVtIT1VSXSA9PT0gMjQgJiYgKGFbTUlOVVRFXSAhPT0gMCB8fCBhW1NFQ09ORF0gIT09IDAgfHwgYVtNSUxMSVNFQ09ORF0gIT09IDApKSA/IEhPVVIgOlxuICAgICAgICAgICAgICAgIGFbTUlOVVRFXSAgICAgIDwgMCB8fCBhW01JTlVURV0gICAgICA+IDU5ICA/IE1JTlVURSA6XG4gICAgICAgICAgICAgICAgYVtTRUNPTkRdICAgICAgPCAwIHx8IGFbU0VDT05EXSAgICAgID4gNTkgID8gU0VDT05EIDpcbiAgICAgICAgICAgICAgICBhW01JTExJU0VDT05EXSA8IDAgfHwgYVtNSUxMSVNFQ09ORF0gPiA5OTkgPyBNSUxMSVNFQ09ORCA6XG4gICAgICAgICAgICAgICAgLTE7XG5cbiAgICAgICAgICAgIGlmIChnZXRQYXJzaW5nRmxhZ3MobSkuX292ZXJmbG93RGF5T2ZZZWFyICYmIChvdmVyZmxvdyA8IFlFQVIgfHwgb3ZlcmZsb3cgPiBEQVRFKSkge1xuICAgICAgICAgICAgICAgIG92ZXJmbG93ID0gREFURTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChnZXRQYXJzaW5nRmxhZ3MobSkuX292ZXJmbG93V2Vla3MgJiYgb3ZlcmZsb3cgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3cgPSBXRUVLO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGdldFBhcnNpbmdGbGFncyhtKS5fb3ZlcmZsb3dXZWVrZGF5ICYmIG92ZXJmbG93ID09PSAtMSkge1xuICAgICAgICAgICAgICAgIG92ZXJmbG93ID0gV0VFS0RBWTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKG0pLm92ZXJmbG93ID0gb3ZlcmZsb3c7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbTtcbiAgICB9XG5cbiAgICAvLyBQaWNrIHRoZSBmaXJzdCBkZWZpbmVkIG9mIHR3byBvciB0aHJlZSBhcmd1bWVudHMuXG4gICAgZnVuY3Rpb24gZGVmYXVsdHMoYSwgYiwgYykge1xuICAgICAgICBpZiAoYSAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYiAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gYjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjdXJyZW50RGF0ZUFycmF5KGNvbmZpZykge1xuICAgICAgICAvLyBob29rcyBpcyBhY3R1YWxseSB0aGUgZXhwb3J0ZWQgbW9tZW50IG9iamVjdFxuICAgICAgICB2YXIgbm93VmFsdWUgPSBuZXcgRGF0ZShob29rcy5ub3coKSk7XG4gICAgICAgIGlmIChjb25maWcuX3VzZVVUQykge1xuICAgICAgICAgICAgcmV0dXJuIFtub3dWYWx1ZS5nZXRVVENGdWxsWWVhcigpLCBub3dWYWx1ZS5nZXRVVENNb250aCgpLCBub3dWYWx1ZS5nZXRVVENEYXRlKCldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbbm93VmFsdWUuZ2V0RnVsbFllYXIoKSwgbm93VmFsdWUuZ2V0TW9udGgoKSwgbm93VmFsdWUuZ2V0RGF0ZSgpXTtcbiAgICB9XG5cbiAgICAvLyBjb252ZXJ0IGFuIGFycmF5IHRvIGEgZGF0ZS5cbiAgICAvLyB0aGUgYXJyYXkgc2hvdWxkIG1pcnJvciB0aGUgcGFyYW1ldGVycyBiZWxvd1xuICAgIC8vIG5vdGU6IGFsbCB2YWx1ZXMgcGFzdCB0aGUgeWVhciBhcmUgb3B0aW9uYWwgYW5kIHdpbGwgZGVmYXVsdCB0byB0aGUgbG93ZXN0IHBvc3NpYmxlIHZhbHVlLlxuICAgIC8vIFt5ZWFyLCBtb250aCwgZGF5ICwgaG91ciwgbWludXRlLCBzZWNvbmQsIG1pbGxpc2Vjb25kXVxuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21BcnJheSAoY29uZmlnKSB7XG4gICAgICAgIHZhciBpLCBkYXRlLCBpbnB1dCA9IFtdLCBjdXJyZW50RGF0ZSwgZXhwZWN0ZWRXZWVrZGF5LCB5ZWFyVG9Vc2U7XG5cbiAgICAgICAgaWYgKGNvbmZpZy5fZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudERhdGUgPSBjdXJyZW50RGF0ZUFycmF5KGNvbmZpZyk7XG5cbiAgICAgICAgLy9jb21wdXRlIGRheSBvZiB0aGUgeWVhciBmcm9tIHdlZWtzIGFuZCB3ZWVrZGF5c1xuICAgICAgICBpZiAoY29uZmlnLl93ICYmIGNvbmZpZy5fYVtEQVRFXSA9PSBudWxsICYmIGNvbmZpZy5fYVtNT05USF0gPT0gbnVsbCkge1xuICAgICAgICAgICAgZGF5T2ZZZWFyRnJvbVdlZWtJbmZvKGNvbmZpZyk7XG4gICAgICAgIH1cblxuICAgICAgICAvL2lmIHRoZSBkYXkgb2YgdGhlIHllYXIgaXMgc2V0LCBmaWd1cmUgb3V0IHdoYXQgaXQgaXNcbiAgICAgICAgaWYgKGNvbmZpZy5fZGF5T2ZZZWFyICE9IG51bGwpIHtcbiAgICAgICAgICAgIHllYXJUb1VzZSA9IGRlZmF1bHRzKGNvbmZpZy5fYVtZRUFSXSwgY3VycmVudERhdGVbWUVBUl0pO1xuXG4gICAgICAgICAgICBpZiAoY29uZmlnLl9kYXlPZlllYXIgPiBkYXlzSW5ZZWFyKHllYXJUb1VzZSkgfHwgY29uZmlnLl9kYXlPZlllYXIgPT09IDApIHtcbiAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5fb3ZlcmZsb3dEYXlPZlllYXIgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkYXRlID0gY3JlYXRlVVRDRGF0ZSh5ZWFyVG9Vc2UsIDAsIGNvbmZpZy5fZGF5T2ZZZWFyKTtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtNT05USF0gPSBkYXRlLmdldFVUQ01vbnRoKCk7XG4gICAgICAgICAgICBjb25maWcuX2FbREFURV0gPSBkYXRlLmdldFVUQ0RhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERlZmF1bHQgdG8gY3VycmVudCBkYXRlLlxuICAgICAgICAvLyAqIGlmIG5vIHllYXIsIG1vbnRoLCBkYXkgb2YgbW9udGggYXJlIGdpdmVuLCBkZWZhdWx0IHRvIHRvZGF5XG4gICAgICAgIC8vICogaWYgZGF5IG9mIG1vbnRoIGlzIGdpdmVuLCBkZWZhdWx0IG1vbnRoIGFuZCB5ZWFyXG4gICAgICAgIC8vICogaWYgbW9udGggaXMgZ2l2ZW4sIGRlZmF1bHQgb25seSB5ZWFyXG4gICAgICAgIC8vICogaWYgeWVhciBpcyBnaXZlbiwgZG9uJ3QgZGVmYXVsdCBhbnl0aGluZ1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMyAmJiBjb25maWcuX2FbaV0gPT0gbnVsbDsgKytpKSB7XG4gICAgICAgICAgICBjb25maWcuX2FbaV0gPSBpbnB1dFtpXSA9IGN1cnJlbnREYXRlW2ldO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gWmVybyBvdXQgd2hhdGV2ZXIgd2FzIG5vdCBkZWZhdWx0ZWQsIGluY2x1ZGluZyB0aW1lXG4gICAgICAgIGZvciAoOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgICAgICBjb25maWcuX2FbaV0gPSBpbnB1dFtpXSA9IChjb25maWcuX2FbaV0gPT0gbnVsbCkgPyAoaSA9PT0gMiA/IDEgOiAwKSA6IGNvbmZpZy5fYVtpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENoZWNrIGZvciAyNDowMDowMC4wMDBcbiAgICAgICAgaWYgKGNvbmZpZy5fYVtIT1VSXSA9PT0gMjQgJiZcbiAgICAgICAgICAgICAgICBjb25maWcuX2FbTUlOVVRFXSA9PT0gMCAmJlxuICAgICAgICAgICAgICAgIGNvbmZpZy5fYVtTRUNPTkRdID09PSAwICYmXG4gICAgICAgICAgICAgICAgY29uZmlnLl9hW01JTExJU0VDT05EXSA9PT0gMCkge1xuICAgICAgICAgICAgY29uZmlnLl9uZXh0RGF5ID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtIT1VSXSA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBjb25maWcuX2QgPSAoY29uZmlnLl91c2VVVEMgPyBjcmVhdGVVVENEYXRlIDogY3JlYXRlRGF0ZSkuYXBwbHkobnVsbCwgaW5wdXQpO1xuICAgICAgICBleHBlY3RlZFdlZWtkYXkgPSBjb25maWcuX3VzZVVUQyA/IGNvbmZpZy5fZC5nZXRVVENEYXkoKSA6IGNvbmZpZy5fZC5nZXREYXkoKTtcblxuICAgICAgICAvLyBBcHBseSB0aW1lem9uZSBvZmZzZXQgZnJvbSBpbnB1dC4gVGhlIGFjdHVhbCB1dGNPZmZzZXQgY2FuIGJlIGNoYW5nZWRcbiAgICAgICAgLy8gd2l0aCBwYXJzZVpvbmUuXG4gICAgICAgIGlmIChjb25maWcuX3R6bSAhPSBudWxsKSB7XG4gICAgICAgICAgICBjb25maWcuX2Quc2V0VVRDTWludXRlcyhjb25maWcuX2QuZ2V0VVRDTWludXRlcygpIC0gY29uZmlnLl90em0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbmZpZy5fbmV4dERheSkge1xuICAgICAgICAgICAgY29uZmlnLl9hW0hPVVJdID0gMjQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjaGVjayBmb3IgbWlzbWF0Y2hpbmcgZGF5IG9mIHdlZWtcbiAgICAgICAgaWYgKGNvbmZpZy5fdyAmJiB0eXBlb2YgY29uZmlnLl93LmQgIT09ICd1bmRlZmluZWQnICYmIGNvbmZpZy5fdy5kICE9PSBleHBlY3RlZFdlZWtkYXkpIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLndlZWtkYXlNaXNtYXRjaCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkYXlPZlllYXJGcm9tV2Vla0luZm8oY29uZmlnKSB7XG4gICAgICAgIHZhciB3LCB3ZWVrWWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3ksIHRlbXAsIHdlZWtkYXlPdmVyZmxvdztcblxuICAgICAgICB3ID0gY29uZmlnLl93O1xuICAgICAgICBpZiAody5HRyAhPSBudWxsIHx8IHcuVyAhPSBudWxsIHx8IHcuRSAhPSBudWxsKSB7XG4gICAgICAgICAgICBkb3cgPSAxO1xuICAgICAgICAgICAgZG95ID0gNDtcblxuICAgICAgICAgICAgLy8gVE9ETzogV2UgbmVlZCB0byB0YWtlIHRoZSBjdXJyZW50IGlzb1dlZWtZZWFyLCBidXQgdGhhdCBkZXBlbmRzIG9uXG4gICAgICAgICAgICAvLyBob3cgd2UgaW50ZXJwcmV0IG5vdyAobG9jYWwsIHV0YywgZml4ZWQgb2Zmc2V0KS4gU28gY3JlYXRlXG4gICAgICAgICAgICAvLyBhIG5vdyB2ZXJzaW9uIG9mIGN1cnJlbnQgY29uZmlnICh0YWtlIGxvY2FsL3V0Yy9vZmZzZXQgZmxhZ3MsIGFuZFxuICAgICAgICAgICAgLy8gY3JlYXRlIG5vdykuXG4gICAgICAgICAgICB3ZWVrWWVhciA9IGRlZmF1bHRzKHcuR0csIGNvbmZpZy5fYVtZRUFSXSwgd2Vla09mWWVhcihjcmVhdGVMb2NhbCgpLCAxLCA0KS55ZWFyKTtcbiAgICAgICAgICAgIHdlZWsgPSBkZWZhdWx0cyh3LlcsIDEpO1xuICAgICAgICAgICAgd2Vla2RheSA9IGRlZmF1bHRzKHcuRSwgMSk7XG4gICAgICAgICAgICBpZiAod2Vla2RheSA8IDEgfHwgd2Vla2RheSA+IDcpIHtcbiAgICAgICAgICAgICAgICB3ZWVrZGF5T3ZlcmZsb3cgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZG93ID0gY29uZmlnLl9sb2NhbGUuX3dlZWsuZG93O1xuICAgICAgICAgICAgZG95ID0gY29uZmlnLl9sb2NhbGUuX3dlZWsuZG95O1xuXG4gICAgICAgICAgICB2YXIgY3VyV2VlayA9IHdlZWtPZlllYXIoY3JlYXRlTG9jYWwoKSwgZG93LCBkb3kpO1xuXG4gICAgICAgICAgICB3ZWVrWWVhciA9IGRlZmF1bHRzKHcuZ2csIGNvbmZpZy5fYVtZRUFSXSwgY3VyV2Vlay55ZWFyKTtcblxuICAgICAgICAgICAgLy8gRGVmYXVsdCB0byBjdXJyZW50IHdlZWsuXG4gICAgICAgICAgICB3ZWVrID0gZGVmYXVsdHMody53LCBjdXJXZWVrLndlZWspO1xuXG4gICAgICAgICAgICBpZiAody5kICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyB3ZWVrZGF5IC0tIGxvdyBkYXkgbnVtYmVycyBhcmUgY29uc2lkZXJlZCBuZXh0IHdlZWtcbiAgICAgICAgICAgICAgICB3ZWVrZGF5ID0gdy5kO1xuICAgICAgICAgICAgICAgIGlmICh3ZWVrZGF5IDwgMCB8fCB3ZWVrZGF5ID4gNikge1xuICAgICAgICAgICAgICAgICAgICB3ZWVrZGF5T3ZlcmZsb3cgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAody5lICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyBsb2NhbCB3ZWVrZGF5IC0tIGNvdW50aW5nIHN0YXJ0cyBmcm9tIGJlZ2lubmluZyBvZiB3ZWVrXG4gICAgICAgICAgICAgICAgd2Vla2RheSA9IHcuZSArIGRvdztcbiAgICAgICAgICAgICAgICBpZiAody5lIDwgMCB8fCB3LmUgPiA2KSB7XG4gICAgICAgICAgICAgICAgICAgIHdlZWtkYXlPdmVyZmxvdyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBkZWZhdWx0IHRvIGJlZ2lubmluZyBvZiB3ZWVrXG4gICAgICAgICAgICAgICAgd2Vla2RheSA9IGRvdztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAod2VlayA8IDEgfHwgd2VlayA+IHdlZWtzSW5ZZWFyKHdlZWtZZWFyLCBkb3csIGRveSkpIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLl9vdmVyZmxvd1dlZWtzID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmICh3ZWVrZGF5T3ZlcmZsb3cgIT0gbnVsbCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuX292ZXJmbG93V2Vla2RheSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0ZW1wID0gZGF5T2ZZZWFyRnJvbVdlZWtzKHdlZWtZZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSk7XG4gICAgICAgICAgICBjb25maWcuX2FbWUVBUl0gPSB0ZW1wLnllYXI7XG4gICAgICAgICAgICBjb25maWcuX2RheU9mWWVhciA9IHRlbXAuZGF5T2ZZZWFyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gaXNvIDg2MDEgcmVnZXhcbiAgICAvLyAwMDAwLTAwLTAwIDAwMDAtVzAwIG9yIDAwMDAtVzAwLTAgKyBUICsgMDAgb3IgMDA6MDAgb3IgMDA6MDA6MDAgb3IgMDA6MDA6MDAuMDAwICsgKzAwOjAwIG9yICswMDAwIG9yICswMClcbiAgICB2YXIgZXh0ZW5kZWRJc29SZWdleCA9IC9eXFxzKigoPzpbKy1dXFxkezZ9fFxcZHs0fSktKD86XFxkXFxkLVxcZFxcZHxXXFxkXFxkLVxcZHxXXFxkXFxkfFxcZFxcZFxcZHxcXGRcXGQpKSg/OihUfCApKFxcZFxcZCg/OjpcXGRcXGQoPzo6XFxkXFxkKD86Wy4sXVxcZCspPyk/KT8pKFtcXCtcXC1dXFxkXFxkKD86Oj9cXGRcXGQpP3xcXHMqWik/KT8kLztcbiAgICB2YXIgYmFzaWNJc29SZWdleCA9IC9eXFxzKigoPzpbKy1dXFxkezZ9fFxcZHs0fSkoPzpcXGRcXGRcXGRcXGR8V1xcZFxcZFxcZHxXXFxkXFxkfFxcZFxcZFxcZHxcXGRcXGQpKSg/OihUfCApKFxcZFxcZCg/OlxcZFxcZCg/OlxcZFxcZCg/OlsuLF1cXGQrKT8pPyk/KShbXFwrXFwtXVxcZFxcZCg/Ojo/XFxkXFxkKT98XFxzKlopPyk/JC87XG5cbiAgICB2YXIgdHpSZWdleCA9IC9afFsrLV1cXGRcXGQoPzo6P1xcZFxcZCk/LztcblxuICAgIHZhciBpc29EYXRlcyA9IFtcbiAgICAgICAgWydZWVlZWVktTU0tREQnLCAvWystXVxcZHs2fS1cXGRcXGQtXFxkXFxkL10sXG4gICAgICAgIFsnWVlZWS1NTS1ERCcsIC9cXGR7NH0tXFxkXFxkLVxcZFxcZC9dLFxuICAgICAgICBbJ0dHR0ctW1ddV1ctRScsIC9cXGR7NH0tV1xcZFxcZC1cXGQvXSxcbiAgICAgICAgWydHR0dHLVtXXVdXJywgL1xcZHs0fS1XXFxkXFxkLywgZmFsc2VdLFxuICAgICAgICBbJ1lZWVktREREJywgL1xcZHs0fS1cXGR7M30vXSxcbiAgICAgICAgWydZWVlZLU1NJywgL1xcZHs0fS1cXGRcXGQvLCBmYWxzZV0sXG4gICAgICAgIFsnWVlZWVlZTU1ERCcsIC9bKy1dXFxkezEwfS9dLFxuICAgICAgICBbJ1lZWVlNTUREJywgL1xcZHs4fS9dLFxuICAgICAgICAvLyBZWVlZTU0gaXMgTk9UIGFsbG93ZWQgYnkgdGhlIHN0YW5kYXJkXG4gICAgICAgIFsnR0dHR1tXXVdXRScsIC9cXGR7NH1XXFxkezN9L10sXG4gICAgICAgIFsnR0dHR1tXXVdXJywgL1xcZHs0fVdcXGR7Mn0vLCBmYWxzZV0sXG4gICAgICAgIFsnWVlZWURERCcsIC9cXGR7N30vXVxuICAgIF07XG5cbiAgICAvLyBpc28gdGltZSBmb3JtYXRzIGFuZCByZWdleGVzXG4gICAgdmFyIGlzb1RpbWVzID0gW1xuICAgICAgICBbJ0hIOm1tOnNzLlNTU1MnLCAvXFxkXFxkOlxcZFxcZDpcXGRcXGRcXC5cXGQrL10sXG4gICAgICAgIFsnSEg6bW06c3MsU1NTUycsIC9cXGRcXGQ6XFxkXFxkOlxcZFxcZCxcXGQrL10sXG4gICAgICAgIFsnSEg6bW06c3MnLCAvXFxkXFxkOlxcZFxcZDpcXGRcXGQvXSxcbiAgICAgICAgWydISDptbScsIC9cXGRcXGQ6XFxkXFxkL10sXG4gICAgICAgIFsnSEhtbXNzLlNTU1MnLCAvXFxkXFxkXFxkXFxkXFxkXFxkXFwuXFxkKy9dLFxuICAgICAgICBbJ0hIbW1zcyxTU1NTJywgL1xcZFxcZFxcZFxcZFxcZFxcZCxcXGQrL10sXG4gICAgICAgIFsnSEhtbXNzJywgL1xcZFxcZFxcZFxcZFxcZFxcZC9dLFxuICAgICAgICBbJ0hIbW0nLCAvXFxkXFxkXFxkXFxkL10sXG4gICAgICAgIFsnSEgnLCAvXFxkXFxkL11cbiAgICBdO1xuXG4gICAgdmFyIGFzcE5ldEpzb25SZWdleCA9IC9eXFwvP0RhdGVcXCgoXFwtP1xcZCspL2k7XG5cbiAgICAvLyBkYXRlIGZyb20gaXNvIGZvcm1hdFxuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21JU08oY29uZmlnKSB7XG4gICAgICAgIHZhciBpLCBsLFxuICAgICAgICAgICAgc3RyaW5nID0gY29uZmlnLl9pLFxuICAgICAgICAgICAgbWF0Y2ggPSBleHRlbmRlZElzb1JlZ2V4LmV4ZWMoc3RyaW5nKSB8fCBiYXNpY0lzb1JlZ2V4LmV4ZWMoc3RyaW5nKSxcbiAgICAgICAgICAgIGFsbG93VGltZSwgZGF0ZUZvcm1hdCwgdGltZUZvcm1hdCwgdHpGb3JtYXQ7XG5cbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pc28gPSB0cnVlO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwLCBsID0gaXNvRGF0ZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzb0RhdGVzW2ldWzFdLmV4ZWMobWF0Y2hbMV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGVGb3JtYXQgPSBpc29EYXRlc1tpXVswXTtcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dUaW1lID0gaXNvRGF0ZXNbaV1bMl0gIT09IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGF0ZUZvcm1hdCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hdGNoWzNdKSB7XG4gICAgICAgICAgICAgICAgZm9yIChpID0gMCwgbCA9IGlzb1RpbWVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNvVGltZXNbaV1bMV0uZXhlYyhtYXRjaFszXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1hdGNoWzJdIHNob3VsZCBiZSAnVCcgb3Igc3BhY2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVGb3JtYXQgPSAobWF0Y2hbMl0gfHwgJyAnKSArIGlzb1RpbWVzW2ldWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRpbWVGb3JtYXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghYWxsb3dUaW1lICYmIHRpbWVGb3JtYXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXRjaFs0XSkge1xuICAgICAgICAgICAgICAgIGlmICh0elJlZ2V4LmV4ZWMobWF0Y2hbNF0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHR6Rm9ybWF0ID0gJ1onO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uZmlnLl9mID0gZGF0ZUZvcm1hdCArICh0aW1lRm9ybWF0IHx8ICcnKSArICh0ekZvcm1hdCB8fCAnJyk7XG4gICAgICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJGQyAyODIyIHJlZ2V4OiBGb3IgZGV0YWlscyBzZWUgaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzI4MjIjc2VjdGlvbi0zLjNcbiAgICB2YXIgcmZjMjgyMiA9IC9eKD86KE1vbnxUdWV8V2VkfFRodXxGcml8U2F0fFN1biksP1xccyk/KFxcZHsxLDJ9KVxccyhKYW58RmVifE1hcnxBcHJ8TWF5fEp1bnxKdWx8QXVnfFNlcHxPY3R8Tm92fERlYylcXHMoXFxkezIsNH0pXFxzKFxcZFxcZCk6KFxcZFxcZCkoPzo6KFxcZFxcZCkpP1xccyg/OihVVHxHTVR8W0VDTVBdW1NEXVQpfChbWnpdKXwoWystXVxcZHs0fSkpJC87XG5cbiAgICBmdW5jdGlvbiBleHRyYWN0RnJvbVJGQzI4MjJTdHJpbmdzKHllYXJTdHIsIG1vbnRoU3RyLCBkYXlTdHIsIGhvdXJTdHIsIG1pbnV0ZVN0ciwgc2Vjb25kU3RyKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBbXG4gICAgICAgICAgICB1bnRydW5jYXRlWWVhcih5ZWFyU3RyKSxcbiAgICAgICAgICAgIGRlZmF1bHRMb2NhbGVNb250aHNTaG9ydC5pbmRleE9mKG1vbnRoU3RyKSxcbiAgICAgICAgICAgIHBhcnNlSW50KGRheVN0ciwgMTApLFxuICAgICAgICAgICAgcGFyc2VJbnQoaG91clN0ciwgMTApLFxuICAgICAgICAgICAgcGFyc2VJbnQobWludXRlU3RyLCAxMClcbiAgICAgICAgXTtcblxuICAgICAgICBpZiAoc2Vjb25kU3RyKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChwYXJzZUludChzZWNvbmRTdHIsIDEwKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVudHJ1bmNhdGVZZWFyKHllYXJTdHIpIHtcbiAgICAgICAgdmFyIHllYXIgPSBwYXJzZUludCh5ZWFyU3RyLCAxMCk7XG4gICAgICAgIGlmICh5ZWFyIDw9IDQ5KSB7XG4gICAgICAgICAgICByZXR1cm4gMjAwMCArIHllYXI7XG4gICAgICAgIH0gZWxzZSBpZiAoeWVhciA8PSA5OTkpIHtcbiAgICAgICAgICAgIHJldHVybiAxOTAwICsgeWVhcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geWVhcjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcmVwcm9jZXNzUkZDMjgyMihzKSB7XG4gICAgICAgIC8vIFJlbW92ZSBjb21tZW50cyBhbmQgZm9sZGluZyB3aGl0ZXNwYWNlIGFuZCByZXBsYWNlIG11bHRpcGxlLXNwYWNlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG4gICAgICAgIHJldHVybiBzLnJlcGxhY2UoL1xcKFteKV0qXFwpfFtcXG5cXHRdL2csICcgJykucmVwbGFjZSgvKFxcc1xccyspL2csICcgJykucmVwbGFjZSgvXlxcc1xccyovLCAnJykucmVwbGFjZSgvXFxzXFxzKiQvLCAnJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2hlY2tXZWVrZGF5KHdlZWtkYXlTdHIsIHBhcnNlZElucHV0LCBjb25maWcpIHtcbiAgICAgICAgaWYgKHdlZWtkYXlTdHIpIHtcbiAgICAgICAgICAgIC8vIFRPRE86IFJlcGxhY2UgdGhlIHZhbmlsbGEgSlMgRGF0ZSBvYmplY3Qgd2l0aCBhbiBpbmRlcGVudGVudCBkYXktb2Ytd2VlayBjaGVjay5cbiAgICAgICAgICAgIHZhciB3ZWVrZGF5UHJvdmlkZWQgPSBkZWZhdWx0TG9jYWxlV2Vla2RheXNTaG9ydC5pbmRleE9mKHdlZWtkYXlTdHIpLFxuICAgICAgICAgICAgICAgIHdlZWtkYXlBY3R1YWwgPSBuZXcgRGF0ZShwYXJzZWRJbnB1dFswXSwgcGFyc2VkSW5wdXRbMV0sIHBhcnNlZElucHV0WzJdKS5nZXREYXkoKTtcbiAgICAgICAgICAgIGlmICh3ZWVrZGF5UHJvdmlkZWQgIT09IHdlZWtkYXlBY3R1YWwpIHtcbiAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS53ZWVrZGF5TWlzbWF0Y2ggPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgb2JzT2Zmc2V0cyA9IHtcbiAgICAgICAgVVQ6IDAsXG4gICAgICAgIEdNVDogMCxcbiAgICAgICAgRURUOiAtNCAqIDYwLFxuICAgICAgICBFU1Q6IC01ICogNjAsXG4gICAgICAgIENEVDogLTUgKiA2MCxcbiAgICAgICAgQ1NUOiAtNiAqIDYwLFxuICAgICAgICBNRFQ6IC02ICogNjAsXG4gICAgICAgIE1TVDogLTcgKiA2MCxcbiAgICAgICAgUERUOiAtNyAqIDYwLFxuICAgICAgICBQU1Q6IC04ICogNjBcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gY2FsY3VsYXRlT2Zmc2V0KG9ic09mZnNldCwgbWlsaXRhcnlPZmZzZXQsIG51bU9mZnNldCkge1xuICAgICAgICBpZiAob2JzT2Zmc2V0KSB7XG4gICAgICAgICAgICByZXR1cm4gb2JzT2Zmc2V0c1tvYnNPZmZzZXRdO1xuICAgICAgICB9IGVsc2UgaWYgKG1pbGl0YXJ5T2Zmc2V0KSB7XG4gICAgICAgICAgICAvLyB0aGUgb25seSBhbGxvd2VkIG1pbGl0YXJ5IHR6IGlzIFpcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGhtID0gcGFyc2VJbnQobnVtT2Zmc2V0LCAxMCk7XG4gICAgICAgICAgICB2YXIgbSA9IGhtICUgMTAwLCBoID0gKGhtIC0gbSkgLyAxMDA7XG4gICAgICAgICAgICByZXR1cm4gaCAqIDYwICsgbTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGRhdGUgYW5kIHRpbWUgZnJvbSByZWYgMjgyMiBmb3JtYXRcbiAgICBmdW5jdGlvbiBjb25maWdGcm9tUkZDMjgyMihjb25maWcpIHtcbiAgICAgICAgdmFyIG1hdGNoID0gcmZjMjgyMi5leGVjKHByZXByb2Nlc3NSRkMyODIyKGNvbmZpZy5faSkpO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHZhciBwYXJzZWRBcnJheSA9IGV4dHJhY3RGcm9tUkZDMjgyMlN0cmluZ3MobWF0Y2hbNF0sIG1hdGNoWzNdLCBtYXRjaFsyXSwgbWF0Y2hbNV0sIG1hdGNoWzZdLCBtYXRjaFs3XSk7XG4gICAgICAgICAgICBpZiAoIWNoZWNrV2Vla2RheShtYXRjaFsxXSwgcGFyc2VkQXJyYXksIGNvbmZpZykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbmZpZy5fYSA9IHBhcnNlZEFycmF5O1xuICAgICAgICAgICAgY29uZmlnLl90em0gPSBjYWxjdWxhdGVPZmZzZXQobWF0Y2hbOF0sIG1hdGNoWzldLCBtYXRjaFsxMF0pO1xuXG4gICAgICAgICAgICBjb25maWcuX2QgPSBjcmVhdGVVVENEYXRlLmFwcGx5KG51bGwsIGNvbmZpZy5fYSk7XG4gICAgICAgICAgICBjb25maWcuX2Quc2V0VVRDTWludXRlcyhjb25maWcuX2QuZ2V0VVRDTWludXRlcygpIC0gY29uZmlnLl90em0pO1xuXG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5yZmMyODIyID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gZGF0ZSBmcm9tIGlzbyBmb3JtYXQgb3IgZmFsbGJhY2tcbiAgICBmdW5jdGlvbiBjb25maWdGcm9tU3RyaW5nKGNvbmZpZykge1xuICAgICAgICB2YXIgbWF0Y2hlZCA9IGFzcE5ldEpzb25SZWdleC5leGVjKGNvbmZpZy5faSk7XG5cbiAgICAgICAgaWYgKG1hdGNoZWQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKCttYXRjaGVkWzFdKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbmZpZ0Zyb21JU08oY29uZmlnKTtcbiAgICAgICAgaWYgKGNvbmZpZy5faXNWYWxpZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBjb25maWcuX2lzVmFsaWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25maWdGcm9tUkZDMjgyMihjb25maWcpO1xuICAgICAgICBpZiAoY29uZmlnLl9pc1ZhbGlkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgZGVsZXRlIGNvbmZpZy5faXNWYWxpZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZpbmFsIGF0dGVtcHQsIHVzZSBJbnB1dCBGYWxsYmFja1xuICAgICAgICBob29rcy5jcmVhdGVGcm9tSW5wdXRGYWxsYmFjayhjb25maWcpO1xuICAgIH1cblxuICAgIGhvb2tzLmNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrID0gZGVwcmVjYXRlKFxuICAgICAgICAndmFsdWUgcHJvdmlkZWQgaXMgbm90IGluIGEgcmVjb2duaXplZCBSRkMyODIyIG9yIElTTyBmb3JtYXQuIG1vbWVudCBjb25zdHJ1Y3Rpb24gZmFsbHMgYmFjayB0byBqcyBEYXRlKCksICcgK1xuICAgICAgICAnd2hpY2ggaXMgbm90IHJlbGlhYmxlIGFjcm9zcyBhbGwgYnJvd3NlcnMgYW5kIHZlcnNpb25zLiBOb24gUkZDMjgyMi9JU08gZGF0ZSBmb3JtYXRzIGFyZSAnICtcbiAgICAgICAgJ2Rpc2NvdXJhZ2VkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gYW4gdXBjb21pbmcgbWFqb3IgcmVsZWFzZS4gUGxlYXNlIHJlZmVyIHRvICcgK1xuICAgICAgICAnaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9qcy1kYXRlLyBmb3IgbW9yZSBpbmZvLicsXG4gICAgICAgIGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKGNvbmZpZy5faSArIChjb25maWcuX3VzZVVUQyA/ICcgVVRDJyA6ICcnKSk7XG4gICAgICAgIH1cbiAgICApO1xuXG4gICAgLy8gY29uc3RhbnQgdGhhdCByZWZlcnMgdG8gdGhlIElTTyBzdGFuZGFyZFxuICAgIGhvb2tzLklTT184NjAxID0gZnVuY3Rpb24gKCkge307XG5cbiAgICAvLyBjb25zdGFudCB0aGF0IHJlZmVycyB0byB0aGUgUkZDIDI4MjIgZm9ybVxuICAgIGhvb2tzLlJGQ18yODIyID0gZnVuY3Rpb24gKCkge307XG5cbiAgICAvLyBkYXRlIGZyb20gc3RyaW5nIGFuZCBmb3JtYXQgc3RyaW5nXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdChjb25maWcpIHtcbiAgICAgICAgLy8gVE9ETzogTW92ZSB0aGlzIHRvIGFub3RoZXIgcGFydCBvZiB0aGUgY3JlYXRpb24gZmxvdyB0byBwcmV2ZW50IGNpcmN1bGFyIGRlcHNcbiAgICAgICAgaWYgKGNvbmZpZy5fZiA9PT0gaG9va3MuSVNPXzg2MDEpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21JU08oY29uZmlnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29uZmlnLl9mID09PSBob29rcy5SRkNfMjgyMikge1xuICAgICAgICAgICAgY29uZmlnRnJvbVJGQzI4MjIoY29uZmlnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25maWcuX2EgPSBbXTtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuZW1wdHkgPSB0cnVlO1xuXG4gICAgICAgIC8vIFRoaXMgYXJyYXkgaXMgdXNlZCB0byBtYWtlIGEgRGF0ZSwgZWl0aGVyIHdpdGggYG5ldyBEYXRlYCBvciBgRGF0ZS5VVENgXG4gICAgICAgIHZhciBzdHJpbmcgPSAnJyArIGNvbmZpZy5faSxcbiAgICAgICAgICAgIGksIHBhcnNlZElucHV0LCB0b2tlbnMsIHRva2VuLCBza2lwcGVkLFxuICAgICAgICAgICAgc3RyaW5nTGVuZ3RoID0gc3RyaW5nLmxlbmd0aCxcbiAgICAgICAgICAgIHRvdGFsUGFyc2VkSW5wdXRMZW5ndGggPSAwO1xuXG4gICAgICAgIHRva2VucyA9IGV4cGFuZEZvcm1hdChjb25maWcuX2YsIGNvbmZpZy5fbG9jYWxlKS5tYXRjaChmb3JtYXR0aW5nVG9rZW5zKSB8fCBbXTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0b2tlbiA9IHRva2Vuc1tpXTtcbiAgICAgICAgICAgIHBhcnNlZElucHV0ID0gKHN0cmluZy5tYXRjaChnZXRQYXJzZVJlZ2V4Rm9yVG9rZW4odG9rZW4sIGNvbmZpZykpIHx8IFtdKVswXTtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCd0b2tlbicsIHRva2VuLCAncGFyc2VkSW5wdXQnLCBwYXJzZWRJbnB1dCxcbiAgICAgICAgICAgIC8vICAgICAgICAgJ3JlZ2V4JywgZ2V0UGFyc2VSZWdleEZvclRva2VuKHRva2VuLCBjb25maWcpKTtcbiAgICAgICAgICAgIGlmIChwYXJzZWRJbnB1dCkge1xuICAgICAgICAgICAgICAgIHNraXBwZWQgPSBzdHJpbmcuc3Vic3RyKDAsIHN0cmluZy5pbmRleE9mKHBhcnNlZElucHV0KSk7XG4gICAgICAgICAgICAgICAgaWYgKHNraXBwZWQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS51bnVzZWRJbnB1dC5wdXNoKHNraXBwZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcuc2xpY2Uoc3RyaW5nLmluZGV4T2YocGFyc2VkSW5wdXQpICsgcGFyc2VkSW5wdXQubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICB0b3RhbFBhcnNlZElucHV0TGVuZ3RoICs9IHBhcnNlZElucHV0Lmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGRvbid0IHBhcnNlIGlmIGl0J3Mgbm90IGEga25vd24gdG9rZW5cbiAgICAgICAgICAgIGlmIChmb3JtYXRUb2tlbkZ1bmN0aW9uc1t0b2tlbl0pIHtcbiAgICAgICAgICAgICAgICBpZiAocGFyc2VkSW5wdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuZW1wdHkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZFRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYWRkVGltZVRvQXJyYXlGcm9tVG9rZW4odG9rZW4sIHBhcnNlZElucHV0LCBjb25maWcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY29uZmlnLl9zdHJpY3QgJiYgIXBhcnNlZElucHV0KSB7XG4gICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykudW51c2VkVG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gYWRkIHJlbWFpbmluZyB1bnBhcnNlZCBpbnB1dCBsZW5ndGggdG8gdGhlIHN0cmluZ1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5jaGFyc0xlZnRPdmVyID0gc3RyaW5nTGVuZ3RoIC0gdG90YWxQYXJzZWRJbnB1dExlbmd0aDtcbiAgICAgICAgaWYgKHN0cmluZy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS51bnVzZWRJbnB1dC5wdXNoKHN0cmluZyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjbGVhciBfMTJoIGZsYWcgaWYgaG91ciBpcyA8PSAxMlxuICAgICAgICBpZiAoY29uZmlnLl9hW0hPVVJdIDw9IDEyICYmXG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID09PSB0cnVlICYmXG4gICAgICAgICAgICBjb25maWcuX2FbSE9VUl0gPiAwKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykucGFyc2VkRGF0ZVBhcnRzID0gY29uZmlnLl9hLnNsaWNlKDApO1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5tZXJpZGllbSA9IGNvbmZpZy5fbWVyaWRpZW07XG4gICAgICAgIC8vIGhhbmRsZSBtZXJpZGllbVxuICAgICAgICBjb25maWcuX2FbSE9VUl0gPSBtZXJpZGllbUZpeFdyYXAoY29uZmlnLl9sb2NhbGUsIGNvbmZpZy5fYVtIT1VSXSwgY29uZmlnLl9tZXJpZGllbSk7XG5cbiAgICAgICAgY29uZmlnRnJvbUFycmF5KGNvbmZpZyk7XG4gICAgICAgIGNoZWNrT3ZlcmZsb3coY29uZmlnKTtcbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIG1lcmlkaWVtRml4V3JhcCAobG9jYWxlLCBob3VyLCBtZXJpZGllbSkge1xuICAgICAgICB2YXIgaXNQbTtcblxuICAgICAgICBpZiAobWVyaWRpZW0gPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gbm90aGluZyB0byBkb1xuICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxvY2FsZS5tZXJpZGllbUhvdXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsZS5tZXJpZGllbUhvdXIoaG91ciwgbWVyaWRpZW0pO1xuICAgICAgICB9IGVsc2UgaWYgKGxvY2FsZS5pc1BNICE9IG51bGwpIHtcbiAgICAgICAgICAgIC8vIEZhbGxiYWNrXG4gICAgICAgICAgICBpc1BtID0gbG9jYWxlLmlzUE0obWVyaWRpZW0pO1xuICAgICAgICAgICAgaWYgKGlzUG0gJiYgaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciArPSAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaXNQbSAmJiBob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyB0aGlzIGlzIG5vdCBzdXBwb3NlZCB0byBoYXBwZW5cbiAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gZGF0ZSBmcm9tIHN0cmluZyBhbmQgYXJyYXkgb2YgZm9ybWF0IHN0cmluZ3NcbiAgICBmdW5jdGlvbiBjb25maWdGcm9tU3RyaW5nQW5kQXJyYXkoY29uZmlnKSB7XG4gICAgICAgIHZhciB0ZW1wQ29uZmlnLFxuICAgICAgICAgICAgYmVzdE1vbWVudCxcblxuICAgICAgICAgICAgc2NvcmVUb0JlYXQsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgY3VycmVudFNjb3JlO1xuXG4gICAgICAgIGlmIChjb25maWcuX2YubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pbnZhbGlkRm9ybWF0ID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKE5hTik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY29uZmlnLl9mLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjdXJyZW50U2NvcmUgPSAwO1xuICAgICAgICAgICAgdGVtcENvbmZpZyA9IGNvcHlDb25maWcoe30sIGNvbmZpZyk7XG4gICAgICAgICAgICBpZiAoY29uZmlnLl91c2VVVEMgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRlbXBDb25maWcuX3VzZVVUQyA9IGNvbmZpZy5fdXNlVVRDO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGVtcENvbmZpZy5fZiA9IGNvbmZpZy5fZltpXTtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQodGVtcENvbmZpZyk7XG5cbiAgICAgICAgICAgIGlmICghaXNWYWxpZCh0ZW1wQ29uZmlnKSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBpZiB0aGVyZSBpcyBhbnkgaW5wdXQgdGhhdCB3YXMgbm90IHBhcnNlZCBhZGQgYSBwZW5hbHR5IGZvciB0aGF0IGZvcm1hdFxuICAgICAgICAgICAgY3VycmVudFNjb3JlICs9IGdldFBhcnNpbmdGbGFncyh0ZW1wQ29uZmlnKS5jaGFyc0xlZnRPdmVyO1xuXG4gICAgICAgICAgICAvL29yIHRva2Vuc1xuICAgICAgICAgICAgY3VycmVudFNjb3JlICs9IGdldFBhcnNpbmdGbGFncyh0ZW1wQ29uZmlnKS51bnVzZWRUb2tlbnMubGVuZ3RoICogMTA7XG5cbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyh0ZW1wQ29uZmlnKS5zY29yZSA9IGN1cnJlbnRTY29yZTtcblxuICAgICAgICAgICAgaWYgKHNjb3JlVG9CZWF0ID09IG51bGwgfHwgY3VycmVudFNjb3JlIDwgc2NvcmVUb0JlYXQpIHtcbiAgICAgICAgICAgICAgICBzY29yZVRvQmVhdCA9IGN1cnJlbnRTY29yZTtcbiAgICAgICAgICAgICAgICBiZXN0TW9tZW50ID0gdGVtcENvbmZpZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGV4dGVuZChjb25maWcsIGJlc3RNb21lbnQgfHwgdGVtcENvbmZpZyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbU9iamVjdChjb25maWcpIHtcbiAgICAgICAgaWYgKGNvbmZpZy5fZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGkgPSBub3JtYWxpemVPYmplY3RVbml0cyhjb25maWcuX2kpO1xuICAgICAgICBjb25maWcuX2EgPSBtYXAoW2kueWVhciwgaS5tb250aCwgaS5kYXkgfHwgaS5kYXRlLCBpLmhvdXIsIGkubWludXRlLCBpLnNlY29uZCwgaS5taWxsaXNlY29uZF0sIGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgIHJldHVybiBvYmogJiYgcGFyc2VJbnQob2JqLCAxMCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbmZpZ0Zyb21BcnJheShjb25maWcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUZyb21Db25maWcgKGNvbmZpZykge1xuICAgICAgICB2YXIgcmVzID0gbmV3IE1vbWVudChjaGVja092ZXJmbG93KHByZXBhcmVDb25maWcoY29uZmlnKSkpO1xuICAgICAgICBpZiAocmVzLl9uZXh0RGF5KSB7XG4gICAgICAgICAgICAvLyBBZGRpbmcgaXMgc21hcnQgZW5vdWdoIGFyb3VuZCBEU1RcbiAgICAgICAgICAgIHJlcy5hZGQoMSwgJ2QnKTtcbiAgICAgICAgICAgIHJlcy5fbmV4dERheSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJlcGFyZUNvbmZpZyAoY29uZmlnKSB7XG4gICAgICAgIHZhciBpbnB1dCA9IGNvbmZpZy5faSxcbiAgICAgICAgICAgIGZvcm1hdCA9IGNvbmZpZy5fZjtcblxuICAgICAgICBjb25maWcuX2xvY2FsZSA9IGNvbmZpZy5fbG9jYWxlIHx8IGdldExvY2FsZShjb25maWcuX2wpO1xuXG4gICAgICAgIGlmIChpbnB1dCA9PT0gbnVsbCB8fCAoZm9ybWF0ID09PSB1bmRlZmluZWQgJiYgaW5wdXQgPT09ICcnKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUludmFsaWQoe251bGxJbnB1dDogdHJ1ZX0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGNvbmZpZy5faSA9IGlucHV0ID0gY29uZmlnLl9sb2NhbGUucHJlcGFyc2UoaW5wdXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzTW9tZW50KGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBNb21lbnQoY2hlY2tPdmVyZmxvdyhpbnB1dCkpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRGF0ZShpbnB1dCkpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IGlucHV0O1xuICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkoZm9ybWF0KSkge1xuICAgICAgICAgICAgY29uZmlnRnJvbVN0cmluZ0FuZEFycmF5KGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSBpZiAoZm9ybWF0KSB7XG4gICAgICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KGNvbmZpZyk7XG4gICAgICAgIH0gIGVsc2Uge1xuICAgICAgICAgICAgY29uZmlnRnJvbUlucHV0KGNvbmZpZyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzVmFsaWQoY29uZmlnKSkge1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb25maWc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbUlucHV0KGNvbmZpZykge1xuICAgICAgICB2YXIgaW5wdXQgPSBjb25maWcuX2k7XG4gICAgICAgIGlmIChpc1VuZGVmaW5lZChpbnB1dCkpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKGhvb2tzLm5vdygpKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0RhdGUoaW5wdXQpKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShpbnB1dC52YWx1ZU9mKCkpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21TdHJpbmcoY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KGlucHV0KSkge1xuICAgICAgICAgICAgY29uZmlnLl9hID0gbWFwKGlucHV0LnNsaWNlKDApLCBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KG9iaiwgMTApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25maWdGcm9tQXJyYXkoY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc09iamVjdChpbnB1dCkpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21PYmplY3QoY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc051bWJlcihpbnB1dCkpIHtcbiAgICAgICAgICAgIC8vIGZyb20gbWlsbGlzZWNvbmRzXG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShpbnB1dCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBob29rcy5jcmVhdGVGcm9tSW5wdXRGYWxsYmFjayhjb25maWcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlTG9jYWxPclVUQyAoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QsIGlzVVRDKSB7XG4gICAgICAgIHZhciBjID0ge307XG5cbiAgICAgICAgaWYgKGxvY2FsZSA9PT0gdHJ1ZSB8fCBsb2NhbGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBzdHJpY3QgPSBsb2NhbGU7XG4gICAgICAgICAgICBsb2NhbGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoKGlzT2JqZWN0KGlucHV0KSAmJiBpc09iamVjdEVtcHR5KGlucHV0KSkgfHxcbiAgICAgICAgICAgICAgICAoaXNBcnJheShpbnB1dCkgJiYgaW5wdXQubGVuZ3RoID09PSAwKSkge1xuICAgICAgICAgICAgaW5wdXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gb2JqZWN0IGNvbnN0cnVjdGlvbiBtdXN0IGJlIGRvbmUgdGhpcyB3YXkuXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L2lzc3Vlcy8xNDIzXG4gICAgICAgIGMuX2lzQU1vbWVudE9iamVjdCA9IHRydWU7XG4gICAgICAgIGMuX3VzZVVUQyA9IGMuX2lzVVRDID0gaXNVVEM7XG4gICAgICAgIGMuX2wgPSBsb2NhbGU7XG4gICAgICAgIGMuX2kgPSBpbnB1dDtcbiAgICAgICAgYy5fZiA9IGZvcm1hdDtcbiAgICAgICAgYy5fc3RyaWN0ID0gc3RyaWN0O1xuXG4gICAgICAgIHJldHVybiBjcmVhdGVGcm9tQ29uZmlnKGMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUxvY2FsIChpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWxPclVUQyhpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCwgZmFsc2UpO1xuICAgIH1cblxuICAgIHZhciBwcm90b3R5cGVNaW4gPSBkZXByZWNhdGUoXG4gICAgICAgICdtb21lbnQoKS5taW4gaXMgZGVwcmVjYXRlZCwgdXNlIG1vbWVudC5tYXggaW5zdGVhZC4gaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9taW4tbWF4LycsXG4gICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBvdGhlciA9IGNyZWF0ZUxvY2FsLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICBpZiAodGhpcy5pc1ZhbGlkKCkgJiYgb3RoZXIuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG90aGVyIDwgdGhpcyA/IHRoaXMgOiBvdGhlcjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUludmFsaWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICk7XG5cbiAgICB2YXIgcHJvdG90eXBlTWF4ID0gZGVwcmVjYXRlKFxuICAgICAgICAnbW9tZW50KCkubWF4IGlzIGRlcHJlY2F0ZWQsIHVzZSBtb21lbnQubWluIGluc3RlYWQuIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvbWluLW1heC8nLFxuICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgb3RoZXIgPSBjcmVhdGVMb2NhbC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNWYWxpZCgpICYmIG90aGVyLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvdGhlciA+IHRoaXMgPyB0aGlzIDogb3RoZXI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVJbnZhbGlkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICApO1xuXG4gICAgLy8gUGljayBhIG1vbWVudCBtIGZyb20gbW9tZW50cyBzbyB0aGF0IG1bZm5dKG90aGVyKSBpcyB0cnVlIGZvciBhbGxcbiAgICAvLyBvdGhlci4gVGhpcyByZWxpZXMgb24gdGhlIGZ1bmN0aW9uIGZuIHRvIGJlIHRyYW5zaXRpdmUuXG4gICAgLy9cbiAgICAvLyBtb21lbnRzIHNob3VsZCBlaXRoZXIgYmUgYW4gYXJyYXkgb2YgbW9tZW50IG9iamVjdHMgb3IgYW4gYXJyYXksIHdob3NlXG4gICAgLy8gZmlyc3QgZWxlbWVudCBpcyBhbiBhcnJheSBvZiBtb21lbnQgb2JqZWN0cy5cbiAgICBmdW5jdGlvbiBwaWNrQnkoZm4sIG1vbWVudHMpIHtcbiAgICAgICAgdmFyIHJlcywgaTtcbiAgICAgICAgaWYgKG1vbWVudHMubGVuZ3RoID09PSAxICYmIGlzQXJyYXkobW9tZW50c1swXSkpIHtcbiAgICAgICAgICAgIG1vbWVudHMgPSBtb21lbnRzWzBdO1xuICAgICAgICB9XG4gICAgICAgIGlmICghbW9tZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVMb2NhbCgpO1xuICAgICAgICB9XG4gICAgICAgIHJlcyA9IG1vbWVudHNbMF07XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBtb21lbnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBpZiAoIW1vbWVudHNbaV0uaXNWYWxpZCgpIHx8IG1vbWVudHNbaV1bZm5dKHJlcykpIHtcbiAgICAgICAgICAgICAgICByZXMgPSBtb21lbnRzW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgLy8gVE9ETzogVXNlIFtdLnNvcnQgaW5zdGVhZD9cbiAgICBmdW5jdGlvbiBtaW4gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcblxuICAgICAgICByZXR1cm4gcGlja0J5KCdpc0JlZm9yZScsIGFyZ3MpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1heCAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuXG4gICAgICAgIHJldHVybiBwaWNrQnkoJ2lzQWZ0ZXInLCBhcmdzKTtcbiAgICB9XG5cbiAgICB2YXIgbm93ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gRGF0ZS5ub3cgPyBEYXRlLm5vdygpIDogKyhuZXcgRGF0ZSgpKTtcbiAgICB9O1xuXG4gICAgdmFyIG9yZGVyaW5nID0gWyd5ZWFyJywgJ3F1YXJ0ZXInLCAnbW9udGgnLCAnd2VlaycsICdkYXknLCAnaG91cicsICdtaW51dGUnLCAnc2Vjb25kJywgJ21pbGxpc2Vjb25kJ107XG5cbiAgICBmdW5jdGlvbiBpc0R1cmF0aW9uVmFsaWQobSkge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gbSkge1xuICAgICAgICAgICAgaWYgKCEoaW5kZXhPZi5jYWxsKG9yZGVyaW5nLCBrZXkpICE9PSAtMSAmJiAobVtrZXldID09IG51bGwgfHwgIWlzTmFOKG1ba2V5XSkpKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB1bml0SGFzRGVjaW1hbCA9IGZhbHNlO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9yZGVyaW5nLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBpZiAobVtvcmRlcmluZ1tpXV0pIHtcbiAgICAgICAgICAgICAgICBpZiAodW5pdEhhc0RlY2ltYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBvbmx5IGFsbG93IG5vbi1pbnRlZ2VycyBmb3Igc21hbGxlc3QgdW5pdFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocGFyc2VGbG9hdChtW29yZGVyaW5nW2ldXSkgIT09IHRvSW50KG1bb3JkZXJpbmdbaV1dKSkge1xuICAgICAgICAgICAgICAgICAgICB1bml0SGFzRGVjaW1hbCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNWYWxpZCQxKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNWYWxpZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVJbnZhbGlkJDEoKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVEdXJhdGlvbihOYU4pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIER1cmF0aW9uIChkdXJhdGlvbikge1xuICAgICAgICB2YXIgbm9ybWFsaXplZElucHV0ID0gbm9ybWFsaXplT2JqZWN0VW5pdHMoZHVyYXRpb24pLFxuICAgICAgICAgICAgeWVhcnMgPSBub3JtYWxpemVkSW5wdXQueWVhciB8fCAwLFxuICAgICAgICAgICAgcXVhcnRlcnMgPSBub3JtYWxpemVkSW5wdXQucXVhcnRlciB8fCAwLFxuICAgICAgICAgICAgbW9udGhzID0gbm9ybWFsaXplZElucHV0Lm1vbnRoIHx8IDAsXG4gICAgICAgICAgICB3ZWVrcyA9IG5vcm1hbGl6ZWRJbnB1dC53ZWVrIHx8IG5vcm1hbGl6ZWRJbnB1dC5pc29XZWVrIHx8IDAsXG4gICAgICAgICAgICBkYXlzID0gbm9ybWFsaXplZElucHV0LmRheSB8fCAwLFxuICAgICAgICAgICAgaG91cnMgPSBub3JtYWxpemVkSW5wdXQuaG91ciB8fCAwLFxuICAgICAgICAgICAgbWludXRlcyA9IG5vcm1hbGl6ZWRJbnB1dC5taW51dGUgfHwgMCxcbiAgICAgICAgICAgIHNlY29uZHMgPSBub3JtYWxpemVkSW5wdXQuc2Vjb25kIHx8IDAsXG4gICAgICAgICAgICBtaWxsaXNlY29uZHMgPSBub3JtYWxpemVkSW5wdXQubWlsbGlzZWNvbmQgfHwgMDtcblxuICAgICAgICB0aGlzLl9pc1ZhbGlkID0gaXNEdXJhdGlvblZhbGlkKG5vcm1hbGl6ZWRJbnB1dCk7XG5cbiAgICAgICAgLy8gcmVwcmVzZW50YXRpb24gZm9yIGRhdGVBZGRSZW1vdmVcbiAgICAgICAgdGhpcy5fbWlsbGlzZWNvbmRzID0gK21pbGxpc2Vjb25kcyArXG4gICAgICAgICAgICBzZWNvbmRzICogMWUzICsgLy8gMTAwMFxuICAgICAgICAgICAgbWludXRlcyAqIDZlNCArIC8vIDEwMDAgKiA2MFxuICAgICAgICAgICAgaG91cnMgKiAxMDAwICogNjAgKiA2MDsgLy91c2luZyAxMDAwICogNjAgKiA2MCBpbnN0ZWFkIG9mIDM2ZTUgdG8gYXZvaWQgZmxvYXRpbmcgcG9pbnQgcm91bmRpbmcgZXJyb3JzIGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L2lzc3Vlcy8yOTc4XG4gICAgICAgIC8vIEJlY2F1c2Ugb2YgZGF0ZUFkZFJlbW92ZSB0cmVhdHMgMjQgaG91cnMgYXMgZGlmZmVyZW50IGZyb20gYVxuICAgICAgICAvLyBkYXkgd2hlbiB3b3JraW5nIGFyb3VuZCBEU1QsIHdlIG5lZWQgdG8gc3RvcmUgdGhlbSBzZXBhcmF0ZWx5XG4gICAgICAgIHRoaXMuX2RheXMgPSArZGF5cyArXG4gICAgICAgICAgICB3ZWVrcyAqIDc7XG4gICAgICAgIC8vIEl0IGlzIGltcG9zc2libGUgdG8gdHJhbnNsYXRlIG1vbnRocyBpbnRvIGRheXMgd2l0aG91dCBrbm93aW5nXG4gICAgICAgIC8vIHdoaWNoIG1vbnRocyB5b3UgYXJlIGFyZSB0YWxraW5nIGFib3V0LCBzbyB3ZSBoYXZlIHRvIHN0b3JlXG4gICAgICAgIC8vIGl0IHNlcGFyYXRlbHkuXG4gICAgICAgIHRoaXMuX21vbnRocyA9ICttb250aHMgK1xuICAgICAgICAgICAgcXVhcnRlcnMgKiAzICtcbiAgICAgICAgICAgIHllYXJzICogMTI7XG5cbiAgICAgICAgdGhpcy5fZGF0YSA9IHt9O1xuXG4gICAgICAgIHRoaXMuX2xvY2FsZSA9IGdldExvY2FsZSgpO1xuXG4gICAgICAgIHRoaXMuX2J1YmJsZSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRHVyYXRpb24gKG9iaikge1xuICAgICAgICByZXR1cm4gb2JqIGluc3RhbmNlb2YgRHVyYXRpb247XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWJzUm91bmQgKG51bWJlcikge1xuICAgICAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoLTEgKiBudW1iZXIpICogLTE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChudW1iZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgZnVuY3Rpb24gb2Zmc2V0ICh0b2tlbiwgc2VwYXJhdG9yKSB7XG4gICAgICAgIGFkZEZvcm1hdFRva2VuKHRva2VuLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgb2Zmc2V0ID0gdGhpcy51dGNPZmZzZXQoKTtcbiAgICAgICAgICAgIHZhciBzaWduID0gJysnO1xuICAgICAgICAgICAgaWYgKG9mZnNldCA8IDApIHtcbiAgICAgICAgICAgICAgICBvZmZzZXQgPSAtb2Zmc2V0O1xuICAgICAgICAgICAgICAgIHNpZ24gPSAnLSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc2lnbiArIHplcm9GaWxsKH5+KG9mZnNldCAvIDYwKSwgMikgKyBzZXBhcmF0b3IgKyB6ZXJvRmlsbCh+fihvZmZzZXQpICUgNjAsIDIpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBvZmZzZXQoJ1onLCAnOicpO1xuICAgIG9mZnNldCgnWlonLCAnJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdaJywgIG1hdGNoU2hvcnRPZmZzZXQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1paJywgbWF0Y2hTaG9ydE9mZnNldCk7XG4gICAgYWRkUGFyc2VUb2tlbihbJ1onLCAnWlonXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZy5fdXNlVVRDID0gdHJ1ZTtcbiAgICAgICAgY29uZmlnLl90em0gPSBvZmZzZXRGcm9tU3RyaW5nKG1hdGNoU2hvcnRPZmZzZXQsIGlucHV0KTtcbiAgICB9KTtcblxuICAgIC8vIEhFTFBFUlNcblxuICAgIC8vIHRpbWV6b25lIGNodW5rZXJcbiAgICAvLyAnKzEwOjAwJyA+IFsnMTAnLCAgJzAwJ11cbiAgICAvLyAnLTE1MzAnICA+IFsnLTE1JywgJzMwJ11cbiAgICB2YXIgY2h1bmtPZmZzZXQgPSAvKFtcXCtcXC1dfFxcZFxcZCkvZ2k7XG5cbiAgICBmdW5jdGlvbiBvZmZzZXRGcm9tU3RyaW5nKG1hdGNoZXIsIHN0cmluZykge1xuICAgICAgICB2YXIgbWF0Y2hlcyA9IChzdHJpbmcgfHwgJycpLm1hdGNoKG1hdGNoZXIpO1xuXG4gICAgICAgIGlmIChtYXRjaGVzID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjaHVuayAgID0gbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdIHx8IFtdO1xuICAgICAgICB2YXIgcGFydHMgICA9IChjaHVuayArICcnKS5tYXRjaChjaHVua09mZnNldCkgfHwgWyctJywgMCwgMF07XG4gICAgICAgIHZhciBtaW51dGVzID0gKyhwYXJ0c1sxXSAqIDYwKSArIHRvSW50KHBhcnRzWzJdKTtcblxuICAgICAgICByZXR1cm4gbWludXRlcyA9PT0gMCA/XG4gICAgICAgICAgMCA6XG4gICAgICAgICAgcGFydHNbMF0gPT09ICcrJyA/IG1pbnV0ZXMgOiAtbWludXRlcztcbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYSBtb21lbnQgZnJvbSBpbnB1dCwgdGhhdCBpcyBsb2NhbC91dGMvem9uZSBlcXVpdmFsZW50IHRvIG1vZGVsLlxuICAgIGZ1bmN0aW9uIGNsb25lV2l0aE9mZnNldChpbnB1dCwgbW9kZWwpIHtcbiAgICAgICAgdmFyIHJlcywgZGlmZjtcbiAgICAgICAgaWYgKG1vZGVsLl9pc1VUQykge1xuICAgICAgICAgICAgcmVzID0gbW9kZWwuY2xvbmUoKTtcbiAgICAgICAgICAgIGRpZmYgPSAoaXNNb21lbnQoaW5wdXQpIHx8IGlzRGF0ZShpbnB1dCkgPyBpbnB1dC52YWx1ZU9mKCkgOiBjcmVhdGVMb2NhbChpbnB1dCkudmFsdWVPZigpKSAtIHJlcy52YWx1ZU9mKCk7XG4gICAgICAgICAgICAvLyBVc2UgbG93LWxldmVsIGFwaSwgYmVjYXVzZSB0aGlzIGZuIGlzIGxvdy1sZXZlbCBhcGkuXG4gICAgICAgICAgICByZXMuX2Quc2V0VGltZShyZXMuX2QudmFsdWVPZigpICsgZGlmZik7XG4gICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQocmVzLCBmYWxzZSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsKGlucHV0KS5sb2NhbCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0RGF0ZU9mZnNldCAobSkge1xuICAgICAgICAvLyBPbiBGaXJlZm94LjI0IERhdGUjZ2V0VGltZXpvbmVPZmZzZXQgcmV0dXJucyBhIGZsb2F0aW5nIHBvaW50LlxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9wdWxsLzE4NzFcbiAgICAgICAgcmV0dXJuIC1NYXRoLnJvdW5kKG0uX2QuZ2V0VGltZXpvbmVPZmZzZXQoKSAvIDE1KSAqIDE1O1xuICAgIH1cblxuICAgIC8vIEhPT0tTXG5cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIHdoZW5ldmVyIGEgbW9tZW50IGlzIG11dGF0ZWQuXG4gICAgLy8gSXQgaXMgaW50ZW5kZWQgdG8ga2VlcCB0aGUgb2Zmc2V0IGluIHN5bmMgd2l0aCB0aGUgdGltZXpvbmUuXG4gICAgaG9va3MudXBkYXRlT2Zmc2V0ID0gZnVuY3Rpb24gKCkge307XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICAvLyBrZWVwTG9jYWxUaW1lID0gdHJ1ZSBtZWFucyBvbmx5IGNoYW5nZSB0aGUgdGltZXpvbmUsIHdpdGhvdXRcbiAgICAvLyBhZmZlY3RpbmcgdGhlIGxvY2FsIGhvdXIuIFNvIDU6MzE6MjYgKzAzMDAgLS1bdXRjT2Zmc2V0KDIsIHRydWUpXS0tPlxuICAgIC8vIDU6MzE6MjYgKzAyMDAgSXQgaXMgcG9zc2libGUgdGhhdCA1OjMxOjI2IGRvZXNuJ3QgZXhpc3Qgd2l0aCBvZmZzZXRcbiAgICAvLyArMDIwMCwgc28gd2UgYWRqdXN0IHRoZSB0aW1lIGFzIG5lZWRlZCwgdG8gYmUgdmFsaWQuXG4gICAgLy9cbiAgICAvLyBLZWVwaW5nIHRoZSB0aW1lIGFjdHVhbGx5IGFkZHMvc3VidHJhY3RzIChvbmUgaG91cilcbiAgICAvLyBmcm9tIHRoZSBhY3R1YWwgcmVwcmVzZW50ZWQgdGltZS4gVGhhdCBpcyB3aHkgd2UgY2FsbCB1cGRhdGVPZmZzZXRcbiAgICAvLyBhIHNlY29uZCB0aW1lLiBJbiBjYXNlIGl0IHdhbnRzIHVzIHRvIGNoYW5nZSB0aGUgb2Zmc2V0IGFnYWluXG4gICAgLy8gX2NoYW5nZUluUHJvZ3Jlc3MgPT0gdHJ1ZSBjYXNlLCB0aGVuIHdlIGhhdmUgdG8gYWRqdXN0LCBiZWNhdXNlXG4gICAgLy8gdGhlcmUgaXMgbm8gc3VjaCB0aW1lIGluIHRoZSBnaXZlbiB0aW1lem9uZS5cbiAgICBmdW5jdGlvbiBnZXRTZXRPZmZzZXQgKGlucHV0LCBrZWVwTG9jYWxUaW1lLCBrZWVwTWludXRlcykge1xuICAgICAgICB2YXIgb2Zmc2V0ID0gdGhpcy5fb2Zmc2V0IHx8IDAsXG4gICAgICAgICAgICBsb2NhbEFkanVzdDtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGlucHV0ID0gb2Zmc2V0RnJvbVN0cmluZyhtYXRjaFNob3J0T2Zmc2V0LCBpbnB1dCk7XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoTWF0aC5hYnMoaW5wdXQpIDwgMTYgJiYgIWtlZXBNaW51dGVzKSB7XG4gICAgICAgICAgICAgICAgaW5wdXQgPSBpbnB1dCAqIDYwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLl9pc1VUQyAmJiBrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxBZGp1c3QgPSBnZXREYXRlT2Zmc2V0KHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fb2Zmc2V0ID0gaW5wdXQ7XG4gICAgICAgICAgICB0aGlzLl9pc1VUQyA9IHRydWU7XG4gICAgICAgICAgICBpZiAobG9jYWxBZGp1c3QgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkKGxvY2FsQWRqdXN0LCAnbScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9mZnNldCAhPT0gaW5wdXQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWtlZXBMb2NhbFRpbWUgfHwgdGhpcy5fY2hhbmdlSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgICAgICAgICBhZGRTdWJ0cmFjdCh0aGlzLCBjcmVhdGVEdXJhdGlvbihpbnB1dCAtIG9mZnNldCwgJ20nKSwgMSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hhbmdlSW5Qcm9ncmVzcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hhbmdlSW5Qcm9ncmVzcyA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faXNVVEMgPyBvZmZzZXQgOiBnZXREYXRlT2Zmc2V0KHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0Wm9uZSAoaW5wdXQsIGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgaW5wdXQgPSAtaW5wdXQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KGlucHV0LCBrZWVwTG9jYWxUaW1lKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gLXRoaXMudXRjT2Zmc2V0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRPZmZzZXRUb1VUQyAoa2VlcExvY2FsVGltZSkge1xuICAgICAgICByZXR1cm4gdGhpcy51dGNPZmZzZXQoMCwga2VlcExvY2FsVGltZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0T2Zmc2V0VG9Mb2NhbCAoa2VlcExvY2FsVGltZSkge1xuICAgICAgICBpZiAodGhpcy5faXNVVEMpIHtcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KDAsIGtlZXBMb2NhbFRpbWUpO1xuICAgICAgICAgICAgdGhpcy5faXNVVEMgPSBmYWxzZTtcblxuICAgICAgICAgICAgaWYgKGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN1YnRyYWN0KGdldERhdGVPZmZzZXQodGhpcyksICdtJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0T2Zmc2V0VG9QYXJzZWRPZmZzZXQgKCkge1xuICAgICAgICBpZiAodGhpcy5fdHptICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KHRoaXMuX3R6bSwgZmFsc2UsIHRydWUpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLl9pID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdmFyIHRab25lID0gb2Zmc2V0RnJvbVN0cmluZyhtYXRjaE9mZnNldCwgdGhpcy5faSk7XG4gICAgICAgICAgICBpZiAodFpvbmUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KHRab25lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KDAsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhc0FsaWduZWRIb3VyT2Zmc2V0IChpbnB1dCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaW5wdXQgPSBpbnB1dCA/IGNyZWF0ZUxvY2FsKGlucHV0KS51dGNPZmZzZXQoKSA6IDA7XG5cbiAgICAgICAgcmV0dXJuICh0aGlzLnV0Y09mZnNldCgpIC0gaW5wdXQpICUgNjAgPT09IDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNEYXlsaWdodFNhdmluZ1RpbWUgKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQoKSA+IHRoaXMuY2xvbmUoKS5tb250aCgwKS51dGNPZmZzZXQoKSB8fFxuICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQoKSA+IHRoaXMuY2xvbmUoKS5tb250aCg1KS51dGNPZmZzZXQoKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRGF5bGlnaHRTYXZpbmdUaW1lU2hpZnRlZCAoKSB7XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQodGhpcy5faXNEU1RTaGlmdGVkKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzRFNUU2hpZnRlZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjID0ge307XG5cbiAgICAgICAgY29weUNvbmZpZyhjLCB0aGlzKTtcbiAgICAgICAgYyA9IHByZXBhcmVDb25maWcoYyk7XG5cbiAgICAgICAgaWYgKGMuX2EpIHtcbiAgICAgICAgICAgIHZhciBvdGhlciA9IGMuX2lzVVRDID8gY3JlYXRlVVRDKGMuX2EpIDogY3JlYXRlTG9jYWwoYy5fYSk7XG4gICAgICAgICAgICB0aGlzLl9pc0RTVFNoaWZ0ZWQgPSB0aGlzLmlzVmFsaWQoKSAmJlxuICAgICAgICAgICAgICAgIGNvbXBhcmVBcnJheXMoYy5fYSwgb3RoZXIudG9BcnJheSgpKSA+IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9pc0RTVFNoaWZ0ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9pc0RTVFNoaWZ0ZWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNMb2NhbCAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/ICF0aGlzLl9pc1VUQyA6IGZhbHNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVXRjT2Zmc2V0ICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpcy5faXNVVEMgOiBmYWxzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1V0YyAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMuX2lzVVRDICYmIHRoaXMuX29mZnNldCA9PT0gMCA6IGZhbHNlO1xuICAgIH1cblxuICAgIC8vIEFTUC5ORVQganNvbiBkYXRlIGZvcm1hdCByZWdleFxuICAgIHZhciBhc3BOZXRSZWdleCA9IC9eKFxcLXxcXCspPyg/OihcXGQqKVsuIF0pPyhcXGQrKVxcOihcXGQrKSg/OlxcOihcXGQrKShcXC5cXGQqKT8pPyQvO1xuXG4gICAgLy8gZnJvbSBodHRwOi8vZG9jcy5jbG9zdXJlLWxpYnJhcnkuZ29vZ2xlY29kZS5jb20vZ2l0L2Nsb3N1cmVfZ29vZ19kYXRlX2RhdGUuanMuc291cmNlLmh0bWxcbiAgICAvLyBzb21ld2hhdCBtb3JlIGluIGxpbmUgd2l0aCA0LjQuMy4yIDIwMDQgc3BlYywgYnV0IGFsbG93cyBkZWNpbWFsIGFueXdoZXJlXG4gICAgLy8gYW5kIGZ1cnRoZXIgbW9kaWZpZWQgdG8gYWxsb3cgZm9yIHN0cmluZ3MgY29udGFpbmluZyBib3RoIHdlZWsgYW5kIGRheVxuICAgIHZhciBpc29SZWdleCA9IC9eKC18XFwrKT9QKD86KFstK10/WzAtOSwuXSopWSk/KD86KFstK10/WzAtOSwuXSopTSk/KD86KFstK10/WzAtOSwuXSopVyk/KD86KFstK10/WzAtOSwuXSopRCk/KD86VCg/OihbLStdP1swLTksLl0qKUgpPyg/OihbLStdP1swLTksLl0qKU0pPyg/OihbLStdP1swLTksLl0qKVMpPyk/JC87XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVEdXJhdGlvbiAoaW5wdXQsIGtleSkge1xuICAgICAgICB2YXIgZHVyYXRpb24gPSBpbnB1dCxcbiAgICAgICAgICAgIC8vIG1hdGNoaW5nIGFnYWluc3QgcmVnZXhwIGlzIGV4cGVuc2l2ZSwgZG8gaXQgb24gZGVtYW5kXG4gICAgICAgICAgICBtYXRjaCA9IG51bGwsXG4gICAgICAgICAgICBzaWduLFxuICAgICAgICAgICAgcmV0LFxuICAgICAgICAgICAgZGlmZlJlcztcblxuICAgICAgICBpZiAoaXNEdXJhdGlvbihpbnB1dCkpIHtcbiAgICAgICAgICAgIGR1cmF0aW9uID0ge1xuICAgICAgICAgICAgICAgIG1zIDogaW5wdXQuX21pbGxpc2Vjb25kcyxcbiAgICAgICAgICAgICAgICBkICA6IGlucHV0Ll9kYXlzLFxuICAgICAgICAgICAgICAgIE0gIDogaW5wdXQuX21vbnRoc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmIChpc051bWJlcihpbnB1dCkpIHtcbiAgICAgICAgICAgIGR1cmF0aW9uID0ge307XG4gICAgICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb25ba2V5XSA9IGlucHV0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkdXJhdGlvbi5taWxsaXNlY29uZHMgPSBpbnB1dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghIShtYXRjaCA9IGFzcE5ldFJlZ2V4LmV4ZWMoaW5wdXQpKSkge1xuICAgICAgICAgICAgc2lnbiA9IChtYXRjaFsxXSA9PT0gJy0nKSA/IC0xIDogMTtcbiAgICAgICAgICAgIGR1cmF0aW9uID0ge1xuICAgICAgICAgICAgICAgIHkgIDogMCxcbiAgICAgICAgICAgICAgICBkICA6IHRvSW50KG1hdGNoW0RBVEVdKSAgICAgICAgICAgICAgICAgICAgICAgICAqIHNpZ24sXG4gICAgICAgICAgICAgICAgaCAgOiB0b0ludChtYXRjaFtIT1VSXSkgICAgICAgICAgICAgICAgICAgICAgICAgKiBzaWduLFxuICAgICAgICAgICAgICAgIG0gIDogdG9JbnQobWF0Y2hbTUlOVVRFXSkgICAgICAgICAgICAgICAgICAgICAgICogc2lnbixcbiAgICAgICAgICAgICAgICBzICA6IHRvSW50KG1hdGNoW1NFQ09ORF0pICAgICAgICAgICAgICAgICAgICAgICAqIHNpZ24sXG4gICAgICAgICAgICAgICAgbXMgOiB0b0ludChhYnNSb3VuZChtYXRjaFtNSUxMSVNFQ09ORF0gKiAxMDAwKSkgKiBzaWduIC8vIHRoZSBtaWxsaXNlY29uZCBkZWNpbWFsIHBvaW50IGlzIGluY2x1ZGVkIGluIHRoZSBtYXRjaFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmICghIShtYXRjaCA9IGlzb1JlZ2V4LmV4ZWMoaW5wdXQpKSkge1xuICAgICAgICAgICAgc2lnbiA9IChtYXRjaFsxXSA9PT0gJy0nKSA/IC0xIDogMTtcbiAgICAgICAgICAgIGR1cmF0aW9uID0ge1xuICAgICAgICAgICAgICAgIHkgOiBwYXJzZUlzbyhtYXRjaFsyXSwgc2lnbiksXG4gICAgICAgICAgICAgICAgTSA6IHBhcnNlSXNvKG1hdGNoWzNdLCBzaWduKSxcbiAgICAgICAgICAgICAgICB3IDogcGFyc2VJc28obWF0Y2hbNF0sIHNpZ24pLFxuICAgICAgICAgICAgICAgIGQgOiBwYXJzZUlzbyhtYXRjaFs1XSwgc2lnbiksXG4gICAgICAgICAgICAgICAgaCA6IHBhcnNlSXNvKG1hdGNoWzZdLCBzaWduKSxcbiAgICAgICAgICAgICAgICBtIDogcGFyc2VJc28obWF0Y2hbN10sIHNpZ24pLFxuICAgICAgICAgICAgICAgIHMgOiBwYXJzZUlzbyhtYXRjaFs4XSwgc2lnbilcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAoZHVyYXRpb24gPT0gbnVsbCkgey8vIGNoZWNrcyBmb3IgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgICAgIGR1cmF0aW9uID0ge307XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGR1cmF0aW9uID09PSAnb2JqZWN0JyAmJiAoJ2Zyb20nIGluIGR1cmF0aW9uIHx8ICd0bycgaW4gZHVyYXRpb24pKSB7XG4gICAgICAgICAgICBkaWZmUmVzID0gbW9tZW50c0RpZmZlcmVuY2UoY3JlYXRlTG9jYWwoZHVyYXRpb24uZnJvbSksIGNyZWF0ZUxvY2FsKGR1cmF0aW9uLnRvKSk7XG5cbiAgICAgICAgICAgIGR1cmF0aW9uID0ge307XG4gICAgICAgICAgICBkdXJhdGlvbi5tcyA9IGRpZmZSZXMubWlsbGlzZWNvbmRzO1xuICAgICAgICAgICAgZHVyYXRpb24uTSA9IGRpZmZSZXMubW9udGhzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0ID0gbmV3IER1cmF0aW9uKGR1cmF0aW9uKTtcblxuICAgICAgICBpZiAoaXNEdXJhdGlvbihpbnB1dCkgJiYgaGFzT3duUHJvcChpbnB1dCwgJ19sb2NhbGUnKSkge1xuICAgICAgICAgICAgcmV0Ll9sb2NhbGUgPSBpbnB1dC5fbG9jYWxlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICBjcmVhdGVEdXJhdGlvbi5mbiA9IER1cmF0aW9uLnByb3RvdHlwZTtcbiAgICBjcmVhdGVEdXJhdGlvbi5pbnZhbGlkID0gY3JlYXRlSW52YWxpZCQxO1xuXG4gICAgZnVuY3Rpb24gcGFyc2VJc28gKGlucCwgc2lnbikge1xuICAgICAgICAvLyBXZSdkIG5vcm1hbGx5IHVzZSB+fmlucCBmb3IgdGhpcywgYnV0IHVuZm9ydHVuYXRlbHkgaXQgYWxzb1xuICAgICAgICAvLyBjb252ZXJ0cyBmbG9hdHMgdG8gaW50cy5cbiAgICAgICAgLy8gaW5wIG1heSBiZSB1bmRlZmluZWQsIHNvIGNhcmVmdWwgY2FsbGluZyByZXBsYWNlIG9uIGl0LlxuICAgICAgICB2YXIgcmVzID0gaW5wICYmIHBhcnNlRmxvYXQoaW5wLnJlcGxhY2UoJywnLCAnLicpKTtcbiAgICAgICAgLy8gYXBwbHkgc2lnbiB3aGlsZSB3ZSdyZSBhdCBpdFxuICAgICAgICByZXR1cm4gKGlzTmFOKHJlcykgPyAwIDogcmVzKSAqIHNpZ247XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcG9zaXRpdmVNb21lbnRzRGlmZmVyZW5jZShiYXNlLCBvdGhlcikge1xuICAgICAgICB2YXIgcmVzID0ge307XG5cbiAgICAgICAgcmVzLm1vbnRocyA9IG90aGVyLm1vbnRoKCkgLSBiYXNlLm1vbnRoKCkgK1xuICAgICAgICAgICAgKG90aGVyLnllYXIoKSAtIGJhc2UueWVhcigpKSAqIDEyO1xuICAgICAgICBpZiAoYmFzZS5jbG9uZSgpLmFkZChyZXMubW9udGhzLCAnTScpLmlzQWZ0ZXIob3RoZXIpKSB7XG4gICAgICAgICAgICAtLXJlcy5tb250aHM7XG4gICAgICAgIH1cblxuICAgICAgICByZXMubWlsbGlzZWNvbmRzID0gK290aGVyIC0gKyhiYXNlLmNsb25lKCkuYWRkKHJlcy5tb250aHMsICdNJykpO1xuXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9tZW50c0RpZmZlcmVuY2UoYmFzZSwgb3RoZXIpIHtcbiAgICAgICAgdmFyIHJlcztcbiAgICAgICAgaWYgKCEoYmFzZS5pc1ZhbGlkKCkgJiYgb3RoZXIuaXNWYWxpZCgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIHttaWxsaXNlY29uZHM6IDAsIG1vbnRoczogMH07XG4gICAgICAgIH1cblxuICAgICAgICBvdGhlciA9IGNsb25lV2l0aE9mZnNldChvdGhlciwgYmFzZSk7XG4gICAgICAgIGlmIChiYXNlLmlzQmVmb3JlKG90aGVyKSkge1xuICAgICAgICAgICAgcmVzID0gcG9zaXRpdmVNb21lbnRzRGlmZmVyZW5jZShiYXNlLCBvdGhlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXMgPSBwb3NpdGl2ZU1vbWVudHNEaWZmZXJlbmNlKG90aGVyLCBiYXNlKTtcbiAgICAgICAgICAgIHJlcy5taWxsaXNlY29uZHMgPSAtcmVzLm1pbGxpc2Vjb25kcztcbiAgICAgICAgICAgIHJlcy5tb250aHMgPSAtcmVzLm1vbnRocztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgLy8gVE9ETzogcmVtb3ZlICduYW1lJyBhcmcgYWZ0ZXIgZGVwcmVjYXRpb24gaXMgcmVtb3ZlZFxuICAgIGZ1bmN0aW9uIGNyZWF0ZUFkZGVyKGRpcmVjdGlvbiwgbmFtZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbCwgcGVyaW9kKSB7XG4gICAgICAgICAgICB2YXIgZHVyLCB0bXA7XG4gICAgICAgICAgICAvL2ludmVydCB0aGUgYXJndW1lbnRzLCBidXQgY29tcGxhaW4gYWJvdXQgaXRcbiAgICAgICAgICAgIGlmIChwZXJpb2QgIT09IG51bGwgJiYgIWlzTmFOKCtwZXJpb2QpKSB7XG4gICAgICAgICAgICAgICAgZGVwcmVjYXRlU2ltcGxlKG5hbWUsICdtb21lbnQoKS4nICsgbmFtZSAgKyAnKHBlcmlvZCwgbnVtYmVyKSBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIG1vbWVudCgpLicgKyBuYW1lICsgJyhudW1iZXIsIHBlcmlvZCkuICcgK1xuICAgICAgICAgICAgICAgICdTZWUgaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9hZGQtaW52ZXJ0ZWQtcGFyYW0vIGZvciBtb3JlIGluZm8uJyk7XG4gICAgICAgICAgICAgICAgdG1wID0gdmFsOyB2YWwgPSBwZXJpb2Q7IHBlcmlvZCA9IHRtcDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFsID0gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycgPyArdmFsIDogdmFsO1xuICAgICAgICAgICAgZHVyID0gY3JlYXRlRHVyYXRpb24odmFsLCBwZXJpb2QpO1xuICAgICAgICAgICAgYWRkU3VidHJhY3QodGhpcywgZHVyLCBkaXJlY3Rpb24pO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkU3VidHJhY3QgKG1vbSwgZHVyYXRpb24sIGlzQWRkaW5nLCB1cGRhdGVPZmZzZXQpIHtcbiAgICAgICAgdmFyIG1pbGxpc2Vjb25kcyA9IGR1cmF0aW9uLl9taWxsaXNlY29uZHMsXG4gICAgICAgICAgICBkYXlzID0gYWJzUm91bmQoZHVyYXRpb24uX2RheXMpLFxuICAgICAgICAgICAgbW9udGhzID0gYWJzUm91bmQoZHVyYXRpb24uX21vbnRocyk7XG5cbiAgICAgICAgaWYgKCFtb20uaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAvLyBObyBvcFxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdXBkYXRlT2Zmc2V0ID0gdXBkYXRlT2Zmc2V0ID09IG51bGwgPyB0cnVlIDogdXBkYXRlT2Zmc2V0O1xuXG4gICAgICAgIGlmIChtb250aHMpIHtcbiAgICAgICAgICAgIHNldE1vbnRoKG1vbSwgZ2V0KG1vbSwgJ01vbnRoJykgKyBtb250aHMgKiBpc0FkZGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRheXMpIHtcbiAgICAgICAgICAgIHNldCQxKG1vbSwgJ0RhdGUnLCBnZXQobW9tLCAnRGF0ZScpICsgZGF5cyAqIGlzQWRkaW5nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWlsbGlzZWNvbmRzKSB7XG4gICAgICAgICAgICBtb20uX2Quc2V0VGltZShtb20uX2QudmFsdWVPZigpICsgbWlsbGlzZWNvbmRzICogaXNBZGRpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh1cGRhdGVPZmZzZXQpIHtcbiAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldChtb20sIGRheXMgfHwgbW9udGhzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBhZGQgICAgICA9IGNyZWF0ZUFkZGVyKDEsICdhZGQnKTtcbiAgICB2YXIgc3VidHJhY3QgPSBjcmVhdGVBZGRlcigtMSwgJ3N1YnRyYWN0Jyk7XG5cbiAgICBmdW5jdGlvbiBnZXRDYWxlbmRhckZvcm1hdChteU1vbWVudCwgbm93KSB7XG4gICAgICAgIHZhciBkaWZmID0gbXlNb21lbnQuZGlmZihub3csICdkYXlzJywgdHJ1ZSk7XG4gICAgICAgIHJldHVybiBkaWZmIDwgLTYgPyAnc2FtZUVsc2UnIDpcbiAgICAgICAgICAgICAgICBkaWZmIDwgLTEgPyAnbGFzdFdlZWsnIDpcbiAgICAgICAgICAgICAgICBkaWZmIDwgMCA/ICdsYXN0RGF5JyA6XG4gICAgICAgICAgICAgICAgZGlmZiA8IDEgPyAnc2FtZURheScgOlxuICAgICAgICAgICAgICAgIGRpZmYgPCAyID8gJ25leHREYXknIDpcbiAgICAgICAgICAgICAgICBkaWZmIDwgNyA/ICduZXh0V2VlaycgOiAnc2FtZUVsc2UnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhbGVuZGFyJDEgKHRpbWUsIGZvcm1hdHMpIHtcbiAgICAgICAgLy8gV2Ugd2FudCB0byBjb21wYXJlIHRoZSBzdGFydCBvZiB0b2RheSwgdnMgdGhpcy5cbiAgICAgICAgLy8gR2V0dGluZyBzdGFydC1vZi10b2RheSBkZXBlbmRzIG9uIHdoZXRoZXIgd2UncmUgbG9jYWwvdXRjL29mZnNldCBvciBub3QuXG4gICAgICAgIHZhciBub3cgPSB0aW1lIHx8IGNyZWF0ZUxvY2FsKCksXG4gICAgICAgICAgICBzb2QgPSBjbG9uZVdpdGhPZmZzZXQobm93LCB0aGlzKS5zdGFydE9mKCdkYXknKSxcbiAgICAgICAgICAgIGZvcm1hdCA9IGhvb2tzLmNhbGVuZGFyRm9ybWF0KHRoaXMsIHNvZCkgfHwgJ3NhbWVFbHNlJztcblxuICAgICAgICB2YXIgb3V0cHV0ID0gZm9ybWF0cyAmJiAoaXNGdW5jdGlvbihmb3JtYXRzW2Zvcm1hdF0pID8gZm9ybWF0c1tmb3JtYXRdLmNhbGwodGhpcywgbm93KSA6IGZvcm1hdHNbZm9ybWF0XSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0KG91dHB1dCB8fCB0aGlzLmxvY2FsZURhdGEoKS5jYWxlbmRhcihmb3JtYXQsIHRoaXMsIGNyZWF0ZUxvY2FsKG5vdykpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbG9uZSAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgTW9tZW50KHRoaXMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQWZ0ZXIgKGlucHV0LCB1bml0cykge1xuICAgICAgICB2YXIgbG9jYWxJbnB1dCA9IGlzTW9tZW50KGlucHV0KSA/IGlucHV0IDogY3JlYXRlTG9jYWwoaW5wdXQpO1xuICAgICAgICBpZiAoISh0aGlzLmlzVmFsaWQoKSAmJiBsb2NhbElucHV0LmlzVmFsaWQoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKSB8fCAnbWlsbGlzZWNvbmQnO1xuICAgICAgICBpZiAodW5pdHMgPT09ICdtaWxsaXNlY29uZCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlT2YoKSA+IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsSW5wdXQudmFsdWVPZigpIDwgdGhpcy5jbG9uZSgpLnN0YXJ0T2YodW5pdHMpLnZhbHVlT2YoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQmVmb3JlIChpbnB1dCwgdW5pdHMpIHtcbiAgICAgICAgdmFyIGxvY2FsSW5wdXQgPSBpc01vbWVudChpbnB1dCkgPyBpbnB1dCA6IGNyZWF0ZUxvY2FsKGlucHV0KTtcbiAgICAgICAgaWYgKCEodGhpcy5pc1ZhbGlkKCkgJiYgbG9jYWxJbnB1dC5pc1ZhbGlkKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cykgfHwgJ21pbGxpc2Vjb25kJztcbiAgICAgICAgaWYgKHVuaXRzID09PSAnbWlsbGlzZWNvbmQnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZU9mKCkgPCBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNsb25lKCkuZW5kT2YodW5pdHMpLnZhbHVlT2YoKSA8IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNCZXR3ZWVuIChmcm9tLCB0bywgdW5pdHMsIGluY2x1c2l2aXR5KSB7XG4gICAgICAgIHZhciBsb2NhbEZyb20gPSBpc01vbWVudChmcm9tKSA/IGZyb20gOiBjcmVhdGVMb2NhbChmcm9tKSxcbiAgICAgICAgICAgIGxvY2FsVG8gPSBpc01vbWVudCh0bykgPyB0byA6IGNyZWF0ZUxvY2FsKHRvKTtcbiAgICAgICAgaWYgKCEodGhpcy5pc1ZhbGlkKCkgJiYgbG9jYWxGcm9tLmlzVmFsaWQoKSAmJiBsb2NhbFRvLmlzVmFsaWQoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpbmNsdXNpdml0eSA9IGluY2x1c2l2aXR5IHx8ICcoKSc7XG4gICAgICAgIHJldHVybiAoaW5jbHVzaXZpdHlbMF0gPT09ICcoJyA/IHRoaXMuaXNBZnRlcihsb2NhbEZyb20sIHVuaXRzKSA6ICF0aGlzLmlzQmVmb3JlKGxvY2FsRnJvbSwgdW5pdHMpKSAmJlxuICAgICAgICAgICAgKGluY2x1c2l2aXR5WzFdID09PSAnKScgPyB0aGlzLmlzQmVmb3JlKGxvY2FsVG8sIHVuaXRzKSA6ICF0aGlzLmlzQWZ0ZXIobG9jYWxUbywgdW5pdHMpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1NhbWUgKGlucHV0LCB1bml0cykge1xuICAgICAgICB2YXIgbG9jYWxJbnB1dCA9IGlzTW9tZW50KGlucHV0KSA/IGlucHV0IDogY3JlYXRlTG9jYWwoaW5wdXQpLFxuICAgICAgICAgICAgaW5wdXRNcztcbiAgICAgICAgaWYgKCEodGhpcy5pc1ZhbGlkKCkgJiYgbG9jYWxJbnB1dC5pc1ZhbGlkKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cykgfHwgJ21pbGxpc2Vjb25kJztcbiAgICAgICAgaWYgKHVuaXRzID09PSAnbWlsbGlzZWNvbmQnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZU9mKCkgPT09IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW5wdXRNcyA9IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5zdGFydE9mKHVuaXRzKS52YWx1ZU9mKCkgPD0gaW5wdXRNcyAmJiBpbnB1dE1zIDw9IHRoaXMuY2xvbmUoKS5lbmRPZih1bml0cykudmFsdWVPZigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNTYW1lT3JBZnRlciAoaW5wdXQsIHVuaXRzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzU2FtZShpbnB1dCwgdW5pdHMpIHx8IHRoaXMuaXNBZnRlcihpbnB1dCwgdW5pdHMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzU2FtZU9yQmVmb3JlIChpbnB1dCwgdW5pdHMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNTYW1lKGlucHV0LCB1bml0cykgfHwgdGhpcy5pc0JlZm9yZShpbnB1dCwgdW5pdHMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRpZmYgKGlucHV0LCB1bml0cywgYXNGbG9hdCkge1xuICAgICAgICB2YXIgdGhhdCxcbiAgICAgICAgICAgIHpvbmVEZWx0YSxcbiAgICAgICAgICAgIG91dHB1dDtcblxuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhhdCA9IGNsb25lV2l0aE9mZnNldChpbnB1dCwgdGhpcyk7XG5cbiAgICAgICAgaWYgKCF0aGF0LmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgfVxuXG4gICAgICAgIHpvbmVEZWx0YSA9ICh0aGF0LnV0Y09mZnNldCgpIC0gdGhpcy51dGNPZmZzZXQoKSkgKiA2ZTQ7XG5cbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG5cbiAgICAgICAgc3dpdGNoICh1bml0cykge1xuICAgICAgICAgICAgY2FzZSAneWVhcic6IG91dHB1dCA9IG1vbnRoRGlmZih0aGlzLCB0aGF0KSAvIDEyOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21vbnRoJzogb3V0cHV0ID0gbW9udGhEaWZmKHRoaXMsIHRoYXQpOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3F1YXJ0ZXInOiBvdXRwdXQgPSBtb250aERpZmYodGhpcywgdGhhdCkgLyAzOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3NlY29uZCc6IG91dHB1dCA9ICh0aGlzIC0gdGhhdCkgLyAxZTM7IGJyZWFrOyAvLyAxMDAwXG4gICAgICAgICAgICBjYXNlICdtaW51dGUnOiBvdXRwdXQgPSAodGhpcyAtIHRoYXQpIC8gNmU0OyBicmVhazsgLy8gMTAwMCAqIDYwXG4gICAgICAgICAgICBjYXNlICdob3VyJzogb3V0cHV0ID0gKHRoaXMgLSB0aGF0KSAvIDM2ZTU7IGJyZWFrOyAvLyAxMDAwICogNjAgKiA2MFxuICAgICAgICAgICAgY2FzZSAnZGF5Jzogb3V0cHV0ID0gKHRoaXMgLSB0aGF0IC0gem9uZURlbHRhKSAvIDg2NGU1OyBicmVhazsgLy8gMTAwMCAqIDYwICogNjAgKiAyNCwgbmVnYXRlIGRzdFxuICAgICAgICAgICAgY2FzZSAnd2Vlayc6IG91dHB1dCA9ICh0aGlzIC0gdGhhdCAtIHpvbmVEZWx0YSkgLyA2MDQ4ZTU7IGJyZWFrOyAvLyAxMDAwICogNjAgKiA2MCAqIDI0ICogNywgbmVnYXRlIGRzdFxuICAgICAgICAgICAgZGVmYXVsdDogb3V0cHV0ID0gdGhpcyAtIHRoYXQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYXNGbG9hdCA/IG91dHB1dCA6IGFic0Zsb29yKG91dHB1dCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9udGhEaWZmIChhLCBiKSB7XG4gICAgICAgIC8vIGRpZmZlcmVuY2UgaW4gbW9udGhzXG4gICAgICAgIHZhciB3aG9sZU1vbnRoRGlmZiA9ICgoYi55ZWFyKCkgLSBhLnllYXIoKSkgKiAxMikgKyAoYi5tb250aCgpIC0gYS5tb250aCgpKSxcbiAgICAgICAgICAgIC8vIGIgaXMgaW4gKGFuY2hvciAtIDEgbW9udGgsIGFuY2hvciArIDEgbW9udGgpXG4gICAgICAgICAgICBhbmNob3IgPSBhLmNsb25lKCkuYWRkKHdob2xlTW9udGhEaWZmLCAnbW9udGhzJyksXG4gICAgICAgICAgICBhbmNob3IyLCBhZGp1c3Q7XG5cbiAgICAgICAgaWYgKGIgLSBhbmNob3IgPCAwKSB7XG4gICAgICAgICAgICBhbmNob3IyID0gYS5jbG9uZSgpLmFkZCh3aG9sZU1vbnRoRGlmZiAtIDEsICdtb250aHMnKTtcbiAgICAgICAgICAgIC8vIGxpbmVhciBhY3Jvc3MgdGhlIG1vbnRoXG4gICAgICAgICAgICBhZGp1c3QgPSAoYiAtIGFuY2hvcikgLyAoYW5jaG9yIC0gYW5jaG9yMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhbmNob3IyID0gYS5jbG9uZSgpLmFkZCh3aG9sZU1vbnRoRGlmZiArIDEsICdtb250aHMnKTtcbiAgICAgICAgICAgIC8vIGxpbmVhciBhY3Jvc3MgdGhlIG1vbnRoXG4gICAgICAgICAgICBhZGp1c3QgPSAoYiAtIGFuY2hvcikgLyAoYW5jaG9yMiAtIGFuY2hvcik7XG4gICAgICAgIH1cblxuICAgICAgICAvL2NoZWNrIGZvciBuZWdhdGl2ZSB6ZXJvLCByZXR1cm4gemVybyBpZiBuZWdhdGl2ZSB6ZXJvXG4gICAgICAgIHJldHVybiAtKHdob2xlTW9udGhEaWZmICsgYWRqdXN0KSB8fCAwO1xuICAgIH1cblxuICAgIGhvb2tzLmRlZmF1bHRGb3JtYXQgPSAnWVlZWS1NTS1ERFRISDptbTpzc1onO1xuICAgIGhvb2tzLmRlZmF1bHRGb3JtYXRVdGMgPSAnWVlZWS1NTS1ERFRISDptbTpzc1taXSc7XG5cbiAgICBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsb25lKCkubG9jYWxlKCdlbicpLmZvcm1hdCgnZGRkIE1NTSBERCBZWVlZIEhIOm1tOnNzIFtHTVRdWlonKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0lTT1N0cmluZyhrZWVwT2Zmc2V0KSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHZhciB1dGMgPSBrZWVwT2Zmc2V0ICE9PSB0cnVlO1xuICAgICAgICB2YXIgbSA9IHV0YyA/IHRoaXMuY2xvbmUoKS51dGMoKSA6IHRoaXM7XG4gICAgICAgIGlmIChtLnllYXIoKSA8IDAgfHwgbS55ZWFyKCkgPiA5OTk5KSB7XG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0TW9tZW50KG0sIHV0YyA/ICdZWVlZWVktTU0tRERbVF1ISDptbTpzcy5TU1NbWl0nIDogJ1lZWVlZWS1NTS1ERFtUXUhIOm1tOnNzLlNTU1onKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNGdW5jdGlvbihEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZykpIHtcbiAgICAgICAgICAgIC8vIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiBpcyB+NTB4IGZhc3RlciwgdXNlIGl0IHdoZW4gd2UgY2FuXG4gICAgICAgICAgICBpZiAodXRjKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9EYXRlKCkudG9JU09TdHJpbmcoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHRoaXMudmFsdWVPZigpICsgdGhpcy51dGNPZmZzZXQoKSAqIDYwICogMTAwMCkudG9JU09TdHJpbmcoKS5yZXBsYWNlKCdaJywgZm9ybWF0TW9tZW50KG0sICdaJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmb3JtYXRNb21lbnQobSwgdXRjID8gJ1lZWVktTU0tRERbVF1ISDptbTpzcy5TU1NbWl0nIDogJ1lZWVktTU0tRERbVF1ISDptbTpzcy5TU1NaJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIGEgaHVtYW4gcmVhZGFibGUgcmVwcmVzZW50YXRpb24gb2YgYSBtb21lbnQgdGhhdCBjYW5cbiAgICAgKiBhbHNvIGJlIGV2YWx1YXRlZCB0byBnZXQgYSBuZXcgbW9tZW50IHdoaWNoIGlzIHRoZSBzYW1lXG4gICAgICpcbiAgICAgKiBAbGluayBodHRwczovL25vZGVqcy5vcmcvZGlzdC9sYXRlc3QvZG9jcy9hcGkvdXRpbC5odG1sI3V0aWxfY3VzdG9tX2luc3BlY3RfZnVuY3Rpb25fb25fb2JqZWN0c1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluc3BlY3QgKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gJ21vbWVudC5pbnZhbGlkKC8qICcgKyB0aGlzLl9pICsgJyAqLyknO1xuICAgICAgICB9XG4gICAgICAgIHZhciBmdW5jID0gJ21vbWVudCc7XG4gICAgICAgIHZhciB6b25lID0gJyc7XG4gICAgICAgIGlmICghdGhpcy5pc0xvY2FsKCkpIHtcbiAgICAgICAgICAgIGZ1bmMgPSB0aGlzLnV0Y09mZnNldCgpID09PSAwID8gJ21vbWVudC51dGMnIDogJ21vbWVudC5wYXJzZVpvbmUnO1xuICAgICAgICAgICAgem9uZSA9ICdaJztcbiAgICAgICAgfVxuICAgICAgICB2YXIgcHJlZml4ID0gJ1snICsgZnVuYyArICcoXCJdJztcbiAgICAgICAgdmFyIHllYXIgPSAoMCA8PSB0aGlzLnllYXIoKSAmJiB0aGlzLnllYXIoKSA8PSA5OTk5KSA/ICdZWVlZJyA6ICdZWVlZWVknO1xuICAgICAgICB2YXIgZGF0ZXRpbWUgPSAnLU1NLUREW1RdSEg6bW06c3MuU1NTJztcbiAgICAgICAgdmFyIHN1ZmZpeCA9IHpvbmUgKyAnW1wiKV0nO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmZvcm1hdChwcmVmaXggKyB5ZWFyICsgZGF0ZXRpbWUgKyBzdWZmaXgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZvcm1hdCAoaW5wdXRTdHJpbmcpIHtcbiAgICAgICAgaWYgKCFpbnB1dFN0cmluZykge1xuICAgICAgICAgICAgaW5wdXRTdHJpbmcgPSB0aGlzLmlzVXRjKCkgPyBob29rcy5kZWZhdWx0Rm9ybWF0VXRjIDogaG9va3MuZGVmYXVsdEZvcm1hdDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgb3V0cHV0ID0gZm9ybWF0TW9tZW50KHRoaXMsIGlucHV0U3RyaW5nKTtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLnBvc3Rmb3JtYXQob3V0cHV0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmcm9tICh0aW1lLCB3aXRob3V0U3VmZml4KSB7XG4gICAgICAgIGlmICh0aGlzLmlzVmFsaWQoKSAmJlxuICAgICAgICAgICAgICAgICgoaXNNb21lbnQodGltZSkgJiYgdGltZS5pc1ZhbGlkKCkpIHx8XG4gICAgICAgICAgICAgICAgIGNyZWF0ZUxvY2FsKHRpbWUpLmlzVmFsaWQoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVEdXJhdGlvbih7dG86IHRoaXMsIGZyb206IHRpbWV9KS5sb2NhbGUodGhpcy5sb2NhbGUoKSkuaHVtYW5pemUoIXdpdGhvdXRTdWZmaXgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmcm9tTm93ICh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZyb20oY3JlYXRlTG9jYWwoKSwgd2l0aG91dFN1ZmZpeCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG8gKHRpbWUsIHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNWYWxpZCgpICYmXG4gICAgICAgICAgICAgICAgKChpc01vbWVudCh0aW1lKSAmJiB0aW1lLmlzVmFsaWQoKSkgfHxcbiAgICAgICAgICAgICAgICAgY3JlYXRlTG9jYWwodGltZSkuaXNWYWxpZCgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKHtmcm9tOiB0aGlzLCB0bzogdGltZX0pLmxvY2FsZSh0aGlzLmxvY2FsZSgpKS5odW1hbml6ZSghd2l0aG91dFN1ZmZpeCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvTm93ICh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvKGNyZWF0ZUxvY2FsKCksIHdpdGhvdXRTdWZmaXgpO1xuICAgIH1cblxuICAgIC8vIElmIHBhc3NlZCBhIGxvY2FsZSBrZXksIGl0IHdpbGwgc2V0IHRoZSBsb2NhbGUgZm9yIHRoaXNcbiAgICAvLyBpbnN0YW5jZS4gIE90aGVyd2lzZSwgaXQgd2lsbCByZXR1cm4gdGhlIGxvY2FsZSBjb25maWd1cmF0aW9uXG4gICAgLy8gdmFyaWFibGVzIGZvciB0aGlzIGluc3RhbmNlLlxuICAgIGZ1bmN0aW9uIGxvY2FsZSAoa2V5KSB7XG4gICAgICAgIHZhciBuZXdMb2NhbGVEYXRhO1xuXG4gICAgICAgIGlmIChrZXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xvY2FsZS5fYWJicjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld0xvY2FsZURhdGEgPSBnZXRMb2NhbGUoa2V5KTtcbiAgICAgICAgICAgIGlmIChuZXdMb2NhbGVEYXRhICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9sb2NhbGUgPSBuZXdMb2NhbGVEYXRhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbGFuZyA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ21vbWVudCgpLmxhbmcoKSBpcyBkZXByZWNhdGVkLiBJbnN0ZWFkLCB1c2UgbW9tZW50KCkubG9jYWxlRGF0YSgpIHRvIGdldCB0aGUgbGFuZ3VhZ2UgY29uZmlndXJhdGlvbi4gVXNlIG1vbWVudCgpLmxvY2FsZSgpIHRvIGNoYW5nZSBsYW5ndWFnZXMuJyxcbiAgICAgICAgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgaWYgKGtleSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGUoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICk7XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVEYXRhICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvY2FsZTtcbiAgICB9XG5cbiAgICB2YXIgTVNfUEVSX1NFQ09ORCA9IDEwMDA7XG4gICAgdmFyIE1TX1BFUl9NSU5VVEUgPSA2MCAqIE1TX1BFUl9TRUNPTkQ7XG4gICAgdmFyIE1TX1BFUl9IT1VSID0gNjAgKiBNU19QRVJfTUlOVVRFO1xuICAgIHZhciBNU19QRVJfNDAwX1lFQVJTID0gKDM2NSAqIDQwMCArIDk3KSAqIDI0ICogTVNfUEVSX0hPVVI7XG5cbiAgICAvLyBhY3R1YWwgbW9kdWxvIC0gaGFuZGxlcyBuZWdhdGl2ZSBudW1iZXJzIChmb3IgZGF0ZXMgYmVmb3JlIDE5NzApOlxuICAgIGZ1bmN0aW9uIG1vZCQxKGRpdmlkZW5kLCBkaXZpc29yKSB7XG4gICAgICAgIHJldHVybiAoZGl2aWRlbmQgJSBkaXZpc29yICsgZGl2aXNvcikgJSBkaXZpc29yO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsU3RhcnRPZkRhdGUoeSwgbSwgZCkge1xuICAgICAgICAvLyB0aGUgZGF0ZSBjb25zdHJ1Y3RvciByZW1hcHMgeWVhcnMgMC05OSB0byAxOTAwLTE5OTlcbiAgICAgICAgaWYgKHkgPCAxMDAgJiYgeSA+PSAwKSB7XG4gICAgICAgICAgICAvLyBwcmVzZXJ2ZSBsZWFwIHllYXJzIHVzaW5nIGEgZnVsbCA0MDAgeWVhciBjeWNsZSwgdGhlbiByZXNldFxuICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHkgKyA0MDAsIG0sIGQpIC0gTVNfUEVSXzQwMF9ZRUFSUztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSh5LCBtLCBkKS52YWx1ZU9mKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1dGNTdGFydE9mRGF0ZSh5LCBtLCBkKSB7XG4gICAgICAgIC8vIERhdGUuVVRDIHJlbWFwcyB5ZWFycyAwLTk5IHRvIDE5MDAtMTk5OVxuICAgICAgICBpZiAoeSA8IDEwMCAmJiB5ID49IDApIHtcbiAgICAgICAgICAgIC8vIHByZXNlcnZlIGxlYXAgeWVhcnMgdXNpbmcgYSBmdWxsIDQwMCB5ZWFyIGN5Y2xlLCB0aGVuIHJlc2V0XG4gICAgICAgICAgICByZXR1cm4gRGF0ZS5VVEMoeSArIDQwMCwgbSwgZCkgLSBNU19QRVJfNDAwX1lFQVJTO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIERhdGUuVVRDKHksIG0sIGQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3RhcnRPZiAodW5pdHMpIHtcbiAgICAgICAgdmFyIHRpbWU7XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgICAgICBpZiAodW5pdHMgPT09IHVuZGVmaW5lZCB8fCB1bml0cyA9PT0gJ21pbGxpc2Vjb25kJyB8fCAhdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHN0YXJ0T2ZEYXRlID0gdGhpcy5faXNVVEMgPyB1dGNTdGFydE9mRGF0ZSA6IGxvY2FsU3RhcnRPZkRhdGU7XG5cbiAgICAgICAgc3dpdGNoICh1bml0cykge1xuICAgICAgICAgICAgY2FzZSAneWVhcic6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCAwLCAxKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3F1YXJ0ZXInOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpIC0gdGhpcy5tb250aCgpICUgMywgMSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtb250aCc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCksIDEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnd2Vlayc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCksIHRoaXMuZGF0ZSgpIC0gdGhpcy53ZWVrZGF5KCkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaXNvV2Vlayc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCksIHRoaXMuZGF0ZSgpIC0gKHRoaXMuaXNvV2Vla2RheSgpIC0gMSkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZGF5JzpcbiAgICAgICAgICAgIGNhc2UgJ2RhdGUnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpLCB0aGlzLmRhdGUoKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdob3VyJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gdGhpcy5fZC52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgdGltZSAtPSBtb2QkMSh0aW1lICsgKHRoaXMuX2lzVVRDID8gMCA6IHRoaXMudXRjT2Zmc2V0KCkgKiBNU19QRVJfTUlOVVRFKSwgTVNfUEVSX0hPVVIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbWludXRlJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gdGhpcy5fZC52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgdGltZSAtPSBtb2QkMSh0aW1lLCBNU19QRVJfTUlOVVRFKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHRoaXMuX2QudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgIHRpbWUgLT0gbW9kJDEodGltZSwgTVNfUEVSX1NFQ09ORCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9kLnNldFRpbWUodGltZSk7XG4gICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZW5kT2YgKHVuaXRzKSB7XG4gICAgICAgIHZhciB0aW1lO1xuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAgICAgaWYgKHVuaXRzID09PSB1bmRlZmluZWQgfHwgdW5pdHMgPT09ICdtaWxsaXNlY29uZCcgfHwgIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzdGFydE9mRGF0ZSA9IHRoaXMuX2lzVVRDID8gdXRjU3RhcnRPZkRhdGUgOiBsb2NhbFN0YXJ0T2ZEYXRlO1xuXG4gICAgICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgICAgIGNhc2UgJ3llYXInOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSArIDEsIDAsIDEpIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3F1YXJ0ZXInOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpIC0gdGhpcy5tb250aCgpICUgMyArIDMsIDEpIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSArIDEsIDEpIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3dlZWsnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpLCB0aGlzLmRhdGUoKSAtIHRoaXMud2Vla2RheSgpICsgNykgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaXNvV2Vlayc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCksIHRoaXMuZGF0ZSgpIC0gKHRoaXMuaXNvV2Vla2RheSgpIC0gMSkgKyA3KSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdkYXknOlxuICAgICAgICAgICAgY2FzZSAnZGF0ZSc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCksIHRoaXMuZGF0ZSgpICsgMSkgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaG91cic6XG4gICAgICAgICAgICAgICAgdGltZSA9IHRoaXMuX2QudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgIHRpbWUgKz0gTVNfUEVSX0hPVVIgLSBtb2QkMSh0aW1lICsgKHRoaXMuX2lzVVRDID8gMCA6IHRoaXMudXRjT2Zmc2V0KCkgKiBNU19QRVJfTUlOVVRFKSwgTVNfUEVSX0hPVVIpIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHRoaXMuX2QudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgIHRpbWUgKz0gTVNfUEVSX01JTlVURSAtIG1vZCQxKHRpbWUsIE1TX1BFUl9NSU5VVEUpIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHRoaXMuX2QudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgIHRpbWUgKz0gTVNfUEVSX1NFQ09ORCAtIG1vZCQxKHRpbWUsIE1TX1BFUl9TRUNPTkQpIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2Quc2V0VGltZSh0aW1lKTtcbiAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIHRydWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB2YWx1ZU9mICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2QudmFsdWVPZigpIC0gKCh0aGlzLl9vZmZzZXQgfHwgMCkgKiA2MDAwMCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdW5peCAoKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKHRoaXMudmFsdWVPZigpIC8gMTAwMCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9EYXRlICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHRoaXMudmFsdWVPZigpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0FycmF5ICgpIHtcbiAgICAgICAgdmFyIG0gPSB0aGlzO1xuICAgICAgICByZXR1cm4gW20ueWVhcigpLCBtLm1vbnRoKCksIG0uZGF0ZSgpLCBtLmhvdXIoKSwgbS5taW51dGUoKSwgbS5zZWNvbmQoKSwgbS5taWxsaXNlY29uZCgpXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b09iamVjdCAoKSB7XG4gICAgICAgIHZhciBtID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHllYXJzOiBtLnllYXIoKSxcbiAgICAgICAgICAgIG1vbnRoczogbS5tb250aCgpLFxuICAgICAgICAgICAgZGF0ZTogbS5kYXRlKCksXG4gICAgICAgICAgICBob3VyczogbS5ob3VycygpLFxuICAgICAgICAgICAgbWludXRlczogbS5taW51dGVzKCksXG4gICAgICAgICAgICBzZWNvbmRzOiBtLnNlY29uZHMoKSxcbiAgICAgICAgICAgIG1pbGxpc2Vjb25kczogbS5taWxsaXNlY29uZHMoKVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gICAgICAgIC8vIG5ldyBEYXRlKE5hTikudG9KU09OKCkgPT09IG51bGxcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpcy50b0lTT1N0cmluZygpIDogbnVsbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1ZhbGlkJDIgKCkge1xuICAgICAgICByZXR1cm4gaXNWYWxpZCh0aGlzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzaW5nRmxhZ3MgKCkge1xuICAgICAgICByZXR1cm4gZXh0ZW5kKHt9LCBnZXRQYXJzaW5nRmxhZ3ModGhpcykpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGludmFsaWRBdCAoKSB7XG4gICAgICAgIHJldHVybiBnZXRQYXJzaW5nRmxhZ3ModGhpcykub3ZlcmZsb3c7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRpb25EYXRhKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaW5wdXQ6IHRoaXMuX2ksXG4gICAgICAgICAgICBmb3JtYXQ6IHRoaXMuX2YsXG4gICAgICAgICAgICBsb2NhbGU6IHRoaXMuX2xvY2FsZSxcbiAgICAgICAgICAgIGlzVVRDOiB0aGlzLl9pc1VUQyxcbiAgICAgICAgICAgIHN0cmljdDogdGhpcy5fc3RyaWN0XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydnZycsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLndlZWtZZWFyKCkgJSAxMDA7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ0dHJywgMl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNvV2Vla1llYXIoKSAlIDEwMDtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4gKHRva2VuLCBnZXR0ZXIpIHtcbiAgICAgICAgYWRkRm9ybWF0VG9rZW4oMCwgW3Rva2VuLCB0b2tlbi5sZW5ndGhdLCAwLCBnZXR0ZXIpO1xuICAgIH1cblxuICAgIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ2dnZ2cnLCAgICAgJ3dlZWtZZWFyJyk7XG4gICAgYWRkV2Vla1llYXJGb3JtYXRUb2tlbignZ2dnZ2cnLCAgICAnd2Vla1llYXInKTtcbiAgICBhZGRXZWVrWWVhckZvcm1hdFRva2VuKCdHR0dHJywgICdpc29XZWVrWWVhcicpO1xuICAgIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ0dHR0dHJywgJ2lzb1dlZWtZZWFyJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ3dlZWtZZWFyJywgJ2dnJyk7XG4gICAgYWRkVW5pdEFsaWFzKCdpc29XZWVrWWVhcicsICdHRycpO1xuXG4gICAgLy8gUFJJT1JJVFlcblxuICAgIGFkZFVuaXRQcmlvcml0eSgnd2Vla1llYXInLCAxKTtcbiAgICBhZGRVbml0UHJpb3JpdHkoJ2lzb1dlZWtZZWFyJywgMSk7XG5cblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ0cnLCAgICAgIG1hdGNoU2lnbmVkKTtcbiAgICBhZGRSZWdleFRva2VuKCdnJywgICAgICBtYXRjaFNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbignR0cnLCAgICAgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2dnJywgICAgIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdHR0dHJywgICBtYXRjaDF0bzQsIG1hdGNoNCk7XG4gICAgYWRkUmVnZXhUb2tlbignZ2dnZycsICAgbWF0Y2gxdG80LCBtYXRjaDQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0dHR0dHJywgIG1hdGNoMXRvNiwgbWF0Y2g2KTtcbiAgICBhZGRSZWdleFRva2VuKCdnZ2dnZycsICBtYXRjaDF0bzYsIG1hdGNoNik7XG5cbiAgICBhZGRXZWVrUGFyc2VUb2tlbihbJ2dnZ2cnLCAnZ2dnZ2cnLCAnR0dHRycsICdHR0dHRyddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgd2Vla1t0b2tlbi5zdWJzdHIoMCwgMildID0gdG9JbnQoaW5wdXQpO1xuICAgIH0pO1xuXG4gICAgYWRkV2Vla1BhcnNlVG9rZW4oWydnZycsICdHRyddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgd2Vla1t0b2tlbl0gPSBob29rcy5wYXJzZVR3b0RpZ2l0WWVhcihpbnB1dCk7XG4gICAgfSk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXRXZWVrWWVhciAoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGdldFNldFdlZWtZZWFySGVscGVyLmNhbGwodGhpcyxcbiAgICAgICAgICAgICAgICBpbnB1dCxcbiAgICAgICAgICAgICAgICB0aGlzLndlZWsoKSxcbiAgICAgICAgICAgICAgICB0aGlzLndlZWtkYXkoKSxcbiAgICAgICAgICAgICAgICB0aGlzLmxvY2FsZURhdGEoKS5fd2Vlay5kb3csXG4gICAgICAgICAgICAgICAgdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWsuZG95KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRJU09XZWVrWWVhciAoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGdldFNldFdlZWtZZWFySGVscGVyLmNhbGwodGhpcyxcbiAgICAgICAgICAgICAgICBpbnB1dCwgdGhpcy5pc29XZWVrKCksIHRoaXMuaXNvV2Vla2RheSgpLCAxLCA0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRJU09XZWVrc0luWWVhciAoKSB7XG4gICAgICAgIHJldHVybiB3ZWVrc0luWWVhcih0aGlzLnllYXIoKSwgMSwgNCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0V2Vla3NJblllYXIgKCkge1xuICAgICAgICB2YXIgd2Vla0luZm8gPSB0aGlzLmxvY2FsZURhdGEoKS5fd2VlaztcbiAgICAgICAgcmV0dXJuIHdlZWtzSW5ZZWFyKHRoaXMueWVhcigpLCB3ZWVrSW5mby5kb3csIHdlZWtJbmZvLmRveSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0V2Vla1llYXJIZWxwZXIoaW5wdXQsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSB7XG4gICAgICAgIHZhciB3ZWVrc1RhcmdldDtcbiAgICAgICAgaWYgKGlucHV0ID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB3ZWVrT2ZZZWFyKHRoaXMsIGRvdywgZG95KS55ZWFyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2Vla3NUYXJnZXQgPSB3ZWVrc0luWWVhcihpbnB1dCwgZG93LCBkb3kpO1xuICAgICAgICAgICAgaWYgKHdlZWsgPiB3ZWVrc1RhcmdldCkge1xuICAgICAgICAgICAgICAgIHdlZWsgPSB3ZWVrc1RhcmdldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzZXRXZWVrQWxsLmNhbGwodGhpcywgaW5wdXQsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldFdlZWtBbGwod2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSB7XG4gICAgICAgIHZhciBkYXlPZlllYXJEYXRhID0gZGF5T2ZZZWFyRnJvbVdlZWtzKHdlZWtZZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSksXG4gICAgICAgICAgICBkYXRlID0gY3JlYXRlVVRDRGF0ZShkYXlPZlllYXJEYXRhLnllYXIsIDAsIGRheU9mWWVhckRhdGEuZGF5T2ZZZWFyKTtcblxuICAgICAgICB0aGlzLnllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpKTtcbiAgICAgICAgdGhpcy5tb250aChkYXRlLmdldFVUQ01vbnRoKCkpO1xuICAgICAgICB0aGlzLmRhdGUoZGF0ZS5nZXRVVENEYXRlKCkpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignUScsIDAsICdRbycsICdxdWFydGVyJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ3F1YXJ0ZXInLCAnUScpO1xuXG4gICAgLy8gUFJJT1JJVFlcblxuICAgIGFkZFVuaXRQcmlvcml0eSgncXVhcnRlcicsIDcpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignUScsIG1hdGNoMSk7XG4gICAgYWRkUGFyc2VUb2tlbignUScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbTU9OVEhdID0gKHRvSW50KGlucHV0KSAtIDEpICogMztcbiAgICB9KTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIGdldFNldFF1YXJ0ZXIgKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gTWF0aC5jZWlsKCh0aGlzLm1vbnRoKCkgKyAxKSAvIDMpIDogdGhpcy5tb250aCgoaW5wdXQgLSAxKSAqIDMgKyB0aGlzLm1vbnRoKCkgJSAzKTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignRCcsIFsnREQnLCAyXSwgJ0RvJywgJ2RhdGUnKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnZGF0ZScsICdEJyk7XG5cbiAgICAvLyBQUklPUklUWVxuICAgIGFkZFVuaXRQcmlvcml0eSgnZGF0ZScsIDkpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignRCcsICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0REJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0RvJywgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgLy8gVE9ETzogUmVtb3ZlIFwib3JkaW5hbFBhcnNlXCIgZmFsbGJhY2sgaW4gbmV4dCBtYWpvciByZWxlYXNlLlxuICAgICAgICByZXR1cm4gaXNTdHJpY3QgP1xuICAgICAgICAgIChsb2NhbGUuX2RheU9mTW9udGhPcmRpbmFsUGFyc2UgfHwgbG9jYWxlLl9vcmRpbmFsUGFyc2UpIDpcbiAgICAgICAgICBsb2NhbGUuX2RheU9mTW9udGhPcmRpbmFsUGFyc2VMZW5pZW50O1xuICAgIH0pO1xuXG4gICAgYWRkUGFyc2VUb2tlbihbJ0QnLCAnREQnXSwgREFURSk7XG4gICAgYWRkUGFyc2VUb2tlbignRG8nLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W0RBVEVdID0gdG9JbnQoaW5wdXQubWF0Y2gobWF0Y2gxdG8yKVswXSk7XG4gICAgfSk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICB2YXIgZ2V0U2V0RGF5T2ZNb250aCA9IG1ha2VHZXRTZXQoJ0RhdGUnLCB0cnVlKTtcblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdEREQnLCBbJ0REREQnLCAzXSwgJ0RERG8nLCAnZGF5T2ZZZWFyJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ2RheU9mWWVhcicsICdEREQnKTtcblxuICAgIC8vIFBSSU9SSVRZXG4gICAgYWRkVW5pdFByaW9yaXR5KCdkYXlPZlllYXInLCA0KTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ0RERCcsICBtYXRjaDF0bzMpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0REREQnLCBtYXRjaDMpO1xuICAgIGFkZFBhcnNlVG9rZW4oWydEREQnLCAnRERERCddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgY29uZmlnLl9kYXlPZlllYXIgPSB0b0ludChpbnB1dCk7XG4gICAgfSk7XG5cbiAgICAvLyBIRUxQRVJTXG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXREYXlPZlllYXIgKGlucHV0KSB7XG4gICAgICAgIHZhciBkYXlPZlllYXIgPSBNYXRoLnJvdW5kKCh0aGlzLmNsb25lKCkuc3RhcnRPZignZGF5JykgLSB0aGlzLmNsb25lKCkuc3RhcnRPZigneWVhcicpKSAvIDg2NGU1KSArIDE7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gZGF5T2ZZZWFyIDogdGhpcy5hZGQoKGlucHV0IC0gZGF5T2ZZZWFyKSwgJ2QnKTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignbScsIFsnbW0nLCAyXSwgMCwgJ21pbnV0ZScpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdtaW51dGUnLCAnbScpO1xuXG4gICAgLy8gUFJJT1JJVFlcblxuICAgIGFkZFVuaXRQcmlvcml0eSgnbWludXRlJywgMTQpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignbScsICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ21tJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFBhcnNlVG9rZW4oWydtJywgJ21tJ10sIE1JTlVURSk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICB2YXIgZ2V0U2V0TWludXRlID0gbWFrZUdldFNldCgnTWludXRlcycsIGZhbHNlKTtcblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdzJywgWydzcycsIDJdLCAwLCAnc2Vjb25kJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ3NlY29uZCcsICdzJyk7XG5cbiAgICAvLyBQUklPUklUWVxuXG4gICAgYWRkVW5pdFByaW9yaXR5KCdzZWNvbmQnLCAxNSk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdzJywgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignc3MnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUGFyc2VUb2tlbihbJ3MnLCAnc3MnXSwgU0VDT05EKTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIHZhciBnZXRTZXRTZWNvbmQgPSBtYWtlR2V0U2V0KCdTZWNvbmRzJywgZmFsc2UpO1xuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ1MnLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB+fih0aGlzLm1pbGxpc2Vjb25kKCkgLyAxMDApO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTUycsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB+fih0aGlzLm1pbGxpc2Vjb25kKCkgLyAxMCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTUycsIDNdLCAwLCAnbWlsbGlzZWNvbmQnKTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1MnLCA0XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTA7XG4gICAgfSk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTUycsIDVdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDA7XG4gICAgfSk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1MnLCA2XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDtcbiAgICB9KTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1NTU1MnLCA3XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDA7XG4gICAgfSk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1NTUycsIDhdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDAwMDA7XG4gICAgfSk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1NTU1MnLCA5XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDAwMDtcbiAgICB9KTtcblxuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdtaWxsaXNlY29uZCcsICdtcycpO1xuXG4gICAgLy8gUFJJT1JJVFlcblxuICAgIGFkZFVuaXRQcmlvcml0eSgnbWlsbGlzZWNvbmQnLCAxNik7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdTJywgICAgbWF0Y2gxdG8zLCBtYXRjaDEpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1NTJywgICBtYXRjaDF0bzMsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignU1NTJywgIG1hdGNoMXRvMywgbWF0Y2gzKTtcblxuICAgIHZhciB0b2tlbjtcbiAgICBmb3IgKHRva2VuID0gJ1NTU1MnOyB0b2tlbi5sZW5ndGggPD0gOTsgdG9rZW4gKz0gJ1MnKSB7XG4gICAgICAgIGFkZFJlZ2V4VG9rZW4odG9rZW4sIG1hdGNoVW5zaWduZWQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlTXMoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W01JTExJU0VDT05EXSA9IHRvSW50KCgnMC4nICsgaW5wdXQpICogMTAwMCk7XG4gICAgfVxuXG4gICAgZm9yICh0b2tlbiA9ICdTJzsgdG9rZW4ubGVuZ3RoIDw9IDk7IHRva2VuICs9ICdTJykge1xuICAgICAgICBhZGRQYXJzZVRva2VuKHRva2VuLCBwYXJzZU1zKTtcbiAgICB9XG4gICAgLy8gTU9NRU5UU1xuXG4gICAgdmFyIGdldFNldE1pbGxpc2Vjb25kID0gbWFrZUdldFNldCgnTWlsbGlzZWNvbmRzJywgZmFsc2UpO1xuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ3onLCAgMCwgMCwgJ3pvbmVBYmJyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ3p6JywgMCwgMCwgJ3pvbmVOYW1lJyk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRab25lQWJiciAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc1VUQyA/ICdVVEMnIDogJyc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Wm9uZU5hbWUgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNVVEMgPyAnQ29vcmRpbmF0ZWQgVW5pdmVyc2FsIFRpbWUnIDogJyc7XG4gICAgfVxuXG4gICAgdmFyIHByb3RvID0gTW9tZW50LnByb3RvdHlwZTtcblxuICAgIHByb3RvLmFkZCAgICAgICAgICAgICAgID0gYWRkO1xuICAgIHByb3RvLmNhbGVuZGFyICAgICAgICAgID0gY2FsZW5kYXIkMTtcbiAgICBwcm90by5jbG9uZSAgICAgICAgICAgICA9IGNsb25lO1xuICAgIHByb3RvLmRpZmYgICAgICAgICAgICAgID0gZGlmZjtcbiAgICBwcm90by5lbmRPZiAgICAgICAgICAgICA9IGVuZE9mO1xuICAgIHByb3RvLmZvcm1hdCAgICAgICAgICAgID0gZm9ybWF0O1xuICAgIHByb3RvLmZyb20gICAgICAgICAgICAgID0gZnJvbTtcbiAgICBwcm90by5mcm9tTm93ICAgICAgICAgICA9IGZyb21Ob3c7XG4gICAgcHJvdG8udG8gICAgICAgICAgICAgICAgPSB0bztcbiAgICBwcm90by50b05vdyAgICAgICAgICAgICA9IHRvTm93O1xuICAgIHByb3RvLmdldCAgICAgICAgICAgICAgID0gc3RyaW5nR2V0O1xuICAgIHByb3RvLmludmFsaWRBdCAgICAgICAgID0gaW52YWxpZEF0O1xuICAgIHByb3RvLmlzQWZ0ZXIgICAgICAgICAgID0gaXNBZnRlcjtcbiAgICBwcm90by5pc0JlZm9yZSAgICAgICAgICA9IGlzQmVmb3JlO1xuICAgIHByb3RvLmlzQmV0d2VlbiAgICAgICAgID0gaXNCZXR3ZWVuO1xuICAgIHByb3RvLmlzU2FtZSAgICAgICAgICAgID0gaXNTYW1lO1xuICAgIHByb3RvLmlzU2FtZU9yQWZ0ZXIgICAgID0gaXNTYW1lT3JBZnRlcjtcbiAgICBwcm90by5pc1NhbWVPckJlZm9yZSAgICA9IGlzU2FtZU9yQmVmb3JlO1xuICAgIHByb3RvLmlzVmFsaWQgICAgICAgICAgID0gaXNWYWxpZCQyO1xuICAgIHByb3RvLmxhbmcgICAgICAgICAgICAgID0gbGFuZztcbiAgICBwcm90by5sb2NhbGUgICAgICAgICAgICA9IGxvY2FsZTtcbiAgICBwcm90by5sb2NhbGVEYXRhICAgICAgICA9IGxvY2FsZURhdGE7XG4gICAgcHJvdG8ubWF4ICAgICAgICAgICAgICAgPSBwcm90b3R5cGVNYXg7XG4gICAgcHJvdG8ubWluICAgICAgICAgICAgICAgPSBwcm90b3R5cGVNaW47XG4gICAgcHJvdG8ucGFyc2luZ0ZsYWdzICAgICAgPSBwYXJzaW5nRmxhZ3M7XG4gICAgcHJvdG8uc2V0ICAgICAgICAgICAgICAgPSBzdHJpbmdTZXQ7XG4gICAgcHJvdG8uc3RhcnRPZiAgICAgICAgICAgPSBzdGFydE9mO1xuICAgIHByb3RvLnN1YnRyYWN0ICAgICAgICAgID0gc3VidHJhY3Q7XG4gICAgcHJvdG8udG9BcnJheSAgICAgICAgICAgPSB0b0FycmF5O1xuICAgIHByb3RvLnRvT2JqZWN0ICAgICAgICAgID0gdG9PYmplY3Q7XG4gICAgcHJvdG8udG9EYXRlICAgICAgICAgICAgPSB0b0RhdGU7XG4gICAgcHJvdG8udG9JU09TdHJpbmcgICAgICAgPSB0b0lTT1N0cmluZztcbiAgICBwcm90by5pbnNwZWN0ICAgICAgICAgICA9IGluc3BlY3Q7XG4gICAgcHJvdG8udG9KU09OICAgICAgICAgICAgPSB0b0pTT047XG4gICAgcHJvdG8udG9TdHJpbmcgICAgICAgICAgPSB0b1N0cmluZztcbiAgICBwcm90by51bml4ICAgICAgICAgICAgICA9IHVuaXg7XG4gICAgcHJvdG8udmFsdWVPZiAgICAgICAgICAgPSB2YWx1ZU9mO1xuICAgIHByb3RvLmNyZWF0aW9uRGF0YSAgICAgID0gY3JlYXRpb25EYXRhO1xuICAgIHByb3RvLnllYXIgICAgICAgPSBnZXRTZXRZZWFyO1xuICAgIHByb3RvLmlzTGVhcFllYXIgPSBnZXRJc0xlYXBZZWFyO1xuICAgIHByb3RvLndlZWtZZWFyICAgID0gZ2V0U2V0V2Vla1llYXI7XG4gICAgcHJvdG8uaXNvV2Vla1llYXIgPSBnZXRTZXRJU09XZWVrWWVhcjtcbiAgICBwcm90by5xdWFydGVyID0gcHJvdG8ucXVhcnRlcnMgPSBnZXRTZXRRdWFydGVyO1xuICAgIHByb3RvLm1vbnRoICAgICAgID0gZ2V0U2V0TW9udGg7XG4gICAgcHJvdG8uZGF5c0luTW9udGggPSBnZXREYXlzSW5Nb250aDtcbiAgICBwcm90by53ZWVrICAgICAgICAgICA9IHByb3RvLndlZWtzICAgICAgICA9IGdldFNldFdlZWs7XG4gICAgcHJvdG8uaXNvV2VlayAgICAgICAgPSBwcm90by5pc29XZWVrcyAgICAgPSBnZXRTZXRJU09XZWVrO1xuICAgIHByb3RvLndlZWtzSW5ZZWFyICAgID0gZ2V0V2Vla3NJblllYXI7XG4gICAgcHJvdG8uaXNvV2Vla3NJblllYXIgPSBnZXRJU09XZWVrc0luWWVhcjtcbiAgICBwcm90by5kYXRlICAgICAgID0gZ2V0U2V0RGF5T2ZNb250aDtcbiAgICBwcm90by5kYXkgICAgICAgID0gcHJvdG8uZGF5cyAgICAgICAgICAgICA9IGdldFNldERheU9mV2VlaztcbiAgICBwcm90by53ZWVrZGF5ICAgID0gZ2V0U2V0TG9jYWxlRGF5T2ZXZWVrO1xuICAgIHByb3RvLmlzb1dlZWtkYXkgPSBnZXRTZXRJU09EYXlPZldlZWs7XG4gICAgcHJvdG8uZGF5T2ZZZWFyICA9IGdldFNldERheU9mWWVhcjtcbiAgICBwcm90by5ob3VyID0gcHJvdG8uaG91cnMgPSBnZXRTZXRIb3VyO1xuICAgIHByb3RvLm1pbnV0ZSA9IHByb3RvLm1pbnV0ZXMgPSBnZXRTZXRNaW51dGU7XG4gICAgcHJvdG8uc2Vjb25kID0gcHJvdG8uc2Vjb25kcyA9IGdldFNldFNlY29uZDtcbiAgICBwcm90by5taWxsaXNlY29uZCA9IHByb3RvLm1pbGxpc2Vjb25kcyA9IGdldFNldE1pbGxpc2Vjb25kO1xuICAgIHByb3RvLnV0Y09mZnNldCAgICAgICAgICAgID0gZ2V0U2V0T2Zmc2V0O1xuICAgIHByb3RvLnV0YyAgICAgICAgICAgICAgICAgID0gc2V0T2Zmc2V0VG9VVEM7XG4gICAgcHJvdG8ubG9jYWwgICAgICAgICAgICAgICAgPSBzZXRPZmZzZXRUb0xvY2FsO1xuICAgIHByb3RvLnBhcnNlWm9uZSAgICAgICAgICAgID0gc2V0T2Zmc2V0VG9QYXJzZWRPZmZzZXQ7XG4gICAgcHJvdG8uaGFzQWxpZ25lZEhvdXJPZmZzZXQgPSBoYXNBbGlnbmVkSG91ck9mZnNldDtcbiAgICBwcm90by5pc0RTVCAgICAgICAgICAgICAgICA9IGlzRGF5bGlnaHRTYXZpbmdUaW1lO1xuICAgIHByb3RvLmlzTG9jYWwgICAgICAgICAgICAgID0gaXNMb2NhbDtcbiAgICBwcm90by5pc1V0Y09mZnNldCAgICAgICAgICA9IGlzVXRjT2Zmc2V0O1xuICAgIHByb3RvLmlzVXRjICAgICAgICAgICAgICAgID0gaXNVdGM7XG4gICAgcHJvdG8uaXNVVEMgICAgICAgICAgICAgICAgPSBpc1V0YztcbiAgICBwcm90by56b25lQWJiciA9IGdldFpvbmVBYmJyO1xuICAgIHByb3RvLnpvbmVOYW1lID0gZ2V0Wm9uZU5hbWU7XG4gICAgcHJvdG8uZGF0ZXMgID0gZGVwcmVjYXRlKCdkYXRlcyBhY2Nlc3NvciBpcyBkZXByZWNhdGVkLiBVc2UgZGF0ZSBpbnN0ZWFkLicsIGdldFNldERheU9mTW9udGgpO1xuICAgIHByb3RvLm1vbnRocyA9IGRlcHJlY2F0ZSgnbW9udGhzIGFjY2Vzc29yIGlzIGRlcHJlY2F0ZWQuIFVzZSBtb250aCBpbnN0ZWFkJywgZ2V0U2V0TW9udGgpO1xuICAgIHByb3RvLnllYXJzICA9IGRlcHJlY2F0ZSgneWVhcnMgYWNjZXNzb3IgaXMgZGVwcmVjYXRlZC4gVXNlIHllYXIgaW5zdGVhZCcsIGdldFNldFllYXIpO1xuICAgIHByb3RvLnpvbmUgICA9IGRlcHJlY2F0ZSgnbW9tZW50KCkuem9uZSBpcyBkZXByZWNhdGVkLCB1c2UgbW9tZW50KCkudXRjT2Zmc2V0IGluc3RlYWQuIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3Mvem9uZS8nLCBnZXRTZXRab25lKTtcbiAgICBwcm90by5pc0RTVFNoaWZ0ZWQgPSBkZXByZWNhdGUoJ2lzRFNUU2hpZnRlZCBpcyBkZXByZWNhdGVkLiBTZWUgaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9kc3Qtc2hpZnRlZC8gZm9yIG1vcmUgaW5mb3JtYXRpb24nLCBpc0RheWxpZ2h0U2F2aW5nVGltZVNoaWZ0ZWQpO1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlVW5peCAoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsKGlucHV0ICogMTAwMCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlSW5ab25lICgpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsLmFwcGx5KG51bGwsIGFyZ3VtZW50cykucGFyc2Vab25lKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJlUGFyc2VQb3N0Rm9ybWF0IChzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICB9XG5cbiAgICB2YXIgcHJvdG8kMSA9IExvY2FsZS5wcm90b3R5cGU7XG5cbiAgICBwcm90byQxLmNhbGVuZGFyICAgICAgICA9IGNhbGVuZGFyO1xuICAgIHByb3RvJDEubG9uZ0RhdGVGb3JtYXQgID0gbG9uZ0RhdGVGb3JtYXQ7XG4gICAgcHJvdG8kMS5pbnZhbGlkRGF0ZSAgICAgPSBpbnZhbGlkRGF0ZTtcbiAgICBwcm90byQxLm9yZGluYWwgICAgICAgICA9IG9yZGluYWw7XG4gICAgcHJvdG8kMS5wcmVwYXJzZSAgICAgICAgPSBwcmVQYXJzZVBvc3RGb3JtYXQ7XG4gICAgcHJvdG8kMS5wb3N0Zm9ybWF0ICAgICAgPSBwcmVQYXJzZVBvc3RGb3JtYXQ7XG4gICAgcHJvdG8kMS5yZWxhdGl2ZVRpbWUgICAgPSByZWxhdGl2ZVRpbWU7XG4gICAgcHJvdG8kMS5wYXN0RnV0dXJlICAgICAgPSBwYXN0RnV0dXJlO1xuICAgIHByb3RvJDEuc2V0ICAgICAgICAgICAgID0gc2V0O1xuXG4gICAgcHJvdG8kMS5tb250aHMgICAgICAgICAgICA9ICAgICAgICBsb2NhbGVNb250aHM7XG4gICAgcHJvdG8kMS5tb250aHNTaG9ydCAgICAgICA9ICAgICAgICBsb2NhbGVNb250aHNTaG9ydDtcbiAgICBwcm90byQxLm1vbnRoc1BhcnNlICAgICAgID0gICAgICAgIGxvY2FsZU1vbnRoc1BhcnNlO1xuICAgIHByb3RvJDEubW9udGhzUmVnZXggICAgICAgPSBtb250aHNSZWdleDtcbiAgICBwcm90byQxLm1vbnRoc1Nob3J0UmVnZXggID0gbW9udGhzU2hvcnRSZWdleDtcbiAgICBwcm90byQxLndlZWsgPSBsb2NhbGVXZWVrO1xuICAgIHByb3RvJDEuZmlyc3REYXlPZlllYXIgPSBsb2NhbGVGaXJzdERheU9mWWVhcjtcbiAgICBwcm90byQxLmZpcnN0RGF5T2ZXZWVrID0gbG9jYWxlRmlyc3REYXlPZldlZWs7XG5cbiAgICBwcm90byQxLndlZWtkYXlzICAgICAgID0gICAgICAgIGxvY2FsZVdlZWtkYXlzO1xuICAgIHByb3RvJDEud2Vla2RheXNNaW4gICAgPSAgICAgICAgbG9jYWxlV2Vla2RheXNNaW47XG4gICAgcHJvdG8kMS53ZWVrZGF5c1Nob3J0ICA9ICAgICAgICBsb2NhbGVXZWVrZGF5c1Nob3J0O1xuICAgIHByb3RvJDEud2Vla2RheXNQYXJzZSAgPSAgICAgICAgbG9jYWxlV2Vla2RheXNQYXJzZTtcblxuICAgIHByb3RvJDEud2Vla2RheXNSZWdleCAgICAgICA9ICAgICAgICB3ZWVrZGF5c1JlZ2V4O1xuICAgIHByb3RvJDEud2Vla2RheXNTaG9ydFJlZ2V4ICA9ICAgICAgICB3ZWVrZGF5c1Nob3J0UmVnZXg7XG4gICAgcHJvdG8kMS53ZWVrZGF5c01pblJlZ2V4ICAgID0gICAgICAgIHdlZWtkYXlzTWluUmVnZXg7XG5cbiAgICBwcm90byQxLmlzUE0gPSBsb2NhbGVJc1BNO1xuICAgIHByb3RvJDEubWVyaWRpZW0gPSBsb2NhbGVNZXJpZGllbTtcblxuICAgIGZ1bmN0aW9uIGdldCQxIChmb3JtYXQsIGluZGV4LCBmaWVsZCwgc2V0dGVyKSB7XG4gICAgICAgIHZhciBsb2NhbGUgPSBnZXRMb2NhbGUoKTtcbiAgICAgICAgdmFyIHV0YyA9IGNyZWF0ZVVUQygpLnNldChzZXR0ZXIsIGluZGV4KTtcbiAgICAgICAgcmV0dXJuIGxvY2FsZVtmaWVsZF0odXRjLCBmb3JtYXQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RNb250aHNJbXBsIChmb3JtYXQsIGluZGV4LCBmaWVsZCkge1xuICAgICAgICBpZiAoaXNOdW1iZXIoZm9ybWF0KSkge1xuICAgICAgICAgICAgaW5kZXggPSBmb3JtYXQ7XG4gICAgICAgICAgICBmb3JtYXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBmb3JtYXQgPSBmb3JtYXQgfHwgJyc7XG5cbiAgICAgICAgaWYgKGluZGV4ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXQkMShmb3JtYXQsIGluZGV4LCBmaWVsZCwgJ21vbnRoJyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIG91dCA9IFtdO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICAgICAgb3V0W2ldID0gZ2V0JDEoZm9ybWF0LCBpLCBmaWVsZCwgJ21vbnRoJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICAvLyAoKVxuICAgIC8vICg1KVxuICAgIC8vIChmbXQsIDUpXG4gICAgLy8gKGZtdClcbiAgICAvLyAodHJ1ZSlcbiAgICAvLyAodHJ1ZSwgNSlcbiAgICAvLyAodHJ1ZSwgZm10LCA1KVxuICAgIC8vICh0cnVlLCBmbXQpXG4gICAgZnVuY3Rpb24gbGlzdFdlZWtkYXlzSW1wbCAobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4LCBmaWVsZCkge1xuICAgICAgICBpZiAodHlwZW9mIGxvY2FsZVNvcnRlZCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICBpZiAoaXNOdW1iZXIoZm9ybWF0KSkge1xuICAgICAgICAgICAgICAgIGluZGV4ID0gZm9ybWF0O1xuICAgICAgICAgICAgICAgIGZvcm1hdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9ybWF0ID0gZm9ybWF0IHx8ICcnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9ybWF0ID0gbG9jYWxlU29ydGVkO1xuICAgICAgICAgICAgaW5kZXggPSBmb3JtYXQ7XG4gICAgICAgICAgICBsb2NhbGVTb3J0ZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgaWYgKGlzTnVtYmVyKGZvcm1hdCkpIHtcbiAgICAgICAgICAgICAgICBpbmRleCA9IGZvcm1hdDtcbiAgICAgICAgICAgICAgICBmb3JtYXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvcm1hdCA9IGZvcm1hdCB8fCAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBsb2NhbGUgPSBnZXRMb2NhbGUoKSxcbiAgICAgICAgICAgIHNoaWZ0ID0gbG9jYWxlU29ydGVkID8gbG9jYWxlLl93ZWVrLmRvdyA6IDA7XG5cbiAgICAgICAgaWYgKGluZGV4ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXQkMShmb3JtYXQsIChpbmRleCArIHNoaWZ0KSAlIDcsIGZpZWxkLCAnZGF5Jyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIG91dCA9IFtdO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgICAgICBvdXRbaV0gPSBnZXQkMShmb3JtYXQsIChpICsgc2hpZnQpICUgNywgZmllbGQsICdkYXknKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RNb250aHMgKGZvcm1hdCwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RNb250aHNJbXBsKGZvcm1hdCwgaW5kZXgsICdtb250aHMnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0TW9udGhzU2hvcnQgKGZvcm1hdCwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RNb250aHNJbXBsKGZvcm1hdCwgaW5kZXgsICdtb250aHNTaG9ydCcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RXZWVrZGF5cyAobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBsaXN0V2Vla2RheXNJbXBsKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCwgJ3dlZWtkYXlzJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdFdlZWtkYXlzU2hvcnQgKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCkge1xuICAgICAgICByZXR1cm4gbGlzdFdlZWtkYXlzSW1wbChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgsICd3ZWVrZGF5c1Nob3J0Jyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdFdlZWtkYXlzTWluIChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RXZWVrZGF5c0ltcGwobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4LCAnd2Vla2RheXNNaW4nKTtcbiAgICB9XG5cbiAgICBnZXRTZXRHbG9iYWxMb2NhbGUoJ2VuJywge1xuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0odGh8c3R8bmR8cmQpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gKHRvSW50KG51bWJlciAlIDEwMCAvIDEwKSA9PT0gMSkgPyAndGgnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMSkgPyAnc3QnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMikgPyAnbmQnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMykgPyAncmQnIDogJ3RoJztcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFNpZGUgZWZmZWN0IGltcG9ydHNcblxuICAgIGhvb2tzLmxhbmcgPSBkZXByZWNhdGUoJ21vbWVudC5sYW5nIGlzIGRlcHJlY2F0ZWQuIFVzZSBtb21lbnQubG9jYWxlIGluc3RlYWQuJywgZ2V0U2V0R2xvYmFsTG9jYWxlKTtcbiAgICBob29rcy5sYW5nRGF0YSA9IGRlcHJlY2F0ZSgnbW9tZW50LmxhbmdEYXRhIGlzIGRlcHJlY2F0ZWQuIFVzZSBtb21lbnQubG9jYWxlRGF0YSBpbnN0ZWFkLicsIGdldExvY2FsZSk7XG5cbiAgICB2YXIgbWF0aEFicyA9IE1hdGguYWJzO1xuXG4gICAgZnVuY3Rpb24gYWJzICgpIHtcbiAgICAgICAgdmFyIGRhdGEgICAgICAgICAgID0gdGhpcy5fZGF0YTtcblxuICAgICAgICB0aGlzLl9taWxsaXNlY29uZHMgPSBtYXRoQWJzKHRoaXMuX21pbGxpc2Vjb25kcyk7XG4gICAgICAgIHRoaXMuX2RheXMgICAgICAgICA9IG1hdGhBYnModGhpcy5fZGF5cyk7XG4gICAgICAgIHRoaXMuX21vbnRocyAgICAgICA9IG1hdGhBYnModGhpcy5fbW9udGhzKTtcblxuICAgICAgICBkYXRhLm1pbGxpc2Vjb25kcyAgPSBtYXRoQWJzKGRhdGEubWlsbGlzZWNvbmRzKTtcbiAgICAgICAgZGF0YS5zZWNvbmRzICAgICAgID0gbWF0aEFicyhkYXRhLnNlY29uZHMpO1xuICAgICAgICBkYXRhLm1pbnV0ZXMgICAgICAgPSBtYXRoQWJzKGRhdGEubWludXRlcyk7XG4gICAgICAgIGRhdGEuaG91cnMgICAgICAgICA9IG1hdGhBYnMoZGF0YS5ob3Vycyk7XG4gICAgICAgIGRhdGEubW9udGhzICAgICAgICA9IG1hdGhBYnMoZGF0YS5tb250aHMpO1xuICAgICAgICBkYXRhLnllYXJzICAgICAgICAgPSBtYXRoQWJzKGRhdGEueWVhcnMpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZFN1YnRyYWN0JDEgKGR1cmF0aW9uLCBpbnB1dCwgdmFsdWUsIGRpcmVjdGlvbikge1xuICAgICAgICB2YXIgb3RoZXIgPSBjcmVhdGVEdXJhdGlvbihpbnB1dCwgdmFsdWUpO1xuXG4gICAgICAgIGR1cmF0aW9uLl9taWxsaXNlY29uZHMgKz0gZGlyZWN0aW9uICogb3RoZXIuX21pbGxpc2Vjb25kcztcbiAgICAgICAgZHVyYXRpb24uX2RheXMgICAgICAgICArPSBkaXJlY3Rpb24gKiBvdGhlci5fZGF5cztcbiAgICAgICAgZHVyYXRpb24uX21vbnRocyAgICAgICArPSBkaXJlY3Rpb24gKiBvdGhlci5fbW9udGhzO1xuXG4gICAgICAgIHJldHVybiBkdXJhdGlvbi5fYnViYmxlKCk7XG4gICAgfVxuXG4gICAgLy8gc3VwcG9ydHMgb25seSAyLjAtc3R5bGUgYWRkKDEsICdzJykgb3IgYWRkKGR1cmF0aW9uKVxuICAgIGZ1bmN0aW9uIGFkZCQxIChpbnB1dCwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGFkZFN1YnRyYWN0JDEodGhpcywgaW5wdXQsIHZhbHVlLCAxKTtcbiAgICB9XG5cbiAgICAvLyBzdXBwb3J0cyBvbmx5IDIuMC1zdHlsZSBzdWJ0cmFjdCgxLCAncycpIG9yIHN1YnRyYWN0KGR1cmF0aW9uKVxuICAgIGZ1bmN0aW9uIHN1YnRyYWN0JDEgKGlucHV0LCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gYWRkU3VidHJhY3QkMSh0aGlzLCBpbnB1dCwgdmFsdWUsIC0xKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhYnNDZWlsIChudW1iZXIpIHtcbiAgICAgICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKG51bWJlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5jZWlsKG51bWJlcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBidWJibGUgKCkge1xuICAgICAgICB2YXIgbWlsbGlzZWNvbmRzID0gdGhpcy5fbWlsbGlzZWNvbmRzO1xuICAgICAgICB2YXIgZGF5cyAgICAgICAgID0gdGhpcy5fZGF5cztcbiAgICAgICAgdmFyIG1vbnRocyAgICAgICA9IHRoaXMuX21vbnRocztcbiAgICAgICAgdmFyIGRhdGEgICAgICAgICA9IHRoaXMuX2RhdGE7XG4gICAgICAgIHZhciBzZWNvbmRzLCBtaW51dGVzLCBob3VycywgeWVhcnMsIG1vbnRoc0Zyb21EYXlzO1xuXG4gICAgICAgIC8vIGlmIHdlIGhhdmUgYSBtaXggb2YgcG9zaXRpdmUgYW5kIG5lZ2F0aXZlIHZhbHVlcywgYnViYmxlIGRvd24gZmlyc3RcbiAgICAgICAgLy8gY2hlY2s6IGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L2lzc3Vlcy8yMTY2XG4gICAgICAgIGlmICghKChtaWxsaXNlY29uZHMgPj0gMCAmJiBkYXlzID49IDAgJiYgbW9udGhzID49IDApIHx8XG4gICAgICAgICAgICAgICAgKG1pbGxpc2Vjb25kcyA8PSAwICYmIGRheXMgPD0gMCAmJiBtb250aHMgPD0gMCkpKSB7XG4gICAgICAgICAgICBtaWxsaXNlY29uZHMgKz0gYWJzQ2VpbChtb250aHNUb0RheXMobW9udGhzKSArIGRheXMpICogODY0ZTU7XG4gICAgICAgICAgICBkYXlzID0gMDtcbiAgICAgICAgICAgIG1vbnRocyA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGNvZGUgYnViYmxlcyB1cCB2YWx1ZXMsIHNlZSB0aGUgdGVzdHMgZm9yXG4gICAgICAgIC8vIGV4YW1wbGVzIG9mIHdoYXQgdGhhdCBtZWFucy5cbiAgICAgICAgZGF0YS5taWxsaXNlY29uZHMgPSBtaWxsaXNlY29uZHMgJSAxMDAwO1xuXG4gICAgICAgIHNlY29uZHMgICAgICAgICAgID0gYWJzRmxvb3IobWlsbGlzZWNvbmRzIC8gMTAwMCk7XG4gICAgICAgIGRhdGEuc2Vjb25kcyAgICAgID0gc2Vjb25kcyAlIDYwO1xuXG4gICAgICAgIG1pbnV0ZXMgICAgICAgICAgID0gYWJzRmxvb3Ioc2Vjb25kcyAvIDYwKTtcbiAgICAgICAgZGF0YS5taW51dGVzICAgICAgPSBtaW51dGVzICUgNjA7XG5cbiAgICAgICAgaG91cnMgICAgICAgICAgICAgPSBhYnNGbG9vcihtaW51dGVzIC8gNjApO1xuICAgICAgICBkYXRhLmhvdXJzICAgICAgICA9IGhvdXJzICUgMjQ7XG5cbiAgICAgICAgZGF5cyArPSBhYnNGbG9vcihob3VycyAvIDI0KTtcblxuICAgICAgICAvLyBjb252ZXJ0IGRheXMgdG8gbW9udGhzXG4gICAgICAgIG1vbnRoc0Zyb21EYXlzID0gYWJzRmxvb3IoZGF5c1RvTW9udGhzKGRheXMpKTtcbiAgICAgICAgbW9udGhzICs9IG1vbnRoc0Zyb21EYXlzO1xuICAgICAgICBkYXlzIC09IGFic0NlaWwobW9udGhzVG9EYXlzKG1vbnRoc0Zyb21EYXlzKSk7XG5cbiAgICAgICAgLy8gMTIgbW9udGhzIC0+IDEgeWVhclxuICAgICAgICB5ZWFycyA9IGFic0Zsb29yKG1vbnRocyAvIDEyKTtcbiAgICAgICAgbW9udGhzICU9IDEyO1xuXG4gICAgICAgIGRhdGEuZGF5cyAgID0gZGF5cztcbiAgICAgICAgZGF0YS5tb250aHMgPSBtb250aHM7XG4gICAgICAgIGRhdGEueWVhcnMgID0geWVhcnM7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGF5c1RvTW9udGhzIChkYXlzKSB7XG4gICAgICAgIC8vIDQwMCB5ZWFycyBoYXZlIDE0NjA5NyBkYXlzICh0YWtpbmcgaW50byBhY2NvdW50IGxlYXAgeWVhciBydWxlcylcbiAgICAgICAgLy8gNDAwIHllYXJzIGhhdmUgMTIgbW9udGhzID09PSA0ODAwXG4gICAgICAgIHJldHVybiBkYXlzICogNDgwMCAvIDE0NjA5NztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb250aHNUb0RheXMgKG1vbnRocykge1xuICAgICAgICAvLyB0aGUgcmV2ZXJzZSBvZiBkYXlzVG9Nb250aHNcbiAgICAgICAgcmV0dXJuIG1vbnRocyAqIDE0NjA5NyAvIDQ4MDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXMgKHVuaXRzKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRheXM7XG4gICAgICAgIHZhciBtb250aHM7XG4gICAgICAgIHZhciBtaWxsaXNlY29uZHMgPSB0aGlzLl9taWxsaXNlY29uZHM7XG5cbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG5cbiAgICAgICAgaWYgKHVuaXRzID09PSAnbW9udGgnIHx8IHVuaXRzID09PSAncXVhcnRlcicgfHwgdW5pdHMgPT09ICd5ZWFyJykge1xuICAgICAgICAgICAgZGF5cyA9IHRoaXMuX2RheXMgKyBtaWxsaXNlY29uZHMgLyA4NjRlNTtcbiAgICAgICAgICAgIG1vbnRocyA9IHRoaXMuX21vbnRocyArIGRheXNUb01vbnRocyhkYXlzKTtcbiAgICAgICAgICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdtb250aCc6ICAgcmV0dXJuIG1vbnRocztcbiAgICAgICAgICAgICAgICBjYXNlICdxdWFydGVyJzogcmV0dXJuIG1vbnRocyAvIDM7XG4gICAgICAgICAgICAgICAgY2FzZSAneWVhcic6ICAgIHJldHVybiBtb250aHMgLyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGhhbmRsZSBtaWxsaXNlY29uZHMgc2VwYXJhdGVseSBiZWNhdXNlIG9mIGZsb2F0aW5nIHBvaW50IG1hdGggZXJyb3JzIChpc3N1ZSAjMTg2NylcbiAgICAgICAgICAgIGRheXMgPSB0aGlzLl9kYXlzICsgTWF0aC5yb3VuZChtb250aHNUb0RheXModGhpcy5fbW9udGhzKSk7XG4gICAgICAgICAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnd2VlaycgICA6IHJldHVybiBkYXlzIC8gNyAgICAgKyBtaWxsaXNlY29uZHMgLyA2MDQ4ZTU7XG4gICAgICAgICAgICAgICAgY2FzZSAnZGF5JyAgICA6IHJldHVybiBkYXlzICAgICAgICAgKyBtaWxsaXNlY29uZHMgLyA4NjRlNTtcbiAgICAgICAgICAgICAgICBjYXNlICdob3VyJyAgIDogcmV0dXJuIGRheXMgKiAyNCAgICArIG1pbGxpc2Vjb25kcyAvIDM2ZTU7XG4gICAgICAgICAgICAgICAgY2FzZSAnbWludXRlJyA6IHJldHVybiBkYXlzICogMTQ0MCAgKyBtaWxsaXNlY29uZHMgLyA2ZTQ7XG4gICAgICAgICAgICAgICAgY2FzZSAnc2Vjb25kJyA6IHJldHVybiBkYXlzICogODY0MDAgKyBtaWxsaXNlY29uZHMgLyAxMDAwO1xuICAgICAgICAgICAgICAgIC8vIE1hdGguZmxvb3IgcHJldmVudHMgZmxvYXRpbmcgcG9pbnQgbWF0aCBlcnJvcnMgaGVyZVxuICAgICAgICAgICAgICAgIGNhc2UgJ21pbGxpc2Vjb25kJzogcmV0dXJuIE1hdGguZmxvb3IoZGF5cyAqIDg2NGU1KSArIG1pbGxpc2Vjb25kcztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gdW5pdCAnICsgdW5pdHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gVE9ETzogVXNlIHRoaXMuYXMoJ21zJyk/XG4gICAgZnVuY3Rpb24gdmFsdWVPZiQxICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgdGhpcy5fbWlsbGlzZWNvbmRzICtcbiAgICAgICAgICAgIHRoaXMuX2RheXMgKiA4NjRlNSArXG4gICAgICAgICAgICAodGhpcy5fbW9udGhzICUgMTIpICogMjU5MmU2ICtcbiAgICAgICAgICAgIHRvSW50KHRoaXMuX21vbnRocyAvIDEyKSAqIDMxNTM2ZTZcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWtlQXMgKGFsaWFzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hcyhhbGlhcyk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIGFzTWlsbGlzZWNvbmRzID0gbWFrZUFzKCdtcycpO1xuICAgIHZhciBhc1NlY29uZHMgICAgICA9IG1ha2VBcygncycpO1xuICAgIHZhciBhc01pbnV0ZXMgICAgICA9IG1ha2VBcygnbScpO1xuICAgIHZhciBhc0hvdXJzICAgICAgICA9IG1ha2VBcygnaCcpO1xuICAgIHZhciBhc0RheXMgICAgICAgICA9IG1ha2VBcygnZCcpO1xuICAgIHZhciBhc1dlZWtzICAgICAgICA9IG1ha2VBcygndycpO1xuICAgIHZhciBhc01vbnRocyAgICAgICA9IG1ha2VBcygnTScpO1xuICAgIHZhciBhc1F1YXJ0ZXJzICAgICA9IG1ha2VBcygnUScpO1xuICAgIHZhciBhc1llYXJzICAgICAgICA9IG1ha2VBcygneScpO1xuXG4gICAgZnVuY3Rpb24gY2xvbmUkMSAoKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVEdXJhdGlvbih0aGlzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXQkMiAodW5pdHMpIHtcbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXNbdW5pdHMgKyAncyddKCkgOiBOYU47XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFrZUdldHRlcihuYW1lKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzLl9kYXRhW25hbWVdIDogTmFOO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHZhciBtaWxsaXNlY29uZHMgPSBtYWtlR2V0dGVyKCdtaWxsaXNlY29uZHMnKTtcbiAgICB2YXIgc2Vjb25kcyAgICAgID0gbWFrZUdldHRlcignc2Vjb25kcycpO1xuICAgIHZhciBtaW51dGVzICAgICAgPSBtYWtlR2V0dGVyKCdtaW51dGVzJyk7XG4gICAgdmFyIGhvdXJzICAgICAgICA9IG1ha2VHZXR0ZXIoJ2hvdXJzJyk7XG4gICAgdmFyIGRheXMgICAgICAgICA9IG1ha2VHZXR0ZXIoJ2RheXMnKTtcbiAgICB2YXIgbW9udGhzICAgICAgID0gbWFrZUdldHRlcignbW9udGhzJyk7XG4gICAgdmFyIHllYXJzICAgICAgICA9IG1ha2VHZXR0ZXIoJ3llYXJzJyk7XG5cbiAgICBmdW5jdGlvbiB3ZWVrcyAoKSB7XG4gICAgICAgIHJldHVybiBhYnNGbG9vcih0aGlzLmRheXMoKSAvIDcpO1xuICAgIH1cblxuICAgIHZhciByb3VuZCA9IE1hdGgucm91bmQ7XG4gICAgdmFyIHRocmVzaG9sZHMgPSB7XG4gICAgICAgIHNzOiA0NCwgICAgICAgICAvLyBhIGZldyBzZWNvbmRzIHRvIHNlY29uZHNcbiAgICAgICAgcyA6IDQ1LCAgICAgICAgIC8vIHNlY29uZHMgdG8gbWludXRlXG4gICAgICAgIG0gOiA0NSwgICAgICAgICAvLyBtaW51dGVzIHRvIGhvdXJcbiAgICAgICAgaCA6IDIyLCAgICAgICAgIC8vIGhvdXJzIHRvIGRheVxuICAgICAgICBkIDogMjYsICAgICAgICAgLy8gZGF5cyB0byBtb250aFxuICAgICAgICBNIDogMTEgICAgICAgICAgLy8gbW9udGhzIHRvIHllYXJcbiAgICB9O1xuXG4gICAgLy8gaGVscGVyIGZ1bmN0aW9uIGZvciBtb21lbnQuZm4uZnJvbSwgbW9tZW50LmZuLmZyb21Ob3csIGFuZCBtb21lbnQuZHVyYXRpb24uZm4uaHVtYW5pemVcbiAgICBmdW5jdGlvbiBzdWJzdGl0dXRlVGltZUFnbyhzdHJpbmcsIG51bWJlciwgd2l0aG91dFN1ZmZpeCwgaXNGdXR1cmUsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLnJlbGF0aXZlVGltZShudW1iZXIgfHwgMSwgISF3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWxhdGl2ZVRpbWUkMSAocG9zTmVnRHVyYXRpb24sIHdpdGhvdXRTdWZmaXgsIGxvY2FsZSkge1xuICAgICAgICB2YXIgZHVyYXRpb24gPSBjcmVhdGVEdXJhdGlvbihwb3NOZWdEdXJhdGlvbikuYWJzKCk7XG4gICAgICAgIHZhciBzZWNvbmRzICA9IHJvdW5kKGR1cmF0aW9uLmFzKCdzJykpO1xuICAgICAgICB2YXIgbWludXRlcyAgPSByb3VuZChkdXJhdGlvbi5hcygnbScpKTtcbiAgICAgICAgdmFyIGhvdXJzICAgID0gcm91bmQoZHVyYXRpb24uYXMoJ2gnKSk7XG4gICAgICAgIHZhciBkYXlzICAgICA9IHJvdW5kKGR1cmF0aW9uLmFzKCdkJykpO1xuICAgICAgICB2YXIgbW9udGhzICAgPSByb3VuZChkdXJhdGlvbi5hcygnTScpKTtcbiAgICAgICAgdmFyIHllYXJzICAgID0gcm91bmQoZHVyYXRpb24uYXMoJ3knKSk7XG5cbiAgICAgICAgdmFyIGEgPSBzZWNvbmRzIDw9IHRocmVzaG9sZHMuc3MgJiYgWydzJywgc2Vjb25kc10gIHx8XG4gICAgICAgICAgICAgICAgc2Vjb25kcyA8IHRocmVzaG9sZHMucyAgICYmIFsnc3MnLCBzZWNvbmRzXSB8fFxuICAgICAgICAgICAgICAgIG1pbnV0ZXMgPD0gMSAgICAgICAgICAgICAmJiBbJ20nXSAgICAgICAgICAgfHxcbiAgICAgICAgICAgICAgICBtaW51dGVzIDwgdGhyZXNob2xkcy5tICAgJiYgWydtbScsIG1pbnV0ZXNdIHx8XG4gICAgICAgICAgICAgICAgaG91cnMgICA8PSAxICAgICAgICAgICAgICYmIFsnaCddICAgICAgICAgICB8fFxuICAgICAgICAgICAgICAgIGhvdXJzICAgPCB0aHJlc2hvbGRzLmggICAmJiBbJ2hoJywgaG91cnNdICAgfHxcbiAgICAgICAgICAgICAgICBkYXlzICAgIDw9IDEgICAgICAgICAgICAgJiYgWydkJ10gICAgICAgICAgIHx8XG4gICAgICAgICAgICAgICAgZGF5cyAgICA8IHRocmVzaG9sZHMuZCAgICYmIFsnZGQnLCBkYXlzXSAgICB8fFxuICAgICAgICAgICAgICAgIG1vbnRocyAgPD0gMSAgICAgICAgICAgICAmJiBbJ00nXSAgICAgICAgICAgfHxcbiAgICAgICAgICAgICAgICBtb250aHMgIDwgdGhyZXNob2xkcy5NICAgJiYgWydNTScsIG1vbnRoc10gIHx8XG4gICAgICAgICAgICAgICAgeWVhcnMgICA8PSAxICAgICAgICAgICAgICYmIFsneSddICAgICAgICAgICB8fCBbJ3l5JywgeWVhcnNdO1xuXG4gICAgICAgIGFbMl0gPSB3aXRob3V0U3VmZml4O1xuICAgICAgICBhWzNdID0gK3Bvc05lZ0R1cmF0aW9uID4gMDtcbiAgICAgICAgYVs0XSA9IGxvY2FsZTtcbiAgICAgICAgcmV0dXJuIHN1YnN0aXR1dGVUaW1lQWdvLmFwcGx5KG51bGwsIGEpO1xuICAgIH1cblxuICAgIC8vIFRoaXMgZnVuY3Rpb24gYWxsb3dzIHlvdSB0byBzZXQgdGhlIHJvdW5kaW5nIGZ1bmN0aW9uIGZvciByZWxhdGl2ZSB0aW1lIHN0cmluZ3NcbiAgICBmdW5jdGlvbiBnZXRTZXRSZWxhdGl2ZVRpbWVSb3VuZGluZyAocm91bmRpbmdGdW5jdGlvbikge1xuICAgICAgICBpZiAocm91bmRpbmdGdW5jdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gcm91bmQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZihyb3VuZGluZ0Z1bmN0aW9uKSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcm91bmQgPSByb3VuZGluZ0Z1bmN0aW9uO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIFRoaXMgZnVuY3Rpb24gYWxsb3dzIHlvdSB0byBzZXQgYSB0aHJlc2hvbGQgZm9yIHJlbGF0aXZlIHRpbWUgc3RyaW5nc1xuICAgIGZ1bmN0aW9uIGdldFNldFJlbGF0aXZlVGltZVRocmVzaG9sZCAodGhyZXNob2xkLCBsaW1pdCkge1xuICAgICAgICBpZiAodGhyZXNob2xkc1t0aHJlc2hvbGRdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGltaXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRocmVzaG9sZHNbdGhyZXNob2xkXTtcbiAgICAgICAgfVxuICAgICAgICB0aHJlc2hvbGRzW3RocmVzaG9sZF0gPSBsaW1pdDtcbiAgICAgICAgaWYgKHRocmVzaG9sZCA9PT0gJ3MnKSB7XG4gICAgICAgICAgICB0aHJlc2hvbGRzLnNzID0gbGltaXQgLSAxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGh1bWFuaXplICh3aXRoU3VmZml4KSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGxvY2FsZSA9IHRoaXMubG9jYWxlRGF0YSgpO1xuICAgICAgICB2YXIgb3V0cHV0ID0gcmVsYXRpdmVUaW1lJDEodGhpcywgIXdpdGhTdWZmaXgsIGxvY2FsZSk7XG5cbiAgICAgICAgaWYgKHdpdGhTdWZmaXgpIHtcbiAgICAgICAgICAgIG91dHB1dCA9IGxvY2FsZS5wYXN0RnV0dXJlKCt0aGlzLCBvdXRwdXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGxvY2FsZS5wb3N0Zm9ybWF0KG91dHB1dCk7XG4gICAgfVxuXG4gICAgdmFyIGFicyQxID0gTWF0aC5hYnM7XG5cbiAgICBmdW5jdGlvbiBzaWduKHgpIHtcbiAgICAgICAgcmV0dXJuICgoeCA+IDApIC0gKHggPCAwKSkgfHwgK3g7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9JU09TdHJpbmckMSgpIHtcbiAgICAgICAgLy8gZm9yIElTTyBzdHJpbmdzIHdlIGRvIG5vdCB1c2UgdGhlIG5vcm1hbCBidWJibGluZyBydWxlczpcbiAgICAgICAgLy8gICogbWlsbGlzZWNvbmRzIGJ1YmJsZSB1cCB1bnRpbCB0aGV5IGJlY29tZSBob3Vyc1xuICAgICAgICAvLyAgKiBkYXlzIGRvIG5vdCBidWJibGUgYXQgYWxsXG4gICAgICAgIC8vICAqIG1vbnRocyBidWJibGUgdXAgdW50aWwgdGhleSBiZWNvbWUgeWVhcnNcbiAgICAgICAgLy8gVGhpcyBpcyBiZWNhdXNlIHRoZXJlIGlzIG5vIGNvbnRleHQtZnJlZSBjb252ZXJzaW9uIGJldHdlZW4gaG91cnMgYW5kIGRheXNcbiAgICAgICAgLy8gKHRoaW5rIG9mIGNsb2NrIGNoYW5nZXMpXG4gICAgICAgIC8vIGFuZCBhbHNvIG5vdCBiZXR3ZWVuIGRheXMgYW5kIG1vbnRocyAoMjgtMzEgZGF5cyBwZXIgbW9udGgpXG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNlY29uZHMgPSBhYnMkMSh0aGlzLl9taWxsaXNlY29uZHMpIC8gMTAwMDtcbiAgICAgICAgdmFyIGRheXMgICAgICAgICA9IGFicyQxKHRoaXMuX2RheXMpO1xuICAgICAgICB2YXIgbW9udGhzICAgICAgID0gYWJzJDEodGhpcy5fbW9udGhzKTtcbiAgICAgICAgdmFyIG1pbnV0ZXMsIGhvdXJzLCB5ZWFycztcblxuICAgICAgICAvLyAzNjAwIHNlY29uZHMgLT4gNjAgbWludXRlcyAtPiAxIGhvdXJcbiAgICAgICAgbWludXRlcyAgICAgICAgICAgPSBhYnNGbG9vcihzZWNvbmRzIC8gNjApO1xuICAgICAgICBob3VycyAgICAgICAgICAgICA9IGFic0Zsb29yKG1pbnV0ZXMgLyA2MCk7XG4gICAgICAgIHNlY29uZHMgJT0gNjA7XG4gICAgICAgIG1pbnV0ZXMgJT0gNjA7XG5cbiAgICAgICAgLy8gMTIgbW9udGhzIC0+IDEgeWVhclxuICAgICAgICB5ZWFycyAgPSBhYnNGbG9vcihtb250aHMgLyAxMik7XG4gICAgICAgIG1vbnRocyAlPSAxMjtcblxuXG4gICAgICAgIC8vIGluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9kb3JkaWxsZS9tb21lbnQtaXNvZHVyYXRpb24vYmxvYi9tYXN0ZXIvbW9tZW50Lmlzb2R1cmF0aW9uLmpzXG4gICAgICAgIHZhciBZID0geWVhcnM7XG4gICAgICAgIHZhciBNID0gbW9udGhzO1xuICAgICAgICB2YXIgRCA9IGRheXM7XG4gICAgICAgIHZhciBoID0gaG91cnM7XG4gICAgICAgIHZhciBtID0gbWludXRlcztcbiAgICAgICAgdmFyIHMgPSBzZWNvbmRzID8gc2Vjb25kcy50b0ZpeGVkKDMpLnJlcGxhY2UoL1xcLj8wKyQvLCAnJykgOiAnJztcbiAgICAgICAgdmFyIHRvdGFsID0gdGhpcy5hc1NlY29uZHMoKTtcblxuICAgICAgICBpZiAoIXRvdGFsKSB7XG4gICAgICAgICAgICAvLyB0aGlzIGlzIHRoZSBzYW1lIGFzIEMjJ3MgKE5vZGEpIGFuZCBweXRob24gKGlzb2RhdGUpLi4uXG4gICAgICAgICAgICAvLyBidXQgbm90IG90aGVyIEpTIChnb29nLmRhdGUpXG4gICAgICAgICAgICByZXR1cm4gJ1AwRCc7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdG90YWxTaWduID0gdG90YWwgPCAwID8gJy0nIDogJyc7XG4gICAgICAgIHZhciB5bVNpZ24gPSBzaWduKHRoaXMuX21vbnRocykgIT09IHNpZ24odG90YWwpID8gJy0nIDogJyc7XG4gICAgICAgIHZhciBkYXlzU2lnbiA9IHNpZ24odGhpcy5fZGF5cykgIT09IHNpZ24odG90YWwpID8gJy0nIDogJyc7XG4gICAgICAgIHZhciBobXNTaWduID0gc2lnbih0aGlzLl9taWxsaXNlY29uZHMpICE9PSBzaWduKHRvdGFsKSA/ICctJyA6ICcnO1xuXG4gICAgICAgIHJldHVybiB0b3RhbFNpZ24gKyAnUCcgK1xuICAgICAgICAgICAgKFkgPyB5bVNpZ24gKyBZICsgJ1knIDogJycpICtcbiAgICAgICAgICAgIChNID8geW1TaWduICsgTSArICdNJyA6ICcnKSArXG4gICAgICAgICAgICAoRCA/IGRheXNTaWduICsgRCArICdEJyA6ICcnKSArXG4gICAgICAgICAgICAoKGggfHwgbSB8fCBzKSA/ICdUJyA6ICcnKSArXG4gICAgICAgICAgICAoaCA/IGhtc1NpZ24gKyBoICsgJ0gnIDogJycpICtcbiAgICAgICAgICAgIChtID8gaG1zU2lnbiArIG0gKyAnTScgOiAnJykgK1xuICAgICAgICAgICAgKHMgPyBobXNTaWduICsgcyArICdTJyA6ICcnKTtcbiAgICB9XG5cbiAgICB2YXIgcHJvdG8kMiA9IER1cmF0aW9uLnByb3RvdHlwZTtcblxuICAgIHByb3RvJDIuaXNWYWxpZCAgICAgICAgPSBpc1ZhbGlkJDE7XG4gICAgcHJvdG8kMi5hYnMgICAgICAgICAgICA9IGFicztcbiAgICBwcm90byQyLmFkZCAgICAgICAgICAgID0gYWRkJDE7XG4gICAgcHJvdG8kMi5zdWJ0cmFjdCAgICAgICA9IHN1YnRyYWN0JDE7XG4gICAgcHJvdG8kMi5hcyAgICAgICAgICAgICA9IGFzO1xuICAgIHByb3RvJDIuYXNNaWxsaXNlY29uZHMgPSBhc01pbGxpc2Vjb25kcztcbiAgICBwcm90byQyLmFzU2Vjb25kcyAgICAgID0gYXNTZWNvbmRzO1xuICAgIHByb3RvJDIuYXNNaW51dGVzICAgICAgPSBhc01pbnV0ZXM7XG4gICAgcHJvdG8kMi5hc0hvdXJzICAgICAgICA9IGFzSG91cnM7XG4gICAgcHJvdG8kMi5hc0RheXMgICAgICAgICA9IGFzRGF5cztcbiAgICBwcm90byQyLmFzV2Vla3MgICAgICAgID0gYXNXZWVrcztcbiAgICBwcm90byQyLmFzTW9udGhzICAgICAgID0gYXNNb250aHM7XG4gICAgcHJvdG8kMi5hc1F1YXJ0ZXJzICAgICA9IGFzUXVhcnRlcnM7XG4gICAgcHJvdG8kMi5hc1llYXJzICAgICAgICA9IGFzWWVhcnM7XG4gICAgcHJvdG8kMi52YWx1ZU9mICAgICAgICA9IHZhbHVlT2YkMTtcbiAgICBwcm90byQyLl9idWJibGUgICAgICAgID0gYnViYmxlO1xuICAgIHByb3RvJDIuY2xvbmUgICAgICAgICAgPSBjbG9uZSQxO1xuICAgIHByb3RvJDIuZ2V0ICAgICAgICAgICAgPSBnZXQkMjtcbiAgICBwcm90byQyLm1pbGxpc2Vjb25kcyAgID0gbWlsbGlzZWNvbmRzO1xuICAgIHByb3RvJDIuc2Vjb25kcyAgICAgICAgPSBzZWNvbmRzO1xuICAgIHByb3RvJDIubWludXRlcyAgICAgICAgPSBtaW51dGVzO1xuICAgIHByb3RvJDIuaG91cnMgICAgICAgICAgPSBob3VycztcbiAgICBwcm90byQyLmRheXMgICAgICAgICAgID0gZGF5cztcbiAgICBwcm90byQyLndlZWtzICAgICAgICAgID0gd2Vla3M7XG4gICAgcHJvdG8kMi5tb250aHMgICAgICAgICA9IG1vbnRocztcbiAgICBwcm90byQyLnllYXJzICAgICAgICAgID0geWVhcnM7XG4gICAgcHJvdG8kMi5odW1hbml6ZSAgICAgICA9IGh1bWFuaXplO1xuICAgIHByb3RvJDIudG9JU09TdHJpbmcgICAgPSB0b0lTT1N0cmluZyQxO1xuICAgIHByb3RvJDIudG9TdHJpbmcgICAgICAgPSB0b0lTT1N0cmluZyQxO1xuICAgIHByb3RvJDIudG9KU09OICAgICAgICAgPSB0b0lTT1N0cmluZyQxO1xuICAgIHByb3RvJDIubG9jYWxlICAgICAgICAgPSBsb2NhbGU7XG4gICAgcHJvdG8kMi5sb2NhbGVEYXRhICAgICA9IGxvY2FsZURhdGE7XG5cbiAgICBwcm90byQyLnRvSXNvU3RyaW5nID0gZGVwcmVjYXRlKCd0b0lzb1N0cmluZygpIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgdG9JU09TdHJpbmcoKSBpbnN0ZWFkIChub3RpY2UgdGhlIGNhcGl0YWxzKScsIHRvSVNPU3RyaW5nJDEpO1xuICAgIHByb3RvJDIubGFuZyA9IGxhbmc7XG5cbiAgICAvLyBTaWRlIGVmZmVjdCBpbXBvcnRzXG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignWCcsIDAsIDAsICd1bml4Jyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ3gnLCAwLCAwLCAndmFsdWVPZicpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbigneCcsIG1hdGNoU2lnbmVkKTtcbiAgICBhZGRSZWdleFRva2VuKCdYJywgbWF0Y2hUaW1lc3RhbXApO1xuICAgIGFkZFBhcnNlVG9rZW4oJ1gnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUocGFyc2VGbG9hdChpbnB1dCwgMTApICogMTAwMCk7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbigneCcsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZSh0b0ludChpbnB1dCkpO1xuICAgIH0pO1xuXG4gICAgLy8gU2lkZSBlZmZlY3QgaW1wb3J0c1xuXG5cbiAgICBob29rcy52ZXJzaW9uID0gJzIuMjQuMCc7XG5cbiAgICBzZXRIb29rQ2FsbGJhY2soY3JlYXRlTG9jYWwpO1xuXG4gICAgaG9va3MuZm4gICAgICAgICAgICAgICAgICAgID0gcHJvdG87XG4gICAgaG9va3MubWluICAgICAgICAgICAgICAgICAgID0gbWluO1xuICAgIGhvb2tzLm1heCAgICAgICAgICAgICAgICAgICA9IG1heDtcbiAgICBob29rcy5ub3cgICAgICAgICAgICAgICAgICAgPSBub3c7XG4gICAgaG9va3MudXRjICAgICAgICAgICAgICAgICAgID0gY3JlYXRlVVRDO1xuICAgIGhvb2tzLnVuaXggICAgICAgICAgICAgICAgICA9IGNyZWF0ZVVuaXg7XG4gICAgaG9va3MubW9udGhzICAgICAgICAgICAgICAgID0gbGlzdE1vbnRocztcbiAgICBob29rcy5pc0RhdGUgICAgICAgICAgICAgICAgPSBpc0RhdGU7XG4gICAgaG9va3MubG9jYWxlICAgICAgICAgICAgICAgID0gZ2V0U2V0R2xvYmFsTG9jYWxlO1xuICAgIGhvb2tzLmludmFsaWQgICAgICAgICAgICAgICA9IGNyZWF0ZUludmFsaWQ7XG4gICAgaG9va3MuZHVyYXRpb24gICAgICAgICAgICAgID0gY3JlYXRlRHVyYXRpb247XG4gICAgaG9va3MuaXNNb21lbnQgICAgICAgICAgICAgID0gaXNNb21lbnQ7XG4gICAgaG9va3Mud2Vla2RheXMgICAgICAgICAgICAgID0gbGlzdFdlZWtkYXlzO1xuICAgIGhvb2tzLnBhcnNlWm9uZSAgICAgICAgICAgICA9IGNyZWF0ZUluWm9uZTtcbiAgICBob29rcy5sb2NhbGVEYXRhICAgICAgICAgICAgPSBnZXRMb2NhbGU7XG4gICAgaG9va3MuaXNEdXJhdGlvbiAgICAgICAgICAgID0gaXNEdXJhdGlvbjtcbiAgICBob29rcy5tb250aHNTaG9ydCAgICAgICAgICAgPSBsaXN0TW9udGhzU2hvcnQ7XG4gICAgaG9va3Mud2Vla2RheXNNaW4gICAgICAgICAgID0gbGlzdFdlZWtkYXlzTWluO1xuICAgIGhvb2tzLmRlZmluZUxvY2FsZSAgICAgICAgICA9IGRlZmluZUxvY2FsZTtcbiAgICBob29rcy51cGRhdGVMb2NhbGUgICAgICAgICAgPSB1cGRhdGVMb2NhbGU7XG4gICAgaG9va3MubG9jYWxlcyAgICAgICAgICAgICAgID0gbGlzdExvY2FsZXM7XG4gICAgaG9va3Mud2Vla2RheXNTaG9ydCAgICAgICAgID0gbGlzdFdlZWtkYXlzU2hvcnQ7XG4gICAgaG9va3Mubm9ybWFsaXplVW5pdHMgICAgICAgID0gbm9ybWFsaXplVW5pdHM7XG4gICAgaG9va3MucmVsYXRpdmVUaW1lUm91bmRpbmcgID0gZ2V0U2V0UmVsYXRpdmVUaW1lUm91bmRpbmc7XG4gICAgaG9va3MucmVsYXRpdmVUaW1lVGhyZXNob2xkID0gZ2V0U2V0UmVsYXRpdmVUaW1lVGhyZXNob2xkO1xuICAgIGhvb2tzLmNhbGVuZGFyRm9ybWF0ICAgICAgICA9IGdldENhbGVuZGFyRm9ybWF0O1xuICAgIGhvb2tzLnByb3RvdHlwZSAgICAgICAgICAgICA9IHByb3RvO1xuXG4gICAgLy8gY3VycmVudGx5IEhUTUw1IGlucHV0IHR5cGUgb25seSBzdXBwb3J0cyAyNC1ob3VyIGZvcm1hdHNcbiAgICBob29rcy5IVE1MNV9GTVQgPSB7XG4gICAgICAgIERBVEVUSU1FX0xPQ0FMOiAnWVlZWS1NTS1ERFRISDptbScsICAgICAgICAgICAgIC8vIDxpbnB1dCB0eXBlPVwiZGF0ZXRpbWUtbG9jYWxcIiAvPlxuICAgICAgICBEQVRFVElNRV9MT0NBTF9TRUNPTkRTOiAnWVlZWS1NTS1ERFRISDptbTpzcycsICAvLyA8aW5wdXQgdHlwZT1cImRhdGV0aW1lLWxvY2FsXCIgc3RlcD1cIjFcIiAvPlxuICAgICAgICBEQVRFVElNRV9MT0NBTF9NUzogJ1lZWVktTU0tRERUSEg6bW06c3MuU1NTJywgICAvLyA8aW5wdXQgdHlwZT1cImRhdGV0aW1lLWxvY2FsXCIgc3RlcD1cIjAuMDAxXCIgLz5cbiAgICAgICAgREFURTogJ1lZWVktTU0tREQnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gPGlucHV0IHR5cGU9XCJkYXRlXCIgLz5cbiAgICAgICAgVElNRTogJ0hIOm1tJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gPGlucHV0IHR5cGU9XCJ0aW1lXCIgLz5cbiAgICAgICAgVElNRV9TRUNPTkRTOiAnSEg6bW06c3MnLCAgICAgICAgICAgICAgICAgICAgICAgLy8gPGlucHV0IHR5cGU9XCJ0aW1lXCIgc3RlcD1cIjFcIiAvPlxuICAgICAgICBUSU1FX01TOiAnSEg6bW06c3MuU1NTJywgICAgICAgICAgICAgICAgICAgICAgICAvLyA8aW5wdXQgdHlwZT1cInRpbWVcIiBzdGVwPVwiMC4wMDFcIiAvPlxuICAgICAgICBXRUVLOiAnR0dHRy1bV11XVycsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyA8aW5wdXQgdHlwZT1cIndlZWtcIiAvPlxuICAgICAgICBNT05USDogJ1lZWVktTU0nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyA8aW5wdXQgdHlwZT1cIm1vbnRoXCIgLz5cbiAgICB9O1xuXG4gICAgcmV0dXJuIGhvb2tzO1xuXG59KSkpO1xuIiwiZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHtcbiAgICBcImRlZmF1bHRcIjogb2JqXG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdDsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKFJlYWN0SXMuaXNFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuTU9ESUZJRVJfS0VZX05BTUVTID0gZXhwb3J0cy5ERUZBVUxUX1ZFUlRJQ0FMX1NQQUNJTkcgPSBleHBvcnRzLkZBTkdfSEVJR0hUX1BYID0gZXhwb3J0cy5GQU5HX1dJRFRIX1BYID0gZXhwb3J0cy5XRUVLREFZUyA9IGV4cG9ydHMuQkxPQ0tFRF9NT0RJRklFUiA9IGV4cG9ydHMuREFZX1NJWkUgPSBleHBvcnRzLk9QRU5fVVAgPSBleHBvcnRzLk9QRU5fRE9XTiA9IGV4cG9ydHMuQU5DSE9SX1JJR0hUID0gZXhwb3J0cy5BTkNIT1JfTEVGVCA9IGV4cG9ydHMuSU5GT19QT1NJVElPTl9BRlRFUiA9IGV4cG9ydHMuSU5GT19QT1NJVElPTl9CRUZPUkUgPSBleHBvcnRzLklORk9fUE9TSVRJT05fQk9UVE9NID0gZXhwb3J0cy5JTkZPX1BPU0lUSU9OX1RPUCA9IGV4cG9ydHMuSUNPTl9BRlRFUl9QT1NJVElPTiA9IGV4cG9ydHMuSUNPTl9CRUZPUkVfUE9TSVRJT04gPSBleHBvcnRzLk5BVl9QT1NJVElPTl9UT1AgPSBleHBvcnRzLk5BVl9QT1NJVElPTl9CT1RUT00gPSBleHBvcnRzLlZFUlRJQ0FMX1NDUk9MTEFCTEUgPSBleHBvcnRzLlZFUlRJQ0FMX09SSUVOVEFUSU9OID0gZXhwb3J0cy5IT1JJWk9OVEFMX09SSUVOVEFUSU9OID0gZXhwb3J0cy5FTkRfREFURSA9IGV4cG9ydHMuU1RBUlRfREFURSA9IGV4cG9ydHMuSVNPX01PTlRIX0ZPUk1BVCA9IGV4cG9ydHMuSVNPX0ZPUk1BVCA9IGV4cG9ydHMuRElTUExBWV9GT1JNQVQgPSB2b2lkIDA7XG52YXIgRElTUExBWV9GT1JNQVQgPSAnTCc7XG5leHBvcnRzLkRJU1BMQVlfRk9STUFUID0gRElTUExBWV9GT1JNQVQ7XG52YXIgSVNPX0ZPUk1BVCA9ICdZWVlZLU1NLUREJztcbmV4cG9ydHMuSVNPX0ZPUk1BVCA9IElTT19GT1JNQVQ7XG52YXIgSVNPX01PTlRIX0ZPUk1BVCA9ICdZWVlZLU1NJzsgLy8gVE9ETyBkZWxldGUgdGhpcyBsaW5lIG9mIGRlYWQgY29kZSBvbiBuZXh0IGJyZWFraW5nIGNoYW5nZVxuXG5leHBvcnRzLklTT19NT05USF9GT1JNQVQgPSBJU09fTU9OVEhfRk9STUFUO1xudmFyIFNUQVJUX0RBVEUgPSAnc3RhcnREYXRlJztcbmV4cG9ydHMuU1RBUlRfREFURSA9IFNUQVJUX0RBVEU7XG52YXIgRU5EX0RBVEUgPSAnZW5kRGF0ZSc7XG5leHBvcnRzLkVORF9EQVRFID0gRU5EX0RBVEU7XG52YXIgSE9SSVpPTlRBTF9PUklFTlRBVElPTiA9ICdob3Jpem9udGFsJztcbmV4cG9ydHMuSE9SSVpPTlRBTF9PUklFTlRBVElPTiA9IEhPUklaT05UQUxfT1JJRU5UQVRJT047XG52YXIgVkVSVElDQUxfT1JJRU5UQVRJT04gPSAndmVydGljYWwnO1xuZXhwb3J0cy5WRVJUSUNBTF9PUklFTlRBVElPTiA9IFZFUlRJQ0FMX09SSUVOVEFUSU9OO1xudmFyIFZFUlRJQ0FMX1NDUk9MTEFCTEUgPSAndmVydGljYWxTY3JvbGxhYmxlJztcbmV4cG9ydHMuVkVSVElDQUxfU0NST0xMQUJMRSA9IFZFUlRJQ0FMX1NDUk9MTEFCTEU7XG52YXIgTkFWX1BPU0lUSU9OX0JPVFRPTSA9ICduYXZQb3NpdGlvbkJvdHRvbSc7XG5leHBvcnRzLk5BVl9QT1NJVElPTl9CT1RUT00gPSBOQVZfUE9TSVRJT05fQk9UVE9NO1xudmFyIE5BVl9QT1NJVElPTl9UT1AgPSAnbmF2UG9zaXRpb25Ub3AnO1xuZXhwb3J0cy5OQVZfUE9TSVRJT05fVE9QID0gTkFWX1BPU0lUSU9OX1RPUDtcbnZhciBJQ09OX0JFRk9SRV9QT1NJVElPTiA9ICdiZWZvcmUnO1xuZXhwb3J0cy5JQ09OX0JFRk9SRV9QT1NJVElPTiA9IElDT05fQkVGT1JFX1BPU0lUSU9OO1xudmFyIElDT05fQUZURVJfUE9TSVRJT04gPSAnYWZ0ZXInO1xuZXhwb3J0cy5JQ09OX0FGVEVSX1BPU0lUSU9OID0gSUNPTl9BRlRFUl9QT1NJVElPTjtcbnZhciBJTkZPX1BPU0lUSU9OX1RPUCA9ICd0b3AnO1xuZXhwb3J0cy5JTkZPX1BPU0lUSU9OX1RPUCA9IElORk9fUE9TSVRJT05fVE9QO1xudmFyIElORk9fUE9TSVRJT05fQk9UVE9NID0gJ2JvdHRvbSc7XG5leHBvcnRzLklORk9fUE9TSVRJT05fQk9UVE9NID0gSU5GT19QT1NJVElPTl9CT1RUT007XG52YXIgSU5GT19QT1NJVElPTl9CRUZPUkUgPSAnYmVmb3JlJztcbmV4cG9ydHMuSU5GT19QT1NJVElPTl9CRUZPUkUgPSBJTkZPX1BPU0lUSU9OX0JFRk9SRTtcbnZhciBJTkZPX1BPU0lUSU9OX0FGVEVSID0gJ2FmdGVyJztcbmV4cG9ydHMuSU5GT19QT1NJVElPTl9BRlRFUiA9IElORk9fUE9TSVRJT05fQUZURVI7XG52YXIgQU5DSE9SX0xFRlQgPSAnbGVmdCc7XG5leHBvcnRzLkFOQ0hPUl9MRUZUID0gQU5DSE9SX0xFRlQ7XG52YXIgQU5DSE9SX1JJR0hUID0gJ3JpZ2h0JztcbmV4cG9ydHMuQU5DSE9SX1JJR0hUID0gQU5DSE9SX1JJR0hUO1xudmFyIE9QRU5fRE9XTiA9ICdkb3duJztcbmV4cG9ydHMuT1BFTl9ET1dOID0gT1BFTl9ET1dOO1xudmFyIE9QRU5fVVAgPSAndXAnO1xuZXhwb3J0cy5PUEVOX1VQID0gT1BFTl9VUDtcbnZhciBEQVlfU0laRSA9IDM5O1xuZXhwb3J0cy5EQVlfU0laRSA9IERBWV9TSVpFO1xudmFyIEJMT0NLRURfTU9ESUZJRVIgPSAnYmxvY2tlZCc7XG5leHBvcnRzLkJMT0NLRURfTU9ESUZJRVIgPSBCTE9DS0VEX01PRElGSUVSO1xudmFyIFdFRUtEQVlTID0gWzAsIDEsIDIsIDMsIDQsIDUsIDZdO1xuZXhwb3J0cy5XRUVLREFZUyA9IFdFRUtEQVlTO1xudmFyIEZBTkdfV0lEVEhfUFggPSAyMDtcbmV4cG9ydHMuRkFOR19XSURUSF9QWCA9IEZBTkdfV0lEVEhfUFg7XG52YXIgRkFOR19IRUlHSFRfUFggPSAxMDtcbmV4cG9ydHMuRkFOR19IRUlHSFRfUFggPSBGQU5HX0hFSUdIVF9QWDtcbnZhciBERUZBVUxUX1ZFUlRJQ0FMX1NQQUNJTkcgPSAyMjtcbmV4cG9ydHMuREVGQVVMVF9WRVJUSUNBTF9TUEFDSU5HID0gREVGQVVMVF9WRVJUSUNBTF9TUEFDSU5HO1xudmFyIE1PRElGSUVSX0tFWV9OQU1FUyA9IG5ldyBTZXQoWydTaGlmdCcsICdDb250cm9sJywgJ0FsdCcsICdNZXRhJ10pO1xuZXhwb3J0cy5NT0RJRklFUl9LRVlfTkFNRVMgPSBNT0RJRklFUl9LRVlfTkFNRVM7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiBnbG9iYWxzXG5cdEF0b21pY3MsXG5cdFNoYXJlZEFycmF5QnVmZmVyLFxuKi9cblxudmFyIHVuZGVmaW5lZDtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbnZhciAkZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5pZiAoJGdPUEQpIHtcblx0dHJ5IHtcblx0XHQkZ09QRCh7fSwgJycpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0JGdPUEQgPSBudWxsOyAvLyB0aGlzIGlzIElFIDgsIHdoaWNoIGhhcyBhIGJyb2tlbiBnT1BEXG5cdH1cbn1cblxudmFyIHRocm93VHlwZUVycm9yID0gZnVuY3Rpb24gKCkgeyB0aHJvdyBuZXcgJFR5cGVFcnJvcigpOyB9O1xudmFyIFRocm93VHlwZUVycm9yID0gJGdPUERcblx0PyAoZnVuY3Rpb24gKCkge1xuXHRcdHRyeSB7XG5cdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zLCBuby1jYWxsZXIsIG5vLXJlc3RyaWN0ZWQtcHJvcGVydGllc1xuXHRcdFx0YXJndW1lbnRzLmNhbGxlZTsgLy8gSUUgOCBkb2VzIG5vdCB0aHJvdyBoZXJlXG5cdFx0XHRyZXR1cm4gdGhyb3dUeXBlRXJyb3I7XG5cdFx0fSBjYXRjaCAoY2FsbGVlVGhyb3dzKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHQvLyBJRSA4IHRocm93cyBvbiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGFyZ3VtZW50cywgJycpXG5cdFx0XHRcdHJldHVybiAkZ09QRChhcmd1bWVudHMsICdjYWxsZWUnKS5nZXQ7XG5cdFx0XHR9IGNhdGNoIChnT1BEdGhyb3dzKSB7XG5cdFx0XHRcdHJldHVybiB0aHJvd1R5cGVFcnJvcjtcblx0XHRcdH1cblx0XHR9XG5cdH0oKSlcblx0OiB0aHJvd1R5cGVFcnJvcjtcblxudmFyIGhhc1N5bWJvbHMgPSByZXF1aXJlKCdoYXMtc3ltYm9scycpKCk7XG5cbnZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiAoeCkgeyByZXR1cm4geC5fX3Byb3RvX187IH07IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcHJvdG9cblxudmFyIGdlbmVyYXRvcjsgLy8gPSBmdW5jdGlvbiAqICgpIHt9O1xudmFyIGdlbmVyYXRvckZ1bmN0aW9uID0gZ2VuZXJhdG9yID8gZ2V0UHJvdG8oZ2VuZXJhdG9yKSA6IHVuZGVmaW5lZDtcbnZhciBhc3luY0ZuOyAvLyBhc3luYyBmdW5jdGlvbigpIHt9O1xudmFyIGFzeW5jRnVuY3Rpb24gPSBhc3luY0ZuID8gYXN5bmNGbi5jb25zdHJ1Y3RvciA6IHVuZGVmaW5lZDtcbnZhciBhc3luY0dlbjsgLy8gYXN5bmMgZnVuY3Rpb24gKiAoKSB7fTtcbnZhciBhc3luY0dlbkZ1bmN0aW9uID0gYXN5bmNHZW4gPyBnZXRQcm90byhhc3luY0dlbikgOiB1bmRlZmluZWQ7XG52YXIgYXN5bmNHZW5JdGVyYXRvciA9IGFzeW5jR2VuID8gYXN5bmNHZW4oKSA6IHVuZGVmaW5lZDtcblxudmFyIFR5cGVkQXJyYXkgPSB0eXBlb2YgVWludDhBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBnZXRQcm90byhVaW50OEFycmF5KTtcblxudmFyIElOVFJJTlNJQ1MgPSB7XG5cdCclQXJyYXklJzogQXJyYXksXG5cdCclQXJyYXlCdWZmZXIlJzogdHlwZW9mIEFycmF5QnVmZmVyID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEFycmF5QnVmZmVyLFxuXHQnJUFycmF5QnVmZmVyUHJvdG90eXBlJSc6IHR5cGVvZiBBcnJheUJ1ZmZlciA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBBcnJheUJ1ZmZlci5wcm90b3R5cGUsXG5cdCclQXJyYXlJdGVyYXRvclByb3RvdHlwZSUnOiBoYXNTeW1ib2xzID8gZ2V0UHJvdG8oW11bU3ltYm9sLml0ZXJhdG9yXSgpKSA6IHVuZGVmaW5lZCxcblx0JyVBcnJheVByb3RvdHlwZSUnOiBBcnJheS5wcm90b3R5cGUsXG5cdCclQXJyYXlQcm90b19lbnRyaWVzJSc6IEFycmF5LnByb3RvdHlwZS5lbnRyaWVzLFxuXHQnJUFycmF5UHJvdG9fZm9yRWFjaCUnOiBBcnJheS5wcm90b3R5cGUuZm9yRWFjaCxcblx0JyVBcnJheVByb3RvX2tleXMlJzogQXJyYXkucHJvdG90eXBlLmtleXMsXG5cdCclQXJyYXlQcm90b192YWx1ZXMlJzogQXJyYXkucHJvdG90eXBlLnZhbHVlcyxcblx0JyVBc3luY0Zyb21TeW5jSXRlcmF0b3JQcm90b3R5cGUlJzogdW5kZWZpbmVkLFxuXHQnJUFzeW5jRnVuY3Rpb24lJzogYXN5bmNGdW5jdGlvbixcblx0JyVBc3luY0Z1bmN0aW9uUHJvdG90eXBlJSc6IGFzeW5jRnVuY3Rpb24gPyBhc3luY0Z1bmN0aW9uLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcblx0JyVBc3luY0dlbmVyYXRvciUnOiBhc3luY0dlbiA/IGdldFByb3RvKGFzeW5jR2VuSXRlcmF0b3IpIDogdW5kZWZpbmVkLFxuXHQnJUFzeW5jR2VuZXJhdG9yRnVuY3Rpb24lJzogYXN5bmNHZW5GdW5jdGlvbixcblx0JyVBc3luY0dlbmVyYXRvclByb3RvdHlwZSUnOiBhc3luY0dlbkZ1bmN0aW9uID8gYXN5bmNHZW5GdW5jdGlvbi5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG5cdCclQXN5bmNJdGVyYXRvclByb3RvdHlwZSUnOiBhc3luY0dlbkl0ZXJhdG9yICYmIGhhc1N5bWJvbHMgJiYgU3ltYm9sLmFzeW5jSXRlcmF0b3IgPyBhc3luY0dlbkl0ZXJhdG9yW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIDogdW5kZWZpbmVkLFxuXHQnJUF0b21pY3MlJzogdHlwZW9mIEF0b21pY3MgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogQXRvbWljcyxcblx0JyVCb29sZWFuJSc6IEJvb2xlYW4sXG5cdCclQm9vbGVhblByb3RvdHlwZSUnOiBCb29sZWFuLnByb3RvdHlwZSxcblx0JyVEYXRhVmlldyUnOiB0eXBlb2YgRGF0YVZpZXcgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogRGF0YVZpZXcsXG5cdCclRGF0YVZpZXdQcm90b3R5cGUlJzogdHlwZW9mIERhdGFWaWV3ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IERhdGFWaWV3LnByb3RvdHlwZSxcblx0JyVEYXRlJSc6IERhdGUsXG5cdCclRGF0ZVByb3RvdHlwZSUnOiBEYXRlLnByb3RvdHlwZSxcblx0JyVkZWNvZGVVUkklJzogZGVjb2RlVVJJLFxuXHQnJWRlY29kZVVSSUNvbXBvbmVudCUnOiBkZWNvZGVVUklDb21wb25lbnQsXG5cdCclZW5jb2RlVVJJJSc6IGVuY29kZVVSSSxcblx0JyVlbmNvZGVVUklDb21wb25lbnQlJzogZW5jb2RlVVJJQ29tcG9uZW50LFxuXHQnJUVycm9yJSc6IEVycm9yLFxuXHQnJUVycm9yUHJvdG90eXBlJSc6IEVycm9yLnByb3RvdHlwZSxcblx0JyVldmFsJSc6IGV2YWwsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZXZhbFxuXHQnJUV2YWxFcnJvciUnOiBFdmFsRXJyb3IsXG5cdCclRXZhbEVycm9yUHJvdG90eXBlJSc6IEV2YWxFcnJvci5wcm90b3R5cGUsXG5cdCclRmxvYXQzMkFycmF5JSc6IHR5cGVvZiBGbG9hdDMyQXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogRmxvYXQzMkFycmF5LFxuXHQnJUZsb2F0MzJBcnJheVByb3RvdHlwZSUnOiB0eXBlb2YgRmxvYXQzMkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEZsb2F0MzJBcnJheS5wcm90b3R5cGUsXG5cdCclRmxvYXQ2NEFycmF5JSc6IHR5cGVvZiBGbG9hdDY0QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogRmxvYXQ2NEFycmF5LFxuXHQnJUZsb2F0NjRBcnJheVByb3RvdHlwZSUnOiB0eXBlb2YgRmxvYXQ2NEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEZsb2F0NjRBcnJheS5wcm90b3R5cGUsXG5cdCclRnVuY3Rpb24lJzogRnVuY3Rpb24sXG5cdCclRnVuY3Rpb25Qcm90b3R5cGUlJzogRnVuY3Rpb24ucHJvdG90eXBlLFxuXHQnJUdlbmVyYXRvciUnOiBnZW5lcmF0b3IgPyBnZXRQcm90byhnZW5lcmF0b3IoKSkgOiB1bmRlZmluZWQsXG5cdCclR2VuZXJhdG9yRnVuY3Rpb24lJzogZ2VuZXJhdG9yRnVuY3Rpb24sXG5cdCclR2VuZXJhdG9yUHJvdG90eXBlJSc6IGdlbmVyYXRvckZ1bmN0aW9uID8gZ2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuXHQnJUludDhBcnJheSUnOiB0eXBlb2YgSW50OEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEludDhBcnJheSxcblx0JyVJbnQ4QXJyYXlQcm90b3R5cGUlJzogdHlwZW9mIEludDhBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBJbnQ4QXJyYXkucHJvdG90eXBlLFxuXHQnJUludDE2QXJyYXklJzogdHlwZW9mIEludDE2QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogSW50MTZBcnJheSxcblx0JyVJbnQxNkFycmF5UHJvdG90eXBlJSc6IHR5cGVvZiBJbnQxNkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEludDhBcnJheS5wcm90b3R5cGUsXG5cdCclSW50MzJBcnJheSUnOiB0eXBlb2YgSW50MzJBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBJbnQzMkFycmF5LFxuXHQnJUludDMyQXJyYXlQcm90b3R5cGUlJzogdHlwZW9mIEludDMyQXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogSW50MzJBcnJheS5wcm90b3R5cGUsXG5cdCclaXNGaW5pdGUlJzogaXNGaW5pdGUsXG5cdCclaXNOYU4lJzogaXNOYU4sXG5cdCclSXRlcmF0b3JQcm90b3R5cGUlJzogaGFzU3ltYm9scyA/IGdldFByb3RvKGdldFByb3RvKFtdW1N5bWJvbC5pdGVyYXRvcl0oKSkpIDogdW5kZWZpbmVkLFxuXHQnJUpTT04lJzogdHlwZW9mIEpTT04gPT09ICdvYmplY3QnID8gSlNPTiA6IHVuZGVmaW5lZCxcblx0JyVKU09OUGFyc2UlJzogdHlwZW9mIEpTT04gPT09ICdvYmplY3QnID8gSlNPTi5wYXJzZSA6IHVuZGVmaW5lZCxcblx0JyVNYXAlJzogdHlwZW9mIE1hcCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBNYXAsXG5cdCclTWFwSXRlcmF0b3JQcm90b3R5cGUlJzogdHlwZW9mIE1hcCA9PT0gJ3VuZGVmaW5lZCcgfHwgIWhhc1N5bWJvbHMgPyB1bmRlZmluZWQgOiBnZXRQcm90byhuZXcgTWFwKClbU3ltYm9sLml0ZXJhdG9yXSgpKSxcblx0JyVNYXBQcm90b3R5cGUlJzogdHlwZW9mIE1hcCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBNYXAucHJvdG90eXBlLFxuXHQnJU1hdGglJzogTWF0aCxcblx0JyVOdW1iZXIlJzogTnVtYmVyLFxuXHQnJU51bWJlclByb3RvdHlwZSUnOiBOdW1iZXIucHJvdG90eXBlLFxuXHQnJU9iamVjdCUnOiBPYmplY3QsXG5cdCclT2JqZWN0UHJvdG90eXBlJSc6IE9iamVjdC5wcm90b3R5cGUsXG5cdCclT2JqUHJvdG9fdG9TdHJpbmclJzogT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyxcblx0JyVPYmpQcm90b192YWx1ZU9mJSc6IE9iamVjdC5wcm90b3R5cGUudmFsdWVPZixcblx0JyVwYXJzZUZsb2F0JSc6IHBhcnNlRmxvYXQsXG5cdCclcGFyc2VJbnQlJzogcGFyc2VJbnQsXG5cdCclUHJvbWlzZSUnOiB0eXBlb2YgUHJvbWlzZSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBQcm9taXNlLFxuXHQnJVByb21pc2VQcm90b3R5cGUlJzogdHlwZW9mIFByb21pc2UgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogUHJvbWlzZS5wcm90b3R5cGUsXG5cdCclUHJvbWlzZVByb3RvX3RoZW4lJzogdHlwZW9mIFByb21pc2UgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogUHJvbWlzZS5wcm90b3R5cGUudGhlbixcblx0JyVQcm9taXNlX2FsbCUnOiB0eXBlb2YgUHJvbWlzZSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBQcm9taXNlLmFsbCxcblx0JyVQcm9taXNlX3JlamVjdCUnOiB0eXBlb2YgUHJvbWlzZSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBQcm9taXNlLnJlamVjdCxcblx0JyVQcm9taXNlX3Jlc29sdmUlJzogdHlwZW9mIFByb21pc2UgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogUHJvbWlzZS5yZXNvbHZlLFxuXHQnJVByb3h5JSc6IHR5cGVvZiBQcm94eSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBQcm94eSxcblx0JyVSYW5nZUVycm9yJSc6IFJhbmdlRXJyb3IsXG5cdCclUmFuZ2VFcnJvclByb3RvdHlwZSUnOiBSYW5nZUVycm9yLnByb3RvdHlwZSxcblx0JyVSZWZlcmVuY2VFcnJvciUnOiBSZWZlcmVuY2VFcnJvcixcblx0JyVSZWZlcmVuY2VFcnJvclByb3RvdHlwZSUnOiBSZWZlcmVuY2VFcnJvci5wcm90b3R5cGUsXG5cdCclUmVmbGVjdCUnOiB0eXBlb2YgUmVmbGVjdCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBSZWZsZWN0LFxuXHQnJVJlZ0V4cCUnOiBSZWdFeHAsXG5cdCclUmVnRXhwUHJvdG90eXBlJSc6IFJlZ0V4cC5wcm90b3R5cGUsXG5cdCclU2V0JSc6IHR5cGVvZiBTZXQgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogU2V0LFxuXHQnJVNldEl0ZXJhdG9yUHJvdG90eXBlJSc6IHR5cGVvZiBTZXQgPT09ICd1bmRlZmluZWQnIHx8ICFoYXNTeW1ib2xzID8gdW5kZWZpbmVkIDogZ2V0UHJvdG8obmV3IFNldCgpW1N5bWJvbC5pdGVyYXRvcl0oKSksXG5cdCclU2V0UHJvdG90eXBlJSc6IHR5cGVvZiBTZXQgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogU2V0LnByb3RvdHlwZSxcblx0JyVTaGFyZWRBcnJheUJ1ZmZlciUnOiB0eXBlb2YgU2hhcmVkQXJyYXlCdWZmZXIgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogU2hhcmVkQXJyYXlCdWZmZXIsXG5cdCclU2hhcmVkQXJyYXlCdWZmZXJQcm90b3R5cGUlJzogdHlwZW9mIFNoYXJlZEFycmF5QnVmZmVyID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFNoYXJlZEFycmF5QnVmZmVyLnByb3RvdHlwZSxcblx0JyVTdHJpbmclJzogU3RyaW5nLFxuXHQnJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJSc6IGhhc1N5bWJvbHMgPyBnZXRQcm90bygnJ1tTeW1ib2wuaXRlcmF0b3JdKCkpIDogdW5kZWZpbmVkLFxuXHQnJVN0cmluZ1Byb3RvdHlwZSUnOiBTdHJpbmcucHJvdG90eXBlLFxuXHQnJVN5bWJvbCUnOiBoYXNTeW1ib2xzID8gU3ltYm9sIDogdW5kZWZpbmVkLFxuXHQnJVN5bWJvbFByb3RvdHlwZSUnOiBoYXNTeW1ib2xzID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcblx0JyVTeW50YXhFcnJvciUnOiBTeW50YXhFcnJvcixcblx0JyVTeW50YXhFcnJvclByb3RvdHlwZSUnOiBTeW50YXhFcnJvci5wcm90b3R5cGUsXG5cdCclVGhyb3dUeXBlRXJyb3IlJzogVGhyb3dUeXBlRXJyb3IsXG5cdCclVHlwZWRBcnJheSUnOiBUeXBlZEFycmF5LFxuXHQnJVR5cGVkQXJyYXlQcm90b3R5cGUlJzogVHlwZWRBcnJheSA/IFR5cGVkQXJyYXkucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuXHQnJVR5cGVFcnJvciUnOiAkVHlwZUVycm9yLFxuXHQnJVR5cGVFcnJvclByb3RvdHlwZSUnOiAkVHlwZUVycm9yLnByb3RvdHlwZSxcblx0JyVVaW50OEFycmF5JSc6IHR5cGVvZiBVaW50OEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQ4QXJyYXksXG5cdCclVWludDhBcnJheVByb3RvdHlwZSUnOiB0eXBlb2YgVWludDhBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50OEFycmF5LnByb3RvdHlwZSxcblx0JyVVaW50OENsYW1wZWRBcnJheSUnOiB0eXBlb2YgVWludDhDbGFtcGVkQXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogVWludDhDbGFtcGVkQXJyYXksXG5cdCclVWludDhDbGFtcGVkQXJyYXlQcm90b3R5cGUlJzogdHlwZW9mIFVpbnQ4Q2xhbXBlZEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQ4Q2xhbXBlZEFycmF5LnByb3RvdHlwZSxcblx0JyVVaW50MTZBcnJheSUnOiB0eXBlb2YgVWludDE2QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogVWludDE2QXJyYXksXG5cdCclVWludDE2QXJyYXlQcm90b3R5cGUlJzogdHlwZW9mIFVpbnQxNkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQxNkFycmF5LnByb3RvdHlwZSxcblx0JyVVaW50MzJBcnJheSUnOiB0eXBlb2YgVWludDMyQXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogVWludDMyQXJyYXksXG5cdCclVWludDMyQXJyYXlQcm90b3R5cGUlJzogdHlwZW9mIFVpbnQzMkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQzMkFycmF5LnByb3RvdHlwZSxcblx0JyVVUklFcnJvciUnOiBVUklFcnJvcixcblx0JyVVUklFcnJvclByb3RvdHlwZSUnOiBVUklFcnJvci5wcm90b3R5cGUsXG5cdCclV2Vha01hcCUnOiB0eXBlb2YgV2Vha01hcCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBXZWFrTWFwLFxuXHQnJVdlYWtNYXBQcm90b3R5cGUlJzogdHlwZW9mIFdlYWtNYXAgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogV2Vha01hcC5wcm90b3R5cGUsXG5cdCclV2Vha1NldCUnOiB0eXBlb2YgV2Vha1NldCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBXZWFrU2V0LFxuXHQnJVdlYWtTZXRQcm90b3R5cGUlJzogdHlwZW9mIFdlYWtTZXQgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogV2Vha1NldC5wcm90b3R5cGVcbn07XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnZnVuY3Rpb24tYmluZCcpO1xudmFyICRyZXBsYWNlID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIFN0cmluZy5wcm90b3R5cGUucmVwbGFjZSk7XG5cbi8qIGFkYXB0ZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vbG9kYXNoL2xvZGFzaC9ibG9iLzQuMTcuMTUvZGlzdC9sb2Rhc2guanMjTDY3MzUtTDY3NDQgKi9cbnZhciByZVByb3BOYW1lID0gL1teJS5bXFxdXSt8XFxbKD86KC0/XFxkKyg/OlxcLlxcZCspPyl8KFtcIiddKSgoPzooPyFcXDIpW15cXFxcXXxcXFxcLikqPylcXDIpXFxdfCg/PSg/OlxcLnxcXFtcXF0pKD86XFwufFxcW1xcXXwlJCkpL2c7XG52YXIgcmVFc2NhcGVDaGFyID0gL1xcXFwoXFxcXCk/L2c7IC8qKiBVc2VkIHRvIG1hdGNoIGJhY2tzbGFzaGVzIGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHN0cmluZ1RvUGF0aCA9IGZ1bmN0aW9uIHN0cmluZ1RvUGF0aChzdHJpbmcpIHtcblx0dmFyIHJlc3VsdCA9IFtdO1xuXHQkcmVwbGFjZShzdHJpbmcsIHJlUHJvcE5hbWUsIGZ1bmN0aW9uIChtYXRjaCwgbnVtYmVyLCBxdW90ZSwgc3ViU3RyaW5nKSB7XG5cdFx0cmVzdWx0W3Jlc3VsdC5sZW5ndGhdID0gcXVvdGUgPyAkcmVwbGFjZShzdWJTdHJpbmcsIHJlRXNjYXBlQ2hhciwgJyQxJykgOiAobnVtYmVyIHx8IG1hdGNoKTtcblx0fSk7XG5cdHJldHVybiByZXN1bHQ7XG59O1xuLyogZW5kIGFkYXB0YXRpb24gKi9cblxudmFyIGdldEJhc2VJbnRyaW5zaWMgPSBmdW5jdGlvbiBnZXRCYXNlSW50cmluc2ljKG5hbWUsIGFsbG93TWlzc2luZykge1xuXHRpZiAoIShuYW1lIGluIElOVFJJTlNJQ1MpKSB7XG5cdFx0dGhyb3cgbmV3IFN5bnRheEVycm9yKCdpbnRyaW5zaWMgJyArIG5hbWUgKyAnIGRvZXMgbm90IGV4aXN0IScpO1xuXHR9XG5cblx0Ly8gaXN0YW5idWwgaWdub3JlIGlmIC8vIGhvcGVmdWxseSB0aGlzIGlzIGltcG9zc2libGUgdG8gdGVzdCA6LSlcblx0aWYgKHR5cGVvZiBJTlRSSU5TSUNTW25hbWVdID09PSAndW5kZWZpbmVkJyAmJiAhYWxsb3dNaXNzaW5nKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2ludHJpbnNpYyAnICsgbmFtZSArICcgZXhpc3RzLCBidXQgaXMgbm90IGF2YWlsYWJsZS4gUGxlYXNlIGZpbGUgYW4gaXNzdWUhJyk7XG5cdH1cblxuXHRyZXR1cm4gSU5UUklOU0lDU1tuYW1lXTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gR2V0SW50cmluc2ljKG5hbWUsIGFsbG93TWlzc2luZykge1xuXHRpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnIHx8IG5hbWUubGVuZ3RoID09PSAwKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignaW50cmluc2ljIG5hbWUgbXVzdCBiZSBhIG5vbi1lbXB0eSBzdHJpbmcnKTtcblx0fVxuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgdHlwZW9mIGFsbG93TWlzc2luZyAhPT0gJ2Jvb2xlYW4nKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignXCJhbGxvd01pc3NpbmdcIiBhcmd1bWVudCBtdXN0IGJlIGEgYm9vbGVhbicpO1xuXHR9XG5cblx0dmFyIHBhcnRzID0gc3RyaW5nVG9QYXRoKG5hbWUpO1xuXG5cdHZhciB2YWx1ZSA9IGdldEJhc2VJbnRyaW5zaWMoJyUnICsgKHBhcnRzLmxlbmd0aCA+IDAgPyBwYXJ0c1swXSA6ICcnKSArICclJywgYWxsb3dNaXNzaW5nKTtcblx0Zm9yICh2YXIgaSA9IDE7IGkgPCBwYXJ0cy5sZW5ndGg7IGkgKz0gMSkge1xuXHRcdGlmICh2YWx1ZSAhPSBudWxsKSB7XG5cdFx0XHRpZiAoJGdPUEQgJiYgKGkgKyAxKSA+PSBwYXJ0cy5sZW5ndGgpIHtcblx0XHRcdFx0dmFyIGRlc2MgPSAkZ09QRCh2YWx1ZSwgcGFydHNbaV0pO1xuXHRcdFx0XHRpZiAoIWFsbG93TWlzc2luZyAmJiAhKHBhcnRzW2ldIGluIHZhbHVlKSkge1xuXHRcdFx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdiYXNlIGludHJpbnNpYyBmb3IgJyArIG5hbWUgKyAnIGV4aXN0cywgYnV0IHRoZSBwcm9wZXJ0eSBpcyBub3QgYXZhaWxhYmxlLicpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHZhbHVlID0gZGVzYyA/IChkZXNjLmdldCB8fCBkZXNjLnZhbHVlKSA6IHZhbHVlW3BhcnRzW2ldXTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhbHVlID0gdmFsdWVbcGFydHNbaV1dO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRyZXR1cm4gdmFsdWU7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nID8gcmVxdWlyZSgnLi9idWlsZC9tb2NrcycpIDogcmVxdWlyZSgnLi9idWlsZCcpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfZGVmaW5lUHJvcGVydHk7IiwiZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbmhlcml0c0xvb3NlOyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5DYWxlbmRhckRheVBocmFzZXMgPSBleHBvcnRzLkRheVBpY2tlck5hdmlnYXRpb25QaHJhc2VzID0gZXhwb3J0cy5EYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0c1BocmFzZXMgPSBleHBvcnRzLkRheVBpY2tlclBocmFzZXMgPSBleHBvcnRzLlNpbmdsZURhdGVQaWNrZXJJbnB1dFBocmFzZXMgPSBleHBvcnRzLlNpbmdsZURhdGVQaWNrZXJQaHJhc2VzID0gZXhwb3J0cy5EYXRlUmFuZ2VQaWNrZXJJbnB1dFBocmFzZXMgPSBleHBvcnRzLkRhdGVSYW5nZVBpY2tlclBocmFzZXMgPSBleHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcbnZhciBjYWxlbmRhckxhYmVsID0gJ0NhbGVuZGFyJztcbnZhciByb2xlRGVzY3JpcHRpb24gPSAnZGF0ZXBpY2tlcic7XG52YXIgY2xvc2VEYXRlUGlja2VyID0gJ0Nsb3NlJztcbnZhciBmb2N1c1N0YXJ0RGF0ZSA9ICdJbnRlcmFjdCB3aXRoIHRoZSBjYWxlbmRhciBhbmQgYWRkIHRoZSBjaGVjay1pbiBkYXRlIGZvciB5b3VyIHRyaXAuJztcbnZhciBjbGVhckRhdGUgPSAnQ2xlYXIgRGF0ZSc7XG52YXIgY2xlYXJEYXRlcyA9ICdDbGVhciBEYXRlcyc7XG52YXIganVtcFRvUHJldk1vbnRoID0gJ01vdmUgYmFja3dhcmQgdG8gc3dpdGNoIHRvIHRoZSBwcmV2aW91cyBtb250aC4nO1xudmFyIGp1bXBUb05leHRNb250aCA9ICdNb3ZlIGZvcndhcmQgdG8gc3dpdGNoIHRvIHRoZSBuZXh0IG1vbnRoLic7XG52YXIga2V5Ym9hcmRTaG9ydGN1dHMgPSAnS2V5Ym9hcmQgU2hvcnRjdXRzJztcbnZhciBzaG93S2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCA9ICdPcGVuIHRoZSBrZXlib2FyZCBzaG9ydGN1dHMgcGFuZWwuJztcbnZhciBoaWRlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCA9ICdDbG9zZSB0aGUgc2hvcnRjdXRzIHBhbmVsLic7XG52YXIgb3BlblRoaXNQYW5lbCA9ICdPcGVuIHRoaXMgcGFuZWwuJztcbnZhciBlbnRlcktleSA9ICdFbnRlciBrZXknO1xudmFyIGxlZnRBcnJvd1JpZ2h0QXJyb3cgPSAnUmlnaHQgYW5kIGxlZnQgYXJyb3cga2V5cyc7XG52YXIgdXBBcnJvd0Rvd25BcnJvdyA9ICd1cCBhbmQgZG93biBhcnJvdyBrZXlzJztcbnZhciBwYWdlVXBQYWdlRG93biA9ICdwYWdlIHVwIGFuZCBwYWdlIGRvd24ga2V5cyc7XG52YXIgaG9tZUVuZCA9ICdIb21lIGFuZCBlbmQga2V5cyc7XG52YXIgZXNjYXBlID0gJ0VzY2FwZSBrZXknO1xudmFyIHF1ZXN0aW9uTWFyayA9ICdRdWVzdGlvbiBtYXJrJztcbnZhciBzZWxlY3RGb2N1c2VkRGF0ZSA9ICdTZWxlY3QgdGhlIGRhdGUgaW4gZm9jdXMuJztcbnZhciBtb3ZlRm9jdXNCeU9uZURheSA9ICdNb3ZlIGJhY2t3YXJkIChsZWZ0KSBhbmQgZm9yd2FyZCAocmlnaHQpIGJ5IG9uZSBkYXkuJztcbnZhciBtb3ZlRm9jdXNCeU9uZVdlZWsgPSAnTW92ZSBiYWNrd2FyZCAodXApIGFuZCBmb3J3YXJkIChkb3duKSBieSBvbmUgd2Vlay4nO1xudmFyIG1vdmVGb2N1c0J5T25lTW9udGggPSAnU3dpdGNoIG1vbnRocy4nO1xudmFyIG1vdmVGb2N1c3RvU3RhcnRBbmRFbmRPZldlZWsgPSAnR28gdG8gdGhlIGZpcnN0IG9yIGxhc3QgZGF5IG9mIGEgd2Vlay4nO1xudmFyIHJldHVybkZvY3VzVG9JbnB1dCA9ICdSZXR1cm4gdG8gdGhlIGRhdGUgaW5wdXQgZmllbGQuJztcbnZhciBrZXlib2FyZEZvcndhcmROYXZpZ2F0aW9uSW5zdHJ1Y3Rpb25zID0gJ05hdmlnYXRlIGZvcndhcmQgdG8gaW50ZXJhY3Qgd2l0aCB0aGUgY2FsZW5kYXIgYW5kIHNlbGVjdCBhIGRhdGUuIFByZXNzIHRoZSBxdWVzdGlvbiBtYXJrIGtleSB0byBnZXQgdGhlIGtleWJvYXJkIHNob3J0Y3V0cyBmb3IgY2hhbmdpbmcgZGF0ZXMuJztcbnZhciBrZXlib2FyZEJhY2t3YXJkTmF2aWdhdGlvbkluc3RydWN0aW9ucyA9ICdOYXZpZ2F0ZSBiYWNrd2FyZCB0byBpbnRlcmFjdCB3aXRoIHRoZSBjYWxlbmRhciBhbmQgc2VsZWN0IGEgZGF0ZS4gUHJlc3MgdGhlIHF1ZXN0aW9uIG1hcmsga2V5IHRvIGdldCB0aGUga2V5Ym9hcmQgc2hvcnRjdXRzIGZvciBjaGFuZ2luZyBkYXRlcy4nO1xuXG52YXIgY2hvb3NlQXZhaWxhYmxlU3RhcnREYXRlID0gZnVuY3Rpb24gY2hvb3NlQXZhaWxhYmxlU3RhcnREYXRlKF9yZWYpIHtcbiAgdmFyIGRhdGUgPSBfcmVmLmRhdGU7XG4gIHJldHVybiBcIkNob29zZSBcIi5jb25jYXQoZGF0ZSwgXCIgYXMgeW91ciBjaGVjay1pbiBkYXRlLiBJdFxcdTIwMTlzIGF2YWlsYWJsZS5cIik7XG59O1xuXG52YXIgY2hvb3NlQXZhaWxhYmxlRW5kRGF0ZSA9IGZ1bmN0aW9uIGNob29zZUF2YWlsYWJsZUVuZERhdGUoX3JlZjIpIHtcbiAgdmFyIGRhdGUgPSBfcmVmMi5kYXRlO1xuICByZXR1cm4gXCJDaG9vc2UgXCIuY29uY2F0KGRhdGUsIFwiIGFzIHlvdXIgY2hlY2stb3V0IGRhdGUuIEl0XFx1MjAxOXMgYXZhaWxhYmxlLlwiKTtcbn07XG5cbnZhciBjaG9vc2VBdmFpbGFibGVEYXRlID0gZnVuY3Rpb24gY2hvb3NlQXZhaWxhYmxlRGF0ZShfcmVmMykge1xuICB2YXIgZGF0ZSA9IF9yZWYzLmRhdGU7XG4gIHJldHVybiBkYXRlO1xufTtcblxudmFyIGRhdGVJc1VuYXZhaWxhYmxlID0gZnVuY3Rpb24gZGF0ZUlzVW5hdmFpbGFibGUoX3JlZjQpIHtcbiAgdmFyIGRhdGUgPSBfcmVmNC5kYXRlO1xuICByZXR1cm4gXCJOb3QgYXZhaWxhYmxlLiBcIi5jb25jYXQoZGF0ZSk7XG59O1xuXG52YXIgZGF0ZUlzU2VsZWN0ZWQgPSBmdW5jdGlvbiBkYXRlSXNTZWxlY3RlZChfcmVmNSkge1xuICB2YXIgZGF0ZSA9IF9yZWY1LmRhdGU7XG4gIHJldHVybiBcIlNlbGVjdGVkLiBcIi5jb25jYXQoZGF0ZSk7XG59O1xuXG52YXIgZGF0ZUlzU2VsZWN0ZWRBc1N0YXJ0RGF0ZSA9IGZ1bmN0aW9uIGRhdGVJc1NlbGVjdGVkQXNTdGFydERhdGUoX3JlZjYpIHtcbiAgdmFyIGRhdGUgPSBfcmVmNi5kYXRlO1xuICByZXR1cm4gXCJTZWxlY3RlZCBhcyBzdGFydCBkYXRlLiBcIi5jb25jYXQoZGF0ZSk7XG59O1xuXG52YXIgZGF0ZUlzU2VsZWN0ZWRBc0VuZERhdGUgPSBmdW5jdGlvbiBkYXRlSXNTZWxlY3RlZEFzRW5kRGF0ZShfcmVmNykge1xuICB2YXIgZGF0ZSA9IF9yZWY3LmRhdGU7XG4gIHJldHVybiBcIlNlbGVjdGVkIGFzIGVuZCBkYXRlLiBcIi5jb25jYXQoZGF0ZSk7XG59O1xuXG52YXIgX2RlZmF1bHQgPSB7XG4gIGNhbGVuZGFyTGFiZWw6IGNhbGVuZGFyTGFiZWwsXG4gIHJvbGVEZXNjcmlwdGlvbjogcm9sZURlc2NyaXB0aW9uLFxuICBjbG9zZURhdGVQaWNrZXI6IGNsb3NlRGF0ZVBpY2tlcixcbiAgZm9jdXNTdGFydERhdGU6IGZvY3VzU3RhcnREYXRlLFxuICBjbGVhckRhdGU6IGNsZWFyRGF0ZSxcbiAgY2xlYXJEYXRlczogY2xlYXJEYXRlcyxcbiAganVtcFRvUHJldk1vbnRoOiBqdW1wVG9QcmV2TW9udGgsXG4gIGp1bXBUb05leHRNb250aDoganVtcFRvTmV4dE1vbnRoLFxuICBrZXlib2FyZFNob3J0Y3V0czoga2V5Ym9hcmRTaG9ydGN1dHMsXG4gIHNob3dLZXlib2FyZFNob3J0Y3V0c1BhbmVsOiBzaG93S2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCxcbiAgaGlkZUtleWJvYXJkU2hvcnRjdXRzUGFuZWw6IGhpZGVLZXlib2FyZFNob3J0Y3V0c1BhbmVsLFxuICBvcGVuVGhpc1BhbmVsOiBvcGVuVGhpc1BhbmVsLFxuICBlbnRlcktleTogZW50ZXJLZXksXG4gIGxlZnRBcnJvd1JpZ2h0QXJyb3c6IGxlZnRBcnJvd1JpZ2h0QXJyb3csXG4gIHVwQXJyb3dEb3duQXJyb3c6IHVwQXJyb3dEb3duQXJyb3csXG4gIHBhZ2VVcFBhZ2VEb3duOiBwYWdlVXBQYWdlRG93bixcbiAgaG9tZUVuZDogaG9tZUVuZCxcbiAgZXNjYXBlOiBlc2NhcGUsXG4gIHF1ZXN0aW9uTWFyazogcXVlc3Rpb25NYXJrLFxuICBzZWxlY3RGb2N1c2VkRGF0ZTogc2VsZWN0Rm9jdXNlZERhdGUsXG4gIG1vdmVGb2N1c0J5T25lRGF5OiBtb3ZlRm9jdXNCeU9uZURheSxcbiAgbW92ZUZvY3VzQnlPbmVXZWVrOiBtb3ZlRm9jdXNCeU9uZVdlZWssXG4gIG1vdmVGb2N1c0J5T25lTW9udGg6IG1vdmVGb2N1c0J5T25lTW9udGgsXG4gIG1vdmVGb2N1c3RvU3RhcnRBbmRFbmRPZldlZWs6IG1vdmVGb2N1c3RvU3RhcnRBbmRFbmRPZldlZWssXG4gIHJldHVybkZvY3VzVG9JbnB1dDogcmV0dXJuRm9jdXNUb0lucHV0LFxuICBrZXlib2FyZEZvcndhcmROYXZpZ2F0aW9uSW5zdHJ1Y3Rpb25zOiBrZXlib2FyZEZvcndhcmROYXZpZ2F0aW9uSW5zdHJ1Y3Rpb25zLFxuICBrZXlib2FyZEJhY2t3YXJkTmF2aWdhdGlvbkluc3RydWN0aW9uczoga2V5Ym9hcmRCYWNrd2FyZE5hdmlnYXRpb25JbnN0cnVjdGlvbnMsXG4gIGNob29zZUF2YWlsYWJsZVN0YXJ0RGF0ZTogY2hvb3NlQXZhaWxhYmxlU3RhcnREYXRlLFxuICBjaG9vc2VBdmFpbGFibGVFbmREYXRlOiBjaG9vc2VBdmFpbGFibGVFbmREYXRlLFxuICBkYXRlSXNVbmF2YWlsYWJsZTogZGF0ZUlzVW5hdmFpbGFibGUsXG4gIGRhdGVJc1NlbGVjdGVkOiBkYXRlSXNTZWxlY3RlZCxcbiAgZGF0ZUlzU2VsZWN0ZWRBc1N0YXJ0RGF0ZTogZGF0ZUlzU2VsZWN0ZWRBc1N0YXJ0RGF0ZSxcbiAgZGF0ZUlzU2VsZWN0ZWRBc0VuZERhdGU6IGRhdGVJc1NlbGVjdGVkQXNFbmREYXRlXG59O1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDtcbnZhciBEYXRlUmFuZ2VQaWNrZXJQaHJhc2VzID0ge1xuICBjYWxlbmRhckxhYmVsOiBjYWxlbmRhckxhYmVsLFxuICByb2xlRGVzY3JpcHRpb246IHJvbGVEZXNjcmlwdGlvbixcbiAgY2xvc2VEYXRlUGlja2VyOiBjbG9zZURhdGVQaWNrZXIsXG4gIGNsZWFyRGF0ZXM6IGNsZWFyRGF0ZXMsXG4gIGZvY3VzU3RhcnREYXRlOiBmb2N1c1N0YXJ0RGF0ZSxcbiAganVtcFRvUHJldk1vbnRoOiBqdW1wVG9QcmV2TW9udGgsXG4gIGp1bXBUb05leHRNb250aDoganVtcFRvTmV4dE1vbnRoLFxuICBrZXlib2FyZFNob3J0Y3V0czoga2V5Ym9hcmRTaG9ydGN1dHMsXG4gIHNob3dLZXlib2FyZFNob3J0Y3V0c1BhbmVsOiBzaG93S2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCxcbiAgaGlkZUtleWJvYXJkU2hvcnRjdXRzUGFuZWw6IGhpZGVLZXlib2FyZFNob3J0Y3V0c1BhbmVsLFxuICBvcGVuVGhpc1BhbmVsOiBvcGVuVGhpc1BhbmVsLFxuICBlbnRlcktleTogZW50ZXJLZXksXG4gIGxlZnRBcnJvd1JpZ2h0QXJyb3c6IGxlZnRBcnJvd1JpZ2h0QXJyb3csXG4gIHVwQXJyb3dEb3duQXJyb3c6IHVwQXJyb3dEb3duQXJyb3csXG4gIHBhZ2VVcFBhZ2VEb3duOiBwYWdlVXBQYWdlRG93bixcbiAgaG9tZUVuZDogaG9tZUVuZCxcbiAgZXNjYXBlOiBlc2NhcGUsXG4gIHF1ZXN0aW9uTWFyazogcXVlc3Rpb25NYXJrLFxuICBzZWxlY3RGb2N1c2VkRGF0ZTogc2VsZWN0Rm9jdXNlZERhdGUsXG4gIG1vdmVGb2N1c0J5T25lRGF5OiBtb3ZlRm9jdXNCeU9uZURheSxcbiAgbW92ZUZvY3VzQnlPbmVXZWVrOiBtb3ZlRm9jdXNCeU9uZVdlZWssXG4gIG1vdmVGb2N1c0J5T25lTW9udGg6IG1vdmVGb2N1c0J5T25lTW9udGgsXG4gIG1vdmVGb2N1c3RvU3RhcnRBbmRFbmRPZldlZWs6IG1vdmVGb2N1c3RvU3RhcnRBbmRFbmRPZldlZWssXG4gIHJldHVybkZvY3VzVG9JbnB1dDogcmV0dXJuRm9jdXNUb0lucHV0LFxuICBrZXlib2FyZEZvcndhcmROYXZpZ2F0aW9uSW5zdHJ1Y3Rpb25zOiBrZXlib2FyZEZvcndhcmROYXZpZ2F0aW9uSW5zdHJ1Y3Rpb25zLFxuICBrZXlib2FyZEJhY2t3YXJkTmF2aWdhdGlvbkluc3RydWN0aW9uczoga2V5Ym9hcmRCYWNrd2FyZE5hdmlnYXRpb25JbnN0cnVjdGlvbnMsXG4gIGNob29zZUF2YWlsYWJsZVN0YXJ0RGF0ZTogY2hvb3NlQXZhaWxhYmxlU3RhcnREYXRlLFxuICBjaG9vc2VBdmFpbGFibGVFbmREYXRlOiBjaG9vc2VBdmFpbGFibGVFbmREYXRlLFxuICBkYXRlSXNVbmF2YWlsYWJsZTogZGF0ZUlzVW5hdmFpbGFibGUsXG4gIGRhdGVJc1NlbGVjdGVkOiBkYXRlSXNTZWxlY3RlZCxcbiAgZGF0ZUlzU2VsZWN0ZWRBc1N0YXJ0RGF0ZTogZGF0ZUlzU2VsZWN0ZWRBc1N0YXJ0RGF0ZSxcbiAgZGF0ZUlzU2VsZWN0ZWRBc0VuZERhdGU6IGRhdGVJc1NlbGVjdGVkQXNFbmREYXRlXG59O1xuZXhwb3J0cy5EYXRlUmFuZ2VQaWNrZXJQaHJhc2VzID0gRGF0ZVJhbmdlUGlja2VyUGhyYXNlcztcbnZhciBEYXRlUmFuZ2VQaWNrZXJJbnB1dFBocmFzZXMgPSB7XG4gIGZvY3VzU3RhcnREYXRlOiBmb2N1c1N0YXJ0RGF0ZSxcbiAgY2xlYXJEYXRlczogY2xlYXJEYXRlcyxcbiAga2V5Ym9hcmRGb3J3YXJkTmF2aWdhdGlvbkluc3RydWN0aW9uczoga2V5Ym9hcmRGb3J3YXJkTmF2aWdhdGlvbkluc3RydWN0aW9ucyxcbiAga2V5Ym9hcmRCYWNrd2FyZE5hdmlnYXRpb25JbnN0cnVjdGlvbnM6IGtleWJvYXJkQmFja3dhcmROYXZpZ2F0aW9uSW5zdHJ1Y3Rpb25zXG59O1xuZXhwb3J0cy5EYXRlUmFuZ2VQaWNrZXJJbnB1dFBocmFzZXMgPSBEYXRlUmFuZ2VQaWNrZXJJbnB1dFBocmFzZXM7XG52YXIgU2luZ2xlRGF0ZVBpY2tlclBocmFzZXMgPSB7XG4gIGNhbGVuZGFyTGFiZWw6IGNhbGVuZGFyTGFiZWwsXG4gIHJvbGVEZXNjcmlwdGlvbjogcm9sZURlc2NyaXB0aW9uLFxuICBjbG9zZURhdGVQaWNrZXI6IGNsb3NlRGF0ZVBpY2tlcixcbiAgY2xlYXJEYXRlOiBjbGVhckRhdGUsXG4gIGp1bXBUb1ByZXZNb250aDoganVtcFRvUHJldk1vbnRoLFxuICBqdW1wVG9OZXh0TW9udGg6IGp1bXBUb05leHRNb250aCxcbiAga2V5Ym9hcmRTaG9ydGN1dHM6IGtleWJvYXJkU2hvcnRjdXRzLFxuICBzaG93S2V5Ym9hcmRTaG9ydGN1dHNQYW5lbDogc2hvd0tleWJvYXJkU2hvcnRjdXRzUGFuZWwsXG4gIGhpZGVLZXlib2FyZFNob3J0Y3V0c1BhbmVsOiBoaWRlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCxcbiAgb3BlblRoaXNQYW5lbDogb3BlblRoaXNQYW5lbCxcbiAgZW50ZXJLZXk6IGVudGVyS2V5LFxuICBsZWZ0QXJyb3dSaWdodEFycm93OiBsZWZ0QXJyb3dSaWdodEFycm93LFxuICB1cEFycm93RG93bkFycm93OiB1cEFycm93RG93bkFycm93LFxuICBwYWdlVXBQYWdlRG93bjogcGFnZVVwUGFnZURvd24sXG4gIGhvbWVFbmQ6IGhvbWVFbmQsXG4gIGVzY2FwZTogZXNjYXBlLFxuICBxdWVzdGlvbk1hcms6IHF1ZXN0aW9uTWFyayxcbiAgc2VsZWN0Rm9jdXNlZERhdGU6IHNlbGVjdEZvY3VzZWREYXRlLFxuICBtb3ZlRm9jdXNCeU9uZURheTogbW92ZUZvY3VzQnlPbmVEYXksXG4gIG1vdmVGb2N1c0J5T25lV2VlazogbW92ZUZvY3VzQnlPbmVXZWVrLFxuICBtb3ZlRm9jdXNCeU9uZU1vbnRoOiBtb3ZlRm9jdXNCeU9uZU1vbnRoLFxuICBtb3ZlRm9jdXN0b1N0YXJ0QW5kRW5kT2ZXZWVrOiBtb3ZlRm9jdXN0b1N0YXJ0QW5kRW5kT2ZXZWVrLFxuICByZXR1cm5Gb2N1c1RvSW5wdXQ6IHJldHVybkZvY3VzVG9JbnB1dCxcbiAga2V5Ym9hcmRGb3J3YXJkTmF2aWdhdGlvbkluc3RydWN0aW9uczoga2V5Ym9hcmRGb3J3YXJkTmF2aWdhdGlvbkluc3RydWN0aW9ucyxcbiAga2V5Ym9hcmRCYWNrd2FyZE5hdmlnYXRpb25JbnN0cnVjdGlvbnM6IGtleWJvYXJkQmFja3dhcmROYXZpZ2F0aW9uSW5zdHJ1Y3Rpb25zLFxuICBjaG9vc2VBdmFpbGFibGVEYXRlOiBjaG9vc2VBdmFpbGFibGVEYXRlLFxuICBkYXRlSXNVbmF2YWlsYWJsZTogZGF0ZUlzVW5hdmFpbGFibGUsXG4gIGRhdGVJc1NlbGVjdGVkOiBkYXRlSXNTZWxlY3RlZFxufTtcbmV4cG9ydHMuU2luZ2xlRGF0ZVBpY2tlclBocmFzZXMgPSBTaW5nbGVEYXRlUGlja2VyUGhyYXNlcztcbnZhciBTaW5nbGVEYXRlUGlja2VySW5wdXRQaHJhc2VzID0ge1xuICBjbGVhckRhdGU6IGNsZWFyRGF0ZSxcbiAga2V5Ym9hcmRGb3J3YXJkTmF2aWdhdGlvbkluc3RydWN0aW9uczoga2V5Ym9hcmRGb3J3YXJkTmF2aWdhdGlvbkluc3RydWN0aW9ucyxcbiAga2V5Ym9hcmRCYWNrd2FyZE5hdmlnYXRpb25JbnN0cnVjdGlvbnM6IGtleWJvYXJkQmFja3dhcmROYXZpZ2F0aW9uSW5zdHJ1Y3Rpb25zXG59O1xuZXhwb3J0cy5TaW5nbGVEYXRlUGlja2VySW5wdXRQaHJhc2VzID0gU2luZ2xlRGF0ZVBpY2tlcklucHV0UGhyYXNlcztcbnZhciBEYXlQaWNrZXJQaHJhc2VzID0ge1xuICBjYWxlbmRhckxhYmVsOiBjYWxlbmRhckxhYmVsLFxuICByb2xlRGVzY3JpcHRpb246IHJvbGVEZXNjcmlwdGlvbixcbiAganVtcFRvUHJldk1vbnRoOiBqdW1wVG9QcmV2TW9udGgsXG4gIGp1bXBUb05leHRNb250aDoganVtcFRvTmV4dE1vbnRoLFxuICBrZXlib2FyZFNob3J0Y3V0czoga2V5Ym9hcmRTaG9ydGN1dHMsXG4gIHNob3dLZXlib2FyZFNob3J0Y3V0c1BhbmVsOiBzaG93S2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCxcbiAgaGlkZUtleWJvYXJkU2hvcnRjdXRzUGFuZWw6IGhpZGVLZXlib2FyZFNob3J0Y3V0c1BhbmVsLFxuICBvcGVuVGhpc1BhbmVsOiBvcGVuVGhpc1BhbmVsLFxuICBlbnRlcktleTogZW50ZXJLZXksXG4gIGxlZnRBcnJvd1JpZ2h0QXJyb3c6IGxlZnRBcnJvd1JpZ2h0QXJyb3csXG4gIHVwQXJyb3dEb3duQXJyb3c6IHVwQXJyb3dEb3duQXJyb3csXG4gIHBhZ2VVcFBhZ2VEb3duOiBwYWdlVXBQYWdlRG93bixcbiAgaG9tZUVuZDogaG9tZUVuZCxcbiAgZXNjYXBlOiBlc2NhcGUsXG4gIHF1ZXN0aW9uTWFyazogcXVlc3Rpb25NYXJrLFxuICBzZWxlY3RGb2N1c2VkRGF0ZTogc2VsZWN0Rm9jdXNlZERhdGUsXG4gIG1vdmVGb2N1c0J5T25lRGF5OiBtb3ZlRm9jdXNCeU9uZURheSxcbiAgbW92ZUZvY3VzQnlPbmVXZWVrOiBtb3ZlRm9jdXNCeU9uZVdlZWssXG4gIG1vdmVGb2N1c0J5T25lTW9udGg6IG1vdmVGb2N1c0J5T25lTW9udGgsXG4gIG1vdmVGb2N1c3RvU3RhcnRBbmRFbmRPZldlZWs6IG1vdmVGb2N1c3RvU3RhcnRBbmRFbmRPZldlZWssXG4gIHJldHVybkZvY3VzVG9JbnB1dDogcmV0dXJuRm9jdXNUb0lucHV0LFxuICBjaG9vc2VBdmFpbGFibGVTdGFydERhdGU6IGNob29zZUF2YWlsYWJsZVN0YXJ0RGF0ZSxcbiAgY2hvb3NlQXZhaWxhYmxlRW5kRGF0ZTogY2hvb3NlQXZhaWxhYmxlRW5kRGF0ZSxcbiAgY2hvb3NlQXZhaWxhYmxlRGF0ZTogY2hvb3NlQXZhaWxhYmxlRGF0ZSxcbiAgZGF0ZUlzVW5hdmFpbGFibGU6IGRhdGVJc1VuYXZhaWxhYmxlLFxuICBkYXRlSXNTZWxlY3RlZDogZGF0ZUlzU2VsZWN0ZWQsXG4gIGRhdGVJc1NlbGVjdGVkQXNTdGFydERhdGU6IGRhdGVJc1NlbGVjdGVkQXNTdGFydERhdGUsXG4gIGRhdGVJc1NlbGVjdGVkQXNFbmREYXRlOiBkYXRlSXNTZWxlY3RlZEFzRW5kRGF0ZVxufTtcbmV4cG9ydHMuRGF5UGlja2VyUGhyYXNlcyA9IERheVBpY2tlclBocmFzZXM7XG52YXIgRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHNQaHJhc2VzID0ge1xuICBrZXlib2FyZFNob3J0Y3V0czoga2V5Ym9hcmRTaG9ydGN1dHMsXG4gIHNob3dLZXlib2FyZFNob3J0Y3V0c1BhbmVsOiBzaG93S2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCxcbiAgaGlkZUtleWJvYXJkU2hvcnRjdXRzUGFuZWw6IGhpZGVLZXlib2FyZFNob3J0Y3V0c1BhbmVsLFxuICBvcGVuVGhpc1BhbmVsOiBvcGVuVGhpc1BhbmVsLFxuICBlbnRlcktleTogZW50ZXJLZXksXG4gIGxlZnRBcnJvd1JpZ2h0QXJyb3c6IGxlZnRBcnJvd1JpZ2h0QXJyb3csXG4gIHVwQXJyb3dEb3duQXJyb3c6IHVwQXJyb3dEb3duQXJyb3csXG4gIHBhZ2VVcFBhZ2VEb3duOiBwYWdlVXBQYWdlRG93bixcbiAgaG9tZUVuZDogaG9tZUVuZCxcbiAgZXNjYXBlOiBlc2NhcGUsXG4gIHF1ZXN0aW9uTWFyazogcXVlc3Rpb25NYXJrLFxuICBzZWxlY3RGb2N1c2VkRGF0ZTogc2VsZWN0Rm9jdXNlZERhdGUsXG4gIG1vdmVGb2N1c0J5T25lRGF5OiBtb3ZlRm9jdXNCeU9uZURheSxcbiAgbW92ZUZvY3VzQnlPbmVXZWVrOiBtb3ZlRm9jdXNCeU9uZVdlZWssXG4gIG1vdmVGb2N1c0J5T25lTW9udGg6IG1vdmVGb2N1c0J5T25lTW9udGgsXG4gIG1vdmVGb2N1c3RvU3RhcnRBbmRFbmRPZldlZWs6IG1vdmVGb2N1c3RvU3RhcnRBbmRFbmRPZldlZWssXG4gIHJldHVybkZvY3VzVG9JbnB1dDogcmV0dXJuRm9jdXNUb0lucHV0XG59O1xuZXhwb3J0cy5EYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0c1BocmFzZXMgPSBEYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0c1BocmFzZXM7XG52YXIgRGF5UGlja2VyTmF2aWdhdGlvblBocmFzZXMgPSB7XG4gIGp1bXBUb1ByZXZNb250aDoganVtcFRvUHJldk1vbnRoLFxuICBqdW1wVG9OZXh0TW9udGg6IGp1bXBUb05leHRNb250aFxufTtcbmV4cG9ydHMuRGF5UGlja2VyTmF2aWdhdGlvblBocmFzZXMgPSBEYXlQaWNrZXJOYXZpZ2F0aW9uUGhyYXNlcztcbnZhciBDYWxlbmRhckRheVBocmFzZXMgPSB7XG4gIGNob29zZUF2YWlsYWJsZURhdGU6IGNob29zZUF2YWlsYWJsZURhdGUsXG4gIGRhdGVJc1VuYXZhaWxhYmxlOiBkYXRlSXNVbmF2YWlsYWJsZSxcbiAgZGF0ZUlzU2VsZWN0ZWQ6IGRhdGVJc1NlbGVjdGVkLFxuICBkYXRlSXNTZWxlY3RlZEFzU3RhcnREYXRlOiBkYXRlSXNTZWxlY3RlZEFzU3RhcnREYXRlLFxuICBkYXRlSXNTZWxlY3RlZEFzRW5kRGF0ZTogZGF0ZUlzU2VsZWN0ZWRBc0VuZERhdGVcbn07XG5leHBvcnRzLkNhbGVuZGFyRGF5UGhyYXNlcyA9IENhbGVuZGFyRGF5UGhyYXNlczsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGdldFBocmFzZVByb3BUeXBlcztcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBnZXRQaHJhc2VQcm9wVHlwZXMoZGVmYXVsdFBocmFzZXMpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKGRlZmF1bHRQaHJhc2VzKS5yZWR1Y2UoZnVuY3Rpb24gKHBocmFzZXMsIGtleSkge1xuICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKHt9LCBwaHJhc2VzLCAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKHt9LCBrZXksIF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm9uZU9mVHlwZShbX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLCBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLCBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ub2RlXSkpKTtcbiAgfSwge30pO1xufSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBzaGFsbG93RXF1YWw7XG5cbnZhciBfb2JqZWN0SXMgPSByZXF1aXJlKCdvYmplY3QtaXMnKTtcblxudmFyIF9vYmplY3RJczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vYmplY3RJcyk7XG5cbnZhciBfaGFzID0gcmVxdWlyZSgnaGFzJyk7XG5cbnZhciBfaGFzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2hhcyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuLy8gYWRhcHRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iLzE0NDMyOGZlODE3MTllOTE2Yjk0NmUyMjY2MDQ3OWUzMTU2MWJiMGIvcGFja2FnZXMvc2hhcmVkL3NoYWxsb3dFcXVhbC5qcyNMMzYtTDY4XG5mdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQikge1xuICBpZiAoKDAsIF9vYmplY3RJczJbJ2RlZmF1bHQnXSkob2JqQSwgb2JqQikpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICghb2JqQSB8fCAhb2JqQiB8fCAodHlwZW9mIG9iakEgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKG9iakEpKSAhPT0gJ29iamVjdCcgfHwgKHR5cGVvZiBvYmpCID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihvYmpCKSkgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuXG4gIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGtleXNBLnNvcnQoKTtcbiAga2V5c0Iuc29ydCgpO1xuXG4gIC8vIFRlc3QgZm9yIEEncyBrZXlzIGRpZmZlcmVudCBmcm9tIEIuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5c0EubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAoISgwLCBfaGFzMlsnZGVmYXVsdCddKShvYmpCLCBrZXlzQVtpXSkgfHwgISgwLCBfb2JqZWN0SXMyWydkZWZhdWx0J10pKG9iakFba2V5c0FbaV1dLCBvYmpCW2tleXNBW2ldXSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklpNHVMM055WXk5cGJtUmxlQzVxY3lKZExDSnVZVzFsY3lJNld5SnphR0ZzYkc5M1JYRjFZV3dpTENKdlltcEJJaXdpYjJKcVFpSXNJbXRsZVhOQklpd2lUMkpxWldOMElpd2lhMlY1Y3lJc0ltdGxlWE5DSWl3aWJHVnVaM1JvSWl3aWMyOXlkQ0lzSW1raVhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN096czdPM0ZDUVVsM1FrRXNXVHM3UVVGS2VFSTdPenM3UVVGRFFUczdPenM3TzBGQlJVRTdRVUZEWlN4VFFVRlRRU3haUVVGVUxFTkJRWE5DUXl4SlFVRjBRaXhGUVVFMFFrTXNTVUZCTlVJc1JVRkJhME03UVVGREwwTXNUVUZCU1N3eVFrRkJSMFFzU1VGQlNDeEZRVUZUUXl4SlFVRlVMRU5CUVVvc1JVRkJiMEk3UVVGRGJFSXNWMEZCVHl4SlFVRlFPMEZCUTBRN08wRkJSVVFzVFVGQlNTeERRVUZEUkN4SlFVRkVMRWxCUVZNc1EwRkJRME1zU1VGQlZpeEpRVUZyUWl4UlFVRlBSQ3hKUVVGUUxIbERRVUZQUVN4SlFVRlFMRTlCUVdkQ0xGRkJRV3hETEVsQlFUaERMRkZCUVU5RExFbEJRVkFzZVVOQlFVOUJMRWxCUVZBc1QwRkJaMElzVVVGQmJFVXNSVUZCTkVVN1FVRkRNVVVzVjBGQlR5eExRVUZRTzBGQlEwUTdPMEZCUlVRc1RVRkJUVU1zVVVGQlVVTXNUMEZCVDBNc1NVRkJVQ3hEUVVGWlNpeEpRVUZhTEVOQlFXUTdRVUZEUVN4TlFVRk5TeXhSUVVGUlJpeFBRVUZQUXl4SlFVRlFMRU5CUVZsSUxFbEJRVm9zUTBGQlpEczdRVUZGUVN4TlFVRkpReXhOUVVGTlNTeE5RVUZPTEV0QlFXbENSQ3hOUVVGTlF5eE5RVUV6UWl4RlFVRnRRenRCUVVOcVF5eFhRVUZQTEV0QlFWQTdRVUZEUkRzN1FVRkZSRW9zVVVGQlRVc3NTVUZCVGp0QlFVTkJSaXhSUVVGTlJTeEpRVUZPT3p0QlFVVkJPMEZCUTBFc1QwRkJTeXhKUVVGSlF5eEpRVUZKTEVOQlFXSXNSVUZCWjBKQkxFbEJRVWxPTEUxQlFVMUpMRTFCUVRGQ0xFVkJRV3REUlN4TFFVRkxMRU5CUVhaRExFVkJRVEJETzBGQlEzaERMRkZCUVVrc1EwRkJReXh6UWtGQlNWQXNTVUZCU2l4RlFVRlZReXhOUVVGTlRTeERRVUZPTEVOQlFWWXNRMEZCUkN4SlFVRjNRaXhEUVVGRExESkNRVUZIVWl4TFFVRkxSU3hOUVVGTlRTeERRVUZPTEVOQlFVd3NRMEZCU0N4RlFVRnRRbEFzUzBGQlMwTXNUVUZCVFUwc1EwRkJUaXhEUVVGTUxFTkJRVzVDTEVOQlFUZENMRVZCUVdsRk8wRkJReTlFTEdGQlFVOHNTMEZCVUR0QlFVTkVPMEZCUTBZN08wRkJSVVFzVTBGQlR5eEpRVUZRTzBGQlEwUWlMQ0ptYVd4bElqb2lhVzVrWlhndWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpwYlhCdmNuUWdhWE1nWm5KdmJTQW5iMkpxWldOMExXbHpKenRjYm1sdGNHOXlkQ0JvWVhNZ1puSnZiU0FuYUdGekp6dGNibHh1THk4Z1lXUmhjSFJsWkNCbWNtOXRJR2gwZEhCek9pOHZaMmwwYUhWaUxtTnZiUzltWVdObFltOXZheTl5WldGamRDOWliRzlpTHpFME5ETXlPR1psT0RFM01UbGxPVEUyWWprME5tVXlNalkyTURRM09XVXpNVFUyTVdKaU1HSXZjR0ZqYTJGblpYTXZjMmhoY21Wa0wzTm9ZV3hzYjNkRmNYVmhiQzVxY3lOTU16WXRURFk0WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JtZFc1amRHbHZiaUJ6YUdGc2JHOTNSWEYxWVd3b2IySnFRU3dnYjJKcVFpa2dlMXh1SUNCcFppQW9hWE1vYjJKcVFTd2diMkpxUWlrcElIdGNiaUFnSUNCeVpYUjFjbTRnZEhKMVpUdGNiaUFnZlZ4dVhHNGdJR2xtSUNnaGIySnFRU0I4ZkNBaGIySnFRaUI4ZkNCMGVYQmxiMllnYjJKcVFTQWhQVDBnSjI5aWFtVmpkQ2NnZkh3Z2RIbHdaVzltSUc5aWFrSWdJVDA5SUNkdlltcGxZM1FuS1NCN1hHNGdJQ0FnY21WMGRYSnVJR1poYkhObE8xeHVJQ0I5WEc1Y2JpQWdZMjl1YzNRZ2EyVjVjMEVnUFNCUFltcGxZM1F1YTJWNWN5aHZZbXBCS1R0Y2JpQWdZMjl1YzNRZ2EyVjVjMElnUFNCUFltcGxZM1F1YTJWNWN5aHZZbXBDS1R0Y2JseHVJQ0JwWmlBb2EyVjVjMEV1YkdWdVozUm9JQ0U5UFNCclpYbHpRaTVzWlc1bmRHZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lIMWNibHh1SUNCclpYbHpRUzV6YjNKMEtDazdYRzRnSUd0bGVYTkNMbk52Y25Rb0tUdGNibHh1SUNBdkx5QlVaWE4wSUdadmNpQkJKM01nYTJWNWN5QmthV1ptWlhKbGJuUWdabkp2YlNCQ0xseHVJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0E4SUd0bGVYTkJMbXhsYm1kMGFEc2dhU0FyUFNBeEtTQjdYRzRnSUNBZ2FXWWdLQ0ZvWVhNb2IySnFRaXdnYTJWNWMwRmJhVjBwSUh4OElDRnBjeWh2WW1wQlcydGxlWE5CVzJsZFhTd2diMkpxUWx0clpYbHpRVnRwWFYwcEtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlU3WEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnY21WMGRYSnVJSFJ5ZFdVN1hHNTlYRzRpWFgwPVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9leHRlbmRzOyIsImZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2Fzc2VydFRoaXNJbml0aWFsaXplZDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVXaWxkY2FyZFwiKTtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLndpdGhTdHlsZXMgPSB3aXRoU3R5bGVzO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwid2l0aFN0eWxlc1Byb3BUeXBlc1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfd2l0aFN0eWxlc1Byb3BUeXBlcy53aXRoU3R5bGVzUHJvcFR5cGVzO1xuICB9XG59KTtcbmV4cG9ydHMuY3NzID0gZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX2luaGVyaXRzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9ob2lzdE5vblJlYWN0U3RhdGljcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImhvaXN0LW5vbi1yZWFjdC1zdGF0aWNzXCIpKTtcblxudmFyIF9nZXRDb21wb25lbnROYW1lID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiYWlyYm5iLXByb3AtdHlwZXMvYnVpbGQvaGVscGVycy9nZXRDb21wb25lbnROYW1lXCIpKTtcblxudmFyIF9lbXB0eVN0eWxlc0ZuID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9lbXB0eVN0eWxlc0ZuXCIpKTtcblxudmFyIF9wZXJmID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9wZXJmXCIpKTtcblxudmFyIF9XaXRoU3R5bGVzQ29udGV4dCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL1dpdGhTdHlsZXNDb250ZXh0XCIpKTtcblxudmFyIF9UaGVtZWRTdHlsZVNoZWV0ID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vVGhlbWVkU3R5bGVTaGVldFwiKSk7XG5cbnZhciBfd2l0aFN0eWxlc1Byb3BUeXBlcyA9IHJlcXVpcmUoXCIuL3dpdGhTdHlsZXNQcm9wVHlwZXNcIik7XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhzb3VyY2UsIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG4vKipcbiAqIEEgaGlnaGVyIG9yZGVyIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIGhpZ2hlciBvcmRlciBjbGFzcyBjb21wb25lbnQgdGhhdCBpbmplY3RzXG4gKiBDU1MtaW4tSlMgcHJvcHMgZGVyaXZlZCBmcm9tIHRoZSByZWFjdC13aXRoLXN0eWxlcyB0aGVtZSwgaW50ZXJmYWNlLCBhbmRcbiAqIGRpcmVjdGlvbiBwcm92aWRlZCB0aHJvdWdoIHRoZSBXaXRoU3R5bGVzQ29udGV4dCBwcm92aWRlci5cbiAqXG4gKiBUaGUgZnVuY3Rpb24gc2hvdWxkIGJlIHVzZWQgYXMgZm9sbG93czpcbiAqIGB3aXRoU3R5bGVzKCh0aGVtZSkgPT4gc3R5bGVzLCBvcHRpb25zKShDb21wb25lbnQpYFxuICpcbiAqIE9wdGlvbnMgY2FuIGJlIHVzZWQgdG8gcmVuYW1lIHRoZSBpbmplY3RlZCBwcm9wcywgbWVtb2l6ZSB0aGUgY29tcG9uZW50LCBhbmQgZmx1c2hcbiAqIHRoZSBzdHlsZXMgdG8gdGhlIHN0eWxlcyB0YWcgKG9yIHdoYXRldmVyIHRoZSBpbnRlcmZhY2UgaW1wbGVtZW50cyBhcyBmbHVzaCkgYmVmb3JlXG4gKiByZW5kZXJpbmcuXG4gKlxuICogQGV4cG9ydFxuICogQHBhcmFtIHtGdW5jdGlvbnxudWxsfHVuZGVmaW5lZH0gW3N0eWxlc0ZuPUVNUFRZX1NUWUxFU19GTl1cbiAqIEBwYXJhbSB7T2JqZWN0fSBbe1xuICogICAgIHN0eWxlc1Byb3BOYW1lID0gJ3N0eWxlcycsXG4gKiAgICAgdGhlbWVQcm9wTmFtZSA9ICd0aGVtZScsXG4gKiAgICAgY3NzUHJvcE5hbWUgPSAnY3NzJyxcbiAqICAgICBmbHVzaEJlZm9yZSA9IGZhbHNlLFxuICogICAgIHB1cmVDb21wb25lbnQgPSBmYWxzZSxcbiAqICAgfT17fV1cbiAqIEByZXR1cm5zIGEgaGlnaGVyIG9yZGVyIGNvbXBvbmVudCB0aGF0IHdyYXBzIHRoZSBwcm92aWRlZCBjb21wb25lbnQgYW5kIGluamVjdHNcbiAqIHRoZSByZWFjdC13aXRoLXN0eWxlcyBjc3MsIHN0eWxlcywgYW5kIHRoZW1lIHByb3BzLlxuICovXG5mdW5jdGlvbiB3aXRoU3R5bGVzKCkge1xuICB2YXIgc3R5bGVzRm4gPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IF9lbXB0eVN0eWxlc0ZuW1wiZGVmYXVsdFwiXTtcblxuICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge30sXG4gICAgICBfcmVmJHN0eWxlc1Byb3BOYW1lID0gX3JlZi5zdHlsZXNQcm9wTmFtZSxcbiAgICAgIHN0eWxlc1Byb3BOYW1lID0gX3JlZiRzdHlsZXNQcm9wTmFtZSA9PT0gdm9pZCAwID8gJ3N0eWxlcycgOiBfcmVmJHN0eWxlc1Byb3BOYW1lLFxuICAgICAgX3JlZiR0aGVtZVByb3BOYW1lID0gX3JlZi50aGVtZVByb3BOYW1lLFxuICAgICAgdGhlbWVQcm9wTmFtZSA9IF9yZWYkdGhlbWVQcm9wTmFtZSA9PT0gdm9pZCAwID8gJ3RoZW1lJyA6IF9yZWYkdGhlbWVQcm9wTmFtZSxcbiAgICAgIF9yZWYkY3NzUHJvcE5hbWUgPSBfcmVmLmNzc1Byb3BOYW1lLFxuICAgICAgY3NzUHJvcE5hbWUgPSBfcmVmJGNzc1Byb3BOYW1lID09PSB2b2lkIDAgPyAnY3NzJyA6IF9yZWYkY3NzUHJvcE5hbWUsXG4gICAgICBfcmVmJGZsdXNoQmVmb3JlID0gX3JlZi5mbHVzaEJlZm9yZSxcbiAgICAgIGZsdXNoQmVmb3JlID0gX3JlZiRmbHVzaEJlZm9yZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJGZsdXNoQmVmb3JlLFxuICAgICAgX3JlZiRwdXJlQ29tcG9uZW50ID0gX3JlZi5wdXJlQ29tcG9uZW50LFxuICAgICAgcHVyZUNvbXBvbmVudCA9IF9yZWYkcHVyZUNvbXBvbmVudCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJHB1cmVDb21wb25lbnQ7XG5cbiAgc3R5bGVzRm4gPSBzdHlsZXNGbiB8fCBfZW1wdHlTdHlsZXNGbltcImRlZmF1bHRcIl07XG4gIHZhciBCYXNlQ2xhc3MgPSBwdXJlQ29tcG9uZW50ID8gX3JlYWN0W1wiZGVmYXVsdFwiXS5QdXJlQ29tcG9uZW50IDogX3JlYWN0W1wiZGVmYXVsdFwiXS5Db21wb25lbnQ7XG4gIC8qKiBDYWNoZSBmb3Igc3RvcmluZyB0aGUgcmVzdWx0IG9mIHN0eWxlc0ZuKHRoZW1lKSBmb3IgYWxsIHRoZW1lcy4gKi9cblxuICB2YXIgc3R5bGVzRm5SZXN1bHRDYWNoZU1hcCA9IHR5cGVvZiBXZWFrTWFwID09PSAndW5kZWZpbmVkJyA/IG5ldyBNYXAoKSA6IG5ldyBXZWFrTWFwKCk7XG5cbiAgZnVuY3Rpb24gZ2V0T3JDcmVhdGVTdHlsZXNGblJlc3VsdENhY2hlKHRoZW1lKSB7XG4gICAgLy8gR2V0IGFuZCBzdG9yZSB0aGUgcmVzdWx0IGluIHRoZSBzdHlsZXNGblJlc3VsdHNDYWNoZSBmb3IgdGhlIGNvbXBvbmVudFxuICAgIC8vIC0tIG5vdCB0aGUgaW5zdGFuY2UgLS0gc28gd2Ugb25seSBhcHBseSB0aGUgdGhlbWUgdG8gdGhlIHN0eWxlc0ZuXG4gICAgLy8gb25jZSBwZXIgdGhlbWUgZm9yIHRoaXMgY29tcG9uZW50LlxuICAgIHZhciBjYWNoZWRSZXN1bHRGb3JUaGVtZSA9IHN0eWxlc0ZuUmVzdWx0Q2FjaGVNYXAuZ2V0KHRoZW1lKTtcbiAgICB2YXIgc3R5bGVzRm5SZXN1bHQgPSBjYWNoZWRSZXN1bHRGb3JUaGVtZSB8fCBzdHlsZXNGbih0aGVtZSkgfHwge307XG4gICAgc3R5bGVzRm5SZXN1bHRDYWNoZU1hcC5zZXQodGhlbWUsIHN0eWxlc0ZuUmVzdWx0KTsgLy8gY2FjaGUgdGhlIHJlc3VsdCBvZiBzdHlsZXNGbih0aGVtZSlcblxuICAgIHJldHVybiBzdHlsZXNGblJlc3VsdDtcbiAgfVxuICAvKipcbiAgICogQ2FjaGUgZm9yIHN0b3JpbmcgdGhlIHJlc3VsdHMgb2YgY29tcHV0YXRpb25zOlxuICAgKiBgV2Vha01hcDxUaGVtZSwgV2Vha01hcDx0eXBlb2YgV2l0aFN0eWxlcywgeyBsdHI6IHt9LCBydGw6IHt9IH0+PmBcbiAgICogRmFsbGluZyBiYWNrIHRvIGBNYXBgIHdoZW5ldmVyIGBXZWFrTWFwYCBpcyBub3Qgc3VwcG9ydGVkXG4gICAqL1xuXG5cbiAgdmFyIHdpdGhTdHlsZXNDYWNoZSA9IHR5cGVvZiBXZWFrTWFwID09PSAndW5kZWZpbmVkJyA/IG5ldyBNYXAoKSA6IG5ldyBXZWFrTWFwKCk7XG5cbiAgZnVuY3Rpb24gZ2V0Q29tcG9uZW50Q2FjaGUodGhlbWUsIGNvbXBvbmVudCwgZGlyZWN0aW9uKSB7XG4gICAgdmFyIHRoZW1lQ2FjaGUgPSB3aXRoU3R5bGVzQ2FjaGUuZ2V0KHRoZW1lKTtcblxuICAgIGlmICghdGhlbWVDYWNoZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGNvbXBvbmVudENhY2hlID0gdGhlbWVDYWNoZS5nZXQoY29tcG9uZW50KTtcblxuICAgIGlmICghY29tcG9uZW50Q2FjaGUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBjb21wb25lbnRDYWNoZVtkaXJlY3Rpb25dO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlQ29tcG9uZW50Q2FjaGUodGhlbWUsIGNvbXBvbmVudCwgZGlyZWN0aW9uLCByZXN1bHRzKSB7XG4gICAgdmFyIHRoZW1lQ2FjaGUgPSB3aXRoU3R5bGVzQ2FjaGUuZ2V0KHRoZW1lKTtcblxuICAgIGlmICghdGhlbWVDYWNoZSkge1xuICAgICAgdGhlbWVDYWNoZSA9IHR5cGVvZiBXZWFrTWFwID09PSAndW5kZWZpbmVkJyA/IG5ldyBNYXAoKSA6IG5ldyBXZWFrTWFwKCk7XG4gICAgICB3aXRoU3R5bGVzQ2FjaGUuc2V0KHRoZW1lLCB0aGVtZUNhY2hlKTtcbiAgICB9XG5cbiAgICB2YXIgY29tcG9uZW50Q2FjaGUgPSB0aGVtZUNhY2hlLmdldChjb21wb25lbnQpO1xuXG4gICAgaWYgKCFjb21wb25lbnRDYWNoZSkge1xuICAgICAgY29tcG9uZW50Q2FjaGUgPSB7XG4gICAgICAgIGx0cjoge30sXG4gICAgICAgIHJ0bDoge31cbiAgICAgIH07XG4gICAgICB0aGVtZUNhY2hlLnNldChjb21wb25lbnQsIGNvbXBvbmVudENhY2hlKTtcbiAgICB9XG5cbiAgICBjb21wb25lbnRDYWNoZVtkaXJlY3Rpb25dID0gcmVzdWx0cztcbiAgfVxuICAvKiogRGVyaXZlIHRoZSBjcmVhdGUgZnVuY3Rpb24gZnJvbSB0aGUgaW50ZXJmYWNlIGFuZCBkaXJlY3Rpb24gKi9cblxuXG4gIGZ1bmN0aW9uIG1ha2VDcmVhdGVGbihkaXJlY3Rpb24sIHN0eWxlc0ludGVyZmFjZSkge1xuICAgIHZhciBkaXJlY3Rpb25TZWxlY3RvciA9IGRpcmVjdGlvbiA9PT0gX1dpdGhTdHlsZXNDb250ZXh0LkRJUkVDVElPTlMuUlRMID8gJ1JUTCcgOiAnTFRSJztcbiAgICB2YXIgY3JlYXRlID0gc3R5bGVzSW50ZXJmYWNlW1wiY3JlYXRlXCIuY29uY2F0KGRpcmVjdGlvblNlbGVjdG9yKV0gfHwgc3R5bGVzSW50ZXJmYWNlLmNyZWF0ZTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBjcmVhdGUgPSAoMCwgX3BlcmZbXCJkZWZhdWx0XCJdKSgnY3JlYXRlJykoY3JlYXRlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3JlYXRlO1xuICB9XG4gIC8qKiBEZXJpdmUgdGhlIHJlc29sdmUgZnVuY3Rpb24gZnJvbSB0aGUgaW50ZXJmYWNlIGFuZCBkaXJlY3Rpb24gKi9cblxuXG4gIGZ1bmN0aW9uIG1ha2VSZXNvbHZlRm4oZGlyZWN0aW9uLCBzdHlsZXNJbnRlcmZhY2UpIHtcbiAgICB2YXIgZGlyZWN0aW9uU2VsZWN0b3IgPSBkaXJlY3Rpb24gPT09IF9XaXRoU3R5bGVzQ29udGV4dC5ESVJFQ1RJT05TLlJUTCA/ICdSVEwnIDogJ0xUUic7XG4gICAgdmFyIHJlc29sdmUgPSBzdHlsZXNJbnRlcmZhY2VbXCJyZXNvbHZlXCIuY29uY2F0KGRpcmVjdGlvblNlbGVjdG9yKV0gfHwgc3R5bGVzSW50ZXJmYWNlLnJlc29sdmU7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgcmVzb2x2ZSA9ICgwLCBfcGVyZltcImRlZmF1bHRcIl0pKCdyZXNvbHZlJykocmVzb2x2ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc29sdmU7XG4gIH0gLy8gVGhlIGZ1bmN0aW9uIHRoYXQgd3JhcHMgdGhlIHByb3ZpZGVkIGNvbXBvbmVudCBpbiBhIHdyYXBwZXJcbiAgLy8gY29tcG9uZW50IHRoYXQgaW5qZWN0cyB0aGUgd2l0aFN0eWxlcyBwcm9wc1xuXG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHdpdGhTdHlsZXNIT0MoV3JhcHBlZENvbXBvbmVudCkge1xuICAgIHZhciB3cmFwcGVkQ29tcG9uZW50TmFtZSA9ICgwLCBfZ2V0Q29tcG9uZW50TmFtZVtcImRlZmF1bHRcIl0pKFdyYXBwZWRDb21wb25lbnQpOyAvLyBUaGUgd3JhcHBlciBjb21wb25lbnQgdGhhdCBpbmplY3RzIHRoZSB3aXRoU3R5bGVzIHByb3BzXG5cbiAgICB2YXIgV2l0aFN0eWxlcyA9XG4gICAgLyojX19QVVJFX18qL1xuICAgIGZ1bmN0aW9uIChfQmFzZUNsYXNzKSB7XG4gICAgICAoMCwgX2luaGVyaXRzTG9vc2UyW1wiZGVmYXVsdFwiXSkoV2l0aFN0eWxlcywgX0Jhc2VDbGFzcyk7XG5cbiAgICAgIGZ1bmN0aW9uIFdpdGhTdHlsZXMoKSB7XG4gICAgICAgIHJldHVybiBfQmFzZUNsYXNzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgIH1cblxuICAgICAgdmFyIF9wcm90byA9IFdpdGhTdHlsZXMucHJvdG90eXBlO1xuXG4gICAgICBfcHJvdG8uZ2V0Q3VycmVudEludGVyZmFjZSA9IGZ1bmN0aW9uIGdldEN1cnJlbnRJbnRlcmZhY2UoKSB7XG4gICAgICAgIC8vIEZhbGxiYWNrIHRvIHRoZSBzaW5nbGV0b24gaW1wbGVtZW50YXRpb25cbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dCAmJiB0aGlzLmNvbnRleHQuc3R5bGVzSW50ZXJmYWNlIHx8ICgwLCBfVGhlbWVkU3R5bGVTaGVldC5fZ2V0SW50ZXJmYWNlKSgpO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLmdldEN1cnJlbnRUaGVtZSA9IGZ1bmN0aW9uIGdldEN1cnJlbnRUaGVtZSgpIHtcbiAgICAgICAgLy8gRmFsbGJhY2sgdG8gdGhlIHNpbmdsZXRvbiBpbXBsZW1lbnRhdGlvblxuICAgICAgICByZXR1cm4gdGhpcy5jb250ZXh0ICYmIHRoaXMuY29udGV4dC5zdHlsZXNUaGVtZSB8fCAoMCwgX1RoZW1lZFN0eWxlU2hlZXQuX2dldFRoZW1lKSgpO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLmdldEN1cnJlbnREaXJlY3Rpb24gPSBmdW5jdGlvbiBnZXRDdXJyZW50RGlyZWN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250ZXh0ICYmIHRoaXMuY29udGV4dC5kaXJlY3Rpb24gfHwgX1dpdGhTdHlsZXNDb250ZXh0LkRJUkVDVElPTlMuTFRSO1xuICAgICAgfTtcblxuICAgICAgX3Byb3RvLmdldFByb3BzID0gZnVuY3Rpb24gZ2V0UHJvcHMoKSB7XG4gICAgICAgIC8vIEdldCB0aGUgc3R5bGVzIGludGVyZmFjZSwgdGhlbWUsIGFuZCBkaXJlY3Rpb24gZnJvbSBjb250ZXh0XG4gICAgICAgIHZhciBzdHlsZXNJbnRlcmZhY2UgPSB0aGlzLmdldEN1cnJlbnRJbnRlcmZhY2UoKTtcbiAgICAgICAgdmFyIHRoZW1lID0gdGhpcy5nZXRDdXJyZW50VGhlbWUoKTtcbiAgICAgICAgdmFyIGRpcmVjdGlvbiA9IHRoaXMuZ2V0Q3VycmVudERpcmVjdGlvbigpOyAvLyBVc2UgYSBjYWNoZSB0byBzdG9yZSB0aGUgaW50ZXJmYWNlIG1ldGhvZHMgYW5kIGNyZWF0ZWQgc3R5bGVzIGJ5IGRpcmVjdGlvbi5cbiAgICAgICAgLy8gVGhpcyB3YXksIGlmIHRoZSB0aGVtZSBhbmQgdGhlIGludGVyZmFjZSBkb24ndCBjaGFuZ2UsIHdlIGRvIG5vdCByZWNhbGN1bGF0ZVxuICAgICAgICAvLyBzdHlsZXMgb3IgYW55IG90aGVyIGludGVyZmFjZSBkZXJpdmF0aW9ucy4gVGhleSBhcmUgZWZmZWN0aXZlbHkgb25seSBjYWxjdWxhdGVkXG4gICAgICAgIC8vIG9uY2UgcGVyIGRpcmVjdGlvbiwgdW50aWwgdGhlIHRoZW1lIG9yIGludGVyZmFjZSBjaGFuZ2UuXG4gICAgICAgIC8vIEFzc3VtZTogYWx3YXlzIGFuIG9iamVjdC5cblxuICAgICAgICB2YXIgY29tcG9uZW50Q2FjaGUgPSBnZXRDb21wb25lbnRDYWNoZSh0aGVtZSwgV2l0aFN0eWxlcywgZGlyZWN0aW9uKTsgLy8gRGV0ZXJtaW5lIHdoYXQncyBjaGFuZ2VkXG5cbiAgICAgICAgdmFyIGludGVyZmFjZUNoYW5nZWQgPSAhY29tcG9uZW50Q2FjaGUgfHwgIWNvbXBvbmVudENhY2hlLnN0eWxlc0ludGVyZmFjZSB8fCBzdHlsZXNJbnRlcmZhY2UgJiYgY29tcG9uZW50Q2FjaGUuc3R5bGVzSW50ZXJmYWNlICE9PSBzdHlsZXNJbnRlcmZhY2U7XG4gICAgICAgIHZhciB0aGVtZUNoYW5nZWQgPSAhY29tcG9uZW50Q2FjaGUgfHwgY29tcG9uZW50Q2FjaGUudGhlbWUgIT09IHRoZW1lOyAvLyBJZiB0aGUgaW50ZXJmYWNlIGFuZCB0aGVtZSBoYXZlbid0IGNoYW5nZWQgZm9yIHRoaXMgZGlyZWN0aW9uLFxuICAgICAgICAvLyB3ZSByZXR1cm4gdGhlIGNhY2hlZCBwcm9wcyBpbW1lZGlhdGVseS5cblxuICAgICAgICBpZiAoIWludGVyZmFjZUNoYW5nZWQgJiYgIXRoZW1lQ2hhbmdlZCkge1xuICAgICAgICAgIHJldHVybiBjb21wb25lbnRDYWNoZS5wcm9wcztcbiAgICAgICAgfSAvLyBJZiB0aGUgdGhlbWUgb3IgdGhlIGludGVyZmFjZSBjaGFuZ2VkLCB0aGVuIHRoZXJlIGFyZSBzb21lIHZhbHVlc1xuICAgICAgICAvLyB3ZSBuZWVkIHRvIHJlY2FsY3VsYXRlLiBXZSBhdm9pZCByZWNhbGN1bGF0aW5nIHRoZSBvbmVzIHdlIGFscmVhZHlcbiAgICAgICAgLy8gY2FsY3VsYXRlZCBpbiB0aGUgcGFzdCBpZiB0aGUgb2JqZWN0cyB0aGV5J3JlIGRlcml2ZWQgZnJvbSBoYXZlIG5vdFxuICAgICAgICAvLyBjaGFuZ2VkLlxuXG5cbiAgICAgICAgdmFyIGNyZWF0ZSA9IGludGVyZmFjZUNoYW5nZWQgJiYgbWFrZUNyZWF0ZUZuKGRpcmVjdGlvbiwgc3R5bGVzSW50ZXJmYWNlKSB8fCBjb21wb25lbnRDYWNoZS5jcmVhdGU7XG4gICAgICAgIHZhciByZXNvbHZlID0gaW50ZXJmYWNlQ2hhbmdlZCAmJiBtYWtlUmVzb2x2ZUZuKGRpcmVjdGlvbiwgc3R5bGVzSW50ZXJmYWNlKSB8fCBjb21wb25lbnRDYWNoZS5yZXNvbHZlOyAvLyBEZXJpdmUgdGhlIGNzcyBmdW5jdGlvbiBwcm9wXG5cbiAgICAgICAgdmFyIGNzcyA9IGludGVyZmFjZUNoYW5nZWQgJiYgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gcmVzb2x2ZShhcmdzKTtcbiAgICAgICAgfSB8fCBjb21wb25lbnRDYWNoZS5wcm9wcy5jc3M7IC8vIEdldCBvciBjYWxjdWxhdGUgdGhlIHRoZW1lZCBzdHlsZXMgZnJvbSB0aGUgc3R5bGVzRm46XG4gICAgICAgIC8vIFVzZXMgYSBzZXBhcmF0ZSBjYWNoZSBhdCB0aGUgY29tcG9uZW50IGxldmVsLCBub3QgYXQgdGhlIGluc3RhbmNlIGxldmVsLFxuICAgICAgICAvLyB0byBvbmx5IGFwcGx5IHRoZSB0aGVtZSB0byB0aGUgc3R5bGVzRm4gb25jZSBwZXIgY29tcG9uZW50IGNsYXNzIHBlciB0aGVtZS5cblxuXG4gICAgICAgIHZhciBzdHlsZXNGblJlc3VsdCA9IGdldE9yQ3JlYXRlU3R5bGVzRm5SZXN1bHRDYWNoZSh0aGVtZSk7IC8vIERlcml2ZSB0aGUgc3R5bGVzIHByb3A6IHJlY2FsY3VsYXRlIGl0IGlmIGNyZWF0ZSBjaGFuZ2VkLCBvciBzdHlsZXNGblJlc3VsdCBjaGFuZ2VkXG5cbiAgICAgICAgdmFyIHN0eWxlcyA9IChpbnRlcmZhY2VDaGFuZ2VkIHx8IHN0eWxlc0ZuUmVzdWx0ICE9PSBjb21wb25lbnRDYWNoZS5zdHlsZXNGblJlc3VsdCkgJiYgY3JlYXRlKHN0eWxlc0ZuUmVzdWx0KSB8fCBjb21wb25lbnRDYWNoZS5wcm9wcy5zdHlsZXM7IC8vIFB1dCB0aGUgbmV3IHByb3BzIHRvZ2V0aGVyXG5cbiAgICAgICAgdmFyIHByb3BzID0ge1xuICAgICAgICAgIGNzczogY3NzLFxuICAgICAgICAgIHN0eWxlczogc3R5bGVzLFxuICAgICAgICAgIHRoZW1lOiB0aGVtZVxuICAgICAgICB9OyAvLyBVcGRhdGUgdGhlIGNhY2hlIHdpdGggYWxsIHRoZSBuZXcgdmFsdWVzXG5cbiAgICAgICAgdXBkYXRlQ29tcG9uZW50Q2FjaGUodGhlbWUsIFdpdGhTdHlsZXMsIGRpcmVjdGlvbiwge1xuICAgICAgICAgIHN0eWxlc0ludGVyZmFjZTogc3R5bGVzSW50ZXJmYWNlLFxuICAgICAgICAgIHRoZW1lOiB0aGVtZSxcbiAgICAgICAgICBjcmVhdGU6IGNyZWF0ZSxcbiAgICAgICAgICByZXNvbHZlOiByZXNvbHZlLFxuICAgICAgICAgIHN0eWxlc0ZuUmVzdWx0OiBzdHlsZXNGblJlc3VsdCxcbiAgICAgICAgICBwcm9wczogcHJvcHNcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwcm9wcztcbiAgICAgIH07XG5cbiAgICAgIF9wcm90by5mbHVzaCA9IGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgICAgICB2YXIgc3R5bGVzSW50ZXJmYWNlID0gdGhpcy5nZXRDdXJyZW50SW50ZXJmYWNlKCk7XG5cbiAgICAgICAgaWYgKHN0eWxlc0ludGVyZmFjZSAmJiBzdHlsZXNJbnRlcmZhY2UuZmx1c2gpIHtcbiAgICAgICAgICBzdHlsZXNJbnRlcmZhY2UuZmx1c2goKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgdmFyIF9yZWYyO1xuXG4gICAgICAgIC8vIFdlIG9ubHkgd2FudCB0byByZS1yZW5kZXIgaWYgdGhlIHRoZW1lLCBzdHlsZXNJbnRlcmZhY2UsIG9yIGRpcmVjdGlvbiBjaGFuZ2UuXG4gICAgICAgIC8vIFRoZXNlIHZhbHVlcyBhcmUgaW4gY29udGV4dCBzbyB3ZSdyZSBsaXN0ZW5pbmcgZm9yIHRoZWlyIHVwZGF0ZXMuXG4gICAgICAgIC8vIHRoaXMuZ2V0UHJvcHMoKSBkZXJpdmVzIHRoZSBwcm9wcyBmcm9tIHRoZSB0aGVtZSwgc3R5bGVzSW50ZXJmYWNlLCBhbmQgZGlyZWN0aW9uIGluXG4gICAgICAgIC8vIGNvbnRleHQsIGFuZCBtZW1vaXplcyB0aGVtIG9uIHRoZSBpbnN0YW5jZSBwZXIgZGlyZWN0aW9uLlxuICAgICAgICB2YXIgX3RoaXMkZ2V0UHJvcHMgPSB0aGlzLmdldFByb3BzKCksXG4gICAgICAgICAgICB0aGVtZSA9IF90aGlzJGdldFByb3BzLnRoZW1lLFxuICAgICAgICAgICAgc3R5bGVzID0gX3RoaXMkZ2V0UHJvcHMuc3R5bGVzLFxuICAgICAgICAgICAgY3NzID0gX3RoaXMkZ2V0UHJvcHMuY3NzOyAvLyBGbHVzaCBpZiBzcGVjaWZpZWRcblxuXG4gICAgICAgIGlmIChmbHVzaEJlZm9yZSkge1xuICAgICAgICAgIHRoaXMuZmx1c2goKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoV3JhcHBlZENvbXBvbmVudCwgKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKHt9LCB0aGlzLnByb3BzLCAoX3JlZjIgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKShfcmVmMiwgdGhlbWVQcm9wTmFtZSwgdGhlbWUpLCAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKF9yZWYyLCBzdHlsZXNQcm9wTmFtZSwgc3R5bGVzKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKShfcmVmMiwgY3NzUHJvcE5hbWUsIGNzcyksIF9yZWYyKSkpO1xuICAgICAgfTtcblxuICAgICAgcmV0dXJuIFdpdGhTdHlsZXM7XG4gICAgfShCYXNlQ2xhc3MpOyAvLyBDb3B5IHRoZSB3cmFwcGVkIGNvbXBvbmVudCdzIHByb3AgdHlwZXMgYW5kIGRlZmF1bHQgcHJvcHMgb24gV2l0aFN0eWxlc1xuXG5cbiAgICBpZiAoV3JhcHBlZENvbXBvbmVudC5wcm9wVHlwZXMpIHtcbiAgICAgIFdpdGhTdHlsZXMucHJvcFR5cGVzID0gX29iamVjdFNwcmVhZCh7fSwgV3JhcHBlZENvbXBvbmVudC5wcm9wVHlwZXMpO1xuICAgICAgZGVsZXRlIFdpdGhTdHlsZXMucHJvcFR5cGVzW3N0eWxlc1Byb3BOYW1lXTtcbiAgICAgIGRlbGV0ZSBXaXRoU3R5bGVzLnByb3BUeXBlc1t0aGVtZVByb3BOYW1lXTtcbiAgICAgIGRlbGV0ZSBXaXRoU3R5bGVzLnByb3BUeXBlc1tjc3NQcm9wTmFtZV07XG4gICAgfVxuXG4gICAgaWYgKFdyYXBwZWRDb21wb25lbnQuZGVmYXVsdFByb3BzKSB7XG4gICAgICBXaXRoU3R5bGVzLmRlZmF1bHRQcm9wcyA9IF9vYmplY3RTcHJlYWQoe30sIFdyYXBwZWRDb21wb25lbnQuZGVmYXVsdFByb3BzKTtcbiAgICB9XG5cbiAgICBXaXRoU3R5bGVzLmNvbnRleHRUeXBlID0gX1dpdGhTdHlsZXNDb250ZXh0W1wiZGVmYXVsdFwiXTtcbiAgICBXaXRoU3R5bGVzLldyYXBwZWRDb21wb25lbnQgPSBXcmFwcGVkQ29tcG9uZW50O1xuICAgIFdpdGhTdHlsZXMuZGlzcGxheU5hbWUgPSBcIndpdGhTdHlsZXMoXCIuY29uY2F0KHdyYXBwZWRDb21wb25lbnROYW1lLCBcIilcIik7XG4gICAgcmV0dXJuICgwLCBfaG9pc3ROb25SZWFjdFN0YXRpY3NbXCJkZWZhdWx0XCJdKShXaXRoU3R5bGVzLCBXcmFwcGVkQ29tcG9uZW50KTtcbiAgfTtcbn1cblxudmFyIF9kZWZhdWx0ID0gd2l0aFN0eWxlcztcbi8qKlxuICogRGVwcmVjYXRlZDogRG8gbm90IHVzZSBkaXJlY3RseS4gUGxlYXNlIHdyYXAgeW91ciBjb21wb25lbnQgaW4gYHdpdGhTdHlsZXNgIGFuZCB1c2UgdGhlIGBjc3NgXG4gKiBwcm9wIGluamVjdGVkIHZpYSBwcm9wcyBpbnN0ZWFkLlxuICovXG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7XG52YXIgY3NzID0gX1RoZW1lZFN0eWxlU2hlZXRbXCJkZWZhdWx0XCJdLnJlc29sdmVMVFI7XG5leHBvcnRzLmNzcyA9IGNzczsiLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJ2YXIgbW9tZW50ID0gcmVxdWlyZSgnbW9tZW50Jyk7XG52YXIgbW9tZW50VmFsaWRhdGlvbldyYXBwZXIgPSByZXF1aXJlKCcuL21vbWVudC12YWxpZGF0aW9uLXdyYXBwZXInKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9jb3JlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXG4gIG1vbWVudE9iaiA6IGNvcmUuY3JlYXRlTW9tZW50Q2hlY2tlcihcbiAgICAnb2JqZWN0JyxcbiAgICBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JztcbiAgICB9LFxuICAgIGZ1bmN0aW9uIGlzVmFsaWQodmFsdWUpIHtcbiAgICAgIHJldHVybiBtb21lbnRWYWxpZGF0aW9uV3JhcHBlci5pc1ZhbGlkTW9tZW50KHZhbHVlKTtcbiAgICB9LFxuICAgICdNb21lbnQnXG4gICksXG5cbiAgbW9tZW50U3RyaW5nIDogY29yZS5jcmVhdGVNb21lbnRDaGVja2VyKFxuICAgICdzdHJpbmcnLFxuICAgIGZ1bmN0aW9uKHN0cikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBzdHIgPT09ICdzdHJpbmcnO1xuICAgIH0sXG4gICAgZnVuY3Rpb24gaXNWYWxpZCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIG1vbWVudFZhbGlkYXRpb25XcmFwcGVyLmlzVmFsaWRNb21lbnQobW9tZW50KHZhbHVlKSk7XG4gICAgfSxcbiAgICAnTW9tZW50J1xuICApLFxuXG4gIG1vbWVudER1cmF0aW9uT2JqIDogY29yZS5jcmVhdGVNb21lbnRDaGVja2VyKFxuICAgICdvYmplY3QnLFxuICAgIGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICdvYmplY3QnO1xuICAgIH0sXG4gICAgZnVuY3Rpb24gaXNWYWxpZCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIG1vbWVudC5pc0R1cmF0aW9uKHZhbHVlKTtcbiAgICB9LFxuICAgICdEdXJhdGlvbidcbiAgKSxcblxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGtleXMgPSByZXF1aXJlKCdvYmplY3Qta2V5cycpO1xudmFyIGhhc1N5bWJvbHMgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2woJ2ZvbycpID09PSAnc3ltYm9sJztcblxudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciBjb25jYXQgPSBBcnJheS5wcm90b3R5cGUuY29uY2F0O1xudmFyIG9yaWdEZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiAoZm4pIHtcblx0cmV0dXJuIHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJyAmJiB0b1N0ci5jYWxsKGZuKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn07XG5cbnZhciBhcmVQcm9wZXJ0eURlc2NyaXB0b3JzU3VwcG9ydGVkID0gZnVuY3Rpb24gKCkge1xuXHR2YXIgb2JqID0ge307XG5cdHRyeSB7XG5cdFx0b3JpZ0RlZmluZVByb3BlcnR5KG9iaiwgJ3gnLCB7IGVudW1lcmFibGU6IGZhbHNlLCB2YWx1ZTogb2JqIH0pO1xuXHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycywgbm8tcmVzdHJpY3RlZC1zeW50YXhcblx0XHRmb3IgKHZhciBfIGluIG9iaikgeyAvLyBqc2NzOmlnbm9yZSBkaXNhbGxvd1VudXNlZFZhcmlhYmxlc1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gb2JqLnggPT09IG9iajtcblx0fSBjYXRjaCAoZSkgeyAvKiB0aGlzIGlzIElFIDguICovXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59O1xudmFyIHN1cHBvcnRzRGVzY3JpcHRvcnMgPSBvcmlnRGVmaW5lUHJvcGVydHkgJiYgYXJlUHJvcGVydHlEZXNjcmlwdG9yc1N1cHBvcnRlZCgpO1xuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lLCB2YWx1ZSwgcHJlZGljYXRlKSB7XG5cdGlmIChuYW1lIGluIG9iamVjdCAmJiAoIWlzRnVuY3Rpb24ocHJlZGljYXRlKSB8fCAhcHJlZGljYXRlKCkpKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cdGlmIChzdXBwb3J0c0Rlc2NyaXB0b3JzKSB7XG5cdFx0b3JpZ0RlZmluZVByb3BlcnR5KG9iamVjdCwgbmFtZSwge1xuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0XHR3cml0YWJsZTogdHJ1ZVxuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdG9iamVjdFtuYW1lXSA9IHZhbHVlO1xuXHR9XG59O1xuXG52YXIgZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIChvYmplY3QsIG1hcCkge1xuXHR2YXIgcHJlZGljYXRlcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDoge307XG5cdHZhciBwcm9wcyA9IGtleXMobWFwKTtcblx0aWYgKGhhc1N5bWJvbHMpIHtcblx0XHRwcm9wcyA9IGNvbmNhdC5jYWxsKHByb3BzLCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG1hcCkpO1xuXHR9XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpICs9IDEpIHtcblx0XHRkZWZpbmVQcm9wZXJ0eShvYmplY3QsIHByb3BzW2ldLCBtYXBbcHJvcHNbaV1dLCBwcmVkaWNhdGVzW3Byb3BzW2ldXSk7XG5cdH1cbn07XG5cbmRlZmluZVByb3BlcnRpZXMuc3VwcG9ydHNEZXNjcmlwdG9ycyA9ICEhc3VwcG9ydHNEZXNjcmlwdG9ycztcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZpbmVQcm9wZXJ0aWVzO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgRVM1VHlwZSA9IHJlcXVpcmUoJy4uLzUvVHlwZScpO1xuXG4vLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLXRvc3RyaW5nXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gVHlwZSh4KSB7XG5cdGlmICh0eXBlb2YgeCA9PT0gJ3N5bWJvbCcpIHtcblx0XHRyZXR1cm4gJ1N5bWJvbCc7XG5cdH1cblx0cmV0dXJuIEVTNVR5cGUoeCk7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG5vZmxpcDtcbnZhciBOT0ZMSVAgPSAnLyogQG5vZmxpcCAqLyc7IC8vIEFwcGVuZHMgYSBub2ZsaXAgY29tbWVudCB0byBhIHN0eWxlIHJ1bGUgaW4gb3JkZXIgdG8gcHJldmVudCBpdCBmcm9tIGJlaW5nIGF1dG9tYXRpY2FsbHlcbi8vIGZsaXBwZWQgaW4gUlRMIGNvbnRleHRzLiBUaGlzIHNob3VsZCBiZSB1c2VkIG9ubHkgaW4gc2l0dWF0aW9ucyB3aGVyZSB0aGUgc3R5bGUgbXVzdCByZW1haW5cbi8vIHVuZmxpcHBlZCByZWdhcmRsZXNzIG9mIGRpcmVjdGlvbiBjb250ZXh0LiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9rZW50Y2RvZGRzL3J0bC1jc3MtanMjdXNhZ2VcblxuZnVuY3Rpb24gbm9mbGlwKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSByZXR1cm4gXCJcIi5jb25jYXQodmFsdWUsIFwicHggXCIpLmNvbmNhdChOT0ZMSVApO1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykgcmV0dXJuIFwiXCIuY29uY2F0KHZhbHVlLCBcIiBcIikuY29uY2F0KE5PRkxJUCk7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ25vZmxpcCBleHBlY3RzIGEgc3RyaW5nIG9yIGEgbnVtYmVyJyk7XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJ2Z1bmN0aW9uLWJpbmQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSk7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGlzU2FtZURheTtcblxudmFyIF9tb21lbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJtb21lbnRcIikpO1xuXG5mdW5jdGlvbiBpc1NhbWVEYXkoYSwgYikge1xuICBpZiAoIV9tb21lbnRbXCJkZWZhdWx0XCJdLmlzTW9tZW50KGEpIHx8ICFfbW9tZW50W1wiZGVmYXVsdFwiXS5pc01vbWVudChiKSkgcmV0dXJuIGZhbHNlOyAvLyBDb21wYXJlIGxlYXN0IHNpZ25pZmljYW50LCBtb3N0IGxpa2VseSB0byBjaGFuZ2UgdW5pdHMgZmlyc3RcbiAgLy8gTW9tZW50J3MgaXNTYW1lIGNsb25lcyBtb21lbnQgaW5wdXRzIGFuZCBpcyBhIHRhZCBzbG93XG5cbiAgcmV0dXJuIGEuZGF0ZSgpID09PSBiLmRhdGUoKSAmJiBhLm1vbnRoKCkgPT09IGIubW9udGgoKSAmJiBhLnllYXIoKSA9PT0gYi55ZWFyKCk7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY29uc3RhbnRzID0gcmVxdWlyZShcIi4uL2NvbnN0YW50c1wiKTtcblxudmFyIF9kZWZhdWx0ID0gX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ub25lT2YoX2NvbnN0YW50cy5XRUVLREFZUyk7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY29uc3RhbnRzID0gcmVxdWlyZShcIi4uL2NvbnN0YW50c1wiKTtcblxudmFyIF9kZWZhdWx0ID0gX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ub25lT2YoW19jb25zdGFudHMuT1BFTl9ET1dOLCBfY29uc3RhbnRzLk9QRU5fVVBdKTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCIndXNlIHN0cmljdCc7XG5cbnZhciByZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xudmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICBjb250ZXh0VHlwZTogdHJ1ZSxcbiAgY29udGV4dFR5cGVzOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICBtaXhpbnM6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBLTk9XTl9TVEFUSUNTID0ge1xuICBuYW1lOiB0cnVlLFxuICBsZW5ndGg6IHRydWUsXG4gIHByb3RvdHlwZTogdHJ1ZSxcbiAgY2FsbGVyOiB0cnVlLFxuICBjYWxsZWU6IHRydWUsXG4gIGFyZ3VtZW50czogdHJ1ZSxcbiAgYXJpdHk6IHRydWVcbn07XG52YXIgRk9SV0FSRF9SRUZfU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgcmVuZGVyOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWVcbn07XG52YXIgTUVNT19TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICBjb21wYXJlOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgVFlQRV9TVEFUSUNTID0ge307XG5UWVBFX1NUQVRJQ1NbcmVhY3RJcy5Gb3J3YXJkUmVmXSA9IEZPUldBUkRfUkVGX1NUQVRJQ1M7XG5UWVBFX1NUQVRJQ1NbcmVhY3RJcy5NZW1vXSA9IE1FTU9fU1RBVElDUztcblxuZnVuY3Rpb24gZ2V0U3RhdGljcyhjb21wb25lbnQpIHtcbiAgLy8gUmVhY3QgdjE2LjExIGFuZCBiZWxvd1xuICBpZiAocmVhY3RJcy5pc01lbW8oY29tcG9uZW50KSkge1xuICAgIHJldHVybiBNRU1PX1NUQVRJQ1M7XG4gIH0gLy8gUmVhY3QgdjE2LjEyIGFuZCBhYm92ZVxuXG5cbiAgcmV0dXJuIFRZUEVfU1RBVElDU1tjb21wb25lbnRbJyQkdHlwZW9mJ11dIHx8IFJFQUNUX1NUQVRJQ1M7XG59XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIG9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG5mdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykge1xuICAgIC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG4gICAgaWYgKG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICAgIGlmIChpbmhlcml0ZWRDb21wb25lbnQgJiYgaW5oZXJpdGVkQ29tcG9uZW50ICE9PSBvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgIH1cblxuICAgIHZhciB0YXJnZXRTdGF0aWNzID0gZ2V0U3RhdGljcyh0YXJnZXRDb21wb25lbnQpO1xuICAgIHZhciBzb3VyY2VTdGF0aWNzID0gZ2V0U3RhdGljcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcblxuICAgICAgaWYgKCFLTk9XTl9TVEFUSUNTW2tleV0gJiYgIShibGFja2xpc3QgJiYgYmxhY2tsaXN0W2tleV0pICYmICEoc291cmNlU3RhdGljcyAmJiBzb3VyY2VTdGF0aWNzW2tleV0pICYmICEodGFyZ2V0U3RhdGljcyAmJiB0YXJnZXRTdGF0aWNzW2tleV0pKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIEF2b2lkIGZhaWx1cmVzIGZyb20gcmVhZC1vbmx5IHByb3BlcnRpZXNcbiAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXRDb21wb25lbnQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBob2lzdE5vblJlYWN0U3RhdGljcztcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgY2FsbEJpbmQgPSByZXF1aXJlKCcuL2NhbGxCaW5kJyk7XG5cbnZhciAkaW5kZXhPZiA9IGNhbGxCaW5kKEdldEludHJpbnNpYygnU3RyaW5nLnByb3RvdHlwZS5pbmRleE9mJykpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNhbGxCb3VuZEludHJpbnNpYyhuYW1lLCBhbGxvd01pc3NpbmcpIHtcblx0dmFyIGludHJpbnNpYyA9IEdldEludHJpbnNpYyhuYW1lLCAhIWFsbG93TWlzc2luZyk7XG5cdGlmICh0eXBlb2YgaW50cmluc2ljID09PSAnZnVuY3Rpb24nICYmICRpbmRleE9mKG5hbWUsICcucHJvdG90eXBlLicpKSB7XG5cdFx0cmV0dXJuIGNhbGxCaW5kKGludHJpbnNpYyk7XG5cdH1cblx0cmV0dXJuIGludHJpbnNpYztcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHRvTW9tZW50T2JqZWN0O1xuXG52YXIgX21vbWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIm1vbWVudFwiKSk7XG5cbnZhciBfY29uc3RhbnRzID0gcmVxdWlyZShcIi4uL2NvbnN0YW50c1wiKTtcblxuZnVuY3Rpb24gdG9Nb21lbnRPYmplY3QoZGF0ZVN0cmluZywgY3VzdG9tRm9ybWF0KSB7XG4gIHZhciBkYXRlRm9ybWF0cyA9IGN1c3RvbUZvcm1hdCA/IFtjdXN0b21Gb3JtYXQsIF9jb25zdGFudHMuRElTUExBWV9GT1JNQVQsIF9jb25zdGFudHMuSVNPX0ZPUk1BVF0gOiBbX2NvbnN0YW50cy5ESVNQTEFZX0ZPUk1BVCwgX2NvbnN0YW50cy5JU09fRk9STUFUXTtcbiAgdmFyIGRhdGUgPSAoMCwgX21vbWVudFtcImRlZmF1bHRcIl0pKGRhdGVTdHJpbmcsIGRhdGVGb3JtYXRzLCB0cnVlKTtcbiAgcmV0dXJuIGRhdGUuaXNWYWxpZCgpID8gZGF0ZS5ob3VyKDEyKSA6IG51bGw7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY29uc3RhbnRzID0gcmVxdWlyZShcIi4uL2NvbnN0YW50c1wiKTtcblxudmFyIF9kZWZhdWx0ID0gX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ub25lT2YoW19jb25zdGFudHMuSE9SSVpPTlRBTF9PUklFTlRBVElPTiwgX2NvbnN0YW50cy5WRVJUSUNBTF9PUklFTlRBVElPTiwgX2NvbnN0YW50cy5WRVJUSUNBTF9TQ1JPTExBQkxFXSk7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IGlzVG91Y2hEZXZpY2U7XG5mdW5jdGlvbiBpc1RvdWNoRGV2aWNlKCkge1xuICByZXR1cm4gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgKCdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdyB8fCB3aW5kb3cuRG9jdW1lbnRUb3VjaCAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50IGluc3RhbmNlb2Ygd2luZG93LkRvY3VtZW50VG91Y2gpKSB8fCAhISh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAobmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzIHx8IG5hdmlnYXRvci5tc01heFRvdWNoUG9pbnRzKSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9jb25zdGFudHMgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzXCIpO1xuXG52YXIgX2RlZmF1bHQgPSBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5vbmVPZihbX2NvbnN0YW50cy5JQ09OX0JFRk9SRV9QT1NJVElPTiwgX2NvbnN0YW50cy5JQ09OX0FGVEVSX1BPU0lUSU9OXSk7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY29uc3RhbnRzID0gcmVxdWlyZShcIi4uL2NvbnN0YW50c1wiKTtcblxudmFyIF9kZWZhdWx0ID0gX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ub25lT2YoW19jb25zdGFudHMuTkFWX1BPU0lUSU9OX0JPVFRPTSwgX2NvbnN0YW50cy5OQVZfUE9TSVRJT05fVE9QXSk7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBpc0luY2x1c2l2ZWx5QWZ0ZXJEYXk7XG5cbnZhciBfbW9tZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwibW9tZW50XCIpKTtcblxudmFyIF9pc0JlZm9yZURheSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaXNCZWZvcmVEYXlcIikpO1xuXG5mdW5jdGlvbiBpc0luY2x1c2l2ZWx5QWZ0ZXJEYXkoYSwgYikge1xuICBpZiAoIV9tb21lbnRbXCJkZWZhdWx0XCJdLmlzTW9tZW50KGEpIHx8ICFfbW9tZW50W1wiZGVmYXVsdFwiXS5pc01vbWVudChiKSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gISgwLCBfaXNCZWZvcmVEYXlbXCJkZWZhdWx0XCJdKShhLCBiKTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHRvSVNPRGF0ZVN0cmluZztcblxudmFyIF9tb21lbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJtb21lbnRcIikpO1xuXG52YXIgX3RvTW9tZW50T2JqZWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi90b01vbWVudE9iamVjdFwiKSk7XG5cbmZ1bmN0aW9uIHRvSVNPRGF0ZVN0cmluZyhkYXRlLCBjdXJyZW50Rm9ybWF0KSB7XG4gIHZhciBkYXRlT2JqID0gX21vbWVudFtcImRlZmF1bHRcIl0uaXNNb21lbnQoZGF0ZSkgPyBkYXRlIDogKDAsIF90b01vbWVudE9iamVjdFtcImRlZmF1bHRcIl0pKGRhdGUsIGN1cnJlbnRGb3JtYXQpO1xuICBpZiAoIWRhdGVPYmopIHJldHVybiBudWxsOyAvLyBUZW1wbGF0ZSBzdHJpbmdzIGNvbXBpbGVkIGluIHN0cmljdCBtb2RlIHVzZXMgY29uY2F0LCB3aGljaCBpcyBzbG93LiBTaW5jZVxuICAvLyB0aGlzIGNvZGUgaXMgaW4gYSBob3QgcGF0aCBhbmQgd2Ugd2FudCBpdCB0byBiZSBhcyBmYXN0IGFzIHBvc3NpYmxlLCB3ZVxuICAvLyB3YW50IHRvIHVzZSBvbGQtZmFzaGlvbmVkICsuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItdGVtcGxhdGVcblxuICByZXR1cm4gZGF0ZU9iai55ZWFyKCkgKyAnLScgKyBTdHJpbmcoZGF0ZU9iai5tb250aCgpICsgMSkucGFkU3RhcnQoMiwgJzAnKSArICctJyArIFN0cmluZyhkYXRlT2JqLmRhdGUoKSkucGFkU3RhcnQoMiwgJzAnKTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9jb25zdGFudHMgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzXCIpO1xuXG52YXIgX2RlZmF1bHQgPSBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5vbmVPZlR5cGUoW19wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsIF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm9uZU9mKFtfY29uc3RhbnRzLlNUQVJUX0RBVEUsIF9jb25zdGFudHMuRU5EX0RBVEVdKV0pO1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHNcIik7XG5cbnZhciBfZGVmYXVsdCA9IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm9uZU9mKFtfY29uc3RhbnRzLklORk9fUE9TSVRJT05fVE9QLCBfY29uc3RhbnRzLklORk9fUE9TSVRJT05fQk9UVE9NLCBfY29uc3RhbnRzLklORk9fUE9TSVRJT05fQkVGT1JFLCBfY29uc3RhbnRzLklORk9fUE9TSVRJT05fQUZURVJdKTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGlzQmVmb3JlRGF5O1xuXG52YXIgX21vbWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIm1vbWVudFwiKSk7XG5cbmZ1bmN0aW9uIGlzQmVmb3JlRGF5KGEsIGIpIHtcbiAgaWYgKCFfbW9tZW50W1wiZGVmYXVsdFwiXS5pc01vbWVudChhKSB8fCAhX21vbWVudFtcImRlZmF1bHRcIl0uaXNNb21lbnQoYikpIHJldHVybiBmYWxzZTtcbiAgdmFyIGFZZWFyID0gYS55ZWFyKCk7XG4gIHZhciBhTW9udGggPSBhLm1vbnRoKCk7XG4gIHZhciBiWWVhciA9IGIueWVhcigpO1xuICB2YXIgYk1vbnRoID0gYi5tb250aCgpO1xuICB2YXIgaXNTYW1lWWVhciA9IGFZZWFyID09PSBiWWVhcjtcbiAgdmFyIGlzU2FtZU1vbnRoID0gYU1vbnRoID09PSBiTW9udGg7XG4gIGlmIChpc1NhbWVZZWFyICYmIGlzU2FtZU1vbnRoKSByZXR1cm4gYS5kYXRlKCkgPCBiLmRhdGUoKTtcbiAgaWYgKGlzU2FtZVllYXIpIHJldHVybiBhTW9udGggPCBiTW9udGg7XG4gIHJldHVybiBhWWVhciA8IGJZZWFyO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgQ2xvc2VCdXR0b24gPSBmdW5jdGlvbiBDbG9zZUJ1dHRvbihwcm9wcykge1xuICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwic3ZnXCIsIHByb3BzLCBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBmaWxsUnVsZTogXCJldmVub2RkXCIsXG4gICAgZDogXCJNMTEuNTMuNDdhLjc1Ljc1IDAgMCAwLTEuMDYxIDBsLTQuNDcgNC40N0wxLjUyOS40N0EuNzUuNzUgMCAxIDAgLjQ2OCAxLjUzMWw0LjQ3IDQuNDctNC40NyA0LjQ3YS43NS43NSAwIDEgMCAxLjA2MSAxLjA2MWw0LjQ3LTQuNDcgNC40NyA0LjQ3YS43NS43NSAwIDEgMCAxLjA2MS0xLjA2MWwtNC40Ny00LjQ3IDQuNDctNC40N2EuNzUuNzUgMCAwIDAgMC0xLjA2MXpcIlxuICB9KSk7XG59O1xuXG5DbG9zZUJ1dHRvbi5kZWZhdWx0UHJvcHMgPSB7XG4gIGZvY3VzYWJsZTogXCJmYWxzZVwiLFxuICB2aWV3Qm94OiBcIjAgMCAxMiAxMlwiXG59O1xudmFyIF9kZWZhdWx0ID0gQ2xvc2VCdXR0b247XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyIsIid1c2Ugc3RyaWN0JztcblxuLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1pc3Byb3BlcnR5a2V5XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gSXNQcm9wZXJ0eUtleShhcmd1bWVudCkge1xuXHRyZXR1cm4gdHlwZW9mIGFyZ3VtZW50ID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgYXJndW1lbnQgPT09ICdzeW1ib2wnO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJ2Z1bmN0aW9uLWJpbmQnKTtcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJEZ1bmN0aW9uID0gR2V0SW50cmluc2ljKCclRnVuY3Rpb24lJyk7XG52YXIgJGFwcGx5ID0gJEZ1bmN0aW9uLmFwcGx5O1xudmFyICRjYWxsID0gJEZ1bmN0aW9uLmNhbGw7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY2FsbEJpbmQoKSB7XG5cdHJldHVybiBiaW5kLmFwcGx5KCRjYWxsLCBhcmd1bWVudHMpO1xufTtcblxubW9kdWxlLmV4cG9ydHMuYXBwbHkgPSBmdW5jdGlvbiBhcHBseUJpbmQoKSB7XG5cdHJldHVybiBiaW5kLmFwcGx5KCRhcHBseSwgYXJndW1lbnRzKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWZpbmUgPSByZXF1aXJlKCdkZWZpbmUtcHJvcGVydGllcycpO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG52YXIgc2hpbSA9IHJlcXVpcmUoJy4vc2hpbScpO1xuXG52YXIgcG9seWZpbGwgPSBnZXRQb2x5ZmlsbCgpO1xuXG5kZWZpbmUocG9seWZpbGwsIHtcblx0Z2V0UG9seWZpbGw6IGdldFBvbHlmaWxsLFxuXHRpbXBsZW1lbnRhdGlvbjogaW1wbGVtZW50YXRpb24sXG5cdHNoaW06IHNoaW1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHBvbHlmaWxsO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfdG9Db25zdW1hYmxlQXJyYXkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheVwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfYWlyYm5iUHJvcFR5cGVzID0gcmVxdWlyZShcImFpcmJuYi1wcm9wLXR5cGVzXCIpO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2FpcmJuYlByb3BUeXBlcy5hbmQpKFtfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5pbnN0YW5jZU9mKFNldCksIGZ1bmN0aW9uIG1vZGlmaWVycyhwcm9wcywgcHJvcE5hbWUpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIHJlc3QgPSBuZXcgQXJyYXkoX2xlbiA+IDIgPyBfbGVuIC0gMiA6IDApLCBfa2V5ID0gMjsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIHJlc3RbX2tleSAtIDJdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgdmFyIGZpcnN0RXJyb3I7XG4gICgwLCBfdG9Db25zdW1hYmxlQXJyYXkyW1wiZGVmYXVsdFwiXSkocHJvcFZhbHVlKS5zb21lKGZ1bmN0aW9uICh2LCBpKSB7XG4gICAgdmFyIF9Qcm9wVHlwZXMkc3RyaW5nO1xuXG4gICAgdmFyIGZha2VQcm9wTmFtZSA9IFwiXCIuY29uY2F0KHByb3BOYW1lLCBcIjogaW5kZXggXCIpLmNvbmNhdChpKTtcbiAgICBmaXJzdEVycm9yID0gKF9Qcm9wVHlwZXMkc3RyaW5nID0gX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nKS5pc1JlcXVpcmVkLmFwcGx5KF9Qcm9wVHlwZXMkc3RyaW5nLCBbKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKSh7fSwgZmFrZVByb3BOYW1lLCB2KSwgZmFrZVByb3BOYW1lXS5jb25jYXQocmVzdCkpO1xuICAgIHJldHVybiBmaXJzdEVycm9yICE9IG51bGw7XG4gIH0pO1xuICByZXR1cm4gZmlyc3RFcnJvciA9PSBudWxsID8gbnVsbCA6IGZpcnN0RXJyb3I7XG59XSwgJ01vZGlmaWVycyAoU2V0IG9mIFN0cmluZ3MpJyk7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwidmFyIENBTl9VU0VfRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxuLy8gQWRhcHRlZCBmcm9tIE1vZGVybml6clxuLy8gaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9hY2IzZjBkOS9mZWF0dXJlLWRldGVjdHMvZG9tL3Bhc3NpdmVldmVudGxpc3RlbmVycy5qcyNMMjYtTDM3XG5mdW5jdGlvbiB0ZXN0UGFzc2l2ZUV2ZW50TGlzdGVuZXJzKCkge1xuICBpZiAoIUNBTl9VU0VfRE9NKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKCF3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciB8fCAhd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIgfHwgIU9iamVjdC5kZWZpbmVQcm9wZXJ0eSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBzdXBwb3J0c1Bhc3NpdmVPcHRpb24gPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgb3B0cyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ3Bhc3NpdmUnLCB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ2V0dGVyLXJldHVyblxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICBzdXBwb3J0c1Bhc3NpdmVPcHRpb24gPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGdldDtcbiAgICAgIH0oKVxuICAgIH0pO1xuICAgIHZhciBub29wID0gZnVuY3Rpb24gbm9vcCgpIHt9O1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0ZXN0UGFzc2l2ZUV2ZW50U3VwcG9ydCcsIG5vb3AsIG9wdHMpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd0ZXN0UGFzc2l2ZUV2ZW50U3VwcG9ydCcsIG5vb3AsIG9wdHMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gZG8gbm90aGluZ1xuICB9XG5cbiAgcmV0dXJuIHN1cHBvcnRzUGFzc2l2ZU9wdGlvbjtcbn1cblxudmFyIG1lbW9pemVkID0gdm9pZCAwO1xuXG5mdW5jdGlvbiBjYW5Vc2VQYXNzaXZlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gIGlmIChtZW1vaXplZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbWVtb2l6ZWQgPSB0ZXN0UGFzc2l2ZUV2ZW50TGlzdGVuZXJzKCk7XG4gIH1cbiAgcmV0dXJuIG1lbW9pemVkO1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVFdmVudE9wdGlvbnMoZXZlbnRPcHRpb25zKSB7XG4gIGlmICghZXZlbnRPcHRpb25zKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICghY2FuVXNlUGFzc2l2ZUV2ZW50TGlzdGVuZXJzKCkpIHtcbiAgICAvLyBJZiB0aGUgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHRoZSBwYXNzaXZlIG9wdGlvbiwgdGhlbiBpdCBpcyBleHBlY3RpbmdcbiAgICAvLyBhIGJvb2xlYW4gZm9yIHRoZSBvcHRpb25zIGFyZ3VtZW50IHRvIHNwZWNpZnkgd2hldGhlciBpdCBzaG91bGQgdXNlXG4gICAgLy8gY2FwdHVyZSBvciBub3QuIEluIG1vcmUgbW9kZXJuIGJyb3dzZXJzLCB0aGlzIGlzIHBhc3NlZCB2aWEgdGhlIGBjYXB0dXJlYFxuICAgIC8vIG9wdGlvbiwgc28gbGV0J3MganVzdCBob2lzdCB0aGF0IHZhbHVlIHVwLlxuICAgIHJldHVybiAhIWV2ZW50T3B0aW9ucy5jYXB0dXJlO1xuICB9XG5cbiAgcmV0dXJuIGV2ZW50T3B0aW9ucztcbn1cblxuLyogZXNsaW50LWRpc2FibGUgbm8tYml0d2lzZSAqL1xuXG4vKipcbiAqIEdlbmVyYXRlIGEgdW5pcXVlIGtleSBmb3IgYW55IHNldCBvZiBldmVudCBvcHRpb25zXG4gKi9cbmZ1bmN0aW9uIGV2ZW50T3B0aW9uc0tleShub3JtYWxpemVkRXZlbnRPcHRpb25zKSB7XG4gIGlmICghbm9ybWFsaXplZEV2ZW50T3B0aW9ucykge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgLy8gSWYgdGhlIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBwYXNzaXZlIGV2ZW50IGxpc3RlbmVycywgdGhlIG5vcm1hbGl6ZWRcbiAgLy8gZXZlbnQgb3B0aW9ucyB3aWxsIGJlIGEgYm9vbGVhbi5cbiAgaWYgKG5vcm1hbGl6ZWRFdmVudE9wdGlvbnMgPT09IHRydWUpIHtcbiAgICByZXR1cm4gMTAwO1xuICB9XG5cbiAgLy8gQXQgdGhpcyBwb2ludCwgdGhlIGJyb3dzZXIgc3VwcG9ydHMgcGFzc2l2ZSBldmVudCBsaXN0ZW5lcnMsIHNvIHdlIGV4cGVjdFxuICAvLyB0aGUgZXZlbnQgb3B0aW9ucyB0byBiZSBhbiBvYmplY3Qgd2l0aCBwb3NzaWJsZSBwcm9wZXJ0aWVzIG9mIGNhcHR1cmUsXG4gIC8vIHBhc3NpdmUsIGFuZCBvbmNlLlxuICAvL1xuICAvLyBXZSB3YW50IHRvIGNvbnNpc3RlbnRseSByZXR1cm4gdGhlIHNhbWUgdmFsdWUsIHJlZ2FyZGxlc3Mgb2YgdGhlIG9yZGVyIG9mXG4gIC8vIHRoZXNlIHByb3BlcnRpZXMsIHNvIGxldCdzIHVzZSBiaW5hcnkgbWF0aHMgdG8gYXNzaWduIGVhY2ggcHJvcGVydHkgdG8gYVxuICAvLyBiaXQsIGFuZCB0aGVuIGFkZCB0aG9zZSB0b2dldGhlciAod2l0aCBhbiBvZmZzZXQgdG8gYWNjb3VudCBmb3IgdGhlXG4gIC8vIGJvb2xlYW5zIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhpcyBmdW5jdGlvbikuXG4gIHZhciBjYXB0dXJlID0gbm9ybWFsaXplZEV2ZW50T3B0aW9ucy5jYXB0dXJlIDw8IDA7XG4gIHZhciBwYXNzaXZlID0gbm9ybWFsaXplZEV2ZW50T3B0aW9ucy5wYXNzaXZlIDw8IDE7XG4gIHZhciBvbmNlID0gbm9ybWFsaXplZEV2ZW50T3B0aW9ucy5vbmNlIDw8IDI7XG4gIHJldHVybiBjYXB0dXJlICsgcGFzc2l2ZSArIG9uY2U7XG59XG5cbmZ1bmN0aW9uIGVuc3VyZUNhbk11dGF0ZU5leHRFdmVudEhhbmRsZXJzKGV2ZW50SGFuZGxlcnMpIHtcbiAgaWYgKGV2ZW50SGFuZGxlcnMuaGFuZGxlcnMgPT09IGV2ZW50SGFuZGxlcnMubmV4dEhhbmRsZXJzKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgZXZlbnRIYW5kbGVycy5uZXh0SGFuZGxlcnMgPSBldmVudEhhbmRsZXJzLmhhbmRsZXJzLnNsaWNlKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gVGFyZ2V0RXZlbnRIYW5kbGVycyh0YXJnZXQpIHtcbiAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gIHRoaXMuZXZlbnRzID0ge307XG59XG5cblRhcmdldEV2ZW50SGFuZGxlcnMucHJvdG90eXBlLmdldEV2ZW50SGFuZGxlcnMgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIGdldEV2ZW50SGFuZGxlcnMoZXZlbnROYW1lLCBvcHRpb25zKSB7XG4gICAgdmFyIGtleSA9IFN0cmluZyhldmVudE5hbWUpICsgJyAnICsgU3RyaW5nKGV2ZW50T3B0aW9uc0tleShvcHRpb25zKSk7XG5cbiAgICBpZiAoIXRoaXMuZXZlbnRzW2tleV0pIHtcbiAgICAgIHRoaXMuZXZlbnRzW2tleV0gPSB7XG4gICAgICAgIGhhbmRsZXJzOiBbXSxcbiAgICAgICAgaGFuZGxlRXZlbnQ6IHVuZGVmaW5lZFxuICAgICAgfTtcbiAgICAgIHRoaXMuZXZlbnRzW2tleV0ubmV4dEhhbmRsZXJzID0gdGhpcy5ldmVudHNba2V5XS5oYW5kbGVycztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5ldmVudHNba2V5XTtcbiAgfVxuXG4gIHJldHVybiBnZXRFdmVudEhhbmRsZXJzO1xufSgpO1xuXG5UYXJnZXRFdmVudEhhbmRsZXJzLnByb3RvdHlwZS5oYW5kbGVFdmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gaGFuZGxlRXZlbnQoZXZlbnROYW1lLCBvcHRpb25zLCBldmVudCkge1xuICAgIHZhciBldmVudEhhbmRsZXJzID0gdGhpcy5nZXRFdmVudEhhbmRsZXJzKGV2ZW50TmFtZSwgb3B0aW9ucyk7XG4gICAgZXZlbnRIYW5kbGVycy5oYW5kbGVycyA9IGV2ZW50SGFuZGxlcnMubmV4dEhhbmRsZXJzO1xuICAgIGV2ZW50SGFuZGxlcnMuaGFuZGxlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgLy8gV2UgbmVlZCB0byBjaGVjayBmb3IgcHJlc2VuY2UgaGVyZSBiZWNhdXNlIGEgaGFuZGxlciBmdW5jdGlvbiBtYXlcbiAgICAgICAgLy8gY2F1c2UgbGF0ZXIgaGFuZGxlcnMgdG8gZ2V0IHJlbW92ZWQuIFRoaXMgY2FuIGhhcHBlbiBpZiB5b3UgZm9yXG4gICAgICAgIC8vIGluc3RhbmNlIGhhdmUgYSB3YXlwb2ludCB0aGF0IHVubW91bnRzIGFub3RoZXIgd2F5cG9pbnQgYXMgcGFydCBvZiBhblxuICAgICAgICAvLyBvbkVudGVyL29uTGVhdmUgaGFuZGxlci5cbiAgICAgICAgaGFuZGxlcihldmVudCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gaGFuZGxlRXZlbnQ7XG59KCk7XG5cblRhcmdldEV2ZW50SGFuZGxlcnMucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gYWRkKGV2ZW50TmFtZSwgbGlzdGVuZXIsIG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgLy8gb3B0aW9ucyBoYXMgYWxyZWFkeSBiZWVuIG5vcm1hbGl6ZWQgYXQgdGhpcyBwb2ludC5cbiAgICB2YXIgZXZlbnRIYW5kbGVycyA9IHRoaXMuZ2V0RXZlbnRIYW5kbGVycyhldmVudE5hbWUsIG9wdGlvbnMpO1xuXG4gICAgZW5zdXJlQ2FuTXV0YXRlTmV4dEV2ZW50SGFuZGxlcnMoZXZlbnRIYW5kbGVycyk7XG5cbiAgICBpZiAoZXZlbnRIYW5kbGVycy5uZXh0SGFuZGxlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICBldmVudEhhbmRsZXJzLmhhbmRsZUV2ZW50ID0gdGhpcy5oYW5kbGVFdmVudC5iaW5kKHRoaXMsIGV2ZW50TmFtZSwgb3B0aW9ucyk7XG5cbiAgICAgIHRoaXMudGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBldmVudEhhbmRsZXJzLmhhbmRsZUV2ZW50LCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBldmVudEhhbmRsZXJzLm5leHRIYW5kbGVycy5wdXNoKGxpc3RlbmVyKTtcblxuICAgIHZhciBpc1N1YnNjcmliZWQgPSB0cnVlO1xuICAgIHZhciB1bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICBpZiAoIWlzU3Vic2NyaWJlZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuXG4gICAgICAgIGVuc3VyZUNhbk11dGF0ZU5leHRFdmVudEhhbmRsZXJzKGV2ZW50SGFuZGxlcnMpO1xuICAgICAgICB2YXIgaW5kZXggPSBldmVudEhhbmRsZXJzLm5leHRIYW5kbGVycy5pbmRleE9mKGxpc3RlbmVyKTtcbiAgICAgICAgZXZlbnRIYW5kbGVycy5uZXh0SGFuZGxlcnMuc3BsaWNlKGluZGV4LCAxKTtcblxuICAgICAgICBpZiAoZXZlbnRIYW5kbGVycy5uZXh0SGFuZGxlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgLy8gQWxsIGV2ZW50IGhhbmRsZXJzIGhhdmUgYmVlbiByZW1vdmVkLCBzbyB3ZSB3YW50IHRvIHJlbW92ZSB0aGUgZXZlbnRcbiAgICAgICAgICAvLyBsaXN0ZW5lciBmcm9tIHRoZSB0YXJnZXQgbm9kZS5cblxuICAgICAgICAgIGlmIChfdGhpcy50YXJnZXQpIHtcbiAgICAgICAgICAgIC8vIFRoZXJlIGNhbiBiZSBhIHJhY2UgY29uZGl0aW9uIHdoZXJlIHRoZSB0YXJnZXQgbWF5IG5vIGxvbmdlciBleGlzdFxuICAgICAgICAgICAgLy8gd2hlbiB0aGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCwgZS5nLiB3aGVuIGEgUmVhY3QgY29tcG9uZW50IGlzXG4gICAgICAgICAgICAvLyB1bm1vdW50aW5nLiBHdWFyZGluZyBhZ2FpbnN0IHRoaXMgcHJldmVudHMgdGhlIGZvbGxvd2luZyBlcnJvcjpcbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyAgIENhbm5vdCByZWFkIHByb3BlcnR5ICdyZW1vdmVFdmVudExpc3RlbmVyJyBvZiB1bmRlZmluZWRcbiAgICAgICAgICAgIF90aGlzLnRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgZXZlbnRIYW5kbGVycy5oYW5kbGVFdmVudCwgb3B0aW9ucyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZXZlbnRIYW5kbGVycy5oYW5kbGVFdmVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5zdWJzY3JpYmU7XG4gICAgfSgpO1xuICAgIHJldHVybiB1bnN1YnNjcmliZTtcbiAgfVxuXG4gIHJldHVybiBhZGQ7XG59KCk7XG5cbnZhciBFVkVOVF9IQU5ETEVSU19LRVkgPSAnX19jb25zb2xpZGF0ZWRfZXZlbnRzX2hhbmRsZXJzX18nO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L3ByZWZlci1kZWZhdWx0LWV4cG9ydFxuZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcih0YXJnZXQsIGV2ZW50TmFtZSwgbGlzdGVuZXIsIG9wdGlvbnMpIHtcbiAgaWYgKCF0YXJnZXRbRVZFTlRfSEFORExFUlNfS0VZXSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIHRhcmdldFtFVkVOVF9IQU5ETEVSU19LRVldID0gbmV3IFRhcmdldEV2ZW50SGFuZGxlcnModGFyZ2V0KTtcbiAgfVxuICB2YXIgbm9ybWFsaXplZEV2ZW50T3B0aW9ucyA9IG5vcm1hbGl6ZUV2ZW50T3B0aW9ucyhvcHRpb25zKTtcbiAgcmV0dXJuIHRhcmdldFtFVkVOVF9IQU5ETEVSU19LRVldLmFkZChldmVudE5hbWUsIGxpc3RlbmVyLCBub3JtYWxpemVkRXZlbnRPcHRpb25zKTtcbn1cblxuZXhwb3J0IHsgYWRkRXZlbnRMaXN0ZW5lciB9O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB0b0lTT01vbnRoU3RyaW5nO1xuXG52YXIgX21vbWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIm1vbWVudFwiKSk7XG5cbnZhciBfdG9Nb21lbnRPYmplY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3RvTW9tZW50T2JqZWN0XCIpKTtcblxuZnVuY3Rpb24gdG9JU09Nb250aFN0cmluZyhkYXRlLCBjdXJyZW50Rm9ybWF0KSB7XG4gIHZhciBkYXRlT2JqID0gX21vbWVudFtcImRlZmF1bHRcIl0uaXNNb21lbnQoZGF0ZSkgPyBkYXRlIDogKDAsIF90b01vbWVudE9iamVjdFtcImRlZmF1bHRcIl0pKGRhdGUsIGN1cnJlbnRGb3JtYXQpO1xuICBpZiAoIWRhdGVPYmopIHJldHVybiBudWxsOyAvLyBUZW1wbGF0ZSBzdHJpbmdzIGNvbXBpbGVkIGluIHN0cmljdCBtb2RlIHVzZXMgY29uY2F0LCB3aGljaCBpcyBzbG93LiBTaW5jZVxuICAvLyB0aGlzIGNvZGUgaXMgaW4gYSBob3QgcGF0aCBhbmQgd2Ugd2FudCBpdCB0byBiZSBhcyBmYXN0IGFzIHBvc3NpYmxlLCB3ZVxuICAvLyB3YW50IHRvIHVzZSBvbGQtZmFzaGlvbmVkICsuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItdGVtcGxhdGVcblxuICByZXR1cm4gZGF0ZU9iai55ZWFyKCkgKyAnLScgKyBTdHJpbmcoZGF0ZU9iai5tb250aCgpICsgMSkucGFkU3RhcnQoMiwgJzAnKTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGlzQWZ0ZXJEYXk7XG5cbnZhciBfbW9tZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwibW9tZW50XCIpKTtcblxudmFyIF9pc0JlZm9yZURheSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaXNCZWZvcmVEYXlcIikpO1xuXG52YXIgX2lzU2FtZURheSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaXNTYW1lRGF5XCIpKTtcblxuZnVuY3Rpb24gaXNBZnRlckRheShhLCBiKSB7XG4gIGlmICghX21vbWVudFtcImRlZmF1bHRcIl0uaXNNb21lbnQoYSkgfHwgIV9tb21lbnRbXCJkZWZhdWx0XCJdLmlzTW9tZW50KGIpKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiAhKDAsIF9pc0JlZm9yZURheVtcImRlZmF1bHRcIl0pKGEsIGIpICYmICEoMCwgX2lzU2FtZURheVtcImRlZmF1bHRcIl0pKGEsIGIpO1xufSIsIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW5yZXNvbHZlZFxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYicpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgfHwgaW1wbGVtZW50YXRpb247XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi81LjEvI3NlYy05LjExXG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnaXMtY2FsbGFibGUnKTtcbiIsInZhciBhcnJheVdpdGhvdXRIb2xlcyA9IHJlcXVpcmUoXCIuL2FycmF5V2l0aG91dEhvbGVzXCIpO1xuXG52YXIgaXRlcmFibGVUb0FycmF5ID0gcmVxdWlyZShcIi4vaXRlcmFibGVUb0FycmF5XCIpO1xuXG52YXIgbm9uSXRlcmFibGVTcHJlYWQgPSByZXF1aXJlKFwiLi9ub25JdGVyYWJsZVNwcmVhZFwiKTtcblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikge1xuICByZXR1cm4gYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBpdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBub25JdGVyYWJsZVNwcmVhZCgpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF90b0NvbnN1bWFibGVBcnJheTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGlzU2FtZU1vbnRoO1xuXG52YXIgX21vbWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIm1vbWVudFwiKSk7XG5cbmZ1bmN0aW9uIGlzU2FtZU1vbnRoKGEsIGIpIHtcbiAgaWYgKCFfbW9tZW50W1wiZGVmYXVsdFwiXS5pc01vbWVudChhKSB8fCAhX21vbWVudFtcImRlZmF1bHRcIl0uaXNNb21lbnQoYikpIHJldHVybiBmYWxzZTsgLy8gQ29tcGFyZSBsZWFzdCBzaWduaWZpY2FudCwgbW9zdCBsaWtlbHkgdG8gY2hhbmdlIHVuaXRzIGZpcnN0XG4gIC8vIE1vbWVudCdzIGlzU2FtZSBjbG9uZXMgbW9tZW50IGlucHV0cyBhbmQgaXMgYSB0YWQgc2xvd1xuXG4gIHJldHVybiBhLm1vbnRoKCkgPT09IGIubW9udGgoKSAmJiBhLnllYXIoKSA9PT0gYi55ZWFyKCk7XG59IiwiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnJlc29sdmVkXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vYnVpbGQvT3V0c2lkZUNsaWNrSGFuZGxlcicpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGdldElucHV0SGVpZ2h0O1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBjYW1lbGNhc2UgKi9cbmZ1bmN0aW9uIGdldFBhZGRpbmcodmVydGljYWwsIHRvcCwgYm90dG9tKSB7XG4gIHZhciBpc1RvcERlZmluZWQgPSB0eXBlb2YgdG9wID09PSAnbnVtYmVyJztcbiAgdmFyIGlzQm90dG9tRGVmaW5lZCA9IHR5cGVvZiBib3R0b20gPT09ICdudW1iZXInO1xuICB2YXIgaXNWZXJ0aWNhbERlZmluZWQgPSB0eXBlb2YgdmVydGljYWwgPT09ICdudW1iZXInO1xuXG4gIGlmIChpc1RvcERlZmluZWQgJiYgaXNCb3R0b21EZWZpbmVkKSB7XG4gICAgcmV0dXJuIHRvcCArIGJvdHRvbTtcbiAgfVxuXG4gIGlmIChpc1RvcERlZmluZWQgJiYgaXNWZXJ0aWNhbERlZmluZWQpIHtcbiAgICByZXR1cm4gdG9wICsgdmVydGljYWw7XG4gIH1cblxuICBpZiAoaXNUb3BEZWZpbmVkKSB7XG4gICAgcmV0dXJuIHRvcDtcbiAgfVxuXG4gIGlmIChpc0JvdHRvbURlZmluZWQgJiYgaXNWZXJ0aWNhbERlZmluZWQpIHtcbiAgICByZXR1cm4gYm90dG9tICsgdmVydGljYWw7XG4gIH1cblxuICBpZiAoaXNCb3R0b21EZWZpbmVkKSB7XG4gICAgcmV0dXJuIGJvdHRvbTtcbiAgfVxuXG4gIGlmIChpc1ZlcnRpY2FsRGVmaW5lZCkge1xuICAgIHJldHVybiAyICogdmVydGljYWw7XG4gIH1cblxuICByZXR1cm4gMDtcbn1cblxuZnVuY3Rpb24gZ2V0SW5wdXRIZWlnaHQoX3JlZiwgc21hbGwpIHtcbiAgdmFyIF9yZWYkZm9udCRpbnB1dCA9IF9yZWYuZm9udC5pbnB1dCxcbiAgICAgIGxpbmVIZWlnaHQgPSBfcmVmJGZvbnQkaW5wdXQubGluZUhlaWdodCxcbiAgICAgIGxpbmVIZWlnaHRfc21hbGwgPSBfcmVmJGZvbnQkaW5wdXQubGluZUhlaWdodF9zbWFsbCxcbiAgICAgIF9yZWYkc3BhY2luZyA9IF9yZWYuc3BhY2luZyxcbiAgICAgIGlucHV0UGFkZGluZyA9IF9yZWYkc3BhY2luZy5pbnB1dFBhZGRpbmcsXG4gICAgICBkaXNwbGF5VGV4dFBhZGRpbmdWZXJ0aWNhbCA9IF9yZWYkc3BhY2luZy5kaXNwbGF5VGV4dFBhZGRpbmdWZXJ0aWNhbCxcbiAgICAgIGRpc3BsYXlUZXh0UGFkZGluZ1RvcCA9IF9yZWYkc3BhY2luZy5kaXNwbGF5VGV4dFBhZGRpbmdUb3AsXG4gICAgICBkaXNwbGF5VGV4dFBhZGRpbmdCb3R0b20gPSBfcmVmJHNwYWNpbmcuZGlzcGxheVRleHRQYWRkaW5nQm90dG9tLFxuICAgICAgZGlzcGxheVRleHRQYWRkaW5nVmVydGljYWxfc21hbGwgPSBfcmVmJHNwYWNpbmcuZGlzcGxheVRleHRQYWRkaW5nVmVydGljYWxfc21hbGwsXG4gICAgICBkaXNwbGF5VGV4dFBhZGRpbmdUb3Bfc21hbGwgPSBfcmVmJHNwYWNpbmcuZGlzcGxheVRleHRQYWRkaW5nVG9wX3NtYWxsLFxuICAgICAgZGlzcGxheVRleHRQYWRkaW5nQm90dG9tX3NtYWxsID0gX3JlZiRzcGFjaW5nLmRpc3BsYXlUZXh0UGFkZGluZ0JvdHRvbV9zbWFsbDtcbiAgdmFyIGNhbGNMaW5lSGVpZ2h0ID0gc21hbGwgPyBsaW5lSGVpZ2h0X3NtYWxsIDogbGluZUhlaWdodDtcbiAgdmFyIHBhZGRpbmcgPSBzbWFsbCA/IGdldFBhZGRpbmcoZGlzcGxheVRleHRQYWRkaW5nVmVydGljYWxfc21hbGwsIGRpc3BsYXlUZXh0UGFkZGluZ1RvcF9zbWFsbCwgZGlzcGxheVRleHRQYWRkaW5nQm90dG9tX3NtYWxsKSA6IGdldFBhZGRpbmcoZGlzcGxheVRleHRQYWRkaW5nVmVydGljYWwsIGRpc3BsYXlUZXh0UGFkZGluZ1RvcCwgZGlzcGxheVRleHRQYWRkaW5nQm90dG9tKTtcbiAgcmV0dXJuIHBhcnNlSW50KGNhbGNMaW5lSGVpZ2h0LCAxMCkgKyAyICogaW5wdXRQYWRkaW5nICsgcGFkZGluZztcbn0iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc09iamVjdDtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdG9Mb2NhbGl6ZWREYXRlU3RyaW5nO1xuXG52YXIgX21vbWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIm1vbWVudFwiKSk7XG5cbnZhciBfdG9Nb21lbnRPYmplY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3RvTW9tZW50T2JqZWN0XCIpKTtcblxudmFyIF9jb25zdGFudHMgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzXCIpO1xuXG5mdW5jdGlvbiB0b0xvY2FsaXplZERhdGVTdHJpbmcoZGF0ZSwgY3VycmVudEZvcm1hdCkge1xuICB2YXIgZGF0ZU9iaiA9IF9tb21lbnRbXCJkZWZhdWx0XCJdLmlzTW9tZW50KGRhdGUpID8gZGF0ZSA6ICgwLCBfdG9Nb21lbnRPYmplY3RbXCJkZWZhdWx0XCJdKShkYXRlLCBjdXJyZW50Rm9ybWF0KTtcbiAgaWYgKCFkYXRlT2JqKSByZXR1cm4gbnVsbDtcbiAgcmV0dXJuIGRhdGVPYmouZm9ybWF0KF9jb25zdGFudHMuRElTUExBWV9GT1JNQVQpO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gaXNEYXlWaXNpYmxlO1xuXG52YXIgX21vbWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIm1vbWVudFwiKSk7XG5cbnZhciBfaXNCZWZvcmVEYXkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2lzQmVmb3JlRGF5XCIpKTtcblxudmFyIF9pc0FmdGVyRGF5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9pc0FmdGVyRGF5XCIpKTtcblxudmFyIF90b0lTT01vbnRoU3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi90b0lTT01vbnRoU3RyaW5nXCIpKTtcblxudmFyIHN0YXJ0Q2FjaGVPdXRzaWRlRGF5cyA9IG5ldyBNYXAoKTtcbnZhciBlbmRDYWNoZU91dHNpZGVEYXlzID0gbmV3IE1hcCgpO1xudmFyIHN0YXJ0Q2FjaGVJbnNpZGVEYXlzID0gbmV3IE1hcCgpO1xudmFyIGVuZENhY2hlSW5zaWRlRGF5cyA9IG5ldyBNYXAoKTtcblxuZnVuY3Rpb24gaXNEYXlWaXNpYmxlKGRheSwgbW9udGgsIG51bWJlck9mTW9udGhzLCBlbmFibGVPdXRzaWRlRGF5cykge1xuICBpZiAoIV9tb21lbnRbXCJkZWZhdWx0XCJdLmlzTW9tZW50KGRheSkpIHJldHVybiBmYWxzZTsgLy8gQ2xvbmluZyBpcyBhIGxpdHRsZSBleHBlbnNpdmUsIHNvIHdlIHdhbnQgdG8gZG8gaXQgYXMgbGl0dGxlIGFzIHBvc3NpYmxlLlxuXG4gIHZhciBzdGFydEtleSA9ICgwLCBfdG9JU09Nb250aFN0cmluZ1tcImRlZmF1bHRcIl0pKG1vbnRoKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci10ZW1wbGF0ZVxuXG4gIHZhciBlbmRLZXkgPSBzdGFydEtleSArICcrJyArIG51bWJlck9mTW9udGhzO1xuXG4gIGlmIChlbmFibGVPdXRzaWRlRGF5cykge1xuICAgIGlmICghc3RhcnRDYWNoZU91dHNpZGVEYXlzLmhhcyhzdGFydEtleSkpIHtcbiAgICAgIHN0YXJ0Q2FjaGVPdXRzaWRlRGF5cy5zZXQoc3RhcnRLZXksIG1vbnRoLmNsb25lKCkuc3RhcnRPZignbW9udGgnKS5zdGFydE9mKCd3ZWVrJykpO1xuICAgIH1cblxuICAgIGlmICgoMCwgX2lzQmVmb3JlRGF5W1wiZGVmYXVsdFwiXSkoZGF5LCBzdGFydENhY2hlT3V0c2lkZURheXMuZ2V0KHN0YXJ0S2V5KSkpIHJldHVybiBmYWxzZTtcblxuICAgIGlmICghZW5kQ2FjaGVPdXRzaWRlRGF5cy5oYXMoZW5kS2V5KSkge1xuICAgICAgZW5kQ2FjaGVPdXRzaWRlRGF5cy5zZXQoZW5kS2V5LCBtb250aC5jbG9uZSgpLmVuZE9mKCd3ZWVrJykuYWRkKG51bWJlck9mTW9udGhzIC0gMSwgJ21vbnRocycpLmVuZE9mKCdtb250aCcpLmVuZE9mKCd3ZWVrJykpO1xuICAgIH1cblxuICAgIHJldHVybiAhKDAsIF9pc0FmdGVyRGF5W1wiZGVmYXVsdFwiXSkoZGF5LCBlbmRDYWNoZU91dHNpZGVEYXlzLmdldChlbmRLZXkpKTtcbiAgfSAvLyAhZW5hYmxlT3V0c2lkZURheXNcblxuXG4gIGlmICghc3RhcnRDYWNoZUluc2lkZURheXMuaGFzKHN0YXJ0S2V5KSkge1xuICAgIHN0YXJ0Q2FjaGVJbnNpZGVEYXlzLnNldChzdGFydEtleSwgbW9udGguY2xvbmUoKS5zdGFydE9mKCdtb250aCcpKTtcbiAgfVxuXG4gIGlmICgoMCwgX2lzQmVmb3JlRGF5W1wiZGVmYXVsdFwiXSkoZGF5LCBzdGFydENhY2hlSW5zaWRlRGF5cy5nZXQoc3RhcnRLZXkpKSkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmICghZW5kQ2FjaGVJbnNpZGVEYXlzLmhhcyhlbmRLZXkpKSB7XG4gICAgZW5kQ2FjaGVJbnNpZGVEYXlzLnNldChlbmRLZXksIG1vbnRoLmNsb25lKCkuYWRkKG51bWJlck9mTW9udGhzIC0gMSwgJ21vbnRocycpLmVuZE9mKCdtb250aCcpKTtcbiAgfVxuXG4gIHJldHVybiAhKDAsIF9pc0FmdGVyRGF5W1wiZGVmYXVsdFwiXSkoZGF5LCBlbmRDYWNoZUluc2lkZURheXMuZ2V0KGVuZEtleSkpO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkXCIpO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gZXhwb3J0cy5QdXJlRGF5UGlja2VyID0gZXhwb3J0cy5kZWZhdWx0UHJvcHMgPSB2b2lkIDA7XG5cbnZhciBfZW56eW1lU2hhbGxvd0VxdWFsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZW56eW1lLXNoYWxsb3ctZXF1YWxcIikpO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF90b0NvbnN1bWFibGVBcnJheTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3RvQ29uc3VtYWJsZUFycmF5XCIpKTtcblxudmFyIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpO1xuXG52YXIgX2luaGVyaXRzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9haXJibmJQcm9wVHlwZXMgPSByZXF1aXJlKFwiYWlyYm5iLXByb3AtdHlwZXNcIik7XG5cbnZhciBfcmVhY3RXaXRoU3R5bGVzID0gcmVxdWlyZShcInJlYWN0LXdpdGgtc3R5bGVzXCIpO1xuXG52YXIgX21vbWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIm1vbWVudFwiKSk7XG5cbnZhciBfdGhyb3R0bGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJsb2Rhc2gvdGhyb3R0bGVcIikpO1xuXG52YXIgX2lzVG91Y2hEZXZpY2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJpcy10b3VjaC1kZXZpY2VcIikpO1xuXG52YXIgX3JlYWN0T3V0c2lkZUNsaWNrSGFuZGxlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LW91dHNpZGUtY2xpY2staGFuZGxlclwiKSk7XG5cbnZhciBfZGVmYXVsdFBocmFzZXMgPSByZXF1aXJlKFwiLi4vZGVmYXVsdFBocmFzZXNcIik7XG5cbnZhciBfZ2V0UGhyYXNlUHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvZ2V0UGhyYXNlUHJvcFR5cGVzXCIpKTtcblxudmFyIF9ub2ZsaXAgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9ub2ZsaXBcIikpO1xuXG52YXIgX0NhbGVuZGFyTW9udGhHcmlkID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9DYWxlbmRhck1vbnRoR3JpZFwiKSk7XG5cbnZhciBfRGF5UGlja2VyTmF2aWdhdGlvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vRGF5UGlja2VyTmF2aWdhdGlvblwiKSk7XG5cbnZhciBfRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9EYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0c1wiKSk7XG5cbnZhciBfZ2V0TnVtYmVyT2ZDYWxlbmRhck1vbnRoV2Vla3MgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9nZXROdW1iZXJPZkNhbGVuZGFyTW9udGhXZWVrc1wiKSk7XG5cbnZhciBfZ2V0Q2FsZW5kYXJNb250aFdpZHRoID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvZ2V0Q2FsZW5kYXJNb250aFdpZHRoXCIpKTtcblxudmFyIF9jYWxjdWxhdGVEaW1lbnNpb24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9jYWxjdWxhdGVEaW1lbnNpb25cIikpO1xuXG52YXIgX2dldEFjdGl2ZUVsZW1lbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9nZXRBY3RpdmVFbGVtZW50XCIpKTtcblxudmFyIF9pc0RheVZpc2libGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9pc0RheVZpc2libGVcIikpO1xuXG52YXIgX2lzU2FtZU1vbnRoID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvaXNTYW1lTW9udGhcIikpO1xuXG52YXIgX01vZGlmaWVyc1NoYXBlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc2hhcGVzL01vZGlmaWVyc1NoYXBlXCIpKTtcblxudmFyIF9OYXZQb3NpdGlvblNoYXBlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc2hhcGVzL05hdlBvc2l0aW9uU2hhcGVcIikpO1xuXG52YXIgX1Njcm9sbGFibGVPcmllbnRhdGlvblNoYXBlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc2hhcGVzL1Njcm9sbGFibGVPcmllbnRhdGlvblNoYXBlXCIpKTtcblxudmFyIF9EYXlPZldlZWtTaGFwZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3NoYXBlcy9EYXlPZldlZWtTaGFwZVwiKSk7XG5cbnZhciBfQ2FsZW5kYXJJbmZvUG9zaXRpb25TaGFwZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3NoYXBlcy9DYWxlbmRhckluZm9Qb3NpdGlvblNoYXBlXCIpKTtcblxudmFyIF9jb25zdGFudHMgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzXCIpO1xuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbnZhciBNT05USF9QQURESU5HID0gMjM7XG52YXIgUFJFVl9UUkFOU0lUSU9OID0gJ3ByZXYnO1xudmFyIE5FWFRfVFJBTlNJVElPTiA9ICduZXh0JztcbnZhciBNT05USF9TRUxFQ1RJT05fVFJBTlNJVElPTiA9ICdtb250aF9zZWxlY3Rpb24nO1xudmFyIFlFQVJfU0VMRUNUSU9OX1RSQU5TSVRJT04gPSAneWVhcl9zZWxlY3Rpb24nO1xudmFyIFBSRVZfTkFWID0gJ3ByZXZfbmF2JztcbnZhciBORVhUX05BViA9ICduZXh0X25hdic7XG52YXIgcHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF9haXJibmJQcm9wVHlwZXMuZm9yYmlkRXh0cmFQcm9wcykoX29iamVjdFNwcmVhZCh7fSwgX3JlYWN0V2l0aFN0eWxlcy53aXRoU3R5bGVzUHJvcFR5cGVzLCB7XG4gIC8vIGNhbGVuZGFyIHByZXNlbnRhdGlvbiBwcm9wc1xuICBlbmFibGVPdXRzaWRlRGF5czogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgbnVtYmVyT2ZNb250aHM6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm51bWJlcixcbiAgb3JpZW50YXRpb246IF9TY3JvbGxhYmxlT3JpZW50YXRpb25TaGFwZVtcImRlZmF1bHRcIl0sXG4gIHdpdGhQb3J0YWw6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIG9uT3V0c2lkZUNsaWNrOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBoaWRkZW46IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIGluaXRpYWxWaXNpYmxlTW9udGg6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIGZpcnN0RGF5T2ZXZWVrOiBfRGF5T2ZXZWVrU2hhcGVbXCJkZWZhdWx0XCJdLFxuICByZW5kZXJDYWxlbmRhckluZm86IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIGNhbGVuZGFySW5mb1Bvc2l0aW9uOiBfQ2FsZW5kYXJJbmZvUG9zaXRpb25TaGFwZVtcImRlZmF1bHRcIl0sXG4gIGhpZGVLZXlib2FyZFNob3J0Y3V0c1BhbmVsOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBkYXlTaXplOiBfYWlyYm5iUHJvcFR5cGVzLm5vbk5lZ2F0aXZlSW50ZWdlcixcbiAgaXNSVEw6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIHZlcnRpY2FsSGVpZ2h0OiBfYWlyYm5iUHJvcFR5cGVzLm5vbk5lZ2F0aXZlSW50ZWdlcixcbiAgbm9Cb3JkZXI6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIHRyYW5zaXRpb25EdXJhdGlvbjogX2FpcmJuYlByb3BUeXBlcy5ub25OZWdhdGl2ZUludGVnZXIsXG4gIHZlcnRpY2FsQm9yZGVyU3BhY2luZzogX2FpcmJuYlByb3BUeXBlcy5ub25OZWdhdGl2ZUludGVnZXIsXG4gIGhvcml6b250YWxNb250aFBhZGRpbmc6IF9haXJibmJQcm9wVHlwZXMubm9uTmVnYXRpdmVJbnRlZ2VyLFxuICByZW5kZXJLZXlib2FyZFNob3J0Y3V0c0J1dHRvbjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgcmVuZGVyS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgLy8gbmF2aWdhdGlvbiBwcm9wc1xuICBkYXlQaWNrZXJOYXZpZ2F0aW9uSW5saW5lU3R5bGVzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5vYmplY3QsXG4gIGRpc2FibGVQcmV2OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBkaXNhYmxlTmV4dDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgbmF2UG9zaXRpb246IF9OYXZQb3NpdGlvblNoYXBlW1wiZGVmYXVsdFwiXSxcbiAgbmF2UHJldjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubm9kZSxcbiAgbmF2TmV4dDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubm9kZSxcbiAgcmVuZGVyTmF2UHJldkJ1dHRvbjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgcmVuZGVyTmF2TmV4dEJ1dHRvbjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgbm9OYXZCdXR0b25zOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBub05hdk5leHRCdXR0b246IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIG5vTmF2UHJldkJ1dHRvbjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgb25QcmV2TW9udGhDbGljazogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgb25OZXh0TW9udGhDbGljazogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgb25Nb250aENoYW5nZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgb25ZZWFyQ2hhbmdlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvbkdldE5leHRTY3JvbGxhYmxlTW9udGhzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICAvLyBWRVJUSUNBTF9TQ1JPTExBQkxFIGRheXBpY2tlcnMgb25seVxuICBvbkdldFByZXZTY3JvbGxhYmxlTW9udGhzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICAvLyBWRVJUSUNBTF9TQ1JPTExBQkxFIGRheXBpY2tlcnMgb25seVxuICAvLyBtb250aCBwcm9wc1xuICByZW5kZXJNb250aFRleHQ6ICgwLCBfYWlyYm5iUHJvcFR5cGVzLm11dHVhbGx5RXhjbHVzaXZlUHJvcHMpKF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsICdyZW5kZXJNb250aFRleHQnLCAncmVuZGVyTW9udGhFbGVtZW50JyksXG4gIHJlbmRlck1vbnRoRWxlbWVudDogKDAsIF9haXJibmJQcm9wVHlwZXMubXV0dWFsbHlFeGNsdXNpdmVQcm9wcykoX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYywgJ3JlbmRlck1vbnRoVGV4dCcsICdyZW5kZXJNb250aEVsZW1lbnQnKSxcbiAgcmVuZGVyV2Vla0hlYWRlckVsZW1lbnQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIC8vIGRheSBwcm9wc1xuICBtb2RpZmllcnM6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm9iamVjdE9mKF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm9iamVjdE9mKF9Nb2RpZmllcnNTaGFwZVtcImRlZmF1bHRcIl0pKSxcbiAgcmVuZGVyQ2FsZW5kYXJEYXk6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIHJlbmRlckRheUNvbnRlbnRzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvbkRheUNsaWNrOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvbkRheU1vdXNlRW50ZXI6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIG9uRGF5TW91c2VMZWF2ZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgLy8gYWNjZXNzaWJpbGl0eSBwcm9wc1xuICBpc0ZvY3VzZWQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIGdldEZpcnN0Rm9jdXNhYmxlRGF5OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvbkJsdXI6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIHNob3dLZXlib2FyZFNob3J0Y3V0czogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgb25UYWI6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIG9uU2hpZnRUYWI6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIC8vIGludGVybmF0aW9uYWxpemF0aW9uXG4gIG1vbnRoRm9ybWF0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcsXG4gIHdlZWtEYXlGb3JtYXQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZyxcbiAgcGhyYXNlczogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc2hhcGUoKDAsIF9nZXRQaHJhc2VQcm9wVHlwZXNbXCJkZWZhdWx0XCJdKShfZGVmYXVsdFBocmFzZXMuRGF5UGlja2VyUGhyYXNlcykpLFxuICBkYXlBcmlhTGFiZWxGb3JtYXQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZ1xufSkpIDoge307XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICAvLyBjYWxlbmRhciBwcmVzZW50YXRpb24gcHJvcHNcbiAgZW5hYmxlT3V0c2lkZURheXM6IGZhbHNlLFxuICBudW1iZXJPZk1vbnRoczogMixcbiAgb3JpZW50YXRpb246IF9jb25zdGFudHMuSE9SSVpPTlRBTF9PUklFTlRBVElPTixcbiAgd2l0aFBvcnRhbDogZmFsc2UsXG4gIG9uT3V0c2lkZUNsaWNrOiBmdW5jdGlvbiBvbk91dHNpZGVDbGljaygpIHt9LFxuICBoaWRkZW46IGZhbHNlLFxuICBpbml0aWFsVmlzaWJsZU1vbnRoOiBmdW5jdGlvbiBpbml0aWFsVmlzaWJsZU1vbnRoKCkge1xuICAgIHJldHVybiAoMCwgX21vbWVudFtcImRlZmF1bHRcIl0pKCk7XG4gIH0sXG4gIGZpcnN0RGF5T2ZXZWVrOiBudWxsLFxuICByZW5kZXJDYWxlbmRhckluZm86IG51bGwsXG4gIGNhbGVuZGFySW5mb1Bvc2l0aW9uOiBfY29uc3RhbnRzLklORk9fUE9TSVRJT05fQk9UVE9NLFxuICBoaWRlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbDogZmFsc2UsXG4gIGRheVNpemU6IF9jb25zdGFudHMuREFZX1NJWkUsXG4gIGlzUlRMOiBmYWxzZSxcbiAgdmVydGljYWxIZWlnaHQ6IG51bGwsXG4gIG5vQm9yZGVyOiBmYWxzZSxcbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiB1bmRlZmluZWQsXG4gIHZlcnRpY2FsQm9yZGVyU3BhY2luZzogdW5kZWZpbmVkLFxuICBob3Jpem9udGFsTW9udGhQYWRkaW5nOiAxMyxcbiAgcmVuZGVyS2V5Ym9hcmRTaG9ydGN1dHNCdXR0b246IHVuZGVmaW5lZCxcbiAgcmVuZGVyS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbDogdW5kZWZpbmVkLFxuICAvLyBuYXZpZ2F0aW9uIHByb3BzXG4gIGRheVBpY2tlck5hdmlnYXRpb25JbmxpbmVTdHlsZXM6IG51bGwsXG4gIGRpc2FibGVQcmV2OiBmYWxzZSxcbiAgZGlzYWJsZU5leHQ6IGZhbHNlLFxuICBuYXZQb3NpdGlvbjogX2NvbnN0YW50cy5OQVZfUE9TSVRJT05fVE9QLFxuICBuYXZQcmV2OiBudWxsLFxuICBuYXZOZXh0OiBudWxsLFxuICByZW5kZXJOYXZQcmV2QnV0dG9uOiBudWxsLFxuICByZW5kZXJOYXZOZXh0QnV0dG9uOiBudWxsLFxuICBub05hdkJ1dHRvbnM6IGZhbHNlLFxuICBub05hdk5leHRCdXR0b246IGZhbHNlLFxuICBub05hdlByZXZCdXR0b246IGZhbHNlLFxuICBvblByZXZNb250aENsaWNrOiBmdW5jdGlvbiBvblByZXZNb250aENsaWNrKCkge30sXG4gIG9uTmV4dE1vbnRoQ2xpY2s6IGZ1bmN0aW9uIG9uTmV4dE1vbnRoQ2xpY2soKSB7fSxcbiAgb25Nb250aENoYW5nZTogZnVuY3Rpb24gb25Nb250aENoYW5nZSgpIHt9LFxuICBvblllYXJDaGFuZ2U6IGZ1bmN0aW9uIG9uWWVhckNoYW5nZSgpIHt9LFxuICBvbkdldE5leHRTY3JvbGxhYmxlTW9udGhzOiBmdW5jdGlvbiBvbkdldE5leHRTY3JvbGxhYmxlTW9udGhzKCkge30sXG4gIG9uR2V0UHJldlNjcm9sbGFibGVNb250aHM6IGZ1bmN0aW9uIG9uR2V0UHJldlNjcm9sbGFibGVNb250aHMoKSB7fSxcbiAgLy8gbW9udGggcHJvcHNcbiAgcmVuZGVyTW9udGhUZXh0OiBudWxsLFxuICByZW5kZXJNb250aEVsZW1lbnQ6IG51bGwsXG4gIHJlbmRlcldlZWtIZWFkZXJFbGVtZW50OiBudWxsLFxuICAvLyBkYXkgcHJvcHNcbiAgbW9kaWZpZXJzOiB7fSxcbiAgcmVuZGVyQ2FsZW5kYXJEYXk6IHVuZGVmaW5lZCxcbiAgcmVuZGVyRGF5Q29udGVudHM6IG51bGwsXG4gIG9uRGF5Q2xpY2s6IGZ1bmN0aW9uIG9uRGF5Q2xpY2soKSB7fSxcbiAgb25EYXlNb3VzZUVudGVyOiBmdW5jdGlvbiBvbkRheU1vdXNlRW50ZXIoKSB7fSxcbiAgb25EYXlNb3VzZUxlYXZlOiBmdW5jdGlvbiBvbkRheU1vdXNlTGVhdmUoKSB7fSxcbiAgLy8gYWNjZXNzaWJpbGl0eSBwcm9wc1xuICBpc0ZvY3VzZWQ6IGZhbHNlLFxuICBnZXRGaXJzdEZvY3VzYWJsZURheTogbnVsbCxcbiAgb25CbHVyOiBmdW5jdGlvbiBvbkJsdXIoKSB7fSxcbiAgc2hvd0tleWJvYXJkU2hvcnRjdXRzOiBmYWxzZSxcbiAgb25UYWI6IGZ1bmN0aW9uIG9uVGFiKCkge30sXG4gIG9uU2hpZnRUYWI6IGZ1bmN0aW9uIG9uU2hpZnRUYWIoKSB7fSxcbiAgLy8gaW50ZXJuYXRpb25hbGl6YXRpb25cbiAgbW9udGhGb3JtYXQ6ICdNTU1NIFlZWVknLFxuICB3ZWVrRGF5Rm9ybWF0OiAnZGQnLFxuICBwaHJhc2VzOiBfZGVmYXVsdFBocmFzZXMuRGF5UGlja2VyUGhyYXNlcyxcbiAgZGF5QXJpYUxhYmVsRm9ybWF0OiB1bmRlZmluZWRcbn07XG5leHBvcnRzLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxudmFyIERheVBpY2tlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX3JlZikge1xuICAoMCwgX2luaGVyaXRzTG9vc2UyW1wiZGVmYXVsdFwiXSkoRGF5UGlja2VyLCBfcmVmKTtcbiAgdmFyIF9wcm90byA9IERheVBpY2tlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvWyFfcmVhY3RbXCJkZWZhdWx0XCJdLlB1cmVDb21wb25lbnQgJiYgXCJzaG91bGRDb21wb25lbnRVcGRhdGVcIl0gPSBmdW5jdGlvbiAobmV4dFByb3BzLCBuZXh0U3RhdGUpIHtcbiAgICByZXR1cm4gISgwLCBfZW56eW1lU2hhbGxvd0VxdWFsW1wiZGVmYXVsdFwiXSkodGhpcy5wcm9wcywgbmV4dFByb3BzKSB8fCAhKDAsIF9lbnp5bWVTaGFsbG93RXF1YWxbXCJkZWZhdWx0XCJdKSh0aGlzLnN0YXRlLCBuZXh0U3RhdGUpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIERheVBpY2tlcihwcm9wcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX3JlZi5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgIHZhciBjdXJyZW50TW9udGggPSBwcm9wcy5oaWRkZW4gPyAoMCwgX21vbWVudFtcImRlZmF1bHRcIl0pKCkgOiBwcm9wcy5pbml0aWFsVmlzaWJsZU1vbnRoKCk7XG4gICAgdmFyIGZvY3VzZWREYXRlID0gY3VycmVudE1vbnRoLmNsb25lKCkuc3RhcnRPZignbW9udGgnKTtcblxuICAgIGlmIChwcm9wcy5nZXRGaXJzdEZvY3VzYWJsZURheSkge1xuICAgICAgZm9jdXNlZERhdGUgPSBwcm9wcy5nZXRGaXJzdEZvY3VzYWJsZURheShjdXJyZW50TW9udGgpO1xuICAgIH1cblxuICAgIHZhciBob3Jpem9udGFsTW9udGhQYWRkaW5nID0gcHJvcHMuaG9yaXpvbnRhbE1vbnRoUGFkZGluZztcbiAgICB2YXIgdHJhbnNsYXRpb25WYWx1ZSA9IHByb3BzLmlzUlRMICYmIF90aGlzLmlzSG9yaXpvbnRhbCgpID8gLSgwLCBfZ2V0Q2FsZW5kYXJNb250aFdpZHRoW1wiZGVmYXVsdFwiXSkocHJvcHMuZGF5U2l6ZSwgaG9yaXpvbnRhbE1vbnRoUGFkZGluZykgOiAwO1xuICAgIF90aGlzLmhhc1NldEluaXRpYWxWaXNpYmxlTW9udGggPSAhcHJvcHMuaGlkZGVuO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgY3VycmVudE1vbnRoU2Nyb2xsVG9wOiBudWxsLFxuICAgICAgY3VycmVudE1vbnRoOiBjdXJyZW50TW9udGgsXG4gICAgICBtb250aFRyYW5zaXRpb246IG51bGwsXG4gICAgICB0cmFuc2xhdGlvblZhbHVlOiB0cmFuc2xhdGlvblZhbHVlLFxuICAgICAgc2Nyb2xsYWJsZU1vbnRoTXVsdGlwbGU6IDEsXG4gICAgICBjYWxlbmRhck1vbnRoV2lkdGg6ICgwLCBfZ2V0Q2FsZW5kYXJNb250aFdpZHRoW1wiZGVmYXVsdFwiXSkocHJvcHMuZGF5U2l6ZSwgaG9yaXpvbnRhbE1vbnRoUGFkZGluZyksXG4gICAgICBmb2N1c2VkRGF0ZTogIXByb3BzLmhpZGRlbiB8fCBwcm9wcy5pc0ZvY3VzZWQgPyBmb2N1c2VkRGF0ZSA6IG51bGwsXG4gICAgICBuZXh0Rm9jdXNlZERhdGU6IG51bGwsXG4gICAgICBzaG93S2V5Ym9hcmRTaG9ydGN1dHM6IHByb3BzLnNob3dLZXlib2FyZFNob3J0Y3V0cyxcbiAgICAgIG9uS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbENsb3NlOiBmdW5jdGlvbiBvbktleWJvYXJkU2hvcnRjdXRzUGFuZWxDbG9zZSgpIHt9LFxuICAgICAgaXNUb3VjaERldmljZTogKDAsIF9pc1RvdWNoRGV2aWNlW1wiZGVmYXVsdFwiXSkoKSxcbiAgICAgIHdpdGhNb3VzZUludGVyYWN0aW9uczogdHJ1ZSxcbiAgICAgIGNhbGVuZGFySW5mb1dpZHRoOiAwLFxuICAgICAgbW9udGhUaXRsZUhlaWdodDogbnVsbCxcbiAgICAgIGhhc1NldEhlaWdodDogZmFsc2VcbiAgICB9O1xuXG4gICAgX3RoaXMuc2V0Q2FsZW5kYXJNb250aFdlZWtzKGN1cnJlbnRNb250aCk7XG5cbiAgICBfdGhpcy5jYWxlbmRhck1vbnRoR3JpZEhlaWdodCA9IDA7XG4gICAgX3RoaXMuc2V0Q2FsZW5kYXJJbmZvV2lkdGhUaW1lb3V0ID0gbnVsbDtcbiAgICBfdGhpcy5zZXRDYWxlbmRhck1vbnRoR3JpZEhlaWdodFRpbWVvdXQgPSBudWxsO1xuICAgIF90aGlzLm9uS2V5RG93biA9IF90aGlzLm9uS2V5RG93bi5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgX3RoaXMudGhyb3R0bGVkS2V5RG93biA9ICgwLCBfdGhyb3R0bGVbXCJkZWZhdWx0XCJdKShfdGhpcy5vbkZpbmFsS2V5RG93biwgMjAwLCB7XG4gICAgICB0cmFpbGluZzogZmFsc2VcbiAgICB9KTtcbiAgICBfdGhpcy5vblByZXZNb250aENsaWNrID0gX3RoaXMub25QcmV2TW9udGhDbGljay5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgX3RoaXMub25QcmV2TW9udGhUcmFuc2l0aW9uID0gX3RoaXMub25QcmV2TW9udGhUcmFuc2l0aW9uLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5vbk5leHRNb250aENsaWNrID0gX3RoaXMub25OZXh0TW9udGhDbGljay5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgX3RoaXMub25OZXh0TW9udGhUcmFuc2l0aW9uID0gX3RoaXMub25OZXh0TW9udGhUcmFuc2l0aW9uLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5vbk1vbnRoQ2hhbmdlID0gX3RoaXMub25Nb250aENoYW5nZS5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgX3RoaXMub25ZZWFyQ2hhbmdlID0gX3RoaXMub25ZZWFyQ2hhbmdlLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5nZXROZXh0U2Nyb2xsYWJsZU1vbnRocyA9IF90aGlzLmdldE5leHRTY3JvbGxhYmxlTW9udGhzLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5nZXRQcmV2U2Nyb2xsYWJsZU1vbnRocyA9IF90aGlzLmdldFByZXZTY3JvbGxhYmxlTW9udGhzLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy51cGRhdGVTdGF0ZUFmdGVyTW9udGhUcmFuc2l0aW9uID0gX3RoaXMudXBkYXRlU3RhdGVBZnRlck1vbnRoVHJhbnNpdGlvbi5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgX3RoaXMub3BlbktleWJvYXJkU2hvcnRjdXRzUGFuZWwgPSBfdGhpcy5vcGVuS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbC5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgX3RoaXMuY2xvc2VLZXlib2FyZFNob3J0Y3V0c1BhbmVsID0gX3RoaXMuY2xvc2VLZXlib2FyZFNob3J0Y3V0c1BhbmVsLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5zZXRDYWxlbmRhckluZm9SZWYgPSBfdGhpcy5zZXRDYWxlbmRhckluZm9SZWYuYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcykpO1xuICAgIF90aGlzLnNldENvbnRhaW5lclJlZiA9IF90aGlzLnNldENvbnRhaW5lclJlZi5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgX3RoaXMuc2V0VHJhbnNpdGlvbkNvbnRhaW5lclJlZiA9IF90aGlzLnNldFRyYW5zaXRpb25Db250YWluZXJSZWYuYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcykpO1xuICAgIF90aGlzLnNldE1vbnRoVGl0bGVIZWlnaHQgPSBfdGhpcy5zZXRNb250aFRpdGxlSGVpZ2h0LmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB2YXIgb3JpZW50YXRpb24gPSB0aGlzLnByb3BzLm9yaWVudGF0aW9uO1xuICAgIHZhciBjdXJyZW50TW9udGggPSB0aGlzLnN0YXRlLmN1cnJlbnRNb250aDtcbiAgICB2YXIgY2FsZW5kYXJJbmZvV2lkdGggPSB0aGlzLmNhbGVuZGFySW5mbyA/ICgwLCBfY2FsY3VsYXRlRGltZW5zaW9uW1wiZGVmYXVsdFwiXSkodGhpcy5jYWxlbmRhckluZm8sICd3aWR0aCcsIHRydWUsIHRydWUpIDogMDtcbiAgICB2YXIgY3VycmVudE1vbnRoU2Nyb2xsVG9wID0gdGhpcy50cmFuc2l0aW9uQ29udGFpbmVyICYmIG9yaWVudGF0aW9uID09PSBfY29uc3RhbnRzLlZFUlRJQ0FMX1NDUk9MTEFCTEUgPyB0aGlzLnRyYW5zaXRpb25Db250YWluZXIuc2Nyb2xsSGVpZ2h0IC0gdGhpcy50cmFuc2l0aW9uQ29udGFpbmVyLnNjcm9sbFRvcCA6IG51bGw7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBpc1RvdWNoRGV2aWNlOiAoMCwgX2lzVG91Y2hEZXZpY2VbXCJkZWZhdWx0XCJdKSgpLFxuICAgICAgY2FsZW5kYXJJbmZvV2lkdGg6IGNhbGVuZGFySW5mb1dpZHRoLFxuICAgICAgY3VycmVudE1vbnRoU2Nyb2xsVG9wOiBjdXJyZW50TW9udGhTY3JvbGxUb3BcbiAgICB9KTtcbiAgICB0aGlzLnNldENhbGVuZGFyTW9udGhXZWVrcyhjdXJyZW50TW9udGgpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMsIG5leHRTdGF0ZSkge1xuICAgIHZhciBoaWRkZW4gPSBuZXh0UHJvcHMuaGlkZGVuLFxuICAgICAgICBpc0ZvY3VzZWQgPSBuZXh0UHJvcHMuaXNGb2N1c2VkLFxuICAgICAgICBzaG93S2V5Ym9hcmRTaG9ydGN1dHMgPSBuZXh0UHJvcHMuc2hvd0tleWJvYXJkU2hvcnRjdXRzLFxuICAgICAgICBvbkJsdXIgPSBuZXh0UHJvcHMub25CbHVyLFxuICAgICAgICBvcmllbnRhdGlvbiA9IG5leHRQcm9wcy5vcmllbnRhdGlvbixcbiAgICAgICAgcmVuZGVyTW9udGhUZXh0ID0gbmV4dFByb3BzLnJlbmRlck1vbnRoVGV4dCxcbiAgICAgICAgaG9yaXpvbnRhbE1vbnRoUGFkZGluZyA9IG5leHRQcm9wcy5ob3Jpem9udGFsTW9udGhQYWRkaW5nO1xuICAgIHZhciBjdXJyZW50TW9udGggPSB0aGlzLnN0YXRlLmN1cnJlbnRNb250aDtcbiAgICB2YXIgbmV4dEN1cnJlbnRNb250aCA9IG5leHRTdGF0ZS5jdXJyZW50TW9udGg7XG5cbiAgICBpZiAoIWhpZGRlbikge1xuICAgICAgaWYgKCF0aGlzLmhhc1NldEluaXRpYWxWaXNpYmxlTW9udGgpIHtcbiAgICAgICAgdGhpcy5oYXNTZXRJbml0aWFsVmlzaWJsZU1vbnRoID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgY3VycmVudE1vbnRoOiBuZXh0UHJvcHMuaW5pdGlhbFZpc2libGVNb250aCgpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGRheVNpemUgPSBfdGhpcyRwcm9wcy5kYXlTaXplLFxuICAgICAgICBwcmV2SXNGb2N1c2VkID0gX3RoaXMkcHJvcHMuaXNGb2N1c2VkLFxuICAgICAgICBwcmV2UmVuZGVyTW9udGhUZXh0ID0gX3RoaXMkcHJvcHMucmVuZGVyTW9udGhUZXh0O1xuXG4gICAgaWYgKG5leHRQcm9wcy5kYXlTaXplICE9PSBkYXlTaXplKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgY2FsZW5kYXJNb250aFdpZHRoOiAoMCwgX2dldENhbGVuZGFyTW9udGhXaWR0aFtcImRlZmF1bHRcIl0pKG5leHRQcm9wcy5kYXlTaXplLCBob3Jpem9udGFsTW9udGhQYWRkaW5nKVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGlzRm9jdXNlZCAhPT0gcHJldklzRm9jdXNlZCkge1xuICAgICAgaWYgKGlzRm9jdXNlZCkge1xuICAgICAgICB2YXIgZm9jdXNlZERhdGUgPSB0aGlzLmdldEZvY3VzZWREYXkoY3VycmVudE1vbnRoKTtcbiAgICAgICAgdmFyIG9uS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbENsb3NlID0gdGhpcy5zdGF0ZS5vbktleWJvYXJkU2hvcnRjdXRzUGFuZWxDbG9zZTtcblxuICAgICAgICBpZiAobmV4dFByb3BzLnNob3dLZXlib2FyZFNob3J0Y3V0cykge1xuICAgICAgICAgIC8vIHRoZSA/IHNob3J0Y3V0IGNhbWUgZnJvbSB0aGUgaW5wdXQgYW5kIHdlIHNob3VsZCByZXR1cm4gaW5wdXQgdGhlcmUgb25jZSBpdCBpcyBjbG9zZVxuICAgICAgICAgIG9uS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbENsb3NlID0gb25CbHVyO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgc2hvd0tleWJvYXJkU2hvcnRjdXRzOiBzaG93S2V5Ym9hcmRTaG9ydGN1dHMsXG4gICAgICAgICAgb25LZXlib2FyZFNob3J0Y3V0c1BhbmVsQ2xvc2U6IG9uS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbENsb3NlLFxuICAgICAgICAgIGZvY3VzZWREYXRlOiBmb2N1c2VkRGF0ZSxcbiAgICAgICAgICB3aXRoTW91c2VJbnRlcmFjdGlvbnM6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgZm9jdXNlZERhdGU6IG51bGxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHJlbmRlck1vbnRoVGV4dCAhPT0gcHJldlJlbmRlck1vbnRoVGV4dCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIG1vbnRoVGl0bGVIZWlnaHQ6IG51bGxcbiAgICAgIH0pO1xuICAgIH0gLy8gQ2FwdHVyZSB0aGUgc2Nyb2xsIHBvc2l0aW9uIHNvIHdoZW4gcHJldmlvdXMgbW9udGhzIGFyZSByZW5kZXJlZCBhYm92ZSB0aGUgY3VycmVudCBtb250aFxuICAgIC8vIHdlIGNhbiBhZGp1c3Qgc2Nyb2xsIGFmdGVyIHRoZSBjb21wb25lbnQgaGFzIHVwZGF0ZWQgYW5kIHRoZSBwcmV2aW91cyBjdXJyZW50IG1vbnRoXG4gICAgLy8gc3RheXMgaW4gdmlldy5cblxuXG4gICAgaWYgKG9yaWVudGF0aW9uID09PSBfY29uc3RhbnRzLlZFUlRJQ0FMX1NDUk9MTEFCTEUgJiYgdGhpcy50cmFuc2l0aW9uQ29udGFpbmVyICYmICEoMCwgX2lzU2FtZU1vbnRoW1wiZGVmYXVsdFwiXSkoY3VycmVudE1vbnRoLCBuZXh0Q3VycmVudE1vbnRoKSkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGN1cnJlbnRNb250aFNjcm9sbFRvcDogdGhpcy50cmFuc2l0aW9uQ29udGFpbmVyLnNjcm9sbEhlaWdodCAtIHRoaXMudHJhbnNpdGlvbkNvbnRhaW5lci5zY3JvbGxUb3BcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVcGRhdGUoKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9uID0gdGhpcy5wcm9wcy50cmFuc2l0aW9uRHVyYXRpb247IC8vIENhbGN1bGF0aW5nIHRoZSBkaW1lbnNpb25zIHRyaWdnZXIgYSBET00gcmVwYWludCB3aGljaFxuICAgIC8vIGJyZWFrcyB0aGUgQ1NTIHRyYW5zaXRpb24uXG4gICAgLy8gVGhlIHNldFRpbWVvdXQgd2lsbCB3YWl0IHVudGlsIHRoZSB0cmFuc2l0aW9uIGVuZHMuXG5cbiAgICBpZiAodGhpcy5jYWxlbmRhckluZm8pIHtcbiAgICAgIHRoaXMuc2V0Q2FsZW5kYXJJbmZvV2lkdGhUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjYWxlbmRhckluZm9XaWR0aCA9IF90aGlzMi5zdGF0ZS5jYWxlbmRhckluZm9XaWR0aDtcbiAgICAgICAgdmFyIGNhbGVuZGFySW5mb1BhbmVsV2lkdGggPSAoMCwgX2NhbGN1bGF0ZURpbWVuc2lvbltcImRlZmF1bHRcIl0pKF90aGlzMi5jYWxlbmRhckluZm8sICd3aWR0aCcsIHRydWUsIHRydWUpO1xuXG4gICAgICAgIGlmIChjYWxlbmRhckluZm9XaWR0aCAhPT0gY2FsZW5kYXJJbmZvUGFuZWxXaWR0aCkge1xuICAgICAgICAgIF90aGlzMi5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBjYWxlbmRhckluZm9XaWR0aDogY2FsZW5kYXJJbmZvUGFuZWxXaWR0aFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9LCB0cmFuc2l0aW9uRHVyYXRpb24pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgIG9yaWVudGF0aW9uID0gX3RoaXMkcHJvcHMyLm9yaWVudGF0aW9uLFxuICAgICAgICBkYXlTaXplID0gX3RoaXMkcHJvcHMyLmRheVNpemUsXG4gICAgICAgIGlzRm9jdXNlZCA9IF90aGlzJHByb3BzMi5pc0ZvY3VzZWQsXG4gICAgICAgIG51bWJlck9mTW9udGhzID0gX3RoaXMkcHJvcHMyLm51bWJlck9mTW9udGhzO1xuICAgIHZhciBfdGhpcyRzdGF0ZSA9IHRoaXMuc3RhdGUsXG4gICAgICAgIGN1cnJlbnRNb250aCA9IF90aGlzJHN0YXRlLmN1cnJlbnRNb250aCxcbiAgICAgICAgY3VycmVudE1vbnRoU2Nyb2xsVG9wID0gX3RoaXMkc3RhdGUuY3VycmVudE1vbnRoU2Nyb2xsVG9wLFxuICAgICAgICBmb2N1c2VkRGF0ZSA9IF90aGlzJHN0YXRlLmZvY3VzZWREYXRlLFxuICAgICAgICBtb250aFRpdGxlSGVpZ2h0ID0gX3RoaXMkc3RhdGUubW9udGhUaXRsZUhlaWdodDtcblxuICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpICYmIChvcmllbnRhdGlvbiAhPT0gcHJldlByb3BzLm9yaWVudGF0aW9uIHx8IGRheVNpemUgIT09IHByZXZQcm9wcy5kYXlTaXplKSkge1xuICAgICAgdmFyIHZpc2libGVDYWxlbmRhcldlZWtzID0gdGhpcy5jYWxlbmRhck1vbnRoV2Vla3Muc2xpY2UoMSwgbnVtYmVyT2ZNb250aHMgKyAxKTtcbiAgICAgIHZhciBjYWxlbmRhck1vbnRoV2Vla3NIZWlnaHQgPSBNYXRoLm1heC5hcHBseShNYXRoLCBbMF0uY29uY2F0KCgwLCBfdG9Db25zdW1hYmxlQXJyYXkyW1wiZGVmYXVsdFwiXSkodmlzaWJsZUNhbGVuZGFyV2Vla3MpKSkgKiAoZGF5U2l6ZSAtIDEpO1xuICAgICAgdmFyIG5ld01vbnRoSGVpZ2h0ID0gbW9udGhUaXRsZUhlaWdodCArIGNhbGVuZGFyTW9udGhXZWVrc0hlaWdodCArIDE7XG4gICAgICB0aGlzLmFkanVzdERheVBpY2tlckhlaWdodChuZXdNb250aEhlaWdodCk7XG4gICAgfVxuXG4gICAgaWYgKCFwcmV2UHJvcHMuaXNGb2N1c2VkICYmIGlzRm9jdXNlZCAmJiAhZm9jdXNlZERhdGUpIHtcbiAgICAgIHRoaXMuY29udGFpbmVyLmZvY3VzKCk7XG4gICAgfSAvLyBJZiBvcmllbnRhdGlvbiBpcyBWRVJUSUNBTF9TQ1JPTExBQkxFIGFuZCBjdXJyZW50TW9udGggaGFzIGNoYW5nZWQgYWRqdXN0IHNjcm9sbFRvcCBzbyB0aGVcbiAgICAvLyBuZXcgbW9udGhzIHJlbmRlcmVkIGFib3ZlIHRoZSBjdXJyZW50IG1vbnRoIGRvbid0IHB1c2ggdGhlIGN1cnJlbnQgbW9udGggb3V0IG9mIHZpZXcuXG5cblxuICAgIGlmIChvcmllbnRhdGlvbiA9PT0gX2NvbnN0YW50cy5WRVJUSUNBTF9TQ1JPTExBQkxFICYmICEoMCwgX2lzU2FtZU1vbnRoW1wiZGVmYXVsdFwiXSkocHJldlN0YXRlLmN1cnJlbnRNb250aCwgY3VycmVudE1vbnRoKSAmJiBjdXJyZW50TW9udGhTY3JvbGxUb3AgJiYgdGhpcy50cmFuc2l0aW9uQ29udGFpbmVyKSB7XG4gICAgICB0aGlzLnRyYW5zaXRpb25Db250YWluZXIuc2Nyb2xsVG9wID0gdGhpcy50cmFuc2l0aW9uQ29udGFpbmVyLnNjcm9sbEhlaWdodCAtIGN1cnJlbnRNb250aFNjcm9sbFRvcDtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuc2V0Q2FsZW5kYXJJbmZvV2lkdGhUaW1lb3V0KTtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5zZXRDYWxlbmRhck1vbnRoR3JpZEhlaWdodFRpbWVvdXQpO1xuICB9O1xuXG4gIF9wcm90by5vbktleURvd24gPSBmdW5jdGlvbiBvbktleURvd24oZSkge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICBpZiAoIV9jb25zdGFudHMuTU9ESUZJRVJfS0VZX05BTUVTLmhhcyhlLmtleSkpIHtcbiAgICAgIHRoaXMudGhyb3R0bGVkS2V5RG93bihlKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLm9uRmluYWxLZXlEb3duID0gZnVuY3Rpb24gb25GaW5hbEtleURvd24oZSkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgd2l0aE1vdXNlSW50ZXJhY3Rpb25zOiBmYWxzZVxuICAgIH0pO1xuICAgIHZhciBfdGhpcyRwcm9wczMgPSB0aGlzLnByb3BzLFxuICAgICAgICBvbkJsdXIgPSBfdGhpcyRwcm9wczMub25CbHVyLFxuICAgICAgICBvblRhYiA9IF90aGlzJHByb3BzMy5vblRhYixcbiAgICAgICAgb25TaGlmdFRhYiA9IF90aGlzJHByb3BzMy5vblNoaWZ0VGFiLFxuICAgICAgICBpc1JUTCA9IF90aGlzJHByb3BzMy5pc1JUTDtcbiAgICB2YXIgX3RoaXMkc3RhdGUyID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgZm9jdXNlZERhdGUgPSBfdGhpcyRzdGF0ZTIuZm9jdXNlZERhdGUsXG4gICAgICAgIHNob3dLZXlib2FyZFNob3J0Y3V0cyA9IF90aGlzJHN0YXRlMi5zaG93S2V5Ym9hcmRTaG9ydGN1dHM7XG4gICAgaWYgKCFmb2N1c2VkRGF0ZSkgcmV0dXJuO1xuICAgIHZhciBuZXdGb2N1c2VkRGF0ZSA9IGZvY3VzZWREYXRlLmNsb25lKCk7XG4gICAgdmFyIGRpZFRyYW5zaXRpb25Nb250aCA9IGZhbHNlOyAvLyBmb2N1cyBtaWdodCBiZSBhbnl3aGVyZSB3aGVuIHRoZSBrZXlib2FyZCBzaG9ydGN1dHMgcGFuZWwgaXMgb3BlbmVkIHNvIHdlIHdhbnQgdG9cbiAgICAvLyByZXR1cm4gaXQgdG8gd2hlcmV2ZXIgaXQgd2FzIGJlZm9yZSB3aGVuIHRoZSBwYW5lbCB3YXMgb3BlbmVkXG5cbiAgICB2YXIgYWN0aXZlRWxlbWVudCA9ICgwLCBfZ2V0QWN0aXZlRWxlbWVudFtcImRlZmF1bHRcIl0pKCk7XG5cbiAgICB2YXIgb25LZXlib2FyZFNob3J0Y3V0c1BhbmVsQ2xvc2UgPSBmdW5jdGlvbiBvbktleWJvYXJkU2hvcnRjdXRzUGFuZWxDbG9zZSgpIHtcbiAgICAgIGlmIChhY3RpdmVFbGVtZW50KSBhY3RpdmVFbGVtZW50LmZvY3VzKCk7XG4gICAgfTtcblxuICAgIHN3aXRjaCAoZS5rZXkpIHtcbiAgICAgIGNhc2UgJ0Fycm93VXAnOlxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIG5ld0ZvY3VzZWREYXRlLnN1YnRyYWN0KDEsICd3ZWVrJyk7XG4gICAgICAgIGRpZFRyYW5zaXRpb25Nb250aCA9IHRoaXMubWF5YmVUcmFuc2l0aW9uUHJldk1vbnRoKG5ld0ZvY3VzZWREYXRlKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ0Fycm93TGVmdCc6XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICBpZiAoaXNSVEwpIHtcbiAgICAgICAgICBuZXdGb2N1c2VkRGF0ZS5hZGQoMSwgJ2RheScpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld0ZvY3VzZWREYXRlLnN1YnRyYWN0KDEsICdkYXknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRpZFRyYW5zaXRpb25Nb250aCA9IHRoaXMubWF5YmVUcmFuc2l0aW9uUHJldk1vbnRoKG5ld0ZvY3VzZWREYXRlKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ0hvbWUnOlxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIG5ld0ZvY3VzZWREYXRlLnN0YXJ0T2YoJ3dlZWsnKTtcbiAgICAgICAgZGlkVHJhbnNpdGlvbk1vbnRoID0gdGhpcy5tYXliZVRyYW5zaXRpb25QcmV2TW9udGgobmV3Rm9jdXNlZERhdGUpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnUGFnZVVwJzpcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBuZXdGb2N1c2VkRGF0ZS5zdWJ0cmFjdCgxLCAnbW9udGgnKTtcbiAgICAgICAgZGlkVHJhbnNpdGlvbk1vbnRoID0gdGhpcy5tYXliZVRyYW5zaXRpb25QcmV2TW9udGgobmV3Rm9jdXNlZERhdGUpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnQXJyb3dEb3duJzpcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBuZXdGb2N1c2VkRGF0ZS5hZGQoMSwgJ3dlZWsnKTtcbiAgICAgICAgZGlkVHJhbnNpdGlvbk1vbnRoID0gdGhpcy5tYXliZVRyYW5zaXRpb25OZXh0TW9udGgobmV3Rm9jdXNlZERhdGUpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnQXJyb3dSaWdodCc6XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICBpZiAoaXNSVEwpIHtcbiAgICAgICAgICBuZXdGb2N1c2VkRGF0ZS5zdWJ0cmFjdCgxLCAnZGF5Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3Rm9jdXNlZERhdGUuYWRkKDEsICdkYXknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRpZFRyYW5zaXRpb25Nb250aCA9IHRoaXMubWF5YmVUcmFuc2l0aW9uTmV4dE1vbnRoKG5ld0ZvY3VzZWREYXRlKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ0VuZCc6XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgbmV3Rm9jdXNlZERhdGUuZW5kT2YoJ3dlZWsnKTtcbiAgICAgICAgZGlkVHJhbnNpdGlvbk1vbnRoID0gdGhpcy5tYXliZVRyYW5zaXRpb25OZXh0TW9udGgobmV3Rm9jdXNlZERhdGUpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnUGFnZURvd24nOlxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIG5ld0ZvY3VzZWREYXRlLmFkZCgxLCAnbW9udGgnKTtcbiAgICAgICAgZGlkVHJhbnNpdGlvbk1vbnRoID0gdGhpcy5tYXliZVRyYW5zaXRpb25OZXh0TW9udGgobmV3Rm9jdXNlZERhdGUpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnPyc6XG4gICAgICAgIHRoaXMub3BlbktleWJvYXJkU2hvcnRjdXRzUGFuZWwob25LZXlib2FyZFNob3J0Y3V0c1BhbmVsQ2xvc2UpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnRXNjYXBlJzpcbiAgICAgICAgaWYgKHNob3dLZXlib2FyZFNob3J0Y3V0cykge1xuICAgICAgICAgIHRoaXMuY2xvc2VLZXlib2FyZFNob3J0Y3V0c1BhbmVsKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb25CbHVyKGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ1RhYic6XG4gICAgICAgIGlmIChlLnNoaWZ0S2V5KSB7XG4gICAgICAgICAgb25TaGlmdFRhYigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9uVGFiKGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrO1xuICAgIH0gLy8gSWYgdGhlcmUgd2FzIGEgbW9udGggdHJhbnNpdGlvbiwgZG8gbm90IHVwZGF0ZSB0aGUgZm9jdXNlZCBkYXRlIHVudGlsIHRoZSB0cmFuc2l0aW9uIGhhc1xuICAgIC8vIGNvbXBsZXRlZC4gT3RoZXJ3aXNlLCBhdHRlbXB0aW5nIHRvIGZvY3VzIG9uIGEgRE9NIG5vZGUgbWF5IGludGVycnVwdCB0aGUgQ1NTIGFuaW1hdGlvbi4gSWZcbiAgICAvLyBkaWRUcmFuc2l0aW9uTW9udGggaXMgdHJ1ZSwgdGhlIGZvY3VzZWREYXRlIGdldHMgdXBkYXRlZCBpbiAjdXBkYXRlU3RhdGVBZnRlck1vbnRoVHJhbnNpdGlvblxuXG5cbiAgICBpZiAoIWRpZFRyYW5zaXRpb25Nb250aCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGZvY3VzZWREYXRlOiBuZXdGb2N1c2VkRGF0ZVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5vblByZXZNb250aENsaWNrID0gZnVuY3Rpb24gb25QcmV2TW9udGhDbGljayhlKSB7XG4gICAgaWYgKGUpIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB0aGlzLm9uUHJldk1vbnRoVHJhbnNpdGlvbigpO1xuICB9O1xuXG4gIF9wcm90by5vblByZXZNb250aFRyYW5zaXRpb24gPSBmdW5jdGlvbiBvblByZXZNb250aFRyYW5zaXRpb24obmV4dEZvY3VzZWREYXRlKSB7XG4gICAgdmFyIF90aGlzJHByb3BzNCA9IHRoaXMucHJvcHMsXG4gICAgICAgIGRheVNpemUgPSBfdGhpcyRwcm9wczQuZGF5U2l6ZSxcbiAgICAgICAgaXNSVEwgPSBfdGhpcyRwcm9wczQuaXNSVEwsXG4gICAgICAgIG51bWJlck9mTW9udGhzID0gX3RoaXMkcHJvcHM0Lm51bWJlck9mTW9udGhzO1xuICAgIHZhciBfdGhpcyRzdGF0ZTMgPSB0aGlzLnN0YXRlLFxuICAgICAgICBjYWxlbmRhck1vbnRoV2lkdGggPSBfdGhpcyRzdGF0ZTMuY2FsZW5kYXJNb250aFdpZHRoLFxuICAgICAgICBtb250aFRpdGxlSGVpZ2h0ID0gX3RoaXMkc3RhdGUzLm1vbnRoVGl0bGVIZWlnaHQ7XG4gICAgdmFyIHRyYW5zbGF0aW9uVmFsdWU7XG5cbiAgICBpZiAodGhpcy5pc1ZlcnRpY2FsKCkpIHtcbiAgICAgIHZhciBjYWxlbmRhck1vbnRoV2Vla3NIZWlnaHQgPSB0aGlzLmNhbGVuZGFyTW9udGhXZWVrc1swXSAqIChkYXlTaXplIC0gMSk7XG4gICAgICB0cmFuc2xhdGlvblZhbHVlID0gbW9udGhUaXRsZUhlaWdodCArIGNhbGVuZGFyTW9udGhXZWVrc0hlaWdodCArIDE7XG4gICAgfSBlbHNlIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICB0cmFuc2xhdGlvblZhbHVlID0gY2FsZW5kYXJNb250aFdpZHRoO1xuXG4gICAgICBpZiAoaXNSVEwpIHtcbiAgICAgICAgdHJhbnNsYXRpb25WYWx1ZSA9IC0yICogY2FsZW5kYXJNb250aFdpZHRoO1xuICAgICAgfVxuXG4gICAgICB2YXIgdmlzaWJsZUNhbGVuZGFyV2Vla3MgPSB0aGlzLmNhbGVuZGFyTW9udGhXZWVrcy5zbGljZSgwLCBudW1iZXJPZk1vbnRocyk7XG5cbiAgICAgIHZhciBfY2FsZW5kYXJNb250aFdlZWtzSGVpZ2h0ID0gTWF0aC5tYXguYXBwbHkoTWF0aCwgWzBdLmNvbmNhdCgoMCwgX3RvQ29uc3VtYWJsZUFycmF5MltcImRlZmF1bHRcIl0pKHZpc2libGVDYWxlbmRhcldlZWtzKSkpICogKGRheVNpemUgLSAxKTtcblxuICAgICAgdmFyIG5ld01vbnRoSGVpZ2h0ID0gbW9udGhUaXRsZUhlaWdodCArIF9jYWxlbmRhck1vbnRoV2Vla3NIZWlnaHQgKyAxO1xuICAgICAgdGhpcy5hZGp1c3REYXlQaWNrZXJIZWlnaHQobmV3TW9udGhIZWlnaHQpO1xuICAgIH1cblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgbW9udGhUcmFuc2l0aW9uOiBQUkVWX1RSQU5TSVRJT04sXG4gICAgICB0cmFuc2xhdGlvblZhbHVlOiB0cmFuc2xhdGlvblZhbHVlLFxuICAgICAgZm9jdXNlZERhdGU6IG51bGwsXG4gICAgICBuZXh0Rm9jdXNlZERhdGU6IG5leHRGb2N1c2VkRGF0ZVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5vbk1vbnRoQ2hhbmdlID0gZnVuY3Rpb24gb25Nb250aENoYW5nZShjdXJyZW50TW9udGgpIHtcbiAgICB0aGlzLnNldENhbGVuZGFyTW9udGhXZWVrcyhjdXJyZW50TW9udGgpO1xuICAgIHRoaXMuY2FsY3VsYXRlQW5kU2V0RGF5UGlja2VySGVpZ2h0KCk7IC8vIFRyYW5zbGF0aW9uIHZhbHVlIGlzIGEgaGFjayB0byBmb3JjZSBhbiBpbnZpc2libGUgdHJhbnNpdGlvbiB0aGF0XG4gICAgLy8gcHJvcGVybHkgcmVyZW5kZXJzIHRoZSBDYWxlbmRhck1vbnRoR3JpZFxuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBtb250aFRyYW5zaXRpb246IE1PTlRIX1NFTEVDVElPTl9UUkFOU0lUSU9OLFxuICAgICAgdHJhbnNsYXRpb25WYWx1ZTogMC4wMDAwMSxcbiAgICAgIGZvY3VzZWREYXRlOiBudWxsLFxuICAgICAgbmV4dEZvY3VzZWREYXRlOiBjdXJyZW50TW9udGgsXG4gICAgICBjdXJyZW50TW9udGg6IGN1cnJlbnRNb250aFxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5vblllYXJDaGFuZ2UgPSBmdW5jdGlvbiBvblllYXJDaGFuZ2UoY3VycmVudE1vbnRoKSB7XG4gICAgdGhpcy5zZXRDYWxlbmRhck1vbnRoV2Vla3MoY3VycmVudE1vbnRoKTtcbiAgICB0aGlzLmNhbGN1bGF0ZUFuZFNldERheVBpY2tlckhlaWdodCgpOyAvLyBUcmFuc2xhdGlvbiB2YWx1ZSBpcyBhIGhhY2sgdG8gZm9yY2UgYW4gaW52aXNpYmxlIHRyYW5zaXRpb24gdGhhdFxuICAgIC8vIHByb3Blcmx5IHJlcmVuZGVycyB0aGUgQ2FsZW5kYXJNb250aEdyaWRcblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgbW9udGhUcmFuc2l0aW9uOiBZRUFSX1NFTEVDVElPTl9UUkFOU0lUSU9OLFxuICAgICAgdHJhbnNsYXRpb25WYWx1ZTogMC4wMDAxLFxuICAgICAgZm9jdXNlZERhdGU6IG51bGwsXG4gICAgICBuZXh0Rm9jdXNlZERhdGU6IGN1cnJlbnRNb250aCxcbiAgICAgIGN1cnJlbnRNb250aDogY3VycmVudE1vbnRoXG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLm9uTmV4dE1vbnRoQ2xpY2sgPSBmdW5jdGlvbiBvbk5leHRNb250aENsaWNrKGUpIHtcbiAgICBpZiAoZSkgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMub25OZXh0TW9udGhUcmFuc2l0aW9uKCk7XG4gIH07XG5cbiAgX3Byb3RvLm9uTmV4dE1vbnRoVHJhbnNpdGlvbiA9IGZ1bmN0aW9uIG9uTmV4dE1vbnRoVHJhbnNpdGlvbihuZXh0Rm9jdXNlZERhdGUpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHM1ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgaXNSVEwgPSBfdGhpcyRwcm9wczUuaXNSVEwsXG4gICAgICAgIG51bWJlck9mTW9udGhzID0gX3RoaXMkcHJvcHM1Lm51bWJlck9mTW9udGhzLFxuICAgICAgICBkYXlTaXplID0gX3RoaXMkcHJvcHM1LmRheVNpemU7XG4gICAgdmFyIF90aGlzJHN0YXRlNCA9IHRoaXMuc3RhdGUsXG4gICAgICAgIGNhbGVuZGFyTW9udGhXaWR0aCA9IF90aGlzJHN0YXRlNC5jYWxlbmRhck1vbnRoV2lkdGgsXG4gICAgICAgIG1vbnRoVGl0bGVIZWlnaHQgPSBfdGhpcyRzdGF0ZTQubW9udGhUaXRsZUhlaWdodDtcbiAgICB2YXIgdHJhbnNsYXRpb25WYWx1ZTtcblxuICAgIGlmICh0aGlzLmlzVmVydGljYWwoKSkge1xuICAgICAgdmFyIGZpcnN0VmlzaWJsZU1vbnRoV2Vla3MgPSB0aGlzLmNhbGVuZGFyTW9udGhXZWVrc1sxXTtcbiAgICAgIHZhciBjYWxlbmRhck1vbnRoV2Vla3NIZWlnaHQgPSBmaXJzdFZpc2libGVNb250aFdlZWtzICogKGRheVNpemUgLSAxKTtcbiAgICAgIHRyYW5zbGF0aW9uVmFsdWUgPSAtKG1vbnRoVGl0bGVIZWlnaHQgKyBjYWxlbmRhck1vbnRoV2Vla3NIZWlnaHQgKyAxKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuICAgICAgdHJhbnNsYXRpb25WYWx1ZSA9IC1jYWxlbmRhck1vbnRoV2lkdGg7XG5cbiAgICAgIGlmIChpc1JUTCkge1xuICAgICAgICB0cmFuc2xhdGlvblZhbHVlID0gMDtcbiAgICAgIH1cblxuICAgICAgdmFyIHZpc2libGVDYWxlbmRhcldlZWtzID0gdGhpcy5jYWxlbmRhck1vbnRoV2Vla3Muc2xpY2UoMiwgbnVtYmVyT2ZNb250aHMgKyAyKTtcblxuICAgICAgdmFyIF9jYWxlbmRhck1vbnRoV2Vla3NIZWlnaHQyID0gTWF0aC5tYXguYXBwbHkoTWF0aCwgWzBdLmNvbmNhdCgoMCwgX3RvQ29uc3VtYWJsZUFycmF5MltcImRlZmF1bHRcIl0pKHZpc2libGVDYWxlbmRhcldlZWtzKSkpICogKGRheVNpemUgLSAxKTtcblxuICAgICAgdmFyIG5ld01vbnRoSGVpZ2h0ID0gbW9udGhUaXRsZUhlaWdodCArIF9jYWxlbmRhck1vbnRoV2Vla3NIZWlnaHQyICsgMTtcbiAgICAgIHRoaXMuYWRqdXN0RGF5UGlja2VySGVpZ2h0KG5ld01vbnRoSGVpZ2h0KTtcbiAgICB9XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIG1vbnRoVHJhbnNpdGlvbjogTkVYVF9UUkFOU0lUSU9OLFxuICAgICAgdHJhbnNsYXRpb25WYWx1ZTogdHJhbnNsYXRpb25WYWx1ZSxcbiAgICAgIGZvY3VzZWREYXRlOiBudWxsLFxuICAgICAgbmV4dEZvY3VzZWREYXRlOiBuZXh0Rm9jdXNlZERhdGVcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0Rmlyc3REYXlPZldlZWsgPSBmdW5jdGlvbiBnZXRGaXJzdERheU9mV2VlaygpIHtcbiAgICB2YXIgZmlyc3REYXlPZldlZWsgPSB0aGlzLnByb3BzLmZpcnN0RGF5T2ZXZWVrO1xuXG4gICAgaWYgKGZpcnN0RGF5T2ZXZWVrID09IG51bGwpIHtcbiAgICAgIHJldHVybiBfbW9tZW50W1wiZGVmYXVsdFwiXS5sb2NhbGVEYXRhKCkuZmlyc3REYXlPZldlZWsoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmlyc3REYXlPZldlZWs7XG4gIH07XG5cbiAgX3Byb3RvLmdldFdlZWtIZWFkZXJzID0gZnVuY3Rpb24gZ2V0V2Vla0hlYWRlcnMoKSB7XG4gICAgdmFyIHdlZWtEYXlGb3JtYXQgPSB0aGlzLnByb3BzLndlZWtEYXlGb3JtYXQ7XG4gICAgdmFyIGN1cnJlbnRNb250aCA9IHRoaXMuc3RhdGUuY3VycmVudE1vbnRoO1xuICAgIHZhciBmaXJzdERheU9mV2VlayA9IHRoaXMuZ2V0Rmlyc3REYXlPZldlZWsoKTtcbiAgICB2YXIgd2Vla0hlYWRlcnMgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNzsgaSArPSAxKSB7XG4gICAgICB3ZWVrSGVhZGVycy5wdXNoKGN1cnJlbnRNb250aC5jbG9uZSgpLmRheSgoaSArIGZpcnN0RGF5T2ZXZWVrKSAlIDcpLmZvcm1hdCh3ZWVrRGF5Rm9ybWF0KSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHdlZWtIZWFkZXJzO1xuICB9O1xuXG4gIF9wcm90by5nZXRGaXJzdFZpc2libGVJbmRleCA9IGZ1bmN0aW9uIGdldEZpcnN0VmlzaWJsZUluZGV4KCkge1xuICAgIHZhciBvcmllbnRhdGlvbiA9IHRoaXMucHJvcHMub3JpZW50YXRpb247XG4gICAgdmFyIG1vbnRoVHJhbnNpdGlvbiA9IHRoaXMuc3RhdGUubW9udGhUcmFuc2l0aW9uO1xuICAgIGlmIChvcmllbnRhdGlvbiA9PT0gX2NvbnN0YW50cy5WRVJUSUNBTF9TQ1JPTExBQkxFKSByZXR1cm4gMDtcbiAgICB2YXIgZmlyc3RWaXNpYmxlTW9udGhJbmRleCA9IDE7XG5cbiAgICBpZiAobW9udGhUcmFuc2l0aW9uID09PSBQUkVWX1RSQU5TSVRJT04pIHtcbiAgICAgIGZpcnN0VmlzaWJsZU1vbnRoSW5kZXggLT0gMTtcbiAgICB9IGVsc2UgaWYgKG1vbnRoVHJhbnNpdGlvbiA9PT0gTkVYVF9UUkFOU0lUSU9OKSB7XG4gICAgICBmaXJzdFZpc2libGVNb250aEluZGV4ICs9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZpcnN0VmlzaWJsZU1vbnRoSW5kZXg7XG4gIH07XG5cbiAgX3Byb3RvLmdldEZvY3VzZWREYXkgPSBmdW5jdGlvbiBnZXRGb2N1c2VkRGF5KG5ld01vbnRoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzNiA9IHRoaXMucHJvcHMsXG4gICAgICAgIGdldEZpcnN0Rm9jdXNhYmxlRGF5ID0gX3RoaXMkcHJvcHM2LmdldEZpcnN0Rm9jdXNhYmxlRGF5LFxuICAgICAgICBudW1iZXJPZk1vbnRocyA9IF90aGlzJHByb3BzNi5udW1iZXJPZk1vbnRocztcbiAgICB2YXIgZm9jdXNlZERhdGU7XG5cbiAgICBpZiAoZ2V0Rmlyc3RGb2N1c2FibGVEYXkpIHtcbiAgICAgIGZvY3VzZWREYXRlID0gZ2V0Rmlyc3RGb2N1c2FibGVEYXkobmV3TW9udGgpO1xuICAgIH1cblxuICAgIGlmIChuZXdNb250aCAmJiAoIWZvY3VzZWREYXRlIHx8ICEoMCwgX2lzRGF5VmlzaWJsZVtcImRlZmF1bHRcIl0pKGZvY3VzZWREYXRlLCBuZXdNb250aCwgbnVtYmVyT2ZNb250aHMpKSkge1xuICAgICAgZm9jdXNlZERhdGUgPSBuZXdNb250aC5jbG9uZSgpLnN0YXJ0T2YoJ21vbnRoJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZvY3VzZWREYXRlO1xuICB9O1xuXG4gIF9wcm90by5zZXRNb250aFRpdGxlSGVpZ2h0ID0gZnVuY3Rpb24gc2V0TW9udGhUaXRsZUhlaWdodChtb250aFRpdGxlSGVpZ2h0KSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIG1vbnRoVGl0bGVIZWlnaHQ6IG1vbnRoVGl0bGVIZWlnaHRcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczMuY2FsY3VsYXRlQW5kU2V0RGF5UGlja2VySGVpZ2h0KCk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLnNldENhbGVuZGFyTW9udGhXZWVrcyA9IGZ1bmN0aW9uIHNldENhbGVuZGFyTW9udGhXZWVrcyhjdXJyZW50TW9udGgpIHtcbiAgICB2YXIgbnVtYmVyT2ZNb250aHMgPSB0aGlzLnByb3BzLm51bWJlck9mTW9udGhzO1xuICAgIHRoaXMuY2FsZW5kYXJNb250aFdlZWtzID0gW107XG4gICAgdmFyIG1vbnRoID0gY3VycmVudE1vbnRoLmNsb25lKCkuc3VidHJhY3QoMSwgJ21vbnRocycpO1xuICAgIHZhciBmaXJzdERheU9mV2VlayA9IHRoaXMuZ2V0Rmlyc3REYXlPZldlZWsoKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtYmVyT2ZNb250aHMgKyAyOyBpICs9IDEpIHtcbiAgICAgIHZhciBudW1iZXJPZldlZWtzID0gKDAsIF9nZXROdW1iZXJPZkNhbGVuZGFyTW9udGhXZWVrc1tcImRlZmF1bHRcIl0pKG1vbnRoLCBmaXJzdERheU9mV2Vlayk7XG4gICAgICB0aGlzLmNhbGVuZGFyTW9udGhXZWVrcy5wdXNoKG51bWJlck9mV2Vla3MpO1xuICAgICAgbW9udGggPSBtb250aC5hZGQoMSwgJ21vbnRocycpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uc2V0Q29udGFpbmVyUmVmID0gZnVuY3Rpb24gc2V0Q29udGFpbmVyUmVmKHJlZikge1xuICAgIHRoaXMuY29udGFpbmVyID0gcmVmO1xuICB9O1xuXG4gIF9wcm90by5zZXRDYWxlbmRhckluZm9SZWYgPSBmdW5jdGlvbiBzZXRDYWxlbmRhckluZm9SZWYocmVmKSB7XG4gICAgdGhpcy5jYWxlbmRhckluZm8gPSByZWY7XG4gIH07XG5cbiAgX3Byb3RvLnNldFRyYW5zaXRpb25Db250YWluZXJSZWYgPSBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uQ29udGFpbmVyUmVmKHJlZikge1xuICAgIHRoaXMudHJhbnNpdGlvbkNvbnRhaW5lciA9IHJlZjtcbiAgfTtcblxuICBfcHJvdG8uZ2V0TmV4dFNjcm9sbGFibGVNb250aHMgPSBmdW5jdGlvbiBnZXROZXh0U2Nyb2xsYWJsZU1vbnRocyhlKSB7XG4gICAgdmFyIG9uR2V0TmV4dFNjcm9sbGFibGVNb250aHMgPSB0aGlzLnByb3BzLm9uR2V0TmV4dFNjcm9sbGFibGVNb250aHM7XG4gICAgaWYgKGUpIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAob25HZXROZXh0U2Nyb2xsYWJsZU1vbnRocykgb25HZXROZXh0U2Nyb2xsYWJsZU1vbnRocyhlKTtcbiAgICB0aGlzLnNldFN0YXRlKGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgdmFyIHNjcm9sbGFibGVNb250aE11bHRpcGxlID0gX3JlZjIuc2Nyb2xsYWJsZU1vbnRoTXVsdGlwbGU7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzY3JvbGxhYmxlTW9udGhNdWx0aXBsZTogc2Nyb2xsYWJsZU1vbnRoTXVsdGlwbGUgKyAxXG4gICAgICB9O1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5nZXRQcmV2U2Nyb2xsYWJsZU1vbnRocyA9IGZ1bmN0aW9uIGdldFByZXZTY3JvbGxhYmxlTW9udGhzKGUpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHM3ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgbnVtYmVyT2ZNb250aHMgPSBfdGhpcyRwcm9wczcubnVtYmVyT2ZNb250aHMsXG4gICAgICAgIG9uR2V0UHJldlNjcm9sbGFibGVNb250aHMgPSBfdGhpcyRwcm9wczcub25HZXRQcmV2U2Nyb2xsYWJsZU1vbnRocztcbiAgICBpZiAoZSkgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmIChvbkdldFByZXZTY3JvbGxhYmxlTW9udGhzKSBvbkdldFByZXZTY3JvbGxhYmxlTW9udGhzKGUpO1xuICAgIHRoaXMuc2V0U3RhdGUoZnVuY3Rpb24gKF9yZWYzKSB7XG4gICAgICB2YXIgY3VycmVudE1vbnRoID0gX3JlZjMuY3VycmVudE1vbnRoLFxuICAgICAgICAgIHNjcm9sbGFibGVNb250aE11bHRpcGxlID0gX3JlZjMuc2Nyb2xsYWJsZU1vbnRoTXVsdGlwbGU7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjdXJyZW50TW9udGg6IGN1cnJlbnRNb250aC5jbG9uZSgpLnN1YnRyYWN0KG51bWJlck9mTW9udGhzLCAnbW9udGgnKSxcbiAgICAgICAgc2Nyb2xsYWJsZU1vbnRoTXVsdGlwbGU6IHNjcm9sbGFibGVNb250aE11bHRpcGxlICsgMVxuICAgICAgfTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ubWF5YmVUcmFuc2l0aW9uTmV4dE1vbnRoID0gZnVuY3Rpb24gbWF5YmVUcmFuc2l0aW9uTmV4dE1vbnRoKG5ld0ZvY3VzZWREYXRlKSB7XG4gICAgdmFyIG51bWJlck9mTW9udGhzID0gdGhpcy5wcm9wcy5udW1iZXJPZk1vbnRocztcbiAgICB2YXIgX3RoaXMkc3RhdGU1ID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgY3VycmVudE1vbnRoID0gX3RoaXMkc3RhdGU1LmN1cnJlbnRNb250aCxcbiAgICAgICAgZm9jdXNlZERhdGUgPSBfdGhpcyRzdGF0ZTUuZm9jdXNlZERhdGU7XG4gICAgdmFyIG5ld0ZvY3VzZWREYXRlTW9udGggPSBuZXdGb2N1c2VkRGF0ZS5tb250aCgpO1xuICAgIHZhciBmb2N1c2VkRGF0ZU1vbnRoID0gZm9jdXNlZERhdGUubW9udGgoKTtcbiAgICB2YXIgaXNOZXdGb2N1c2VkRGF0ZVZpc2libGUgPSAoMCwgX2lzRGF5VmlzaWJsZVtcImRlZmF1bHRcIl0pKG5ld0ZvY3VzZWREYXRlLCBjdXJyZW50TW9udGgsIG51bWJlck9mTW9udGhzKTtcblxuICAgIGlmIChuZXdGb2N1c2VkRGF0ZU1vbnRoICE9PSBmb2N1c2VkRGF0ZU1vbnRoICYmICFpc05ld0ZvY3VzZWREYXRlVmlzaWJsZSkge1xuICAgICAgdGhpcy5vbk5leHRNb250aFRyYW5zaXRpb24obmV3Rm9jdXNlZERhdGUpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIF9wcm90by5tYXliZVRyYW5zaXRpb25QcmV2TW9udGggPSBmdW5jdGlvbiBtYXliZVRyYW5zaXRpb25QcmV2TW9udGgobmV3Rm9jdXNlZERhdGUpIHtcbiAgICB2YXIgbnVtYmVyT2ZNb250aHMgPSB0aGlzLnByb3BzLm51bWJlck9mTW9udGhzO1xuICAgIHZhciBfdGhpcyRzdGF0ZTYgPSB0aGlzLnN0YXRlLFxuICAgICAgICBjdXJyZW50TW9udGggPSBfdGhpcyRzdGF0ZTYuY3VycmVudE1vbnRoLFxuICAgICAgICBmb2N1c2VkRGF0ZSA9IF90aGlzJHN0YXRlNi5mb2N1c2VkRGF0ZTtcbiAgICB2YXIgbmV3Rm9jdXNlZERhdGVNb250aCA9IG5ld0ZvY3VzZWREYXRlLm1vbnRoKCk7XG4gICAgdmFyIGZvY3VzZWREYXRlTW9udGggPSBmb2N1c2VkRGF0ZS5tb250aCgpO1xuICAgIHZhciBpc05ld0ZvY3VzZWREYXRlVmlzaWJsZSA9ICgwLCBfaXNEYXlWaXNpYmxlW1wiZGVmYXVsdFwiXSkobmV3Rm9jdXNlZERhdGUsIGN1cnJlbnRNb250aCwgbnVtYmVyT2ZNb250aHMpO1xuXG4gICAgaWYgKG5ld0ZvY3VzZWREYXRlTW9udGggIT09IGZvY3VzZWREYXRlTW9udGggJiYgIWlzTmV3Rm9jdXNlZERhdGVWaXNpYmxlKSB7XG4gICAgICB0aGlzLm9uUHJldk1vbnRoVHJhbnNpdGlvbihuZXdGb2N1c2VkRGF0ZSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgX3Byb3RvLmlzSG9yaXpvbnRhbCA9IGZ1bmN0aW9uIGlzSG9yaXpvbnRhbCgpIHtcbiAgICB2YXIgb3JpZW50YXRpb24gPSB0aGlzLnByb3BzLm9yaWVudGF0aW9uO1xuICAgIHJldHVybiBvcmllbnRhdGlvbiA9PT0gX2NvbnN0YW50cy5IT1JJWk9OVEFMX09SSUVOVEFUSU9OO1xuICB9O1xuXG4gIF9wcm90by5pc1ZlcnRpY2FsID0gZnVuY3Rpb24gaXNWZXJ0aWNhbCgpIHtcbiAgICB2YXIgb3JpZW50YXRpb24gPSB0aGlzLnByb3BzLm9yaWVudGF0aW9uO1xuICAgIHJldHVybiBvcmllbnRhdGlvbiA9PT0gX2NvbnN0YW50cy5WRVJUSUNBTF9PUklFTlRBVElPTiB8fCBvcmllbnRhdGlvbiA9PT0gX2NvbnN0YW50cy5WRVJUSUNBTF9TQ1JPTExBQkxFO1xuICB9O1xuXG4gIF9wcm90by51cGRhdGVTdGF0ZUFmdGVyTW9udGhUcmFuc2l0aW9uID0gZnVuY3Rpb24gdXBkYXRlU3RhdGVBZnRlck1vbnRoVHJhbnNpdGlvbigpIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIHZhciBfdGhpcyRwcm9wczggPSB0aGlzLnByb3BzLFxuICAgICAgICBvblByZXZNb250aENsaWNrID0gX3RoaXMkcHJvcHM4Lm9uUHJldk1vbnRoQ2xpY2ssXG4gICAgICAgIG9uTmV4dE1vbnRoQ2xpY2sgPSBfdGhpcyRwcm9wczgub25OZXh0TW9udGhDbGljayxcbiAgICAgICAgbnVtYmVyT2ZNb250aHMgPSBfdGhpcyRwcm9wczgubnVtYmVyT2ZNb250aHMsXG4gICAgICAgIG9uTW9udGhDaGFuZ2UgPSBfdGhpcyRwcm9wczgub25Nb250aENoYW5nZSxcbiAgICAgICAgb25ZZWFyQ2hhbmdlID0gX3RoaXMkcHJvcHM4Lm9uWWVhckNoYW5nZSxcbiAgICAgICAgaXNSVEwgPSBfdGhpcyRwcm9wczguaXNSVEw7XG4gICAgdmFyIF90aGlzJHN0YXRlNyA9IHRoaXMuc3RhdGUsXG4gICAgICAgIGN1cnJlbnRNb250aCA9IF90aGlzJHN0YXRlNy5jdXJyZW50TW9udGgsXG4gICAgICAgIG1vbnRoVHJhbnNpdGlvbiA9IF90aGlzJHN0YXRlNy5tb250aFRyYW5zaXRpb24sXG4gICAgICAgIGZvY3VzZWREYXRlID0gX3RoaXMkc3RhdGU3LmZvY3VzZWREYXRlLFxuICAgICAgICBuZXh0Rm9jdXNlZERhdGUgPSBfdGhpcyRzdGF0ZTcubmV4dEZvY3VzZWREYXRlLFxuICAgICAgICB3aXRoTW91c2VJbnRlcmFjdGlvbnMgPSBfdGhpcyRzdGF0ZTcud2l0aE1vdXNlSW50ZXJhY3Rpb25zLFxuICAgICAgICBjYWxlbmRhck1vbnRoV2lkdGggPSBfdGhpcyRzdGF0ZTcuY2FsZW5kYXJNb250aFdpZHRoO1xuICAgIGlmICghbW9udGhUcmFuc2l0aW9uKSByZXR1cm47XG4gICAgdmFyIG5ld01vbnRoID0gY3VycmVudE1vbnRoLmNsb25lKCk7XG4gICAgdmFyIGZpcnN0RGF5T2ZXZWVrID0gdGhpcy5nZXRGaXJzdERheU9mV2VlaygpO1xuXG4gICAgaWYgKG1vbnRoVHJhbnNpdGlvbiA9PT0gUFJFVl9UUkFOU0lUSU9OKSB7XG4gICAgICBuZXdNb250aC5zdWJ0cmFjdCgxLCAnbW9udGgnKTtcbiAgICAgIGlmIChvblByZXZNb250aENsaWNrKSBvblByZXZNb250aENsaWNrKG5ld01vbnRoKTtcbiAgICAgIHZhciBuZXdJbnZpc2libGVNb250aCA9IG5ld01vbnRoLmNsb25lKCkuc3VidHJhY3QoMSwgJ21vbnRoJyk7XG4gICAgICB2YXIgbnVtYmVyT2ZXZWVrcyA9ICgwLCBfZ2V0TnVtYmVyT2ZDYWxlbmRhck1vbnRoV2Vla3NbXCJkZWZhdWx0XCJdKShuZXdJbnZpc2libGVNb250aCwgZmlyc3REYXlPZldlZWspO1xuICAgICAgdGhpcy5jYWxlbmRhck1vbnRoV2Vla3MgPSBbbnVtYmVyT2ZXZWVrc10uY29uY2F0KCgwLCBfdG9Db25zdW1hYmxlQXJyYXkyW1wiZGVmYXVsdFwiXSkodGhpcy5jYWxlbmRhck1vbnRoV2Vla3Muc2xpY2UoMCwgLTEpKSk7XG4gICAgfSBlbHNlIGlmIChtb250aFRyYW5zaXRpb24gPT09IE5FWFRfVFJBTlNJVElPTikge1xuICAgICAgbmV3TW9udGguYWRkKDEsICdtb250aCcpO1xuICAgICAgaWYgKG9uTmV4dE1vbnRoQ2xpY2spIG9uTmV4dE1vbnRoQ2xpY2sobmV3TW9udGgpO1xuXG4gICAgICB2YXIgX25ld0ludmlzaWJsZU1vbnRoID0gbmV3TW9udGguY2xvbmUoKS5hZGQobnVtYmVyT2ZNb250aHMsICdtb250aCcpO1xuXG4gICAgICB2YXIgX251bWJlck9mV2Vla3MgPSAoMCwgX2dldE51bWJlck9mQ2FsZW5kYXJNb250aFdlZWtzW1wiZGVmYXVsdFwiXSkoX25ld0ludmlzaWJsZU1vbnRoLCBmaXJzdERheU9mV2Vlayk7XG5cbiAgICAgIHRoaXMuY2FsZW5kYXJNb250aFdlZWtzID0gW10uY29uY2F0KCgwLCBfdG9Db25zdW1hYmxlQXJyYXkyW1wiZGVmYXVsdFwiXSkodGhpcy5jYWxlbmRhck1vbnRoV2Vla3Muc2xpY2UoMSkpLCBbX251bWJlck9mV2Vla3NdKTtcbiAgICB9IGVsc2UgaWYgKG1vbnRoVHJhbnNpdGlvbiA9PT0gTU9OVEhfU0VMRUNUSU9OX1RSQU5TSVRJT04pIHtcbiAgICAgIGlmIChvbk1vbnRoQ2hhbmdlKSBvbk1vbnRoQ2hhbmdlKG5ld01vbnRoKTtcbiAgICB9IGVsc2UgaWYgKG1vbnRoVHJhbnNpdGlvbiA9PT0gWUVBUl9TRUxFQ1RJT05fVFJBTlNJVElPTikge1xuICAgICAgaWYgKG9uWWVhckNoYW5nZSkgb25ZZWFyQ2hhbmdlKG5ld01vbnRoKTtcbiAgICB9XG5cbiAgICB2YXIgbmV3Rm9jdXNlZERhdGUgPSBudWxsO1xuXG4gICAgaWYgKG5leHRGb2N1c2VkRGF0ZSkge1xuICAgICAgbmV3Rm9jdXNlZERhdGUgPSBuZXh0Rm9jdXNlZERhdGU7XG4gICAgfSBlbHNlIGlmICghZm9jdXNlZERhdGUgJiYgIXdpdGhNb3VzZUludGVyYWN0aW9ucykge1xuICAgICAgbmV3Rm9jdXNlZERhdGUgPSB0aGlzLmdldEZvY3VzZWREYXkobmV3TW9udGgpO1xuICAgIH1cblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgY3VycmVudE1vbnRoOiBuZXdNb250aCxcbiAgICAgIG1vbnRoVHJhbnNpdGlvbjogbnVsbCxcbiAgICAgIHRyYW5zbGF0aW9uVmFsdWU6IGlzUlRMICYmIHRoaXMuaXNIb3Jpem9udGFsKCkgPyAtY2FsZW5kYXJNb250aFdpZHRoIDogMCxcbiAgICAgIG5leHRGb2N1c2VkRGF0ZTogbnVsbCxcbiAgICAgIGZvY3VzZWREYXRlOiBuZXdGb2N1c2VkRGF0ZVxuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHdlIGRvbid0IHdhbnQgdG8gZm9jdXMgb24gdGhlIHJlbGV2YW50IGNhbGVuZGFyIGRheSBhZnRlciBhIG1vbnRoIHRyYW5zaXRpb25cbiAgICAgIC8vIGlmIHRoZSB1c2VyIGlzIG5hdmlnYXRpbmcgYXJvdW5kIHVzaW5nIGEgbW91c2VcbiAgICAgIGlmICh3aXRoTW91c2VJbnRlcmFjdGlvbnMpIHtcbiAgICAgICAgdmFyIGFjdGl2ZUVsZW1lbnQgPSAoMCwgX2dldEFjdGl2ZUVsZW1lbnRbXCJkZWZhdWx0XCJdKSgpO1xuXG4gICAgICAgIGlmIChhY3RpdmVFbGVtZW50ICYmIGFjdGl2ZUVsZW1lbnQgIT09IGRvY3VtZW50LmJvZHkgJiYgX3RoaXM0LmNvbnRhaW5lci5jb250YWlucyhhY3RpdmVFbGVtZW50KSAmJiBhY3RpdmVFbGVtZW50LmJsdXIpIHtcbiAgICAgICAgICBhY3RpdmVFbGVtZW50LmJsdXIoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5hZGp1c3REYXlQaWNrZXJIZWlnaHQgPSBmdW5jdGlvbiBhZGp1c3REYXlQaWNrZXJIZWlnaHQobmV3TW9udGhIZWlnaHQpIHtcbiAgICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICAgIHZhciBtb250aEhlaWdodCA9IG5ld01vbnRoSGVpZ2h0ICsgTU9OVEhfUEFERElORztcblxuICAgIGlmIChtb250aEhlaWdodCAhPT0gdGhpcy5jYWxlbmRhck1vbnRoR3JpZEhlaWdodCkge1xuICAgICAgdGhpcy50cmFuc2l0aW9uQ29udGFpbmVyLnN0eWxlLmhlaWdodCA9IFwiXCIuY29uY2F0KG1vbnRoSGVpZ2h0LCBcInB4XCIpO1xuXG4gICAgICBpZiAoIXRoaXMuY2FsZW5kYXJNb250aEdyaWRIZWlnaHQpIHtcbiAgICAgICAgdGhpcy5zZXRDYWxlbmRhck1vbnRoR3JpZEhlaWdodFRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczUuc2V0U3RhdGUoe1xuICAgICAgICAgICAgaGFzU2V0SGVpZ2h0OiB0cnVlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sIDApO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNhbGVuZGFyTW9udGhHcmlkSGVpZ2h0ID0gbW9udGhIZWlnaHQ7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5jYWxjdWxhdGVBbmRTZXREYXlQaWNrZXJIZWlnaHQgPSBmdW5jdGlvbiBjYWxjdWxhdGVBbmRTZXREYXlQaWNrZXJIZWlnaHQoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzOSA9IHRoaXMucHJvcHMsXG4gICAgICAgIGRheVNpemUgPSBfdGhpcyRwcm9wczkuZGF5U2l6ZSxcbiAgICAgICAgbnVtYmVyT2ZNb250aHMgPSBfdGhpcyRwcm9wczkubnVtYmVyT2ZNb250aHM7XG4gICAgdmFyIG1vbnRoVGl0bGVIZWlnaHQgPSB0aGlzLnN0YXRlLm1vbnRoVGl0bGVIZWlnaHQ7XG4gICAgdmFyIHZpc2libGVDYWxlbmRhcldlZWtzID0gdGhpcy5jYWxlbmRhck1vbnRoV2Vla3Muc2xpY2UoMSwgbnVtYmVyT2ZNb250aHMgKyAxKTtcbiAgICB2YXIgY2FsZW5kYXJNb250aFdlZWtzSGVpZ2h0ID0gTWF0aC5tYXguYXBwbHkoTWF0aCwgWzBdLmNvbmNhdCgoMCwgX3RvQ29uc3VtYWJsZUFycmF5MltcImRlZmF1bHRcIl0pKHZpc2libGVDYWxlbmRhcldlZWtzKSkpICogKGRheVNpemUgLSAxKTtcbiAgICB2YXIgbmV3TW9udGhIZWlnaHQgPSBtb250aFRpdGxlSGVpZ2h0ICsgY2FsZW5kYXJNb250aFdlZWtzSGVpZ2h0ICsgMTtcblxuICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICB0aGlzLmFkanVzdERheVBpY2tlckhlaWdodChuZXdNb250aEhlaWdodCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5vcGVuS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCA9IGZ1bmN0aW9uIG9wZW5LZXlib2FyZFNob3J0Y3V0c1BhbmVsKG9uQ2xvc2VDYWxsQmFjaykge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgc2hvd0tleWJvYXJkU2hvcnRjdXRzOiB0cnVlLFxuICAgICAgb25LZXlib2FyZFNob3J0Y3V0c1BhbmVsQ2xvc2U6IG9uQ2xvc2VDYWxsQmFja1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5jbG9zZUtleWJvYXJkU2hvcnRjdXRzUGFuZWwgPSBmdW5jdGlvbiBjbG9zZUtleWJvYXJkU2hvcnRjdXRzUGFuZWwoKSB7XG4gICAgdmFyIG9uS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbENsb3NlID0gdGhpcy5zdGF0ZS5vbktleWJvYXJkU2hvcnRjdXRzUGFuZWxDbG9zZTtcblxuICAgIGlmIChvbktleWJvYXJkU2hvcnRjdXRzUGFuZWxDbG9zZSkge1xuICAgICAgb25LZXlib2FyZFNob3J0Y3V0c1BhbmVsQ2xvc2UoKTtcbiAgICB9XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIG9uS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbENsb3NlOiBudWxsLFxuICAgICAgc2hvd0tleWJvYXJkU2hvcnRjdXRzOiBmYWxzZVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXJOYXZpZ2F0aW9uID0gZnVuY3Rpb24gcmVuZGVyTmF2aWdhdGlvbihuYXZEaXJlY3Rpb24pIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMxMCA9IHRoaXMucHJvcHMsXG4gICAgICAgIGRheVBpY2tlck5hdmlnYXRpb25JbmxpbmVTdHlsZXMgPSBfdGhpcyRwcm9wczEwLmRheVBpY2tlck5hdmlnYXRpb25JbmxpbmVTdHlsZXMsXG4gICAgICAgIGRpc2FibGVQcmV2ID0gX3RoaXMkcHJvcHMxMC5kaXNhYmxlUHJldixcbiAgICAgICAgZGlzYWJsZU5leHQgPSBfdGhpcyRwcm9wczEwLmRpc2FibGVOZXh0LFxuICAgICAgICBuYXZQb3NpdGlvbiA9IF90aGlzJHByb3BzMTAubmF2UG9zaXRpb24sXG4gICAgICAgIG5hdlByZXYgPSBfdGhpcyRwcm9wczEwLm5hdlByZXYsXG4gICAgICAgIG5hdk5leHQgPSBfdGhpcyRwcm9wczEwLm5hdk5leHQsXG4gICAgICAgIG5vTmF2QnV0dG9ucyA9IF90aGlzJHByb3BzMTAubm9OYXZCdXR0b25zLFxuICAgICAgICBub05hdk5leHRCdXR0b24gPSBfdGhpcyRwcm9wczEwLm5vTmF2TmV4dEJ1dHRvbixcbiAgICAgICAgbm9OYXZQcmV2QnV0dG9uID0gX3RoaXMkcHJvcHMxMC5ub05hdlByZXZCdXR0b24sXG4gICAgICAgIG9yaWVudGF0aW9uID0gX3RoaXMkcHJvcHMxMC5vcmllbnRhdGlvbixcbiAgICAgICAgcGhyYXNlcyA9IF90aGlzJHByb3BzMTAucGhyYXNlcyxcbiAgICAgICAgcmVuZGVyTmF2UHJldkJ1dHRvbiA9IF90aGlzJHByb3BzMTAucmVuZGVyTmF2UHJldkJ1dHRvbixcbiAgICAgICAgcmVuZGVyTmF2TmV4dEJ1dHRvbiA9IF90aGlzJHByb3BzMTAucmVuZGVyTmF2TmV4dEJ1dHRvbixcbiAgICAgICAgaXNSVEwgPSBfdGhpcyRwcm9wczEwLmlzUlRMO1xuXG4gICAgaWYgKG5vTmF2QnV0dG9ucykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIG9uUHJldk1vbnRoQ2xpY2sgPSBvcmllbnRhdGlvbiA9PT0gX2NvbnN0YW50cy5WRVJUSUNBTF9TQ1JPTExBQkxFID8gdGhpcy5nZXRQcmV2U2Nyb2xsYWJsZU1vbnRocyA6IHRoaXMub25QcmV2TW9udGhDbGljaztcbiAgICB2YXIgb25OZXh0TW9udGhDbGljayA9IG9yaWVudGF0aW9uID09PSBfY29uc3RhbnRzLlZFUlRJQ0FMX1NDUk9MTEFCTEUgPyB0aGlzLmdldE5leHRTY3JvbGxhYmxlTW9udGhzIDogdGhpcy5vbk5leHRNb250aENsaWNrO1xuICAgIHJldHVybiBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoX0RheVBpY2tlck5hdmlnYXRpb25bXCJkZWZhdWx0XCJdLCB7XG4gICAgICBkaXNhYmxlUHJldjogZGlzYWJsZVByZXYsXG4gICAgICBkaXNhYmxlTmV4dDogZGlzYWJsZU5leHQsXG4gICAgICBpbmxpbmVTdHlsZXM6IGRheVBpY2tlck5hdmlnYXRpb25JbmxpbmVTdHlsZXMsXG4gICAgICBvblByZXZNb250aENsaWNrOiBvblByZXZNb250aENsaWNrLFxuICAgICAgb25OZXh0TW9udGhDbGljazogb25OZXh0TW9udGhDbGljayxcbiAgICAgIG5hdlBvc2l0aW9uOiBuYXZQb3NpdGlvbixcbiAgICAgIG5hdlByZXY6IG5hdlByZXYsXG4gICAgICBuYXZOZXh0OiBuYXZOZXh0LFxuICAgICAgcmVuZGVyTmF2UHJldkJ1dHRvbjogcmVuZGVyTmF2UHJldkJ1dHRvbixcbiAgICAgIHJlbmRlck5hdk5leHRCdXR0b246IHJlbmRlck5hdk5leHRCdXR0b24sXG4gICAgICBvcmllbnRhdGlvbjogb3JpZW50YXRpb24sXG4gICAgICBwaHJhc2VzOiBwaHJhc2VzLFxuICAgICAgaXNSVEw6IGlzUlRMLFxuICAgICAgc2hvd05hdk5leHRCdXR0b246ICEobm9OYXZOZXh0QnV0dG9uIHx8IG9yaWVudGF0aW9uID09PSBfY29uc3RhbnRzLlZFUlRJQ0FMX1NDUk9MTEFCTEUgJiYgbmF2RGlyZWN0aW9uID09PSBQUkVWX05BViksXG4gICAgICBzaG93TmF2UHJldkJ1dHRvbjogIShub05hdlByZXZCdXR0b24gfHwgb3JpZW50YXRpb24gPT09IF9jb25zdGFudHMuVkVSVElDQUxfU0NST0xMQUJMRSAmJiBuYXZEaXJlY3Rpb24gPT09IE5FWFRfTkFWKVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXJXZWVrSGVhZGVyID0gZnVuY3Rpb24gcmVuZGVyV2Vla0hlYWRlcihpbmRleCkge1xuICAgIHZhciBfdGhpcyRwcm9wczExID0gdGhpcy5wcm9wcyxcbiAgICAgICAgZGF5U2l6ZSA9IF90aGlzJHByb3BzMTEuZGF5U2l6ZSxcbiAgICAgICAgaG9yaXpvbnRhbE1vbnRoUGFkZGluZyA9IF90aGlzJHByb3BzMTEuaG9yaXpvbnRhbE1vbnRoUGFkZGluZyxcbiAgICAgICAgb3JpZW50YXRpb24gPSBfdGhpcyRwcm9wczExLm9yaWVudGF0aW9uLFxuICAgICAgICByZW5kZXJXZWVrSGVhZGVyRWxlbWVudCA9IF90aGlzJHByb3BzMTEucmVuZGVyV2Vla0hlYWRlckVsZW1lbnQsXG4gICAgICAgIHN0eWxlcyA9IF90aGlzJHByb3BzMTEuc3R5bGVzO1xuICAgIHZhciBjYWxlbmRhck1vbnRoV2lkdGggPSB0aGlzLnN0YXRlLmNhbGVuZGFyTW9udGhXaWR0aDtcbiAgICB2YXIgdmVydGljYWxTY3JvbGxhYmxlID0gb3JpZW50YXRpb24gPT09IF9jb25zdGFudHMuVkVSVElDQUxfU0NST0xMQUJMRTtcbiAgICB2YXIgaG9yaXpvbnRhbFN0eWxlID0ge1xuICAgICAgbGVmdDogaW5kZXggKiBjYWxlbmRhck1vbnRoV2lkdGhcbiAgICB9O1xuICAgIHZhciB2ZXJ0aWNhbFN0eWxlID0ge1xuICAgICAgbWFyZ2luTGVmdDogLWNhbGVuZGFyTW9udGhXaWR0aCAvIDJcbiAgICB9O1xuICAgIHZhciB3ZWVrSGVhZGVyU3R5bGUgPSB7fTsgLy8gbm8gc3R5bGVzIGFwcGxpZWQgdG8gdGhlIHZlcnRpY2FsLXNjcm9sbGFibGUgb3JpZW50YXRpb25cblxuICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICB3ZWVrSGVhZGVyU3R5bGUgPSBob3Jpem9udGFsU3R5bGU7XG4gICAgfSBlbHNlIGlmICh0aGlzLmlzVmVydGljYWwoKSAmJiAhdmVydGljYWxTY3JvbGxhYmxlKSB7XG4gICAgICB3ZWVrSGVhZGVyU3R5bGUgPSB2ZXJ0aWNhbFN0eWxlO1xuICAgIH1cblxuICAgIHZhciB3ZWVrSGVhZGVycyA9IHRoaXMuZ2V0V2Vla0hlYWRlcnMoKTtcbiAgICB2YXIgaGVhZGVyID0gd2Vla0hlYWRlcnMubWFwKGZ1bmN0aW9uIChkYXkpIHtcbiAgICAgIHJldHVybiBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJsaVwiLCAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe1xuICAgICAgICBrZXk6IGRheVxuICAgICAgfSwgKDAsIF9yZWFjdFdpdGhTdHlsZXMuY3NzKShzdHlsZXMuRGF5UGlja2VyX3dlZWtIZWFkZXJfbGksIHtcbiAgICAgICAgd2lkdGg6IGRheVNpemVcbiAgICAgIH0pKSwgcmVuZGVyV2Vla0hlYWRlckVsZW1lbnQgPyByZW5kZXJXZWVrSGVhZGVyRWxlbWVudChkYXkpIDogX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwic21hbGxcIiwgbnVsbCwgZGF5KSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImRpdlwiLCAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe30sICgwLCBfcmVhY3RXaXRoU3R5bGVzLmNzcykoc3R5bGVzLkRheVBpY2tlcl93ZWVrSGVhZGVyLCB0aGlzLmlzVmVydGljYWwoKSAmJiBzdHlsZXMuRGF5UGlja2VyX3dlZWtIZWFkZXJfX3ZlcnRpY2FsLCB2ZXJ0aWNhbFNjcm9sbGFibGUgJiYgc3R5bGVzLkRheVBpY2tlcl93ZWVrSGVhZGVyX192ZXJ0aWNhbFNjcm9sbGFibGUsIHdlZWtIZWFkZXJTdHlsZSwge1xuICAgICAgcGFkZGluZzogXCIwIFwiLmNvbmNhdChob3Jpem9udGFsTW9udGhQYWRkaW5nLCBcInB4XCIpXG4gICAgfSksIHtcbiAgICAgIGtleTogXCJ3ZWVrLVwiLmNvbmNhdChpbmRleClcbiAgICB9KSwgX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwidWxcIiwgKDAsIF9yZWFjdFdpdGhTdHlsZXMuY3NzKShzdHlsZXMuRGF5UGlja2VyX3dlZWtIZWFkZXJfdWwpLCBoZWFkZXIpKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXG4gICAgdmFyIF90aGlzJHN0YXRlOCA9IHRoaXMuc3RhdGUsXG4gICAgICAgIGNhbGVuZGFyTW9udGhXaWR0aCA9IF90aGlzJHN0YXRlOC5jYWxlbmRhck1vbnRoV2lkdGgsXG4gICAgICAgIGN1cnJlbnRNb250aCA9IF90aGlzJHN0YXRlOC5jdXJyZW50TW9udGgsXG4gICAgICAgIG1vbnRoVHJhbnNpdGlvbiA9IF90aGlzJHN0YXRlOC5tb250aFRyYW5zaXRpb24sXG4gICAgICAgIHRyYW5zbGF0aW9uVmFsdWUgPSBfdGhpcyRzdGF0ZTgudHJhbnNsYXRpb25WYWx1ZSxcbiAgICAgICAgc2Nyb2xsYWJsZU1vbnRoTXVsdGlwbGUgPSBfdGhpcyRzdGF0ZTguc2Nyb2xsYWJsZU1vbnRoTXVsdGlwbGUsXG4gICAgICAgIGZvY3VzZWREYXRlID0gX3RoaXMkc3RhdGU4LmZvY3VzZWREYXRlLFxuICAgICAgICBzaG93S2V5Ym9hcmRTaG9ydGN1dHMgPSBfdGhpcyRzdGF0ZTguc2hvd0tleWJvYXJkU2hvcnRjdXRzLFxuICAgICAgICBpc1RvdWNoID0gX3RoaXMkc3RhdGU4LmlzVG91Y2hEZXZpY2UsXG4gICAgICAgIGhhc1NldEhlaWdodCA9IF90aGlzJHN0YXRlOC5oYXNTZXRIZWlnaHQsXG4gICAgICAgIGNhbGVuZGFySW5mb1dpZHRoID0gX3RoaXMkc3RhdGU4LmNhbGVuZGFySW5mb1dpZHRoLFxuICAgICAgICBtb250aFRpdGxlSGVpZ2h0ID0gX3RoaXMkc3RhdGU4Lm1vbnRoVGl0bGVIZWlnaHQ7XG4gICAgdmFyIF90aGlzJHByb3BzMTIgPSB0aGlzLnByb3BzLFxuICAgICAgICBlbmFibGVPdXRzaWRlRGF5cyA9IF90aGlzJHByb3BzMTIuZW5hYmxlT3V0c2lkZURheXMsXG4gICAgICAgIG51bWJlck9mTW9udGhzID0gX3RoaXMkcHJvcHMxMi5udW1iZXJPZk1vbnRocyxcbiAgICAgICAgb3JpZW50YXRpb24gPSBfdGhpcyRwcm9wczEyLm9yaWVudGF0aW9uLFxuICAgICAgICBtb2RpZmllcnMgPSBfdGhpcyRwcm9wczEyLm1vZGlmaWVycyxcbiAgICAgICAgd2l0aFBvcnRhbCA9IF90aGlzJHByb3BzMTIud2l0aFBvcnRhbCxcbiAgICAgICAgb25EYXlDbGljayA9IF90aGlzJHByb3BzMTIub25EYXlDbGljayxcbiAgICAgICAgb25EYXlNb3VzZUVudGVyID0gX3RoaXMkcHJvcHMxMi5vbkRheU1vdXNlRW50ZXIsXG4gICAgICAgIG9uRGF5TW91c2VMZWF2ZSA9IF90aGlzJHByb3BzMTIub25EYXlNb3VzZUxlYXZlLFxuICAgICAgICBmaXJzdERheU9mV2VlayA9IF90aGlzJHByb3BzMTIuZmlyc3REYXlPZldlZWssXG4gICAgICAgIHJlbmRlck1vbnRoVGV4dCA9IF90aGlzJHByb3BzMTIucmVuZGVyTW9udGhUZXh0LFxuICAgICAgICByZW5kZXJDYWxlbmRhckRheSA9IF90aGlzJHByb3BzMTIucmVuZGVyQ2FsZW5kYXJEYXksXG4gICAgICAgIHJlbmRlckRheUNvbnRlbnRzID0gX3RoaXMkcHJvcHMxMi5yZW5kZXJEYXlDb250ZW50cyxcbiAgICAgICAgcmVuZGVyQ2FsZW5kYXJJbmZvID0gX3RoaXMkcHJvcHMxMi5yZW5kZXJDYWxlbmRhckluZm8sXG4gICAgICAgIHJlbmRlck1vbnRoRWxlbWVudCA9IF90aGlzJHByb3BzMTIucmVuZGVyTW9udGhFbGVtZW50LFxuICAgICAgICByZW5kZXJLZXlib2FyZFNob3J0Y3V0c0J1dHRvbiA9IF90aGlzJHByb3BzMTIucmVuZGVyS2V5Ym9hcmRTaG9ydGN1dHNCdXR0b24sXG4gICAgICAgIHJlbmRlcktleWJvYXJkU2hvcnRjdXRzUGFuZWwgPSBfdGhpcyRwcm9wczEyLnJlbmRlcktleWJvYXJkU2hvcnRjdXRzUGFuZWwsXG4gICAgICAgIGNhbGVuZGFySW5mb1Bvc2l0aW9uID0gX3RoaXMkcHJvcHMxMi5jYWxlbmRhckluZm9Qb3NpdGlvbixcbiAgICAgICAgaGlkZUtleWJvYXJkU2hvcnRjdXRzUGFuZWwgPSBfdGhpcyRwcm9wczEyLmhpZGVLZXlib2FyZFNob3J0Y3V0c1BhbmVsLFxuICAgICAgICBvbk91dHNpZGVDbGljayA9IF90aGlzJHByb3BzMTIub25PdXRzaWRlQ2xpY2ssXG4gICAgICAgIG1vbnRoRm9ybWF0ID0gX3RoaXMkcHJvcHMxMi5tb250aEZvcm1hdCxcbiAgICAgICAgZGF5U2l6ZSA9IF90aGlzJHByb3BzMTIuZGF5U2l6ZSxcbiAgICAgICAgaXNGb2N1c2VkID0gX3RoaXMkcHJvcHMxMi5pc0ZvY3VzZWQsXG4gICAgICAgIGlzUlRMID0gX3RoaXMkcHJvcHMxMi5pc1JUTCxcbiAgICAgICAgc3R5bGVzID0gX3RoaXMkcHJvcHMxMi5zdHlsZXMsXG4gICAgICAgIHRoZW1lID0gX3RoaXMkcHJvcHMxMi50aGVtZSxcbiAgICAgICAgcGhyYXNlcyA9IF90aGlzJHByb3BzMTIucGhyYXNlcyxcbiAgICAgICAgdmVydGljYWxIZWlnaHQgPSBfdGhpcyRwcm9wczEyLnZlcnRpY2FsSGVpZ2h0LFxuICAgICAgICBkYXlBcmlhTGFiZWxGb3JtYXQgPSBfdGhpcyRwcm9wczEyLmRheUFyaWFMYWJlbEZvcm1hdCxcbiAgICAgICAgbm9Cb3JkZXIgPSBfdGhpcyRwcm9wczEyLm5vQm9yZGVyLFxuICAgICAgICB0cmFuc2l0aW9uRHVyYXRpb24gPSBfdGhpcyRwcm9wczEyLnRyYW5zaXRpb25EdXJhdGlvbixcbiAgICAgICAgdmVydGljYWxCb3JkZXJTcGFjaW5nID0gX3RoaXMkcHJvcHMxMi52ZXJ0aWNhbEJvcmRlclNwYWNpbmcsXG4gICAgICAgIGhvcml6b250YWxNb250aFBhZGRpbmcgPSBfdGhpcyRwcm9wczEyLmhvcml6b250YWxNb250aFBhZGRpbmcsXG4gICAgICAgIG5hdlBvc2l0aW9uID0gX3RoaXMkcHJvcHMxMi5uYXZQb3NpdGlvbjtcbiAgICB2YXIgZGF5UGlja2VySG9yaXpvbnRhbFBhZGRpbmcgPSB0aGVtZS5yZWFjdERhdGVzLnNwYWNpbmcuZGF5UGlja2VySG9yaXpvbnRhbFBhZGRpbmc7XG4gICAgdmFyIGlzSG9yaXpvbnRhbCA9IHRoaXMuaXNIb3Jpem9udGFsKCk7XG4gICAgdmFyIG51bU9mV2Vla0hlYWRlcnMgPSB0aGlzLmlzVmVydGljYWwoKSA/IDEgOiBudW1iZXJPZk1vbnRocztcbiAgICB2YXIgd2Vla0hlYWRlcnMgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtT2ZXZWVrSGVhZGVyczsgaSArPSAxKSB7XG4gICAgICB3ZWVrSGVhZGVycy5wdXNoKHRoaXMucmVuZGVyV2Vla0hlYWRlcihpKSk7XG4gICAgfVxuXG4gICAgdmFyIHZlcnRpY2FsU2Nyb2xsYWJsZSA9IG9yaWVudGF0aW9uID09PSBfY29uc3RhbnRzLlZFUlRJQ0FMX1NDUk9MTEFCTEU7XG4gICAgdmFyIGhlaWdodDtcblxuICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgIGhlaWdodCA9IHRoaXMuY2FsZW5kYXJNb250aEdyaWRIZWlnaHQ7XG4gICAgfSBlbHNlIGlmICh0aGlzLmlzVmVydGljYWwoKSAmJiAhdmVydGljYWxTY3JvbGxhYmxlICYmICF3aXRoUG9ydGFsKSB7XG4gICAgICAvLyBJZiB0aGUgdXNlciBkb2Vzbid0IHNldCBhIGRlc2lyZWQgaGVpZ2h0LFxuICAgICAgLy8gd2UgZGVmYXVsdCBiYWNrIHRvIHRoaXMga2luZCBvZiBtYWRlLXVwIHZhbHVlIHRoYXQgZ2VuZXJhbGx5IGxvb2tzIGdvb2RcbiAgICAgIGhlaWdodCA9IHZlcnRpY2FsSGVpZ2h0IHx8IDEuNzUgKiBjYWxlbmRhck1vbnRoV2lkdGg7XG4gICAgfVxuXG4gICAgdmFyIGlzQ2FsZW5kYXJNb250aEdyaWRBbmltYXRpbmcgPSBtb250aFRyYW5zaXRpb24gIT09IG51bGw7XG4gICAgdmFyIHNob3VsZEZvY3VzRGF0ZSA9ICFpc0NhbGVuZGFyTW9udGhHcmlkQW5pbWF0aW5nICYmIGlzRm9jdXNlZDtcbiAgICB2YXIga2V5Ym9hcmRTaG9ydGN1dEJ1dHRvbkxvY2F0aW9uID0gX0RheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzLkJPVFRPTV9SSUdIVDtcblxuICAgIGlmICh0aGlzLmlzVmVydGljYWwoKSkge1xuICAgICAga2V5Ym9hcmRTaG9ydGN1dEJ1dHRvbkxvY2F0aW9uID0gd2l0aFBvcnRhbCA/IF9EYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0cy5UT1BfTEVGVCA6IF9EYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0cy5UT1BfUklHSFQ7XG4gICAgfVxuXG4gICAgdmFyIHNob3VsZEFuaW1hdGVIZWlnaHQgPSBpc0hvcml6b250YWwgJiYgaGFzU2V0SGVpZ2h0O1xuICAgIHZhciBjYWxlbmRhckluZm9Qb3NpdGlvblRvcCA9IGNhbGVuZGFySW5mb1Bvc2l0aW9uID09PSBfY29uc3RhbnRzLklORk9fUE9TSVRJT05fVE9QO1xuICAgIHZhciBjYWxlbmRhckluZm9Qb3NpdGlvbkJvdHRvbSA9IGNhbGVuZGFySW5mb1Bvc2l0aW9uID09PSBfY29uc3RhbnRzLklORk9fUE9TSVRJT05fQk9UVE9NO1xuICAgIHZhciBjYWxlbmRhckluZm9Qb3NpdGlvbkJlZm9yZSA9IGNhbGVuZGFySW5mb1Bvc2l0aW9uID09PSBfY29uc3RhbnRzLklORk9fUE9TSVRJT05fQkVGT1JFO1xuICAgIHZhciBjYWxlbmRhckluZm9Qb3NpdGlvbkFmdGVyID0gY2FsZW5kYXJJbmZvUG9zaXRpb24gPT09IF9jb25zdGFudHMuSU5GT19QT1NJVElPTl9BRlRFUjtcbiAgICB2YXIgY2FsZW5kYXJJbmZvSXNJbmxpbmUgPSBjYWxlbmRhckluZm9Qb3NpdGlvbkJlZm9yZSB8fCBjYWxlbmRhckluZm9Qb3NpdGlvbkFmdGVyO1xuXG4gICAgdmFyIGNhbGVuZGFySW5mbyA9IHJlbmRlckNhbGVuZGFySW5mbyAmJiBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKHtcbiAgICAgIHJlZjogdGhpcy5zZXRDYWxlbmRhckluZm9SZWZcbiAgICB9LCAoMCwgX3JlYWN0V2l0aFN0eWxlcy5jc3MpKGNhbGVuZGFySW5mb0lzSW5saW5lICYmIHN0eWxlcy5EYXlQaWNrZXJfY2FsZW5kYXJJbmZvX19ob3Jpem9udGFsKSksIHJlbmRlckNhbGVuZGFySW5mbygpKTtcblxuICAgIHZhciBjYWxlbmRhckluZm9QYW5lbFdpZHRoID0gcmVuZGVyQ2FsZW5kYXJJbmZvICYmIGNhbGVuZGFySW5mb0lzSW5saW5lID8gY2FsZW5kYXJJbmZvV2lkdGggOiAwO1xuICAgIHZhciBmaXJzdFZpc2libGVNb250aEluZGV4ID0gdGhpcy5nZXRGaXJzdFZpc2libGVJbmRleCgpO1xuICAgIHZhciB3cmFwcGVySG9yaXpvbnRhbFdpZHRoID0gY2FsZW5kYXJNb250aFdpZHRoICogbnVtYmVyT2ZNb250aHMgKyAyICogZGF5UGlja2VySG9yaXpvbnRhbFBhZGRpbmc7IC8vIEFkZGluZyBgMXB4YCBiZWNhdXNlIG9mIHdoaXRlc3BhY2UgYmV0d2VlbiAyIGlubGluZS1ibG9ja1xuXG4gICAgdmFyIGZ1bGxIb3Jpem9udGFsV2lkdGggPSB3cmFwcGVySG9yaXpvbnRhbFdpZHRoICsgY2FsZW5kYXJJbmZvUGFuZWxXaWR0aCArIDE7XG4gICAgdmFyIHRyYW5zaXRpb25Db250YWluZXJTdHlsZSA9IHtcbiAgICAgIHdpZHRoOiBpc0hvcml6b250YWwgJiYgd3JhcHBlckhvcml6b250YWxXaWR0aCxcbiAgICAgIGhlaWdodDogaGVpZ2h0XG4gICAgfTtcbiAgICB2YXIgZGF5UGlja2VyV3JhcHBlclN0eWxlID0ge1xuICAgICAgd2lkdGg6IGlzSG9yaXpvbnRhbCAmJiB3cmFwcGVySG9yaXpvbnRhbFdpZHRoXG4gICAgfTtcbiAgICB2YXIgZGF5UGlja2VyU3R5bGUgPSB7XG4gICAgICB3aWR0aDogaXNIb3Jpem9udGFsICYmIGZ1bGxIb3Jpem9udGFsV2lkdGgsXG4gICAgICAvLyBUaGVzZSB2YWx1ZXMgYXJlIHRvIGNlbnRlciB0aGUgZGF0ZXBpY2tlciAoYXBwcm94aW1hdGVseSkgb24gdGhlIHBhZ2VcbiAgICAgIG1hcmdpbkxlZnQ6IGlzSG9yaXpvbnRhbCAmJiB3aXRoUG9ydGFsID8gLWZ1bGxIb3Jpem9udGFsV2lkdGggLyAyIDogbnVsbCxcbiAgICAgIG1hcmdpblRvcDogaXNIb3Jpem9udGFsICYmIHdpdGhQb3J0YWwgPyAtY2FsZW5kYXJNb250aFdpZHRoIC8gMiA6IG51bGxcbiAgICB9O1xuICAgIHJldHVybiBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgKDAsIF9yZWFjdFdpdGhTdHlsZXMuY3NzKShzdHlsZXMuRGF5UGlja2VyLCBpc0hvcml6b250YWwgJiYgc3R5bGVzLkRheVBpY2tlcl9faG9yaXpvbnRhbCwgdmVydGljYWxTY3JvbGxhYmxlICYmIHN0eWxlcy5EYXlQaWNrZXJfX3ZlcnRpY2FsU2Nyb2xsYWJsZSwgaXNIb3Jpem9udGFsICYmIHdpdGhQb3J0YWwgJiYgc3R5bGVzLkRheVBpY2tlcl9wb3J0YWxfX2hvcml6b250YWwsIHRoaXMuaXNWZXJ0aWNhbCgpICYmIHdpdGhQb3J0YWwgJiYgc3R5bGVzLkRheVBpY2tlcl9wb3J0YWxfX3ZlcnRpY2FsLCBkYXlQaWNrZXJTdHlsZSwgIW1vbnRoVGl0bGVIZWlnaHQgJiYgc3R5bGVzLkRheVBpY2tlcl9faGlkZGVuLCAhbm9Cb3JkZXIgJiYgc3R5bGVzLkRheVBpY2tlcl9fd2l0aEJvcmRlciksIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChfcmVhY3RPdXRzaWRlQ2xpY2tIYW5kbGVyW1wiZGVmYXVsdFwiXSwge1xuICAgICAgb25PdXRzaWRlQ2xpY2s6IG9uT3V0c2lkZUNsaWNrXG4gICAgfSwgKGNhbGVuZGFySW5mb1Bvc2l0aW9uVG9wIHx8IGNhbGVuZGFySW5mb1Bvc2l0aW9uQmVmb3JlKSAmJiBjYWxlbmRhckluZm8sIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImRpdlwiLCAoMCwgX3JlYWN0V2l0aFN0eWxlcy5jc3MpKGRheVBpY2tlcldyYXBwZXJTdHlsZSwgY2FsZW5kYXJJbmZvSXNJbmxpbmUgJiYgaXNIb3Jpem9udGFsICYmIHN0eWxlcy5EYXlQaWNrZXJfd3JhcHBlcl9faG9yaXpvbnRhbCksIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImRpdlwiLCAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe30sICgwLCBfcmVhY3RXaXRoU3R5bGVzLmNzcykoc3R5bGVzLkRheVBpY2tlcl93ZWVrSGVhZGVycywgaXNIb3Jpem9udGFsICYmIHN0eWxlcy5EYXlQaWNrZXJfd2Vla0hlYWRlcnNfX2hvcml6b250YWwpLCB7XG4gICAgICBcImFyaWEtaGlkZGVuXCI6IFwidHJ1ZVwiLFxuICAgICAgcm9sZTogXCJwcmVzZW50YXRpb25cIlxuICAgIH0pLCB3ZWVrSGVhZGVycyksIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImRpdlwiLCAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe30sICgwLCBfcmVhY3RXaXRoU3R5bGVzLmNzcykoc3R5bGVzLkRheVBpY2tlcl9mb2N1c1JlZ2lvbiksIHtcbiAgICAgIHJlZjogdGhpcy5zZXRDb250YWluZXJSZWYsXG4gICAgICBvbkNsaWNrOiBmdW5jdGlvbiBvbkNsaWNrKGUpIHtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIH0sXG4gICAgICBvbktleURvd246IHRoaXMub25LZXlEb3duLFxuICAgICAgb25Nb3VzZVVwOiBmdW5jdGlvbiBvbk1vdXNlVXAoKSB7XG4gICAgICAgIF90aGlzNi5zZXRTdGF0ZSh7XG4gICAgICAgICAgd2l0aE1vdXNlSW50ZXJhY3Rpb25zOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIHRhYkluZGV4OiAtMSxcbiAgICAgIHJvbGU6IFwiYXBwbGljYXRpb25cIixcbiAgICAgIFwiYXJpYS1yb2xlZGVzY3JpcHRpb25cIjogcGhyYXNlcy5yb2xlRGVzY3JpcHRpb24sXG4gICAgICBcImFyaWEtbGFiZWxcIjogcGhyYXNlcy5jYWxlbmRhckxhYmVsXG4gICAgfSksICF2ZXJ0aWNhbFNjcm9sbGFibGUgJiYgbmF2UG9zaXRpb24gPT09IF9jb25zdGFudHMuTkFWX1BPU0lUSU9OX1RPUCAmJiB0aGlzLnJlbmRlck5hdmlnYXRpb24oKSwgX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsICgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7fSwgKDAsIF9yZWFjdFdpdGhTdHlsZXMuY3NzKShzdHlsZXMuRGF5UGlja2VyX3RyYW5zaXRpb25Db250YWluZXIsIHNob3VsZEFuaW1hdGVIZWlnaHQgJiYgc3R5bGVzLkRheVBpY2tlcl90cmFuc2l0aW9uQ29udGFpbmVyX19ob3Jpem9udGFsLCB0aGlzLmlzVmVydGljYWwoKSAmJiBzdHlsZXMuRGF5UGlja2VyX3RyYW5zaXRpb25Db250YWluZXJfX3ZlcnRpY2FsLCB2ZXJ0aWNhbFNjcm9sbGFibGUgJiYgc3R5bGVzLkRheVBpY2tlcl90cmFuc2l0aW9uQ29udGFpbmVyX192ZXJ0aWNhbFNjcm9sbGFibGUsIHRyYW5zaXRpb25Db250YWluZXJTdHlsZSksIHtcbiAgICAgIHJlZjogdGhpcy5zZXRUcmFuc2l0aW9uQ29udGFpbmVyUmVmXG4gICAgfSksIHZlcnRpY2FsU2Nyb2xsYWJsZSAmJiB0aGlzLnJlbmRlck5hdmlnYXRpb24oUFJFVl9OQVYpLCBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoX0NhbGVuZGFyTW9udGhHcmlkW1wiZGVmYXVsdFwiXSwge1xuICAgICAgc2V0TW9udGhUaXRsZUhlaWdodDogIW1vbnRoVGl0bGVIZWlnaHQgPyB0aGlzLnNldE1vbnRoVGl0bGVIZWlnaHQgOiB1bmRlZmluZWQsXG4gICAgICB0cmFuc2xhdGlvblZhbHVlOiB0cmFuc2xhdGlvblZhbHVlLFxuICAgICAgZW5hYmxlT3V0c2lkZURheXM6IGVuYWJsZU91dHNpZGVEYXlzLFxuICAgICAgZmlyc3RWaXNpYmxlTW9udGhJbmRleDogZmlyc3RWaXNpYmxlTW9udGhJbmRleCxcbiAgICAgIGluaXRpYWxNb250aDogY3VycmVudE1vbnRoLFxuICAgICAgaXNBbmltYXRpbmc6IGlzQ2FsZW5kYXJNb250aEdyaWRBbmltYXRpbmcsXG4gICAgICBtb2RpZmllcnM6IG1vZGlmaWVycyxcbiAgICAgIG9yaWVudGF0aW9uOiBvcmllbnRhdGlvbixcbiAgICAgIG51bWJlck9mTW9udGhzOiBudW1iZXJPZk1vbnRocyAqIHNjcm9sbGFibGVNb250aE11bHRpcGxlLFxuICAgICAgb25EYXlDbGljazogb25EYXlDbGljayxcbiAgICAgIG9uRGF5TW91c2VFbnRlcjogb25EYXlNb3VzZUVudGVyLFxuICAgICAgb25EYXlNb3VzZUxlYXZlOiBvbkRheU1vdXNlTGVhdmUsXG4gICAgICBvbk1vbnRoQ2hhbmdlOiB0aGlzLm9uTW9udGhDaGFuZ2UsXG4gICAgICBvblllYXJDaGFuZ2U6IHRoaXMub25ZZWFyQ2hhbmdlLFxuICAgICAgcmVuZGVyTW9udGhUZXh0OiByZW5kZXJNb250aFRleHQsXG4gICAgICByZW5kZXJDYWxlbmRhckRheTogcmVuZGVyQ2FsZW5kYXJEYXksXG4gICAgICByZW5kZXJEYXlDb250ZW50czogcmVuZGVyRGF5Q29udGVudHMsXG4gICAgICByZW5kZXJNb250aEVsZW1lbnQ6IHJlbmRlck1vbnRoRWxlbWVudCxcbiAgICAgIG9uTW9udGhUcmFuc2l0aW9uRW5kOiB0aGlzLnVwZGF0ZVN0YXRlQWZ0ZXJNb250aFRyYW5zaXRpb24sXG4gICAgICBtb250aEZvcm1hdDogbW9udGhGb3JtYXQsXG4gICAgICBkYXlTaXplOiBkYXlTaXplLFxuICAgICAgZmlyc3REYXlPZldlZWs6IGZpcnN0RGF5T2ZXZWVrLFxuICAgICAgaXNGb2N1c2VkOiBzaG91bGRGb2N1c0RhdGUsXG4gICAgICBmb2N1c2VkRGF0ZTogZm9jdXNlZERhdGUsXG4gICAgICBwaHJhc2VzOiBwaHJhc2VzLFxuICAgICAgaXNSVEw6IGlzUlRMLFxuICAgICAgZGF5QXJpYUxhYmVsRm9ybWF0OiBkYXlBcmlhTGFiZWxGb3JtYXQsXG4gICAgICB0cmFuc2l0aW9uRHVyYXRpb246IHRyYW5zaXRpb25EdXJhdGlvbixcbiAgICAgIHZlcnRpY2FsQm9yZGVyU3BhY2luZzogdmVydGljYWxCb3JkZXJTcGFjaW5nLFxuICAgICAgaG9yaXpvbnRhbE1vbnRoUGFkZGluZzogaG9yaXpvbnRhbE1vbnRoUGFkZGluZ1xuICAgIH0pLCB2ZXJ0aWNhbFNjcm9sbGFibGUgJiYgdGhpcy5yZW5kZXJOYXZpZ2F0aW9uKE5FWFRfTkFWKSksICF2ZXJ0aWNhbFNjcm9sbGFibGUgJiYgbmF2UG9zaXRpb24gPT09IF9jb25zdGFudHMuTkFWX1BPU0lUSU9OX0JPVFRPTSAmJiB0aGlzLnJlbmRlck5hdmlnYXRpb24oKSwgIWlzVG91Y2ggJiYgIWhpZGVLZXlib2FyZFNob3J0Y3V0c1BhbmVsICYmIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChfRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHNbXCJkZWZhdWx0XCJdLCB7XG4gICAgICBibG9jazogdGhpcy5pc1ZlcnRpY2FsKCkgJiYgIXdpdGhQb3J0YWwsXG4gICAgICBidXR0b25Mb2NhdGlvbjoga2V5Ym9hcmRTaG9ydGN1dEJ1dHRvbkxvY2F0aW9uLFxuICAgICAgc2hvd0tleWJvYXJkU2hvcnRjdXRzUGFuZWw6IHNob3dLZXlib2FyZFNob3J0Y3V0cyxcbiAgICAgIG9wZW5LZXlib2FyZFNob3J0Y3V0c1BhbmVsOiB0aGlzLm9wZW5LZXlib2FyZFNob3J0Y3V0c1BhbmVsLFxuICAgICAgY2xvc2VLZXlib2FyZFNob3J0Y3V0c1BhbmVsOiB0aGlzLmNsb3NlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCxcbiAgICAgIHBocmFzZXM6IHBocmFzZXMsXG4gICAgICByZW5kZXJLZXlib2FyZFNob3J0Y3V0c0J1dHRvbjogcmVuZGVyS2V5Ym9hcmRTaG9ydGN1dHNCdXR0b24sXG4gICAgICByZW5kZXJLZXlib2FyZFNob3J0Y3V0c1BhbmVsOiByZW5kZXJLZXlib2FyZFNob3J0Y3V0c1BhbmVsXG4gICAgfSkpKSwgKGNhbGVuZGFySW5mb1Bvc2l0aW9uQm90dG9tIHx8IGNhbGVuZGFySW5mb1Bvc2l0aW9uQWZ0ZXIpICYmIGNhbGVuZGFySW5mbykpO1xuICB9O1xuXG4gIHJldHVybiBEYXlQaWNrZXI7XG59KF9yZWFjdFtcImRlZmF1bHRcIl0uUHVyZUNvbXBvbmVudCB8fCBfcmVhY3RbXCJkZWZhdWx0XCJdLkNvbXBvbmVudCk7XG5cbmV4cG9ydHMuUHVyZURheVBpY2tlciA9IERheVBpY2tlcjtcbkRheVBpY2tlci5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBwcm9wVHlwZXMgOiB7fTtcbkRheVBpY2tlci5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfcmVhY3RXaXRoU3R5bGVzLndpdGhTdHlsZXMpKGZ1bmN0aW9uIChfcmVmNCkge1xuICB2YXIgX3JlZjQkcmVhY3REYXRlcyA9IF9yZWY0LnJlYWN0RGF0ZXMsXG4gICAgICBjb2xvciA9IF9yZWY0JHJlYWN0RGF0ZXMuY29sb3IsXG4gICAgICBmb250ID0gX3JlZjQkcmVhY3REYXRlcy5mb250LFxuICAgICAgbm9TY3JvbGxCYXJPblZlcnRpY2FsU2Nyb2xsYWJsZSA9IF9yZWY0JHJlYWN0RGF0ZXMubm9TY3JvbGxCYXJPblZlcnRpY2FsU2Nyb2xsYWJsZSxcbiAgICAgIHNwYWNpbmcgPSBfcmVmNCRyZWFjdERhdGVzLnNwYWNpbmcsXG4gICAgICB6SW5kZXggPSBfcmVmNCRyZWFjdERhdGVzLnpJbmRleDtcbiAgcmV0dXJuIHtcbiAgICBEYXlQaWNrZXI6IHtcbiAgICAgIGJhY2tncm91bmQ6IGNvbG9yLmJhY2tncm91bmQsXG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIHRleHRBbGlnbjogKDAsIF9ub2ZsaXBbXCJkZWZhdWx0XCJdKSgnbGVmdCcpXG4gICAgfSxcbiAgICBEYXlQaWNrZXJfX2hvcml6b250YWw6IHtcbiAgICAgIGJhY2tncm91bmQ6IGNvbG9yLmJhY2tncm91bmRcbiAgICB9LFxuICAgIERheVBpY2tlcl9fdmVydGljYWxTY3JvbGxhYmxlOiB7XG4gICAgICBoZWlnaHQ6ICcxMDAlJ1xuICAgIH0sXG4gICAgRGF5UGlja2VyX19oaWRkZW46IHtcbiAgICAgIHZpc2liaWxpdHk6ICdoaWRkZW4nXG4gICAgfSxcbiAgICBEYXlQaWNrZXJfX3dpdGhCb3JkZXI6IHtcbiAgICAgIGJveFNoYWRvdzogKDAsIF9ub2ZsaXBbXCJkZWZhdWx0XCJdKSgnMCAycHggNnB4IHJnYmEoMCwgMCwgMCwgMC4wNSksIDAgMCAwIDFweCByZ2JhKDAsIDAsIDAsIDAuMDcpJyksXG4gICAgICBib3JkZXJSYWRpdXM6IDNcbiAgICB9LFxuICAgIERheVBpY2tlcl9wb3J0YWxfX2hvcml6b250YWw6IHtcbiAgICAgIGJveFNoYWRvdzogJ25vbmUnLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICBsZWZ0OiAoMCwgX25vZmxpcFtcImRlZmF1bHRcIl0pKCc1MCUnKSxcbiAgICAgIHRvcDogJzUwJSdcbiAgICB9LFxuICAgIERheVBpY2tlcl9wb3J0YWxfX3ZlcnRpY2FsOiB7XG4gICAgICBwb3NpdGlvbjogJ2luaXRpYWwnXG4gICAgfSxcbiAgICBEYXlQaWNrZXJfZm9jdXNSZWdpb246IHtcbiAgICAgIG91dGxpbmU6ICdub25lJ1xuICAgIH0sXG4gICAgRGF5UGlja2VyX2NhbGVuZGFySW5mb19faG9yaXpvbnRhbDoge1xuICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgICB2ZXJ0aWNhbEFsaWduOiAndG9wJ1xuICAgIH0sXG4gICAgRGF5UGlja2VyX3dyYXBwZXJfX2hvcml6b250YWw6IHtcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgdmVydGljYWxBbGlnbjogJ3RvcCdcbiAgICB9LFxuICAgIERheVBpY2tlcl93ZWVrSGVhZGVyczoge1xuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICB9LFxuICAgIERheVBpY2tlcl93ZWVrSGVhZGVyc19faG9yaXpvbnRhbDoge1xuICAgICAgbWFyZ2luTGVmdDogKDAsIF9ub2ZsaXBbXCJkZWZhdWx0XCJdKShzcGFjaW5nLmRheVBpY2tlckhvcml6b250YWxQYWRkaW5nKVxuICAgIH0sXG4gICAgRGF5UGlja2VyX3dlZWtIZWFkZXI6IHtcbiAgICAgIGNvbG9yOiBjb2xvci5wbGFjZWhvbGRlclRleHQsXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHRvcDogNjIsXG4gICAgICB6SW5kZXg6IHpJbmRleCArIDIsXG4gICAgICB0ZXh0QWxpZ246ICgwLCBfbm9mbGlwW1wiZGVmYXVsdFwiXSkoJ2xlZnQnKVxuICAgIH0sXG4gICAgRGF5UGlja2VyX3dlZWtIZWFkZXJfX3ZlcnRpY2FsOiB7XG4gICAgICBsZWZ0OiAoMCwgX25vZmxpcFtcImRlZmF1bHRcIl0pKCc1MCUnKVxuICAgIH0sXG4gICAgRGF5UGlja2VyX3dlZWtIZWFkZXJfX3ZlcnRpY2FsU2Nyb2xsYWJsZToge1xuICAgICAgdG9wOiAwLFxuICAgICAgZGlzcGxheTogJ3RhYmxlLXJvdycsXG4gICAgICBib3JkZXJCb3R0b206IFwiMXB4IHNvbGlkIFwiLmNvbmNhdChjb2xvci5jb3JlLmJvcmRlciksXG4gICAgICBiYWNrZ3JvdW5kOiBjb2xvci5iYWNrZ3JvdW5kLFxuICAgICAgbWFyZ2luTGVmdDogKDAsIF9ub2ZsaXBbXCJkZWZhdWx0XCJdKSgwKSxcbiAgICAgIGxlZnQ6ICgwLCBfbm9mbGlwW1wiZGVmYXVsdFwiXSkoMCksXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgdGV4dEFsaWduOiAnY2VudGVyJ1xuICAgIH0sXG4gICAgRGF5UGlja2VyX3dlZWtIZWFkZXJfdWw6IHtcbiAgICAgIGxpc3RTdHlsZTogJ25vbmUnLFxuICAgICAgbWFyZ2luOiAnMXB4IDAnLFxuICAgICAgcGFkZGluZ0xlZnQ6ICgwLCBfbm9mbGlwW1wiZGVmYXVsdFwiXSkoMCksXG4gICAgICBwYWRkaW5nUmlnaHQ6ICgwLCBfbm9mbGlwW1wiZGVmYXVsdFwiXSkoMCksXG4gICAgICBmb250U2l6ZTogZm9udC5zaXplXG4gICAgfSxcbiAgICBEYXlQaWNrZXJfd2Vla0hlYWRlcl9saToge1xuICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgICB0ZXh0QWxpZ246ICdjZW50ZXInXG4gICAgfSxcbiAgICBEYXlQaWNrZXJfdHJhbnNpdGlvbkNvbnRhaW5lcjoge1xuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICBib3JkZXJSYWRpdXM6IDNcbiAgICB9LFxuICAgIERheVBpY2tlcl90cmFuc2l0aW9uQ29udGFpbmVyX19ob3Jpem9udGFsOiB7XG4gICAgICB0cmFuc2l0aW9uOiAnaGVpZ2h0IDAuMnMgZWFzZS1pbi1vdXQnXG4gICAgfSxcbiAgICBEYXlQaWNrZXJfdHJhbnNpdGlvbkNvbnRhaW5lcl9fdmVydGljYWw6IHtcbiAgICAgIHdpZHRoOiAnMTAwJSdcbiAgICB9LFxuICAgIERheVBpY2tlcl90cmFuc2l0aW9uQ29udGFpbmVyX192ZXJ0aWNhbFNjcm9sbGFibGU6IF9vYmplY3RTcHJlYWQoe1xuICAgICAgcGFkZGluZ1RvcDogMjAsXG4gICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgdG9wOiAwLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgcmlnaHQ6ICgwLCBfbm9mbGlwW1wiZGVmYXVsdFwiXSkoMCksXG4gICAgICBsZWZ0OiAoMCwgX25vZmxpcFtcImRlZmF1bHRcIl0pKDApLFxuICAgICAgb3ZlcmZsb3dZOiAnc2Nyb2xsJ1xuICAgIH0sIG5vU2Nyb2xsQmFyT25WZXJ0aWNhbFNjcm9sbGFibGUgJiYge1xuICAgICAgJy13ZWJraXRPdmVyZmxvd1Njcm9sbGluZyc6ICd0b3VjaCcsXG4gICAgICAnOjotd2Via2l0LXNjcm9sbGJhcic6IHtcbiAgICAgICAgJy13ZWJraXQtYXBwZWFyYW5jZSc6ICdub25lJyxcbiAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICB9XG4gICAgfSlcbiAgfTtcbn0sIHtcbiAgcHVyZUNvbXBvbmVudDogdHlwZW9mIF9yZWFjdFtcImRlZmF1bHRcIl0uUHVyZUNvbXBvbmVudCAhPT0gJ3VuZGVmaW5lZCdcbn0pKERheVBpY2tlcik7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkVHlwZUVycm9yID0gR2V0SW50cmluc2ljKCclVHlwZUVycm9yJScpO1xuXG52YXIgaW5zcGVjdCA9IHJlcXVpcmUoJ29iamVjdC1pbnNwZWN0Jyk7XG5cbnZhciBJc1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi9Jc1Byb3BlcnR5S2V5Jyk7XG52YXIgVHlwZSA9IHJlcXVpcmUoJy4vVHlwZScpO1xuXG4vKipcbiAqIDcuMy4xIEdldCAoTywgUCkgLSBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtZ2V0LW8tcFxuICogMS4gQXNzZXJ0OiBUeXBlKE8pIGlzIE9iamVjdC5cbiAqIDIuIEFzc2VydDogSXNQcm9wZXJ0eUtleShQKSBpcyB0cnVlLlxuICogMy4gUmV0dXJuIE8uW1tHZXRdXShQLCBPKS5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEdldChPLCBQKSB7XG5cdC8vIDcuMy4xLjFcblx0aWYgKFR5cGUoTykgIT09ICdPYmplY3QnKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IFR5cGUoTykgaXMgbm90IE9iamVjdCcpO1xuXHR9XG5cdC8vIDcuMy4xLjJcblx0aWYgKCFJc1Byb3BlcnR5S2V5KFApKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IElzUHJvcGVydHlLZXkoUCkgaXMgbm90IHRydWUsIGdvdCAnICsgaW5zcGVjdChQKSk7XG5cdH1cblx0Ly8gNy4zLjEuM1xuXHRyZXR1cm4gT1tQXTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRBcnJheSA9IEdldEludHJpbnNpYygnJUFycmF5JScpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZ2xvYmFsLXJlcXVpcmVcbnZhciB0b1N0ciA9ICEkQXJyYXkuaXNBcnJheSAmJiByZXF1aXJlKCcuLi9oZWxwZXJzL2NhbGxCb3VuZCcpKCdPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nJyk7XG5cbi8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtaXNhcnJheVxuXG5tb2R1bGUuZXhwb3J0cyA9ICRBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIElzQXJyYXkoYXJndW1lbnQpIHtcblx0cmV0dXJuIHRvU3RyKGFyZ3VtZW50KSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gTnVtYmVyLmlzTmFOIHx8IGZ1bmN0aW9uIGlzTmFOKGEpIHtcblx0cmV0dXJuIGEgIT09IGE7XG59O1xuIiwiLyogZ2xvYmFsIHdpbmRvdyAqL1xuaW1wb3J0IHBvbnlmaWxsIGZyb20gJy4vcG9ueWZpbGwuanMnO1xuXG52YXIgcm9vdDtcblxuaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICByb290ID0gc2VsZjtcbn0gZWxzZSBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHdpbmRvdztcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IGdsb2JhbDtcbn0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IG1vZHVsZTtcbn0gZWxzZSB7XG4gIHJvb3QgPSBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xufVxuXG52YXIgcmVzdWx0ID0gcG9ueWZpbGwocm9vdCk7XG5leHBvcnQgZGVmYXVsdCByZXN1bHQ7XG4iLCJ2YXIgaXNhcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKVxuXG4vKipcbiAqIEV4cG9zZSBgcGF0aFRvUmVnZXhwYC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBwYXRoVG9SZWdleHBcbm1vZHVsZS5leHBvcnRzLnBhcnNlID0gcGFyc2Vcbm1vZHVsZS5leHBvcnRzLmNvbXBpbGUgPSBjb21waWxlXG5tb2R1bGUuZXhwb3J0cy50b2tlbnNUb0Z1bmN0aW9uID0gdG9rZW5zVG9GdW5jdGlvblxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9SZWdFeHAgPSB0b2tlbnNUb1JlZ0V4cFxuXG4vKipcbiAqIFRoZSBtYWluIHBhdGggbWF0Y2hpbmcgcmVnZXhwIHV0aWxpdHkuXG4gKlxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xudmFyIFBBVEhfUkVHRVhQID0gbmV3IFJlZ0V4cChbXG4gIC8vIE1hdGNoIGVzY2FwZWQgY2hhcmFjdGVycyB0aGF0IHdvdWxkIG90aGVyd2lzZSBhcHBlYXIgaW4gZnV0dXJlIG1hdGNoZXMuXG4gIC8vIFRoaXMgYWxsb3dzIHRoZSB1c2VyIHRvIGVzY2FwZSBzcGVjaWFsIGNoYXJhY3RlcnMgdGhhdCB3b24ndCB0cmFuc2Zvcm0uXG4gICcoXFxcXFxcXFwuKScsXG4gIC8vIE1hdGNoIEV4cHJlc3Mtc3R5bGUgcGFyYW1ldGVycyBhbmQgdW4tbmFtZWQgcGFyYW1ldGVycyB3aXRoIGEgcHJlZml4XG4gIC8vIGFuZCBvcHRpb25hbCBzdWZmaXhlcy4gTWF0Y2hlcyBhcHBlYXIgYXM6XG4gIC8vXG4gIC8vIFwiLzp0ZXN0KFxcXFxkKyk/XCIgPT4gW1wiL1wiLCBcInRlc3RcIiwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgXCI/XCIsIHVuZGVmaW5lZF1cbiAgLy8gXCIvcm91dGUoXFxcXGQrKVwiICA9PiBbdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkXVxuICAvLyBcIi8qXCIgICAgICAgICAgICA9PiBbXCIvXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCIqXCJdXG4gICcoW1xcXFwvLl0pPyg/Oig/OlxcXFw6KFxcXFx3KykoPzpcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKT98XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSkoWysqP10pP3woXFxcXCopKSdcbl0uam9pbignfCcpLCAnZycpXG5cbi8qKlxuICogUGFyc2UgYSBzdHJpbmcgZm9yIHRoZSByYXcgdG9rZW5zLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gb3B0aW9uc1xuICogQHJldHVybiB7IUFycmF5fVxuICovXG5mdW5jdGlvbiBwYXJzZSAoc3RyLCBvcHRpb25zKSB7XG4gIHZhciB0b2tlbnMgPSBbXVxuICB2YXIga2V5ID0gMFxuICB2YXIgaW5kZXggPSAwXG4gIHZhciBwYXRoID0gJydcbiAgdmFyIGRlZmF1bHREZWxpbWl0ZXIgPSBvcHRpb25zICYmIG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJ1xuICB2YXIgcmVzXG5cbiAgd2hpbGUgKChyZXMgPSBQQVRIX1JFR0VYUC5leGVjKHN0cikpICE9IG51bGwpIHtcbiAgICB2YXIgbSA9IHJlc1swXVxuICAgIHZhciBlc2NhcGVkID0gcmVzWzFdXG4gICAgdmFyIG9mZnNldCA9IHJlcy5pbmRleFxuICAgIHBhdGggKz0gc3RyLnNsaWNlKGluZGV4LCBvZmZzZXQpXG4gICAgaW5kZXggPSBvZmZzZXQgKyBtLmxlbmd0aFxuXG4gICAgLy8gSWdub3JlIGFscmVhZHkgZXNjYXBlZCBzZXF1ZW5jZXMuXG4gICAgaWYgKGVzY2FwZWQpIHtcbiAgICAgIHBhdGggKz0gZXNjYXBlZFsxXVxuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICB2YXIgbmV4dCA9IHN0cltpbmRleF1cbiAgICB2YXIgcHJlZml4ID0gcmVzWzJdXG4gICAgdmFyIG5hbWUgPSByZXNbM11cbiAgICB2YXIgY2FwdHVyZSA9IHJlc1s0XVxuICAgIHZhciBncm91cCA9IHJlc1s1XVxuICAgIHZhciBtb2RpZmllciA9IHJlc1s2XVxuICAgIHZhciBhc3RlcmlzayA9IHJlc1s3XVxuXG4gICAgLy8gUHVzaCB0aGUgY3VycmVudCBwYXRoIG9udG8gdGhlIHRva2Vucy5cbiAgICBpZiAocGF0aCkge1xuICAgICAgdG9rZW5zLnB1c2gocGF0aClcbiAgICAgIHBhdGggPSAnJ1xuICAgIH1cblxuICAgIHZhciBwYXJ0aWFsID0gcHJlZml4ICE9IG51bGwgJiYgbmV4dCAhPSBudWxsICYmIG5leHQgIT09IHByZWZpeFxuICAgIHZhciByZXBlYXQgPSBtb2RpZmllciA9PT0gJysnIHx8IG1vZGlmaWVyID09PSAnKidcbiAgICB2YXIgb3B0aW9uYWwgPSBtb2RpZmllciA9PT0gJz8nIHx8IG1vZGlmaWVyID09PSAnKidcbiAgICB2YXIgZGVsaW1pdGVyID0gcmVzWzJdIHx8IGRlZmF1bHREZWxpbWl0ZXJcbiAgICB2YXIgcGF0dGVybiA9IGNhcHR1cmUgfHwgZ3JvdXBcblxuICAgIHRva2Vucy5wdXNoKHtcbiAgICAgIG5hbWU6IG5hbWUgfHwga2V5KyssXG4gICAgICBwcmVmaXg6IHByZWZpeCB8fCAnJyxcbiAgICAgIGRlbGltaXRlcjogZGVsaW1pdGVyLFxuICAgICAgb3B0aW9uYWw6IG9wdGlvbmFsLFxuICAgICAgcmVwZWF0OiByZXBlYXQsXG4gICAgICBwYXJ0aWFsOiBwYXJ0aWFsLFxuICAgICAgYXN0ZXJpc2s6ICEhYXN0ZXJpc2ssXG4gICAgICBwYXR0ZXJuOiBwYXR0ZXJuID8gZXNjYXBlR3JvdXAocGF0dGVybikgOiAoYXN0ZXJpc2sgPyAnLionIDogJ1teJyArIGVzY2FwZVN0cmluZyhkZWxpbWl0ZXIpICsgJ10rPycpXG4gICAgfSlcbiAgfVxuXG4gIC8vIE1hdGNoIGFueSBjaGFyYWN0ZXJzIHN0aWxsIHJlbWFpbmluZy5cbiAgaWYgKGluZGV4IDwgc3RyLmxlbmd0aCkge1xuICAgIHBhdGggKz0gc3RyLnN1YnN0cihpbmRleClcbiAgfVxuXG4gIC8vIElmIHRoZSBwYXRoIGV4aXN0cywgcHVzaCBpdCBvbnRvIHRoZSBlbmQuXG4gIGlmIChwYXRoKSB7XG4gICAgdG9rZW5zLnB1c2gocGF0aClcbiAgfVxuXG4gIHJldHVybiB0b2tlbnNcbn1cblxuLyoqXG4gKiBDb21waWxlIGEgc3RyaW5nIHRvIGEgdGVtcGxhdGUgZnVuY3Rpb24gZm9yIHRoZSBwYXRoLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gICAgICAgICAgICAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFmdW5jdGlvbihPYmplY3Q9LCBPYmplY3Q9KX1cbiAqL1xuZnVuY3Rpb24gY29tcGlsZSAoc3RyLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb0Z1bmN0aW9uKHBhcnNlKHN0ciwgb3B0aW9ucyksIG9wdGlvbnMpXG59XG5cbi8qKlxuICogUHJldHRpZXIgZW5jb2Rpbmcgb2YgVVJJIHBhdGggc2VnbWVudHMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVVUklDb21wb25lbnRQcmV0dHkgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvW1xcLz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFbmNvZGUgdGhlIGFzdGVyaXNrIHBhcmFtZXRlci4gU2ltaWxhciB0byBgcHJldHR5YCwgYnV0IGFsbG93cyBzbGFzaGVzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlQXN0ZXJpc2sgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvWz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBtZXRob2QgZm9yIHRyYW5zZm9ybWluZyB0b2tlbnMgaW50byB0aGUgcGF0aCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9GdW5jdGlvbiAodG9rZW5zLCBvcHRpb25zKSB7XG4gIC8vIENvbXBpbGUgYWxsIHRoZSB0b2tlbnMgaW50byByZWdleHBzLlxuICB2YXIgbWF0Y2hlcyA9IG5ldyBBcnJheSh0b2tlbnMubGVuZ3RoKVxuXG4gIC8vIENvbXBpbGUgYWxsIHRoZSBwYXR0ZXJucyBiZWZvcmUgY29tcGlsYXRpb24uXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHR5cGVvZiB0b2tlbnNbaV0gPT09ICdvYmplY3QnKSB7XG4gICAgICBtYXRjaGVzW2ldID0gbmV3IFJlZ0V4cCgnXig/OicgKyB0b2tlbnNbaV0ucGF0dGVybiArICcpJCcsIGZsYWdzKG9wdGlvbnMpKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAob2JqLCBvcHRzKSB7XG4gICAgdmFyIHBhdGggPSAnJ1xuICAgIHZhciBkYXRhID0gb2JqIHx8IHt9XG4gICAgdmFyIG9wdGlvbnMgPSBvcHRzIHx8IHt9XG4gICAgdmFyIGVuY29kZSA9IG9wdGlvbnMucHJldHR5ID8gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IDogZW5jb2RlVVJJQ29tcG9uZW50XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHBhdGggKz0gdG9rZW5cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICB2YXIgdmFsdWUgPSBkYXRhW3Rva2VuLm5hbWVdXG4gICAgICB2YXIgc2VnbWVudFxuXG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAvLyBQcmVwZW5kIHBhcnRpYWwgc2VnbWVudCBwcmVmaXhlcy5cbiAgICAgICAgICBpZiAodG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXhcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gYmUgZGVmaW5lZCcpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGlzYXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGlmICghdG9rZW4ucmVwZWF0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgcmVwZWF0LCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgKyAnYCcpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCBiZSBlbXB0eScpXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWx1ZS5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHNlZ21lbnQgPSBlbmNvZGUodmFsdWVbal0pXG5cbiAgICAgICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYWxsIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkoc2VnbWVudCkgKyAnYCcpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGF0aCArPSAoaiA9PT0gMCA/IHRva2VuLnByZWZpeCA6IHRva2VuLmRlbGltaXRlcikgKyBzZWdtZW50XG4gICAgICAgIH1cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBzZWdtZW50ID0gdG9rZW4uYXN0ZXJpc2sgPyBlbmNvZGVBc3Rlcmlzayh2YWx1ZSkgOiBlbmNvZGUodmFsdWUpXG5cbiAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIFwiJyArIHNlZ21lbnQgKyAnXCInKVxuICAgICAgfVxuXG4gICAgICBwYXRoICs9IHRva2VuLnByZWZpeCArIHNlZ21lbnRcbiAgICB9XG5cbiAgICByZXR1cm4gcGF0aFxuICB9XG59XG5cbi8qKlxuICogRXNjYXBlIGEgcmVndWxhciBleHByZXNzaW9uIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVTdHJpbmcgKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18XFwvXFxcXF0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEVzY2FwZSB0aGUgY2FwdHVyaW5nIGdyb3VwIGJ5IGVzY2FwaW5nIHNwZWNpYWwgY2hhcmFjdGVycyBhbmQgbWVhbmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGdyb3VwXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZUdyb3VwIChncm91cCkge1xuICByZXR1cm4gZ3JvdXAucmVwbGFjZSgvKFs9ITokXFwvKCldKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBBdHRhY2ggdGhlIGtleXMgYXMgYSBwcm9wZXJ0eSBvZiB0aGUgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHJlXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhdHRhY2hLZXlzIChyZSwga2V5cykge1xuICByZS5rZXlzID0ga2V5c1xuICByZXR1cm4gcmVcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGZsYWdzIGZvciBhIHJlZ2V4cCBmcm9tIHRoZSBvcHRpb25zLlxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBmbGFncyAob3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucyAmJiBvcHRpb25zLnNlbnNpdGl2ZSA/ICcnIDogJ2knXG59XG5cbi8qKlxuICogUHVsbCBvdXQga2V5cyBmcm9tIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHJlZ2V4cFRvUmVnZXhwIChwYXRoLCBrZXlzKSB7XG4gIC8vIFVzZSBhIG5lZ2F0aXZlIGxvb2thaGVhZCB0byBtYXRjaCBvbmx5IGNhcHR1cmluZyBncm91cHMuXG4gIHZhciBncm91cHMgPSBwYXRoLnNvdXJjZS5tYXRjaCgvXFwoKD8hXFw/KS9nKVxuXG4gIGlmIChncm91cHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdyb3Vwcy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5cy5wdXNoKHtcbiAgICAgICAgbmFtZTogaSxcbiAgICAgICAgcHJlZml4OiBudWxsLFxuICAgICAgICBkZWxpbWl0ZXI6IG51bGwsXG4gICAgICAgIG9wdGlvbmFsOiBmYWxzZSxcbiAgICAgICAgcmVwZWF0OiBmYWxzZSxcbiAgICAgICAgcGFydGlhbDogZmFsc2UsXG4gICAgICAgIGFzdGVyaXNrOiBmYWxzZSxcbiAgICAgICAgcGF0dGVybjogbnVsbFxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhwYXRoLCBrZXlzKVxufVxuXG4vKipcbiAqIFRyYW5zZm9ybSBhbiBhcnJheSBpbnRvIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gIHBhdGhcbiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGFycmF5VG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgdmFyIHBhcnRzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICBwYXJ0cy5wdXNoKHBhdGhUb1JlZ2V4cChwYXRoW2ldLCBrZXlzLCBvcHRpb25zKS5zb3VyY2UpXG4gIH1cblxuICB2YXIgcmVnZXhwID0gbmV3IFJlZ0V4cCgnKD86JyArIHBhcnRzLmpvaW4oJ3wnKSArICcpJywgZmxhZ3Mob3B0aW9ucykpXG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocmVnZXhwLCBrZXlzKVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIHBhdGggcmVnZXhwIGZyb20gc3RyaW5nIGlucHV0LlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHN0cmluZ1RvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb1JlZ0V4cChwYXJzZShwYXRoLCBvcHRpb25zKSwga2V5cywgb3B0aW9ucylcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBmdW5jdGlvbiBmb3IgdGFraW5nIHRva2VucyBhbmQgcmV0dXJuaW5nIGEgUmVnRXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gICAgICAgICAgdG9rZW5zXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19IGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9SZWdFeHAgKHRva2Vucywga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKVxuICAgIGtleXMgPSBbXVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICB2YXIgc3RyaWN0ID0gb3B0aW9ucy5zdHJpY3RcbiAgdmFyIGVuZCA9IG9wdGlvbnMuZW5kICE9PSBmYWxzZVxuICB2YXIgcm91dGUgPSAnJ1xuXG4gIC8vIEl0ZXJhdGUgb3ZlciB0aGUgdG9rZW5zIGFuZCBjcmVhdGUgb3VyIHJlZ2V4cCBzdHJpbmcuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgcm91dGUgKz0gZXNjYXBlU3RyaW5nKHRva2VuKVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcHJlZml4ID0gZXNjYXBlU3RyaW5nKHRva2VuLnByZWZpeClcbiAgICAgIHZhciBjYXB0dXJlID0gJyg/OicgKyB0b2tlbi5wYXR0ZXJuICsgJyknXG5cbiAgICAgIGtleXMucHVzaCh0b2tlbilcblxuICAgICAgaWYgKHRva2VuLnJlcGVhdCkge1xuICAgICAgICBjYXB0dXJlICs9ICcoPzonICsgcHJlZml4ICsgY2FwdHVyZSArICcpKidcbiAgICAgIH1cblxuICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgIGlmICghdG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgIGNhcHR1cmUgPSAnKD86JyArIHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSk/J1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyk/J1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpJ1xuICAgICAgfVxuXG4gICAgICByb3V0ZSArPSBjYXB0dXJlXG4gICAgfVxuICB9XG5cbiAgdmFyIGRlbGltaXRlciA9IGVzY2FwZVN0cmluZyhvcHRpb25zLmRlbGltaXRlciB8fCAnLycpXG4gIHZhciBlbmRzV2l0aERlbGltaXRlciA9IHJvdXRlLnNsaWNlKC1kZWxpbWl0ZXIubGVuZ3RoKSA9PT0gZGVsaW1pdGVyXG5cbiAgLy8gSW4gbm9uLXN0cmljdCBtb2RlIHdlIGFsbG93IGEgc2xhc2ggYXQgdGhlIGVuZCBvZiBtYXRjaC4gSWYgdGhlIHBhdGggdG9cbiAgLy8gbWF0Y2ggYWxyZWFkeSBlbmRzIHdpdGggYSBzbGFzaCwgd2UgcmVtb3ZlIGl0IGZvciBjb25zaXN0ZW5jeS4gVGhlIHNsYXNoXG4gIC8vIGlzIHZhbGlkIGF0IHRoZSBlbmQgb2YgYSBwYXRoIG1hdGNoLCBub3QgaW4gdGhlIG1pZGRsZS4gVGhpcyBpcyBpbXBvcnRhbnRcbiAgLy8gaW4gbm9uLWVuZGluZyBtb2RlLCB3aGVyZSBcIi90ZXN0L1wiIHNob3VsZG4ndCBtYXRjaCBcIi90ZXN0Ly9yb3V0ZVwiLlxuICBpZiAoIXN0cmljdCkge1xuICAgIHJvdXRlID0gKGVuZHNXaXRoRGVsaW1pdGVyID8gcm91dGUuc2xpY2UoMCwgLWRlbGltaXRlci5sZW5ndGgpIDogcm91dGUpICsgJyg/OicgKyBkZWxpbWl0ZXIgKyAnKD89JCkpPydcbiAgfVxuXG4gIGlmIChlbmQpIHtcbiAgICByb3V0ZSArPSAnJCdcbiAgfSBlbHNlIHtcbiAgICAvLyBJbiBub24tZW5kaW5nIG1vZGUsIHdlIG5lZWQgdGhlIGNhcHR1cmluZyBncm91cHMgdG8gbWF0Y2ggYXMgbXVjaCBhc1xuICAgIC8vIHBvc3NpYmxlIGJ5IHVzaW5nIGEgcG9zaXRpdmUgbG9va2FoZWFkIHRvIHRoZSBlbmQgb3IgbmV4dCBwYXRoIHNlZ21lbnQuXG4gICAgcm91dGUgKz0gc3RyaWN0ICYmIGVuZHNXaXRoRGVsaW1pdGVyID8gJycgOiAnKD89JyArIGRlbGltaXRlciArICd8JCknXG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhuZXcgUmVnRXhwKCdeJyArIHJvdXRlLCBmbGFncyhvcHRpb25zKSksIGtleXMpXG59XG5cbi8qKlxuICogTm9ybWFsaXplIHRoZSBnaXZlbiBwYXRoIHN0cmluZywgcmV0dXJuaW5nIGEgcmVndWxhciBleHByZXNzaW9uLlxuICpcbiAqIEFuIGVtcHR5IGFycmF5IGNhbiBiZSBwYXNzZWQgaW4gZm9yIHRoZSBrZXlzLCB3aGljaCB3aWxsIGhvbGQgdGhlXG4gKiBwbGFjZWhvbGRlciBrZXkgZGVzY3JpcHRpb25zLiBGb3IgZXhhbXBsZSwgdXNpbmcgYC91c2VyLzppZGAsIGBrZXlzYCB3aWxsXG4gKiBjb250YWluIGBbeyBuYW1lOiAnaWQnLCBkZWxpbWl0ZXI6ICcvJywgb3B0aW9uYWw6IGZhbHNlLCByZXBlYXQ6IGZhbHNlIH1dYC5cbiAqXG4gKiBAcGFyYW0gIHsoc3RyaW5nfFJlZ0V4cHxBcnJheSl9IHBhdGhcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0gICAgICAga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBwYXRoVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucylcbiAgICBrZXlzID0gW11cbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgaWYgKHBhdGggaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICByZXR1cm4gcmVnZXhwVG9SZWdleHAocGF0aCwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSlcbiAgfVxuXG4gIGlmIChpc2FycmF5KHBhdGgpKSB7XG4gICAgcmV0dXJuIGFycmF5VG9SZWdleHAoLyoqIEB0eXBlIHshQXJyYXl9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbiAgfVxuXG4gIHJldHVybiBzdHJpbmdUb1JlZ2V4cCgvKiogQHR5cGUge3N0cmluZ30gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxufVxuIiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGFmID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYWYnLCB7XG4gICAgICAgIG1vbnRocyA6ICdKYW51YXJpZV9GZWJydWFyaWVfTWFhcnRfQXByaWxfTWVpX0p1bmllX0p1bGllX0F1Z3VzdHVzX1NlcHRlbWJlcl9Pa3RvYmVyX05vdmVtYmVyX0Rlc2VtYmVyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdKYW5fRmViX01ydF9BcHJfTWVpX0p1bl9KdWxfQXVnX1NlcF9Pa3RfTm92X0Rlcycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnU29uZGFnX01hYW5kYWdfRGluc2RhZ19Xb2Vuc2RhZ19Eb25kZXJkYWdfVnJ5ZGFnX1NhdGVyZGFnJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ1Nvbl9NYWFfRGluX1dvZV9Eb25fVnJ5X1NhdCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnU29fTWFfRGlfV29fRG9fVnJfU2EnLnNwbGl0KCdfJyksXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC92bXxubS9pLFxuICAgICAgICBpc1BNIDogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gL15ubSQvaS50ZXN0KGlucHV0KTtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VycyA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAndm0nIDogJ1ZNJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAnbm0nIDogJ05NJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW1ZhbmRhZyBvbV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdbTcO0cmUgb21dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW29tXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1tHaXN0ZXIgb21dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1tMYWFzXSBkZGRkIFtvbV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ29vciAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIGdlbGVkZScsXG4gICAgICAgICAgICBzIDogJ1xcJ24gcGFhciBzZWtvbmRlcycsXG4gICAgICAgICAgICBzcyA6ICclZCBzZWtvbmRlcycsXG4gICAgICAgICAgICBtIDogJ1xcJ24gbWludXV0JyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbnV0ZScsXG4gICAgICAgICAgICBoIDogJ1xcJ24gdXVyJyxcbiAgICAgICAgICAgIGhoIDogJyVkIHVyZScsXG4gICAgICAgICAgICBkIDogJ1xcJ24gZGFnJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGRhZScsXG4gICAgICAgICAgICBNIDogJ1xcJ24gbWFhbmQnLFxuICAgICAgICAgICAgTU0gOiAnJWQgbWFhbmRlJyxcbiAgICAgICAgICAgIHkgOiAnXFwnbiBqYWFyJyxcbiAgICAgICAgICAgIHl5IDogJyVkIGphYXInXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShzdGV8ZGUpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAoKG51bWJlciA9PT0gMSB8fCBudW1iZXIgPT09IDggfHwgbnVtYmVyID49IDIwKSA/ICdzdGUnIDogJ2RlJyk7IC8vIFRoYW5rcyB0byBKb3JpcyBSw7ZsaW5nIDogaHR0cHM6Ly9naXRodWIuY29tL2pqdXBpdGVyXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNYWFuZGFnIGlzIGRpZSBlZXJzdGUgZGFnIHZhbiBkaWUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIERpZSB3ZWVrIHdhdCBkaWUgNGRlIEphbnVhcmllIGJldmF0IGlzIGRpZSBlZXJzdGUgd2VlayB2YW4gZGllIGphYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBhZjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHN5bWJvbE1hcCA9IHtcbiAgICAgICAgJzEnOiAn2aEnLFxuICAgICAgICAnMic6ICfZoicsXG4gICAgICAgICczJzogJ9mjJyxcbiAgICAgICAgJzQnOiAn2aQnLFxuICAgICAgICAnNSc6ICfZpScsXG4gICAgICAgICc2JzogJ9mmJyxcbiAgICAgICAgJzcnOiAn2acnLFxuICAgICAgICAnOCc6ICfZqCcsXG4gICAgICAgICc5JzogJ9mpJyxcbiAgICAgICAgJzAnOiAn2aAnXG4gICAgfSwgbnVtYmVyTWFwID0ge1xuICAgICAgICAn2aEnOiAnMScsXG4gICAgICAgICfZoic6ICcyJyxcbiAgICAgICAgJ9mjJzogJzMnLFxuICAgICAgICAn2aQnOiAnNCcsXG4gICAgICAgICfZpSc6ICc1JyxcbiAgICAgICAgJ9mmJzogJzYnLFxuICAgICAgICAn2acnOiAnNycsXG4gICAgICAgICfZqCc6ICc4JyxcbiAgICAgICAgJ9mpJzogJzknLFxuICAgICAgICAn2aAnOiAnMCdcbiAgICB9LCBwbHVyYWxGb3JtID0gZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgcmV0dXJuIG4gPT09IDAgPyAwIDogbiA9PT0gMSA/IDEgOiBuID09PSAyID8gMiA6IG4gJSAxMDAgPj0gMyAmJiBuICUgMTAwIDw9IDEwID8gMyA6IG4gJSAxMDAgPj0gMTEgPyA0IDogNTtcbiAgICB9LCBwbHVyYWxzID0ge1xuICAgICAgICBzIDogWyfYo9mC2YQg2YXZhiDYq9in2YbZitipJywgJ9ir2KfZhtmK2Kkg2YjYp9it2K/YqScsIFsn2KvYp9mG2YrYqtin2YYnLCAn2KvYp9mG2YrYqtmK2YYnXSwgJyVkINir2YjYp9mGJywgJyVkINir2KfZhtmK2KknLCAnJWQg2KvYp9mG2YrYqSddLFxuICAgICAgICBtIDogWyfYo9mC2YQg2YXZhiDYr9mC2YrZgtipJywgJ9iv2YLZitmC2Kkg2YjYp9it2K/YqScsIFsn2K/ZgtmK2YLYqtin2YYnLCAn2K/ZgtmK2YLYqtmK2YYnXSwgJyVkINiv2YLYp9im2YInLCAnJWQg2K/ZgtmK2YLYqScsICclZCDYr9mC2YrZgtipJ10sXG4gICAgICAgIGggOiBbJ9ij2YLZhCDZhdmGINiz2KfYudipJywgJ9iz2KfYudipINmI2KfYrdiv2KknLCBbJ9iz2KfYudiq2KfZhicsICfYs9in2LnYqtmK2YYnXSwgJyVkINiz2KfYudin2KonLCAnJWQg2LPYp9i52KknLCAnJWQg2LPYp9i52KknXSxcbiAgICAgICAgZCA6IFsn2KPZgtmEINmF2YYg2YrZiNmFJywgJ9mK2YjZhSDZiNin2K3YrycsIFsn2YrZiNmF2KfZhicsICfZitmI2YXZitmGJ10sICclZCDYo9mK2KfZhScsICclZCDZitmI2YXZi9inJywgJyVkINmK2YjZhSddLFxuICAgICAgICBNIDogWyfYo9mC2YQg2YXZhiDYtNmH2LEnLCAn2LTZh9ixINmI2KfYrdivJywgWyfYtNmH2LHYp9mGJywgJ9i02YfYsdmK2YYnXSwgJyVkINij2LTZh9ixJywgJyVkINi02YfYsdinJywgJyVkINi02YfYsSddLFxuICAgICAgICB5IDogWyfYo9mC2YQg2YXZhiDYudin2YUnLCAn2LnYp9mFINmI2KfYrdivJywgWyfYudin2YXYp9mGJywgJ9i52KfZhdmK2YYnXSwgJyVkINij2LnZiNin2YUnLCAnJWQg2LnYp9mF2YvYpycsICclZCDYudin2YUnXVxuICAgIH0sIHBsdXJhbGl6ZSA9IGZ1bmN0aW9uICh1KSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAobnVtYmVyLCB3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKSB7XG4gICAgICAgICAgICB2YXIgZiA9IHBsdXJhbEZvcm0obnVtYmVyKSxcbiAgICAgICAgICAgICAgICBzdHIgPSBwbHVyYWxzW3VdW3BsdXJhbEZvcm0obnVtYmVyKV07XG4gICAgICAgICAgICBpZiAoZiA9PT0gMikge1xuICAgICAgICAgICAgICAgIHN0ciA9IHN0clt3aXRob3V0U3VmZml4ID8gMCA6IDFdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKC8lZC9pLCBudW1iZXIpO1xuICAgICAgICB9O1xuICAgIH0sIG1vbnRocyA9IFtcbiAgICAgICAgJ9mK2YbYp9mK2LEnLFxuICAgICAgICAn2YHYqNix2KfZitixJyxcbiAgICAgICAgJ9mF2KfYsdizJyxcbiAgICAgICAgJ9ij2KjYsdmK2YQnLFxuICAgICAgICAn2YXYp9mK2YgnLFxuICAgICAgICAn2YrZiNmG2YrZiCcsXG4gICAgICAgICfZitmI2YTZitmIJyxcbiAgICAgICAgJ9ij2LrYs9i32LMnLFxuICAgICAgICAn2LPYqNiq2YXYqNixJyxcbiAgICAgICAgJ9ij2YPYqtmI2KjYsScsXG4gICAgICAgICfZhtmI2YHZhdio2LEnLFxuICAgICAgICAn2K/Zitiz2YXYqNixJ1xuICAgIF07XG5cbiAgICB2YXIgYXIgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdhcicsIHtcbiAgICAgICAgbW9udGhzIDogbW9udGhzLFxuICAgICAgICBtb250aHNTaG9ydCA6IG1vbnRocyxcbiAgICAgICAgd2Vla2RheXMgOiAn2KfZhNij2K3Yr1/Yp9mE2KXYq9mG2YrZhl/Yp9mE2KvZhNin2KvYp9ihX9in2YTYo9ix2KjYudin2KFf2KfZhNiu2YXZitizX9in2YTYrNmF2LnYqV/Yp9mE2LPYqNiqJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ9ij2K3Yr1/Ypdir2YbZitmGX9ir2YTYp9ir2KfYoV/Yo9ix2KjYudin2KFf2K7ZhdmK2LNf2KzZhdi52Klf2LPYqNiqJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICfYrV/Zhl/Yq1/YsV/Yrl/YrF/Ysycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdEL1xcdTIwMEZNL1xcdTIwMEZZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/YtXzZhS8sXG4gICAgICAgIGlzUE0gOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAn2YUnID09PSBpbnB1dDtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfYtSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn2YUnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb2KfZhNmK2YjZhSDYudmG2K8g2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW9i62K/Zi9inINi52YbYryDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBb2LnZhtivINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vYo9mF2LMg2LnZhtivINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFvYudmG2K8g2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICfYqNi52K8gJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICfZhdmG2LAgJXMnLFxuICAgICAgICAgICAgcyA6IHBsdXJhbGl6ZSgncycpLFxuICAgICAgICAgICAgc3MgOiBwbHVyYWxpemUoJ3MnKSxcbiAgICAgICAgICAgIG0gOiBwbHVyYWxpemUoJ20nKSxcbiAgICAgICAgICAgIG1tIDogcGx1cmFsaXplKCdtJyksXG4gICAgICAgICAgICBoIDogcGx1cmFsaXplKCdoJyksXG4gICAgICAgICAgICBoaCA6IHBsdXJhbGl6ZSgnaCcpLFxuICAgICAgICAgICAgZCA6IHBsdXJhbGl6ZSgnZCcpLFxuICAgICAgICAgICAgZGQgOiBwbHVyYWxpemUoJ2QnKSxcbiAgICAgICAgICAgIE0gOiBwbHVyYWxpemUoJ00nKSxcbiAgICAgICAgICAgIE1NIDogcGx1cmFsaXplKCdNJyksXG4gICAgICAgICAgICB5IDogcGx1cmFsaXplKCd5JyksXG4gICAgICAgICAgICB5eSA6IHBsdXJhbGl6ZSgneScpXG4gICAgICAgIH0sXG4gICAgICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1vZodmi2aPZpNml2abZp9mo2anZoF0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgICAgICB9KS5yZXBsYWNlKC/YjC9nLCAnLCcpO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ltYm9sTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pLnJlcGxhY2UoLywvZywgJ9iMJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiA2LCAvLyBTYXR1cmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogMTIgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDEydGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBhcjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGFyRHogPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdhci1keicsIHtcbiAgICAgICAgbW9udGhzIDogJ9is2KfZhtmB2Ypf2YHZitmB2LHZil/Zhdin2LHYs1/Yo9mB2LHZitmEX9mF2KfZil/YrNmI2KfZhl/YrNmI2YrZhNmK2Klf2KPZiNiqX9iz2KjYqtmF2KjYsV/Yo9mD2KrZiNio2LFf2YbZiNmB2YXYqNixX9iv2YrYs9mF2KjYsScuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAn2KzYp9mG2YHZil/ZgdmK2YHYsdmKX9mF2KfYsdizX9ij2YHYsdmK2YRf2YXYp9mKX9is2YjYp9mGX9is2YjZitmE2YrYqV/Yo9mI2Kpf2LPYqNiq2YXYqNixX9ij2YPYqtmI2KjYsV/ZhtmI2YHZhdio2LFf2K/Zitiz2YXYqNixJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICfYp9mE2KPYrdivX9in2YTYpdir2YbZitmGX9in2YTYq9mE2KfYq9in2KFf2KfZhNij2LHYqNi52KfYoV/Yp9mE2K7ZhdmK2LNf2KfZhNis2YXYudipX9in2YTYs9io2KonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn2KfYrdivX9in2KvZhtmK2YZf2KvZhNin2KvYp9ihX9in2LHYqNi52KfYoV/YrtmF2YrYs1/YrNmF2LnYqV/Ys9io2KonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ9ij2K1f2KXYq1/Yq9mE2Kdf2KPYsV/YrtmFX9is2YVf2LPYqCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vYp9mE2YrZiNmFINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb2LrYr9inINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBb2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vYo9mF2LMg2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFvYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICfZgdmKICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAn2YXZhtiwICVzJyxcbiAgICAgICAgICAgIHMgOiAn2KvZiNin2YYnLFxuICAgICAgICAgICAgc3MgOiAnJWQg2KvYp9mG2YrYqScsXG4gICAgICAgICAgICBtIDogJ9iv2YLZitmC2KknLFxuICAgICAgICAgICAgbW0gOiAnJWQg2K/Zgtin2KbZgicsXG4gICAgICAgICAgICBoIDogJ9iz2KfYudipJyxcbiAgICAgICAgICAgIGhoIDogJyVkINiz2KfYudin2KonLFxuICAgICAgICAgICAgZCA6ICfZitmI2YUnLFxuICAgICAgICAgICAgZGQgOiAnJWQg2KPZitin2YUnLFxuICAgICAgICAgICAgTSA6ICfYtNmH2LEnLFxuICAgICAgICAgICAgTU0gOiAnJWQg2KPYtNmH2LEnLFxuICAgICAgICAgICAgeSA6ICfYs9mG2KknLFxuICAgICAgICAgICAgeXkgOiAnJWQg2LPZhtmI2KfYqidcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gYXJEejtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGFyS3cgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdhci1rdycsIHtcbiAgICAgICAgbW9udGhzIDogJ9mK2YbYp9mK2LFf2YHYqNix2KfZitixX9mF2KfYsdizX9ij2KjYsdmK2YRf2YXYp9mKX9mK2YjZhtmK2Yhf2YrZiNmE2YrZiNiyX9i62LTYql/YtNiq2YbYqNixX9ij2YPYqtmI2KjYsV/ZhtmI2YbYqNixX9iv2KzZhtio2LEnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ9mK2YbYp9mK2LFf2YHYqNix2KfZitixX9mF2KfYsdizX9ij2KjYsdmK2YRf2YXYp9mKX9mK2YjZhtmK2Yhf2YrZiNmE2YrZiNiyX9i62LTYql/YtNiq2YbYqNixX9ij2YPYqtmI2KjYsV/ZhtmI2YbYqNixX9iv2KzZhtio2LEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ9in2YTYo9it2K9f2KfZhNil2KrZhtmK2YZf2KfZhNir2YTYp9ir2KfYoV/Yp9mE2KPYsdio2LnYp9ihX9in2YTYrtmF2YrYs1/Yp9mE2KzZhdi52Klf2KfZhNiz2KjYqicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfYp9it2K9f2KfYqtmG2YrZhl/Yq9mE2KfYq9in2KFf2KfYsdio2LnYp9ihX9iu2YXZitizX9is2YXYudipX9iz2KjYqicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn2K1f2YZf2Ktf2LFf2K5f2Kxf2LMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb2KfZhNmK2YjZhSDYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW9i62K/YpyDYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW9i52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb2KPZhdizINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBb2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAn2YHZiiAlcycsXG4gICAgICAgICAgICBwYXN0IDogJ9mF2YbYsCAlcycsXG4gICAgICAgICAgICBzIDogJ9ir2YjYp9mGJyxcbiAgICAgICAgICAgIHNzIDogJyVkINir2KfZhtmK2KknLFxuICAgICAgICAgICAgbSA6ICfYr9mC2YrZgtipJyxcbiAgICAgICAgICAgIG1tIDogJyVkINiv2YLYp9im2YInLFxuICAgICAgICAgICAgaCA6ICfYs9in2LnYqScsXG4gICAgICAgICAgICBoaCA6ICclZCDYs9in2LnYp9iqJyxcbiAgICAgICAgICAgIGQgOiAn2YrZiNmFJyxcbiAgICAgICAgICAgIGRkIDogJyVkINij2YrYp9mFJyxcbiAgICAgICAgICAgIE0gOiAn2LTZh9ixJyxcbiAgICAgICAgICAgIE1NIDogJyVkINij2LTZh9ixJyxcbiAgICAgICAgICAgIHkgOiAn2LPZhtipJyxcbiAgICAgICAgICAgIHl5IDogJyVkINiz2YbZiNin2KonXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDEyICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxMnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gYXJLdztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHN5bWJvbE1hcCA9IHtcbiAgICAgICAgJzEnOiAnMScsXG4gICAgICAgICcyJzogJzInLFxuICAgICAgICAnMyc6ICczJyxcbiAgICAgICAgJzQnOiAnNCcsXG4gICAgICAgICc1JzogJzUnLFxuICAgICAgICAnNic6ICc2JyxcbiAgICAgICAgJzcnOiAnNycsXG4gICAgICAgICc4JzogJzgnLFxuICAgICAgICAnOSc6ICc5JyxcbiAgICAgICAgJzAnOiAnMCdcbiAgICB9LCBwbHVyYWxGb3JtID0gZnVuY3Rpb24gKG4pIHtcbiAgICAgICAgcmV0dXJuIG4gPT09IDAgPyAwIDogbiA9PT0gMSA/IDEgOiBuID09PSAyID8gMiA6IG4gJSAxMDAgPj0gMyAmJiBuICUgMTAwIDw9IDEwID8gMyA6IG4gJSAxMDAgPj0gMTEgPyA0IDogNTtcbiAgICB9LCBwbHVyYWxzID0ge1xuICAgICAgICBzIDogWyfYo9mC2YQg2YXZhiDYq9in2YbZitipJywgJ9ir2KfZhtmK2Kkg2YjYp9it2K/YqScsIFsn2KvYp9mG2YrYqtin2YYnLCAn2KvYp9mG2YrYqtmK2YYnXSwgJyVkINir2YjYp9mGJywgJyVkINir2KfZhtmK2KknLCAnJWQg2KvYp9mG2YrYqSddLFxuICAgICAgICBtIDogWyfYo9mC2YQg2YXZhiDYr9mC2YrZgtipJywgJ9iv2YLZitmC2Kkg2YjYp9it2K/YqScsIFsn2K/ZgtmK2YLYqtin2YYnLCAn2K/ZgtmK2YLYqtmK2YYnXSwgJyVkINiv2YLYp9im2YInLCAnJWQg2K/ZgtmK2YLYqScsICclZCDYr9mC2YrZgtipJ10sXG4gICAgICAgIGggOiBbJ9ij2YLZhCDZhdmGINiz2KfYudipJywgJ9iz2KfYudipINmI2KfYrdiv2KknLCBbJ9iz2KfYudiq2KfZhicsICfYs9in2LnYqtmK2YYnXSwgJyVkINiz2KfYudin2KonLCAnJWQg2LPYp9i52KknLCAnJWQg2LPYp9i52KknXSxcbiAgICAgICAgZCA6IFsn2KPZgtmEINmF2YYg2YrZiNmFJywgJ9mK2YjZhSDZiNin2K3YrycsIFsn2YrZiNmF2KfZhicsICfZitmI2YXZitmGJ10sICclZCDYo9mK2KfZhScsICclZCDZitmI2YXZi9inJywgJyVkINmK2YjZhSddLFxuICAgICAgICBNIDogWyfYo9mC2YQg2YXZhiDYtNmH2LEnLCAn2LTZh9ixINmI2KfYrdivJywgWyfYtNmH2LHYp9mGJywgJ9i02YfYsdmK2YYnXSwgJyVkINij2LTZh9ixJywgJyVkINi02YfYsdinJywgJyVkINi02YfYsSddLFxuICAgICAgICB5IDogWyfYo9mC2YQg2YXZhiDYudin2YUnLCAn2LnYp9mFINmI2KfYrdivJywgWyfYudin2YXYp9mGJywgJ9i52KfZhdmK2YYnXSwgJyVkINij2LnZiNin2YUnLCAnJWQg2LnYp9mF2YvYpycsICclZCDYudin2YUnXVxuICAgIH0sIHBsdXJhbGl6ZSA9IGZ1bmN0aW9uICh1KSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAobnVtYmVyLCB3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKSB7XG4gICAgICAgICAgICB2YXIgZiA9IHBsdXJhbEZvcm0obnVtYmVyKSxcbiAgICAgICAgICAgICAgICBzdHIgPSBwbHVyYWxzW3VdW3BsdXJhbEZvcm0obnVtYmVyKV07XG4gICAgICAgICAgICBpZiAoZiA9PT0gMikge1xuICAgICAgICAgICAgICAgIHN0ciA9IHN0clt3aXRob3V0U3VmZml4ID8gMCA6IDFdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKC8lZC9pLCBudW1iZXIpO1xuICAgICAgICB9O1xuICAgIH0sIG1vbnRocyA9IFtcbiAgICAgICAgJ9mK2YbYp9mK2LEnLFxuICAgICAgICAn2YHYqNix2KfZitixJyxcbiAgICAgICAgJ9mF2KfYsdizJyxcbiAgICAgICAgJ9ij2KjYsdmK2YQnLFxuICAgICAgICAn2YXYp9mK2YgnLFxuICAgICAgICAn2YrZiNmG2YrZiCcsXG4gICAgICAgICfZitmI2YTZitmIJyxcbiAgICAgICAgJ9ij2LrYs9i32LMnLFxuICAgICAgICAn2LPYqNiq2YXYqNixJyxcbiAgICAgICAgJ9ij2YPYqtmI2KjYsScsXG4gICAgICAgICfZhtmI2YHZhdio2LEnLFxuICAgICAgICAn2K/Zitiz2YXYqNixJ1xuICAgIF07XG5cbiAgICB2YXIgYXJMeSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2FyLWx5Jywge1xuICAgICAgICBtb250aHMgOiBtb250aHMsXG4gICAgICAgIG1vbnRoc1Nob3J0IDogbW9udGhzLFxuICAgICAgICB3ZWVrZGF5cyA6ICfYp9mE2KPYrdivX9in2YTYpdir2YbZitmGX9in2YTYq9mE2KfYq9in2KFf2KfZhNij2LHYqNi52KfYoV/Yp9mE2K7ZhdmK2LNf2KfZhNis2YXYudipX9in2YTYs9io2KonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn2KPYrdivX9il2KvZhtmK2YZf2KvZhNin2KvYp9ihX9ij2LHYqNi52KfYoV/YrtmF2YrYs1/YrNmF2LnYqV/Ys9io2KonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ9itX9mGX9irX9ixX9iuX9isX9izJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0QvXFx1MjAwRk0vXFx1MjAwRllZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL9i1fNmFLyxcbiAgICAgICAgaXNQTSA6IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuICfZhScgPT09IGlucHV0O1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9i1JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfZhSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vYp9mE2YrZiNmFINi52YbYryDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb2LrYr9mL2Kcg2LnZhtivINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFvYudmG2K8g2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW9ij2YXYsyDYudmG2K8g2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW9i52YbYryDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ9io2LnYryAlcycsXG4gICAgICAgICAgICBwYXN0IDogJ9mF2YbYsCAlcycsXG4gICAgICAgICAgICBzIDogcGx1cmFsaXplKCdzJyksXG4gICAgICAgICAgICBzcyA6IHBsdXJhbGl6ZSgncycpLFxuICAgICAgICAgICAgbSA6IHBsdXJhbGl6ZSgnbScpLFxuICAgICAgICAgICAgbW0gOiBwbHVyYWxpemUoJ20nKSxcbiAgICAgICAgICAgIGggOiBwbHVyYWxpemUoJ2gnKSxcbiAgICAgICAgICAgIGhoIDogcGx1cmFsaXplKCdoJyksXG4gICAgICAgICAgICBkIDogcGx1cmFsaXplKCdkJyksXG4gICAgICAgICAgICBkZCA6IHBsdXJhbGl6ZSgnZCcpLFxuICAgICAgICAgICAgTSA6IHBsdXJhbGl6ZSgnTScpLFxuICAgICAgICAgICAgTU0gOiBwbHVyYWxpemUoJ00nKSxcbiAgICAgICAgICAgIHkgOiBwbHVyYWxpemUoJ3knKSxcbiAgICAgICAgICAgIHl5IDogcGx1cmFsaXplKCd5JylcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgv2IwvZywgJywnKTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgICAgICB9KS5yZXBsYWNlKC8sL2csICfYjCcpO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogNiwgLy8gU2F0dXJkYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDEyICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxMnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gYXJMeTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGFyTWEgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdhci1tYScsIHtcbiAgICAgICAgbW9udGhzIDogJ9mK2YbYp9mK2LFf2YHYqNix2KfZitixX9mF2KfYsdizX9ij2KjYsdmK2YRf2YXYp9mKX9mK2YjZhtmK2Yhf2YrZiNmE2YrZiNiyX9i62LTYql/YtNiq2YbYqNixX9ij2YPYqtmI2KjYsV/ZhtmI2YbYqNixX9iv2KzZhtio2LEnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ9mK2YbYp9mK2LFf2YHYqNix2KfZitixX9mF2KfYsdizX9ij2KjYsdmK2YRf2YXYp9mKX9mK2YjZhtmK2Yhf2YrZiNmE2YrZiNiyX9i62LTYql/YtNiq2YbYqNixX9ij2YPYqtmI2KjYsV/ZhtmI2YbYqNixX9iv2KzZhtio2LEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ9in2YTYo9it2K9f2KfZhNil2KrZhtmK2YZf2KfZhNir2YTYp9ir2KfYoV/Yp9mE2KPYsdio2LnYp9ihX9in2YTYrtmF2YrYs1/Yp9mE2KzZhdi52Klf2KfZhNiz2KjYqicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfYp9it2K9f2KfYqtmG2YrZhl/Yq9mE2KfYq9in2KFf2KfYsdio2LnYp9ihX9iu2YXZitizX9is2YXYudipX9iz2KjYqicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn2K1f2YZf2Ktf2LFf2K5f2Kxf2LMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb2KfZhNmK2YjZhSDYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW9i62K/YpyDYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW9i52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb2KPZhdizINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBb2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAn2YHZiiAlcycsXG4gICAgICAgICAgICBwYXN0IDogJ9mF2YbYsCAlcycsXG4gICAgICAgICAgICBzIDogJ9ir2YjYp9mGJyxcbiAgICAgICAgICAgIHNzIDogJyVkINir2KfZhtmK2KknLFxuICAgICAgICAgICAgbSA6ICfYr9mC2YrZgtipJyxcbiAgICAgICAgICAgIG1tIDogJyVkINiv2YLYp9im2YInLFxuICAgICAgICAgICAgaCA6ICfYs9in2LnYqScsXG4gICAgICAgICAgICBoaCA6ICclZCDYs9in2LnYp9iqJyxcbiAgICAgICAgICAgIGQgOiAn2YrZiNmFJyxcbiAgICAgICAgICAgIGRkIDogJyVkINij2YrYp9mFJyxcbiAgICAgICAgICAgIE0gOiAn2LTZh9ixJyxcbiAgICAgICAgICAgIE1NIDogJyVkINij2LTZh9ixJyxcbiAgICAgICAgICAgIHkgOiAn2LPZhtipJyxcbiAgICAgICAgICAgIHl5IDogJyVkINiz2YbZiNin2KonXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiA2LCAvLyBTYXR1cmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogMTIgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDEydGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBhck1hO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgc3ltYm9sTWFwID0ge1xuICAgICAgICAnMSc6ICfZoScsXG4gICAgICAgICcyJzogJ9miJyxcbiAgICAgICAgJzMnOiAn2aMnLFxuICAgICAgICAnNCc6ICfZpCcsXG4gICAgICAgICc1JzogJ9mlJyxcbiAgICAgICAgJzYnOiAn2aYnLFxuICAgICAgICAnNyc6ICfZpycsXG4gICAgICAgICc4JzogJ9moJyxcbiAgICAgICAgJzknOiAn2aknLFxuICAgICAgICAnMCc6ICfZoCdcbiAgICB9LCBudW1iZXJNYXAgPSB7XG4gICAgICAgICfZoSc6ICcxJyxcbiAgICAgICAgJ9miJzogJzInLFxuICAgICAgICAn2aMnOiAnMycsXG4gICAgICAgICfZpCc6ICc0JyxcbiAgICAgICAgJ9mlJzogJzUnLFxuICAgICAgICAn2aYnOiAnNicsXG4gICAgICAgICfZpyc6ICc3JyxcbiAgICAgICAgJ9moJzogJzgnLFxuICAgICAgICAn2aknOiAnOScsXG4gICAgICAgICfZoCc6ICcwJ1xuICAgIH07XG5cbiAgICB2YXIgYXJTYSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2FyLXNhJywge1xuICAgICAgICBtb250aHMgOiAn2YrZhtin2YrYsV/Zgdio2LHYp9mK2LFf2YXYp9ix2LNf2KPYqNix2YrZhF/Zhdin2YrZiF/ZitmI2YbZitmIX9mK2YjZhNmK2Yhf2KPYutiz2LfYs1/Ys9io2KrZhdio2LFf2KPZg9iq2YjYqNixX9mG2YjZgdmF2KjYsV/Yr9mK2LPZhdio2LEnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ9mK2YbYp9mK2LFf2YHYqNix2KfZitixX9mF2KfYsdizX9ij2KjYsdmK2YRf2YXYp9mK2Yhf2YrZiNmG2YrZiF/ZitmI2YTZitmIX9ij2LrYs9i32LNf2LPYqNiq2YXYqNixX9ij2YPYqtmI2KjYsV/ZhtmI2YHZhdio2LFf2K/Zitiz2YXYqNixJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICfYp9mE2KPYrdivX9in2YTYpdir2YbZitmGX9in2YTYq9mE2KfYq9in2KFf2KfZhNij2LHYqNi52KfYoV/Yp9mE2K7ZhdmK2LNf2KfZhNis2YXYudipX9in2YTYs9io2KonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn2KPYrdivX9il2KvZhtmK2YZf2KvZhNin2KvYp9ihX9ij2LHYqNi52KfYoV/YrtmF2YrYs1/YrNmF2LnYqV/Ys9io2KonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ9itX9mGX9irX9ixX9iuX9isX9izJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL9i1fNmFLyxcbiAgICAgICAgaXNQTSA6IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuICfZhScgPT09IGlucHV0O1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9i1JztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfZhSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vYp9mE2YrZiNmFINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb2LrYr9inINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBb2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vYo9mF2LMg2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFvYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICfZgdmKICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAn2YXZhtiwICVzJyxcbiAgICAgICAgICAgIHMgOiAn2KvZiNin2YYnLFxuICAgICAgICAgICAgc3MgOiAnJWQg2KvYp9mG2YrYqScsXG4gICAgICAgICAgICBtIDogJ9iv2YLZitmC2KknLFxuICAgICAgICAgICAgbW0gOiAnJWQg2K/Zgtin2KbZgicsXG4gICAgICAgICAgICBoIDogJ9iz2KfYudipJyxcbiAgICAgICAgICAgIGhoIDogJyVkINiz2KfYudin2KonLFxuICAgICAgICAgICAgZCA6ICfZitmI2YUnLFxuICAgICAgICAgICAgZGQgOiAnJWQg2KPZitin2YUnLFxuICAgICAgICAgICAgTSA6ICfYtNmH2LEnLFxuICAgICAgICAgICAgTU0gOiAnJWQg2KPYtNmH2LEnLFxuICAgICAgICAgICAgeSA6ICfYs9mG2KknLFxuICAgICAgICAgICAgeXkgOiAnJWQg2LPZhtmI2KfYqidcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvW9mh2aLZo9mk2aXZptmn2ajZqdmgXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pLnJlcGxhY2UoL9iML2csICcsJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvXFxkL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSkucmVwbGFjZSgvLC9nLCAn2IwnKTtcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNiAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gYXJTYTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGFyVG4gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdhci10bicsIHtcbiAgICAgICAgbW9udGhzOiAn2KzYp9mG2YHZil/ZgdmK2YHYsdmKX9mF2KfYsdizX9ij2YHYsdmK2YRf2YXYp9mKX9is2YjYp9mGX9is2YjZitmE2YrYqV/Yo9mI2Kpf2LPYqNiq2YXYqNixX9ij2YPYqtmI2KjYsV/ZhtmI2YHZhdio2LFf2K/Zitiz2YXYqNixJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydDogJ9is2KfZhtmB2Ypf2YHZitmB2LHZil/Zhdin2LHYs1/Yo9mB2LHZitmEX9mF2KfZil/YrNmI2KfZhl/YrNmI2YrZhNmK2Klf2KPZiNiqX9iz2KjYqtmF2KjYsV/Yo9mD2KrZiNio2LFf2YbZiNmB2YXYqNixX9iv2YrYs9mF2KjYsScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICfYp9mE2KPYrdivX9in2YTYpdir2YbZitmGX9in2YTYq9mE2KfYq9in2KFf2KfZhNij2LHYqNi52KfYoV/Yp9mE2K7ZhdmK2LNf2KfZhNis2YXYudipX9in2YTYs9io2KonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfYo9it2K9f2KXYq9mG2YrZhl/Yq9mE2KfYq9in2KFf2KPYsdio2LnYp9ihX9iu2YXZitizX9is2YXYudipX9iz2KjYqicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICfYrV/Zhl/Yq1/YsV/Yrl/YrF/Ysycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb2KfZhNmK2YjZhSDYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW9i62K/YpyDYudmE2Ykg2KfZhNiz2KfYudipXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW9i52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb2KPZhdizINi52YTZiSDYp9mE2LPYp9i52KldIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBb2LnZhNmJINin2YTYs9in2LnYqV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJ9mB2YogJXMnLFxuICAgICAgICAgICAgcGFzdDogJ9mF2YbYsCAlcycsXG4gICAgICAgICAgICBzOiAn2KvZiNin2YYnLFxuICAgICAgICAgICAgc3MgOiAnJWQg2KvYp9mG2YrYqScsXG4gICAgICAgICAgICBtOiAn2K/ZgtmK2YLYqScsXG4gICAgICAgICAgICBtbTogJyVkINiv2YLYp9im2YInLFxuICAgICAgICAgICAgaDogJ9iz2KfYudipJyxcbiAgICAgICAgICAgIGhoOiAnJWQg2LPYp9i52KfYqicsXG4gICAgICAgICAgICBkOiAn2YrZiNmFJyxcbiAgICAgICAgICAgIGRkOiAnJWQg2KPZitin2YUnLFxuICAgICAgICAgICAgTTogJ9i02YfYsScsXG4gICAgICAgICAgICBNTTogJyVkINij2LTZh9ixJyxcbiAgICAgICAgICAgIHk6ICfYs9mG2KknLFxuICAgICAgICAgICAgeXk6ICclZCDYs9mG2YjYp9iqJ1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0IC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGFyVG47XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBzdWZmaXhlcyA9IHtcbiAgICAgICAgMTogJy1pbmNpJyxcbiAgICAgICAgNTogJy1pbmNpJyxcbiAgICAgICAgODogJy1pbmNpJyxcbiAgICAgICAgNzA6ICctaW5jaScsXG4gICAgICAgIDgwOiAnLWluY2knLFxuICAgICAgICAyOiAnLW5jaScsXG4gICAgICAgIDc6ICctbmNpJyxcbiAgICAgICAgMjA6ICctbmNpJyxcbiAgICAgICAgNTA6ICctbmNpJyxcbiAgICAgICAgMzogJy3DvG5jw7wnLFxuICAgICAgICA0OiAnLcO8bmPDvCcsXG4gICAgICAgIDEwMDogJy3DvG5jw7wnLFxuICAgICAgICA2OiAnLW5jxLEnLFxuICAgICAgICA5OiAnLXVuY3UnLFxuICAgICAgICAxMDogJy11bmN1JyxcbiAgICAgICAgMzA6ICctdW5jdScsXG4gICAgICAgIDYwOiAnLcSxbmPEsScsXG4gICAgICAgIDkwOiAnLcSxbmPEsSdcbiAgICB9O1xuXG4gICAgdmFyIGF6ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYXonLCB7XG4gICAgICAgIG1vbnRocyA6ICd5YW52YXJfZmV2cmFsX21hcnRfYXByZWxfbWF5X2l5dW5faXl1bF9hdnF1c3Rfc2VudHlhYnJfb2t0eWFicl9ub3lhYnJfZGVrYWJyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICd5YW5fZmV2X21hcl9hcHJfbWF5X2l5bl9peWxfYXZxX3Nlbl9va3Rfbm95X2Rlaycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnQmF6YXJfQmF6YXIgZXJ0yZlzaV/Dh8mZcsWfyZluYsmZIGF4xZ9hbcSxX8OHyZlyxZ/JmW5iyZlfQ8O8bcmZIGF4xZ9hbcSxX0PDvG3JmV/FnsmZbmLJmScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdCYXpfQnpFX8OHQXhfw4fJmXJfQ0F4X0PDvG1fxZ7JmW4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ0J6X0JFX8OHQV/Dh8mZX0NBX0PDvF/FnsmZJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbYnVnw7xuIHNhYXRdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW3NhYmFoIHNhYXRdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ1tnyZlsyZluIGjJmWZ0yZldIGRkZGQgW3NhYXRdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW2TDvG7JmW5dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1trZcOnyZluIGjJmWZ0yZldIGRkZGQgW3NhYXRdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICclcyBzb25yYScsXG4gICAgICAgICAgICBwYXN0IDogJyVzIMmZdnbJmWwnLFxuICAgICAgICAgICAgcyA6ICdiaXJuZcOnyZkgc2FuaXnJmScsXG4gICAgICAgICAgICBzcyA6ICclZCBzYW5pecmZJyxcbiAgICAgICAgICAgIG0gOiAnYmlyIGTJmXFpccmZJyxcbiAgICAgICAgICAgIG1tIDogJyVkIGTJmXFpccmZJyxcbiAgICAgICAgICAgIGggOiAnYmlyIHNhYXQnLFxuICAgICAgICAgICAgaGggOiAnJWQgc2FhdCcsXG4gICAgICAgICAgICBkIDogJ2JpciBnw7xuJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGfDvG4nLFxuICAgICAgICAgICAgTSA6ICdiaXIgYXknLFxuICAgICAgICAgICAgTU0gOiAnJWQgYXknLFxuICAgICAgICAgICAgeSA6ICdiaXIgaWwnLFxuICAgICAgICAgICAgeXkgOiAnJWQgaWwnXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC9nZWPJmXxzyZloyZlyfGfDvG5kw7x6fGF4xZ9hbS8sXG4gICAgICAgIGlzUE0gOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAvXihnw7xuZMO8enxheMWfYW0pJC8udGVzdChpbnB1dCk7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdnZWPJmSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAnc8mZaMmZcic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZ8O8bmTDvHonO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2F4xZ9hbSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS0oxLFuY8SxfGluY2l8bmNpfMO8bmPDvHxuY8SxfHVuY3UpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDApIHsgIC8vIHNwZWNpYWwgY2FzZSBmb3IgemVyb1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLcSxbmPEsSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgYSA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIGIgPSBudW1iZXIgJSAxMDAgLSBhLFxuICAgICAgICAgICAgICAgIGMgPSBudW1iZXIgPj0gMTAwID8gMTAwIDogbnVsbDtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAoc3VmZml4ZXNbYV0gfHwgc3VmZml4ZXNbYl0gfHwgc3VmZml4ZXNbY10pO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA3ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA3dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBhejtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgZnVuY3Rpb24gcGx1cmFsKHdvcmQsIG51bSkge1xuICAgICAgICB2YXIgZm9ybXMgPSB3b3JkLnNwbGl0KCdfJyk7XG4gICAgICAgIHJldHVybiBudW0gJSAxMCA9PT0gMSAmJiBudW0gJSAxMDAgIT09IDExID8gZm9ybXNbMF0gOiAobnVtICUgMTAgPj0gMiAmJiBudW0gJSAxMCA8PSA0ICYmIChudW0gJSAxMDAgPCAxMCB8fCBudW0gJSAxMDAgPj0gMjApID8gZm9ybXNbMV0gOiBmb3Jtc1syXSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlbGF0aXZlVGltZVdpdGhQbHVyYWwobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXkpIHtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHtcbiAgICAgICAgICAgICdzcyc6IHdpdGhvdXRTdWZmaXggPyAn0YHQtdC60YPQvdC00LBf0YHQtdC60YPQvdC00Ytf0YHQtdC60YPQvdC0JyA6ICfRgdC10LrRg9C90LTRg1/RgdC10LrRg9C90LTRi1/RgdC10LrRg9C90LQnLFxuICAgICAgICAgICAgJ21tJzogd2l0aG91dFN1ZmZpeCA/ICfRhdCy0ZbQu9GW0L3QsF/RhdCy0ZbQu9GW0L3Ri1/RhdCy0ZbQu9GW0L0nIDogJ9GF0LLRltC70ZbQvdGDX9GF0LLRltC70ZbQvdGLX9GF0LLRltC70ZbQvScsXG4gICAgICAgICAgICAnaGgnOiB3aXRob3V0U3VmZml4ID8gJ9Cz0LDQtNC30ZbQvdCwX9Cz0LDQtNC30ZbQvdGLX9Cz0LDQtNC30ZbQvScgOiAn0LPQsNC00LfRltC90YNf0LPQsNC00LfRltC90Ytf0LPQsNC00LfRltC9JyxcbiAgICAgICAgICAgICdkZCc6ICfQtNC30LXQvdGMX9C00L3Rll/QtNC30ZHQvScsXG4gICAgICAgICAgICAnTU0nOiAn0LzQtdGB0Y/Rhl/QvNC10YHRj9GG0Ytf0LzQtdGB0Y/RhtCw0Z4nLFxuICAgICAgICAgICAgJ3l5JzogJ9Cz0L7QtF/Qs9Cw0LTRi1/Qs9Cw0LTQvtGeJ1xuICAgICAgICB9O1xuICAgICAgICBpZiAoa2V5ID09PSAnbScpIHtcbiAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ9GF0LLRltC70ZbQvdCwJyA6ICfRhdCy0ZbQu9GW0L3Rgyc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoa2V5ID09PSAnaCcpIHtcbiAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ9Cz0LDQtNC30ZbQvdCwJyA6ICfQs9Cw0LTQt9GW0L3Rgyc7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJyAnICsgcGx1cmFsKGZvcm1hdFtrZXldLCArbnVtYmVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBiZSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2JlJywge1xuICAgICAgICBtb250aHMgOiB7XG4gICAgICAgICAgICBmb3JtYXQ6ICfRgdGC0YPQtNC30LXQvdGPX9C70Y7RgtCw0LPQsF/RgdCw0LrQsNCy0ZbQutCwX9C60YDQsNGB0LDQstGW0LrQsF/RgtGA0LDRntC90Y9f0YfRjdGA0LLQtdC90Y9f0LvRltC/0LXQvdGPX9C20L3RltGe0L3Rj1/QstC10YDQsNGB0L3Rj1/QutCw0YHRgtGA0YvRh9C90ZbQutCwX9C70ZbRgdGC0LDQv9Cw0LTQsF/RgdC90LXQttC90Y8nLnNwbGl0KCdfJyksXG4gICAgICAgICAgICBzdGFuZGFsb25lOiAn0YHRgtGD0LTQt9C10L3RjF/Qu9GO0YLRi1/RgdCw0LrQsNCy0ZbQul/QutGA0LDRgdCw0LLRltC6X9GC0YDQsNCy0LXQvdGMX9GH0Y3RgNCy0LXQvdGMX9C70ZbQv9C10L3RjF/QttC90ZbQstC10L3RjF/QstC10YDQsNGB0LXQvdGMX9C60LDRgdGC0YDRi9GH0L3RltC6X9C70ZbRgdGC0LDQv9Cw0LRf0YHQvdC10LbQsNC90YwnLnNwbGl0KCdfJylcbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAn0YHRgtGD0LRf0LvRjtGCX9GB0LDQul/QutGA0LDRgV/RgtGA0LDQsl/Rh9GN0YDQsl/Qu9GW0L9f0LbQvdGW0LJf0LLQtdGAX9C60LDRgdGCX9C70ZbRgdGCX9GB0L3QtdC2Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6IHtcbiAgICAgICAgICAgIGZvcm1hdDogJ9C90Y/QtNC30LXQu9GOX9C/0LDQvdGP0LTQt9C10LvQsNC6X9Cw0Z7RgtC+0YDQsNC6X9GB0LXRgNCw0LTRg1/Rh9Cw0YbQstC10YBf0L/Rj9GC0L3RltGG0YNf0YHRg9Cx0L7RgtGDJy5zcGxpdCgnXycpLFxuICAgICAgICAgICAgc3RhbmRhbG9uZTogJ9C90Y/QtNC30LXQu9GPX9C/0LDQvdGP0LTQt9C10LvQsNC6X9Cw0Z7RgtC+0YDQsNC6X9GB0LXRgNCw0LTQsF/Rh9Cw0YbQstC10YBf0L/Rj9GC0L3RltGG0LBf0YHRg9Cx0L7RgtCwJy5zcGxpdCgnXycpLFxuICAgICAgICAgICAgaXNGb3JtYXQ6IC9cXFsgP1vQo9GD0Z5dID8oPzrQvNGW0L3Rg9C70YPRjnzQvdCw0YHRgtGD0L/QvdGD0Y4pPyA/XFxdID9kZGRkL1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ9C90LRf0L/QvV/QsNGCX9GB0YBf0YfRhl/Qv9GCX9GB0LEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ9C90LRf0L/QvV/QsNGCX9GB0YBf0YfRhl/Qv9GCX9GB0LEnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWSDQsy4nLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZINCzLiwgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSDQsy4sIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb0KHRkdC90L3RjyDRnl0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vQl9Cw0Z7RgtGA0LAg0Z5dIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb0KPRh9C+0YDQsCDRnl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1vQo10gZGRkZCBb0Z5dIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQoyDQvNGW0L3Rg9C70YPRjl0gZGRkZCBb0Z5dIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CjINC80ZbQvdGD0LvRi10gZGRkZCBb0Z5dIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAn0L/RgNCw0LcgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyDRgtCw0LzRgycsXG4gICAgICAgICAgICBzIDogJ9C90LXQutCw0LvRjNC60ZYg0YHQtdC60YPQvdC0JyxcbiAgICAgICAgICAgIG0gOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgbW0gOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgaCA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBoaCA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBkIDogJ9C00LfQtdC90YwnLFxuICAgICAgICAgICAgZGQgOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgTSA6ICfQvNC10YHRj9GGJyxcbiAgICAgICAgICAgIE1NIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIHkgOiAn0LPQvtC0JyxcbiAgICAgICAgICAgIHl5IDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbFxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv0L3QvtGH0Yt80YDQsNC90ZbRhtGLfNC00L3Rj3zQstC10YfQsNGA0LAvLFxuICAgICAgICBpc1BNIDogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gL14o0LTQvdGPfNCy0LXRh9Cw0YDQsCkkLy50ZXN0KGlucHV0KTtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9C90L7Rh9GLJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfRgNCw0L3RltGG0YsnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9C00L3Rjyc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0LLQtdGH0LDRgNCwJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LSjRlnzRi3zQs9CwKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEREQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3cnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1cnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKG51bWJlciAlIDEwID09PSAyIHx8IG51bWJlciAlIDEwID09PSAzKSAmJiAobnVtYmVyICUgMTAwICE9PSAxMiAmJiBudW1iZXIgJSAxMDAgIT09IDEzKSA/IG51bWJlciArICct0ZYnIDogbnVtYmVyICsgJy3Riyc7XG4gICAgICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdCz0LAnO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGJlO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgYmcgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdiZycsIHtcbiAgICAgICAgbW9udGhzIDogJ9GP0L3Rg9Cw0YDQuF/RhNC10LLRgNGD0LDRgNC4X9C80LDRgNGCX9Cw0L/RgNC40Ltf0LzQsNC5X9GO0L3QuF/RjtC70Lhf0LDQstCz0YPRgdGCX9GB0LXQv9GC0LXQvNCy0YDQuF/QvtC60YLQvtC80LLRgNC4X9C90L7QtdC80LLRgNC4X9C00LXQutC10LzQstGA0LgnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ9GP0L3RgF/RhNC10LJf0LzQsNGAX9Cw0L/RgF/QvNCw0Llf0Y7QvdC4X9GO0LvQuF/QsNCy0LNf0YHQtdC/X9C+0LrRgl/QvdC+0LVf0LTQtdC6Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICfQvdC10LTQtdC70Y9f0L/QvtC90LXQtNC10LvQvdC40Lpf0LLRgtC+0YDQvdC40Lpf0YHRgNGP0LTQsF/Rh9C10YLQstGK0YDRgtGK0Lpf0L/QtdGC0YrQul/RgdGK0LHQvtGC0LAnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn0L3QtdC0X9C/0L7QvV/QstGC0L5f0YHRgNGPX9GH0LXRgl/Qv9C10YJf0YHRitCxJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICfQvdC0X9C/0L1f0LLRgl/RgdGAX9GH0YJf0L/Rgl/RgdCxJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdELk1NLllZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW9CU0L3QtdGBINCyXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1vQo9GC0YDQtSDQsl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBb0LJdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW9CS0YfQtdGA0LAg0LJdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JIg0LjQt9C80LjQvdCw0LvQsNGC0LBdIGRkZGQgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CSINC40LfQvNC40L3QsNC70LjRj10gZGRkZCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ9GB0LvQtdC0ICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAn0L/RgNC10LTQuCAlcycsXG4gICAgICAgICAgICBzIDogJ9C90Y/QutC+0LvQutC+INGB0LXQutGD0L3QtNC4JyxcbiAgICAgICAgICAgIHNzIDogJyVkINGB0LXQutGD0L3QtNC4JyxcbiAgICAgICAgICAgIG0gOiAn0LzQuNC90YPRgtCwJyxcbiAgICAgICAgICAgIG1tIDogJyVkINC80LjQvdGD0YLQuCcsXG4gICAgICAgICAgICBoIDogJ9GH0LDRgScsXG4gICAgICAgICAgICBoaCA6ICclZCDRh9Cw0YHQsCcsXG4gICAgICAgICAgICBkIDogJ9C00LXQvScsXG4gICAgICAgICAgICBkZCA6ICclZCDQtNC90LgnLFxuICAgICAgICAgICAgTSA6ICfQvNC10YHQtdGGJyxcbiAgICAgICAgICAgIE1NIDogJyVkINC80LXRgdC10YbQsCcsXG4gICAgICAgICAgICB5IDogJ9Cz0L7QtNC40L3QsCcsXG4gICAgICAgICAgICB5eSA6ICclZCDQs9C+0LTQuNC90LgnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS0o0LXQsnzQtdC9fNGC0Lh80LLQuHzRgNC4fNC80LgpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBsYXN0RGlnaXQgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBsYXN0MkRpZ2l0cyA9IG51bWJlciAlIDEwMDtcbiAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3QtdCyJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGFzdDJEaWdpdHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3QtdC9JztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGFzdDJEaWdpdHMgPiAxMCAmJiBsYXN0MkRpZ2l0cyA8IDIwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0YLQuCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxhc3REaWdpdCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdCy0LgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsYXN0RGlnaXQgPT09IDIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3RgNC4JztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGFzdERpZ2l0ID09PSA3IHx8IGxhc3REaWdpdCA9PT0gOCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdC80LgnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3RgtC4JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gYmc7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBibSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2JtJywge1xuICAgICAgICBtb250aHMgOiAnWmFud3V5ZWthbG9fRmV3dXJ1eWVrYWxvX01hcmlzaWthbG9fQXdpcmlsaWthbG9fTcmba2Fsb19adXfJm25rYWxvX1p1bHV5ZWthbG9fVXRpa2Fsb19TyZt0YW5idXJ1a2Fsb1/JlGt1dMmUYnVydWthbG9fTm93YW5idXJ1a2Fsb19EZXNhbmJ1cnVrYWxvJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdaYW5fRmV3X01hcl9Bd2lfTcmbX1p1d19adWxfVXRpX1PJm3RfyZRrdV9Ob3dfRGVzJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdLYXJpX050yZtuyZtuX1RhcmF0YV9BcmFiYV9BbGFtaXNhX0p1bWFfU2liaXJpJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ0thcl9OdMmbX1Rhcl9BcmFfQWxhX0p1bV9TaWInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ0thX050X1RhX0FyX0FsX0p1X1NpJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnTU1NTSBbdGlsZV0gRCBbc2FuXSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdNTU1NIFt0aWxlXSBEIFtzYW5dIFlZWVkgW2zJm3LJm10gSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkIE1NTU0gW3RpbGVdIEQgW3Nhbl0gWVlZWSBbbMmbcsmbXSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1tCaSBsyZtyyZtdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW1NpbmkgbMmbcsmbXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFtkb24gbMmbcsmbXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1tLdW51IGzJm3LJm10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnZGRkZCBbdMmbbcmbbmVuIGzJm3LJm10gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJyVzIGvJlG7JlCcsXG4gICAgICAgICAgICBwYXN0IDogJ2EgYsmbICVzIGLJlCcsXG4gICAgICAgICAgICBzIDogJ3NhbmdhIGRhbWEgZGFtYScsXG4gICAgICAgICAgICBzcyA6ICdzZWtvbmRpICVkJyxcbiAgICAgICAgICAgIG0gOiAnbWluaXRpIGtlbGVuJyxcbiAgICAgICAgICAgIG1tIDogJ21pbml0aSAlZCcsXG4gICAgICAgICAgICBoIDogJ2zJm3LJmyBrZWxlbicsXG4gICAgICAgICAgICBoaCA6ICdsyZtyyZsgJWQnLFxuICAgICAgICAgICAgZCA6ICd0aWxlIGtlbGVuJyxcbiAgICAgICAgICAgIGRkIDogJ3RpbGUgJWQnLFxuICAgICAgICAgICAgTSA6ICdrYWxvIGtlbGVuJyxcbiAgICAgICAgICAgIE1NIDogJ2thbG8gJWQnLFxuICAgICAgICAgICAgeSA6ICdzYW4ga2VsZW4nLFxuICAgICAgICAgICAgeXkgOiAnc2FuICVkJ1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBibTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHN5bWJvbE1hcCA9IHtcbiAgICAgICAgJzEnOiAn4KenJyxcbiAgICAgICAgJzInOiAn4KeoJyxcbiAgICAgICAgJzMnOiAn4KepJyxcbiAgICAgICAgJzQnOiAn4KeqJyxcbiAgICAgICAgJzUnOiAn4KerJyxcbiAgICAgICAgJzYnOiAn4KesJyxcbiAgICAgICAgJzcnOiAn4KetJyxcbiAgICAgICAgJzgnOiAn4KeuJyxcbiAgICAgICAgJzknOiAn4KevJyxcbiAgICAgICAgJzAnOiAn4KemJ1xuICAgIH0sXG4gICAgbnVtYmVyTWFwID0ge1xuICAgICAgICAn4KenJzogJzEnLFxuICAgICAgICAn4KeoJzogJzInLFxuICAgICAgICAn4KepJzogJzMnLFxuICAgICAgICAn4KeqJzogJzQnLFxuICAgICAgICAn4KerJzogJzUnLFxuICAgICAgICAn4KesJzogJzYnLFxuICAgICAgICAn4KetJzogJzcnLFxuICAgICAgICAn4KeuJzogJzgnLFxuICAgICAgICAn4KevJzogJzknLFxuICAgICAgICAn4KemJzogJzAnXG4gICAgfTtcblxuICAgIHZhciBibiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2JuJywge1xuICAgICAgICBtb250aHMgOiAn4Kac4Ka+4Kao4KeB4Kef4Ka+4Kaw4KeAX+Cmq+Cnh+CmrOCnjeCmsOCngeCnn+CmvuCmsOCmv1/gpq7gpr7gprDgp43gpppf4KaP4Kaq4KeN4Kaw4Ka/4KayX+CmruCnh1/gppzgp4Hgpqhf4Kac4KeB4Kay4Ka+4KaHX+CmhuCml+CmuOCnjeCmn1/gprjgp4fgpqrgp43gpp/gp4fgpq7gp43gpqzgprBf4KaF4KaV4KeN4Kaf4KeL4Kas4KawX+CmqOCmreCnh+CmruCnjeCmrOCmsF/gpqHgpr/gprjgp4fgpq7gp43gpqzgprAnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ+CmnOCmvuCmqOCngV/gpqvgp4fgpqxf4Kau4Ka+4Kaw4KeN4KaaX+Cmj+CmquCnjeCmsF/gpq7gp4df4Kac4KeB4KaoX+CmnOCngeCmsl/gpobgppdf4Ka44KeH4Kaq4KeN4KafX+CmheCmleCnjeCmn+Cni1/gpqjgpq3gp4df4Kah4Ka/4Ka44KeHJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICfgprDgpqzgpr/gpqzgpr7gprBf4Ka44KeL4Kau4Kas4Ka+4KawX+CmruCmmeCnjeCml+CmsuCmrOCmvuCmsF/gpqzgp4Hgpqfgpqzgpr7gprBf4Kas4KeD4Ka54Ka44KeN4Kaq4Kak4Ka/4Kas4Ka+4KawX+CmtuCngeCmleCnjeCmsOCmrOCmvuCmsF/gprbgpqjgpr/gpqzgpr7gprAnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn4Kaw4Kas4Ka/X+CmuOCni+Cmrl/gpq7gppngp43gppfgprJf4Kas4KeB4KanX+CmrOCng+CmueCmuOCnjeCmquCmpOCmv1/gprbgp4HgppXgp43gprBf4Ka24Kao4Ka/Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICfgprDgpqzgpr9f4Ka44KeL4KauX+CmruCmmeCnjeCml1/gpqzgp4Hgpqdf4Kas4KeD4Ka54KaDX+CmtuCngeCmleCnjeCmsF/gprbgpqjgpr8nLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnQSBoOm1tIOCmuOCmruCnnycsXG4gICAgICAgICAgICBMVFMgOiAnQSBoOm1tOnNzIOCmuOCmruCnnycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZLCBBIGg6bW0g4Ka44Kau4KefJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVksIEEgaDptbSDgprjgpq7gp58nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdb4KaG4KacXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1vgpobgppfgpr7gpq7gp4DgppXgpr7gprJdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQsIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW+Cml+CmpOCmleCmvuCmsl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW+Cml+CmpF0gZGRkZCwgTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJyVzIOCmquCmsOCnhycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIOCmhuCml+CnhycsXG4gICAgICAgICAgICBzIDogJ+CmleCnn+Cnh+CmlSDgprjgp4fgppXgp4fgpqjgp43gpqEnLFxuICAgICAgICAgICAgc3MgOiAnJWQg4Ka44KeH4KaV4KeH4Kao4KeN4KahJyxcbiAgICAgICAgICAgIG0gOiAn4KaP4KaVIOCmruCmv+CmqOCmv+CmnycsXG4gICAgICAgICAgICBtbSA6ICclZCDgpq7gpr/gpqjgpr/gpp8nLFxuICAgICAgICAgICAgaCA6ICfgpo/gppUg4KaY4Kao4KeN4Kaf4Ka+JyxcbiAgICAgICAgICAgIGhoIDogJyVkIOCmmOCmqOCnjeCmn+CmvicsXG4gICAgICAgICAgICBkIDogJ+Cmj+CmlSDgpqbgpr/gpqgnLFxuICAgICAgICAgICAgZGQgOiAnJWQg4Kam4Ka/4KaoJyxcbiAgICAgICAgICAgIE0gOiAn4KaP4KaVIOCmruCmvuCmuCcsXG4gICAgICAgICAgICBNTSA6ICclZCDgpq7gpr7gprgnLFxuICAgICAgICAgICAgeSA6ICfgpo/gppUg4Kas4Kab4KawJyxcbiAgICAgICAgICAgIHl5IDogJyVkIOCmrOCmm+CmsCdcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvW+Cnp+CnqOCnqeCnquCnq+CnrOCnreCnruCnr+Cnpl0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+CmsOCmvuCmpHzgprjgppXgpr7gprJ84Kam4KeB4Kaq4KeB4KawfOCmrOCmv+CmleCmvuCmsnzgprDgpr7gpqQvLFxuICAgICAgICBtZXJpZGllbUhvdXIgOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKChtZXJpZGllbSA9PT0gJ+CmsOCmvuCmpCcgJiYgaG91ciA+PSA0KSB8fFxuICAgICAgICAgICAgICAgICAgICAobWVyaWRpZW0gPT09ICfgpqbgp4Hgpqrgp4HgprAnICYmIGhvdXIgPCA1KSB8fFxuICAgICAgICAgICAgICAgICAgICBtZXJpZGllbSA9PT0gJ+CmrOCmv+CmleCmvuCmsicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CmsOCmvuCmpCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Ka44KaV4Ka+4KayJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE3KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpqbgp4Hgpqrgp4HgprAnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMjApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CmrOCmv+CmleCmvuCmsic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Kaw4Ka+4KakJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNiAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gYm47XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBzeW1ib2xNYXAgPSB7XG4gICAgICAgICcxJzogJ+C8oScsXG4gICAgICAgICcyJzogJ+C8oicsXG4gICAgICAgICczJzogJ+C8oycsXG4gICAgICAgICc0JzogJ+C8pCcsXG4gICAgICAgICc1JzogJ+C8pScsXG4gICAgICAgICc2JzogJ+C8picsXG4gICAgICAgICc3JzogJ+C8pycsXG4gICAgICAgICc4JzogJ+C8qCcsXG4gICAgICAgICc5JzogJ+C8qScsXG4gICAgICAgICcwJzogJ+C8oCdcbiAgICB9LFxuICAgIG51bWJlck1hcCA9IHtcbiAgICAgICAgJ+C8oSc6ICcxJyxcbiAgICAgICAgJ+C8oic6ICcyJyxcbiAgICAgICAgJ+C8oyc6ICczJyxcbiAgICAgICAgJ+C8pCc6ICc0JyxcbiAgICAgICAgJ+C8pSc6ICc1JyxcbiAgICAgICAgJ+C8pic6ICc2JyxcbiAgICAgICAgJ+C8pyc6ICc3JyxcbiAgICAgICAgJ+C8qCc6ICc4JyxcbiAgICAgICAgJ+C8qSc6ICc5JyxcbiAgICAgICAgJ+C8oCc6ICcwJ1xuICAgIH07XG5cbiAgICB2YXIgYm8gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdibycsIHtcbiAgICAgICAgbW9udGhzIDogJ+C9n+C+s+C8i+C9luC8i+C9keC9hOC8i+C9lOC9vF/gvZ/gvrPgvIvgvZbgvIvgvYLgvYngvbLgvabgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2C4L2m4L204L2Y4LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9luC9nuC9suC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvaPgvpTgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2R4L6y4L204L2C4LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9luC9keC9tOC9k+C8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvZbgvaLgvpLgvrHgvZHgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2R4L2C4L204LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9luC9heC9tOC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvZbgvYXgvbTgvIvgvYLgvYXgvbLgvYLgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2W4L2F4L204LyL4L2C4L2J4L2y4L2m4LyL4L2UJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICfgvZ/gvrPgvIvgvZbgvIvgvZHgvYTgvIvgvZTgvbxf4L2f4L6z4LyL4L2W4LyL4L2C4L2J4L2y4L2m4LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9guC9puC9tOC9mOC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvZbgvZ7gvbLgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2j4L6U4LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9keC+suC9tOC9guC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvZbgvZHgvbTgvZPgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2W4L2i4L6S4L6x4L2R4LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9keC9guC9tOC8i+C9lF/gvZ/gvrPgvIvgvZbgvIvgvZbgvYXgvbTgvIvgvZRf4L2f4L6z4LyL4L2W4LyL4L2W4L2F4L204LyL4L2C4L2F4L2y4L2C4LyL4L2UX+C9n+C+s+C8i+C9luC8i+C9luC9heC9tOC8i+C9guC9ieC9suC9puC8i+C9lCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAn4L2C4L2f4L2g4LyL4L2J4L2y4LyL4L2Y4LyLX+C9guC9n+C9oOC8i+C9n+C+s+C8i+C9luC8i1/gvYLgvZ/gvaDgvIvgvZjgvbLgvYLgvIvgvZHgvZjgvaLgvItf4L2C4L2f4L2g4LyL4L2j4L634L2C4LyL4L2U4LyLX+C9guC9n+C9oOC8i+C9leC9tOC9ouC8i+C9luC9tF/gvYLgvZ/gvaDgvIvgvZTgvIvgvabgvYTgvabgvItf4L2C4L2f4L2g4LyL4L2m4L6k4L264L2T4LyL4L2U4LyLJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ+C9ieC9suC8i+C9mOC8i1/gvZ/gvrPgvIvgvZbgvItf4L2Y4L2y4L2C4LyL4L2R4L2Y4L2i4LyLX+C9o+C+t+C9guC8i+C9lOC8i1/gvZXgvbTgvaLgvIvgvZbgvbRf4L2U4LyL4L2m4L2E4L2m4LyLX+C9puC+pOC9uuC9k+C8i+C9lOC8iycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn4L2J4L2y4LyL4L2Y4LyLX+C9n+C+s+C8i+C9luC8i1/gvZjgvbLgvYLgvIvgvZHgvZjgvaLgvItf4L2j4L634L2C4LyL4L2U4LyLX+C9leC9tOC9ouC8i+C9luC9tF/gvZTgvIvgvabgvYTgvabgvItf4L2m4L6k4L264L2T4LyL4L2U4LyLJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0EgaDptbScsXG4gICAgICAgICAgICBMVFMgOiAnQSBoOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVksIEEgaDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZLCBBIGg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdb4L2R4L2y4LyL4L2i4L2y4L2EXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1vgvabgvYTgvIvgvYngvbLgvZNdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ1vgvZbgvZHgvbTgvZPgvIvgvZXgvrLgvYLgvIvgvaLgvpfgvbrgvabgvIvgvZhdLCBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1vgvYHgvIvgvabgvYRdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1vgvZbgvZHgvbTgvZPgvIvgvZXgvrLgvYLgvIvgvZjgvZDgvaDgvIvgvZhdIGRkZGQsIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICclcyDgvaPgvIsnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyDgvabgvpTgvZPgvIvgvaMnLFxuICAgICAgICAgICAgcyA6ICfgvaPgvZjgvIvgvabgvYQnLFxuICAgICAgICAgICAgc3MgOiAnJWQg4L2m4L6Q4L2i4LyL4L2G4LyNJyxcbiAgICAgICAgICAgIG0gOiAn4L2m4L6Q4L2i4LyL4L2Y4LyL4L2C4L2F4L2y4L2CJyxcbiAgICAgICAgICAgIG1tIDogJyVkIOC9puC+kOC9ouC8i+C9mCcsXG4gICAgICAgICAgICBoIDogJ+C9huC9tOC8i+C9muC9vOC9keC8i+C9guC9heC9suC9gicsXG4gICAgICAgICAgICBoaCA6ICclZCDgvYbgvbTgvIvgvZrgvbzgvZEnLFxuICAgICAgICAgICAgZCA6ICfgvYngvbLgvZPgvIvgvYLgvYXgvbLgvYInLFxuICAgICAgICAgICAgZGQgOiAnJWQg4L2J4L2y4L2T4LyLJyxcbiAgICAgICAgICAgIE0gOiAn4L2f4L6z4LyL4L2W4LyL4L2C4L2F4L2y4L2CJyxcbiAgICAgICAgICAgIE1NIDogJyVkIOC9n+C+s+C8i+C9licsXG4gICAgICAgICAgICB5IDogJ+C9o+C9vOC8i+C9guC9heC9suC9gicsXG4gICAgICAgICAgICB5eSA6ICclZCDgvaPgvbwnXG4gICAgICAgIH0sXG4gICAgICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1vgvKHgvKLgvKPgvKTgvKXgvKbgvKfgvKjgvKngvKBdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvXFxkL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/gvZjgvZrgvZPgvIvgvZjgvbx84L2e4L284L2C4L2m4LyL4L2A4L2mfOC9ieC9suC9k+C8i+C9guC9tOC9hHzgvZHgvYLgvbzgvYTgvIvgvZHgvYJ84L2Y4L2a4L2T4LyL4L2Y4L28LyxcbiAgICAgICAgbWVyaWRpZW1Ib3VyIDogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgobWVyaWRpZW0gPT09ICfgvZjgvZrgvZPgvIvgvZjgvbwnICYmIGhvdXIgPj0gNCkgfHxcbiAgICAgICAgICAgICAgICAgICAgKG1lcmlkaWVtID09PSAn4L2J4L2y4L2T4LyL4L2C4L204L2EJyAmJiBob3VyIDwgNSkgfHxcbiAgICAgICAgICAgICAgICAgICAgbWVyaWRpZW0gPT09ICfgvZHgvYLgvbzgvYTgvIvgvZHgvYInKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgvZjgvZrgvZPgvIvgvZjgvbwnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+C9nuC9vOC9guC9puC8i+C9gOC9pic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4L2J4L2y4L2T4LyL4L2C4L204L2EJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDIwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgvZHgvYLgvbzgvYTgvIvgvZHgvYInO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+C9mOC9muC9k+C8i+C9mOC9vCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDYgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDZ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGJvO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICBmdW5jdGlvbiByZWxhdGl2ZVRpbWVXaXRoTXV0YXRpb24obnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXkpIHtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHtcbiAgICAgICAgICAgICdtbSc6ICdtdW51dGVubicsXG4gICAgICAgICAgICAnTU0nOiAnbWl6JyxcbiAgICAgICAgICAgICdkZCc6ICdkZXZlemgnXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAnICcgKyBtdXRhdGlvbihmb3JtYXRba2V5XSwgbnVtYmVyKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc3BlY2lhbE11dGF0aW9uRm9yWWVhcnMobnVtYmVyKSB7XG4gICAgICAgIHN3aXRjaCAobGFzdE51bWJlcihudW1iZXIpKSB7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICcgYmxvYXonO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJyB2bG9heic7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gbGFzdE51bWJlcihudW1iZXIpIHtcbiAgICAgICAgaWYgKG51bWJlciA+IDkpIHtcbiAgICAgICAgICAgIHJldHVybiBsYXN0TnVtYmVyKG51bWJlciAlIDEwKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgIH1cbiAgICBmdW5jdGlvbiBtdXRhdGlvbih0ZXh0LCBudW1iZXIpIHtcbiAgICAgICAgaWYgKG51bWJlciA9PT0gMikge1xuICAgICAgICAgICAgcmV0dXJuIHNvZnRNdXRhdGlvbih0ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGV4dDtcbiAgICB9XG4gICAgZnVuY3Rpb24gc29mdE11dGF0aW9uKHRleHQpIHtcbiAgICAgICAgdmFyIG11dGF0aW9uVGFibGUgPSB7XG4gICAgICAgICAgICAnbSc6ICd2JyxcbiAgICAgICAgICAgICdiJzogJ3YnLFxuICAgICAgICAgICAgJ2QnOiAneidcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKG11dGF0aW9uVGFibGVbdGV4dC5jaGFyQXQoMCldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0ZXh0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtdXRhdGlvblRhYmxlW3RleHQuY2hhckF0KDApXSArIHRleHQuc3Vic3RyaW5nKDEpO1xuICAgIH1cblxuICAgIHZhciBiciA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2JyJywge1xuICAgICAgICBtb250aHMgOiAnR2VudmVyX0NcXCdod2V2cmVyX01ldXJ6aF9FYnJlbF9NYWVfTWV6aGV2ZW5fR291ZXJlX0Vvc3RfR3dlbmdvbG9fSGVyZV9EdV9LZXJ6dScuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnR2VuX0NcXCdod2VfTWV1X0Vicl9NYWVfRXZlX0dvdV9Fb3NfR3dlX0hlcl9EdV9LZXInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ1N1bF9MdW5fTWV1cnpoX01lcmNcXCdoZXJfWWFvdV9Hd2VuZXJfU2Fkb3JuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ1N1bF9MdW5fTWV1X01lcl9ZYW9fR3dlX1NhZCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnU3VfTHVfTWVfTWVyX1lhX0d3X1NhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ2hbZV1tbSBBJyxcbiAgICAgICAgICAgIExUUyA6ICdoW2VdbW06c3MgQScsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBbYSB2aXpdIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBbYSB2aXpdIE1NTU0gWVlZWSBoW2VdbW0gQScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgW2Egdml6XSBNTU1NIFlZWVkgaFtlXW1tIEEnXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbSGl6aXYgZGFdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW1dhcmNcXCdob2F6aCBkYV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbZGFdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW0RlY1xcJ2ggZGFdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ2RkZGQgW3Bhc2V0IGRhXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnYS1iZW5uICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMgXFwnem8nLFxuICAgICAgICAgICAgcyA6ICd1biBuZWJldWQgc2Vnb25kZW5ub8O5JyxcbiAgICAgICAgICAgIHNzIDogJyVkIGVpbGVubicsXG4gICAgICAgICAgICBtIDogJ3VyIHZ1bnV0ZW5uJyxcbiAgICAgICAgICAgIG1tIDogcmVsYXRpdmVUaW1lV2l0aE11dGF0aW9uLFxuICAgICAgICAgICAgaCA6ICd1biBldXInLFxuICAgICAgICAgICAgaGggOiAnJWQgZXVyJyxcbiAgICAgICAgICAgIGQgOiAndW4gZGV2ZXpoJyxcbiAgICAgICAgICAgIGRkIDogcmVsYXRpdmVUaW1lV2l0aE11dGF0aW9uLFxuICAgICAgICAgICAgTSA6ICd1ciBtaXonLFxuICAgICAgICAgICAgTU0gOiByZWxhdGl2ZVRpbWVXaXRoTXV0YXRpb24sXG4gICAgICAgICAgICB5IDogJ3VyIGJsb2F6JyxcbiAgICAgICAgICAgIHl5IDogc3BlY2lhbE11dGF0aW9uRm9yWWVhcnNcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KGHDsXx2ZXQpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBvdXRwdXQgPSAobnVtYmVyID09PSAxKSA/ICdhw7EnIDogJ3ZldCc7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBicjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5KSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBudW1iZXIgKyAnICc7XG4gICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICBjYXNlICdzcyc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ3Nla3VuZGEnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyID09PSAyIHx8IG51bWJlciA9PT0gMyB8fCBudW1iZXIgPT09IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdzZWt1bmRlJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ3Nla3VuZGknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAnamVkbmEgbWludXRhJyA6ICdqZWRuZSBtaW51dGUnO1xuICAgICAgICAgICAgY2FzZSAnbW0nOlxuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdtaW51dGEnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyID09PSAyIHx8IG51bWJlciA9PT0gMyB8fCBudW1iZXIgPT09IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdtaW51dGUnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnbWludXRhJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIGNhc2UgJ2gnOlxuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ2plZGFuIHNhdCcgOiAnamVkbm9nIHNhdGEnO1xuICAgICAgICAgICAgY2FzZSAnaGgnOlxuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdzYXQnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyID09PSAyIHx8IG51bWJlciA9PT0gMyB8fCBudW1iZXIgPT09IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdzYXRhJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ3NhdGknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgY2FzZSAnZGQnOlxuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdkYW4nO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnZGFuYSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICBjYXNlICdNTSc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ21qZXNlYyc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIgfHwgbnVtYmVyID09PSAzIHx8IG51bWJlciA9PT0gNCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ21qZXNlY2EnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnbWplc2VjaSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICBjYXNlICd5eSc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ2dvZGluYSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIgfHwgbnVtYmVyID09PSAzIHx8IG51bWJlciA9PT0gNCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ2dvZGluZSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdnb2RpbmEnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGJzID0gbW9tZW50LmRlZmluZUxvY2FsZSgnYnMnLCB7XG4gICAgICAgIG1vbnRocyA6ICdqYW51YXJfZmVicnVhcl9tYXJ0X2FwcmlsX21hal9qdW5pX2p1bGlfYXVndXN0X3NlcHRlbWJhcl9va3RvYmFyX25vdmVtYmFyX2RlY2VtYmFyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdqYW4uX2ZlYi5fbWFyLl9hcHIuX21hai5fanVuLl9qdWwuX2F1Zy5fc2VwLl9va3QuX25vdi5fZGVjLicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXMgOiAnbmVkamVsamFfcG9uZWRqZWxqYWtfdXRvcmFrX3NyaWplZGFfxI1ldHZydGFrX3BldGFrX3N1Ym90YScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICduZWQuX3Bvbi5fdXRvLl9zcmkuX8SNZXQuX3BldC5fc3ViLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnbmVfcG9fdXRfc3JfxI1lX3BlX3N1Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRC4gTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBELiBNTU1NIFlZWVkgSDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5ICA6ICdbZGFuYXMgdV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSAgOiAnW3N1dHJhIHVdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBbbmVkamVsanVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIFtzcmlqZWR1XSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBbc3Vib3R1XSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBkZGRkIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3REYXkgIDogJ1tqdcSNZXIgdV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbcHJvxaFsdV0gZGRkZCBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1twcm/FoWxlXSBbc3Vib3RlXSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1twcm/FoWxpXSBkZGRkIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICd6YSAlcycsXG4gICAgICAgICAgICBwYXN0ICAgOiAncHJpamUgJXMnLFxuICAgICAgICAgICAgcyAgICAgIDogJ3BhciBzZWt1bmRpJyxcbiAgICAgICAgICAgIHNzICAgICA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG0gICAgICA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG1tICAgICA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGggICAgICA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGhoICAgICA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGQgICAgICA6ICdkYW4nLFxuICAgICAgICAgICAgZGQgICAgIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgTSAgICAgIDogJ21qZXNlYycsXG4gICAgICAgICAgICBNTSAgICAgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICB5ICAgICAgOiAnZ29kaW51JyxcbiAgICAgICAgICAgIHl5ICAgICA6IHRyYW5zbGF0ZVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGJzO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgY2EgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdjYScsIHtcbiAgICAgICAgbW9udGhzIDoge1xuICAgICAgICAgICAgc3RhbmRhbG9uZTogJ2dlbmVyX2ZlYnJlcl9tYXLDp19hYnJpbF9tYWlnX2p1bnlfanVsaW9sX2Fnb3N0X3NldGVtYnJlX29jdHVicmVfbm92ZW1icmVfZGVzZW1icmUnLnNwbGl0KCdfJyksXG4gICAgICAgICAgICBmb3JtYXQ6ICdkZSBnZW5lcl9kZSBmZWJyZXJfZGUgbWFyw6dfZFxcJ2FicmlsX2RlIG1haWdfZGUganVueV9kZSBqdWxpb2xfZFxcJ2Fnb3N0X2RlIHNldGVtYnJlX2RcXCdvY3R1YnJlX2RlIG5vdmVtYnJlX2RlIGRlc2VtYnJlJy5zcGxpdCgnXycpLFxuICAgICAgICAgICAgaXNGb3JtYXQ6IC9EW29EXT8oXFxzKStNTU1NL1xuICAgICAgICB9LFxuICAgICAgICBtb250aHNTaG9ydCA6ICdnZW4uX2ZlYnIuX21hcsOnX2Fici5fbWFpZ19qdW55X2p1bC5fYWcuX3NldC5fb2N0Ll9ub3YuX2Rlcy4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICB3ZWVrZGF5cyA6ICdkaXVtZW5nZV9kaWxsdW5zX2RpbWFydHNfZGltZWNyZXNfZGlqb3VzX2RpdmVuZHJlc19kaXNzYWJ0ZScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdkZy5fZGwuX2R0Ll9kYy5fZGouX2R2Ll9kcy4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ2RnX2RsX2R0X2RjX2RqX2R2X2RzJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBbZGVdIFlZWVknLFxuICAgICAgICAgICAgbGwgOiAnRCBNTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFtkZV0gWVlZWSBbYSBsZXNdIEg6bW0nLFxuICAgICAgICAgICAgbGxsIDogJ0QgTU1NIFlZWVksIEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkIEQgTU1NTSBbZGVdIFlZWVkgW2EgbGVzXSBIOm1tJyxcbiAgICAgICAgICAgIGxsbGwgOiAnZGRkIEQgTU1NIFlZWVksIEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1thdnVpIGEgJyArICgodGhpcy5ob3VycygpICE9PSAxKSA/ICdsZXMnIDogJ2xhJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmV4dERheSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1tkZW3DoCBhICcgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAnbGVzJyA6ICdsYScpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5leHRXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZGRkZCBbYSAnICsgKCh0aGlzLmhvdXJzKCkgIT09IDEpID8gJ2xlcycgOiAnbGEnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0RGF5IDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW2FoaXIgYSAnICsgKCh0aGlzLmhvdXJzKCkgIT09IDEpID8gJ2xlcycgOiAnbGEnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0V2VlayA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1tlbF0gZGRkZCBbcGFzc2F0IGEgJyArICgodGhpcy5ob3VycygpICE9PSAxKSA/ICdsZXMnIDogJ2xhJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ2RcXCdhcXXDrSAlcycsXG4gICAgICAgICAgICBwYXN0IDogJ2ZhICVzJyxcbiAgICAgICAgICAgIHMgOiAndW5zIHNlZ29ucycsXG4gICAgICAgICAgICBzcyA6ICclZCBzZWdvbnMnLFxuICAgICAgICAgICAgbSA6ICd1biBtaW51dCcsXG4gICAgICAgICAgICBtbSA6ICclZCBtaW51dHMnLFxuICAgICAgICAgICAgaCA6ICd1bmEgaG9yYScsXG4gICAgICAgICAgICBoaCA6ICclZCBob3JlcycsXG4gICAgICAgICAgICBkIDogJ3VuIGRpYScsXG4gICAgICAgICAgICBkZCA6ICclZCBkaWVzJyxcbiAgICAgICAgICAgIE0gOiAndW4gbWVzJyxcbiAgICAgICAgICAgIE1NIDogJyVkIG1lc29zJyxcbiAgICAgICAgICAgIHkgOiAndW4gYW55JyxcbiAgICAgICAgICAgIHl5IDogJyVkIGFueXMnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShyfG58dHzDqHxhKS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHZhciBvdXRwdXQgPSAobnVtYmVyID09PSAxKSA/ICdyJyA6XG4gICAgICAgICAgICAgICAgKG51bWJlciA9PT0gMikgPyAnbicgOlxuICAgICAgICAgICAgICAgIChudW1iZXIgPT09IDMpID8gJ3InIDpcbiAgICAgICAgICAgICAgICAobnVtYmVyID09PSA0KSA/ICd0JyA6ICfDqCc7XG4gICAgICAgICAgICBpZiAocGVyaW9kID09PSAndycgfHwgcGVyaW9kID09PSAnVycpIHtcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSAnYSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBjYTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIG1vbnRocyA9ICdsZWRlbl/Dum5vcl9ixZllemVuX2R1YmVuX2t2xJt0ZW5fxI1lcnZlbl/EjWVydmVuZWNfc3JwZW5fesOhxZnDrV/FmcOtamVuX2xpc3RvcGFkX3Byb3NpbmVjJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA9ICdsZWRfw7pub19ixZllX2R1Yl9rdsSbX8SNdm5fxI12Y19zcnBfesOhxZlfxZnDrWpfbGlzX3Bybycuc3BsaXQoJ18nKTtcblxuICAgIHZhciBtb250aHNQYXJzZSA9IFsvXmxlZC9pLCAvXsO6bm8vaSwgL15ixZllL2ksIC9eZHViL2ksIC9ea3bEmy9pLCAvXijEjXZufMSNZXJ2ZW4kfMSNZXJ2bmEpL2ksIC9eKMSNdmN8xI1lcnZlbmVjfMSNZXJ2ZW5jZSkvaSwgL15zcnAvaSwgL156w6HFmS9pLCAvXsWZw61qL2ksIC9ebGlzL2ksIC9ecHJvL2ldO1xuICAgIC8vIE5PVEU6ICfEjWVydmVuJyBpcyBzdWJzdHJpbmcgb2YgJ8SNZXJ2ZW5lYyc7IHRoZXJlZm9yZSAnxI1lcnZlbmVjJyBtdXN0IHByZWNlZGUgJ8SNZXJ2ZW4nIGluIHRoZSByZWdleCB0byBiZSBmdWxseSBtYXRjaGVkLlxuICAgIC8vIE90aGVyd2lzZSBwYXJzZXIgbWF0Y2hlcyAnMS4gxI1lcnZlbmVjJyBhcyAnMS4gxI1lcnZlbicgKyAnZWMnLlxuICAgIHZhciBtb250aHNSZWdleCA9IC9eKGxlZGVufMO6bm9yfGLFmWV6ZW58ZHViZW58a3bEm3RlbnzEjWVydmVuZWN8xI1lcnZlbmNlfMSNZXJ2ZW58xI1lcnZuYXxzcnBlbnx6w6HFmcOtfMWZw61qZW58bGlzdG9wYWR8cHJvc2luZWN8bGVkfMO6bm98YsWZZXxkdWJ8a3bEm3zEjXZufMSNdmN8c3JwfHrDocWZfMWZw61qfGxpc3xwcm8pL2k7XG5cbiAgICBmdW5jdGlvbiBwbHVyYWwobikge1xuICAgICAgICByZXR1cm4gKG4gPiAxKSAmJiAobiA8IDUpICYmICh+fihuIC8gMTApICE9PSAxKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbnVtYmVyICsgJyAnO1xuICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgICAgY2FzZSAncyc6ICAvLyBhIGZldyBzZWNvbmRzIC8gaW4gYSBmZXcgc2Vjb25kcyAvIGEgZmV3IHNlY29uZHMgYWdvXG4gICAgICAgICAgICAgICAgcmV0dXJuICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSA/ICdww6FyIHNla3VuZCcgOiAncMOhciBzZWt1bmRhbWknO1xuICAgICAgICAgICAgY2FzZSAnc3MnOiAvLyA5IHNlY29uZHMgLyBpbiA5IHNlY29uZHMgLyA5IHNlY29uZHMgYWdvXG4gICAgICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdzZWt1bmR5JyA6ICdzZWt1bmQnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ3Nla3VuZGFtaSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbSc6ICAvLyBhIG1pbnV0ZSAvIGluIGEgbWludXRlIC8gYSBtaW51dGUgYWdvXG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAnbWludXRhJyA6IChpc0Z1dHVyZSA/ICdtaW51dHUnIDogJ21pbnV0b3UnKTtcbiAgICAgICAgICAgIGNhc2UgJ21tJzogLy8gOSBtaW51dGVzIC8gaW4gOSBtaW51dGVzIC8gOSBtaW51dGVzIGFnb1xuICAgICAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnbWludXR5JyA6ICdtaW51dCcpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnbWludXRhbWknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2gnOiAgLy8gYW4gaG91ciAvIGluIGFuIGhvdXIgLyBhbiBob3VyIGFnb1xuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ2hvZGluYScgOiAoaXNGdXR1cmUgPyAnaG9kaW51JyA6ICdob2Rpbm91Jyk7XG4gICAgICAgICAgICBjYXNlICdoaCc6IC8vIDkgaG91cnMgLyBpbiA5IGhvdXJzIC8gOSBob3VycyBhZ29cbiAgICAgICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ2hvZGlueScgOiAnaG9kaW4nKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ2hvZGluYW1pJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdkJzogIC8vIGEgZGF5IC8gaW4gYSBkYXkgLyBhIGRheSBhZ29cbiAgICAgICAgICAgICAgICByZXR1cm4gKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpID8gJ2RlbicgOiAnZG5lbSc7XG4gICAgICAgICAgICBjYXNlICdkZCc6IC8vIDkgZGF5cyAvIGluIDkgZGF5cyAvIDkgZGF5cyBhZ29cbiAgICAgICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ2RueScgOiAnZG7DrScpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnZG55JztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdNJzogIC8vIGEgbW9udGggLyBpbiBhIG1vbnRoIC8gYSBtb250aCBhZ29cbiAgICAgICAgICAgICAgICByZXR1cm4gKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpID8gJ23Em3PDrWMnIDogJ23Em3PDrWNlbSc7XG4gICAgICAgICAgICBjYXNlICdNTSc6IC8vIDkgbW9udGhzIC8gaW4gOSBtb250aHMgLyA5IG1vbnRocyBhZ29cbiAgICAgICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ23Em3PDrWNlJyA6ICdtxJtzw61jxa8nKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ23Em3PDrWNpJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd5JzogIC8vIGEgeWVhciAvIGluIGEgeWVhciAvIGEgeWVhciBhZ29cbiAgICAgICAgICAgICAgICByZXR1cm4gKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpID8gJ3JvaycgOiAncm9rZW0nO1xuICAgICAgICAgICAgY2FzZSAneXknOiAvLyA5IHllYXJzIC8gaW4gOSB5ZWFycyAvIDkgeWVhcnMgYWdvXG4gICAgICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdyb2t5JyA6ICdsZXQnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ2xldHknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBjcyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2NzJywge1xuICAgICAgICBtb250aHMgOiBtb250aHMsXG4gICAgICAgIG1vbnRoc1Nob3J0IDogbW9udGhzU2hvcnQsXG4gICAgICAgIG1vbnRoc1JlZ2V4IDogbW9udGhzUmVnZXgsXG4gICAgICAgIG1vbnRoc1Nob3J0UmVnZXggOiBtb250aHNSZWdleCxcbiAgICAgICAgLy8gTk9URTogJ8SNZXJ2ZW4nIGlzIHN1YnN0cmluZyBvZiAnxI1lcnZlbmVjJzsgdGhlcmVmb3JlICfEjWVydmVuZWMnIG11c3QgcHJlY2VkZSAnxI1lcnZlbicgaW4gdGhlIHJlZ2V4IHRvIGJlIGZ1bGx5IG1hdGNoZWQuXG4gICAgICAgIC8vIE90aGVyd2lzZSBwYXJzZXIgbWF0Y2hlcyAnMS4gxI1lcnZlbmVjJyBhcyAnMS4gxI1lcnZlbicgKyAnZWMnLlxuICAgICAgICBtb250aHNTdHJpY3RSZWdleCA6IC9eKGxlZGVufGxlZG5hfMO6bm9yYXzDum5vcnxixZllemVufGLFmWV6bmF8ZHViZW58ZHVibmF8a3bEm3RlbnxrdsSbdG5hfMSNZXJ2ZW5lY3zEjWVydmVuY2V8xI1lcnZlbnzEjWVydm5hfHNycGVufHNycG5hfHrDocWZw618xZnDrWplbnzFmcOtam5hfGxpc3RvcGFkdXxsaXN0b3BhZHxwcm9zaW5lY3xwcm9zaW5jZSkvaSxcbiAgICAgICAgbW9udGhzU2hvcnRTdHJpY3RSZWdleCA6IC9eKGxlZHzDum5vfGLFmWV8ZHVifGt2xJt8xI12bnzEjXZjfHNycHx6w6HFmXzFmcOtanxsaXN8cHJvKS9pLFxuICAgICAgICBtb250aHNQYXJzZSA6IG1vbnRoc1BhcnNlLFxuICAgICAgICBsb25nTW9udGhzUGFyc2UgOiBtb250aHNQYXJzZSxcbiAgICAgICAgc2hvcnRNb250aHNQYXJzZSA6IG1vbnRoc1BhcnNlLFxuICAgICAgICB3ZWVrZGF5cyA6ICduZWTEm2xlX3BvbmTEm2zDrV/DunRlcsO9X3N0xZllZGFfxI10dnJ0ZWtfcMOhdGVrX3NvYm90YScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICduZV9wb1/DunRfc3RfxI10X3DDoV9zbycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnbmVfcG9fw7p0X3N0X8SNdF9ww6Ffc28nLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQ6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdELiBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QuIE1NTU0gWVlZWSBIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCBELiBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgICAgICBsIDogJ0QuIE0uIFlZWVknXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tkbmVzIHZdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbesOtdHJhIHZdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3YgbmVkxJtsaSB2XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdl0gZGRkZCBbdl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2ZSBzdMWZZWR1IHZdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdmUgxI10dnJ0ZWsgdl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2IHDDoXRlayB2XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3Ygc29ib3R1IHZdIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdERheTogJ1t2xI1lcmEgdl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbbWludWxvdSBuZWTEm2xpIHZdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1ttaW51bMOpXSBkZGRkIFt2XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW21pbnVsb3Ugc3TFmWVkdSB2XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbbWludWzDvV0gZGRkZCBbdl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1ttaW51bG91IHNvYm90dSB2XSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ3phICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAncMWZZWQgJXMnLFxuICAgICAgICAgICAgcyA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHNzIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG1tIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaCA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGhoIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgZCA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGRkIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgTSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIE1NIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgeSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHl5IDogdHJhbnNsYXRlXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2UgOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGNzO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgY3YgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdjdicsIHtcbiAgICAgICAgbW9udGhzIDogJ9C605HRgNC70LDRh1/QvdCw0YDTkdGBX9C/0YPRiF/QsNC60LBf0LzQsNC5X9Kr05fRgNGC0LzQtV/Rg9GC05Ff0qvRg9GA0LvQsF/QsNCy05HQvV/RjtC/0LBf0YfTs9C6X9GA0LDRiNGC0LDQsicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAn0LrTkdGAX9C90LDRgF/Qv9GD0Yhf0LDQutCwX9C80LDQuV/Sq9OX0YBf0YPRgtORX9Kr0YPRgF/QsNCy0L1f0Y7Qv9CwX9GH07PQul/RgNCw0YgnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ9Cy0YvRgNGB0LDRgNC90LjQutGD0L1f0YLRg9C90YLQuNC60YPQvV/Ri9GC0LvQsNGA0LjQutGD0L1f0Y7QvdC60YPQvV/QutOX0qvQvdC10YDQvdC40LrRg9C9X9GN0YDQvdC10LrRg9C9X9GI05HQvNCw0YLQutGD0L0nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn0LLRi9GAX9GC0YPQvV/Ri9GC0Ltf0Y7QvV/QutOX0qtf0Y3RgNC9X9GI05HQvCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn0LLRgF/RgtC9X9GL0YJf0Y7QvV/QutKrX9GN0YBf0YjQvCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC1NTS1ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ1lZWVkgW9Kr0YPQu9GF0LhdIE1NTU0gW9GD0LnTkdGF05fQvV0gRFst0LzTl9GI05ddJyxcbiAgICAgICAgICAgIExMTCA6ICdZWVlZIFvSq9GD0LvRhdC4XSBNTU1NIFvRg9C505HRhdOX0L1dIERbLdC805fRiNOXXSwgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBZWVlZIFvSq9GD0LvRhdC4XSBNTU1NIFvRg9C505HRhdOX0L1dIERbLdC805fRiNOXXSwgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vQn9Cw0Y/QvV0gTFQgW9GB0LXRhdC10YLRgNC1XScsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW9Cr0YDQsNC9XSBMVCBb0YHQtdGF0LXRgtGA0LVdJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb05bQvdC10YBdIExUIFvRgdC10YXQtdGC0YDQtV0nLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdb0qrQuNGC0LXRgV0gZGRkZCBMVCBb0YHQtdGF0LXRgtGA0LVdJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW9CY0YDRgtC905ddIGRkZGQgTFQgW9GB0LXRhdC10YLRgNC1XScsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6IGZ1bmN0aW9uIChvdXRwdXQpIHtcbiAgICAgICAgICAgICAgICB2YXIgYWZmaXggPSAv0YHQtdGF0LXRgiQvaS5leGVjKG91dHB1dCkgPyAn0YDQtdC9JyA6IC/Sq9GD0LskL2kuZXhlYyhvdXRwdXQpID8gJ9GC0LDQvScgOiAn0YDQsNC9JztcbiAgICAgICAgICAgICAgICByZXR1cm4gb3V0cHV0ICsgYWZmaXg7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGFzdCA6ICclcyDQutCw0Y/Qu9C70LAnLFxuICAgICAgICAgICAgcyA6ICfQv9OX0YAt0LjQuiDSq9C10LrQutGD0L3RgicsXG4gICAgICAgICAgICBzcyA6ICclZCDSq9C10LrQutGD0L3RgicsXG4gICAgICAgICAgICBtIDogJ9C/05fRgCDQvNC40L3Rg9GCJyxcbiAgICAgICAgICAgIG1tIDogJyVkINC80LjQvdGD0YInLFxuICAgICAgICAgICAgaCA6ICfQv9OX0YAg0YHQtdGF0LXRgicsXG4gICAgICAgICAgICBoaCA6ICclZCDRgdC10YXQtdGCJyxcbiAgICAgICAgICAgIGQgOiAn0L/Tl9GAINC60YPQvScsXG4gICAgICAgICAgICBkZCA6ICclZCDQutGD0L0nLFxuICAgICAgICAgICAgTSA6ICfQv9OX0YAg0YPQudOR0YUnLFxuICAgICAgICAgICAgTU0gOiAnJWQg0YPQudOR0YUnLFxuICAgICAgICAgICAgeSA6ICfQv9OX0YAg0qvRg9C7JyxcbiAgICAgICAgICAgIHl5IDogJyVkINKr0YPQuydcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LdC805fRiC8sXG4gICAgICAgIG9yZGluYWwgOiAnJWQt0LzTl9GIJyxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gY3Y7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBjeSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2N5Jywge1xuICAgICAgICBtb250aHM6ICdJb25hd3JfQ2h3ZWZyb3JfTWF3cnRoX0VicmlsbF9NYWlfTWVoZWZpbl9Hb3JmZmVubmFmX0F3c3RfTWVkaV9IeWRyZWZfVGFjaHdlZGRfUmhhZ2Z5cicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdJb25fQ2h3ZV9NYXdfRWJyX01haV9NZWhfR29yX0F3c19NZWRfSHlkX1RhY2hfUmhhZycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXM6ICdEeWRkIFN1bF9EeWRkIExsdW5fRHlkZCBNYXdydGhfRHlkZCBNZXJjaGVyX0R5ZGQgSWF1X0R5ZGQgR3dlbmVyX0R5ZGQgU2Fkd3JuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnU3VsX0xsdW5fTWF3X01lcl9JYXVfR3dlX1NhZCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICdTdV9MbF9NYV9NZV9JYV9Hd19TYScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgLy8gdGltZSBmb3JtYXRzIGFyZSB0aGUgc2FtZSBhcyBlbi1nYlxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW0hlZGRpdyBhbV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tZZm9yeSBhbV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFthbV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tEZG9lIGFtXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW2Rpd2V0aGFmIGFtXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnbWV3biAlcycsXG4gICAgICAgICAgICBwYXN0OiAnJXMgeW4gw7RsJyxcbiAgICAgICAgICAgIHM6ICd5Y2h5ZGlnIGVpbGlhZGF1JyxcbiAgICAgICAgICAgIHNzOiAnJWQgZWlsaWFkJyxcbiAgICAgICAgICAgIG06ICdtdW51ZCcsXG4gICAgICAgICAgICBtbTogJyVkIG11bnVkJyxcbiAgICAgICAgICAgIGg6ICdhd3InLFxuICAgICAgICAgICAgaGg6ICclZCBhd3InLFxuICAgICAgICAgICAgZDogJ2Rpd3Jub2QnLFxuICAgICAgICAgICAgZGQ6ICclZCBkaXdybm9kJyxcbiAgICAgICAgICAgIE06ICdtaXMnLFxuICAgICAgICAgICAgTU06ICclZCBtaXMnLFxuICAgICAgICAgICAgeTogJ2Jsd3lkZHluJyxcbiAgICAgICAgICAgIHl5OiAnJWQgZmx5bmVkZCdcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KGZlZHxhaW58YWZ8aWx8eWRkfGVkfGVnKS8sXG4gICAgICAgIC8vIHRyYWRpdGlvbmFsIG9yZGluYWwgbnVtYmVycyBhYm92ZSAzMSBhcmUgbm90IGNvbW1vbmx5IHVzZWQgaW4gY29sbG9xdWlhbCBXZWxzaFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYiA9IG51bWJlcixcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSAnJyxcbiAgICAgICAgICAgICAgICBsb29rdXAgPSBbXG4gICAgICAgICAgICAgICAgICAgICcnLCAnYWYnLCAnaWwnLCAneWRkJywgJ3lkZCcsICdlZCcsICdlZCcsICdlZCcsICdmZWQnLCAnZmVkJywgJ2ZlZCcsIC8vIDFhZiB0byAxMGZlZFxuICAgICAgICAgICAgICAgICAgICAnZWcnLCAnZmVkJywgJ2VnJywgJ2VnJywgJ2ZlZCcsICdlZycsICdlZycsICdmZWQnLCAnZWcnLCAnZmVkJyAvLyAxMWVnIHRvIDIwZmVkXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGlmIChiID4gMjApIHtcbiAgICAgICAgICAgICAgICBpZiAoYiA9PT0gNDAgfHwgYiA9PT0gNTAgfHwgYiA9PT0gNjAgfHwgYiA9PT0gODAgfHwgYiA9PT0gMTAwKSB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dCA9ICdmZWQnOyAvLyBub3QgMzBhaW4sIDcwYWluIG9yIDkwYWluXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ID0gJ2Fpbic7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChiID4gMCkge1xuICAgICAgICAgICAgICAgIG91dHB1dCA9IGxvb2t1cFtiXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGN5O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgZGEgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdkYScsIHtcbiAgICAgICAgbW9udGhzIDogJ2phbnVhcl9mZWJydWFyX21hcnRzX2FwcmlsX21hal9qdW5pX2p1bGlfYXVndXN0X3NlcHRlbWJlcl9va3RvYmVyX25vdmVtYmVyX2RlY2VtYmVyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdqYW5fZmViX21hcl9hcHJfbWFqX2p1bl9qdWxfYXVnX3NlcF9va3Rfbm92X2RlYycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnc8O4bmRhZ19tYW5kYWdfdGlyc2RhZ19vbnNkYWdfdG9yc2RhZ19mcmVkYWdfbMO4cmRhZycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdzw7huX21hbl90aXJfb25zX3Rvcl9mcmVfbMO4cicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnc8O4X21hX3RpX29uX3RvX2ZyX2zDuCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRC4gTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCBbZC5dIEQuIE1NTU0gWVlZWSBba2wuXSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1tpIGRhZyBrbC5dIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW2kgbW9yZ2VuIGtsLl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAncMOlIGRkZGQgW2tsLl0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdbaSBnw6VyIGtsLl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW2ldIGRkZGRbcyBrbC5dIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICdvbSAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIHNpZGVuJyxcbiAgICAgICAgICAgIHMgOiAnZsOlIHNla3VuZGVyJyxcbiAgICAgICAgICAgIHNzIDogJyVkIHNla3VuZGVyJyxcbiAgICAgICAgICAgIG0gOiAnZXQgbWludXQnLFxuICAgICAgICAgICAgbW0gOiAnJWQgbWludXR0ZXInLFxuICAgICAgICAgICAgaCA6ICdlbiB0aW1lJyxcbiAgICAgICAgICAgIGhoIDogJyVkIHRpbWVyJyxcbiAgICAgICAgICAgIGQgOiAnZW4gZGFnJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGRhZ2UnLFxuICAgICAgICAgICAgTSA6ICdlbiBtw6VuZWQnLFxuICAgICAgICAgICAgTU0gOiAnJWQgbcOlbmVkZXInLFxuICAgICAgICAgICAgeSA6ICdldCDDpXInLFxuICAgICAgICAgICAgeXkgOiAnJWQgw6VyJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGRhO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzUmVsYXRpdmVUaW1lKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0ge1xuICAgICAgICAgICAgJ20nOiBbJ2VpbmUgTWludXRlJywgJ2VpbmVyIE1pbnV0ZSddLFxuICAgICAgICAgICAgJ2gnOiBbJ2VpbmUgU3R1bmRlJywgJ2VpbmVyIFN0dW5kZSddLFxuICAgICAgICAgICAgJ2QnOiBbJ2VpbiBUYWcnLCAnZWluZW0gVGFnJ10sXG4gICAgICAgICAgICAnZGQnOiBbbnVtYmVyICsgJyBUYWdlJywgbnVtYmVyICsgJyBUYWdlbiddLFxuICAgICAgICAgICAgJ00nOiBbJ2VpbiBNb25hdCcsICdlaW5lbSBNb25hdCddLFxuICAgICAgICAgICAgJ01NJzogW251bWJlciArICcgTW9uYXRlJywgbnVtYmVyICsgJyBNb25hdGVuJ10sXG4gICAgICAgICAgICAneSc6IFsnZWluIEphaHInLCAnZWluZW0gSmFociddLFxuICAgICAgICAgICAgJ3l5JzogW251bWJlciArICcgSmFocmUnLCBudW1iZXIgKyAnIEphaHJlbiddXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gZm9ybWF0W2tleV1bMF0gOiBmb3JtYXRba2V5XVsxXTtcbiAgICB9XG5cbiAgICB2YXIgZGUgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdkZScsIHtcbiAgICAgICAgbW9udGhzIDogJ0phbnVhcl9GZWJydWFyX03DpHJ6X0FwcmlsX01haV9KdW5pX0p1bGlfQXVndXN0X1NlcHRlbWJlcl9Pa3RvYmVyX05vdmVtYmVyX0RlemVtYmVyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdKYW4uX0ZlYi5fTcOkcnpfQXByLl9NYWlfSnVuaV9KdWxpX0F1Zy5fU2VwLl9Pa3QuX05vdi5fRGV6Licuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzIDogJ1Nvbm50YWdfTW9udGFnX0RpZW5zdGFnX01pdHR3b2NoX0Rvbm5lcnN0YWdfRnJlaXRhZ19TYW1zdGFnJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ1NvLl9Nby5fRGkuX01pLl9Eby5fRnIuX1NhLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnU29fTW9fRGlfTWlfRG9fRnJfU2EnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEwgOiAnRC4gTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdELiBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBELiBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1toZXV0ZSB1bV0gTFQgW1Vocl0nLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbbW9yZ2VuIHVtXSBMVCBbVWhyXScsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW3VtXSBMVCBbVWhyXScsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW2dlc3Rlcm4gdW1dIExUIFtVaHJdJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW2xldHp0ZW5dIGRkZGQgW3VtXSBMVCBbVWhyXSdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ2luICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAndm9yICVzJyxcbiAgICAgICAgICAgIHMgOiAnZWluIHBhYXIgU2VrdW5kZW4nLFxuICAgICAgICAgICAgc3MgOiAnJWQgU2VrdW5kZW4nLFxuICAgICAgICAgICAgbSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBtbSA6ICclZCBNaW51dGVuJyxcbiAgICAgICAgICAgIGggOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgaGggOiAnJWQgU3R1bmRlbicsXG4gICAgICAgICAgICBkIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGRkIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIE0gOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgTU0gOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgeSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB5eSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWVcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbCA6ICclZC4nLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBkZTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc1JlbGF0aXZlVGltZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICAgICAgdmFyIGZvcm1hdCA9IHtcbiAgICAgICAgICAgICdtJzogWydlaW5lIE1pbnV0ZScsICdlaW5lciBNaW51dGUnXSxcbiAgICAgICAgICAgICdoJzogWydlaW5lIFN0dW5kZScsICdlaW5lciBTdHVuZGUnXSxcbiAgICAgICAgICAgICdkJzogWydlaW4gVGFnJywgJ2VpbmVtIFRhZyddLFxuICAgICAgICAgICAgJ2RkJzogW251bWJlciArICcgVGFnZScsIG51bWJlciArICcgVGFnZW4nXSxcbiAgICAgICAgICAgICdNJzogWydlaW4gTW9uYXQnLCAnZWluZW0gTW9uYXQnXSxcbiAgICAgICAgICAgICdNTSc6IFtudW1iZXIgKyAnIE1vbmF0ZScsIG51bWJlciArICcgTW9uYXRlbiddLFxuICAgICAgICAgICAgJ3knOiBbJ2VpbiBKYWhyJywgJ2VpbmVtIEphaHInXSxcbiAgICAgICAgICAgICd5eSc6IFtudW1iZXIgKyAnIEphaHJlJywgbnVtYmVyICsgJyBKYWhyZW4nXVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/IGZvcm1hdFtrZXldWzBdIDogZm9ybWF0W2tleV1bMV07XG4gICAgfVxuXG4gICAgdmFyIGRlQXQgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdkZS1hdCcsIHtcbiAgICAgICAgbW9udGhzIDogJ0rDpG5uZXJfRmVicnVhcl9Nw6Ryel9BcHJpbF9NYWlfSnVuaV9KdWxpX0F1Z3VzdF9TZXB0ZW1iZXJfT2t0b2Jlcl9Ob3ZlbWJlcl9EZXplbWJlcicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnSsOkbi5fRmViLl9Nw6Ryel9BcHIuX01haV9KdW5pX0p1bGlfQXVnLl9TZXAuX09rdC5fTm92Ll9EZXouJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXMgOiAnU29ubnRhZ19Nb250YWdfRGllbnN0YWdfTWl0dHdvY2hfRG9ubmVyc3RhZ19GcmVpdGFnX1NhbXN0YWcnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnU28uX01vLl9EaS5fTWkuX0RvLl9Gci5fU2EuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdTb19Nb19EaV9NaV9Eb19Gcl9TYScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdELiBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QuIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQuIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW2hldXRlIHVtXSBMVCBbVWhyXScsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnLFxuICAgICAgICAgICAgbmV4dERheTogJ1ttb3JnZW4gdW1dIExUIFtVaHJdJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbdW1dIExUIFtVaHJdJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbZ2VzdGVybiB1bV0gTFQgW1Vocl0nLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbbGV0enRlbl0gZGRkZCBbdW1dIExUIFtVaHJdJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnaW4gJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICd2b3IgJXMnLFxuICAgICAgICAgICAgcyA6ICdlaW4gcGFhciBTZWt1bmRlbicsXG4gICAgICAgICAgICBzcyA6ICclZCBTZWt1bmRlbicsXG4gICAgICAgICAgICBtIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIG1tIDogJyVkIE1pbnV0ZW4nLFxuICAgICAgICAgICAgaCA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBoaCA6ICclZCBTdHVuZGVuJyxcbiAgICAgICAgICAgIGQgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgZGQgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgTSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBNTSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB5IDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHl5IDogcHJvY2Vzc1JlbGF0aXZlVGltZVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGRlQXQ7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIGZ1bmN0aW9uIHByb2Nlc3NSZWxhdGl2ZVRpbWUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB7XG4gICAgICAgICAgICAnbSc6IFsnZWluZSBNaW51dGUnLCAnZWluZXIgTWludXRlJ10sXG4gICAgICAgICAgICAnaCc6IFsnZWluZSBTdHVuZGUnLCAnZWluZXIgU3R1bmRlJ10sXG4gICAgICAgICAgICAnZCc6IFsnZWluIFRhZycsICdlaW5lbSBUYWcnXSxcbiAgICAgICAgICAgICdkZCc6IFtudW1iZXIgKyAnIFRhZ2UnLCBudW1iZXIgKyAnIFRhZ2VuJ10sXG4gICAgICAgICAgICAnTSc6IFsnZWluIE1vbmF0JywgJ2VpbmVtIE1vbmF0J10sXG4gICAgICAgICAgICAnTU0nOiBbbnVtYmVyICsgJyBNb25hdGUnLCBudW1iZXIgKyAnIE1vbmF0ZW4nXSxcbiAgICAgICAgICAgICd5JzogWydlaW4gSmFocicsICdlaW5lbSBKYWhyJ10sXG4gICAgICAgICAgICAneXknOiBbbnVtYmVyICsgJyBKYWhyZScsIG51bWJlciArICcgSmFocmVuJ11cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyBmb3JtYXRba2V5XVswXSA6IGZvcm1hdFtrZXldWzFdO1xuICAgIH1cblxuICAgIHZhciBkZUNoID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZGUtY2gnLCB7XG4gICAgICAgIG1vbnRocyA6ICdKYW51YXJfRmVicnVhcl9Nw6Ryel9BcHJpbF9NYWlfSnVuaV9KdWxpX0F1Z3VzdF9TZXB0ZW1iZXJfT2t0b2Jlcl9Ob3ZlbWJlcl9EZXplbWJlcicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnSmFuLl9GZWIuX03DpHJ6X0Fwci5fTWFpX0p1bmlfSnVsaV9BdWcuX1NlcC5fT2t0Ll9Ob3YuX0Rlei4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICB3ZWVrZGF5cyA6ICdTb25udGFnX01vbnRhZ19EaWVuc3RhZ19NaXR0d29jaF9Eb25uZXJzdGFnX0ZyZWl0YWdfU2Ftc3RhZycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdTb19Nb19EaV9NaV9Eb19Gcl9TYScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnU29fTW9fRGlfTWlfRG9fRnJfU2EnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEwgOiAnRC4gTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdELiBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBELiBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1toZXV0ZSB1bV0gTFQgW1Vocl0nLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbbW9yZ2VuIHVtXSBMVCBbVWhyXScsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW3VtXSBMVCBbVWhyXScsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW2dlc3Rlcm4gdW1dIExUIFtVaHJdJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW2xldHp0ZW5dIGRkZGQgW3VtXSBMVCBbVWhyXSdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ2luICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAndm9yICVzJyxcbiAgICAgICAgICAgIHMgOiAnZWluIHBhYXIgU2VrdW5kZW4nLFxuICAgICAgICAgICAgc3MgOiAnJWQgU2VrdW5kZW4nLFxuICAgICAgICAgICAgbSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBtbSA6ICclZCBNaW51dGVuJyxcbiAgICAgICAgICAgIGggOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgaGggOiAnJWQgU3R1bmRlbicsXG4gICAgICAgICAgICBkIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGRkIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIE0gOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgTU0gOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgeSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB5eSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWVcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbCA6ICclZC4nLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBkZUNoO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgbW9udGhzID0gW1xuICAgICAgICAn3pberN6C3qreh96m3oPeqScsXG4gICAgICAgICfeit6s3oTesN6D3qreh96m3oPeqScsXG4gICAgICAgICfeid6n3oPeqN6X3qonLFxuICAgICAgICAn3oferd6V3rDeg96p3o3eqicsXG4gICAgICAgICfeid6tJyxcbiAgICAgICAgJ96W3qvegt6wJyxcbiAgICAgICAgJ96W3qrejd6m3ofeqCcsXG4gICAgICAgICfeh96v3o7ept6Q3rDek96qJyxcbiAgICAgICAgJ96Q3qzeld6w3pPerN6J3rDehN6m3oPeqicsXG4gICAgICAgICfeh96u3obesN6T3q/ehN6m3oPeqicsXG4gICAgICAgICfegt6u3ojerN6J3rDehN6m3oPeqicsXG4gICAgICAgICfekd6o3pDerN6J3rDehN6m3oPeqidcbiAgICBdLCB3ZWVrZGF5cyA9IFtcbiAgICAgICAgJ96H3qfei96o3ofesN6M3qYnLFxuICAgICAgICAn3oDer96J3qYnLFxuICAgICAgICAn3ofept6C3rDejt6n3oPepicsXG4gICAgICAgICfehN6q3ovepicsXG4gICAgICAgICfehN6q3oPep96Q3rDeit6m3ozeqCcsXG4gICAgICAgICfegN6q3obeqt6D3qonLFxuICAgICAgICAn3oDert6C3qjegN6o3oPeqidcbiAgICBdO1xuXG4gICAgdmFyIGR2ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZHYnLCB7XG4gICAgICAgIG1vbnRocyA6IG1vbnRocyxcbiAgICAgICAgbW9udGhzU2hvcnQgOiBtb250aHMsXG4gICAgICAgIHdlZWtkYXlzIDogd2Vla2RheXMsXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiB3ZWVrZGF5cyxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn3ofep96L3qhf3oDer96J3qZf3ofept6C3rBf3oTeqt6L3qZf3oTeqt6D3qdf3oDeqt6G3qpf3oDert6C3qgnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuXG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdEL00vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv3onehnzeid6KLyxcbiAgICAgICAgaXNQTSA6IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuICfeid6KJyA9PT0gaW5wdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn3onehic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn3oneiic7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdb3oneqN6H3qbei96qXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1veid6n3ovept6J3qddIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdb3ofeqN6H3rDelN6sXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdb3orep96H3qjejN6q3ojeqF0gZGRkZCBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAn3ozerN6D3q3ejt6m3ofeqCAlcycsXG4gICAgICAgICAgICBwYXN0IDogJ96G3qreg96o3oLesCAlcycsXG4gICAgICAgICAgICBzIDogJ96Q3qjeht6q3oLesN6M3qreht6u3oXerN6H3rAnLFxuICAgICAgICAgICAgc3MgOiAnZCUg3pDeqN6G3qregt6w3ozeqicsXG4gICAgICAgICAgICBtIDogJ96J3qjegt6o3pPerN6H3rAnLFxuICAgICAgICAgICAgbW0gOiAn3oneqN6C3qjek96qICVkJyxcbiAgICAgICAgICAgIGggOiAn3o7ept6R3qjeh96o3oPerN6H3rAnLFxuICAgICAgICAgICAgaGggOiAn3o7ept6R3qjeh96o3oPeqiAlZCcsXG4gICAgICAgICAgICBkIDogJ96L3qreiN6m3oDerN6H3rAnLFxuICAgICAgICAgICAgZGQgOiAn3oveqt6I3qbekN6wICVkJyxcbiAgICAgICAgICAgIE0gOiAn3onept6A3qzeh96wJyxcbiAgICAgICAgICAgIE1NIDogJ96J3qbekN6wICVkJyxcbiAgICAgICAgICAgIHkgOiAn3ofept6A3qbeg96s3ofesCcsXG4gICAgICAgICAgICB5eSA6ICfeh96m3oDept6D3qogJWQnXG4gICAgICAgIH0sXG4gICAgICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL9iML2csICcsJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvLC9nLCAn2IwnKTtcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDcsICAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDEyICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxMnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZHY7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICBmdW5jdGlvbiBpc0Z1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBpbnB1dCBpbnN0YW5jZW9mIEZ1bmN0aW9uIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG4gICAgfVxuXG5cbiAgICB2YXIgZWwgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdlbCcsIHtcbiAgICAgICAgbW9udGhzTm9taW5hdGl2ZUVsIDogJ86ZzrHOvc6/z4XOrM+BzrnOv8+CX86mzrXOss+Bzr/Phc6sz4HOuc6/z4JfzpzOrM+Bz4TOuc6/z4JfzpHPgM+Bzq/Ou865zr/Pgl/OnM6szrnOv8+CX86Zzr/Pjc69zrnOv8+CX86Zzr/Pjc67zrnOv8+CX86Rz43Os86/z4XPg8+Ezr/Pgl/Oo861z4DPhM6tzrzOss+BzrnOv8+CX86fzrrPhM+OzrLPgc65zr/Pgl/Onc6/zq3OvM6yz4HOuc6/z4JfzpTOtc66zq3OvM6yz4HOuc6/z4InLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc0dlbml0aXZlRWwgOiAnzpnOsc69zr/Phc6xz4HOr86/z4VfzqbOtc6yz4HOv8+FzrHPgc6vzr/PhV/OnM6xz4HPhM6vzr/PhV/Okc+Az4HOuc67zq/Ov8+FX86czrHOkM6/z4VfzpnOv8+Fzr3Or86/z4VfzpnOv8+FzrvOr86/z4VfzpHPhc6zzr/Pjc+Dz4TOv8+FX86jzrXPgM+EzrXOvM6yz4HOr86/z4Vfzp/Ous+Ez4nOss+Bzq/Ov8+FX86dzr/Otc68zrLPgc6vzr/PhV/OlM61zrrOtc68zrLPgc6vzr/PhScuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzIDogZnVuY3Rpb24gKG1vbWVudFRvRm9ybWF0LCBmb3JtYXQpIHtcbiAgICAgICAgICAgIGlmICghbW9tZW50VG9Gb3JtYXQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzTm9taW5hdGl2ZUVsO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZm9ybWF0ID09PSAnc3RyaW5nJyAmJiAvRC8udGVzdChmb3JtYXQuc3Vic3RyaW5nKDAsIGZvcm1hdC5pbmRleE9mKCdNTU1NJykpKSkgeyAvLyBpZiB0aGVyZSBpcyBhIGRheSBudW1iZXIgYmVmb3JlICdNTU1NJ1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb250aHNHZW5pdGl2ZUVsW21vbWVudFRvRm9ybWF0Lm1vbnRoKCldO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzTm9taW5hdGl2ZUVsW21vbWVudFRvRm9ybWF0Lm1vbnRoKCldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtb250aHNTaG9ydCA6ICfOmc6xzr1fzqbOtc6yX86czrHPgV/Okc+Az4FfzpzOsc+KX86Zzr/Phc69X86Zzr/Phc67X86Rz4XOs1/Oo861z4Bfzp/Ous+EX86dzr/OtV/OlM61zronLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ86az4XPgc65zrHOus6uX86UzrXPhc+Ezq3Pgc6xX86kz4HOr8+EzrdfzqTOtc+EzqzPgc+EzrdfzqDOrc68z4DPhM63X86gzrHPgc6xz4POus61z4XOrl/Oo86szrLOss6xz4TOvycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfOms+Fz4FfzpTOtc+FX86kz4HOuV/OpM61z4RfzqDOtc68X86gzrHPgV/Oo86xzrInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ86az4VfzpTOtV/OpM+BX86kzrVfzqDOtV/OoM6xX86jzrEnLnNwbGl0KCdfJyksXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91cnMgPiAxMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ868zrwnIDogJ86czpwnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICfPgM68JyA6ICfOoM6cJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgaXNQTSA6IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuICgoaW5wdXQgKyAnJykudG9Mb3dlckNhc2UoKVswXSA9PT0gJ868Jyk7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2UgOiAvW86gzpxdXFwuP86cP1xcLj8vaSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdoOm1tIEEnLFxuICAgICAgICAgICAgTFRTIDogJ2g6bW06c3MgQScsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIGg6bW0gQScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIGg6bW0gQSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXJFbCA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW86jzq7OvM61z4HOsSB7fV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdbzpHPjc+BzrnOvyB7fV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbe31dIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW86nzrjOtc+CIHt9XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbz4TOvyDPgM+Bzr/Ot86zzr/Pjc68zrXOvc6/XSBkZGRkIFt7fV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbz4TOt869IM+Az4HOv863zrPOv8+NzrzOtc69zrddIGRkZGQgW3t9XSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDogZnVuY3Rpb24gKGtleSwgbW9tKSB7XG4gICAgICAgICAgICB2YXIgb3V0cHV0ID0gdGhpcy5fY2FsZW5kYXJFbFtrZXldLFxuICAgICAgICAgICAgICAgIGhvdXJzID0gbW9tICYmIG1vbS5ob3VycygpO1xuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24ob3V0cHV0KSkge1xuICAgICAgICAgICAgICAgIG91dHB1dCA9IG91dHB1dC5hcHBseShtb20pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG91dHB1dC5yZXBsYWNlKCd7fScsIChob3VycyAlIDEyID09PSAxID8gJ8+Dz4TOtycgOiAnz4PPhM65z4InKSk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICfPg861ICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMgz4DPgc65zr0nLFxuICAgICAgICAgICAgcyA6ICfOu86vzrPOsSDOtM61z4XPhM61z4HPjM67zrXPgM+EzrEnLFxuICAgICAgICAgICAgc3MgOiAnJWQgzrTOtc+Fz4TOtc+Bz4zOu861z4DPhM6xJyxcbiAgICAgICAgICAgIG0gOiAnzq3Ovc6xIM67zrXPgM+Ez4wnLFxuICAgICAgICAgICAgbW0gOiAnJWQgzrvOtc+Az4TOrCcsXG4gICAgICAgICAgICBoIDogJ868zq/OsSDPjs+BzrEnLFxuICAgICAgICAgICAgaGggOiAnJWQgz47Pgc61z4InLFxuICAgICAgICAgICAgZCA6ICfOvM6vzrEgzrzOrc+BzrEnLFxuICAgICAgICAgICAgZGQgOiAnJWQgzrzOrc+BzrXPgicsXG4gICAgICAgICAgICBNIDogJ86tzr3Osc+CIM68zq7Ovc6xz4InLFxuICAgICAgICAgICAgTU0gOiAnJWQgzrzOrs69zrXPgicsXG4gICAgICAgICAgICB5IDogJ86tzr3Osc+CIM+Hz4HPjM69zr/PgicsXG4gICAgICAgICAgICB5eSA6ICclZCDPh8+Bz4zOvc65zrEnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfc63LyxcbiAgICAgICAgb3JkaW5hbDogJyVkzrcnLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0c3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBlbDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGVuU0cgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdlbi1TRycsIHtcbiAgICAgICAgbW9udGhzIDogJ0phbnVhcnlfRmVicnVhcnlfTWFyY2hfQXByaWxfTWF5X0p1bmVfSnVseV9BdWd1c3RfU2VwdGVtYmVyX09jdG9iZXJfTm92ZW1iZXJfRGVjZW1iZXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ0phbl9GZWJfTWFyX0Fwcl9NYXlfSnVuX0p1bF9BdWdfU2VwX09jdF9Ob3ZfRGVjJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdTdW5kYXlfTW9uZGF5X1R1ZXNkYXlfV2VkbmVzZGF5X1RodXJzZGF5X0ZyaWRheV9TYXR1cmRheScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdTdW5fTW9uX1R1ZV9XZWRfVGh1X0ZyaV9TYXQnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ1N1X01vX1R1X1dlX1RoX0ZyX1NhJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbVG9kYXkgYXRdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW1RvbW9ycm93IGF0XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFthdF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdbWWVzdGVyZGF5IGF0XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdbTGFzdF0gZGRkZCBbYXRdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICdpbiAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIGFnbycsXG4gICAgICAgICAgICBzIDogJ2EgZmV3IHNlY29uZHMnLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2Vjb25kcycsXG4gICAgICAgICAgICBtIDogJ2EgbWludXRlJyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbnV0ZXMnLFxuICAgICAgICAgICAgaCA6ICdhbiBob3VyJyxcbiAgICAgICAgICAgIGhoIDogJyVkIGhvdXJzJyxcbiAgICAgICAgICAgIGQgOiAnYSBkYXknLFxuICAgICAgICAgICAgZGQgOiAnJWQgZGF5cycsXG4gICAgICAgICAgICBNIDogJ2EgbW9udGgnLFxuICAgICAgICAgICAgTU0gOiAnJWQgbW9udGhzJyxcbiAgICAgICAgICAgIHkgOiAnYSB5ZWFyJyxcbiAgICAgICAgICAgIHl5IDogJyVkIHllYXJzJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oc3R8bmR8cmR8dGgpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gKH5+KG51bWJlciAlIDEwMCAvIDEwKSA9PT0gMSkgPyAndGgnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMSkgPyAnc3QnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMikgPyAnbmQnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMykgPyAncmQnIDogJ3RoJztcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGVuU0c7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBlbkF1ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZW4tYXUnLCB7XG4gICAgICAgIG1vbnRocyA6ICdKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdKYW5fRmViX01hcl9BcHJfTWF5X0p1bl9KdWxfQXVnX1NlcF9PY3RfTm92X0RlYycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnU3VuZGF5X01vbmRheV9UdWVzZGF5X1dlZG5lc2RheV9UaHVyc2RheV9GcmlkYXlfU2F0dXJkYXknLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnU3VuX01vbl9UdWVfV2VkX1RodV9GcmlfU2F0Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdTdV9Nb19UdV9XZV9UaF9Gcl9TYScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdoOm1tIEEnLFxuICAgICAgICAgICAgTFRTIDogJ2g6bW06c3MgQScsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIGg6bW0gQScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIGg6bW0gQSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1tUb2RheSBhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdbVG9tb3Jyb3cgYXRdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW2F0XSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1tZZXN0ZXJkYXkgYXRdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1tMYXN0XSBkZGRkIFthdF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ2luICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMgYWdvJyxcbiAgICAgICAgICAgIHMgOiAnYSBmZXcgc2Vjb25kcycsXG4gICAgICAgICAgICBzcyA6ICclZCBzZWNvbmRzJyxcbiAgICAgICAgICAgIG0gOiAnYSBtaW51dGUnLFxuICAgICAgICAgICAgbW0gOiAnJWQgbWludXRlcycsXG4gICAgICAgICAgICBoIDogJ2FuIGhvdXInLFxuICAgICAgICAgICAgaGggOiAnJWQgaG91cnMnLFxuICAgICAgICAgICAgZCA6ICdhIGRheScsXG4gICAgICAgICAgICBkZCA6ICclZCBkYXlzJyxcbiAgICAgICAgICAgIE0gOiAnYSBtb250aCcsXG4gICAgICAgICAgICBNTSA6ICclZCBtb250aHMnLFxuICAgICAgICAgICAgeSA6ICdhIHllYXInLFxuICAgICAgICAgICAgeXkgOiAnJWQgeWVhcnMnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShzdHxuZHxyZHx0aCkvLFxuICAgICAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIGIgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSAofn4obnVtYmVyICUgMTAwIC8gMTApID09PSAxKSA/ICd0aCcgOlxuICAgICAgICAgICAgICAgIChiID09PSAxKSA/ICdzdCcgOlxuICAgICAgICAgICAgICAgIChiID09PSAyKSA/ICduZCcgOlxuICAgICAgICAgICAgICAgIChiID09PSAzKSA/ICdyZCcgOiAndGgnO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZW5BdTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGVuQ2EgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdlbi1jYScsIHtcbiAgICAgICAgbW9udGhzIDogJ0phbnVhcnlfRmVicnVhcnlfTWFyY2hfQXByaWxfTWF5X0p1bmVfSnVseV9BdWd1c3RfU2VwdGVtYmVyX09jdG9iZXJfTm92ZW1iZXJfRGVjZW1iZXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ0phbl9GZWJfTWFyX0Fwcl9NYXlfSnVuX0p1bF9BdWdfU2VwX09jdF9Ob3ZfRGVjJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdTdW5kYXlfTW9uZGF5X1R1ZXNkYXlfV2VkbmVzZGF5X1RodXJzZGF5X0ZyaWRheV9TYXR1cmRheScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdTdW5fTW9uX1R1ZV9XZWRfVGh1X0ZyaV9TYXQnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ1N1X01vX1R1X1dlX1RoX0ZyX1NhJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ2g6bW0gQScsXG4gICAgICAgICAgICBMVFMgOiAnaDptbTpzcyBBJyxcbiAgICAgICAgICAgIEwgOiAnWVlZWS1NTS1ERCcsXG4gICAgICAgICAgICBMTCA6ICdNTU1NIEQsIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ01NTU0gRCwgWVlZWSBoOm1tIEEnLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBNTU1NIEQsIFlZWVkgaDptbSBBJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW1RvZGF5IGF0XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1tUb21vcnJvdyBhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbYXRdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW1llc3RlcmRheSBhdF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW0xhc3RdIGRkZGQgW2F0XSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnaW4gJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyBhZ28nLFxuICAgICAgICAgICAgcyA6ICdhIGZldyBzZWNvbmRzJyxcbiAgICAgICAgICAgIHNzIDogJyVkIHNlY29uZHMnLFxuICAgICAgICAgICAgbSA6ICdhIG1pbnV0ZScsXG4gICAgICAgICAgICBtbSA6ICclZCBtaW51dGVzJyxcbiAgICAgICAgICAgIGggOiAnYW4gaG91cicsXG4gICAgICAgICAgICBoaCA6ICclZCBob3VycycsXG4gICAgICAgICAgICBkIDogJ2EgZGF5JyxcbiAgICAgICAgICAgIGRkIDogJyVkIGRheXMnLFxuICAgICAgICAgICAgTSA6ICdhIG1vbnRoJyxcbiAgICAgICAgICAgIE1NIDogJyVkIG1vbnRocycsXG4gICAgICAgICAgICB5IDogJ2EgeWVhcicsXG4gICAgICAgICAgICB5eSA6ICclZCB5ZWFycydcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHN0fG5kfHJkfHRoKS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYiA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIG91dHB1dCA9ICh+fihudW1iZXIgJSAxMDAgLyAxMCkgPT09IDEpID8gJ3RoJyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDEpID8gJ3N0JyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDIpID8gJ25kJyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDMpID8gJ3JkJyA6ICd0aCc7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZW5DYTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGVuR2IgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdlbi1nYicsIHtcbiAgICAgICAgbW9udGhzIDogJ0phbnVhcnlfRmVicnVhcnlfTWFyY2hfQXByaWxfTWF5X0p1bmVfSnVseV9BdWd1c3RfU2VwdGVtYmVyX09jdG9iZXJfTm92ZW1iZXJfRGVjZW1iZXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ0phbl9GZWJfTWFyX0Fwcl9NYXlfSnVuX0p1bF9BdWdfU2VwX09jdF9Ob3ZfRGVjJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdTdW5kYXlfTW9uZGF5X1R1ZXNkYXlfV2VkbmVzZGF5X1RodXJzZGF5X0ZyaWRheV9TYXR1cmRheScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdTdW5fTW9uX1R1ZV9XZWRfVGh1X0ZyaV9TYXQnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ1N1X01vX1R1X1dlX1RoX0ZyX1NhJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbVG9kYXkgYXRdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW1RvbW9ycm93IGF0XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFthdF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdbWWVzdGVyZGF5IGF0XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdbTGFzdF0gZGRkZCBbYXRdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICdpbiAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIGFnbycsXG4gICAgICAgICAgICBzIDogJ2EgZmV3IHNlY29uZHMnLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2Vjb25kcycsXG4gICAgICAgICAgICBtIDogJ2EgbWludXRlJyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbnV0ZXMnLFxuICAgICAgICAgICAgaCA6ICdhbiBob3VyJyxcbiAgICAgICAgICAgIGhoIDogJyVkIGhvdXJzJyxcbiAgICAgICAgICAgIGQgOiAnYSBkYXknLFxuICAgICAgICAgICAgZGQgOiAnJWQgZGF5cycsXG4gICAgICAgICAgICBNIDogJ2EgbW9udGgnLFxuICAgICAgICAgICAgTU0gOiAnJWQgbW9udGhzJyxcbiAgICAgICAgICAgIHkgOiAnYSB5ZWFyJyxcbiAgICAgICAgICAgIHl5IDogJyVkIHllYXJzJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oc3R8bmR8cmR8dGgpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gKH5+KG51bWJlciAlIDEwMCAvIDEwKSA9PT0gMSkgPyAndGgnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMSkgPyAnc3QnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMikgPyAnbmQnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMykgPyAncmQnIDogJ3RoJztcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGVuR2I7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBlbkllID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZW4taWUnLCB7XG4gICAgICAgIG1vbnRocyA6ICdKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdKYW5fRmViX01hcl9BcHJfTWF5X0p1bl9KdWxfQXVnX1NlcF9PY3RfTm92X0RlYycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnU3VuZGF5X01vbmRheV9UdWVzZGF5X1dlZG5lc2RheV9UaHVyc2RheV9GcmlkYXlfU2F0dXJkYXknLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnU3VuX01vbl9UdWVfV2VkX1RodV9GcmlfU2F0Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdTdV9Nb19UdV9XZV9UaF9Gcl9TYScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbVG9kYXkgYXRdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW1RvbW9ycm93IGF0XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFthdF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdbWWVzdGVyZGF5IGF0XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdbTGFzdF0gZGRkZCBbYXRdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICdpbiAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIGFnbycsXG4gICAgICAgICAgICBzIDogJ2EgZmV3IHNlY29uZHMnLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2Vjb25kcycsXG4gICAgICAgICAgICBtIDogJ2EgbWludXRlJyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbnV0ZXMnLFxuICAgICAgICAgICAgaCA6ICdhbiBob3VyJyxcbiAgICAgICAgICAgIGhoIDogJyVkIGhvdXJzJyxcbiAgICAgICAgICAgIGQgOiAnYSBkYXknLFxuICAgICAgICAgICAgZGQgOiAnJWQgZGF5cycsXG4gICAgICAgICAgICBNIDogJ2EgbW9udGgnLFxuICAgICAgICAgICAgTU0gOiAnJWQgbW9udGhzJyxcbiAgICAgICAgICAgIHkgOiAnYSB5ZWFyJyxcbiAgICAgICAgICAgIHl5IDogJyVkIHllYXJzJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oc3R8bmR8cmR8dGgpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gKH5+KG51bWJlciAlIDEwMCAvIDEwKSA9PT0gMSkgPyAndGgnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMSkgPyAnc3QnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMikgPyAnbmQnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMykgPyAncmQnIDogJ3RoJztcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGVuSWU7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBlbklsID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZW4taWwnLCB7XG4gICAgICAgIG1vbnRocyA6ICdKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdKYW5fRmViX01hcl9BcHJfTWF5X0p1bl9KdWxfQXVnX1NlcF9PY3RfTm92X0RlYycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnU3VuZGF5X01vbmRheV9UdWVzZGF5X1dlZG5lc2RheV9UaHVyc2RheV9GcmlkYXlfU2F0dXJkYXknLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnU3VuX01vbl9UdWVfV2VkX1RodV9GcmlfU2F0Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdTdV9Nb19UdV9XZV9UaF9Gcl9TYScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW1RvZGF5IGF0XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1tUb21vcnJvdyBhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbYXRdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW1llc3RlcmRheSBhdF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW0xhc3RdIGRkZGQgW2F0XSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnaW4gJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyBhZ28nLFxuICAgICAgICAgICAgcyA6ICdhIGZldyBzZWNvbmRzJyxcbiAgICAgICAgICAgIG0gOiAnYSBtaW51dGUnLFxuICAgICAgICAgICAgbW0gOiAnJWQgbWludXRlcycsXG4gICAgICAgICAgICBoIDogJ2FuIGhvdXInLFxuICAgICAgICAgICAgaGggOiAnJWQgaG91cnMnLFxuICAgICAgICAgICAgZCA6ICdhIGRheScsXG4gICAgICAgICAgICBkZCA6ICclZCBkYXlzJyxcbiAgICAgICAgICAgIE0gOiAnYSBtb250aCcsXG4gICAgICAgICAgICBNTSA6ICclZCBtb250aHMnLFxuICAgICAgICAgICAgeSA6ICdhIHllYXInLFxuICAgICAgICAgICAgeXkgOiAnJWQgeWVhcnMnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShzdHxuZHxyZHx0aCkvLFxuICAgICAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIGIgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSAofn4obnVtYmVyICUgMTAwIC8gMTApID09PSAxKSA/ICd0aCcgOlxuICAgICAgICAgICAgICAgIChiID09PSAxKSA/ICdzdCcgOlxuICAgICAgICAgICAgICAgIChiID09PSAyKSA/ICduZCcgOlxuICAgICAgICAgICAgICAgIChiID09PSAzKSA/ICdyZCcgOiAndGgnO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGVuSWw7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBlbk56ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZW4tbnonLCB7XG4gICAgICAgIG1vbnRocyA6ICdKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdKYW5fRmViX01hcl9BcHJfTWF5X0p1bl9KdWxfQXVnX1NlcF9PY3RfTm92X0RlYycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnU3VuZGF5X01vbmRheV9UdWVzZGF5X1dlZG5lc2RheV9UaHVyc2RheV9GcmlkYXlfU2F0dXJkYXknLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnU3VuX01vbl9UdWVfV2VkX1RodV9GcmlfU2F0Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdTdV9Nb19UdV9XZV9UaF9Gcl9TYScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdoOm1tIEEnLFxuICAgICAgICAgICAgTFRTIDogJ2g6bW06c3MgQScsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIGg6bW0gQScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIGg6bW0gQSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1tUb2RheSBhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdbVG9tb3Jyb3cgYXRdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW2F0XSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1tZZXN0ZXJkYXkgYXRdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1tMYXN0XSBkZGRkIFthdF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ2luICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMgYWdvJyxcbiAgICAgICAgICAgIHMgOiAnYSBmZXcgc2Vjb25kcycsXG4gICAgICAgICAgICBzcyA6ICclZCBzZWNvbmRzJyxcbiAgICAgICAgICAgIG0gOiAnYSBtaW51dGUnLFxuICAgICAgICAgICAgbW0gOiAnJWQgbWludXRlcycsXG4gICAgICAgICAgICBoIDogJ2FuIGhvdXInLFxuICAgICAgICAgICAgaGggOiAnJWQgaG91cnMnLFxuICAgICAgICAgICAgZCA6ICdhIGRheScsXG4gICAgICAgICAgICBkZCA6ICclZCBkYXlzJyxcbiAgICAgICAgICAgIE0gOiAnYSBtb250aCcsXG4gICAgICAgICAgICBNTSA6ICclZCBtb250aHMnLFxuICAgICAgICAgICAgeSA6ICdhIHllYXInLFxuICAgICAgICAgICAgeXkgOiAnJWQgeWVhcnMnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShzdHxuZHxyZHx0aCkvLFxuICAgICAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIGIgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBvdXRwdXQgPSAofn4obnVtYmVyICUgMTAwIC8gMTApID09PSAxKSA/ICd0aCcgOlxuICAgICAgICAgICAgICAgIChiID09PSAxKSA/ICdzdCcgOlxuICAgICAgICAgICAgICAgIChiID09PSAyKSA/ICduZCcgOlxuICAgICAgICAgICAgICAgIChiID09PSAzKSA/ICdyZCcgOiAndGgnO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZW5OejtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGVvID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZW8nLCB7XG4gICAgICAgIG1vbnRocyA6ICdqYW51YXJvX2ZlYnJ1YXJvX21hcnRvX2Fwcmlsb19tYWpvX2p1bmlvX2p1bGlvX2HFrWd1c3RvX3NlcHRlbWJyb19va3RvYnJvX25vdmVtYnJvX2RlY2VtYnJvJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdqYW5fZmViX21hcl9hcHJfbWFqX2p1bl9qdWxfYcWtZ19zZXBfb2t0X25vdl9kZWMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ2RpbWFuxIlvX2x1bmRvX21hcmRvX21lcmtyZWRvX8S1YcWtZG9fdmVuZHJlZG9fc2FiYXRvJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ2RpbV9sdW5fbWFyZF9tZXJrX8S1YcWtX3Zlbl9zYWInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ2RpX2x1X21hX21lX8S1YV92ZV9zYScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdZWVlZLU1NLUREJyxcbiAgICAgICAgICAgIExMIDogJ0RbLWEgZGVdIE1NTU0sIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0RbLWEgZGVdIE1NTU0sIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBbbGFdIERbLWEgZGVdIE1NTU0sIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC9bYXBdXFwudFxcLm0vaSxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQuY2hhckF0KDApLnRvTG93ZXJDYXNlKCkgPT09ICdwJztcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VycyA+IDExKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAncC50Lm0uJyA6ICdQLlQuTS4nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICdhLnQubS4nIDogJ0EuVC5NLic7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbSG9kaWHFrSBqZV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdbTW9yZ2HFrSBqZV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbamVdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW0hpZXJhxa0gamVdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1twYXNpbnRhXSBkZGRkIFtqZV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ3Bvc3QgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICdhbnRhxa0gJXMnLFxuICAgICAgICAgICAgcyA6ICdzZWt1bmRvaicsXG4gICAgICAgICAgICBzcyA6ICclZCBzZWt1bmRvaicsXG4gICAgICAgICAgICBtIDogJ21pbnV0bycsXG4gICAgICAgICAgICBtbSA6ICclZCBtaW51dG9qJyxcbiAgICAgICAgICAgIGggOiAnaG9ybycsXG4gICAgICAgICAgICBoaCA6ICclZCBob3JvaicsXG4gICAgICAgICAgICBkIDogJ3RhZ28nLC8vbmUgJ2RpdXJubycsIMSJYXIgZXN0YXMgdXppdGEgcG9yIHByb2tzaW11bW9cbiAgICAgICAgICAgIGRkIDogJyVkIHRhZ29qJyxcbiAgICAgICAgICAgIE0gOiAnbW9uYXRvJyxcbiAgICAgICAgICAgIE1NIDogJyVkIG1vbmF0b2onLFxuICAgICAgICAgICAgeSA6ICdqYXJvJyxcbiAgICAgICAgICAgIHl5IDogJyVkIGphcm9qJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1hLyxcbiAgICAgICAgb3JkaW5hbCA6ICclZGEnLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA3ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA3dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBlbztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIG1vbnRoc1Nob3J0RG90ID0gJ2VuZS5fZmViLl9tYXIuX2Fici5fbWF5Ll9qdW4uX2p1bC5fYWdvLl9zZXAuX29jdC5fbm92Ll9kaWMuJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA9ICdlbmVfZmViX21hcl9hYnJfbWF5X2p1bl9qdWxfYWdvX3NlcF9vY3Rfbm92X2RpYycuc3BsaXQoJ18nKTtcblxuICAgIHZhciBtb250aHNQYXJzZSA9IFsvXmVuZS9pLCAvXmZlYi9pLCAvXm1hci9pLCAvXmFici9pLCAvXm1heS9pLCAvXmp1bi9pLCAvXmp1bC9pLCAvXmFnby9pLCAvXnNlcC9pLCAvXm9jdC9pLCAvXm5vdi9pLCAvXmRpYy9pXTtcbiAgICB2YXIgbW9udGhzUmVnZXggPSAvXihlbmVyb3xmZWJyZXJvfG1hcnpvfGFicmlsfG1heW98anVuaW98anVsaW98YWdvc3RvfHNlcHRpZW1icmV8b2N0dWJyZXxub3ZpZW1icmV8ZGljaWVtYnJlfGVuZVxcLj98ZmViXFwuP3xtYXJcXC4/fGFiclxcLj98bWF5XFwuP3xqdW5cXC4/fGp1bFxcLj98YWdvXFwuP3xzZXBcXC4/fG9jdFxcLj98bm92XFwuP3xkaWNcXC4/KS9pO1xuXG4gICAgdmFyIGVzID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZXMnLCB7XG4gICAgICAgIG1vbnRocyA6ICdlbmVyb19mZWJyZXJvX21hcnpvX2FicmlsX21heW9fanVuaW9fanVsaW9fYWdvc3RvX3NlcHRpZW1icmVfb2N0dWJyZV9ub3ZpZW1icmVfZGljaWVtYnJlJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6IGZ1bmN0aW9uIChtLCBmb3JtYXQpIHtcbiAgICAgICAgICAgIGlmICghbSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydERvdDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoLy1NTU0tLy50ZXN0KGZvcm1hdCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnRbbS5tb250aCgpXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0RG90W20ubW9udGgoKV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRoc1JlZ2V4IDogbW9udGhzUmVnZXgsXG4gICAgICAgIG1vbnRoc1Nob3J0UmVnZXggOiBtb250aHNSZWdleCxcbiAgICAgICAgbW9udGhzU3RyaWN0UmVnZXggOiAvXihlbmVyb3xmZWJyZXJvfG1hcnpvfGFicmlsfG1heW98anVuaW98anVsaW98YWdvc3RvfHNlcHRpZW1icmV8b2N0dWJyZXxub3ZpZW1icmV8ZGljaWVtYnJlKS9pLFxuICAgICAgICBtb250aHNTaG9ydFN0cmljdFJlZ2V4IDogL14oZW5lXFwuP3xmZWJcXC4/fG1hclxcLj98YWJyXFwuP3xtYXlcXC4/fGp1blxcLj98anVsXFwuP3xhZ29cXC4/fHNlcFxcLj98b2N0XFwuP3xub3ZcXC4/fGRpY1xcLj8pL2ksXG4gICAgICAgIG1vbnRoc1BhcnNlIDogbW9udGhzUGFyc2UsXG4gICAgICAgIGxvbmdNb250aHNQYXJzZSA6IG1vbnRoc1BhcnNlLFxuICAgICAgICBzaG9ydE1vbnRoc1BhcnNlIDogbW9udGhzUGFyc2UsXG4gICAgICAgIHdlZWtkYXlzIDogJ2RvbWluZ29fbHVuZXNfbWFydGVzX21pw6lyY29sZXNfanVldmVzX3ZpZXJuZXNfc8OhYmFkbycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdkb20uX2x1bi5fbWFyLl9tacOpLl9qdWUuX3ZpZS5fc8OhYi4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ2RvX2x1X21hX21pX2p1X3ZpX3PDoScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIFtkZV0gTU1NTSBbZGVdIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgW2RlXSBNTU1NIFtkZV0gWVlZWSBIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBbZGVdIE1NTU0gW2RlXSBZWVlZIEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1tob3kgYSBsYScgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmV4dERheSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1ttYcOxYW5hIGEgbGEnICsgKCh0aGlzLmhvdXJzKCkgIT09IDEpID8gJ3MnIDogJycpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5leHRXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZGRkZCBbYSBsYScgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdERheSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1theWVyIGEgbGEnICsgKCh0aGlzLmhvdXJzKCkgIT09IDEpID8gJ3MnIDogJycpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW2VsXSBkZGRkIFtwYXNhZG8gYSBsYScgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ2VuICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnaGFjZSAlcycsXG4gICAgICAgICAgICBzIDogJ3Vub3Mgc2VndW5kb3MnLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2VndW5kb3MnLFxuICAgICAgICAgICAgbSA6ICd1biBtaW51dG8nLFxuICAgICAgICAgICAgbW0gOiAnJWQgbWludXRvcycsXG4gICAgICAgICAgICBoIDogJ3VuYSBob3JhJyxcbiAgICAgICAgICAgIGhoIDogJyVkIGhvcmFzJyxcbiAgICAgICAgICAgIGQgOiAndW4gZMOtYScsXG4gICAgICAgICAgICBkZCA6ICclZCBkw61hcycsXG4gICAgICAgICAgICBNIDogJ3VuIG1lcycsXG4gICAgICAgICAgICBNTSA6ICclZCBtZXNlcycsXG4gICAgICAgICAgICB5IDogJ3VuIGHDsW8nLFxuICAgICAgICAgICAgeXkgOiAnJWQgYcOxb3MnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2UgOiAvXFxkezEsMn3Cui8sXG4gICAgICAgIG9yZGluYWwgOiAnJWTCuicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGVzO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgbW9udGhzU2hvcnREb3QgPSAnZW5lLl9mZWIuX21hci5fYWJyLl9tYXkuX2p1bi5fanVsLl9hZ28uX3NlcC5fb2N0Ll9ub3YuX2RpYy4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0ID0gJ2VuZV9mZWJfbWFyX2Ficl9tYXlfanVuX2p1bF9hZ29fc2VwX29jdF9ub3ZfZGljJy5zcGxpdCgnXycpO1xuXG4gICAgdmFyIG1vbnRoc1BhcnNlID0gWy9eZW5lL2ksIC9eZmViL2ksIC9ebWFyL2ksIC9eYWJyL2ksIC9ebWF5L2ksIC9eanVuL2ksIC9eanVsL2ksIC9eYWdvL2ksIC9ec2VwL2ksIC9eb2N0L2ksIC9ebm92L2ksIC9eZGljL2ldO1xuICAgIHZhciBtb250aHNSZWdleCA9IC9eKGVuZXJvfGZlYnJlcm98bWFyem98YWJyaWx8bWF5b3xqdW5pb3xqdWxpb3xhZ29zdG98c2VwdGllbWJyZXxvY3R1YnJlfG5vdmllbWJyZXxkaWNpZW1icmV8ZW5lXFwuP3xmZWJcXC4/fG1hclxcLj98YWJyXFwuP3xtYXlcXC4/fGp1blxcLj98anVsXFwuP3xhZ29cXC4/fHNlcFxcLj98b2N0XFwuP3xub3ZcXC4/fGRpY1xcLj8pL2k7XG5cbiAgICB2YXIgZXNEbyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2VzLWRvJywge1xuICAgICAgICBtb250aHMgOiAnZW5lcm9fZmVicmVyb19tYXJ6b19hYnJpbF9tYXlvX2p1bmlvX2p1bGlvX2Fnb3N0b19zZXB0aWVtYnJlX29jdHVicmVfbm92aWVtYnJlX2RpY2llbWJyZScuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiBmdW5jdGlvbiAobSwgZm9ybWF0KSB7XG4gICAgICAgICAgICBpZiAoIW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnREb3Q7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKC8tTU1NLS8udGVzdChmb3JtYXQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0W20ubW9udGgoKV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydERvdFttLm1vbnRoKCldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtb250aHNSZWdleDogbW9udGhzUmVnZXgsXG4gICAgICAgIG1vbnRoc1Nob3J0UmVnZXg6IG1vbnRoc1JlZ2V4LFxuICAgICAgICBtb250aHNTdHJpY3RSZWdleDogL14oZW5lcm98ZmVicmVyb3xtYXJ6b3xhYnJpbHxtYXlvfGp1bmlvfGp1bGlvfGFnb3N0b3xzZXB0aWVtYnJlfG9jdHVicmV8bm92aWVtYnJlfGRpY2llbWJyZSkvaSxcbiAgICAgICAgbW9udGhzU2hvcnRTdHJpY3RSZWdleDogL14oZW5lXFwuP3xmZWJcXC4/fG1hclxcLj98YWJyXFwuP3xtYXlcXC4/fGp1blxcLj98anVsXFwuP3xhZ29cXC4/fHNlcFxcLj98b2N0XFwuP3xub3ZcXC4/fGRpY1xcLj8pL2ksXG4gICAgICAgIG1vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICAgICAgbG9uZ01vbnRoc1BhcnNlOiBtb250aHNQYXJzZSxcbiAgICAgICAgc2hvcnRNb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG4gICAgICAgIHdlZWtkYXlzIDogJ2RvbWluZ29fbHVuZXNfbWFydGVzX21pw6lyY29sZXNfanVldmVzX3ZpZXJuZXNfc8OhYmFkbycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdkb20uX2x1bi5fbWFyLl9tacOpLl9qdWUuX3ZpZS5fc8OhYi4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ2RvX2x1X21hX21pX2p1X3ZpX3PDoScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdoOm1tIEEnLFxuICAgICAgICAgICAgTFRTIDogJ2g6bW06c3MgQScsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBbZGVdIE1NTU0gW2RlXSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIFtkZV0gTU1NTSBbZGVdIFlZWVkgaDptbSBBJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBbZGVdIE1NTU0gW2RlXSBZWVlZIGg6bW0gQSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW2hveSBhIGxhJyArICgodGhpcy5ob3VycygpICE9PSAxKSA/ICdzJyA6ICcnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuZXh0RGF5IDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW21hw7FhbmEgYSBsYScgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmV4dFdlZWsgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdkZGRkIFthIGxhJyArICgodGhpcy5ob3VycygpICE9PSAxKSA/ICdzJyA6ICcnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0RGF5IDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW2F5ZXIgYSBsYScgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdFdlZWsgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdbZWxdIGRkZGQgW3Bhc2FkbyBhIGxhJyArICgodGhpcy5ob3VycygpICE9PSAxKSA/ICdzJyA6ICcnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnZW4gJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICdoYWNlICVzJyxcbiAgICAgICAgICAgIHMgOiAndW5vcyBzZWd1bmRvcycsXG4gICAgICAgICAgICBzcyA6ICclZCBzZWd1bmRvcycsXG4gICAgICAgICAgICBtIDogJ3VuIG1pbnV0bycsXG4gICAgICAgICAgICBtbSA6ICclZCBtaW51dG9zJyxcbiAgICAgICAgICAgIGggOiAndW5hIGhvcmEnLFxuICAgICAgICAgICAgaGggOiAnJWQgaG9yYXMnLFxuICAgICAgICAgICAgZCA6ICd1biBkw61hJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGTDrWFzJyxcbiAgICAgICAgICAgIE0gOiAndW4gbWVzJyxcbiAgICAgICAgICAgIE1NIDogJyVkIG1lc2VzJyxcbiAgICAgICAgICAgIHkgOiAndW4gYcOxbycsXG4gICAgICAgICAgICB5eSA6ICclZCBhw7FvcydcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZSA6IC9cXGR7MSwyfcK6LyxcbiAgICAgICAgb3JkaW5hbCA6ICclZMK6JyxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZXNEbztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIG1vbnRoc1Nob3J0RG90ID0gJ2VuZS5fZmViLl9tYXIuX2Fici5fbWF5Ll9qdW4uX2p1bC5fYWdvLl9zZXAuX29jdC5fbm92Ll9kaWMuJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA9ICdlbmVfZmViX21hcl9hYnJfbWF5X2p1bl9qdWxfYWdvX3NlcF9vY3Rfbm92X2RpYycuc3BsaXQoJ18nKTtcblxuICAgIHZhciBtb250aHNQYXJzZSA9IFsvXmVuZS9pLCAvXmZlYi9pLCAvXm1hci9pLCAvXmFici9pLCAvXm1heS9pLCAvXmp1bi9pLCAvXmp1bC9pLCAvXmFnby9pLCAvXnNlcC9pLCAvXm9jdC9pLCAvXm5vdi9pLCAvXmRpYy9pXTtcbiAgICB2YXIgbW9udGhzUmVnZXggPSAvXihlbmVyb3xmZWJyZXJvfG1hcnpvfGFicmlsfG1heW98anVuaW98anVsaW98YWdvc3RvfHNlcHRpZW1icmV8b2N0dWJyZXxub3ZpZW1icmV8ZGljaWVtYnJlfGVuZVxcLj98ZmViXFwuP3xtYXJcXC4/fGFiclxcLj98bWF5XFwuP3xqdW5cXC4/fGp1bFxcLj98YWdvXFwuP3xzZXBcXC4/fG9jdFxcLj98bm92XFwuP3xkaWNcXC4/KS9pO1xuXG4gICAgdmFyIGVzVXMgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdlcy11cycsIHtcbiAgICAgICAgbW9udGhzIDogJ2VuZXJvX2ZlYnJlcm9fbWFyem9fYWJyaWxfbWF5b19qdW5pb19qdWxpb19hZ29zdG9fc2VwdGllbWJyZV9vY3R1YnJlX25vdmllbWJyZV9kaWNpZW1icmUnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogZnVuY3Rpb24gKG0sIGZvcm1hdCkge1xuICAgICAgICAgICAgaWYgKCFtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0RG90O1xuICAgICAgICAgICAgfSBlbHNlIGlmICgvLU1NTS0vLnRlc3QoZm9ybWF0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNTaG9ydFttLm1vbnRoKCldO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnREb3RbbS5tb250aCgpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzUmVnZXg6IG1vbnRoc1JlZ2V4LFxuICAgICAgICBtb250aHNTaG9ydFJlZ2V4OiBtb250aHNSZWdleCxcbiAgICAgICAgbW9udGhzU3RyaWN0UmVnZXg6IC9eKGVuZXJvfGZlYnJlcm98bWFyem98YWJyaWx8bWF5b3xqdW5pb3xqdWxpb3xhZ29zdG98c2VwdGllbWJyZXxvY3R1YnJlfG5vdmllbWJyZXxkaWNpZW1icmUpL2ksXG4gICAgICAgIG1vbnRoc1Nob3J0U3RyaWN0UmVnZXg6IC9eKGVuZVxcLj98ZmViXFwuP3xtYXJcXC4/fGFiclxcLj98bWF5XFwuP3xqdW5cXC4/fGp1bFxcLj98YWdvXFwuP3xzZXBcXC4/fG9jdFxcLj98bm92XFwuP3xkaWNcXC4/KS9pLFxuICAgICAgICBtb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG4gICAgICAgIGxvbmdNb250aHNQYXJzZTogbW9udGhzUGFyc2UsXG4gICAgICAgIHNob3J0TW9udGhzUGFyc2U6IG1vbnRoc1BhcnNlLFxuICAgICAgICB3ZWVrZGF5cyA6ICdkb21pbmdvX2x1bmVzX21hcnRlc19tacOpcmNvbGVzX2p1ZXZlc192aWVybmVzX3PDoWJhZG8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnZG9tLl9sdW4uX21hci5fbWnDqS5fanVlLl92aWUuX3PDoWIuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdkb19sdV9tYV9taV9qdV92aV9zw6EnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnaDptbSBBJyxcbiAgICAgICAgICAgIExUUyA6ICdoOm1tOnNzIEEnLFxuICAgICAgICAgICAgTCA6ICdNTS9ERC9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgW2RlXSBNTU1NIFtkZV0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBbZGVdIE1NTU0gW2RlXSBZWVlZIGg6bW0gQScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgW2RlXSBNTU1NIFtkZV0gWVlZWSBoOm1tIEEnXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1tob3kgYSBsYScgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmV4dERheSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1ttYcOxYW5hIGEgbGEnICsgKCh0aGlzLmhvdXJzKCkgIT09IDEpID8gJ3MnIDogJycpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5leHRXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZGRkZCBbYSBsYScgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdERheSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1theWVyIGEgbGEnICsgKCh0aGlzLmhvdXJzKCkgIT09IDEpID8gJ3MnIDogJycpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW2VsXSBkZGRkIFtwYXNhZG8gYSBsYScgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAncycgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ2VuICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnaGFjZSAlcycsXG4gICAgICAgICAgICBzIDogJ3Vub3Mgc2VndW5kb3MnLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2VndW5kb3MnLFxuICAgICAgICAgICAgbSA6ICd1biBtaW51dG8nLFxuICAgICAgICAgICAgbW0gOiAnJWQgbWludXRvcycsXG4gICAgICAgICAgICBoIDogJ3VuYSBob3JhJyxcbiAgICAgICAgICAgIGhoIDogJyVkIGhvcmFzJyxcbiAgICAgICAgICAgIGQgOiAndW4gZMOtYScsXG4gICAgICAgICAgICBkZCA6ICclZCBkw61hcycsXG4gICAgICAgICAgICBNIDogJ3VuIG1lcycsXG4gICAgICAgICAgICBNTSA6ICclZCBtZXNlcycsXG4gICAgICAgICAgICB5IDogJ3VuIGHDsW8nLFxuICAgICAgICAgICAgeXkgOiAnJWQgYcOxb3MnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2UgOiAvXFxkezEsMn3Cui8sXG4gICAgICAgIG9yZGluYWwgOiAnJWTCuicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDYgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDZ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGVzVXM7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIGZ1bmN0aW9uIHByb2Nlc3NSZWxhdGl2ZVRpbWUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB7XG4gICAgICAgICAgICAncycgOiBbJ23DtW5lIHNla3VuZGknLCAnbcO1bmkgc2VrdW5kJywgJ3BhYXIgc2VrdW5kaXQnXSxcbiAgICAgICAgICAgICdzcyc6IFtudW1iZXIgKyAnc2VrdW5kaScsIG51bWJlciArICdzZWt1bmRpdCddLFxuICAgICAgICAgICAgJ20nIDogWyfDvGhlIG1pbnV0aScsICfDvGtzIG1pbnV0J10sXG4gICAgICAgICAgICAnbW0nOiBbbnVtYmVyICsgJyBtaW51dGknLCBudW1iZXIgKyAnIG1pbnV0aXQnXSxcbiAgICAgICAgICAgICdoJyA6IFsnw7xoZSB0dW5uaScsICd0dW5kIGFlZ2EnLCAnw7xrcyB0dW5kJ10sXG4gICAgICAgICAgICAnaGgnOiBbbnVtYmVyICsgJyB0dW5uaScsIG51bWJlciArICcgdHVuZGknXSxcbiAgICAgICAgICAgICdkJyA6IFsnw7xoZSBww6RldmEnLCAnw7xrcyBww6RldiddLFxuICAgICAgICAgICAgJ00nIDogWydrdXUgYWphJywgJ2t1dSBhZWdhJywgJ8O8a3Mga3V1J10sXG4gICAgICAgICAgICAnTU0nOiBbbnVtYmVyICsgJyBrdXUnLCBudW1iZXIgKyAnIGt1dWQnXSxcbiAgICAgICAgICAgICd5JyA6IFsnw7xoZSBhYXN0YScsICdhYXN0YScsICfDvGtzIGFhc3RhJ10sXG4gICAgICAgICAgICAneXknOiBbbnVtYmVyICsgJyBhYXN0YScsIG51bWJlciArICcgYWFzdGF0J11cbiAgICAgICAgfTtcbiAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXRba2V5XVsyXSA/IGZvcm1hdFtrZXldWzJdIDogZm9ybWF0W2tleV1bMV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzRnV0dXJlID8gZm9ybWF0W2tleV1bMF0gOiBmb3JtYXRba2V5XVsxXTtcbiAgICB9XG5cbiAgICB2YXIgZXQgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdldCcsIHtcbiAgICAgICAgbW9udGhzICAgICAgICA6ICdqYWFudWFyX3ZlZWJydWFyX23DpHJ0c19hcHJpbGxfbWFpX2p1dW5pX2p1dWxpX2F1Z3VzdF9zZXB0ZW1iZXJfb2t0b29iZXJfbm92ZW1iZXJfZGV0c2VtYmVyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCAgIDogJ2phYW5fdmVlYnJfbcOkcnRzX2Fwcl9tYWlfanV1bmlfanV1bGlfYXVnX3NlcHRfb2t0X25vdl9kZXRzJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyAgICAgIDogJ3DDvGhhcMOkZXZfZXNtYXNww6Rldl90ZWlzaXDDpGV2X2tvbG1hcMOkZXZfbmVsamFww6Rldl9yZWVkZV9sYXVww6Rldicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdQX0VfVF9LX05fUl9MJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiAgIDogJ1BfRV9UX0tfTl9SX0wnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgICA6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgICAgOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCAgIDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgIDogJ0QuIE1NTU0gWVlZWSBIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRC4gTU1NTSBZWVlZIEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSAgOiAnW1TDpG5hLF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSAgOiAnW0hvbW1lLF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnW0rDpHJnbWluZV0gZGRkZCBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5ICA6ICdbRWlsZSxdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1tFZWxtaW5lXSBkZGRkIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICclcyBww6RyYXN0JyxcbiAgICAgICAgICAgIHBhc3QgICA6ICclcyB0YWdhc2knLFxuICAgICAgICAgICAgcyAgICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHNzICAgICA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBtICAgICAgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgbW0gICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGggICAgICA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBoaCAgICAgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgZCAgICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGRkICAgICA6ICclZCBww6RldmEnLFxuICAgICAgICAgICAgTSAgICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIE1NICAgICA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB5ICAgICAgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgeXkgICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGV0O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgZXUgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdldScsIHtcbiAgICAgICAgbW9udGhzIDogJ3VydGFycmlsYV9vdHNhaWxhX21hcnR4b2FfYXBpcmlsYV9tYWlhdHphX2VrYWluYV91enRhaWxhX2FidXp0dWFfaXJhaWxhX3VycmlhX2F6YXJvYV9hYmVuZHVhJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICd1cnQuX290cy5fbWFyLl9hcGkuX21haS5fZWthLl91enQuX2FidS5faXJhLl91cnIuX2F6YS5fYWJlLicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzIDogJ2lnYW5kZWFfYXN0ZWxlaGVuYV9hc3RlYXJ0ZWFfYXN0ZWF6a2VuYV9vc3RlZ3VuYV9vc3RpcmFsYV9sYXJ1bmJhdGEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnaWcuX2FsLl9hci5fYXouX29nLl9vbC5fbHIuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdpZ19hbF9hcl9hel9vZ19vbF9scicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdZWVlZLU1NLUREJyxcbiAgICAgICAgICAgIExMIDogJ1lZWVlba29dIE1NTU1bcmVuXSBEW2FdJyxcbiAgICAgICAgICAgIExMTCA6ICdZWVlZW2tvXSBNTU1NW3Jlbl0gRFthXSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIFlZWVlba29dIE1NTU1bcmVuXSBEW2FdIEhIOm1tJyxcbiAgICAgICAgICAgIGwgOiAnWVlZWS1NLUQnLFxuICAgICAgICAgICAgbGwgOiAnWVlZWVtrb10gTU1NIERbYV0nLFxuICAgICAgICAgICAgbGxsIDogJ1lZWVlba29dIE1NTSBEW2FdIEhIOm1tJyxcbiAgICAgICAgICAgIGxsbGwgOiAnZGRkLCBZWVlZW2tvXSBNTU0gRFthXSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1tnYXVyXSBMVFtldGFuXScsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1tiaWhhcl0gTFRbZXRhbl0nLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBMVFtldGFuXScsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1thdHpvXSBMVFtldGFuXScsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdbYXVycmVrb10gZGRkZCBMVFtldGFuXScsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnJXMgYmFycnUnLFxuICAgICAgICAgICAgcGFzdCA6ICdkdWVsYSAlcycsXG4gICAgICAgICAgICBzIDogJ3NlZ3VuZG8gYmF0enVrJyxcbiAgICAgICAgICAgIHNzIDogJyVkIHNlZ3VuZG8nLFxuICAgICAgICAgICAgbSA6ICdtaW51dHUgYmF0JyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbnV0dScsXG4gICAgICAgICAgICBoIDogJ29yZHUgYmF0JyxcbiAgICAgICAgICAgIGhoIDogJyVkIG9yZHUnLFxuICAgICAgICAgICAgZCA6ICdlZ3VuIGJhdCcsXG4gICAgICAgICAgICBkZCA6ICclZCBlZ3VuJyxcbiAgICAgICAgICAgIE0gOiAnaGlsYWJldGUgYmF0JyxcbiAgICAgICAgICAgIE1NIDogJyVkIGhpbGFiZXRlJyxcbiAgICAgICAgICAgIHkgOiAndXJ0ZSBiYXQnLFxuICAgICAgICAgICAgeXkgOiAnJWQgdXJ0ZSdcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbCA6ICclZC4nLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA3ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA3dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBldTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHN5bWJvbE1hcCA9IHtcbiAgICAgICAgJzEnOiAn27EnLFxuICAgICAgICAnMic6ICfbsicsXG4gICAgICAgICczJzogJ9uzJyxcbiAgICAgICAgJzQnOiAn27QnLFxuICAgICAgICAnNSc6ICfbtScsXG4gICAgICAgICc2JzogJ9u2JyxcbiAgICAgICAgJzcnOiAn27cnLFxuICAgICAgICAnOCc6ICfbuCcsXG4gICAgICAgICc5JzogJ9u5JyxcbiAgICAgICAgJzAnOiAn27AnXG4gICAgfSwgbnVtYmVyTWFwID0ge1xuICAgICAgICAn27EnOiAnMScsXG4gICAgICAgICfbsic6ICcyJyxcbiAgICAgICAgJ9uzJzogJzMnLFxuICAgICAgICAn27QnOiAnNCcsXG4gICAgICAgICfbtSc6ICc1JyxcbiAgICAgICAgJ9u2JzogJzYnLFxuICAgICAgICAn27cnOiAnNycsXG4gICAgICAgICfbuCc6ICc4JyxcbiAgICAgICAgJ9u5JzogJzknLFxuICAgICAgICAn27AnOiAnMCdcbiAgICB9O1xuXG4gICAgdmFyIGZhID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZmEnLCB7XG4gICAgICAgIG1vbnRocyA6ICfamNin2YbZiNuM2Ydf2YHZiNix24zZh1/Zhdin2LHYs1/YotmI2LHbjNmEX9mF2Ydf2pjZiNim2YZf2pjZiNim24zZh1/Yp9mI2Kpf2LPZvtiq2KfZhdio2LFf2Kfaqdiq2KjYsV/ZhtmI2KfZhdio2LFf2K/Ys9in2YXYqNixJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICfamNin2YbZiNuM2Ydf2YHZiNix24zZh1/Zhdin2LHYs1/YotmI2LHbjNmEX9mF2Ydf2pjZiNim2YZf2pjZiNim24zZh1/Yp9mI2Kpf2LPZvtiq2KfZhdio2LFf2Kfaqdiq2KjYsV/ZhtmI2KfZhdio2LFf2K/Ys9in2YXYqNixJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICfbjNqpXFx1MjAwY9i02YbYqNmHX9iv2YjYtNmG2KjZh1/Ys9mHXFx1MjAwY9i02YbYqNmHX9qG2YfYp9ix2LTZhtio2Ydf2b7ZhtisXFx1MjAwY9i02YbYqNmHX9is2YXYudmHX9i02YbYqNmHJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ9uM2qlcXHUyMDBj2LTZhtio2Ydf2K/ZiNi02YbYqNmHX9iz2YdcXHUyMDBj2LTZhtio2Ydf2obZh9in2LHYtNmG2KjZh1/ZvtmG2KxcXHUyMDBj2LTZhtio2Ydf2KzZhdi52Ydf2LTZhtio2YcnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ9uMX9ivX9izX9qGX9m+X9isX9i0Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/Zgtio2YQg2KfYsiDYuNmH2LF82KjYudivINin2LIg2LjZh9ixLyxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gL9io2LnYryDYp9iyINi42YfYsS8udGVzdChpbnB1dCk7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn2YLYqNmEINin2LIg2LjZh9ixJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfYqNi52K8g2KfYsiDYuNmH2LEnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW9in2YXYsdmI2LIg2LPYp9i52KpdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW9mB2LHYr9inINiz2KfYudiqXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFvYs9in2LnYql0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdb2K/bjNix2YjYsiDYs9in2LnYql0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnZGRkZCBb2b7bjNi0XSBb2LPYp9i52KpdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICfYr9ixICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMg2b7bjNi0JyxcbiAgICAgICAgICAgIHMgOiAn2obZhtivINir2KfZhtuM2YcnLFxuICAgICAgICAgICAgc3MgOiAn2KvYp9mG24zZhyBkJScsXG4gICAgICAgICAgICBtIDogJ9uM2qkg2K/ZgtuM2YLZhycsXG4gICAgICAgICAgICBtbSA6ICclZCDYr9mC24zZgtmHJyxcbiAgICAgICAgICAgIGggOiAn24zaqSDYs9in2LnYqicsXG4gICAgICAgICAgICBoaCA6ICclZCDYs9in2LnYqicsXG4gICAgICAgICAgICBkIDogJ9uM2qkg2LHZiNiyJyxcbiAgICAgICAgICAgIGRkIDogJyVkINix2YjYsicsXG4gICAgICAgICAgICBNIDogJ9uM2qkg2YXYp9mHJyxcbiAgICAgICAgICAgIE1NIDogJyVkINmF2KfZhycsXG4gICAgICAgICAgICB5IDogJ9uM2qkg2LPYp9mEJyxcbiAgICAgICAgICAgIHl5IDogJyVkINiz2KfZhCdcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvW9uwLdu5XS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pLnJlcGxhY2UoL9iML2csICcsJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvXFxkL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSkucmVwbGFjZSgvLC9nLCAn2IwnKTtcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ92YUvLFxuICAgICAgICBvcmRpbmFsIDogJyVk2YUnLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogNiwgLy8gU2F0dXJkYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDEyIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDEydGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBmYTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIG51bWJlcnNQYXN0ID0gJ25vbGxhIHlrc2kga2Frc2kga29sbWUgbmVsasOkIHZpaXNpIGt1dXNpIHNlaXRzZW3DpG4ga2FoZGVrc2FuIHloZGVrc8Okbicuc3BsaXQoJyAnKSxcbiAgICAgICAgbnVtYmVyc0Z1dHVyZSA9IFtcbiAgICAgICAgICAgICdub2xsYScsICd5aGRlbicsICdrYWhkZW4nLCAna29sbWVuJywgJ25lbGrDpG4nLCAndmlpZGVuJywgJ2t1dWRlbicsXG4gICAgICAgICAgICBudW1iZXJzUGFzdFs3XSwgbnVtYmVyc1Bhc3RbOF0sIG51bWJlcnNQYXN0WzldXG4gICAgICAgIF07XG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICBjYXNlICdzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNGdXR1cmUgPyAnbXV1dGFtYW4gc2VrdW5uaW4nIDogJ211dXRhbWEgc2VrdW50aSc7XG4gICAgICAgICAgICBjYXNlICdzcyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzRnV0dXJlID8gJ3Nla3VubmluJyA6ICdzZWt1bnRpYSc7XG4gICAgICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNGdXR1cmUgPyAnbWludXV0aW4nIDogJ21pbnV1dHRpJztcbiAgICAgICAgICAgIGNhc2UgJ21tJzpcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBpc0Z1dHVyZSA/ICdtaW51dXRpbicgOiAnbWludXV0dGlhJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2gnOlxuICAgICAgICAgICAgICAgIHJldHVybiBpc0Z1dHVyZSA/ICd0dW5uaW4nIDogJ3R1bnRpJztcbiAgICAgICAgICAgIGNhc2UgJ2hoJzpcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBpc0Z1dHVyZSA/ICd0dW5uaW4nIDogJ3R1bnRpYSc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNGdXR1cmUgPyAncMOkaXbDpG4nIDogJ3DDpGl2w6QnO1xuICAgICAgICAgICAgY2FzZSAnZGQnOlxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGlzRnV0dXJlID8gJ3DDpGl2w6RuJyA6ICdww6RpdsOkw6QnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzRnV0dXJlID8gJ2t1dWthdWRlbicgOiAna3V1a2F1c2knO1xuICAgICAgICAgICAgY2FzZSAnTU0nOlxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGlzRnV0dXJlID8gJ2t1dWthdWRlbicgOiAna3V1a2F1dHRhJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3knOlxuICAgICAgICAgICAgICAgIHJldHVybiBpc0Z1dHVyZSA/ICd2dW9kZW4nIDogJ3Z1b3NpJztcbiAgICAgICAgICAgIGNhc2UgJ3l5JzpcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBpc0Z1dHVyZSA/ICd2dW9kZW4nIDogJ3Z1b3R0YSc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ID0gdmVyYmFsTnVtYmVyKG51bWJlciwgaXNGdXR1cmUpICsgJyAnICsgcmVzdWx0O1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBmdW5jdGlvbiB2ZXJiYWxOdW1iZXIobnVtYmVyLCBpc0Z1dHVyZSkge1xuICAgICAgICByZXR1cm4gbnVtYmVyIDwgMTAgPyAoaXNGdXR1cmUgPyBudW1iZXJzRnV0dXJlW251bWJlcl0gOiBudW1iZXJzUGFzdFtudW1iZXJdKSA6IG51bWJlcjtcbiAgICB9XG5cbiAgICB2YXIgZmkgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdmaScsIHtcbiAgICAgICAgbW9udGhzIDogJ3RhbW1pa3V1X2hlbG1pa3V1X21hYWxpc2t1dV9odWh0aWt1dV90b3Vrb2t1dV9rZXPDpGt1dV9oZWluw6RrdXVfZWxva3V1X3N5eXNrdXVfbG9rYWt1dV9tYXJyYXNrdXVfam91bHVrdXUnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ3RhbW1pX2hlbG1pX21hYWxpc19odWh0aV90b3Vrb19rZXPDpF9oZWluw6RfZWxvX3N5eXNfbG9rYV9tYXJyYXNfam91bHUnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ3N1bm51bnRhaV9tYWFuYW50YWlfdGlpc3RhaV9rZXNraXZpaWtrb190b3JzdGFpX3BlcmphbnRhaV9sYXVhbnRhaScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdzdV9tYV90aV9rZV90b19wZV9sYScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnc3VfbWFfdGlfa2VfdG9fcGVfbGEnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEgubW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hILm1tLnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEbyBNTU1NW3RhXSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEbyBNTU1NW3RhXSBZWVlZLCBba2xvXSBISC5tbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIERvIE1NTU1bdGFdIFlZWVksIFtrbG9dIEhILm1tJyxcbiAgICAgICAgICAgIGwgOiAnRC5NLllZWVknLFxuICAgICAgICAgICAgbGwgOiAnRG8gTU1NIFlZWVknLFxuICAgICAgICAgICAgbGxsIDogJ0RvIE1NTSBZWVlZLCBba2xvXSBISC5tbScsXG4gICAgICAgICAgICBsbGxsIDogJ2RkZCwgRG8gTU1NIFlZWVksIFtrbG9dIEhILm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW3TDpG7DpMOkbl0gW2tsb10gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdbaHVvbWVubmFdIFtrbG9dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW2tsb10gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdbZWlsZW5dIFtrbG9dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1t2aWltZV0gZGRkZFtuYV0gW2tsb10gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJyVzIHDDpMOkc3TDpCcsXG4gICAgICAgICAgICBwYXN0IDogJyVzIHNpdHRlbicsXG4gICAgICAgICAgICBzIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgc3MgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBtIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbW0gOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBoIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaGggOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBkIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgZGQgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBNIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgTU0gOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICB5IDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgeXkgOiB0cmFuc2xhdGVcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbCA6ICclZC4nLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBmaTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGZvID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZm8nLCB7XG4gICAgICAgIG1vbnRocyA6ICdqYW51YXJfZmVicnVhcl9tYXJzX2FwcsOtbF9tYWlfanVuaV9qdWxpX2F1Z3VzdF9zZXB0ZW1iZXJfb2t0b2Jlcl9ub3ZlbWJlcl9kZXNlbWJlcicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnamFuX2ZlYl9tYXJfYXByX21haV9qdW5fanVsX2F1Z19zZXBfb2t0X25vdl9kZXMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ3N1bm51ZGFndXJfbcOhbmFkYWd1cl90w71zZGFndXJfbWlrdWRhZ3VyX2jDs3NkYWd1cl9mcsOtZ2dqYWRhZ3VyX2xleWdhcmRhZ3VyJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ3N1bl9tw6FuX3TDvXNfbWlrX2jDs3NfZnLDrV9sZXknLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ3N1X23DoV90w71fbWlfaMOzX2ZyX2xlJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCBELiBNTU1NLCBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW8ONIGRhZyBrbC5dIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW8ONIG1vcmdpbiBrbC5dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW2tsLl0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdbw40gZ2rDoXIga2wuXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdbc8Otw7BzdHVdIGRkZGQgW2tsXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAndW0gJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyBzw63DsGFuaScsXG4gICAgICAgICAgICBzIDogJ2bDoSBzZWt1bmQnLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2VrdW5kaXInLFxuICAgICAgICAgICAgbSA6ICdlaW4gbWludXR0dXInLFxuICAgICAgICAgICAgbW0gOiAnJWQgbWludXR0aXInLFxuICAgICAgICAgICAgaCA6ICdlaW4gdMOtbWknLFxuICAgICAgICAgICAgaGggOiAnJWQgdMOtbWFyJyxcbiAgICAgICAgICAgIGQgOiAnZWluIGRhZ3VyJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGRhZ2FyJyxcbiAgICAgICAgICAgIE0gOiAnZWluIG3DoW5hw7B1cicsXG4gICAgICAgICAgICBNTSA6ICclZCBtw6FuYcOwaXInLFxuICAgICAgICAgICAgeSA6ICdlaXR0IMOhcicsXG4gICAgICAgICAgICB5eSA6ICclZCDDoXInXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWwgOiAnJWQuJyxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZm87XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBmciA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2ZyJywge1xuICAgICAgICBtb250aHMgOiAnamFudmllcl9mw6l2cmllcl9tYXJzX2F2cmlsX21haV9qdWluX2p1aWxsZXRfYW/Du3Rfc2VwdGVtYnJlX29jdG9icmVfbm92ZW1icmVfZMOpY2VtYnJlJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdqYW52Ll9mw6l2ci5fbWFyc19hdnIuX21haV9qdWluX2p1aWwuX2Fvw7t0X3NlcHQuX29jdC5fbm92Ll9kw6ljLicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzIDogJ2RpbWFuY2hlX2x1bmRpX21hcmRpX21lcmNyZWRpX2pldWRpX3ZlbmRyZWRpX3NhbWVkaScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdkaW0uX2x1bi5fbWFyLl9tZXIuX2pldS5fdmVuLl9zYW0uJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdkaV9sdV9tYV9tZV9qZV92ZV9zYScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbQXVqb3VyZOKAmWh1aSDDoF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdbRGVtYWluIMOgXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFvDoF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdbSGllciDDoF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnZGRkZCBbZGVybmllciDDoF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ2RhbnMgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICdpbCB5IGEgJXMnLFxuICAgICAgICAgICAgcyA6ICdxdWVscXVlcyBzZWNvbmRlcycsXG4gICAgICAgICAgICBzcyA6ICclZCBzZWNvbmRlcycsXG4gICAgICAgICAgICBtIDogJ3VuZSBtaW51dGUnLFxuICAgICAgICAgICAgbW0gOiAnJWQgbWludXRlcycsXG4gICAgICAgICAgICBoIDogJ3VuZSBoZXVyZScsXG4gICAgICAgICAgICBoaCA6ICclZCBoZXVyZXMnLFxuICAgICAgICAgICAgZCA6ICd1biBqb3VyJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGpvdXJzJyxcbiAgICAgICAgICAgIE0gOiAndW4gbW9pcycsXG4gICAgICAgICAgICBNTSA6ICclZCBtb2lzJyxcbiAgICAgICAgICAgIHkgOiAndW4gYW4nLFxuICAgICAgICAgICAgeXkgOiAnJWQgYW5zJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oZXJ8KS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgLy8gVE9ETzogUmV0dXJuICdlJyB3aGVuIGRheSBvZiBtb250aCA+IDEuIE1vdmUgdGhpcyBjYXNlIGluc2lkZVxuICAgICAgICAgICAgICAgIC8vIGJsb2NrIGZvciBtYXNjdWxpbmUgd29yZHMgYmVsb3cuXG4gICAgICAgICAgICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L2lzc3Vlcy8zMzc1XG4gICAgICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAobnVtYmVyID09PSAxID8gJ2VyJyA6ICcnKTtcblxuICAgICAgICAgICAgICAgIC8vIFdvcmRzIHdpdGggbWFzY3VsaW5lIGdyYW1tYXRpY2FsIGdlbmRlcjogbW9pcywgdHJpbWVzdHJlLCBqb3VyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgICAgICBjYXNlICdRJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEREQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKG51bWJlciA9PT0gMSA/ICdlcicgOiAnZScpO1xuXG4gICAgICAgICAgICAgICAgLy8gV29yZHMgd2l0aCBmZW1pbmluZSBncmFtbWF0aWNhbCBnZW5kZXI6IHNlbWFpbmVcbiAgICAgICAgICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgICAgICBjYXNlICdXJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIChudW1iZXIgPT09IDEgPyAncmUnIDogJ2UnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZnI7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBmckNhID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZnItY2EnLCB7XG4gICAgICAgIG1vbnRocyA6ICdqYW52aWVyX2bDqXZyaWVyX21hcnNfYXZyaWxfbWFpX2p1aW5fanVpbGxldF9hb8O7dF9zZXB0ZW1icmVfb2N0b2JyZV9ub3ZlbWJyZV9kw6ljZW1icmUnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ2phbnYuX2bDqXZyLl9tYXJzX2F2ci5fbWFpX2p1aW5fanVpbC5fYW/Du3Rfc2VwdC5fb2N0Ll9ub3YuX2TDqWMuJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXMgOiAnZGltYW5jaGVfbHVuZGlfbWFyZGlfbWVyY3JlZGlfamV1ZGlfdmVuZHJlZGlfc2FtZWRpJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ2RpbS5fbHVuLl9tYXIuX21lci5famV1Ll92ZW4uX3NhbS4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ2RpX2x1X21hX21lX2plX3ZlX3NhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ1lZWVktTU0tREQnLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1tBdWpvdXJk4oCZaHVpIMOgXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1tEZW1haW4gw6BdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW8OgXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1tIaWVyIMOgXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdkZGRkIFtkZXJuaWVyIMOgXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnZGFucyAlcycsXG4gICAgICAgICAgICBwYXN0IDogJ2lsIHkgYSAlcycsXG4gICAgICAgICAgICBzIDogJ3F1ZWxxdWVzIHNlY29uZGVzJyxcbiAgICAgICAgICAgIHNzIDogJyVkIHNlY29uZGVzJyxcbiAgICAgICAgICAgIG0gOiAndW5lIG1pbnV0ZScsXG4gICAgICAgICAgICBtbSA6ICclZCBtaW51dGVzJyxcbiAgICAgICAgICAgIGggOiAndW5lIGhldXJlJyxcbiAgICAgICAgICAgIGhoIDogJyVkIGhldXJlcycsXG4gICAgICAgICAgICBkIDogJ3VuIGpvdXInLFxuICAgICAgICAgICAgZGQgOiAnJWQgam91cnMnLFxuICAgICAgICAgICAgTSA6ICd1biBtb2lzJyxcbiAgICAgICAgICAgIE1NIDogJyVkIG1vaXMnLFxuICAgICAgICAgICAgeSA6ICd1biBhbicsXG4gICAgICAgICAgICB5eSA6ICclZCBhbnMnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShlcnxlKS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgLy8gV29yZHMgd2l0aCBtYXNjdWxpbmUgZ3JhbW1hdGljYWwgZ2VuZGVyOiBtb2lzLCB0cmltZXN0cmUsIGpvdXJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1EnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAobnVtYmVyID09PSAxID8gJ2VyJyA6ICdlJyk7XG5cbiAgICAgICAgICAgICAgICAvLyBXb3JkcyB3aXRoIGZlbWluaW5lIGdyYW1tYXRpY2FsIGdlbmRlcjogc2VtYWluZVxuICAgICAgICAgICAgICAgIGNhc2UgJ3cnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1cnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKG51bWJlciA9PT0gMSA/ICdyZScgOiAnZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZnJDYTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGZyQ2ggPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdmci1jaCcsIHtcbiAgICAgICAgbW9udGhzIDogJ2phbnZpZXJfZsOpdnJpZXJfbWFyc19hdnJpbF9tYWlfanVpbl9qdWlsbGV0X2Fvw7t0X3NlcHRlbWJyZV9vY3RvYnJlX25vdmVtYnJlX2TDqWNlbWJyZScuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnamFudi5fZsOpdnIuX21hcnNfYXZyLl9tYWlfanVpbl9qdWlsLl9hb8O7dF9zZXB0Ll9vY3QuX25vdi5fZMOpYy4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICB3ZWVrZGF5cyA6ICdkaW1hbmNoZV9sdW5kaV9tYXJkaV9tZXJjcmVkaV9qZXVkaV92ZW5kcmVkaV9zYW1lZGknLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnZGltLl9sdW4uX21hci5fbWVyLl9qZXUuX3Zlbi5fc2FtLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnZGlfbHVfbWFfbWVfamVfdmVfc2EnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW0F1am91cmTigJlodWkgw6BdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW0RlbWFpbiDDoF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbw6BdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW0hpZXIgw6BdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ2RkZGQgW2Rlcm5pZXIgw6BdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICdkYW5zICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnaWwgeSBhICVzJyxcbiAgICAgICAgICAgIHMgOiAncXVlbHF1ZXMgc2Vjb25kZXMnLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2Vjb25kZXMnLFxuICAgICAgICAgICAgbSA6ICd1bmUgbWludXRlJyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbnV0ZXMnLFxuICAgICAgICAgICAgaCA6ICd1bmUgaGV1cmUnLFxuICAgICAgICAgICAgaGggOiAnJWQgaGV1cmVzJyxcbiAgICAgICAgICAgIGQgOiAndW4gam91cicsXG4gICAgICAgICAgICBkZCA6ICclZCBqb3VycycsXG4gICAgICAgICAgICBNIDogJ3VuIG1vaXMnLFxuICAgICAgICAgICAgTU0gOiAnJWQgbW9pcycsXG4gICAgICAgICAgICB5IDogJ3VuIGFuJyxcbiAgICAgICAgICAgIHl5IDogJyVkIGFucydcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KGVyfGUpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICAvLyBXb3JkcyB3aXRoIG1hc2N1bGluZSBncmFtbWF0aWNhbCBnZW5kZXI6IG1vaXMsIHRyaW1lc3RyZSwgam91clxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnUSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnREREJzpcbiAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIChudW1iZXIgPT09IDEgPyAnZXInIDogJ2UnKTtcblxuICAgICAgICAgICAgICAgIC8vIFdvcmRzIHdpdGggZmVtaW5pbmUgZ3JhbW1hdGljYWwgZ2VuZGVyOiBzZW1haW5lXG4gICAgICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAobnVtYmVyID09PSAxID8gJ3JlJyA6ICdlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGZyQ2g7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBtb250aHNTaG9ydFdpdGhEb3RzID0gJ2phbi5fZmViLl9tcnQuX2Fwci5fbWFpX2p1bi5fanVsLl9hdWcuX3NlcC5fb2t0Ll9ub3YuX2Rlcy4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0V2l0aG91dERvdHMgPSAnamFuX2ZlYl9tcnRfYXByX21haV9qdW5fanVsX2F1Z19zZXBfb2t0X25vdl9kZXMnLnNwbGl0KCdfJyk7XG5cbiAgICB2YXIgZnkgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdmeScsIHtcbiAgICAgICAgbW9udGhzIDogJ2phbm5ld2FyaXNfZmVicmV3YXJpc19tYWFydF9hcHJpbF9tYWFpZV9qdW55X2p1bHlfYXVndXN0dXNfc2VwdGltYmVyX29rdG9iZXJfbm92aW1iZXJfZGVzaW1iZXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogZnVuY3Rpb24gKG0sIGZvcm1hdCkge1xuICAgICAgICAgICAgaWYgKCFtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0V2l0aERvdHM7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKC8tTU1NLS8udGVzdChmb3JtYXQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0V2l0aG91dERvdHNbbS5tb250aCgpXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0V2l0aERvdHNbbS5tb250aCgpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzIDogJ3NuZWluX21vYW5kZWlfdGlpc2RlaV93b2Fuc2RlaV90b25nZXJzZGVpX2ZyZWVkX3NuZW9uJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ3NpLl9tby5fdGkuX3dvLl90by5fZnIuX3NvLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnU2lfTW9fVGlfV29fVG9fRnJfU28nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQtTU0tWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbaGpvZWQgb21dIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbbW9hcm4gb21dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbb21dIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbanVzdGVyIG9tXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1vDtGZyw7tuZV0gZGRkZCBbb21dIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ29lciAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIGx5bicsXG4gICAgICAgICAgICBzIDogJ2luIHBlYXIgc2Vrb25kZW4nLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2Vrb25kZW4nLFxuICAgICAgICAgICAgbSA6ICdpZW4gbWluw7p0JyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbnV0ZW4nLFxuICAgICAgICAgICAgaCA6ICdpZW4gb2VyZScsXG4gICAgICAgICAgICBoaCA6ICclZCBvZXJlbicsXG4gICAgICAgICAgICBkIDogJ2llbiBkZWknLFxuICAgICAgICAgICAgZGQgOiAnJWQgZGFnZW4nLFxuICAgICAgICAgICAgTSA6ICdpZW4gbW9hbm5lJyxcbiAgICAgICAgICAgIE1NIDogJyVkIG1vYW5uZW4nLFxuICAgICAgICAgICAgeSA6ICdpZW4gamllcicsXG4gICAgICAgICAgICB5eSA6ICclZCBqaWVycmVuJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oc3RlfGRlKS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKChudW1iZXIgPT09IDEgfHwgbnVtYmVyID09PSA4IHx8IG51bWJlciA+PSAyMCkgPyAnc3RlJyA6ICdkZScpO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBmeTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG5cbiAgICB2YXIgbW9udGhzID0gW1xuICAgICAgICAnRWFuw6FpcicsICdGZWFiaHJhJywgJ03DoXJ0YScsICdBaWJyZcOhbicsICdCZWFsdGFpbmUnLCAnTcOpaXRoZWFtaCcsICdJw7ppbCcsICdMw7puYXNhJywgJ01lw6FuIEbDs21oYWlyJywgJ0RlYWlyZWFkaCBGw7NtaGFpcicsICdTYW1oYWluJywgJ05vbGxhaWcnXG4gICAgXTtcblxuICAgIHZhciBtb250aHNTaG9ydCA9IFsnRWFuw6EnLCAnRmVhYicsICdNw6FydCcsICdBaWJyJywgJ0JlYWwnLCAnTcOpaXQnLCAnScO6aWwnLCAnTMO6bmEnLCAnTWXDoW4nLCAnRGVhaScsICdTYW1oJywgJ05vbGwnXTtcblxuICAgIHZhciB3ZWVrZGF5cyA9IFsnRMOpIERvbWhuYWlnaCcsICdEw6kgTHVhaW4nLCAnRMOpIE3DoWlydCcsICdEw6kgQ8OpYWRhb2luJywgJ0TDqWFyZGFvaW4nLCAnRMOpIGhBb2luZScsICdEw6kgU2F0aGFybiddO1xuXG4gICAgdmFyIHdlZWtkYXlzU2hvcnQgPSBbJ0RvbScsICdMdWEnLCAnTcOhaScsICdDw6lhJywgJ0TDqWEnLCAnaEFvJywgJ1NhdCddO1xuXG4gICAgdmFyIHdlZWtkYXlzTWluID0gWydEbycsICdMdScsICdNw6EnLCAnQ2UnLCAnRMOpJywgJ2hBJywgJ1NhJ107XG5cbiAgICB2YXIgZ2EgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdnYScsIHtcbiAgICAgICAgbW9udGhzOiBtb250aHMsXG4gICAgICAgIG1vbnRoc1Nob3J0OiBtb250aHNTaG9ydCxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6IHdlZWtkYXlzLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiB3ZWVrZGF5c1Nob3J0LFxuICAgICAgICB3ZWVrZGF5c01pbjogd2Vla2RheXNNaW4sXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tJbm5pdSBhZ10gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tBbcOhcmFjaCBhZ10gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFthZ10gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tJbm7DqSBhaWddIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBbc2VvIGNhaXRlXSBbYWddIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICdpICVzJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDDsyBzaGluJyxcbiAgICAgICAgICAgIHM6ICdjw7pwbGEgc29pY2luZCcsXG4gICAgICAgICAgICBzczogJyVkIHNvaWNpbmQnLFxuICAgICAgICAgICAgbTogJ27Ds2ltw6lhZCcsXG4gICAgICAgICAgICBtbTogJyVkIG7Ds2ltw6lhZCcsXG4gICAgICAgICAgICBoOiAndWFpciBhbiBjaGxvaWcnLFxuICAgICAgICAgICAgaGg6ICclZCB1YWlyIGFuIGNobG9pZycsXG4gICAgICAgICAgICBkOiAnbMOhJyxcbiAgICAgICAgICAgIGRkOiAnJWQgbMOhJyxcbiAgICAgICAgICAgIE06ICdtw60nLFxuICAgICAgICAgICAgTU06ICclZCBtw60nLFxuICAgICAgICAgICAgeTogJ2JsaWFpbicsXG4gICAgICAgICAgICB5eTogJyVkIGJsaWFpbidcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KGR8bmF8bWgpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgdmFyIG91dHB1dCA9IG51bWJlciA9PT0gMSA/ICdkJyA6IG51bWJlciAlIDEwID09PSAyID8gJ25hJyA6ICdtaCc7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBnYTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIG1vbnRocyA9IFtcbiAgICAgICAgJ0FtIEZhb2lsbGVhY2gnLCAnQW4gR2VhcnJhbicsICdBbSBNw6BydCcsICdBbiBHaWJsZWFuJywgJ0FuIEPDqGl0ZWFuJywgJ0FuIHQtw5JnbWhpb3MnLCAnQW4gdC1JdWNoYXInLCAnQW4gTMO5bmFzdGFsJywgJ0FuIHQtU3VsdGFpbicsICdBbiBEw6BtaGFpcicsICdBbiB0LVNhbWhhaW4nLCAnQW4gRMO5YmhsYWNoZCdcbiAgICBdO1xuXG4gICAgdmFyIG1vbnRoc1Nob3J0ID0gWydGYW9pJywgJ0dlYXInLCAnTcOgcnQnLCAnR2libCcsICdDw6hpdCcsICfDkmdtaCcsICdJdWNoJywgJ0zDuW4nLCAnU3VsdCcsICdEw6BtaCcsICdTYW1oJywgJ0TDuWJoJ107XG5cbiAgICB2YXIgd2Vla2RheXMgPSBbJ0RpZMOybWhuYWljaCcsICdEaWx1YWluJywgJ0RpbcOgaXJ0JywgJ0RpY2lhZGFpbicsICdEaWFyZGFvaW4nLCAnRGloYW9pbmUnLCAnRGlzYXRoYWlybmUnXTtcblxuICAgIHZhciB3ZWVrZGF5c1Nob3J0ID0gWydEaWQnLCAnRGlsJywgJ0RpbScsICdEaWMnLCAnRGlhJywgJ0RpaCcsICdEaXMnXTtcblxuICAgIHZhciB3ZWVrZGF5c01pbiA9IFsnRMOyJywgJ0x1JywgJ03DoCcsICdDaScsICdBcicsICdIYScsICdTYSddO1xuXG4gICAgdmFyIGdkID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZ2QnLCB7XG4gICAgICAgIG1vbnRocyA6IG1vbnRocyxcbiAgICAgICAgbW9udGhzU2hvcnQgOiBtb250aHNTaG9ydCxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzIDogd2Vla2RheXMsXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiB3ZWVrZGF5c1Nob3J0LFxuICAgICAgICB3ZWVrZGF5c01pbiA6IHdlZWtkYXlzTWluLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbQW4tZGl1Z2ggYWlnXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1tBLW3DoGlyZWFjaCBhaWddIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW2FpZ10gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdbQW4tZMOoIGFpZ10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnZGRkZCBbc2VvIGNoYWlkaF0gW2FpZ10gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ2FubiBhbiAlcycsXG4gICAgICAgICAgICBwYXN0IDogJ2JobyBjaGlvbm4gJXMnLFxuICAgICAgICAgICAgcyA6ICdiZWFnYW4gZGlvZ2FuJyxcbiAgICAgICAgICAgIHNzIDogJyVkIGRpb2dhbicsXG4gICAgICAgICAgICBtIDogJ21pb25haWQnLFxuICAgICAgICAgICAgbW0gOiAnJWQgbWlvbmFpZGVhbicsXG4gICAgICAgICAgICBoIDogJ3VhaXInLFxuICAgICAgICAgICAgaGggOiAnJWQgdWFpcmVhbicsXG4gICAgICAgICAgICBkIDogJ2xhdGhhJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGxhdGhhJyxcbiAgICAgICAgICAgIE0gOiAnbcOsb3MnLFxuICAgICAgICAgICAgTU0gOiAnJWQgbcOsb3NhbicsXG4gICAgICAgICAgICB5IDogJ2JsaWFkaG5hJyxcbiAgICAgICAgICAgIHl5IDogJyVkIGJsaWFkaG5hJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlIDogL1xcZHsxLDJ9KGR8bmF8bWgpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBvdXRwdXQgPSBudW1iZXIgPT09IDEgPyAnZCcgOiBudW1iZXIgJSAxMCA9PT0gMiA/ICduYScgOiAnbWgnO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIG91dHB1dDtcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZ2Q7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBnbCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2dsJywge1xuICAgICAgICBtb250aHMgOiAneGFuZWlyb19mZWJyZWlyb19tYXJ6b19hYnJpbF9tYWlvX3h1w7FvX3h1bGxvX2Fnb3N0b19zZXRlbWJyb19vdXR1YnJvX25vdmVtYnJvX2RlY2VtYnJvJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICd4YW4uX2ZlYi5fbWFyLl9hYnIuX21haS5feHXDsS5feHVsLl9hZ28uX3NldC5fb3V0Ll9ub3YuX2RlYy4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzIDogJ2RvbWluZ29fbHVuc19tYXJ0ZXNfbcOpcmNvcmVzX3hvdmVzX3ZlbnJlc19zw6FiYWRvJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ2RvbS5fbHVuLl9tYXIuX23DqXIuX3hvdi5fdmVuLl9zw6FiLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnZG9fbHVfbWFfbcOpX3hvX3ZlX3PDoScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIFtkZV0gTU1NTSBbZGVdIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgW2RlXSBNTU1NIFtkZV0gWVlZWSBIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBbZGVdIE1NTU0gW2RlXSBZWVlZIEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ1tob3hlICcgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAnw6FzJyA6ICfDoScpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5leHREYXkgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdbbWHDscOhICcgKyAoKHRoaXMuaG91cnMoKSAhPT0gMSkgPyAnw6FzJyA6ICfDoScpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5leHRXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZGRkZCBbJyArICgodGhpcy5ob3VycygpICE9PSAxKSA/ICfDoXMnIDogJ2EnKSArICddIExUJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0RGF5IDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW29udGUgJyArICgodGhpcy5ob3VycygpICE9PSAxKSA/ICfDoScgOiAnYScpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnW29dIGRkZGQgW3Bhc2FkbyAnICsgKCh0aGlzLmhvdXJzKCkgIT09IDEpID8gJ8OhcycgOiAnYScpICsgJ10gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6IGZ1bmN0aW9uIChzdHIpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3RyLmluZGV4T2YoJ3VuJykgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICduJyArIHN0cjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuICdlbiAnICsgc3RyO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBhc3QgOiAnaGFpICVzJyxcbiAgICAgICAgICAgIHMgOiAndW5zIHNlZ3VuZG9zJyxcbiAgICAgICAgICAgIHNzIDogJyVkIHNlZ3VuZG9zJyxcbiAgICAgICAgICAgIG0gOiAndW4gbWludXRvJyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbnV0b3MnLFxuICAgICAgICAgICAgaCA6ICd1bmhhIGhvcmEnLFxuICAgICAgICAgICAgaGggOiAnJWQgaG9yYXMnLFxuICAgICAgICAgICAgZCA6ICd1biBkw61hJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGTDrWFzJyxcbiAgICAgICAgICAgIE0gOiAndW4gbWVzJyxcbiAgICAgICAgICAgIE1NIDogJyVkIG1lc2VzJyxcbiAgICAgICAgICAgIHkgOiAndW4gYW5vJyxcbiAgICAgICAgICAgIHl5IDogJyVkIGFub3MnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2UgOiAvXFxkezEsMn3Cui8sXG4gICAgICAgIG9yZGluYWwgOiAnJWTCuicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGdsO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzUmVsYXRpdmVUaW1lKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0ge1xuICAgICAgICAgICAgJ3MnOiBbJ3Rob2RkZSBzZWNvbmRhbmltJywgJ3Rob2RkZSBzZWNvbmQnXSxcbiAgICAgICAgICAgICdzcyc6IFtudW1iZXIgKyAnIHNlY29uZGFuaW0nLCBudW1iZXIgKyAnIHNlY29uZCddLFxuICAgICAgICAgICAgJ20nOiBbJ2VrYSBtaW50YW4nLCAnZWsgbWludXRlJ10sXG4gICAgICAgICAgICAnbW0nOiBbbnVtYmVyICsgJyBtaW50YW5pbScsIG51bWJlciArICcgbWludGFtJ10sXG4gICAgICAgICAgICAnaCc6IFsnZWthIHZvcmFuJywgJ2VrIHZvciddLFxuICAgICAgICAgICAgJ2hoJzogW251bWJlciArICcgdm9yYW5pbScsIG51bWJlciArICcgdm9yYW0nXSxcbiAgICAgICAgICAgICdkJzogWydla2EgZGlzYW4nLCAnZWsgZGlzJ10sXG4gICAgICAgICAgICAnZGQnOiBbbnVtYmVyICsgJyBkaXNhbmltJywgbnVtYmVyICsgJyBkaXMnXSxcbiAgICAgICAgICAgICdNJzogWydla2EgbWhvaW5lYW4nLCAnZWsgbWhvaW5vJ10sXG4gICAgICAgICAgICAnTU0nOiBbbnVtYmVyICsgJyBtaG9pbmVhbmltJywgbnVtYmVyICsgJyBtaG9pbmUnXSxcbiAgICAgICAgICAgICd5JzogWydla2Egdm9yc2FuJywgJ2VrIHZvcm9zJ10sXG4gICAgICAgICAgICAneXknOiBbbnVtYmVyICsgJyB2b3JzYW5pbScsIG51bWJlciArICcgdm9yc2FtJ11cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyBmb3JtYXRba2V5XVswXSA6IGZvcm1hdFtrZXldWzFdO1xuICAgIH1cblxuICAgIHZhciBnb21MYXRuID0gbW9tZW50LmRlZmluZUxvY2FsZSgnZ29tLWxhdG4nLCB7XG4gICAgICAgIG1vbnRocyA6ICdKYW5lcl9GZWJyZXJfTWFyc19BYnJpbF9NYWlfSnVuX0p1bGFpX0Fnb3N0X1NldGVtYnJfT3R1YnJfTm92ZW1icl9EZXplbWJyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdKYW4uX0ZlYi5fTWFyc19BYnIuX01haV9KdW5fSnVsLl9BZ28uX1NldC5fT3R1Ll9Ob3YuX0Rlei4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICB3ZWVrZGF5cyA6ICdBaXRhcl9Tb21hcl9Nb25nbGxhcl9CdWR2YXJfQnJlc3Rhcl9TdWtyYXJfU29uXFwndmFyJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ0FpdC5fU29tLl9Nb24uX0J1ZC5fQnJlLl9TdWsuX1Nvbi4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ0FpX1NtX01vX0J1X0JyX1N1X1NuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0EgaDptbSBbdmF6dGFdJyxcbiAgICAgICAgICAgIExUUyA6ICdBIGg6bW06c3MgW3ZhenRhXScsXG4gICAgICAgICAgICBMIDogJ0RELU1NLVlZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEEgaDptbSBbdmF6dGFdJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgTU1NTVthY2hlYV0gRG8sIFlZWVksIEEgaDptbSBbdmF6dGFdJyxcbiAgICAgICAgICAgIGxsbGw6ICdkZGQsIEQgTU1NIFlZWVksIEEgaDptbSBbdmF6dGFdJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbQWl6XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0ZhbGVhbV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdbSWV0YSB0b10gZGRkZFssXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW0thbF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbRmF0bG9dIGRkZGRbLF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyBhZGltJyxcbiAgICAgICAgICAgIHMgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgc3MgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgbSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBtbSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBoIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGhoIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGQgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgZGQgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgTSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBNTSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB5IDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHl5IDogcHJvY2Vzc1JlbGF0aXZlVGltZVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlIDogL1xcZHsxLDJ9KGVyKS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgLy8gdGhlIG9yZGluYWwgJ2VyJyBvbmx5IGFwcGxpZXMgdG8gZGF5IG9mIHRoZSBtb250aFxuICAgICAgICAgICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ2VyJztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1EnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL3JhdGl8c29rYWxsaXxkb25wYXJhbXxzYW5qZS8sXG4gICAgICAgIG1lcmlkaWVtSG91ciA6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICdyYXRpJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyIDwgNCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAnc29rYWxsaScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICdkb25wYXJhbScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+IDEyID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICdzYW5qZScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAncmF0aSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAnc29rYWxsaSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNikge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZG9ucGFyYW0nO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMjApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3NhbmplJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdyYXRpJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGdvbUxhdG47XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBzeW1ib2xNYXAgPSB7XG4gICAgICAgICAgICAnMSc6ICfgq6cnLFxuICAgICAgICAgICAgJzInOiAn4KuoJyxcbiAgICAgICAgICAgICczJzogJ+CrqScsXG4gICAgICAgICAgICAnNCc6ICfgq6onLFxuICAgICAgICAgICAgJzUnOiAn4KurJyxcbiAgICAgICAgICAgICc2JzogJ+CrrCcsXG4gICAgICAgICAgICAnNyc6ICfgq60nLFxuICAgICAgICAgICAgJzgnOiAn4KuuJyxcbiAgICAgICAgICAgICc5JzogJ+CrrycsXG4gICAgICAgICAgICAnMCc6ICfgq6YnXG4gICAgICAgIH0sXG4gICAgICAgIG51bWJlck1hcCA9IHtcbiAgICAgICAgICAgICfgq6cnOiAnMScsXG4gICAgICAgICAgICAn4KuoJzogJzInLFxuICAgICAgICAgICAgJ+CrqSc6ICczJyxcbiAgICAgICAgICAgICfgq6onOiAnNCcsXG4gICAgICAgICAgICAn4KurJzogJzUnLFxuICAgICAgICAgICAgJ+CrrCc6ICc2JyxcbiAgICAgICAgICAgICfgq60nOiAnNycsXG4gICAgICAgICAgICAn4KuuJzogJzgnLFxuICAgICAgICAgICAgJ+Crryc6ICc5JyxcbiAgICAgICAgICAgICfgq6YnOiAnMCdcbiAgICAgICAgfTtcblxuICAgIHZhciBndSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2d1Jywge1xuICAgICAgICBtb250aHM6ICfgqpzgqr7gqqjgq43gqq/gq4HgqobgqrDgq4Bf4Kqr4KuH4Kqs4KuN4Kqw4KuB4KqG4Kqw4KuAX+CqruCqvuCqsOCrjeCqml/gqo/gqqrgq43gqrDgqr/gqrJf4Kqu4KuHX+CqnOCrguCqqF/gqpzgq4HgqrLgqr7gqohf4KqR4KqX4Kq44KuN4KqfX+CquOCqquCrjeCqn+Crh+CqruCrjeCqrOCqsF/gqpHgqpXgq43gqp/gq43gqqzgqrBf4Kqo4Kq14KuH4Kqu4KuN4Kqs4KqwX+CqoeCqv+CquOCrh+CqruCrjeCqrOCqsCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICfgqpzgqr7gqqjgq43gqq/gq4EuX+Cqq+Crh+CqrOCrjeCqsOCrgS5f4Kqu4Kq+4Kqw4KuN4KqaX+Cqj+CqquCrjeCqsOCqvy5f4Kqu4KuHX+CqnOCrguCqqF/gqpzgq4HgqrLgqr4uX+CqkeCqly5f4Kq44Kqq4KuN4Kqf4KuHLl/gqpHgqpXgq43gqp/gq40uX+CqqOCqteCrhy5f4Kqh4Kq/4Kq44KuHLicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6ICfgqrDgqrXgqr/gqrXgqr7gqrBf4Kq44KuL4Kqu4Kq14Kq+4KqwX+CqruCqguCql+Cqs+CqteCqvuCqsF/gqqzgq4Hgqqfgq43gqrXgqr7gqrBf4KqX4KuB4Kqw4KuB4Kq14Kq+4KqwX+CqtuCrgeCqleCrjeCqsOCqteCqvuCqsF/gqrbgqqjgqr/gqrXgqr7gqrAnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfgqrDgqrXgqr9f4Kq44KuL4KquX+CqruCqguCql+Cqs1/gqqzgq4Hgqqfgq41f4KqX4KuB4Kqw4KuBX+CqtuCrgeCqleCrjeCqsF/gqrbgqqjgqr8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn4KqwX+CquOCri1/gqq7gqoJf4Kqs4KuBX+Cql+CrgV/gqrbgq4Ff4Kq2Jy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdBIGg6bW0g4Kq14Kq+4KqX4KuN4Kqv4KuHJyxcbiAgICAgICAgICAgIExUUzogJ0EgaDptbTpzcyDgqrXgqr7gqpfgq43gqq/gq4cnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSwgQSBoOm1tIOCqteCqvuCql+CrjeCqr+CrhycsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRCBNTU1NIFlZWVksIEEgaDptbSDgqrXgqr7gqpfgq43gqq/gq4cnXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW+CqhuCqnF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vgqpXgqr7gqrLgq4ddIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCwgTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vgqpfgqofgqpXgqr7gqrLgq4ddIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW+CqquCqvuCqm+CqsuCqvl0gZGRkZCwgTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVzIOCqruCqvicsXG4gICAgICAgICAgICBwYXN0OiAnJXMg4Kqq4KuH4Kq54Kqy4Kq+JyxcbiAgICAgICAgICAgIHM6ICfgqoXgqq7gq4HgqpUg4Kqq4Kqz4KuLJyxcbiAgICAgICAgICAgIHNzOiAnJWQg4Kq44KuH4KqV4KqC4KqhJyxcbiAgICAgICAgICAgIG06ICfgqo/gqpUg4Kqu4Kq/4Kqo4Kq/4KqfJyxcbiAgICAgICAgICAgIG1tOiAnJWQg4Kqu4Kq/4Kqo4Kq/4KqfJyxcbiAgICAgICAgICAgIGg6ICfgqo/gqpUg4KqV4Kqy4Kq+4KqVJyxcbiAgICAgICAgICAgIGhoOiAnJWQg4KqV4Kqy4Kq+4KqVJyxcbiAgICAgICAgICAgIGQ6ICfgqo/gqpUg4Kqm4Kq/4Kq14Kq4JyxcbiAgICAgICAgICAgIGRkOiAnJWQg4Kqm4Kq/4Kq14Kq4JyxcbiAgICAgICAgICAgIE06ICfgqo/gqpUg4Kqu4Kq54Kq/4Kqo4KuLJyxcbiAgICAgICAgICAgIE1NOiAnJWQg4Kqu4Kq54Kq/4Kqo4KuLJyxcbiAgICAgICAgICAgIHk6ICfgqo/gqpUg4Kq14Kqw4KuN4Kq3JyxcbiAgICAgICAgICAgIHl5OiAnJWQg4Kq14Kqw4KuN4Kq3J1xuICAgICAgICB9LFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9b4Kun4Kuo4Kup4Kuq4Kur4Kus4Kut4Kuu4Kuv4KumXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ltYm9sTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvLyBHdWphcmF0aSBub3RhdGlvbiBmb3IgbWVyaWRpZW1zIGFyZSBxdWl0ZSBmdXp6eSBpbiBwcmFjdGljZS4gV2hpbGUgdGhlcmUgZXhpc3RzXG4gICAgICAgIC8vIGEgcmlnaWQgbm90aW9uIG9mIGEgJ1BhaGFyJyBpdCBpcyBub3QgdXNlZCBhcyByaWdpZGx5IGluIG1vZGVybiBHdWphcmF0aS5cbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+CqsOCqvuCqpHzgqqzgqqrgq4vgqrB84Kq44Kq14Kq+4KqwfOCquOCqvuCqguCqnC8sXG4gICAgICAgIG1lcmlkaWVtSG91cjogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ+CqsOCqvuCqpCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA8IDQgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CquOCqteCqvuCqsCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgqqzgqqrgq4vgqrAnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMTAgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CquOCqvuCqguCqnCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgqrDgqr7gqqQnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CquOCqteCqvuCqsCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Kqs4Kqq4KuL4KqwJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDIwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgqrjgqr7gqoLgqpwnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CqsOCqvuCqpCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDYgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZ3U7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBoZSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2hlJywge1xuICAgICAgICBtb250aHMgOiAn15nXoNeV15DXqF/XpNeR16jXldeQ16hf157XqNelX9eQ16TXqNeZ15xf157XkNeZX9eZ15XXoNeZX9eZ15XXnNeZX9eQ15XXkteV16HXmF/Xodek15jXnteR16hf15DXlden15jXldeR16hf16DXldeR157XkdeoX9eT16bXnteR16gnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ9eZ16DXldezX9ek15HXqNezX9ee16jXpV/XkNek16jXs1/XnteQ15lf15nXldeg15lf15nXldec15lf15DXldeS17Nf16HXpNeY17Nf15DXlden17Nf16DXldeR17Nf15PXptee17MnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ9eo15DXqdeV159f16nXoNeZX9ep15zXmdep15lf16jXkdeZ16LXmV/Xl9ee15nXqdeZX9ep15nXqdeZX9ep15HXqicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfXkNezX9eR17Nf15LXs1/Xk9ezX9eU17Nf15XXs1/XqdezJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICfXkF/XkV/Xkl/Xk1/XlF/XlV/XqScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgW9eRXU1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBb15FdTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBb15FdTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIGwgOiAnRC9NL1lZWVknLFxuICAgICAgICAgICAgbGwgOiAnRCBNTU0gWVlZWScsXG4gICAgICAgICAgICBsbGwgOiAnRCBNTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBsbGxsIDogJ2RkZCwgRCBNTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vXlNeZ15XXnSDXkda+XUxUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW9ee15fXqCDXkda+XUxUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW9eR16nXoteUXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1vXkNeq157XldecINeR1r5dTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW9eR15nXldedXSBkZGRkIFvXlNeQ15fXqNeV158g15HXqdei15RdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICfXkdei15XXkyAlcycsXG4gICAgICAgICAgICBwYXN0IDogJ9ec16TXoNeZICVzJyxcbiAgICAgICAgICAgIHMgOiAn157Xodek16gg16nXoNeZ15XXqicsXG4gICAgICAgICAgICBzcyA6ICclZCDXqdeg15nXldeqJyxcbiAgICAgICAgICAgIG0gOiAn15PXp9eUJyxcbiAgICAgICAgICAgIG1tIDogJyVkINeT16fXldeqJyxcbiAgICAgICAgICAgIGggOiAn16nXoteUJyxcbiAgICAgICAgICAgIGhoIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICfXqdei16rXmdeZ150nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJyDXqdei15XXqic7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZCA6ICfXmdeV150nLFxuICAgICAgICAgICAgZGQgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ9eZ15XXnteZ15nXnSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnINeZ157XmdedJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBNIDogJ9eX15XXk9epJyxcbiAgICAgICAgICAgIE1NIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICfXl9eV15PXqdeZ15nXnSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnINeX15XXk9ep15nXnSc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeSA6ICfXqdeg15QnLFxuICAgICAgICAgICAgeXkgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ9ep16DXqteZ15nXnSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgJSAxMCA9PT0gMCAmJiBudW1iZXIgIT09IDEwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnINep16DXlCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnINep16DXmdedJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL9eQ15fXlFwi16Z815zXpNeg15RcItemfNeQ15fXqNeZINeU16bXlNeo15nXmdedfNec16TXoNeZINeU16bXlNeo15nXmdedfNec16TXoNeV16og15HXlden16h815HXkdeV16fXqHzXkdei16jXkS9pLFxuICAgICAgICBpc1BNIDogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gL14o15DXl9eUXCLXpnzXkNeX16jXmSDXlNem15TXqNeZ15nXnXzXkdei16jXkSkkLy50ZXN0KGlucHV0KTtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9ec16TXoNeV16og15HXlden16gnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9eR15HXlden16gnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICfXnNek16DXlFwi16YnIDogJ9ec16TXoNeZINeU16bXlNeo15nXmdedJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzTG93ZXIgPyAn15DXl9eUXCLXpicgOiAn15DXl9eo15kg15TXpteU16jXmdeZ150nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9eR16LXqNeRJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGhlO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgc3ltYm9sTWFwID0ge1xuICAgICAgICAnMSc6ICfgpacnLFxuICAgICAgICAnMic6ICfgpagnLFxuICAgICAgICAnMyc6ICfgpaknLFxuICAgICAgICAnNCc6ICfgpaonLFxuICAgICAgICAnNSc6ICfgpasnLFxuICAgICAgICAnNic6ICfgpawnLFxuICAgICAgICAnNyc6ICfgpa0nLFxuICAgICAgICAnOCc6ICfgpa4nLFxuICAgICAgICAnOSc6ICfgpa8nLFxuICAgICAgICAnMCc6ICfgpaYnXG4gICAgfSxcbiAgICBudW1iZXJNYXAgPSB7XG4gICAgICAgICfgpacnOiAnMScsXG4gICAgICAgICfgpagnOiAnMicsXG4gICAgICAgICfgpaknOiAnMycsXG4gICAgICAgICfgpaonOiAnNCcsXG4gICAgICAgICfgpasnOiAnNScsXG4gICAgICAgICfgpawnOiAnNicsXG4gICAgICAgICfgpa0nOiAnNycsXG4gICAgICAgICfgpa4nOiAnOCcsXG4gICAgICAgICfgpa8nOiAnOScsXG4gICAgICAgICfgpaYnOiAnMCdcbiAgICB9O1xuXG4gICAgdmFyIGhpID0gbW9tZW50LmRlZmluZUxvY2FsZSgnaGknLCB7XG4gICAgICAgIG1vbnRocyA6ICfgpJzgpKjgpLXgpLDgpYBf4KSr4KS84KSw4KS14KSw4KWAX+CkruCkvuCksOCljeCkml/gpIXgpKrgpY3gpLDgpYjgpLJf4KSu4KSIX+CknOClguCkqF/gpJzgpYHgpLLgpL7gpIhf4KSF4KSX4KS44KWN4KSkX+CkuOCkv+CkpOCkruCljeCkrOCksF/gpIXgpJXgpY3gpJ/gpYLgpKzgpLBf4KSo4KS14KSu4KWN4KSs4KSwX+CkpuCkv+CkuOCkruCljeCkrOCksCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAn4KSc4KSoLl/gpKvgpLzgpLAuX+CkruCkvuCksOCljeCkml/gpIXgpKrgpY3gpLDgpYguX+CkruCkiF/gpJzgpYLgpKhf4KSc4KWB4KSyLl/gpIXgpJcuX+CkuOCkv+CkpC5f4KSF4KSV4KWN4KSf4KWCLl/gpKjgpLUuX+CkpuCkv+CkuC4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzIDogJ+CksOCkteCkv+CkteCkvuCksF/gpLjgpYvgpK7gpLXgpL7gpLBf4KSu4KSC4KSX4KSy4KS14KS+4KSwX+CkrOClgeCkp+CkteCkvuCksF/gpJfgpYHgpLDgpYLgpLXgpL7gpLBf4KS24KWB4KSV4KWN4KSw4KS14KS+4KSwX+CktuCkqOCkv+CkteCkvuCksCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfgpLDgpLXgpL9f4KS44KWL4KSuX+CkruCkguCkl+Cksl/gpKzgpYHgpKdf4KSX4KWB4KSw4KWCX+CktuClgeCkleCljeCksF/gpLbgpKjgpL8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ+CksF/gpLjgpYtf4KSu4KSCX+CkrOClgV/gpJfgpYFf4KS24KWBX+Ckticuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdBIGg6bW0g4KSs4KSc4KWHJyxcbiAgICAgICAgICAgIExUUyA6ICdBIGg6bW06c3Mg4KSs4KSc4KWHJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVksIEEgaDptbSDgpKzgpJzgpYcnLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSwgQSBoOm1tIOCkrOCknOClhydcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vgpIbgpJxdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW+CkleCksl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCwgTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdb4KSV4KSyXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdb4KSq4KS/4KSb4KSy4KWHXSBkZGRkLCBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnJXMg4KSu4KWH4KSCJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMg4KSq4KS54KSy4KWHJyxcbiAgICAgICAgICAgIHMgOiAn4KSV4KWB4KSbIOCkueClgCDgpJXgpY3gpLfgpKMnLFxuICAgICAgICAgICAgc3MgOiAnJWQg4KS44KWH4KSV4KSC4KShJyxcbiAgICAgICAgICAgIG0gOiAn4KSP4KSVIOCkruCkv+CkqOCknycsXG4gICAgICAgICAgICBtbSA6ICclZCDgpK7gpL/gpKjgpJ8nLFxuICAgICAgICAgICAgaCA6ICfgpI/gpJUg4KSY4KSC4KSf4KS+JyxcbiAgICAgICAgICAgIGhoIDogJyVkIOCkmOCkguCkn+ClhycsXG4gICAgICAgICAgICBkIDogJ+Ckj+CklSDgpKbgpL/gpKgnLFxuICAgICAgICAgICAgZGQgOiAnJWQg4KSm4KS/4KSoJyxcbiAgICAgICAgICAgIE0gOiAn4KSP4KSVIOCkruCkueClgOCkqOClhycsXG4gICAgICAgICAgICBNTSA6ICclZCDgpK7gpLngpYDgpKjgpYcnLFxuICAgICAgICAgICAgeSA6ICfgpI/gpJUg4KS14KSw4KWN4KS3JyxcbiAgICAgICAgICAgIHl5IDogJyVkIOCkteCksOCljeCktydcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvW+Clp+ClqOClqeClquClq+ClrOClreClruClr+Clpl0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gSGluZGkgbm90YXRpb24gZm9yIG1lcmlkaWVtcyBhcmUgcXVpdGUgZnV6enkgaW4gcHJhY3RpY2UuIFdoaWxlIHRoZXJlIGV4aXN0c1xuICAgICAgICAvLyBhIHJpZ2lkIG5vdGlvbiBvZiBhICdQYWhhcicgaXQgaXMgbm90IHVzZWQgYXMgcmlnaWRseSBpbiBtb2Rlcm4gSGluZGkuXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/gpLDgpL7gpKR84KS44KWB4KSs4KS5fOCkpuCli+CkquCkueCksHzgpLbgpL7gpK4vLFxuICAgICAgICBtZXJpZGllbUhvdXIgOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lcmlkaWVtID09PSAn4KSw4KS+4KSkJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyIDwgNCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4KS44KWB4KSs4KS5Jykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CkpuCli+CkquCkueCksCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4KS24KS+4KSuJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpLDgpL7gpKQnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CkuOClgeCkrOCkuSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4KSm4KWL4KSq4KS54KSwJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDIwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpLbgpL7gpK4nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CksOCkvuCkpCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDYgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDZ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGhpO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICBmdW5jdGlvbiB0cmFuc2xhdGUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXkpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG51bWJlciArICcgJztcbiAgICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgICAgIGNhc2UgJ3NzJzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnc2VrdW5kYSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIgfHwgbnVtYmVyID09PSAzIHx8IG51bWJlciA9PT0gNCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ3Nla3VuZGUnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnc2VrdW5kaSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICdqZWRuYSBtaW51dGEnIDogJ2plZG5lIG1pbnV0ZSc7XG4gICAgICAgICAgICBjYXNlICdtbSc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ21pbnV0YSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIgfHwgbnVtYmVyID09PSAzIHx8IG51bWJlciA9PT0gNCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ21pbnV0ZSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdtaW51dGEnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgY2FzZSAnaCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAnamVkYW4gc2F0JyA6ICdqZWRub2cgc2F0YSc7XG4gICAgICAgICAgICBjYXNlICdoaCc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ3NhdCc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIgfHwgbnVtYmVyID09PSAzIHx8IG51bWJlciA9PT0gNCkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ3NhdGEnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnc2F0aSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICBjYXNlICdkZCc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ2Rhbic7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdkYW5hJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIGNhc2UgJ01NJzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnbWplc2VjJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMiB8fCBudW1iZXIgPT09IDMgfHwgbnVtYmVyID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnbWplc2VjYSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdtamVzZWNpJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIGNhc2UgJ3l5JzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnZ29kaW5hJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMiB8fCBudW1iZXIgPT09IDMgfHwgbnVtYmVyID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSAnZ29kaW5lJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gJ2dvZGluYSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaHIgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdocicsIHtcbiAgICAgICAgbW9udGhzIDoge1xuICAgICAgICAgICAgZm9ybWF0OiAnc2lqZcSNbmphX3ZlbGphxI1lX2/FvnVqa2FfdHJhdm5qYV9zdmlibmphX2xpcG5qYV9zcnBuamFfa29sb3ZvemFfcnVqbmFfbGlzdG9wYWRhX3N0dWRlbm9nYV9wcm9zaW5jYScuc3BsaXQoJ18nKSxcbiAgICAgICAgICAgIHN0YW5kYWxvbmU6ICdzaWplxI1hbmpfdmVsamHEjWFfb8W+dWpha190cmF2YW5qX3N2aWJhbmpfbGlwYW5qX3NycGFual9rb2xvdm96X3J1amFuX2xpc3RvcGFkX3N0dWRlbmlfcHJvc2luYWMnLnNwbGl0KCdfJylcbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnc2lqLl92ZWxqLl9vxb51Ll90cmEuX3N2aS5fbGlwLl9zcnAuX2tvbC5fcnVqLl9saXMuX3N0dS5fcHJvLicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXMgOiAnbmVkamVsamFfcG9uZWRqZWxqYWtfdXRvcmFrX3NyaWplZGFfxI1ldHZydGFrX3BldGFrX3N1Ym90YScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICduZWQuX3Bvbi5fdXRvLl9zcmkuX8SNZXQuX3BldC5fc3ViLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnbmVfcG9fdXRfc3JfxI1lX3BlX3N1Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRC4gTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBELiBNTU1NIFlZWVkgSDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5ICA6ICdbZGFuYXMgdV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSAgOiAnW3N1dHJhIHVdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBbbmVkamVsanVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIFtzcmlqZWR1XSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBbc3Vib3R1XSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBkZGRkIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3REYXkgIDogJ1tqdcSNZXIgdV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbcHJvxaFsdV0gZGRkZCBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1twcm/FoWxlXSBbc3Vib3RlXSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1twcm/FoWxpXSBkZGRkIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICd6YSAlcycsXG4gICAgICAgICAgICBwYXN0ICAgOiAncHJpamUgJXMnLFxuICAgICAgICAgICAgcyAgICAgIDogJ3BhciBzZWt1bmRpJyxcbiAgICAgICAgICAgIHNzICAgICA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG0gICAgICA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG1tICAgICA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGggICAgICA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGhoICAgICA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGQgICAgICA6ICdkYW4nLFxuICAgICAgICAgICAgZGQgICAgIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgTSAgICAgIDogJ21qZXNlYycsXG4gICAgICAgICAgICBNTSAgICAgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICB5ICAgICAgOiAnZ29kaW51JyxcbiAgICAgICAgICAgIHl5ICAgICA6IHRyYW5zbGF0ZVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGhyO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgd2Vla0VuZGluZ3MgPSAndmFzw6FybmFwIGjDqXRmxZFuIGtlZGRlbiBzemVyZMOhbiBjc8O8dMO2cnTDtmvDtm4gcMOpbnRla2VuIHN6b21iYXRvbicuc3BsaXQoJyAnKTtcbiAgICBmdW5jdGlvbiB0cmFuc2xhdGUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciBudW0gPSBudW1iZXI7XG4gICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICBjYXNlICdzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gKGlzRnV0dXJlIHx8IHdpdGhvdXRTdWZmaXgpID8gJ27DqWjDoW55IG3DoXNvZHBlcmMnIDogJ27DqWjDoW55IG3DoXNvZHBlcmNlJztcbiAgICAgICAgICAgIGNhc2UgJ3NzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtICsgKGlzRnV0dXJlIHx8IHdpdGhvdXRTdWZmaXgpID8gJyBtw6Fzb2RwZXJjJyA6ICcgbcOhc29kcGVyY2UnO1xuICAgICAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdlZ3knICsgKGlzRnV0dXJlIHx8IHdpdGhvdXRTdWZmaXggPyAnIHBlcmMnIDogJyBwZXJjZScpO1xuICAgICAgICAgICAgY2FzZSAnbW0nOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW0gKyAoaXNGdXR1cmUgfHwgd2l0aG91dFN1ZmZpeCA/ICcgcGVyYycgOiAnIHBlcmNlJyk7XG4gICAgICAgICAgICBjYXNlICdoJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2VneScgKyAoaXNGdXR1cmUgfHwgd2l0aG91dFN1ZmZpeCA/ICcgw7NyYScgOiAnIMOzcsOhamEnKTtcbiAgICAgICAgICAgIGNhc2UgJ2hoJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtICsgKGlzRnV0dXJlIHx8IHdpdGhvdXRTdWZmaXggPyAnIMOzcmEnIDogJyDDs3LDoWphJyk7XG4gICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2VneScgKyAoaXNGdXR1cmUgfHwgd2l0aG91dFN1ZmZpeCA/ICcgbmFwJyA6ICcgbmFwamEnKTtcbiAgICAgICAgICAgIGNhc2UgJ2RkJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtICsgKGlzRnV0dXJlIHx8IHdpdGhvdXRTdWZmaXggPyAnIG5hcCcgOiAnIG5hcGphJyk7XG4gICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2VneScgKyAoaXNGdXR1cmUgfHwgd2l0aG91dFN1ZmZpeCA/ICcgaMOzbmFwJyA6ICcgaMOzbmFwamEnKTtcbiAgICAgICAgICAgIGNhc2UgJ01NJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtICsgKGlzRnV0dXJlIHx8IHdpdGhvdXRTdWZmaXggPyAnIGjDs25hcCcgOiAnIGjDs25hcGphJyk7XG4gICAgICAgICAgICBjYXNlICd5JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2VneScgKyAoaXNGdXR1cmUgfHwgd2l0aG91dFN1ZmZpeCA/ICcgw6l2JyA6ICcgw6l2ZScpO1xuICAgICAgICAgICAgY2FzZSAneXknOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW0gKyAoaXNGdXR1cmUgfHwgd2l0aG91dFN1ZmZpeCA/ICcgw6l2JyA6ICcgw6l2ZScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgZnVuY3Rpb24gd2Vlayhpc0Z1dHVyZSkge1xuICAgICAgICByZXR1cm4gKGlzRnV0dXJlID8gJycgOiAnW23Dumx0XSAnKSArICdbJyArIHdlZWtFbmRpbmdzW3RoaXMuZGF5KCldICsgJ10gTFRbLWtvcl0nO1xuICAgIH1cblxuICAgIHZhciBodSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2h1Jywge1xuICAgICAgICBtb250aHMgOiAnamFudcOhcl9mZWJydcOhcl9tw6FyY2l1c1/DoXByaWxpc19tw6FqdXNfasO6bml1c19qw7psaXVzX2F1Z3VzenR1c19zemVwdGVtYmVyX29rdMOzYmVyX25vdmVtYmVyX2RlY2VtYmVyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdqYW5fZmViX23DoXJjX8OhcHJfbcOhal9qw7puX2rDumxfYXVnX3N6ZXB0X29rdF9ub3ZfZGVjJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICd2YXPDoXJuYXBfaMOpdGbFkV9rZWRkX3N6ZXJkYV9jc8O8dMO2cnTDtmtfcMOpbnRla19zem9tYmF0Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ3Zhc19ow6l0X2tlZGRfc3plX2Nzw7x0X3DDqW5fc3pvJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICd2X2hfa19zemVfY3NfcF9zem8nLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ1lZWVkuTU0uREQuJyxcbiAgICAgICAgICAgIExMIDogJ1lZWVkuIE1NTU0gRC4nLFxuICAgICAgICAgICAgTExMIDogJ1lZWVkuIE1NTU0gRC4gSDptbScsXG4gICAgICAgICAgICBMTExMIDogJ1lZWVkuIE1NTU0gRC4sIGRkZGQgSDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL2RlfGR1L2ksXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0LmNoYXJBdCgxKS50b0xvd2VyQ2FzZSgpID09PSAndSc7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91cnMgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID09PSB0cnVlID8gJ2RlJyA6ICdERSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID09PSB0cnVlID8gJ2R1JyA6ICdEVSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbbWFdIExUWy1rb3JdJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW2hvbG5hcF0gTFRbLWtvcl0nLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdlZWsuY2FsbCh0aGlzLCB0cnVlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1t0ZWduYXBdIExUWy1rb3JdJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB3ZWVrLmNhbGwodGhpcywgZmFsc2UpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICclcyBtw7psdmEnLFxuICAgICAgICAgICAgcGFzdCA6ICclcycsXG4gICAgICAgICAgICBzIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgc3MgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBtIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbW0gOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBoIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaGggOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBkIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgZGQgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBNIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgTU0gOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICB5IDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgeXkgOiB0cmFuc2xhdGVcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbCA6ICclZC4nLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBodTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGh5QW0gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdoeS1hbScsIHtcbiAgICAgICAgbW9udGhzIDoge1xuICAgICAgICAgICAgZm9ybWF0OiAn1bDVuNaC1bbVvtWh1oDVq1/Wg9Wl1b/WgNW+1aHWgNWrX9W01aHWgNW/1atf1aHVutaA1avVrNWrX9W01aHVtdWr1b3Vq1/VsNW41oLVttWr1b3Vq1/VsNW41oLVrNWr1b3Vq1/WhdWj1bjVvdW/1bjVvdWrX9W91aXVutW/1aXVtNWi1aXWgNWrX9Ww1bjVr9W/1aXVtNWi1aXWgNWrX9W21bjVtdWl1bTVotWl1oDVq1/VpNWl1a/Vv9Wl1bTVotWl1oDVqycuc3BsaXQoJ18nKSxcbiAgICAgICAgICAgIHN0YW5kYWxvbmU6ICfVsNW41oLVttW+1aHWgF/Wg9Wl1b/WgNW+1aHWgF/VtNWh1oDVv1/VodW61oDVq9WsX9W01aHVtdWr1b1f1bDVuNaC1bbVq9W9X9Ww1bjWgtWs1avVvV/WhdWj1bjVvdW/1bjVvV/VvdWl1brVv9Wl1bTVotWl1oBf1bDVuNWv1b/VpdW01aLVpdaAX9W21bjVtdWl1bTVotWl1oBf1aTVpdWv1b/VpdW01aLVpdaAJy5zcGxpdCgnXycpXG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ9Ww1bbVvl/Wg9W/1oBf1bTWgNW/X9Wh1brWgF/VtNW11b1f1bDVttW9X9Ww1azVvV/WhdWj1b1f1b3VutW/X9Ww1a/Vv1/VttW01aJf1aTVr9W/Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICfVr9Wr1oDVodWv1atf1aXWgNWv1bjWgtW31aHVotWp1atf1aXWgNWl1oTVt9Wh1aLVqdWrX9W51bjWgNWl1oTVt9Wh1aLVqdWrX9Ww1avVttWj1bfVodWi1anVq1/VuNaC1oDVotWh1alf1bfVodWi1aHVqScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfVr9aA1a9f1aXWgNWvX9Wl1oDWhF/VudaA1oRf1bDVttWjX9W41oLWgNWiX9W31aLVqScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn1a/WgNWvX9Wl1oDVr1/VpdaA1oRf1bnWgNaEX9Ww1bbVo1/VuNaC1oDVol/Vt9Wi1aknLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWSDVqS4nLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZINWpLiwgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSDVqS4sIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb1aHVtdW91oXWgF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vVvtWh1bLVqF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vVpdaA1aXVr10gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2RkZGQgW9aF1oDVqCDVqtWh1bTVqF0gTFQnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdb1aHVttaB1aHVrl0gZGRkZCBb1oXWgNWoINWq1aHVtNWoXSBMVCc7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnJXMg1bDVpdW/1bgnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyDVodW81aHVuycsXG4gICAgICAgICAgICBzIDogJ9W01asg1oTVodW21asg1b7VodW11oDVr9W11aHVticsXG4gICAgICAgICAgICBzcyA6ICclZCDVvtWh1bXWgNWv1bXVodW2JyxcbiAgICAgICAgICAgIG0gOiAn1oDVuNW61aUnLFxuICAgICAgICAgICAgbW0gOiAnJWQg1oDVuNW61aUnLFxuICAgICAgICAgICAgaCA6ICfVqtWh1bQnLFxuICAgICAgICAgICAgaGggOiAnJWQg1arVodW0JyxcbiAgICAgICAgICAgIGQgOiAn1oXWgCcsXG4gICAgICAgICAgICBkZCA6ICclZCDWhdaAJyxcbiAgICAgICAgICAgIE0gOiAn1aHVtNWr1b0nLFxuICAgICAgICAgICAgTU0gOiAnJWQg1aHVtNWr1b0nLFxuICAgICAgICAgICAgeSA6ICfVv9Wh1oDVqycsXG4gICAgICAgICAgICB5eSA6ICclZCDVv9Wh1oDVqydcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL9Wj1avVt9Wl1oDVvtWhfNWh1bzVodW+1bjVv9W+1aF81oHVpdaA1aXVr9W+1aF81aXWgNWl1a/VuNW11aHVti8sXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIC9eKNaB1aXWgNWl1a/VvtWhfNWl1oDVpdWv1bjVtdWh1bYpJC8udGVzdChpbnB1dCk7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn1aPVq9W31aXWgNW+1aEnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9Wh1bzVodW+1bjVv9W+1aEnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9aB1aXWgNWl1a/VvtWhJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfVpdaA1aXVr9W41bXVodW2JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9fFxcZHsxLDJ9LSjVq9W2fNaA1aQpLyxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnREREbyc6XG4gICAgICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdWr1bYnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdaA1aQnO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGh5QW07XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBpZCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2lkJywge1xuICAgICAgICBtb250aHMgOiAnSmFudWFyaV9GZWJydWFyaV9NYXJldF9BcHJpbF9NZWlfSnVuaV9KdWxpX0FndXN0dXNfU2VwdGVtYmVyX09rdG9iZXJfTm92ZW1iZXJfRGVzZW1iZXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ0phbl9GZWJfTWFyX0Fwcl9NZWlfSnVuX0p1bF9BZ3RfU2VwX09rdF9Ob3ZfRGVzJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdNaW5nZ3VfU2VuaW5fU2VsYXNhX1JhYnVfS2FtaXNfSnVtYXRfU2FidHUnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnTWluX1Nlbl9TZWxfUmFiX0thbV9KdW1fU2FiJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdNZ19Tbl9TbF9SYl9LbV9KbV9TYicuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISC5tbScsXG4gICAgICAgICAgICBMVFMgOiAnSEgubW0uc3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBbcHVrdWxdIEhILm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgW3B1a3VsXSBISC5tbSdcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL3BhZ2l8c2lhbmd8c29yZXxtYWxhbS8sXG4gICAgICAgIG1lcmlkaWVtSG91ciA6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICdwYWdpJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ3NpYW5nJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDExID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICdzb3JlJyB8fCBtZXJpZGllbSA9PT0gJ21hbGFtJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91cnMgPCAxMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAncGFnaSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXJzIDwgMTUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3NpYW5nJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91cnMgPCAxOSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnc29yZSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAnbWFsYW0nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW0hhcmkgaW5pIHB1a3VsXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1tCZXNvayBwdWt1bF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbcHVrdWxdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW0tlbWFyaW4gcHVrdWxdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ2RkZGQgW2xhbHUgcHVrdWxdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICdkYWxhbSAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIHlhbmcgbGFsdScsXG4gICAgICAgICAgICBzIDogJ2JlYmVyYXBhIGRldGlrJyxcbiAgICAgICAgICAgIHNzIDogJyVkIGRldGlrJyxcbiAgICAgICAgICAgIG0gOiAnc2VtZW5pdCcsXG4gICAgICAgICAgICBtbSA6ICclZCBtZW5pdCcsXG4gICAgICAgICAgICBoIDogJ3NlamFtJyxcbiAgICAgICAgICAgIGhoIDogJyVkIGphbScsXG4gICAgICAgICAgICBkIDogJ3NlaGFyaScsXG4gICAgICAgICAgICBkZCA6ICclZCBoYXJpJyxcbiAgICAgICAgICAgIE0gOiAnc2VidWxhbicsXG4gICAgICAgICAgICBNTSA6ICclZCBidWxhbicsXG4gICAgICAgICAgICB5IDogJ3NldGFodW4nLFxuICAgICAgICAgICAgeXkgOiAnJWQgdGFodW4nXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGlkO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICBmdW5jdGlvbiBwbHVyYWwobikge1xuICAgICAgICBpZiAobiAlIDEwMCA9PT0gMTEpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKG4gJSAxMCA9PT0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBmdW5jdGlvbiB0cmFuc2xhdGUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBudW1iZXIgKyAnICc7XG4gICAgICAgIHN3aXRjaCAoa2V5KSB7XG4gICAgICAgICAgICBjYXNlICdzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdub2trcmFyIHNla8O6bmR1cicgOiAnbm9ra3J1bSBzZWvDum5kdW0nO1xuICAgICAgICAgICAgY2FzZSAnc3MnOlxuICAgICAgICAgICAgICAgIGlmIChwbHVyYWwobnVtYmVyKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnc2Vrw7puZHVyJyA6ICdzZWvDum5kdW0nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdzZWvDum5kYSc7XG4gICAgICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICdtw61uw7p0YScgOiAnbcOtbsO6dHUnO1xuICAgICAgICAgICAgY2FzZSAnbW0nOlxuICAgICAgICAgICAgICAgIGlmIChwbHVyYWwobnVtYmVyKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnbcOtbsO6dHVyJyA6ICdtw61uw7p0dW0nKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdtw61uw7p0YSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnbcOtbsO6dHUnO1xuICAgICAgICAgICAgY2FzZSAnaGgnOlxuICAgICAgICAgICAgICAgIGlmIChwbHVyYWwobnVtYmVyKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAna2x1a2t1c3R1bmRpcicgOiAna2x1a2t1c3R1bmR1bScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ2tsdWtrdXN0dW5kJztcbiAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnZGFndXInO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gaXNGdXR1cmUgPyAnZGFnJyA6ICdkZWdpJztcbiAgICAgICAgICAgIGNhc2UgJ2RkJzpcbiAgICAgICAgICAgICAgICBpZiAocGx1cmFsKG51bWJlcikpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnZGFnYXInO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAoaXNGdXR1cmUgPyAnZGFnYScgOiAnZMO2Z3VtJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnZGFndXInO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKGlzRnV0dXJlID8gJ2RhZycgOiAnZGVnaScpO1xuICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdtw6FudcOwdXInO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gaXNGdXR1cmUgPyAnbcOhbnXDsCcgOiAnbcOhbnXDsGknO1xuICAgICAgICAgICAgY2FzZSAnTU0nOlxuICAgICAgICAgICAgICAgIGlmIChwbHVyYWwobnVtYmVyKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdtw6FudcOwaXInO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAoaXNGdXR1cmUgPyAnbcOhbnXDsGknIDogJ23DoW51w7B1bScpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAod2l0aG91dFN1ZmZpeCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ23DoW51w7B1cic7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAoaXNGdXR1cmUgPyAnbcOhbnXDsCcgOiAnbcOhbnXDsGknKTtcbiAgICAgICAgICAgIGNhc2UgJ3knOlxuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ8OhcicgOiAnw6FyaSc7XG4gICAgICAgICAgICBjYXNlICd5eSc6XG4gICAgICAgICAgICAgICAgaWYgKHBsdXJhbChudW1iZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICfDoXInIDogJ8OhcnVtJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICfDoXInIDogJ8OhcmknKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBpcyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2lzJywge1xuICAgICAgICBtb250aHMgOiAnamFuw7phcl9mZWJyw7phcl9tYXJzX2FwcsOtbF9tYcOtX2rDum7DrV9qw7psw61fw6Fnw7pzdF9zZXB0ZW1iZXJfb2t0w7NiZXJfbsOzdmVtYmVyX2Rlc2VtYmVyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdqYW5fZmViX21hcl9hcHJfbWHDrV9qw7puX2rDumxfw6Fnw7pfc2VwX29rdF9uw7N2X2Rlcycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnc3VubnVkYWd1cl9tw6FudWRhZ3VyX8O+cmnDsGp1ZGFndXJfbWnDsHZpa3VkYWd1cl9maW1tdHVkYWd1cl9mw7ZzdHVkYWd1cl9sYXVnYXJkYWd1cicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdzdW5fbcOhbl/DvnJpX21pw7BfZmltX2bDtnNfbGF1Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdTdV9Nw6Ffw55yX01pX0ZpX0bDtl9MYScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdELiBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QuIE1NTU0gWVlZWSBba2wuXSBIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRC4gTU1NTSBZWVlZIFtrbC5dIEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbw60gZGFnIGtsLl0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdbw6EgbW9yZ3VuIGtsLl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBba2wuXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1vDrSBnw6ZyIGtsLl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW3PDrcOwYXN0YV0gZGRkZCBba2wuXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnZWZ0aXIgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICdmeXJpciAlcyBzw63DsGFuJyxcbiAgICAgICAgICAgIHMgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBzcyA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG0gOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBtbSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGggOiAna2x1a2t1c3R1bmQnLFxuICAgICAgICAgICAgaGggOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBkIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgZGQgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBNIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgTU0gOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICB5IDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgeXkgOiB0cmFuc2xhdGVcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbCA6ICclZC4nLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBpcztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGl0ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnaXQnLCB7XG4gICAgICAgIG1vbnRocyA6ICdnZW5uYWlvX2ZlYmJyYWlvX21hcnpvX2FwcmlsZV9tYWdnaW9fZ2l1Z25vX2x1Z2xpb19hZ29zdG9fc2V0dGVtYnJlX290dG9icmVfbm92ZW1icmVfZGljZW1icmUnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ2dlbl9mZWJfbWFyX2Fwcl9tYWdfZ2l1X2x1Z19hZ29fc2V0X290dF9ub3ZfZGljJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdkb21lbmljYV9sdW5lZMOsX21hcnRlZMOsX21lcmNvbGVkw6xfZ2lvdmVkw6xfdmVuZXJkw6xfc2FiYXRvJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ2RvbV9sdW5fbWFyX21lcl9naW9fdmVuX3NhYicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnZG9fbHVfbWFfbWVfZ2lfdmVfc2EnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbT2dnaSBhbGxlXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0RvbWFuaSBhbGxlXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2FsbGVdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbSWVyaSBhbGxlXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tsYSBzY29yc2FdIGRkZGQgW2FsbGVdIExUJztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW2xvIHNjb3Jzb10gZGRkZCBbYWxsZV0gTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6IGZ1bmN0aW9uIChzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICgoL15bMC05XS4rJC8pLnRlc3QocykgPyAndHJhJyA6ICdpbicpICsgJyAnICsgcztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwYXN0IDogJyVzIGZhJyxcbiAgICAgICAgICAgIHMgOiAnYWxjdW5pIHNlY29uZGknLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2Vjb25kaScsXG4gICAgICAgICAgICBtIDogJ3VuIG1pbnV0bycsXG4gICAgICAgICAgICBtbSA6ICclZCBtaW51dGknLFxuICAgICAgICAgICAgaCA6ICd1blxcJ29yYScsXG4gICAgICAgICAgICBoaCA6ICclZCBvcmUnLFxuICAgICAgICAgICAgZCA6ICd1biBnaW9ybm8nLFxuICAgICAgICAgICAgZGQgOiAnJWQgZ2lvcm5pJyxcbiAgICAgICAgICAgIE0gOiAndW4gbWVzZScsXG4gICAgICAgICAgICBNTSA6ICclZCBtZXNpJyxcbiAgICAgICAgICAgIHkgOiAndW4gYW5ubycsXG4gICAgICAgICAgICB5eSA6ICclZCBhbm5pJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlIDogL1xcZHsxLDJ9wrovLFxuICAgICAgICBvcmRpbmFsOiAnJWTCuicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGl0O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgaXRDaCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2l0LWNoJywge1xuICAgICAgICBtb250aHMgOiAnZ2VubmFpb19mZWJicmFpb19tYXJ6b19hcHJpbGVfbWFnZ2lvX2dpdWdub19sdWdsaW9fYWdvc3RvX3NldHRlbWJyZV9vdHRvYnJlX25vdmVtYnJlX2RpY2VtYnJlJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdnZW5fZmViX21hcl9hcHJfbWFnX2dpdV9sdWdfYWdvX3NldF9vdHRfbm92X2RpYycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnZG9tZW5pY2FfbHVuZWTDrF9tYXJ0ZWTDrF9tZXJjb2xlZMOsX2dpb3ZlZMOsX3ZlbmVyZMOsX3NhYmF0bycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdkb21fbHVuX21hcl9tZXJfZ2lvX3Zlbl9zYWInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ2RvX2x1X21hX21lX2dpX3ZlX3NhJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW09nZ2kgYWxsZV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tEb21hbmkgYWxsZV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFthbGxlXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW0llcmkgYWxsZV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbbGEgc2NvcnNhXSBkZGRkIFthbGxlXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tsbyBzY29yc29dIGRkZGQgW2FsbGVdIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiBmdW5jdGlvbiAocykge1xuICAgICAgICAgICAgICAgIHJldHVybiAoKC9eWzAtOV0uKyQvKS50ZXN0KHMpID8gJ3RyYScgOiAnaW4nKSArICcgJyArIHM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGFzdCA6ICclcyBmYScsXG4gICAgICAgICAgICBzIDogJ2FsY3VuaSBzZWNvbmRpJyxcbiAgICAgICAgICAgIHNzIDogJyVkIHNlY29uZGknLFxuICAgICAgICAgICAgbSA6ICd1biBtaW51dG8nLFxuICAgICAgICAgICAgbW0gOiAnJWQgbWludXRpJyxcbiAgICAgICAgICAgIGggOiAndW5cXCdvcmEnLFxuICAgICAgICAgICAgaGggOiAnJWQgb3JlJyxcbiAgICAgICAgICAgIGQgOiAndW4gZ2lvcm5vJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGdpb3JuaScsXG4gICAgICAgICAgICBNIDogJ3VuIG1lc2UnLFxuICAgICAgICAgICAgTU0gOiAnJWQgbWVzaScsXG4gICAgICAgICAgICB5IDogJ3VuIGFubm8nLFxuICAgICAgICAgICAgeXkgOiAnJWQgYW5uaSdcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZSA6IC9cXGR7MSwyfcK6LyxcbiAgICAgICAgb3JkaW5hbDogJyVkwronLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBpdENoO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgamEgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdqYScsIHtcbiAgICAgICAgbW9udGhzIDogJ+S4gOaciF/kuozmnIhf5LiJ5pyIX+Wbm+aciF/kupTmnIhf5YWt5pyIX+S4g+aciF/lhavmnIhf5Lmd5pyIX+WNgeaciF/ljYHkuIDmnIhf5Y2B5LqM5pyIJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICcx5pyIXzLmnIhfM+aciF805pyIXzXmnIhfNuaciF835pyIXzjmnIhfOeaciF8xMOaciF8xMeaciF8xMuaciCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAn5pel5puc5pelX+aciOabnOaXpV/ngavmm5zml6Vf5rC05puc5pelX+acqOabnOaXpV/ph5Hmm5zml6Vf5Zyf5puc5pelJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ+aXpV/mnIhf54GrX+awtF/mnKhf6YeRX+Wcnycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn5pelX+aciF/ngatf5rC0X+acqF/ph5Ff5ZyfJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ1lZWVkvTU0vREQnLFxuICAgICAgICAgICAgTEwgOiAnWVlZWeW5tE3mnIhE5pelJyxcbiAgICAgICAgICAgIExMTCA6ICdZWVlZ5bm0TeaciETml6UgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdZWVlZ5bm0TeaciETml6UgZGRkZCBISDptbScsXG4gICAgICAgICAgICBsIDogJ1lZWVkvTU0vREQnLFxuICAgICAgICAgICAgbGwgOiAnWVlZWeW5tE3mnIhE5pelJyxcbiAgICAgICAgICAgIGxsbCA6ICdZWVlZ5bm0TeaciETml6UgSEg6bW0nLFxuICAgICAgICAgICAgbGxsbCA6ICdZWVlZ5bm0TeaciETml6UoZGRkKSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+WNiOWJjXzljYjlvowvaSxcbiAgICAgICAgaXNQTSA6IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ID09PSAn5Y2I5b6MJztcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfljYjliY0nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+WNiOW+jCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdb5LuK5pelXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1vmmI7ml6VdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogZnVuY3Rpb24gKG5vdykge1xuICAgICAgICAgICAgICAgIGlmIChub3cud2VlaygpIDwgdGhpcy53ZWVrKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb5p2l6YCxXWRkZGQgTFQnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnZGRkZCBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW+aYqOaXpV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiBmdW5jdGlvbiAobm93KSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMud2VlaygpIDwgbm93LndlZWsoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vlhYjpgLFdZGRkZCBMVCc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdkZGRkIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZSA6IC9cXGR7MSwyfeaXpS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnREREJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfml6UnO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICclc+W+jCcsXG4gICAgICAgICAgICBwYXN0IDogJyVz5YmNJyxcbiAgICAgICAgICAgIHMgOiAn5pWw56eSJyxcbiAgICAgICAgICAgIHNzIDogJyVk56eSJyxcbiAgICAgICAgICAgIG0gOiAnMeWIhicsXG4gICAgICAgICAgICBtbSA6ICclZOWIhicsXG4gICAgICAgICAgICBoIDogJzHmmYLplpMnLFxuICAgICAgICAgICAgaGggOiAnJWTmmYLplpMnLFxuICAgICAgICAgICAgZCA6ICcx5pelJyxcbiAgICAgICAgICAgIGRkIDogJyVk5pelJyxcbiAgICAgICAgICAgIE0gOiAnMeODtuaciCcsXG4gICAgICAgICAgICBNTSA6ICclZOODtuaciCcsXG4gICAgICAgICAgICB5IDogJzHlubQnLFxuICAgICAgICAgICAgeXkgOiAnJWTlubQnXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBqYTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGp2ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnanYnLCB7XG4gICAgICAgIG1vbnRocyA6ICdKYW51YXJpX0ZlYnJ1YXJpX01hcmV0X0FwcmlsX01laV9KdW5pX0p1bGlfQWd1c3R1c19TZXB0ZW1iZXJfT2t0b2Jlcl9Ob3BlbWJlcl9EZXNlbWJlcicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnSmFuX0ZlYl9NYXJfQXByX01laV9KdW5fSnVsX0Fnc19TZXBfT2t0X05vcF9EZXMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ01pbmdndV9TZW5lbl9TZWxvc29fUmVidV9LZW1pc19KZW11d2FoX1NlcHR1Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ01pbl9TZW5fU2VsX1JlYl9LZW1fSmVtX1NlcCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnTWdfU25fU2xfUmJfS21fSm1fU3AnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEgubW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hILm1tLnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgW3B1a3VsXSBISC5tbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIFtwdWt1bF0gSEgubW0nXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC9lbmppbmd8c2l5YW5nfHNvbnRlbnxuZGFsdS8sXG4gICAgICAgIG1lcmlkaWVtSG91ciA6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICdlbmppbmcnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAnc2l5YW5nJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDExID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICdzb250ZW4nIHx8IG1lcmlkaWVtID09PSAnbmRhbHUnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VycyA8IDExKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdlbmppbmcnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VycyA8IDE1KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdzaXlhbmcnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VycyA8IDE5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdzb250ZW4nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ25kYWx1JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1tEaW50ZW4gcHVuaWtvIHB1a3VsXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1tNYmVuamFuZyBwdWt1bF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbcHVrdWxdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW0thbGEgd2luZ2kgcHVrdWxdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ2RkZGQgW2tlcGVuZ2tlciBwdWt1bF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ3dvbnRlbiBpbmcgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyBpbmdrYW5nIGtlcGVuZ2tlcicsXG4gICAgICAgICAgICBzIDogJ3Nhd2V0YXdpcyBkZXRpaycsXG4gICAgICAgICAgICBzcyA6ICclZCBkZXRpaycsXG4gICAgICAgICAgICBtIDogJ3NldHVuZ2dhbCBtZW5pdCcsXG4gICAgICAgICAgICBtbSA6ICclZCBtZW5pdCcsXG4gICAgICAgICAgICBoIDogJ3NldHVuZ2dhbCBqYW0nLFxuICAgICAgICAgICAgaGggOiAnJWQgamFtJyxcbiAgICAgICAgICAgIGQgOiAnc2VkaW50ZW4nLFxuICAgICAgICAgICAgZGQgOiAnJWQgZGludGVuJyxcbiAgICAgICAgICAgIE0gOiAnc2V3dWxhbicsXG4gICAgICAgICAgICBNTSA6ICclZCB3dWxhbicsXG4gICAgICAgICAgICB5IDogJ3NldGF1bicsXG4gICAgICAgICAgICB5eSA6ICclZCB0YXVuJ1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA3ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA3dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBqdjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIGthID0gbW9tZW50LmRlZmluZUxvY2FsZSgna2EnLCB7XG4gICAgICAgIG1vbnRocyA6IHtcbiAgICAgICAgICAgIHN0YW5kYWxvbmU6ICfhg5jhg5Dhg5zhg5Xhg5Dhg6Dhg5hf4YOX4YOU4YOR4YOU4YOg4YOV4YOQ4YOa4YOYX+GDm+GDkOGDoOGDouGDmF/hg5Dhg57hg6Dhg5jhg5rhg5hf4YOb4YOQ4YOY4YOh4YOYX+GDmOGDleGDnOGDmOGDoeGDmF/hg5jhg5Xhg5rhg5jhg6Hhg5hf4YOQ4YOS4YOV4YOY4YOh4YOi4YOdX+GDoeGDlOGDpeGDouGDlOGDm+GDkeGDlOGDoOGDmF/hg53hg6Xhg6Lhg53hg5vhg5Hhg5Thg6Dhg5hf4YOc4YOd4YOU4YOb4YOR4YOU4YOg4YOYX+GDk+GDlOGDmeGDlOGDm+GDkeGDlOGDoOGDmCcuc3BsaXQoJ18nKSxcbiAgICAgICAgICAgIGZvcm1hdDogJ+GDmOGDkOGDnOGDleGDkOGDoOGDoV/hg5fhg5Thg5Hhg5Thg6Dhg5Xhg5Dhg5rhg6Ff4YOb4YOQ4YOg4YOi4YOhX+GDkOGDnuGDoOGDmOGDmuGDmOGDoV/hg5vhg5Dhg5jhg6Hhg6Ff4YOY4YOV4YOc4YOY4YOh4YOhX+GDmOGDleGDmuGDmOGDoeGDoV/hg5Dhg5Lhg5Xhg5jhg6Hhg6Lhg6Ff4YOh4YOU4YOl4YOi4YOU4YOb4YOR4YOU4YOg4YOhX+GDneGDpeGDouGDneGDm+GDkeGDlOGDoOGDoV/hg5zhg53hg5Thg5vhg5Hhg5Thg6Dhg6Ff4YOT4YOU4YOZ4YOU4YOb4YOR4YOU4YOg4YOhJy5zcGxpdCgnXycpXG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ+GDmOGDkOGDnF/hg5fhg5Thg5Ff4YOb4YOQ4YOgX+GDkOGDnuGDoF/hg5vhg5Dhg5hf4YOY4YOV4YOcX+GDmOGDleGDml/hg5Dhg5Lhg5Vf4YOh4YOU4YOlX+GDneGDpeGDol/hg5zhg53hg5Rf4YOT4YOU4YOZJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6IHtcbiAgICAgICAgICAgIHN0YW5kYWxvbmU6ICfhg5nhg5Xhg5jhg6Dhg5Bf4YOd4YOg4YOo4YOQ4YOR4YOQ4YOX4YOYX+GDoeGDkOGDm+GDqOGDkOGDkeGDkOGDl+GDmF/hg53hg5fhg67hg6jhg5Dhg5Hhg5Dhg5fhg5hf4YOu4YOj4YOX4YOo4YOQ4YOR4YOQ4YOX4YOYX+GDnuGDkOGDoOGDkOGDoeGDmeGDlOGDleGDmF/hg6jhg5Dhg5Hhg5Dhg5fhg5gnLnNwbGl0KCdfJyksXG4gICAgICAgICAgICBmb3JtYXQ6ICfhg5nhg5Xhg5jhg6Dhg5Dhg6Ff4YOd4YOg4YOo4YOQ4YOR4YOQ4YOX4YOhX+GDoeGDkOGDm+GDqOGDkOGDkeGDkOGDl+GDoV/hg53hg5fhg67hg6jhg5Dhg5Hhg5Dhg5fhg6Ff4YOu4YOj4YOX4YOo4YOQ4YOR4YOQ4YOX4YOhX+GDnuGDkOGDoOGDkOGDoeGDmeGDlOGDleGDoV/hg6jhg5Dhg5Hhg5Dhg5fhg6EnLnNwbGl0KCdfJyksXG4gICAgICAgICAgICBpc0Zvcm1hdDogLyjhg6zhg5jhg5zhg5B84YOo4YOU4YOb4YOT4YOU4YOSKS9cbiAgICAgICAgfSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfhg5nhg5Xhg5hf4YOd4YOg4YOoX+GDoeGDkOGDm1/hg53hg5fhg65f4YOu4YOj4YOXX+GDnuGDkOGDoF/hg6jhg5Dhg5EnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ+GDmeGDlV/hg53hg6Bf4YOh4YOQX+GDneGDl1/hg67hg6Nf4YOe4YOQX+GDqOGDkCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdoOm1tIEEnLFxuICAgICAgICAgICAgTFRTIDogJ2g6bW06c3MgQScsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIGg6bW0gQScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIGg6bW0gQSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vhg5Phg6bhg5Thg6FdIExUWy3hg5bhg5RdJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW+GDruGDleGDkOGDml0gTFRbLeGDluGDlF0nLFxuICAgICAgICAgICAgbGFzdERheSA6ICdb4YOS4YOj4YOo4YOY4YOcXSBMVFst4YOW4YOUXScsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdb4YOo4YOU4YOb4YOT4YOU4YOSXSBkZGRkIExUWy3hg5bhg5RdJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1vhg6zhg5jhg5zhg5BdIGRkZGQgTFQt4YOW4YOUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6IGZ1bmN0aW9uIChzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICgvKOGDrOGDkOGDm+GDmHzhg6zhg6Phg5fhg5h84YOh4YOQ4YOQ4YOX4YOYfOGDrOGDlOGDmuGDmCkvKS50ZXN0KHMpID9cbiAgICAgICAgICAgICAgICAgICAgcy5yZXBsYWNlKC/hg5gkLywgJ+GDqOGDmCcpIDpcbiAgICAgICAgICAgICAgICAgICAgcyArICfhg6jhg5gnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHBhc3QgOiBmdW5jdGlvbiAocykge1xuICAgICAgICAgICAgICAgIGlmICgoLyjhg6zhg5Dhg5vhg5h84YOs4YOj4YOX4YOYfOGDoeGDkOGDkOGDl+GDmHzhg5Phg6bhg5R84YOX4YOV4YOUKS8pLnRlc3QocykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHMucmVwbGFjZSgvKOGDmHzhg5QpJC8sICfhg5jhg6Eg4YOs4YOY4YOcJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICgoL+GDrOGDlOGDmuGDmC8pLnRlc3QocykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHMucmVwbGFjZSgv4YOs4YOU4YOa4YOYJC8sICfhg6zhg5rhg5jhg6Eg4YOs4YOY4YOcJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHMgOiAn4YOg4YOQ4YOb4YOT4YOU4YOc4YOY4YOb4YOUIOGDrOGDkOGDm+GDmCcsXG4gICAgICAgICAgICBzcyA6ICclZCDhg6zhg5Dhg5vhg5gnLFxuICAgICAgICAgICAgbSA6ICfhg6zhg6Phg5fhg5gnLFxuICAgICAgICAgICAgbW0gOiAnJWQg4YOs4YOj4YOX4YOYJyxcbiAgICAgICAgICAgIGggOiAn4YOh4YOQ4YOQ4YOX4YOYJyxcbiAgICAgICAgICAgIGhoIDogJyVkIOGDoeGDkOGDkOGDl+GDmCcsXG4gICAgICAgICAgICBkIDogJ+GDk+GDpuGDlCcsXG4gICAgICAgICAgICBkZCA6ICclZCDhg5Phg6bhg5QnLFxuICAgICAgICAgICAgTSA6ICfhg5fhg5Xhg5QnLFxuICAgICAgICAgICAgTU0gOiAnJWQg4YOX4YOV4YOUJyxcbiAgICAgICAgICAgIHkgOiAn4YOs4YOU4YOa4YOYJyxcbiAgICAgICAgICAgIHl5IDogJyVkIOGDrOGDlOGDmuGDmCdcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogLzB8MS3hg5rhg5h84YOb4YOULVxcZHsxLDJ9fFxcZHsxLDJ9LeGDlC8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICBpZiAobnVtYmVyID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3hg5rhg5gnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKChudW1iZXIgPCAyMCkgfHwgKG51bWJlciA8PSAxMDAgJiYgKG51bWJlciAlIDIwID09PSAwKSkgfHwgKG51bWJlciAlIDEwMCA9PT0gMCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+GDm+GDlC0nICsgbnVtYmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct4YOUJztcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsXG4gICAgICAgICAgICBkb3kgOiA3XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBrYTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHN1ZmZpeGVzID0ge1xuICAgICAgICAwOiAnLdGI0ZYnLFxuICAgICAgICAxOiAnLdGI0ZYnLFxuICAgICAgICAyOiAnLdGI0ZYnLFxuICAgICAgICAzOiAnLdGI0ZYnLFxuICAgICAgICA0OiAnLdGI0ZYnLFxuICAgICAgICA1OiAnLdGI0ZYnLFxuICAgICAgICA2OiAnLdGI0YsnLFxuICAgICAgICA3OiAnLdGI0ZYnLFxuICAgICAgICA4OiAnLdGI0ZYnLFxuICAgICAgICA5OiAnLdGI0YsnLFxuICAgICAgICAxMDogJy3RiNGLJyxcbiAgICAgICAgMjA6ICct0YjRiycsXG4gICAgICAgIDMwOiAnLdGI0YsnLFxuICAgICAgICA0MDogJy3RiNGLJyxcbiAgICAgICAgNTA6ICct0YjRlicsXG4gICAgICAgIDYwOiAnLdGI0YsnLFxuICAgICAgICA3MDogJy3RiNGWJyxcbiAgICAgICAgODA6ICct0YjRlicsXG4gICAgICAgIDkwOiAnLdGI0YsnLFxuICAgICAgICAxMDA6ICct0YjRlidcbiAgICB9O1xuXG4gICAgdmFyIGtrID0gbW9tZW50LmRlZmluZUxvY2FsZSgna2snLCB7XG4gICAgICAgIG1vbnRocyA6ICfSm9Cw0qPRgtCw0YBf0LDSm9C/0LDQvV/QvdCw0YPRgNGL0Ldf0YHTmdGD0ZbRgF/QvNCw0LzRi9GAX9C80LDRg9GB0YvQvF/RiNGW0LvQtNC1X9GC0LDQvNGL0Ldf0pvRi9GA0LrSr9C50LXQul/Sm9Cw0LfQsNC9X9Kb0LDRgNCw0YjQsF/QttC10LvRgtC+0pvRgdCw0L0nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ9Kb0LDSo1/QsNKb0L9f0L3QsNGDX9GB05nRg1/QvNCw0Lxf0LzQsNGDX9GI0ZbQu1/RgtCw0Lxf0pvRi9GAX9Kb0LDQt1/Sm9Cw0YBf0LbQtdC7Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICfQttC10LrRgdC10L3QsdGWX9C00q/QudGB0LXQvdCx0ZZf0YHQtdC50YHQtdC90LHRll/RgdOZ0YDRgdC10L3QsdGWX9Cx0LXQudGB0LXQvdCx0ZZf0LbSsdC80LBf0YHQtdC90LHRlicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfQttC10Lpf0LTSr9C5X9GB0LXQuV/RgdOZ0YBf0LHQtdC5X9C20rHQvF/RgdC10L0nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ9C20Lpf0LTQuV/RgdC5X9GB0YBf0LHQuV/QttC8X9GB0L0nLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vQkdKv0LPRltC9INGB0LDSk9Cw0YJdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW9CV0YDRgtC10qMg0YHQsNKT0LDRgl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBb0YHQsNKT0LDRgl0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdb0JrQtdGI0LUg0YHQsNKT0LDRgl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW9Oo0YLQutC10L0g0LDQv9GC0LDQvdGL0qNdIGRkZGQgW9GB0LDSk9Cw0YJdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICclcyDRltGI0ZbQvdC00LUnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyDQsdKx0YDRi9C9JyxcbiAgICAgICAgICAgIHMgOiAn0LHRltGA0L3QtdGI0LUg0YHQtdC60YPQvdC0JyxcbiAgICAgICAgICAgIHNzIDogJyVkINGB0LXQutGD0L3QtCcsXG4gICAgICAgICAgICBtIDogJ9Cx0ZbRgCDQvNC40L3Rg9GCJyxcbiAgICAgICAgICAgIG1tIDogJyVkINC80LjQvdGD0YInLFxuICAgICAgICAgICAgaCA6ICfQsdGW0YAg0YHQsNKT0LDRgicsXG4gICAgICAgICAgICBoaCA6ICclZCDRgdCw0pPQsNGCJyxcbiAgICAgICAgICAgIGQgOiAn0LHRltGAINC60q/QvScsXG4gICAgICAgICAgICBkZCA6ICclZCDQutKv0L0nLFxuICAgICAgICAgICAgTSA6ICfQsdGW0YAg0LDQuScsXG4gICAgICAgICAgICBNTSA6ICclZCDQsNC5JyxcbiAgICAgICAgICAgIHkgOiAn0LHRltGAINC20YvQuycsXG4gICAgICAgICAgICB5eSA6ICclZCDQttGL0LsnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS0o0YjRlnzRiNGLKS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYSA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIGIgPSBudW1iZXIgPj0gMTAwID8gMTAwIDogbnVsbDtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAoc3VmZml4ZXNbbnVtYmVyXSB8fCBzdWZmaXhlc1thXSB8fCBzdWZmaXhlc1tiXSk7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGtrO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgc3ltYm9sTWFwID0ge1xuICAgICAgICAnMSc6ICfhn6EnLFxuICAgICAgICAnMic6ICfhn6InLFxuICAgICAgICAnMyc6ICfhn6MnLFxuICAgICAgICAnNCc6ICfhn6QnLFxuICAgICAgICAnNSc6ICfhn6UnLFxuICAgICAgICAnNic6ICfhn6YnLFxuICAgICAgICAnNyc6ICfhn6cnLFxuICAgICAgICAnOCc6ICfhn6gnLFxuICAgICAgICAnOSc6ICfhn6knLFxuICAgICAgICAnMCc6ICfhn6AnXG4gICAgfSwgbnVtYmVyTWFwID0ge1xuICAgICAgICAn4Z+hJzogJzEnLFxuICAgICAgICAn4Z+iJzogJzInLFxuICAgICAgICAn4Z+jJzogJzMnLFxuICAgICAgICAn4Z+kJzogJzQnLFxuICAgICAgICAn4Z+lJzogJzUnLFxuICAgICAgICAn4Z+mJzogJzYnLFxuICAgICAgICAn4Z+nJzogJzcnLFxuICAgICAgICAn4Z+oJzogJzgnLFxuICAgICAgICAn4Z+pJzogJzknLFxuICAgICAgICAn4Z+gJzogJzAnXG4gICAgfTtcblxuICAgIHZhciBrbSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2ttJywge1xuICAgICAgICBtb250aHM6ICfhnpjhnoDhnprhnrZf4Z6A4Z674Z6Y4Z+S4Z6X4Z+IX+GemOGeuOGek+Getl/hnpjhn4Hhnp/hnrZf4Z6n4Z6f4Z6X4Z62X+GemOGet+GekOGeu+Gek+Getl/hnoDhnoDhn5LhnoDhnorhnrZf4Z6f4Z644Z6g4Z62X+GegOGeieGfkuGeieGetl/hno/hnrvhnpvhnrZf4Z6c4Z634Z6F4Z+S4Z6G4Z634Z6A4Z62X+GekuGfkuGek+GevCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICfhnpjhnoDhnprhnrZf4Z6A4Z674Z6Y4Z+S4Z6X4Z+IX+GemOGeuOGek+Getl/hnpjhn4Hhnp/hnrZf4Z6n4Z6f4Z6X4Z62X+GemOGet+GekOGeu+Gek+Getl/hnoDhnoDhn5LhnoDhnorhnrZf4Z6f4Z644Z6g4Z62X+GegOGeieGfkuGeieGetl/hno/hnrvhnpvhnrZf4Z6c4Z634Z6F4Z+S4Z6G4Z634Z6A4Z62X+GekuGfkuGek+GevCcuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXM6ICfhnqLhnrbhnpHhnrfhno/hn5Lhnplf4Z6F4Z+Q4Z6T4Z+S4Z6RX+GeouGehOGfkuGeguGetuGeml/hnpbhnrvhnpJf4Z6W4Z+S4Z6a4Z6g4Z6f4Z+S4Z6U4Z6P4Z634Z+NX+Gen+Geu+GegOGfkuGeml/hnp/hn4Xhnprhn40nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICfhnqLhnrZf4Z6FX+Geol/hnpZf4Z6W4Z+S4Z6aX+Gen+Geu1/hnp8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn4Z6i4Z62X+GehV/hnqJf4Z6WX+GeluGfkuGeml/hnp/hnrtf4Z6fJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUzogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv4Z6W4Z+S4Z6a4Z654Z6AfOGem+GfkuGehOGetuGehS8sXG4gICAgICAgIGlzUE06IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ID09PSAn4Z6b4Z+S4Z6E4Z624Z6FJztcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+GeluGfkuGemuGeueGegCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Z6b4Z+S4Z6E4Z624Z6FJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdb4Z6Q4Z+S4Z6E4Z+D4Z6T4Z+B4Z+HIOGemOGfieGfhOGehF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1vhnp/hn5LhnqLhn4LhnoAg4Z6Y4Z+J4Z+E4Z6EXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW+GemOGfieGfhOGehF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vhnpjhn5Lhnp/hnrfhnpvhnpjhnrfhnokg4Z6Y4Z+J4Z+E4Z6EXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW+Gen+GelOGfkuGej+GetuGeoOGfjeGemOGeu+Gek10gW+GemOGfieGfhOGehF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWU6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVz4Z6R4Z+A4Z6PJyxcbiAgICAgICAgICAgIHBhc3Q6ICclc+GemOGeu+GekycsXG4gICAgICAgICAgICBzOiAn4Z6U4Z+J4Z674Z6T4Z+S4Z6Y4Z624Z6T4Z6c4Z634Z6T4Z624Z6R4Z64JyxcbiAgICAgICAgICAgIHNzOiAnJWQg4Z6c4Z634Z6T4Z624Z6R4Z64JyxcbiAgICAgICAgICAgIG06ICfhnpjhnr3hnpnhnpPhnrbhnpHhnrgnLFxuICAgICAgICAgICAgbW06ICclZCDhnpPhnrbhnpHhnrgnLFxuICAgICAgICAgICAgaDogJ+GemOGeveGemeGemOGfieGfhOGehCcsXG4gICAgICAgICAgICBoaDogJyVkIOGemOGfieGfhOGehCcsXG4gICAgICAgICAgICBkOiAn4Z6Y4Z694Z6Z4Z6Q4Z+S4Z6E4Z+DJyxcbiAgICAgICAgICAgIGRkOiAnJWQg4Z6Q4Z+S4Z6E4Z+DJyxcbiAgICAgICAgICAgIE06ICfhnpjhnr3hnpnhnoHhn4InLFxuICAgICAgICAgICAgTU06ICclZCDhnoHhn4InLFxuICAgICAgICAgICAgeTogJ+GemOGeveGemeGehuGfkuGek+GetuGfhicsXG4gICAgICAgICAgICB5eTogJyVkIOGehuGfkuGek+GetuGfhidcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZSA6IC/hnpHhnrhcXGR7MSwyfS8sXG4gICAgICAgIG9yZGluYWwgOiAn4Z6R4Z64JWQnLFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9b4Z+h4Z+i4Z+j4Z+k4Z+l4Z+m4Z+n4Z+o4Z+p4Z+gXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ltYm9sTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrOiB7XG4gICAgICAgICAgICBkb3c6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95OiA0IC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGttO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgc3ltYm9sTWFwID0ge1xuICAgICAgICAnMSc6ICfgs6cnLFxuICAgICAgICAnMic6ICfgs6gnLFxuICAgICAgICAnMyc6ICfgs6knLFxuICAgICAgICAnNCc6ICfgs6onLFxuICAgICAgICAnNSc6ICfgs6snLFxuICAgICAgICAnNic6ICfgs6wnLFxuICAgICAgICAnNyc6ICfgs60nLFxuICAgICAgICAnOCc6ICfgs64nLFxuICAgICAgICAnOSc6ICfgs68nLFxuICAgICAgICAnMCc6ICfgs6YnXG4gICAgfSxcbiAgICBudW1iZXJNYXAgPSB7XG4gICAgICAgICfgs6cnOiAnMScsXG4gICAgICAgICfgs6gnOiAnMicsXG4gICAgICAgICfgs6knOiAnMycsXG4gICAgICAgICfgs6onOiAnNCcsXG4gICAgICAgICfgs6snOiAnNScsXG4gICAgICAgICfgs6wnOiAnNicsXG4gICAgICAgICfgs60nOiAnNycsXG4gICAgICAgICfgs64nOiAnOCcsXG4gICAgICAgICfgs68nOiAnOScsXG4gICAgICAgICfgs6YnOiAnMCdcbiAgICB9O1xuXG4gICAgdmFyIGtuID0gbW9tZW50LmRlZmluZUxvY2FsZSgna24nLCB7XG4gICAgICAgIG1vbnRocyA6ICfgspzgsqjgsrXgsrDgsr9f4LKr4LOG4LKs4LON4LKw4LK14LKw4LK/X+CyruCyvuCysOCzjeCymuCzjV/gso/gsqrgs43gsrDgsr/gsrLgs41f4LKu4LOG4LOVX+CynOCzguCyqOCzjV/gspzgs4HgsrLgs4bgs5Zf4LKG4LKX4LK44LON4LKf4LONX+CyuOCzhuCyquCzjeCyn+CzhuCyguCyrOCysOCzjV/gsoXgspXgs43gsp/gs4bgs4Lgs5XgsqzgsrDgs41f4LKo4LK14LOG4LKC4LKs4LKw4LONX+CyoeCyv+CyuOCzhuCyguCyrOCysOCzjScuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAn4LKc4LKoX+Cyq+CzhuCyrOCzjeCysF/gsq7gsr7gsrDgs43gsprgs41f4LKP4LKq4LON4LKw4LK/4LKy4LONX+CyruCzhuCzlV/gspzgs4Lgsqjgs41f4LKc4LOB4LKy4LOG4LOWX+CyhuCyl+CyuOCzjeCyn+CzjV/gsrjgs4bgsqrgs43gsp/gs4bgsoJf4LKF4LKV4LON4LKf4LOG4LOC4LOVX+CyqOCyteCzhuCygl/gsqHgsr/gsrjgs4bgsoInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzIDogJ+CyreCyvuCyqOCzgeCyteCyvuCysF/gsrjgs4bgs4Lgs5Xgsq7gsrXgsr7gsrBf4LKu4LKC4LKX4LKz4LK14LK+4LKwX+CyrOCzgeCyp+CyteCyvuCysF/gspfgs4HgsrDgs4HgsrXgsr7gsrBf4LK24LOB4LKV4LON4LKw4LK14LK+4LKwX+CytuCyqOCyv+CyteCyvuCysCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfgsq3gsr7gsqjgs4Ff4LK44LOG4LOC4LOV4LKuX+CyruCyguCyl+Cys1/gsqzgs4Hgsqdf4LKX4LOB4LKw4LOBX+CytuCzgeCyleCzjeCysF/gsrbgsqjgsr8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ+CyreCyvl/gsrjgs4bgs4Lgs5Vf4LKu4LKCX+CyrOCzgV/gspfgs4Ff4LK24LOBX+Cyticuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdBIGg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0EgaDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZLCBBIGg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSwgQSBoOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW+Cyh+CyguCypuCzgV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdb4LKo4LK+4LKz4LOGXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkLCBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1vgsqjgsr/gsqjgs43gsqjgs4ZdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1vgspXgs4bgs4Lgsqjgs4bgsq9dIGRkZGQsIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICclcyDgsqjgsoLgsqTgsrAnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyDgsrngsr/gsoLgsqbgs4YnLFxuICAgICAgICAgICAgcyA6ICfgspXgs4bgsrLgsrXgs4Eg4LKV4LON4LK34LKj4LKX4LKz4LOBJyxcbiAgICAgICAgICAgIHNzIDogJyVkIOCyuOCzhuCyleCzhuCyguCyoeCzgeCyl+Cys+CzgScsXG4gICAgICAgICAgICBtIDogJ+CykuCyguCypuCzgSDgsqjgsr/gsq7gsr/gsrcnLFxuICAgICAgICAgICAgbW0gOiAnJWQg4LKo4LK/4LKu4LK/4LK3JyxcbiAgICAgICAgICAgIGggOiAn4LKS4LKC4LKm4LOBIOCyl+CyguCyn+CzhicsXG4gICAgICAgICAgICBoaCA6ICclZCDgspfgsoLgsp/gs4YnLFxuICAgICAgICAgICAgZCA6ICfgspLgsoLgsqbgs4Eg4LKm4LK/4LKoJyxcbiAgICAgICAgICAgIGRkIDogJyVkIOCypuCyv+CyqCcsXG4gICAgICAgICAgICBNIDogJ+CykuCyguCypuCzgSDgsqTgsr/gsoLgspfgsrPgs4EnLFxuICAgICAgICAgICAgTU0gOiAnJWQg4LKk4LK/4LKC4LKX4LKz4LOBJyxcbiAgICAgICAgICAgIHkgOiAn4LKS4LKC4LKm4LOBIOCyteCysOCzjeCytycsXG4gICAgICAgICAgICB5eSA6ICclZCDgsrXgsrDgs43gsrcnXG4gICAgICAgIH0sXG4gICAgICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1vgs6fgs6jgs6ngs6rgs6vgs6zgs63gs67gs6/gs6ZdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvXFxkL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/gsrDgsr7gsqTgs43gsrDgsr984LKs4LOG4LKz4LK/4LKX4LON4LKX4LOGfOCyruCyp+CzjeCyr+CyvuCyueCzjeCyqHzgsrjgsoLgspzgs4YvLFxuICAgICAgICBtZXJpZGllbUhvdXIgOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lcmlkaWVtID09PSAn4LKw4LK+4LKk4LON4LKw4LK/Jykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyIDwgNCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4LKs4LOG4LKz4LK/4LKX4LON4LKX4LOGJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CyruCyp+CzjeCyr+CyvuCyueCzjeCyqCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4LK44LKC4LKc4LOGJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgsrDgsr7gsqTgs43gsrDgsr8nO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CyrOCzhuCys+Cyv+Cyl+CzjeCyl+Czhic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4LKu4LKn4LON4LKv4LK+4LK54LON4LKoJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDIwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgsrjgsoLgspzgs4YnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CysOCyvuCypOCzjeCysOCyvyc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfSjgsqjgs4bgs5UpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAn4LKo4LOG4LOVJztcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNiAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4ga247XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBrbyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2tvJywge1xuICAgICAgICBtb250aHMgOiAnMeyblF8y7JuUXzPsm5RfNOyblF817JuUXzbsm5RfN+yblF847JuUXznsm5RfMTDsm5RfMTHsm5RfMTLsm5QnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJzHsm5RfMuyblF8z7JuUXzTsm5RfNeyblF827JuUXzfsm5RfOOyblF857JuUXzEw7JuUXzEx7JuUXzEy7JuUJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICfsnbzsmpTsnbxf7JuU7JqU7J28X+2ZlOyalOydvF/siJjsmpTsnbxf66qp7JqU7J28X+q4iOyalOydvF/thqDsmpTsnbwnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn7J28X+yblF/tmZRf7IiYX+uqqV/quIhf7YagJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICfsnbxf7JuUX+2ZlF/siJhf66qpX+q4iF/thqAnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnQSBoOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdBIGg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdZWVlZLk1NLkRELicsXG4gICAgICAgICAgICBMTCA6ICdZWVlZ64WEIE1NTU0gROydvCcsXG4gICAgICAgICAgICBMTEwgOiAnWVlZWeuFhCBNTU1NIETsnbwgQSBoOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnWVlZWeuFhCBNTU1NIETsnbwgZGRkZCBBIGg6bW0nLFxuICAgICAgICAgICAgbCA6ICdZWVlZLk1NLkRELicsXG4gICAgICAgICAgICBsbCA6ICdZWVlZ64WEIE1NTU0gROydvCcsXG4gICAgICAgICAgICBsbGwgOiAnWVlZWeuFhCBNTU1NIETsnbwgQSBoOm1tJyxcbiAgICAgICAgICAgIGxsbGwgOiAnWVlZWeuFhCBNTU1NIETsnbwgZGRkZCBBIGg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICfsmKTripggTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICfrgrTsnbwgTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ+yWtOygnCBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICfsp4Drgpzso7wgZGRkZCBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnJXMg7ZuEJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMg7KCEJyxcbiAgICAgICAgICAgIHMgOiAn66qHIOy0iCcsXG4gICAgICAgICAgICBzcyA6ICclZOy0iCcsXG4gICAgICAgICAgICBtIDogJzHrtoQnLFxuICAgICAgICAgICAgbW0gOiAnJWTrtoQnLFxuICAgICAgICAgICAgaCA6ICftlZwg7Iuc6rCEJyxcbiAgICAgICAgICAgIGhoIDogJyVk7Iuc6rCEJyxcbiAgICAgICAgICAgIGQgOiAn7ZWY66OoJyxcbiAgICAgICAgICAgIGRkIDogJyVk7J28JyxcbiAgICAgICAgICAgIE0gOiAn7ZWcIOuLrCcsXG4gICAgICAgICAgICBNTSA6ICclZOuLrCcsXG4gICAgICAgICAgICB5IDogJ+ydvCDrhYQnLFxuICAgICAgICAgICAgeXkgOiAnJWTrhYQnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2UgOiAvXFxkezEsMn0o7J28fOyblHzso7wpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEREQnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+ydvCc7XG4gICAgICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAn7JuUJztcbiAgICAgICAgICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgICAgICBjYXNlICdXJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfso7wnO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2UgOiAv7Jik7KCEfOyYpO2bhC8sXG4gICAgICAgIGlzUE0gOiBmdW5jdGlvbiAodG9rZW4pIHtcbiAgICAgICAgICAgIHJldHVybiB0b2tlbiA9PT0gJ+yYpO2bhCc7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNVcHBlcikge1xuICAgICAgICAgICAgcmV0dXJuIGhvdXIgPCAxMiA/ICfsmKTsoIQnIDogJ+yYpO2bhCc7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBrbztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHN5bWJvbE1hcCA9IHtcbiAgICAgICAgJzEnOiAn2aEnLFxuICAgICAgICAnMic6ICfZoicsXG4gICAgICAgICczJzogJ9mjJyxcbiAgICAgICAgJzQnOiAn2aQnLFxuICAgICAgICAnNSc6ICfZpScsXG4gICAgICAgICc2JzogJ9mmJyxcbiAgICAgICAgJzcnOiAn2acnLFxuICAgICAgICAnOCc6ICfZqCcsXG4gICAgICAgICc5JzogJ9mpJyxcbiAgICAgICAgJzAnOiAn2aAnXG4gICAgfSwgbnVtYmVyTWFwID0ge1xuICAgICAgICAn2aEnOiAnMScsXG4gICAgICAgICfZoic6ICcyJyxcbiAgICAgICAgJ9mjJzogJzMnLFxuICAgICAgICAn2aQnOiAnNCcsXG4gICAgICAgICfZpSc6ICc1JyxcbiAgICAgICAgJ9mmJzogJzYnLFxuICAgICAgICAn2acnOiAnNycsXG4gICAgICAgICfZqCc6ICc4JyxcbiAgICAgICAgJ9mpJzogJzknLFxuICAgICAgICAn2aAnOiAnMCdcbiAgICB9LFxuICAgIG1vbnRocyA9IFtcbiAgICAgICAgJ9qp2KfZhtmI2YbbjCDYr9mI2YjbldmFJyxcbiAgICAgICAgJ9i02YjYqNin2KonLFxuICAgICAgICAn2KbYp9iy2KfYsScsXG4gICAgICAgICfZhtuM2LPYp9mGJyxcbiAgICAgICAgJ9im2KfbjNin2LEnLFxuICAgICAgICAn2K3ZiNiy25XbjNix2KfZhicsXG4gICAgICAgICfYqtuV2YXZhdmI2LInLFxuICAgICAgICAn2KbYp9ioJyxcbiAgICAgICAgJ9im25XbjNmE2YjZiNmEJyxcbiAgICAgICAgJ9iq2LTYsduM2YbbjCDbjNuV2YPbldmFJyxcbiAgICAgICAgJ9iq2LTYsduM2YbbjCDYr9mI2YjbldmFJyxcbiAgICAgICAgJ9mD2KfZhtmI2YbbjCDbjNuV2qnbldmFJ1xuICAgIF07XG5cblxuICAgIHZhciBrdSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ2t1Jywge1xuICAgICAgICBtb250aHMgOiBtb250aHMsXG4gICAgICAgIG1vbnRoc1Nob3J0IDogbW9udGhzLFxuICAgICAgICB3ZWVrZGF5cyA6ICfbjNmH4oCM2YPYtNmH4oCM2YXZhdmH4oCMX9iv2YjZiNi02YfigIzZhdmF2YfigIxf2LPbjti02YfigIzZhdmF2YfigIxf2obZiNin2LHYtNmH4oCM2YXZhdmH4oCMX9m+247Zhtis2LTZh+KAjNmF2YXZh+KAjF/Zh9mH4oCM24zZhtuMX9i02YfigIzZhdmF2YfigIwnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn24zZh+KAjNmD2LTZh+KAjNmFX9iv2YjZiNi02YfigIzZhV/Ys9uO2LTZh+KAjNmFX9qG2YjYp9ix2LTZh+KAjNmFX9m+247Zhtis2LTZh+KAjNmFX9mH2YfigIzbjNmG24xf2LTZh+KAjNmF2YXZh+KAjCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn24xf2K9f2LNf2oZf2b5f2Ydf2LQnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL9im247ZiNin2LHZh+KAjHzYqNmH4oCM24zYp9mG24wvLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAv2KbbjtmI2KfYsdmH4oCMLy50ZXN0KGlucHV0KTtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfYqNmH4oCM24zYp9mG24wnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9im247ZiNin2LHZh+KAjCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdb2KbZh+KAjNmF2LHbhiDZg9in2KramNmF247YsV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdb2KjZh+KAjNuM2KfZhtuMINmD2KfYqtqY2YXbjtixXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFvZg9in2KramNmF247YsV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdb2K/ZiNuO2YbbjiDZg9in2KramNmF247YsV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnZGRkZCBb2YPYp9iq2pjZhduO2LFdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICfZhNmH4oCMICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMnLFxuICAgICAgICAgICAgcyA6ICfahtmH4oCM2YbYryDahtix2YPZh+KAjNuM2YfigIzZgycsXG4gICAgICAgICAgICBzcyA6ICfahtix2YPZh+KAjCAlZCcsXG4gICAgICAgICAgICBtIDogJ9uM2YfigIzZgyDYrtmI2YTZh+KAjNmDJyxcbiAgICAgICAgICAgIG1tIDogJyVkINiu2YjZhNmH4oCM2YMnLFxuICAgICAgICAgICAgaCA6ICfbjNmH4oCM2YMg2YPYp9iq2pjZhduO2LEnLFxuICAgICAgICAgICAgaGggOiAnJWQg2YPYp9iq2pjZhduO2LEnLFxuICAgICAgICAgICAgZCA6ICfbjNmH4oCM2YMg2pXbhtqYJyxcbiAgICAgICAgICAgIGRkIDogJyVkINqV24bamCcsXG4gICAgICAgICAgICBNIDogJ9uM2YfigIzZgyDZhdin2YbarycsXG4gICAgICAgICAgICBNTSA6ICclZCDZhdin2YbarycsXG4gICAgICAgICAgICB5IDogJ9uM2YfigIzZgyDYs9in2rUnLFxuICAgICAgICAgICAgeXkgOiAnJWQg2LPYp9q1J1xuICAgICAgICB9LFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9b2aHZotmj2aTZpdmm2afZqNmp2aBdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSkucmVwbGFjZSgv2IwvZywgJywnKTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgICAgICB9KS5yZXBsYWNlKC8sL2csICfYjCcpO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogNiwgLy8gU2F0dXJkYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDEyIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDEydGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBrdTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHN1ZmZpeGVzID0ge1xuICAgICAgICAwOiAnLdGH0q8nLFxuICAgICAgICAxOiAnLdGH0LgnLFxuICAgICAgICAyOiAnLdGH0LgnLFxuICAgICAgICAzOiAnLdGH0q8nLFxuICAgICAgICA0OiAnLdGH0q8nLFxuICAgICAgICA1OiAnLdGH0LgnLFxuICAgICAgICA2OiAnLdGH0YsnLFxuICAgICAgICA3OiAnLdGH0LgnLFxuICAgICAgICA4OiAnLdGH0LgnLFxuICAgICAgICA5OiAnLdGH0YMnLFxuICAgICAgICAxMDogJy3Rh9GDJyxcbiAgICAgICAgMjA6ICct0YfRiycsXG4gICAgICAgIDMwOiAnLdGH0YMnLFxuICAgICAgICA0MDogJy3Rh9GLJyxcbiAgICAgICAgNTA6ICct0YfSrycsXG4gICAgICAgIDYwOiAnLdGH0YsnLFxuICAgICAgICA3MDogJy3Rh9C4JyxcbiAgICAgICAgODA6ICct0YfQuCcsXG4gICAgICAgIDkwOiAnLdGH0YMnLFxuICAgICAgICAxMDA6ICct0YfSrydcbiAgICB9O1xuXG4gICAgdmFyIGt5ID0gbW9tZW50LmRlZmluZUxvY2FsZSgna3knLCB7XG4gICAgICAgIG1vbnRocyA6ICfRj9C90LLQsNGA0Yxf0YTQtdCy0YDQsNC70Yxf0LzQsNGA0YJf0LDQv9GA0LXQu9GMX9C80LDQuV/QuNGO0L3RjF/QuNGO0LvRjF/QsNCy0LPRg9GB0YJf0YHQtdC90YLRj9Cx0YDRjF/QvtC60YLRj9Cx0YDRjF/QvdC+0Y/QsdGA0Yxf0LTQtdC60LDQsdGA0YwnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ9GP0L3Qsl/RhNC10LJf0LzQsNGA0YJf0LDQv9GAX9C80LDQuV/QuNGO0L3RjF/QuNGO0LvRjF/QsNCy0LNf0YHQtdC9X9C+0LrRgl/QvdC+0Y9f0LTQtdC6Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICfQltC10LrRiNC10LzQsdC4X9CU0q/QudGI06nQvNCx0q9f0KjQtdC50YjQtdC80LHQuF/QqNCw0YDRiNC10LzQsdC4X9CR0LXQudGI0LXQvNCx0Lhf0JbRg9C80LBf0JjRiNC10LzQsdC4Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ9CW0LXQul/QlNKv0Llf0KjQtdC5X9Co0LDRgF/QkdC10Llf0JbRg9C8X9CY0YjQtScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn0JbQul/QlNC5X9Co0Llf0KjRgF/QkdC5X9CW0Lxf0JjRiCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW9CR0q/Qs9Kv0L0g0YHQsNCw0YJdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW9Ct0YDRgtC10qMg0YHQsNCw0YJdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW9GB0LDQsNGCXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1vQmtC10YfRjdGNINGB0LDQsNGCXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdb06jRgtC606nQvSDQsNC/0YLQsNC90YvQvV0gZGRkZCBb0LrSr9C90q9dIFvRgdCw0LDRgl0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJyVzINC40YfQuNC90LTQtScsXG4gICAgICAgICAgICBwYXN0IDogJyVzINC80YPRgNGD0L0nLFxuICAgICAgICAgICAgcyA6ICfQsdC40YDQvdC10YfQtSDRgdC10LrRg9C90LQnLFxuICAgICAgICAgICAgc3MgOiAnJWQg0YHQtdC60YPQvdC0JyxcbiAgICAgICAgICAgIG0gOiAn0LHQuNGAINC80q/QvdOp0YInLFxuICAgICAgICAgICAgbW0gOiAnJWQg0LzSr9C906nRgicsXG4gICAgICAgICAgICBoIDogJ9Cx0LjRgCDRgdCw0LDRgicsXG4gICAgICAgICAgICBoaCA6ICclZCDRgdCw0LDRgicsXG4gICAgICAgICAgICBkIDogJ9Cx0LjRgCDQutKv0L0nLFxuICAgICAgICAgICAgZGQgOiAnJWQg0LrSr9C9JyxcbiAgICAgICAgICAgIE0gOiAn0LHQuNGAINCw0LknLFxuICAgICAgICAgICAgTU0gOiAnJWQg0LDQuScsXG4gICAgICAgICAgICB5IDogJ9Cx0LjRgCDQttGL0LsnLFxuICAgICAgICAgICAgeXkgOiAnJWQg0LbRi9C7J1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0tKNGH0Lh80YfRi3zRh9KvfNGH0YMpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBhID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgYiA9IG51bWJlciA+PSAxMDAgPyAxMDAgOiBudWxsO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIChzdWZmaXhlc1tudW1iZXJdIHx8IHN1ZmZpeGVzW2FdIHx8IHN1ZmZpeGVzW2JdKTtcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4ga3k7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIGZ1bmN0aW9uIHByb2Nlc3NSZWxhdGl2ZVRpbWUobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXksIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB7XG4gICAgICAgICAgICAnbSc6IFsnZW5nIE1pbnV0dCcsICdlbmdlciBNaW51dHQnXSxcbiAgICAgICAgICAgICdoJzogWydlbmcgU3Rvbm4nLCAnZW5nZXIgU3Rvbm4nXSxcbiAgICAgICAgICAgICdkJzogWydlZW4gRGFnJywgJ2VuZ2VtIERhZyddLFxuICAgICAgICAgICAgJ00nOiBbJ2VlIE1vdW50JywgJ2VuZ2VtIE1vdW50J10sXG4gICAgICAgICAgICAneSc6IFsnZWUgSm9lcicsICdlbmdlbSBKb2VyJ11cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyBmb3JtYXRba2V5XVswXSA6IGZvcm1hdFtrZXldWzFdO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwcm9jZXNzRnV0dXJlVGltZShzdHJpbmcpIHtcbiAgICAgICAgdmFyIG51bWJlciA9IHN0cmluZy5zdWJzdHIoMCwgc3RyaW5nLmluZGV4T2YoJyAnKSk7XG4gICAgICAgIGlmIChlaWZlbGVyUmVnZWxBcHBsaWVzVG9OdW1iZXIobnVtYmVyKSkge1xuICAgICAgICAgICAgcmV0dXJuICdhICcgKyBzdHJpbmc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICdhbiAnICsgc3RyaW5nO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwcm9jZXNzUGFzdFRpbWUoc3RyaW5nKSB7XG4gICAgICAgIHZhciBudW1iZXIgPSBzdHJpbmcuc3Vic3RyKDAsIHN0cmluZy5pbmRleE9mKCcgJykpO1xuICAgICAgICBpZiAoZWlmZWxlclJlZ2VsQXBwbGllc1RvTnVtYmVyKG51bWJlcikpIHtcbiAgICAgICAgICAgIHJldHVybiAndmlydSAnICsgc3RyaW5nO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAndmlydW4gJyArIHN0cmluZztcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSB3b3JkIGJlZm9yZSB0aGUgZ2l2ZW4gbnVtYmVyIGxvc2VzIHRoZSAnLW4nIGVuZGluZy5cbiAgICAgKiBlLmcuICdhbiAxMCBEZWVnJyBidXQgJ2EgNSBEZWVnJ1xuICAgICAqXG4gICAgICogQHBhcmFtIG51bWJlciB7aW50ZWdlcn1cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlaWZlbGVyUmVnZWxBcHBsaWVzVG9OdW1iZXIobnVtYmVyKSB7XG4gICAgICAgIG51bWJlciA9IHBhcnNlSW50KG51bWJlciwgMTApO1xuICAgICAgICBpZiAoaXNOYU4obnVtYmVyKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChudW1iZXIgPCAwKSB7XG4gICAgICAgICAgICAvLyBOZWdhdGl2ZSBOdW1iZXIgLS0+IGFsd2F5cyB0cnVlXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPCAxMCkge1xuICAgICAgICAgICAgLy8gT25seSAxIGRpZ2l0XG4gICAgICAgICAgICBpZiAoNCA8PSBudW1iZXIgJiYgbnVtYmVyIDw9IDcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPCAxMDApIHtcbiAgICAgICAgICAgIC8vIDIgZGlnaXRzXG4gICAgICAgICAgICB2YXIgbGFzdERpZ2l0ID0gbnVtYmVyICUgMTAsIGZpcnN0RGlnaXQgPSBudW1iZXIgLyAxMDtcbiAgICAgICAgICAgIGlmIChsYXN0RGlnaXQgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZWlmZWxlclJlZ2VsQXBwbGllc1RvTnVtYmVyKGZpcnN0RGlnaXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGVpZmVsZXJSZWdlbEFwcGxpZXNUb051bWJlcihsYXN0RGlnaXQpO1xuICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA8IDEwMDAwKSB7XG4gICAgICAgICAgICAvLyAzIG9yIDQgZGlnaXRzIC0tPiByZWN1cnNpdmVseSBjaGVjayBmaXJzdCBkaWdpdFxuICAgICAgICAgICAgd2hpbGUgKG51bWJlciA+PSAxMCkge1xuICAgICAgICAgICAgICAgIG51bWJlciA9IG51bWJlciAvIDEwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGVpZmVsZXJSZWdlbEFwcGxpZXNUb051bWJlcihudW1iZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gQW55dGhpbmcgbGFyZ2VyIHRoYW4gNCBkaWdpdHM6IHJlY3Vyc2l2ZWx5IGNoZWNrIGZpcnN0IG4tMyBkaWdpdHNcbiAgICAgICAgICAgIG51bWJlciA9IG51bWJlciAvIDEwMDA7XG4gICAgICAgICAgICByZXR1cm4gZWlmZWxlclJlZ2VsQXBwbGllc1RvTnVtYmVyKG51bWJlcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbGIgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdsYicsIHtcbiAgICAgICAgbW9udGhzOiAnSmFudWFyX0ZlYnJ1YXJfTcOkZXJ6X0FicsOrbGxfTWVlX0p1bmlfSnVsaV9BdWd1c3RfU2VwdGVtYmVyX09rdG9iZXJfTm92ZW1iZXJfRGV6ZW1iZXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnSmFuLl9GZWJyLl9NcnouX0Fici5fTWVlX0p1bi5fSnVsLl9BdWcuX1NlcHQuX09rdC5fTm92Ll9EZXouJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXM6ICdTb25uZGVnX03DqWluZGVnX0TDq25zY2hkZWdfTcOrdHR3b2NoX0Rvbm5lc2NoZGVnX0ZyZWlkZWdfU2Ftc2NoZGVnJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnU28uX03DqS5fRMOrLl9Nw6suX0RvLl9Gci5fU2EuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ1NvX03DqV9Ew6tfTcOrX0RvX0ZyX1NhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdIOm1tIFtBdWVyXScsXG4gICAgICAgICAgICBMVFM6ICdIOm1tOnNzIFtBdWVyXScsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdELiBNTU1NIFlZWVkgSDptbSBbQXVlcl0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQuIE1NTU0gWVlZWSBIOm1tIFtBdWVyXSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbSGF1dCB1bV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbTXVlciB1bV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFt1bV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tHw6tzY2h0ZXIgdW1dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLy8gRGlmZmVyZW50IGRhdGUgc3RyaW5nIGZvciAnRMOrbnNjaGRlZycgKFR1ZXNkYXkpIGFuZCAnRG9ubmVzY2hkZWcnIChUaHVyc2RheSkgZHVlIHRvIHBob25vbG9naWNhbCBydWxlXG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbTGVzY2h0ZW5dIGRkZGQgW3VtXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tMZXNjaHRlXSBkZGRkIFt1bV0gTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogcHJvY2Vzc0Z1dHVyZVRpbWUsXG4gICAgICAgICAgICBwYXN0IDogcHJvY2Vzc1Bhc3RUaW1lLFxuICAgICAgICAgICAgcyA6ICdlIHB1ZXIgU2Vrb25uZW4nLFxuICAgICAgICAgICAgc3MgOiAnJWQgU2Vrb25uZW4nLFxuICAgICAgICAgICAgbSA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBtbSA6ICclZCBNaW51dHRlbicsXG4gICAgICAgICAgICBoIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGhoIDogJyVkIFN0b25uZW4nLFxuICAgICAgICAgICAgZCA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBkZCA6ICclZCBEZWVnJyxcbiAgICAgICAgICAgIE0gOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgTU0gOiAnJWQgTcOpaW50JyxcbiAgICAgICAgICAgIHkgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgeXkgOiAnJWQgSm9lcidcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbDogJyVkLicsXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGxiO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgbG8gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdsbycsIHtcbiAgICAgICAgbW9udGhzIDogJ+C6oeC6seC6h+C6geC6reC6mV/guoHgurjguqHgup7gurJf4Lqh4Lq14LqZ4LqyX+C7gOC6oeC6quC6sl/gup7gurbgupTguqrgurDgup7gurJf4Lqh4Lq04LqW4Lq44LqZ4LqyX+C6geC7jeC6peC6sOC6geC6u+C6lF/guqrgurTguofguqvgurJf4LqB4Lqx4LqZ4LqN4LqyX+C6leC6uOC6peC6sl/gup7gurDguojgurTguoFf4LqX4Lqx4LqZ4Lqn4LqyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICfguqHgurHguofguoHguq3guplf4LqB4Lq44Lqh4Lqe4LqyX+C6oeC6teC6meC6sl/gu4DguqHguqrgurJf4Lqe4Lq24LqU4Lqq4Lqw4Lqe4LqyX+C6oeC6tOC6luC6uOC6meC6sl/guoHgu43guqXgurDguoHgurvgupRf4Lqq4Lq04LqH4Lqr4LqyX+C6geC6seC6meC6jeC6sl/gupXgurjguqXgurJf4Lqe4Lqw4LqI4Lq04LqBX+C6l+C6seC6meC6p+C6sicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAn4Lqt4Lqy4LqX4Lq04LqUX+C6iOC6seC6mV/guq3gurHguofguoTgurLguplf4Lqe4Lq44LqUX+C6nuC6sOC6q+C6seC6lF/guqrgurjguoFf4LuA4Lqq4Lq74LqyJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ+C6l+C6tOC6lF/guojgurHguplf4Lqt4Lqx4LqH4LqE4Lqy4LqZX+C6nuC6uOC6lF/gup7gurDguqvgurHgupRf4Lqq4Lq44LqBX+C7gOC6quC6u+C6sicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn4LqXX+C6iF/guq3guoRf4LqeX+C6nuC6q1/guqrguoFf4LqqJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAn4Lqn4Lqx4LqZZGRkZCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+C6leC6reC6meC7gOC6iuC6u+C7ieC6snzgupXguq3gupngu4HguqXguocvLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCA9PT0gJ+C6leC6reC6meC7geC6peC6hyc7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4LqV4Lqt4LqZ4LuA4LqK4Lq74LuJ4LqyJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgupXguq3gupngu4HguqXguocnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW+C6oeC6t+C7ieC6meC6teC7ieC7gOC6p+C6peC6sl0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdb4Lqh4Lq34LuJ4Lqt4Lq34LuI4LqZ4LuA4Lqn4Lql4LqyXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdb4Lqn4Lqx4LqZXWRkZGRb4Luc4LuJ4Lqy4LuA4Lqn4Lql4LqyXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1vguqHgurfgu4nguqfgurLgupngupngurXgu4ngu4DguqfguqXgurJdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1vguqfgurHgupldZGRkZFvgu4HguqXgu4nguqfgupngurXgu4ngu4DguqfguqXgurJdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICfguq3gurXguoEgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclc+C6nOC7iOC6suC6meC6oeC6sicsXG4gICAgICAgICAgICBzIDogJ+C6muC7jeC7iOC7gOC6l+C6u+C7iOC6suC7g+C6lOC6p+C6tOC6meC6suC6l+C6tScsXG4gICAgICAgICAgICBzcyA6ICclZCDguqfgurTgupngurLgupfgurUnICxcbiAgICAgICAgICAgIG0gOiAnMSDgupngurLgupfgurUnLFxuICAgICAgICAgICAgbW0gOiAnJWQg4LqZ4Lqy4LqX4Lq1JyxcbiAgICAgICAgICAgIGggOiAnMSDguorgurvgu4jguqfgu4LguqHguocnLFxuICAgICAgICAgICAgaGggOiAnJWQg4LqK4Lq74LuI4Lqn4LuC4Lqh4LqHJyxcbiAgICAgICAgICAgIGQgOiAnMSDguqHgurfgu4knLFxuICAgICAgICAgICAgZGQgOiAnJWQg4Lqh4Lq34LuJJyxcbiAgICAgICAgICAgIE0gOiAnMSDgu4DgupTgurfguq3gupknLFxuICAgICAgICAgICAgTU0gOiAnJWQg4LuA4LqU4Lq34Lqt4LqZJyxcbiAgICAgICAgICAgIHkgOiAnMSDgupvgurUnLFxuICAgICAgICAgICAgeXkgOiAnJWQg4Lqb4Lq1J1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvKOC6l+C6teC7iClcXGR7MSwyfS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gJ+C6l+C6teC7iCcgKyBudW1iZXI7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBsbztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHVuaXRzID0ge1xuICAgICAgICAnc3MnIDogJ3Nla3VuZMSXX3Nla3VuZMW+acWzX3Nla3VuZGVzJyxcbiAgICAgICAgJ20nIDogJ21pbnV0xJdfbWludXTEl3NfbWludXTEmScsXG4gICAgICAgICdtbSc6ICdtaW51dMSXc19taW51xI1pxbNfbWludXRlcycsXG4gICAgICAgICdoJyA6ICd2YWxhbmRhX3ZhbGFuZG9zX3ZhbGFuZMSFJyxcbiAgICAgICAgJ2hoJzogJ3ZhbGFuZG9zX3ZhbGFuZMWzX3ZhbGFuZGFzJyxcbiAgICAgICAgJ2QnIDogJ2RpZW5hX2RpZW5vc19kaWVuxIUnLFxuICAgICAgICAnZGQnOiAnZGllbm9zX2RpZW7Fs19kaWVuYXMnLFxuICAgICAgICAnTScgOiAnbcSXbnVvX23El25lc2lvX23El25lc8SvJyxcbiAgICAgICAgJ01NJzogJ23El25lc2lhaV9txJduZXNpxbNfbcSXbmVzaXVzJyxcbiAgICAgICAgJ3knIDogJ21ldGFpX21ldMWzX21ldHVzJyxcbiAgICAgICAgJ3l5JzogJ21ldGFpX21ldMWzX21ldHVzJ1xuICAgIH07XG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlU2Vjb25kcyhudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgICAgIHJldHVybiAna2VsaW9zIHNla3VuZMSXcyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaXNGdXR1cmUgPyAna2VsacWzIHNla3VuZMW+acWzJyA6ICdrZWxpYXMgc2VrdW5kZXMnO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZVNpbmd1bGFyKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/IGZvcm1zKGtleSlbMF0gOiAoaXNGdXR1cmUgPyBmb3JtcyhrZXkpWzFdIDogZm9ybXMoa2V5KVsyXSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNwZWNpYWwobnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBudW1iZXIgJSAxMCA9PT0gMCB8fCAobnVtYmVyID4gMTAgJiYgbnVtYmVyIDwgMjApO1xuICAgIH1cbiAgICBmdW5jdGlvbiBmb3JtcyhrZXkpIHtcbiAgICAgICAgcmV0dXJuIHVuaXRzW2tleV0uc3BsaXQoJ18nKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbnVtYmVyICsgJyAnO1xuICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgdHJhbnNsYXRlU2luZ3VsYXIobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXlbMF0sIGlzRnV0dXJlKTtcbiAgICAgICAgfSBlbHNlIGlmICh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHNwZWNpYWwobnVtYmVyKSA/IGZvcm1zKGtleSlbMV0gOiBmb3JtcyhrZXkpWzBdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChpc0Z1dHVyZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyBmb3JtcyhrZXkpWzFdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHNwZWNpYWwobnVtYmVyKSA/IGZvcm1zKGtleSlbMV0gOiBmb3JtcyhrZXkpWzJdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICB2YXIgbHQgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdsdCcsIHtcbiAgICAgICAgbW9udGhzIDoge1xuICAgICAgICAgICAgZm9ybWF0OiAnc2F1c2lvX3Zhc2FyaW9fa292b19iYWxhbmTFvmlvX2dlZ3XFvsSXc19iaXLFvmVsaW9fbGllcG9zX3J1Z3BqxavEjWlvX3J1Z3PEl2pvX3NwYWxpb19sYXBrcmnEjWlvX2dydW9kxb5pbycuc3BsaXQoJ18nKSxcbiAgICAgICAgICAgIHN0YW5kYWxvbmU6ICdzYXVzaXNfdmFzYXJpc19rb3Zhc19iYWxhbmRpc19nZWd1xb7El19iaXLFvmVsaXNfbGllcGFfcnVncGrFq3Rpc19ydWdzxJdqaXNfc3BhbGlzX2xhcGtyaXRpc19ncnVvZGlzJy5zcGxpdCgnXycpLFxuICAgICAgICAgICAgaXNGb3JtYXQ6IC9EW29EXT8oXFxbW15cXFtcXF1dKlxcXXxcXHMpK01NTU0/fE1NTU0/KFxcW1teXFxbXFxdXSpcXF18XFxzKStEW29EXT8vXG4gICAgICAgIH0sXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ3NhdV92YXNfa292X2JhbF9nZWdfYmlyX2xpZV9yZ3BfcmdzX3NwYV9sYXBfZ3JkJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6IHtcbiAgICAgICAgICAgIGZvcm1hdDogJ3Nla21hZGllbsSvX3Bpcm1hZGllbsSvX2FudHJhZGllbsSvX3RyZcSNaWFkaWVuxK9fa2V0dmlydGFkaWVuxK9fcGVua3RhZGllbsSvX8WhZcWhdGFkaWVuxK8nLnNwbGl0KCdfJyksXG4gICAgICAgICAgICBzdGFuZGFsb25lOiAnc2VrbWFkaWVuaXNfcGlybWFkaWVuaXNfYW50cmFkaWVuaXNfdHJlxI1pYWRpZW5pc19rZXR2aXJ0YWRpZW5pc19wZW5rdGFkaWVuaXNfxaFlxaF0YWRpZW5pcycuc3BsaXQoJ18nKSxcbiAgICAgICAgICAgIGlzRm9ybWF0OiAvZGRkZCBISDptbS9cbiAgICAgICAgfSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdTZWtfUGlyX0FudF9UcmVfS2V0X1Blbl/FoGXFoScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnU19QX0FfVF9LX1BuX8WgJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ1lZWVktTU0tREQnLFxuICAgICAgICAgICAgTEwgOiAnWVlZWSBbbS5dIE1NTU0gRCBbZC5dJyxcbiAgICAgICAgICAgIExMTCA6ICdZWVlZIFttLl0gTU1NTSBEIFtkLl0sIEhIOm1tIFt2YWwuXScsXG4gICAgICAgICAgICBMTExMIDogJ1lZWVkgW20uXSBNTU1NIEQgW2QuXSwgZGRkZCwgSEg6bW0gW3ZhbC5dJyxcbiAgICAgICAgICAgIGwgOiAnWVlZWS1NTS1ERCcsXG4gICAgICAgICAgICBsbCA6ICdZWVlZIFttLl0gTU1NTSBEIFtkLl0nLFxuICAgICAgICAgICAgbGxsIDogJ1lZWVkgW20uXSBNTU1NIEQgW2QuXSwgSEg6bW0gW3ZhbC5dJyxcbiAgICAgICAgICAgIGxsbGwgOiAnWVlZWSBbbS5dIE1NTU0gRCBbZC5dLCBkZGQsIEhIOm1tIFt2YWwuXSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vFoGlhbmRpZW5dIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW1J5dG9qXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW1Zha2FyXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdbUHJhxJdqdXPEr10gZGRkZCBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAncG8gJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICdwcmllxaEgJXMnLFxuICAgICAgICAgICAgcyA6IHRyYW5zbGF0ZVNlY29uZHMsXG4gICAgICAgICAgICBzcyA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG0gOiB0cmFuc2xhdGVTaW5ndWxhcixcbiAgICAgICAgICAgIG1tIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaCA6IHRyYW5zbGF0ZVNpbmd1bGFyLFxuICAgICAgICAgICAgaGggOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBkIDogdHJhbnNsYXRlU2luZ3VsYXIsXG4gICAgICAgICAgICBkZCA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIE0gOiB0cmFuc2xhdGVTaW5ndWxhcixcbiAgICAgICAgICAgIE1NIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgeSA6IHRyYW5zbGF0ZVNpbmd1bGFyLFxuICAgICAgICAgICAgeXkgOiB0cmFuc2xhdGVcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LW9qaS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy1vamknO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBsdDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHVuaXRzID0ge1xuICAgICAgICAnc3MnOiAnc2VrdW5kZXNfc2VrdW5kxJNtX3Nla3VuZGVfc2VrdW5kZXMnLnNwbGl0KCdfJyksXG4gICAgICAgICdtJzogJ21pbsWrdGVzX21pbsWrdMSTbV9taW7Fq3RlX21pbsWrdGVzJy5zcGxpdCgnXycpLFxuICAgICAgICAnbW0nOiAnbWluxat0ZXNfbWluxat0xJNtX21pbsWrdGVfbWluxat0ZXMnLnNwbGl0KCdfJyksXG4gICAgICAgICdoJzogJ3N0dW5kYXNfc3R1bmTEgW1fc3R1bmRhX3N0dW5kYXMnLnNwbGl0KCdfJyksXG4gICAgICAgICdoaCc6ICdzdHVuZGFzX3N0dW5kxIFtX3N0dW5kYV9zdHVuZGFzJy5zcGxpdCgnXycpLFxuICAgICAgICAnZCc6ICdkaWVuYXNfZGllbsSBbV9kaWVuYV9kaWVuYXMnLnNwbGl0KCdfJyksXG4gICAgICAgICdkZCc6ICdkaWVuYXNfZGllbsSBbV9kaWVuYV9kaWVuYXMnLnNwbGl0KCdfJyksXG4gICAgICAgICdNJzogJ23Ek25lxaFhX23Ek25lxaFpZW1fbcSTbmVzaXNfbcSTbmXFoWknLnNwbGl0KCdfJyksXG4gICAgICAgICdNTSc6ICdtxJNuZcWhYV9txJNuZcWhaWVtX23Ek25lc2lzX23Ek25lxaFpJy5zcGxpdCgnXycpLFxuICAgICAgICAneSc6ICdnYWRhX2dhZGllbV9nYWRzX2dhZGknLnNwbGl0KCdfJyksXG4gICAgICAgICd5eSc6ICdnYWRhX2dhZGllbV9nYWRzX2dhZGknLnNwbGl0KCdfJylcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB3aXRob3V0U3VmZml4IGJvb2xlYW4gdHJ1ZSA9IGEgbGVuZ3RoIG9mIHRpbWU7IGZhbHNlID0gYmVmb3JlL2FmdGVyIGEgcGVyaW9kIG9mIHRpbWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9ybWF0KGZvcm1zLCBudW1iZXIsIHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgICAgIC8vIEUuZy4gXCIyMSBtaW7Fq3RlXCIsIFwiMyBtaW7Fq3Rlc1wiLlxuICAgICAgICAgICAgcmV0dXJuIG51bWJlciAlIDEwID09PSAxICYmIG51bWJlciAlIDEwMCAhPT0gMTEgPyBmb3Jtc1syXSA6IGZvcm1zWzNdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gRS5nLiBcIjIxIG1pbsWrdGVzXCIgYXMgaW4gXCJwxJNjIDIxIG1pbsWrdGVzXCIuXG4gICAgICAgICAgICAvLyBFLmcuIFwiMyBtaW7Fq3TEk21cIiBhcyBpbiBcInDEk2MgMyBtaW7Fq3TEk21cIi5cbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgJSAxMCA9PT0gMSAmJiBudW1iZXIgJSAxMDAgIT09IDExID8gZm9ybXNbMF0gOiBmb3Jtc1sxXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5KSB7XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAnICcgKyBmb3JtYXQodW5pdHNba2V5XSwgbnVtYmVyLCB3aXRob3V0U3VmZml4KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVsYXRpdmVUaW1lV2l0aFNpbmd1bGFyKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5KSB7XG4gICAgICAgIHJldHVybiBmb3JtYXQodW5pdHNba2V5XSwgbnVtYmVyLCB3aXRob3V0U3VmZml4KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVsYXRpdmVTZWNvbmRzKG51bWJlciwgd2l0aG91dFN1ZmZpeCkge1xuICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICdkYcW+YXMgc2VrdW5kZXMnIDogJ2Rhxb7EgW0gc2VrdW5kxJNtJztcbiAgICB9XG5cbiAgICB2YXIgbHYgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdsdicsIHtcbiAgICAgICAgbW9udGhzIDogJ2phbnbEgXJpc19mZWJydcSBcmlzX21hcnRzX2FwcsSrbGlzX21haWpzX2rFq25panNfasWrbGlqc19hdWd1c3RzX3NlcHRlbWJyaXNfb2t0b2JyaXNfbm92ZW1icmlzX2RlY2VtYnJpcycuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnamFuX2ZlYl9tYXJfYXByX21haV9qxatuX2rFq2xfYXVnX3NlcF9va3Rfbm92X2RlYycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnc3bEk3RkaWVuYV9waXJtZGllbmFfb3RyZGllbmFfdHJlxaFkaWVuYV9jZXR1cnRkaWVuYV9waWVrdGRpZW5hX3Nlc3RkaWVuYScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdTdl9QX09fVF9DX1BrX1MnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ1N2X1BfT19UX0NfUGtfUycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC5NTS5ZWVlZLicsXG4gICAgICAgICAgICBMTCA6ICdZWVlZLiBbZ2FkYV0gRC4gTU1NTScsXG4gICAgICAgICAgICBMTEwgOiAnWVlZWS4gW2dhZGFdIEQuIE1NTU0sIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnWVlZWS4gW2dhZGFdIEQuIE1NTU0sIGRkZGQsIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW8Wgb2RpZW4gcHVsa3N0ZW5dIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW1LEq3QgcHVsa3N0ZW5dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW3B1bGtzdGVuXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1tWYWthciBwdWxrc3Rlbl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW1BhZ8SBanXFocSBXSBkZGRkIFtwdWxrc3Rlbl0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ3DEk2MgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICdwaXJtcyAlcycsXG4gICAgICAgICAgICBzIDogcmVsYXRpdmVTZWNvbmRzLFxuICAgICAgICAgICAgc3MgOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgbSA6IHJlbGF0aXZlVGltZVdpdGhTaW5ndWxhcixcbiAgICAgICAgICAgIG1tIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIGggOiByZWxhdGl2ZVRpbWVXaXRoU2luZ3VsYXIsXG4gICAgICAgICAgICBoaCA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBkIDogcmVsYXRpdmVUaW1lV2l0aFNpbmd1bGFyLFxuICAgICAgICAgICAgZGQgOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgTSA6IHJlbGF0aXZlVGltZVdpdGhTaW5ndWxhcixcbiAgICAgICAgICAgIE1NIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIHkgOiByZWxhdGl2ZVRpbWVXaXRoU2luZ3VsYXIsXG4gICAgICAgICAgICB5eSA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWxcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbCA6ICclZC4nLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBsdjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHRyYW5zbGF0b3IgPSB7XG4gICAgICAgIHdvcmRzOiB7IC8vRGlmZmVyZW50IGdyYW1tYXRpY2FsIGNhc2VzXG4gICAgICAgICAgICBzczogWydzZWt1bmQnLCAnc2VrdW5kYScsICdzZWt1bmRpJ10sXG4gICAgICAgICAgICBtOiBbJ2plZGFuIG1pbnV0JywgJ2plZG5vZyBtaW51dGEnXSxcbiAgICAgICAgICAgIG1tOiBbJ21pbnV0JywgJ21pbnV0YScsICdtaW51dGEnXSxcbiAgICAgICAgICAgIGg6IFsnamVkYW4gc2F0JywgJ2plZG5vZyBzYXRhJ10sXG4gICAgICAgICAgICBoaDogWydzYXQnLCAnc2F0YScsICdzYXRpJ10sXG4gICAgICAgICAgICBkZDogWydkYW4nLCAnZGFuYScsICdkYW5hJ10sXG4gICAgICAgICAgICBNTTogWydtamVzZWMnLCAnbWplc2VjYScsICdtamVzZWNpJ10sXG4gICAgICAgICAgICB5eTogWydnb2RpbmEnLCAnZ29kaW5lJywgJ2dvZGluYSddXG4gICAgICAgIH0sXG4gICAgICAgIGNvcnJlY3RHcmFtbWF0aWNhbENhc2U6IGZ1bmN0aW9uIChudW1iZXIsIHdvcmRLZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgPT09IDEgPyB3b3JkS2V5WzBdIDogKG51bWJlciA+PSAyICYmIG51bWJlciA8PSA0ID8gd29yZEtleVsxXSA6IHdvcmRLZXlbMl0pO1xuICAgICAgICB9LFxuICAgICAgICB0cmFuc2xhdGU6IGZ1bmN0aW9uIChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSkge1xuICAgICAgICAgICAgdmFyIHdvcmRLZXkgPSB0cmFuc2xhdG9yLndvcmRzW2tleV07XG4gICAgICAgICAgICBpZiAoa2V5Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gd29yZEtleVswXSA6IHdvcmRLZXlbMV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnICcgKyB0cmFuc2xhdG9yLmNvcnJlY3RHcmFtbWF0aWNhbENhc2UobnVtYmVyLCB3b3JkS2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgbWUgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdtZScsIHtcbiAgICAgICAgbW9udGhzOiAnamFudWFyX2ZlYnJ1YXJfbWFydF9hcHJpbF9tYWpfanVuX2p1bF9hdmd1c3Rfc2VwdGVtYmFyX29rdG9iYXJfbm92ZW1iYXJfZGVjZW1iYXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnamFuLl9mZWIuX21hci5fYXByLl9tYWpfanVuX2p1bF9hdmcuX3NlcC5fb2t0Ll9ub3YuX2RlYy4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czogJ25lZGplbGphX3BvbmVkamVsamFrX3V0b3Jha19zcmlqZWRhX8SNZXR2cnRha19wZXRha19zdWJvdGEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6ICduZWQuX3Bvbi5fdXRvLl9zcmkuX8SNZXQuX3BldC5fc3ViLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW46ICduZV9wb191dF9zcl/EjWVfcGVfc3UnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0OiB7XG4gICAgICAgICAgICBMVDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEw6ICdELiBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMOiAnRC4gTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQuIE1NTU0gWVlZWSBIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tkYW5hcyB1XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW3NqdXRyYSB1XSBMVCcsXG5cbiAgICAgICAgICAgIG5leHRXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIFtuZWRqZWxqdV0gW3VdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdV0gW3NyaWplZHVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIFtzdWJvdHVdIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIGRkZGQgW3VdIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdERheSAgOiAnW2p1xI1lIHVdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBsYXN0V2Vla0RheXMgPSBbXG4gICAgICAgICAgICAgICAgICAgICdbcHJvxaFsZV0gW25lZGplbGplXSBbdV0gTFQnLFxuICAgICAgICAgICAgICAgICAgICAnW3Byb8WhbG9nXSBbcG9uZWRqZWxqa2FdIFt1XSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdbcHJvxaFsb2ddIFt1dG9ya2FdIFt1XSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdbcHJvxaFsZV0gW3NyaWplZGVdIFt1XSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdbcHJvxaFsb2ddIFvEjWV0dnJ0a2FdIFt1XSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdbcHJvxaFsb2ddIFtwZXRrYV0gW3VdIExUJyxcbiAgICAgICAgICAgICAgICAgICAgJ1twcm/FoWxlXSBbc3Vib3RlXSBbdV0gTFQnXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbGFzdFdlZWtEYXlzW3RoaXMuZGF5KCldO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICd6YSAlcycsXG4gICAgICAgICAgICBwYXN0ICAgOiAncHJpamUgJXMnLFxuICAgICAgICAgICAgcyAgICAgIDogJ25la29saWtvIHNla3VuZGknLFxuICAgICAgICAgICAgc3MgICAgIDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBtICAgICAgOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG1tICAgICA6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgaCAgICAgIDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBoaCAgICAgOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGQgICAgICA6ICdkYW4nLFxuICAgICAgICAgICAgZGQgICAgIDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBNICAgICAgOiAnbWplc2VjJyxcbiAgICAgICAgICAgIE1NICAgICA6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgeSAgICAgIDogJ2dvZGludScsXG4gICAgICAgICAgICB5eSAgICAgOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG1lO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgbWkgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdtaScsIHtcbiAgICAgICAgbW9udGhzOiAnS29oaS10xIF0ZV9IdWktdGFuZ3VydV9Qb3V0xastdGUtcmFuZ2lfUGFlbmdhLXdoxIF3aMSBX0hhcmF0dWFfUGlwaXJpX0jFjW5nb2luZ29pX0hlcmUtdHVyaS1rxY1rxIFfTWFodXJ1X1doaXJpbmdhLcSBLW51a3VfV2hpcmluZ2EtxIEtcmFuZ2lfSGFraWhlYScuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICdLb2hpX0h1aV9Qb3VfUGFlX0hhcmFfUGlwaV9IxY1uZ29pX0hlcmVfTWFodV9XaGktbnVfV2hpLXJhX0hha2knLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1JlZ2V4OiAvKD86WydhLXpcXHUwMTAxXFx1MDE0RFxcdTAxNkJdK1xcLT8pezEsM30vaSxcbiAgICAgICAgbW9udGhzU3RyaWN0UmVnZXg6IC8oPzpbJ2EtelxcdTAxMDFcXHUwMTREXFx1MDE2Ql0rXFwtPyl7MSwzfS9pLFxuICAgICAgICBtb250aHNTaG9ydFJlZ2V4OiAvKD86WydhLXpcXHUwMTAxXFx1MDE0RFxcdTAxNkJdK1xcLT8pezEsM30vaSxcbiAgICAgICAgbW9udGhzU2hvcnRTdHJpY3RSZWdleDogLyg/OlsnYS16XFx1MDEwMVxcdTAxNERcXHUwMTZCXStcXC0/KXsxLDJ9L2ksXG4gICAgICAgIHdlZWtkYXlzOiAnUsSBdGFwdV9NYW5lX1TFq3JlaV9XZW5lcmVpX1TEgWl0ZV9QYXJhaXJlX0jEgXRhcmVpJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnVGFfTWFfVMWrX1dlX1TEgWlfUGFfSMSBJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ1RhX01hX1TFq19XZV9UxIFpX1BhX0jEgScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEw6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdEIE1NTU0gWVlZWSBbaV0gSEg6bW0nLFxuICAgICAgICAgICAgTExMTDogJ2RkZGQsIEQgTU1NTSBZWVlZIFtpXSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbaSB0ZWllIG1haGFuYSwgaV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1thcG9wbyBpXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2ldIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbaW5hbmFoaSBpXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW3doYWthbXV0dW5nYSBpXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZToge1xuICAgICAgICAgICAgZnV0dXJlOiAnaSByb3RvIGkgJXMnLFxuICAgICAgICAgICAgcGFzdDogJyVzIGkgbXVhJyxcbiAgICAgICAgICAgIHM6ICd0ZSBoxJNrb25hIHJ1YXJ1YScsXG4gICAgICAgICAgICBzczogJyVkIGjEk2tvbmEnLFxuICAgICAgICAgICAgbTogJ2hlIG1lbmV0aScsXG4gICAgICAgICAgICBtbTogJyVkIG1lbmV0aScsXG4gICAgICAgICAgICBoOiAndGUgaGFvcmEnLFxuICAgICAgICAgICAgaGg6ICclZCBoYW9yYScsXG4gICAgICAgICAgICBkOiAnaGUgcmEnLFxuICAgICAgICAgICAgZGQ6ICclZCByYScsXG4gICAgICAgICAgICBNOiAnaGUgbWFyYW1hJyxcbiAgICAgICAgICAgIE1NOiAnJWQgbWFyYW1hJyxcbiAgICAgICAgICAgIHk6ICdoZSB0YXUnLFxuICAgICAgICAgICAgeXk6ICclZCB0YXUnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfcK6LyxcbiAgICAgICAgb3JkaW5hbDogJyVkwronLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBtaTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIG1rID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbWsnLCB7XG4gICAgICAgIG1vbnRocyA6ICfRmNCw0L3Rg9Cw0YDQuF/RhNC10LLRgNGD0LDRgNC4X9C80LDRgNGCX9Cw0L/RgNC40Ltf0LzQsNGYX9GY0YPQvdC4X9GY0YPQu9C4X9Cw0LLQs9GD0YHRgl/RgdC10L/RgtC10LzQstGA0Lhf0L7QutGC0L7QvNCy0YDQuF/QvdC+0LXQvNCy0YDQuF/QtNC10LrQtdC80LLRgNC4Jy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICfRmNCw0L1f0YTQtdCyX9C80LDRgF/QsNC/0YBf0LzQsNGYX9GY0YPQvV/RmNGD0Ltf0LDQstCzX9GB0LXQv1/QvtC60YJf0L3QvtC1X9C00LXQuicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAn0L3QtdC00LXQu9CwX9C/0L7QvdC10LTQtdC70L3QuNC6X9Cy0YLQvtGA0L3QuNC6X9GB0YDQtdC00LBf0YfQtdGC0LLRgNGC0L7Qul/Qv9C10YLQvtC6X9GB0LDQsdC+0YLQsCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfQvdC10LRf0L/QvtC9X9Cy0YLQvl/RgdGA0LVf0YfQtdGCX9C/0LXRgl/RgdCw0LEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ9C9ZV/Qv29f0LLRgl/RgdGAX9GH0LVf0L/QtV/RgWEnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0QuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdb0JTQtdC90LXRgSDQstC+XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1vQo9GC0YDQtSDQstC+XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdb0JLQvl0gZGRkZCBb0LLQvl0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdb0JLRh9C10YDQsCDQstC+XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CY0LfQvNC40L3QsNGC0LDRgtCwXSBkZGRkIFvQstC+XSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CY0LfQvNC40L3QsNGC0LjQvtGCXSBkZGRkIFvQstC+XSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICfQv9C+0YHQu9C1ICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAn0L/RgNC10LQgJXMnLFxuICAgICAgICAgICAgcyA6ICfQvdC10LrQvtC70LrRgyDRgdC10LrRg9C90LTQuCcsXG4gICAgICAgICAgICBzcyA6ICclZCDRgdC10LrRg9C90LTQuCcsXG4gICAgICAgICAgICBtIDogJ9C80LjQvdGD0YLQsCcsXG4gICAgICAgICAgICBtbSA6ICclZCDQvNC40L3Rg9GC0LgnLFxuICAgICAgICAgICAgaCA6ICfRh9Cw0YEnLFxuICAgICAgICAgICAgaGggOiAnJWQg0YfQsNGB0LAnLFxuICAgICAgICAgICAgZCA6ICfQtNC10L0nLFxuICAgICAgICAgICAgZGQgOiAnJWQg0LTQtdC90LAnLFxuICAgICAgICAgICAgTSA6ICfQvNC10YHQtdGGJyxcbiAgICAgICAgICAgIE1NIDogJyVkINC80LXRgdC10YbQuCcsXG4gICAgICAgICAgICB5IDogJ9Cz0L7QtNC40L3QsCcsXG4gICAgICAgICAgICB5eSA6ICclZCDQs9C+0LTQuNC90LgnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS0o0LXQsnzQtdC9fNGC0Lh80LLQuHzRgNC4fNC80LgpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBsYXN0RGlnaXQgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICBsYXN0MkRpZ2l0cyA9IG51bWJlciAlIDEwMDtcbiAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3QtdCyJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGFzdDJEaWdpdHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3QtdC9JztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGFzdDJEaWdpdHMgPiAxMCAmJiBsYXN0MkRpZ2l0cyA8IDIwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0YLQuCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxhc3REaWdpdCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdCy0LgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsYXN0RGlnaXQgPT09IDIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3RgNC4JztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobGFzdERpZ2l0ID09PSA3IHx8IGxhc3REaWdpdCA9PT0gOCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdC80LgnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3RgtC4JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbWs7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBtbCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ21sJywge1xuICAgICAgICBtb250aHMgOiAn4LSc4LSo4LWB4LS14LSw4LS/X+C0q+C1huC0rOC1jeC0sOC1geC0teC0sOC0v1/gtK7gtL7gtbzgtJrgtY3gtJrgtY1f4LSP4LSq4LWN4LSw4LS/4LW9X+C0ruC1h+C0r+C1jV/gtJzgtYLgtbpf4LSc4LWC4LSy4LWIX+C0k+C0l+C0uOC1jeC0seC1jeC0seC1jV/gtLjgtYbgtKrgtY3gtLHgtY3gtLHgtILgtKzgtbxf4LSS4LSV4LWN4LSf4LWL4LSs4LW8X+C0qOC0teC0guC0rOC1vF/gtKHgtL/gtLjgtILgtKzgtbwnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ+C0nOC0qOC1gS5f4LSr4LWG4LSs4LWN4LSw4LWBLl/gtK7gtL7gtbwuX+C0j+C0quC1jeC0sOC0vy5f4LSu4LWH4LSv4LWNX+C0nOC1guC1ul/gtJzgtYLgtLLgtYguX+C0k+C0ly5f4LS44LWG4LSq4LWN4LSx4LWN4LSxLl/gtJLgtJXgtY3gtJ/gtYsuX+C0qOC0teC0gi5f4LSh4LS/4LS44LSCLicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzIDogJ+C0nuC0vuC0r+C0seC0vuC0tOC1jeC0ml/gtKTgtL/gtJngtY3gtJXgtLPgtL7gtLTgtY3gtJpf4LSa4LWK4LS14LWN4LS14LS+4LS04LWN4LSaX+C0rOC1geC0p+C0qOC0vuC0tOC1jeC0ml/gtLXgtY3gtK/gtL7gtLTgtL7gtLTgtY3gtJpf4LS14LWG4LSz4LWN4LSz4LS/4LSv4LS+4LS04LWN4LSaX+C0tuC0qOC0v+C0r+C0vuC0tOC1jeC0micuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfgtJ7gtL7gtK/gtbxf4LSk4LS/4LSZ4LWN4LSV4LW+X+C0muC1iuC0teC1jeC0tV/gtKzgtYHgtKfgtbtf4LS14LWN4LSv4LS+4LS04LSCX+C0teC1huC0s+C1jeC0s+C0v1/gtLbgtKjgtL8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ+C0nuC0vl/gtKTgtL9f4LSa4LWKX+C0rOC1gV/gtLXgtY3gtK/gtL5f4LS14LWGX+C0ticuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdBIGg6bW0gLeC0qOC1gScsXG4gICAgICAgICAgICBMVFMgOiAnQSBoOm1tOnNzIC3gtKjgtYEnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSwgQSBoOm1tIC3gtKjgtYEnLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSwgQSBoOm1tIC3gtKjgtYEnXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdb4LSH4LSo4LWN4LSo4LWNXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1vgtKjgtL7gtLPgtYZdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQsIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW+C0h+C0qOC1jeC0qOC0suC1hl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW+C0leC0tOC0v+C0nuC1jeC0nl0gZGRkZCwgTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJyVzIOC0leC0tOC0v+C0nuC1jeC0nuC1jScsXG4gICAgICAgICAgICBwYXN0IDogJyVzIOC0ruC1geC1u+C0quC1jScsXG4gICAgICAgICAgICBzIDogJ+C0heC1veC0qiDgtKjgtL/gtK7gtL/gtLfgtJngtY3gtJngtb4nLFxuICAgICAgICAgICAgc3MgOiAnJWQg4LS44LWG4LSV4LWN4LSV4LW74LSh4LWNJyxcbiAgICAgICAgICAgIG0gOiAn4LSS4LSw4LWBIOC0ruC0v+C0qOC0v+C0seC1jeC0seC1jScsXG4gICAgICAgICAgICBtbSA6ICclZCDgtK7gtL/gtKjgtL/gtLHgtY3gtLHgtY0nLFxuICAgICAgICAgICAgaCA6ICfgtJLgtLDgtYEg4LSu4LSj4LS/4LSV4LWN4LSV4LWC4LW8JyxcbiAgICAgICAgICAgIGhoIDogJyVkIOC0ruC0o+C0v+C0leC1jeC0leC1guC1vCcsXG4gICAgICAgICAgICBkIDogJ+C0kuC0sOC1gSDgtKbgtL/gtLXgtLjgtIInLFxuICAgICAgICAgICAgZGQgOiAnJWQg4LSm4LS/4LS14LS44LSCJyxcbiAgICAgICAgICAgIE0gOiAn4LSS4LSw4LWBIOC0ruC0vuC0uOC0gicsXG4gICAgICAgICAgICBNTSA6ICclZCDgtK7gtL7gtLjgtIInLFxuICAgICAgICAgICAgeSA6ICfgtJLgtLDgtYEg4LS14LW84LS34LSCJyxcbiAgICAgICAgICAgIHl5IDogJyVkIOC0teC1vOC0t+C0gidcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+C0sOC0vuC0pOC1jeC0sOC0v3zgtLDgtL7gtLXgtL/gtLLgtYZ84LSJ4LSa4LWN4LSaIOC0leC0tOC0v+C0nuC1jeC0nuC1jXzgtLXgtYjgtJXgtYHgtKjgtY3gtKjgtYfgtLDgtIJ84LSw4LS+4LSk4LWN4LSw4LS/L2ksXG4gICAgICAgIG1lcmlkaWVtSG91ciA6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoKG1lcmlkaWVtID09PSAn4LSw4LS+4LSk4LWN4LSw4LS/JyAmJiBob3VyID49IDQpIHx8XG4gICAgICAgICAgICAgICAgICAgIG1lcmlkaWVtID09PSAn4LSJ4LSa4LWN4LSaIOC0leC0tOC0v+C0nuC1jeC0nuC1jScgfHxcbiAgICAgICAgICAgICAgICAgICAgbWVyaWRpZW0gPT09ICfgtLXgtYjgtJXgtYHgtKjgtY3gtKjgtYfgtLDgtIInKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgtLDgtL7gtKTgtY3gtLDgtL8nO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+C0sOC0vuC0teC0v+C0suC1hic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4LSJ4LSa4LWN4LSaIOC0leC0tOC0v+C0nuC1jeC0nuC1jSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAyMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4LS14LWI4LSV4LWB4LSo4LWN4LSo4LWH4LSw4LSCJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgtLDgtL7gtKTgtY3gtLDgtL8nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbWw7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgICAgIGNhc2UgJ3MnOlxuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ9GF0Y3QtNGF0Y3QvSDRgdC10LrRg9C90LQnIDogJ9GF0Y3QtNGF0Y3QvSDRgdC10LrRg9C90LTRi9C9JztcbiAgICAgICAgICAgIGNhc2UgJ3NzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKHdpdGhvdXRTdWZmaXggPyAnINGB0LXQutGD0L3QtCcgOiAnINGB0LXQutGD0L3QtNGL0L0nKTtcbiAgICAgICAgICAgIGNhc2UgJ20nOlxuICAgICAgICAgICAgY2FzZSAnbW0nOlxuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAod2l0aG91dFN1ZmZpeCA/ICcg0LzQuNC90YPRgicgOiAnINC80LjQvdGD0YLRi9C9Jyk7XG4gICAgICAgICAgICBjYXNlICdoJzpcbiAgICAgICAgICAgIGNhc2UgJ2hoJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKHdpdGhvdXRTdWZmaXggPyAnINGG0LDQsycgOiAnINGG0LDQs9C40LnQvScpO1xuICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICBjYXNlICdkZCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICh3aXRob3V0U3VmZml4ID8gJyDTqdC006nRgCcgOiAnINOp0LTRgNC40LnQvScpO1xuICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICBjYXNlICdNTSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICh3aXRob3V0U3VmZml4ID8gJyDRgdCw0YAnIDogJyDRgdCw0YDRi9C9Jyk7XG4gICAgICAgICAgICBjYXNlICd5JzpcbiAgICAgICAgICAgIGNhc2UgJ3l5JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKHdpdGhvdXRTdWZmaXggPyAnINC20LjQuycgOiAnINC20LjQu9C40LnQvScpO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIG1uID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbW4nLCB7XG4gICAgICAgIG1vbnRocyA6ICfQndGN0LPQtNKv0LPRjdGN0YAg0YHQsNGAX9Cl0L7RkdGA0LTRg9Cz0LDQsNGAINGB0LDRgF/Qk9GD0YDQsNCy0LTRg9Cz0LDQsNGAINGB0LDRgF/QlNOp0YDTqdCy0LTSr9Cz0Y3RjdGAINGB0LDRgF/QotCw0LLQtNGD0LPQsNCw0YAg0YHQsNGAX9CX0YPRgNCz0LDQtNGD0LPQsNCw0YAg0YHQsNGAX9CU0L7Qu9C00YPQs9Cw0LDRgCDRgdCw0YBf0J3QsNC50LzQtNGD0LPQsNCw0YAg0YHQsNGAX9CV0YHQtNKv0LPRjdGN0YAg0YHQsNGAX9CQ0YDQsNCy0LTRg9Cz0LDQsNGAINGB0LDRgF/QkNGA0LLQsNC9INC90Y3Qs9C00q/Qs9GN0Y3RgCDRgdCw0YBf0JDRgNCy0LDQvSDRhdC+0ZHRgNC00YPQs9Cw0LDRgCDRgdCw0YAnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJzEg0YHQsNGAXzIg0YHQsNGAXzMg0YHQsNGAXzQg0YHQsNGAXzUg0YHQsNGAXzYg0YHQsNGAXzcg0YHQsNGAXzgg0YHQsNGAXzkg0YHQsNGAXzEwINGB0LDRgF8xMSDRgdCw0YBfMTIg0YHQsNGAJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXMgOiAn0J3Rj9C8X9CU0LDQstCw0LBf0JzRj9Cz0LzQsNGAX9Cb0YXQsNCz0LLQsF/Qn9Kv0YDRjdCyX9CR0LDQsNGB0LDQvV/QkdGP0LzQsdCwJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ9Cd0Y/QvF/QlNCw0LJf0JzRj9CzX9Cb0YXQsF/Qn9Kv0YBf0JHQsNCwX9CR0Y/QvCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn0J3Rj1/QlNCwX9Cc0Y9f0JvRhV/Qn9KvX9CR0LBf0JHRjycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdZWVlZLU1NLUREJyxcbiAgICAgICAgICAgIExMIDogJ1lZWVkg0L7QvdGLIE1NTU3Ri9C9IEQnLFxuICAgICAgICAgICAgTExMIDogJ1lZWVkg0L7QvdGLIE1NTU3Ri9C9IEQgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBZWVlZINC+0L3RiyBNTU1N0YvQvSBEIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv0q7TqHzSrtClL2ksXG4gICAgICAgIGlzUE0gOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCA9PT0gJ9Ku0KUnO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9Ku06gnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9Ku0KUnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW9Oo0L3TqdOp0LTTqdGAXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1vQnNCw0YDQs9Cw0LDRiF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnW9CY0YDRjdGFXSBkZGRkIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW9Oo0YfQuNCz0LTTqdGAXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdb06jQvdCz06nRgNGB06nQvV0gZGRkZCBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnJXMg0LTQsNGA0LDQsCcsXG4gICAgICAgICAgICBwYXN0IDogJyVzINOp0LzQvdOpJyxcbiAgICAgICAgICAgIHMgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBzcyA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG0gOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBtbSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGggOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBoaCA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGQgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBkZCA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIE0gOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBNTSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHkgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICB5eSA6IHRyYW5zbGF0ZVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0g06nQtNOp0YAvLFxuICAgICAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0RERCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnINOp0LTTqdGAJztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbW47XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBzeW1ib2xNYXAgPSB7XG4gICAgICAgICcxJzogJ+ClpycsXG4gICAgICAgICcyJzogJ+ClqCcsXG4gICAgICAgICczJzogJ+ClqScsXG4gICAgICAgICc0JzogJ+ClqicsXG4gICAgICAgICc1JzogJ+ClqycsXG4gICAgICAgICc2JzogJ+ClrCcsXG4gICAgICAgICc3JzogJ+ClrScsXG4gICAgICAgICc4JzogJ+ClricsXG4gICAgICAgICc5JzogJ+ClrycsXG4gICAgICAgICcwJzogJ+ClpidcbiAgICB9LFxuICAgIG51bWJlck1hcCA9IHtcbiAgICAgICAgJ+Clpyc6ICcxJyxcbiAgICAgICAgJ+ClqCc6ICcyJyxcbiAgICAgICAgJ+ClqSc6ICczJyxcbiAgICAgICAgJ+Clqic6ICc0JyxcbiAgICAgICAgJ+Clqyc6ICc1JyxcbiAgICAgICAgJ+ClrCc6ICc2JyxcbiAgICAgICAgJ+ClrSc6ICc3JyxcbiAgICAgICAgJ+Clric6ICc4JyxcbiAgICAgICAgJ+Clryc6ICc5JyxcbiAgICAgICAgJ+Clpic6ICcwJ1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiByZWxhdGl2ZVRpbWVNcihudW1iZXIsIHdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpXG4gICAge1xuICAgICAgICB2YXIgb3V0cHV0ID0gJyc7XG4gICAgICAgIGlmICh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHN0cmluZykge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3MnOiBvdXRwdXQgPSAn4KSV4KS+4KS54KWAIOCkuOClh+CkleCkguCkpic7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3NzJzogb3V0cHV0ID0gJyVkIOCkuOClh+CkleCkguCkpic7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ20nOiBvdXRwdXQgPSAn4KSP4KSVIOCkruCkv+CkqOCkv+Cknyc7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ21tJzogb3V0cHV0ID0gJyVkIOCkruCkv+CkqOCkv+Ckn+Clhyc7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2gnOiBvdXRwdXQgPSAn4KSP4KSVIOCkpOCkvuCkuCc7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2hoJzogb3V0cHV0ID0gJyVkIOCkpOCkvuCkuCc7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2QnOiBvdXRwdXQgPSAn4KSP4KSVIOCkpuCkv+CkteCkuCc7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2RkJzogb3V0cHV0ID0gJyVkIOCkpuCkv+CkteCkuCc7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ00nOiBvdXRwdXQgPSAn4KSP4KSVIOCkruCkueCkv+CkqOCkvic7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ01NJzogb3V0cHV0ID0gJyVkIOCkruCkueCkv+CkqOClhyc7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3knOiBvdXRwdXQgPSAn4KSP4KSVIOCkteCksOCljeCktyc7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3l5Jzogb3V0cHV0ID0gJyVkIOCkteCksOCljeCkt+Clhyc7IGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgc3dpdGNoIChzdHJpbmcpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdzJzogb3V0cHV0ID0gJ+CkleCkvuCkueClgCDgpLjgpYfgpJXgpILgpKbgpL7gpIInOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdzcyc6IG91dHB1dCA9ICclZCDgpLjgpYfgpJXgpILgpKbgpL7gpIInOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdtJzogb3V0cHV0ID0gJ+Ckj+CkleCkviDgpK7gpL/gpKjgpL/gpJ/gpL4nOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdtbSc6IG91dHB1dCA9ICclZCDgpK7gpL/gpKjgpL/gpJ/gpL7gpIInOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdoJzogb3V0cHV0ID0gJ+Ckj+CkleCkviDgpKTgpL7gpLjgpL4nOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdoaCc6IG91dHB1dCA9ICclZCDgpKTgpL7gpLjgpL7gpIInOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdkJzogb3V0cHV0ID0gJ+Ckj+CkleCkviDgpKbgpL/gpLXgpLjgpL4nOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdkZCc6IG91dHB1dCA9ICclZCDgpKbgpL/gpLXgpLjgpL7gpIInOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdNJzogb3V0cHV0ID0gJ+Ckj+CkleCkviDgpK7gpLngpL/gpKjgpY3gpK/gpL4nOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdNTSc6IG91dHB1dCA9ICclZCDgpK7gpLngpL/gpKjgpY3gpK/gpL7gpIInOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICd5Jzogb3V0cHV0ID0gJ+Ckj+CkleCkviDgpLXgpLDgpY3gpLfgpL4nOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICd5eSc6IG91dHB1dCA9ICclZCDgpLXgpLDgpY3gpLfgpL7gpIInOyBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0cHV0LnJlcGxhY2UoLyVkL2ksIG51bWJlcik7XG4gICAgfVxuXG4gICAgdmFyIG1yID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbXInLCB7XG4gICAgICAgIG1vbnRocyA6ICfgpJzgpL7gpKjgpYfgpLXgpL7gpLDgpYBf4KSr4KWH4KSs4KWN4KSw4KWB4KS14KS+4KSw4KWAX+CkruCkvuCksOCljeCkml/gpI/gpKrgpY3gpLDgpL/gpLJf4KSu4KWHX+CknOClguCkqF/gpJzgpYHgpLLgpYhf4KSR4KSX4KS44KWN4KSfX+CkuOCkquCljeCkn+Clh+CkguCkrOCksF/gpJHgpJXgpY3gpJ/gpYvgpKzgpLBf4KSo4KWL4KS14KWN4KS54KWH4KSC4KSs4KSwX+CkoeCkv+CkuOClh+CkguCkrOCksCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQ6ICfgpJzgpL7gpKjgpYcuX+Ckq+Clh+CkrOCljeCksOClgS5f4KSu4KS+4KSw4KWN4KSaLl/gpI/gpKrgpY3gpLDgpL8uX+CkruClhy5f4KSc4KWC4KSoLl/gpJzgpYHgpLLgpYguX+CkkeCkly5f4KS44KSq4KWN4KSf4KWH4KSCLl/gpJHgpJXgpY3gpJ/gpYsuX+CkqOCli+CkteCljeCkueClh+Ckgi5f4KSh4KS/4KS44KWH4KSCLicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzIDogJ+CksOCkteCkv+CkteCkvuCksF/gpLjgpYvgpK7gpLXgpL7gpLBf4KSu4KSC4KSX4KSz4KS14KS+4KSwX+CkrOClgeCkp+CkteCkvuCksF/gpJfgpYHgpLDgpYLgpLXgpL7gpLBf4KS24KWB4KSV4KWN4KSw4KS14KS+4KSwX+CktuCkqOCkv+CkteCkvuCksCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfgpLDgpLXgpL9f4KS44KWL4KSuX+CkruCkguCkl+Cks1/gpKzgpYHgpKdf4KSX4KWB4KSw4KWCX+CktuClgeCkleCljeCksF/gpLbgpKjgpL8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ+CksF/gpLjgpYtf4KSu4KSCX+CkrOClgV/gpJfgpYFf4KS24KWBX+Ckticuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdBIGg6bW0g4KS14KS+4KSc4KSk4KS+JyxcbiAgICAgICAgICAgIExUUyA6ICdBIGg6bW06c3Mg4KS14KS+4KSc4KSk4KS+JyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVksIEEgaDptbSDgpLXgpL7gpJzgpKTgpL4nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSwgQSBoOm1tIOCkteCkvuCknOCkpOCkvidcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vgpIbgpJxdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW+CkieCkpuCljeCkr+Ckvl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCwgTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdb4KSV4KS+4KSyXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1vgpK7gpL7gpJfgpYDgpLJdIGRkZGQsIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZTogJyVz4KSu4KSn4KWN4KSv4KWHJyxcbiAgICAgICAgICAgIHBhc3Q6ICclc+CkquClguCksOCljeCkteClgCcsXG4gICAgICAgICAgICBzOiByZWxhdGl2ZVRpbWVNcixcbiAgICAgICAgICAgIHNzOiByZWxhdGl2ZVRpbWVNcixcbiAgICAgICAgICAgIG06IHJlbGF0aXZlVGltZU1yLFxuICAgICAgICAgICAgbW06IHJlbGF0aXZlVGltZU1yLFxuICAgICAgICAgICAgaDogcmVsYXRpdmVUaW1lTXIsXG4gICAgICAgICAgICBoaDogcmVsYXRpdmVUaW1lTXIsXG4gICAgICAgICAgICBkOiByZWxhdGl2ZVRpbWVNcixcbiAgICAgICAgICAgIGRkOiByZWxhdGl2ZVRpbWVNcixcbiAgICAgICAgICAgIE06IHJlbGF0aXZlVGltZU1yLFxuICAgICAgICAgICAgTU06IHJlbGF0aXZlVGltZU1yLFxuICAgICAgICAgICAgeTogcmVsYXRpdmVUaW1lTXIsXG4gICAgICAgICAgICB5eTogcmVsYXRpdmVUaW1lTXJcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvW+Clp+ClqOClqeClquClq+ClrOClreClruClr+Clpl0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+CksOCkvuCkpOCljeCksOClgHzgpLjgpJXgpL7gpLPgpYB84KSm4KWB4KSq4KS+4KSw4KWAfOCkuOCkvuCkr+CkguCkleCkvuCks+ClgC8sXG4gICAgICAgIG1lcmlkaWVtSG91ciA6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICfgpLDgpL7gpKTgpY3gpLDgpYAnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPCA0ID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgpLjgpJXgpL7gpLPgpYAnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4KSm4KWB4KSq4KS+4KSw4KWAJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDEwID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgpLjgpL7gpK/gpILgpJXgpL7gpLPgpYAnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW06IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4KSw4KS+4KSk4KWN4KSw4KWAJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDEwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpLjgpJXgpL7gpLPgpYAnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CkpuClgeCkquCkvuCksOClgCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAyMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4KS44KS+4KSv4KSC4KSV4KS+4KSz4KWAJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpLDgpL7gpKTgpY3gpLDgpYAnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA2ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA2dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBtcjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIG1zID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbXMnLCB7XG4gICAgICAgIG1vbnRocyA6ICdKYW51YXJpX0ZlYnJ1YXJpX01hY19BcHJpbF9NZWlfSnVuX0p1bGFpX09nb3NfU2VwdGVtYmVyX09rdG9iZXJfTm92ZW1iZXJfRGlzZW1iZXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ0phbl9GZWJfTWFjX0Fwcl9NZWlfSnVuX0p1bF9PZ3NfU2VwX09rdF9Ob3ZfRGlzJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdBaGFkX0lzbmluX1NlbGFzYV9SYWJ1X0toYW1pc19KdW1hYXRfU2FidHUnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnQWhkX0lzbl9TZWxfUmFiX0toYV9KdW1fU2FiJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdBaF9Jc19TbF9SYl9LbV9KbV9TYicuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISC5tbScsXG4gICAgICAgICAgICBMVFMgOiAnSEgubW0uc3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBbcHVrdWxdIEhILm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgW3B1a3VsXSBISC5tbSdcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL3BhZ2l8dGVuZ2FoYXJpfHBldGFuZ3xtYWxhbS8sXG4gICAgICAgIG1lcmlkaWVtSG91cjogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ3BhZ2knKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAndGVuZ2FoYXJpJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDExID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICdwZXRhbmcnIHx8IG1lcmlkaWVtID09PSAnbWFsYW0nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VycyA8IDExKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdwYWdpJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91cnMgPCAxNSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAndGVuZ2FoYXJpJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91cnMgPCAxOSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAncGV0YW5nJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdtYWxhbSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbSGFyaSBpbmkgcHVrdWxdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW0Vzb2sgcHVrdWxdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW3B1a3VsXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1tLZWxtYXJpbiBwdWt1bF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnZGRkZCBbbGVwYXMgcHVrdWxdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICdkYWxhbSAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIHlhbmcgbGVwYXMnLFxuICAgICAgICAgICAgcyA6ICdiZWJlcmFwYSBzYWF0JyxcbiAgICAgICAgICAgIHNzIDogJyVkIHNhYXQnLFxuICAgICAgICAgICAgbSA6ICdzZW1pbml0JyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbml0JyxcbiAgICAgICAgICAgIGggOiAnc2VqYW0nLFxuICAgICAgICAgICAgaGggOiAnJWQgamFtJyxcbiAgICAgICAgICAgIGQgOiAnc2VoYXJpJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGhhcmknLFxuICAgICAgICAgICAgTSA6ICdzZWJ1bGFuJyxcbiAgICAgICAgICAgIE1NIDogJyVkIGJ1bGFuJyxcbiAgICAgICAgICAgIHkgOiAnc2V0YWh1bicsXG4gICAgICAgICAgICB5eSA6ICclZCB0YWh1bidcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbXM7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBtc015ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbXMtbXknLCB7XG4gICAgICAgIG1vbnRocyA6ICdKYW51YXJpX0ZlYnJ1YXJpX01hY19BcHJpbF9NZWlfSnVuX0p1bGFpX09nb3NfU2VwdGVtYmVyX09rdG9iZXJfTm92ZW1iZXJfRGlzZW1iZXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ0phbl9GZWJfTWFjX0Fwcl9NZWlfSnVuX0p1bF9PZ3NfU2VwX09rdF9Ob3ZfRGlzJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdBaGFkX0lzbmluX1NlbGFzYV9SYWJ1X0toYW1pc19KdW1hYXRfU2FidHUnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnQWhkX0lzbl9TZWxfUmFiX0toYV9KdW1fU2FiJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdBaF9Jc19TbF9SYl9LbV9KbV9TYicuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISC5tbScsXG4gICAgICAgICAgICBMVFMgOiAnSEgubW0uc3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBbcHVrdWxdIEhILm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgW3B1a3VsXSBISC5tbSdcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL3BhZ2l8dGVuZ2FoYXJpfHBldGFuZ3xtYWxhbS8sXG4gICAgICAgIG1lcmlkaWVtSG91cjogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ3BhZ2knKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAndGVuZ2FoYXJpJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDExID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICdwZXRhbmcnIHx8IG1lcmlkaWVtID09PSAnbWFsYW0nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VycyA8IDExKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdwYWdpJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91cnMgPCAxNSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAndGVuZ2FoYXJpJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91cnMgPCAxOSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAncGV0YW5nJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdtYWxhbSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbSGFyaSBpbmkgcHVrdWxdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW0Vzb2sgcHVrdWxdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW3B1a3VsXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1tLZWxtYXJpbiBwdWt1bF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnZGRkZCBbbGVwYXMgcHVrdWxdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICdkYWxhbSAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIHlhbmcgbGVwYXMnLFxuICAgICAgICAgICAgcyA6ICdiZWJlcmFwYSBzYWF0JyxcbiAgICAgICAgICAgIHNzIDogJyVkIHNhYXQnLFxuICAgICAgICAgICAgbSA6ICdzZW1pbml0JyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbml0JyxcbiAgICAgICAgICAgIGggOiAnc2VqYW0nLFxuICAgICAgICAgICAgaGggOiAnJWQgamFtJyxcbiAgICAgICAgICAgIGQgOiAnc2VoYXJpJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGhhcmknLFxuICAgICAgICAgICAgTSA6ICdzZWJ1bGFuJyxcbiAgICAgICAgICAgIE1NIDogJyVkIGJ1bGFuJyxcbiAgICAgICAgICAgIHkgOiAnc2V0YWh1bicsXG4gICAgICAgICAgICB5eSA6ICclZCB0YWh1bidcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbXNNeTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIG10ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbXQnLCB7XG4gICAgICAgIG1vbnRocyA6ICdKYW5uYXJfRnJhcl9NYXJ6dV9BcHJpbF9NZWpqdV/EoHVuanVfTHVsanVfQXd3aXNzdV9TZXR0ZW1icnVfT3R0dWJydV9Ob3ZlbWJydV9EacSLZW1icnUnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ0phbl9GcmFfTWFyX0Fwcl9NZWpfxKB1bl9MdWxfQXd3X1NldF9PdHRfTm92X0RpxIsnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ0lsLcSmYWRkX0l0LVRuZWpuX0l0LVRsaWV0YV9MLUVyYmfEp2FfSWwtxKZhbWlzX0lsLcSgaW1nxKdhX0lzLVNpYnQnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnxKZhZF9UbmVfVGxpX0VyYl/EpmFtX8SgaW1fU2liJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICfEpmFfVG5fVGxfRXJfxKZhX8SgaV9TaScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW0lsbHVtIGZpbC1dTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdbR8SnYWRhIGZpbC1dTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBbZmlsLV1MVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1tJbC1iaWVyYcSnIGZpbC1dTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnZGRkZCBbbGkgZ8SnYWRkYV0gW2ZpbC1dTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ2bigJkgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyBpbHUnLFxuICAgICAgICAgICAgcyA6ICdmdGl0IHNla29uZGknLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2Vrb25kaScsXG4gICAgICAgICAgICBtIDogJ21pbnV0YScsXG4gICAgICAgICAgICBtbSA6ICclZCBtaW51dGknLFxuICAgICAgICAgICAgaCA6ICdzaWVnxKdhJyxcbiAgICAgICAgICAgIGhoIDogJyVkIHNpZWfEp2F0JyxcbiAgICAgICAgICAgIGQgOiAnxKF1cm5hdGEnLFxuICAgICAgICAgICAgZGQgOiAnJWQgxKFyYW5ldCcsXG4gICAgICAgICAgICBNIDogJ3hhaGFyJyxcbiAgICAgICAgICAgIE1NIDogJyVkIHhodXInLFxuICAgICAgICAgICAgeSA6ICdzZW5hJyxcbiAgICAgICAgICAgIHl5IDogJyVkIHNuaSdcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZSA6IC9cXGR7MSwyfcK6LyxcbiAgICAgICAgb3JkaW5hbDogJyVkwronLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBtdDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHN5bWJvbE1hcCA9IHtcbiAgICAgICAgJzEnOiAn4YGBJyxcbiAgICAgICAgJzInOiAn4YGCJyxcbiAgICAgICAgJzMnOiAn4YGDJyxcbiAgICAgICAgJzQnOiAn4YGEJyxcbiAgICAgICAgJzUnOiAn4YGFJyxcbiAgICAgICAgJzYnOiAn4YGGJyxcbiAgICAgICAgJzcnOiAn4YGHJyxcbiAgICAgICAgJzgnOiAn4YGIJyxcbiAgICAgICAgJzknOiAn4YGJJyxcbiAgICAgICAgJzAnOiAn4YGAJ1xuICAgIH0sIG51bWJlck1hcCA9IHtcbiAgICAgICAgJ+GBgSc6ICcxJyxcbiAgICAgICAgJ+GBgic6ICcyJyxcbiAgICAgICAgJ+GBgyc6ICczJyxcbiAgICAgICAgJ+GBhCc6ICc0JyxcbiAgICAgICAgJ+GBhSc6ICc1JyxcbiAgICAgICAgJ+GBhic6ICc2JyxcbiAgICAgICAgJ+GBhyc6ICc3JyxcbiAgICAgICAgJ+GBiCc6ICc4JyxcbiAgICAgICAgJ+GBiSc6ICc5JyxcbiAgICAgICAgJ+GBgCc6ICcwJ1xuICAgIH07XG5cbiAgICB2YXIgbXkgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdteScsIHtcbiAgICAgICAgbW9udGhzOiAn4YCH4YCU4YC64YCU4YCd4YCr4YCb4YCuX+GAluGAseGAluGAseGArOGAuuGAneGAq+GAm+GArl/hgJnhgJDhgLpf4YCn4YCV4YC84YCuX+GAmeGAsV/hgIfhgL3hgJThgLpf4YCH4YCw4YCc4YCt4YCv4YCE4YC6X+GAnuGAvOGAguGAr+GAkOGAul/hgIXhgIDhgLrhgJDhgIThgLrhgJjhgKxf4YCh4YCx4YCs4YCA4YC64YCQ4YCt4YCv4YCY4YCsX+GAlOGAreGAr+GAneGAhOGAuuGAmOGArF/hgJLhgK7hgIfhgIThgLrhgJjhgKwnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAn4YCH4YCU4YC6X+GAluGAsV/hgJnhgJDhgLpf4YCV4YC84YCuX+GAmeGAsV/hgIfhgL3hgJThgLpf4YCc4YCt4YCv4YCE4YC6X+GAnuGAvF/hgIXhgIDhgLpf4YCh4YCx4YCs4YCA4YC6X+GAlOGAreGAr1/hgJLhgK4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzOiAn4YCQ4YCU4YCE4YC64YC54YCC4YCU4YC94YCxX+GAkOGAlOGAhOGAuuGAueGAnOGArF/hgKHhgIThgLrhgLnhgILhgKtf4YCX4YCv4YCS4YC54YCT4YCf4YCw4YC4X+GAgOGAvOGArOGAnuGAleGAkOGAseGAuF/hgJ7hgLHhgKzhgIDhgLzhgKxf4YCF4YCU4YCxJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAn4YCU4YC94YCxX+GAnOGArF/hgILhgKtf4YCf4YCw4YC4X+GAgOGAvOGArF/hgJ7hgLHhgKxf4YCU4YCxJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbjogJ+GAlOGAveGAsV/hgJzhgKxf4YCC4YCrX+GAn+GAsOGAuF/hgIDhgLzhgKxf4YCe4YCx4YCsX+GAlOGAsScuc3BsaXQoJ18nKSxcblxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdISDptbScsXG4gICAgICAgICAgICBMVFM6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vhgJrhgJThgLEuXSBMVCBb4YCZ4YC+4YCsXScsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW+GAmeGAlOGAgOGAuuGAluGAvOGAlOGAul0gTFQgW+GAmeGAvuGArF0nLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIExUIFvhgJnhgL7hgKxdJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb4YCZ4YCU4YCxLuGAgF0gTFQgW+GAmeGAvuGArF0nLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdb4YCV4YC84YCu4YC44YCB4YCy4YC34YCe4YCx4YCsXSBkZGRkIExUIFvhgJnhgL7hgKxdJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICfhgJzhgKzhgJnhgIrhgLrhgLcgJXMg4YCZ4YC+4YCsJyxcbiAgICAgICAgICAgIHBhc3Q6ICfhgJzhgL3hgJThgLrhgIHhgLLhgLfhgJ7hgLHhgKwgJXMg4YCAJyxcbiAgICAgICAgICAgIHM6ICfhgIXhgIDhgLnhgIDhgJThgLou4YCh4YCU4YCK4YC64YC44YCE4YCa4YC6JyxcbiAgICAgICAgICAgIHNzIDogJyVkIOGAheGAgOGAueGAgOGAlOGAt+GAuicsXG4gICAgICAgICAgICBtOiAn4YCQ4YCF4YC64YCZ4YCt4YCU4YCF4YC6JyxcbiAgICAgICAgICAgIG1tOiAnJWQg4YCZ4YCt4YCU4YCF4YC6JyxcbiAgICAgICAgICAgIGg6ICfhgJDhgIXhgLrhgJThgKzhgJvhgK4nLFxuICAgICAgICAgICAgaGg6ICclZCDhgJThgKzhgJvhgK4nLFxuICAgICAgICAgICAgZDogJ+GAkOGAheGAuuGAm+GAgOGAuicsXG4gICAgICAgICAgICBkZDogJyVkIOGAm+GAgOGAuicsXG4gICAgICAgICAgICBNOiAn4YCQ4YCF4YC64YCcJyxcbiAgICAgICAgICAgIE1NOiAnJWQg4YCcJyxcbiAgICAgICAgICAgIHk6ICfhgJDhgIXhgLrhgJThgL7hgIXhgLonLFxuICAgICAgICAgICAgeXk6ICclZCDhgJThgL7hgIXhgLonXG4gICAgICAgIH0sXG4gICAgICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1vhgYHhgYLhgYPhgYThgYXhgYbhgYfhgYjhgYnhgYBdL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXJNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvXFxkL2csIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzeW1ib2xNYXBbbWF0Y2hdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWs6IHtcbiAgICAgICAgICAgIGRvdzogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3k6IDQgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbXk7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBuYiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ25iJywge1xuICAgICAgICBtb250aHMgOiAnamFudWFyX2ZlYnJ1YXJfbWFyc19hcHJpbF9tYWlfanVuaV9qdWxpX2F1Z3VzdF9zZXB0ZW1iZXJfb2t0b2Jlcl9ub3ZlbWJlcl9kZXNlbWJlcicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnamFuLl9mZWIuX21hcnNfYXByaWxfbWFpX2p1bmlfanVsaV9hdWcuX3NlcC5fb2t0Ll9ub3YuX2Rlcy4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICB3ZWVrZGF5cyA6ICdzw7huZGFnX21hbmRhZ190aXJzZGFnX29uc2RhZ190b3JzZGFnX2ZyZWRhZ19sw7hyZGFnJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ3PDuC5fbWEuX3RpLl9vbi5fdG8uX2ZyLl9sw7guJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdzw7hfbWFfdGlfb25fdG9fZnJfbMO4Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEwgOiAnRC4gTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdELiBNTU1NIFlZWVkgW2tsLl0gSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkIEQuIE1NTU0gWVlZWSBba2wuXSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW2kgZGFnIGtsLl0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tpIG1vcmdlbiBrbC5dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBba2wuXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW2kgZ8OlciBrbC5dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW2ZvcnJpZ2VdIGRkZGQgW2tsLl0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnb20gJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyBzaWRlbicsXG4gICAgICAgICAgICBzIDogJ25vZW4gc2VrdW5kZXInLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2VrdW5kZXInLFxuICAgICAgICAgICAgbSA6ICdldHQgbWludXR0JyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbnV0dGVyJyxcbiAgICAgICAgICAgIGggOiAnZW4gdGltZScsXG4gICAgICAgICAgICBoaCA6ICclZCB0aW1lcicsXG4gICAgICAgICAgICBkIDogJ2VuIGRhZycsXG4gICAgICAgICAgICBkZCA6ICclZCBkYWdlcicsXG4gICAgICAgICAgICBNIDogJ2VuIG3DpW5lZCcsXG4gICAgICAgICAgICBNTSA6ICclZCBtw6VuZWRlcicsXG4gICAgICAgICAgICB5IDogJ2V0dCDDpXInLFxuICAgICAgICAgICAgeXkgOiAnJWQgw6VyJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG5iO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgc3ltYm9sTWFwID0ge1xuICAgICAgICAnMSc6ICfgpacnLFxuICAgICAgICAnMic6ICfgpagnLFxuICAgICAgICAnMyc6ICfgpaknLFxuICAgICAgICAnNCc6ICfgpaonLFxuICAgICAgICAnNSc6ICfgpasnLFxuICAgICAgICAnNic6ICfgpawnLFxuICAgICAgICAnNyc6ICfgpa0nLFxuICAgICAgICAnOCc6ICfgpa4nLFxuICAgICAgICAnOSc6ICfgpa8nLFxuICAgICAgICAnMCc6ICfgpaYnXG4gICAgfSxcbiAgICBudW1iZXJNYXAgPSB7XG4gICAgICAgICfgpacnOiAnMScsXG4gICAgICAgICfgpagnOiAnMicsXG4gICAgICAgICfgpaknOiAnMycsXG4gICAgICAgICfgpaonOiAnNCcsXG4gICAgICAgICfgpasnOiAnNScsXG4gICAgICAgICfgpawnOiAnNicsXG4gICAgICAgICfgpa0nOiAnNycsXG4gICAgICAgICfgpa4nOiAnOCcsXG4gICAgICAgICfgpa8nOiAnOScsXG4gICAgICAgICfgpaYnOiAnMCdcbiAgICB9O1xuXG4gICAgdmFyIG5lID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbmUnLCB7XG4gICAgICAgIG1vbnRocyA6ICfgpJzgpKjgpLXgpLDgpYBf4KSr4KWH4KSs4KWN4KSw4KWB4KS14KSw4KWAX+CkruCkvuCksOCljeCkml/gpIXgpKrgpY3gpLDgpL/gpLJf4KSu4KSIX+CknOClgeCkqF/gpJzgpYHgpLLgpL7gpIhf4KSF4KSX4KS34KWN4KSfX+CkuOClh+CkquCljeCkn+Clh+CkruCljeCkrOCksF/gpIXgpJXgpY3gpJ/gpYvgpKzgpLBf4KSo4KWL4KSt4KWH4KSu4KWN4KSs4KSwX+CkoeCkv+CkuOClh+CkruCljeCkrOCksCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAn4KSc4KSoLl/gpKvgpYfgpKzgpY3gpLDgpYEuX+CkruCkvuCksOCljeCkml/gpIXgpKrgpY3gpLDgpL8uX+CkruCkiF/gpJzgpYHgpKhf4KSc4KWB4KSy4KS+4KSILl/gpIXgpJcuX+CkuOClh+CkquCljeCkny5f4KSF4KSV4KWN4KSf4KWLLl/gpKjgpYvgpK3gpYcuX+CkoeCkv+CkuOClhy4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICB3ZWVrZGF5cyA6ICfgpIbgpIfgpKTgpKzgpL7gpLBf4KS44KWL4KSu4KSs4KS+4KSwX+CkruCkmeCljeCkl+CksuCkrOCkvuCksF/gpKzgpYHgpKfgpKzgpL7gpLBf4KSs4KS/4KS54KS/4KSs4KS+4KSwX+CktuClgeCkleCljeCksOCkrOCkvuCksF/gpLbgpKjgpL/gpKzgpL7gpLAnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn4KSG4KSH4KSkLl/gpLjgpYvgpK4uX+CkruCkmeCljeCkl+Cksi5f4KSs4KWB4KSnLl/gpKzgpL/gpLngpL8uX+CktuClgeCkleCljeCksC5f4KS24KSo4KS/Licuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn4KSGLl/gpLjgpYsuX+CkruCkgi5f4KSs4KWBLl/gpKzgpL8uX+CktuClgS5f4KS2Licuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdB4KSV4KWLIGg6bW0g4KSs4KSc4KWHJyxcbiAgICAgICAgICAgIExUUyA6ICdB4KSV4KWLIGg6bW06c3Mg4KSs4KSc4KWHJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVksIEHgpJXgpYsgaDptbSDgpKzgpJzgpYcnLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSwgQeCkleCliyBoOm1tIOCkrOCknOClhydcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvW+Clp+ClqOClqeClquClq+ClrOClreClruClr+Clpl0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+CksOCkvuCkpOCkv3zgpKzgpL/gpLngpL7gpKh84KSm4KS/4KSJ4KSB4KS44KWLfOCkuOCkvuCkgeCknS8sXG4gICAgICAgIG1lcmlkaWVtSG91ciA6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICfgpLDgpL7gpKTgpL8nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPCA0ID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgpKzgpL/gpLngpL7gpKgnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4KSm4KS/4KSJ4KSB4KS44KWLJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDEwID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgpLjgpL7gpIHgpJ0nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CksOCkvuCkpOCkvyc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4KSs4KS/4KS54KS+4KSoJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE2KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgpKbgpL/gpIngpIHgpLjgpYsnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMjApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CkuOCkvuCkgeCknSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4KSw4KS+4KSk4KS/JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vgpIbgpJxdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW+CkreCli+CksuCkv10gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnW+CkhuCkieCkgeCkpuCli10gZGRkZFssXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1vgpLngpL/gpJzgpYtdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1vgpJfgpI/gpJXgpYtdIGRkZGRbLF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJyVz4KSu4KS+JyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMg4KSF4KSX4KS+4KSh4KS/JyxcbiAgICAgICAgICAgIHMgOiAn4KSV4KWH4KS54KWAIOCkleCljeCkt+CkoycsXG4gICAgICAgICAgICBzcyA6ICclZCDgpLjgpYfgpJXgpYfgpKPgpY3gpKEnLFxuICAgICAgICAgICAgbSA6ICfgpI/gpJUg4KSu4KS/4KSo4KWH4KSfJyxcbiAgICAgICAgICAgIG1tIDogJyVkIOCkruCkv+CkqOClh+CknycsXG4gICAgICAgICAgICBoIDogJ+Ckj+CklSDgpJjgpKPgpY3gpJ/gpL4nLFxuICAgICAgICAgICAgaGggOiAnJWQg4KSY4KSj4KWN4KSf4KS+JyxcbiAgICAgICAgICAgIGQgOiAn4KSP4KSVIOCkpuCkv+CkqCcsXG4gICAgICAgICAgICBkZCA6ICclZCDgpKbgpL/gpKgnLFxuICAgICAgICAgICAgTSA6ICfgpI/gpJUg4KSu4KS54KS/4KSo4KS+JyxcbiAgICAgICAgICAgIE1NIDogJyVkIOCkruCkueCkv+CkqOCkvicsXG4gICAgICAgICAgICB5IDogJ+Ckj+CklSDgpKzgpLDgpY3gpLcnLFxuICAgICAgICAgICAgeXkgOiAnJWQg4KSs4KSw4KWN4KS3J1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA2ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA2dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBuZTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIG1vbnRoc1Nob3J0V2l0aERvdHMgPSAnamFuLl9mZWIuX21ydC5fYXByLl9tZWlfanVuLl9qdWwuX2F1Zy5fc2VwLl9va3QuX25vdi5fZGVjLicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnRXaXRob3V0RG90cyA9ICdqYW5fZmViX21ydF9hcHJfbWVpX2p1bl9qdWxfYXVnX3NlcF9va3Rfbm92X2RlYycuc3BsaXQoJ18nKTtcblxuICAgIHZhciBtb250aHNQYXJzZSA9IFsvXmphbi9pLCAvXmZlYi9pLCAvXm1hYXJ0fG1ydC4/JC9pLCAvXmFwci9pLCAvXm1laSQvaSwgL15qdW5baS5dPyQvaSwgL15qdWxbaS5dPyQvaSwgL15hdWcvaSwgL15zZXAvaSwgL15va3QvaSwgL15ub3YvaSwgL15kZWMvaV07XG4gICAgdmFyIG1vbnRoc1JlZ2V4ID0gL14oamFudWFyaXxmZWJydWFyaXxtYWFydHxhcHJpbHxtZWl8anVbbmxdaXxhdWd1c3R1c3xzZXB0ZW1iZXJ8b2t0b2Jlcnxub3ZlbWJlcnxkZWNlbWJlcnxqYW5cXC4/fGZlYlxcLj98bXJ0XFwuP3xhcHJcXC4/fGp1W25sXVxcLj98YXVnXFwuP3xzZXBcXC4/fG9rdFxcLj98bm92XFwuP3xkZWNcXC4/KS9pO1xuXG4gICAgdmFyIG5sID0gbW9tZW50LmRlZmluZUxvY2FsZSgnbmwnLCB7XG4gICAgICAgIG1vbnRocyA6ICdqYW51YXJpX2ZlYnJ1YXJpX21hYXJ0X2FwcmlsX21laV9qdW5pX2p1bGlfYXVndXN0dXNfc2VwdGVtYmVyX29rdG9iZXJfbm92ZW1iZXJfZGVjZW1iZXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogZnVuY3Rpb24gKG0sIGZvcm1hdCkge1xuICAgICAgICAgICAgaWYgKCFtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0V2l0aERvdHM7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKC8tTU1NLS8udGVzdChmb3JtYXQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0V2l0aG91dERvdHNbbS5tb250aCgpXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1Nob3J0V2l0aERvdHNbbS5tb250aCgpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBtb250aHNSZWdleDogbW9udGhzUmVnZXgsXG4gICAgICAgIG1vbnRoc1Nob3J0UmVnZXg6IG1vbnRoc1JlZ2V4LFxuICAgICAgICBtb250aHNTdHJpY3RSZWdleDogL14oamFudWFyaXxmZWJydWFyaXxtYWFydHxhcHJpbHxtZWl8anVbbmxdaXxhdWd1c3R1c3xzZXB0ZW1iZXJ8b2t0b2Jlcnxub3ZlbWJlcnxkZWNlbWJlcikvaSxcbiAgICAgICAgbW9udGhzU2hvcnRTdHJpY3RSZWdleDogL14oamFuXFwuP3xmZWJcXC4/fG1ydFxcLj98YXByXFwuP3xtZWl8anVbbmxdXFwuP3xhdWdcXC4/fHNlcFxcLj98b2t0XFwuP3xub3ZcXC4/fGRlY1xcLj8pL2ksXG5cbiAgICAgICAgbW9udGhzUGFyc2UgOiBtb250aHNQYXJzZSxcbiAgICAgICAgbG9uZ01vbnRoc1BhcnNlIDogbW9udGhzUGFyc2UsXG4gICAgICAgIHNob3J0TW9udGhzUGFyc2UgOiBtb250aHNQYXJzZSxcblxuICAgICAgICB3ZWVrZGF5cyA6ICd6b25kYWdfbWFhbmRhZ19kaW5zZGFnX3dvZW5zZGFnX2RvbmRlcmRhZ192cmlqZGFnX3phdGVyZGFnJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ3pvLl9tYS5fZGkuX3dvLl9kby5fdnIuX3phLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnem9fbWFfZGlfd29fZG9fdnJfemEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQtTU0tWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbdmFuZGFhZyBvbV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1ttb3JnZW4gb21dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbb21dIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbZ2lzdGVyZW4gb21dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW2FmZ2Vsb3Blbl0gZGRkZCBbb21dIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ292ZXIgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyBnZWxlZGVuJyxcbiAgICAgICAgICAgIHMgOiAnZWVuIHBhYXIgc2Vjb25kZW4nLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2Vjb25kZW4nLFxuICAgICAgICAgICAgbSA6ICfDqcOpbiBtaW51dXQnLFxuICAgICAgICAgICAgbW0gOiAnJWQgbWludXRlbicsXG4gICAgICAgICAgICBoIDogJ8Opw6luIHV1cicsXG4gICAgICAgICAgICBoaCA6ICclZCB1dXInLFxuICAgICAgICAgICAgZCA6ICfDqcOpbiBkYWcnLFxuICAgICAgICAgICAgZGQgOiAnJWQgZGFnZW4nLFxuICAgICAgICAgICAgTSA6ICfDqcOpbiBtYWFuZCcsXG4gICAgICAgICAgICBNTSA6ICclZCBtYWFuZGVuJyxcbiAgICAgICAgICAgIHkgOiAnw6nDqW4gamFhcicsXG4gICAgICAgICAgICB5eSA6ICclZCBqYWFyJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oc3RlfGRlKS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKChudW1iZXIgPT09IDEgfHwgbnVtYmVyID09PSA4IHx8IG51bWJlciA+PSAyMCkgPyAnc3RlJyA6ICdkZScpO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBubDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIG1vbnRoc1Nob3J0V2l0aERvdHMgPSAnamFuLl9mZWIuX21ydC5fYXByLl9tZWlfanVuLl9qdWwuX2F1Zy5fc2VwLl9va3QuX25vdi5fZGVjLicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnRXaXRob3V0RG90cyA9ICdqYW5fZmViX21ydF9hcHJfbWVpX2p1bl9qdWxfYXVnX3NlcF9va3Rfbm92X2RlYycuc3BsaXQoJ18nKTtcblxuICAgIHZhciBtb250aHNQYXJzZSA9IFsvXmphbi9pLCAvXmZlYi9pLCAvXm1hYXJ0fG1ydC4/JC9pLCAvXmFwci9pLCAvXm1laSQvaSwgL15qdW5baS5dPyQvaSwgL15qdWxbaS5dPyQvaSwgL15hdWcvaSwgL15zZXAvaSwgL15va3QvaSwgL15ub3YvaSwgL15kZWMvaV07XG4gICAgdmFyIG1vbnRoc1JlZ2V4ID0gL14oamFudWFyaXxmZWJydWFyaXxtYWFydHxhcHJpbHxtZWl8anVbbmxdaXxhdWd1c3R1c3xzZXB0ZW1iZXJ8b2t0b2Jlcnxub3ZlbWJlcnxkZWNlbWJlcnxqYW5cXC4/fGZlYlxcLj98bXJ0XFwuP3xhcHJcXC4/fGp1W25sXVxcLj98YXVnXFwuP3xzZXBcXC4/fG9rdFxcLj98bm92XFwuP3xkZWNcXC4/KS9pO1xuXG4gICAgdmFyIG5sQmUgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdubC1iZScsIHtcbiAgICAgICAgbW9udGhzIDogJ2phbnVhcmlfZmVicnVhcmlfbWFhcnRfYXByaWxfbWVpX2p1bmlfanVsaV9hdWd1c3R1c19zZXB0ZW1iZXJfb2t0b2Jlcl9ub3ZlbWJlcl9kZWNlbWJlcicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiBmdW5jdGlvbiAobSwgZm9ybWF0KSB7XG4gICAgICAgICAgICBpZiAoIW0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnRXaXRoRG90cztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoLy1NTU0tLy50ZXN0KGZvcm1hdCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnRXaXRob3V0RG90c1ttLm1vbnRoKCldO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9udGhzU2hvcnRXaXRoRG90c1ttLm1vbnRoKCldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIG1vbnRoc1JlZ2V4OiBtb250aHNSZWdleCxcbiAgICAgICAgbW9udGhzU2hvcnRSZWdleDogbW9udGhzUmVnZXgsXG4gICAgICAgIG1vbnRoc1N0cmljdFJlZ2V4OiAvXihqYW51YXJpfGZlYnJ1YXJpfG1hYXJ0fGFwcmlsfG1laXxqdVtubF1pfGF1Z3VzdHVzfHNlcHRlbWJlcnxva3RvYmVyfG5vdmVtYmVyfGRlY2VtYmVyKS9pLFxuICAgICAgICBtb250aHNTaG9ydFN0cmljdFJlZ2V4OiAvXihqYW5cXC4/fGZlYlxcLj98bXJ0XFwuP3xhcHJcXC4/fG1laXxqdVtubF1cXC4/fGF1Z1xcLj98c2VwXFwuP3xva3RcXC4/fG5vdlxcLj98ZGVjXFwuPykvaSxcblxuICAgICAgICBtb250aHNQYXJzZSA6IG1vbnRoc1BhcnNlLFxuICAgICAgICBsb25nTW9udGhzUGFyc2UgOiBtb250aHNQYXJzZSxcbiAgICAgICAgc2hvcnRNb250aHNQYXJzZSA6IG1vbnRoc1BhcnNlLFxuXG4gICAgICAgIHdlZWtkYXlzIDogJ3pvbmRhZ19tYWFuZGFnX2RpbnNkYWdfd29lbnNkYWdfZG9uZGVyZGFnX3ZyaWpkYWdfemF0ZXJkYWcnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnem8uX21hLl9kaS5fd28uX2RvLl92ci5femEuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICd6b19tYV9kaV93b19kb192cl96YScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1t2YW5kYWFnIG9tXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW21vcmdlbiBvbV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFtvbV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tnaXN0ZXJlbiBvbV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbYWZnZWxvcGVuXSBkZGRkIFtvbV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnb3ZlciAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIGdlbGVkZW4nLFxuICAgICAgICAgICAgcyA6ICdlZW4gcGFhciBzZWNvbmRlbicsXG4gICAgICAgICAgICBzcyA6ICclZCBzZWNvbmRlbicsXG4gICAgICAgICAgICBtIDogJ8Opw6luIG1pbnV1dCcsXG4gICAgICAgICAgICBtbSA6ICclZCBtaW51dGVuJyxcbiAgICAgICAgICAgIGggOiAnw6nDqW4gdXVyJyxcbiAgICAgICAgICAgIGhoIDogJyVkIHV1cicsXG4gICAgICAgICAgICBkIDogJ8Opw6luIGRhZycsXG4gICAgICAgICAgICBkZCA6ICclZCBkYWdlbicsXG4gICAgICAgICAgICBNIDogJ8Opw6luIG1hYW5kJyxcbiAgICAgICAgICAgIE1NIDogJyVkIG1hYW5kZW4nLFxuICAgICAgICAgICAgeSA6ICfDqcOpbiBqYWFyJyxcbiAgICAgICAgICAgIHl5IDogJyVkIGphYXInXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShzdGV8ZGUpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAoKG51bWJlciA9PT0gMSB8fCBudW1iZXIgPT09IDggfHwgbnVtYmVyID49IDIwKSA/ICdzdGUnIDogJ2RlJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG5sQmU7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBubiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ25uJywge1xuICAgICAgICBtb250aHMgOiAnamFudWFyX2ZlYnJ1YXJfbWFyc19hcHJpbF9tYWlfanVuaV9qdWxpX2F1Z3VzdF9zZXB0ZW1iZXJfb2t0b2Jlcl9ub3ZlbWJlcl9kZXNlbWJlcicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnamFuX2ZlYl9tYXJfYXByX21haV9qdW5fanVsX2F1Z19zZXBfb2t0X25vdl9kZXMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ3N1bmRhZ19tw6VuZGFnX3R5c2RhZ19vbnNkYWdfdG9yc2RhZ19mcmVkYWdfbGF1cmRhZycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdzdW5fbcOlbl90eXNfb25zX3Rvcl9mcmVfbGF1Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdzdV9tw6VfdHlfb25fdG9fZnJfbMO4Jy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEwgOiAnRC4gTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdELiBNTU1NIFlZWVkgW2tsLl0gSDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQgRC4gTU1NTSBZWVlZIFtrbC5dIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbSSBkYWcga2xva2thXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0kgbW9yZ29uIGtsb2trYV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFtrbG9ra2FdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbSSBnw6VyIGtsb2trYV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbRsO4cmVnw6VhbmRlXSBkZGRkIFtrbG9ra2FdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ29tICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMgc2lkYW4nLFxuICAgICAgICAgICAgcyA6ICdub2tyZSBzZWt1bmQnLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2VrdW5kJyxcbiAgICAgICAgICAgIG0gOiAnZWl0IG1pbnV0dCcsXG4gICAgICAgICAgICBtbSA6ICclZCBtaW51dHQnLFxuICAgICAgICAgICAgaCA6ICdlaW4gdGltZScsXG4gICAgICAgICAgICBoaCA6ICclZCB0aW1hcicsXG4gICAgICAgICAgICBkIDogJ2VpbiBkYWcnLFxuICAgICAgICAgICAgZGQgOiAnJWQgZGFnYXInLFxuICAgICAgICAgICAgTSA6ICdlaW4gbcOlbmFkJyxcbiAgICAgICAgICAgIE1NIDogJyVkIG3DpW5hZGVyJyxcbiAgICAgICAgICAgIHkgOiAnZWl0IMOlcicsXG4gICAgICAgICAgICB5eSA6ICclZCDDpXInXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWwgOiAnJWQuJyxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gbm47XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBzeW1ib2xNYXAgPSB7XG4gICAgICAgICcxJzogJ+CppycsXG4gICAgICAgICcyJzogJ+CpqCcsXG4gICAgICAgICczJzogJ+CpqScsXG4gICAgICAgICc0JzogJ+CpqicsXG4gICAgICAgICc1JzogJ+CpqycsXG4gICAgICAgICc2JzogJ+CprCcsXG4gICAgICAgICc3JzogJ+CprScsXG4gICAgICAgICc4JzogJ+CpricsXG4gICAgICAgICc5JzogJ+CprycsXG4gICAgICAgICcwJzogJ+CppidcbiAgICB9LFxuICAgIG51bWJlck1hcCA9IHtcbiAgICAgICAgJ+Cppyc6ICcxJyxcbiAgICAgICAgJ+CpqCc6ICcyJyxcbiAgICAgICAgJ+CpqSc6ICczJyxcbiAgICAgICAgJ+Cpqic6ICc0JyxcbiAgICAgICAgJ+Cpqyc6ICc1JyxcbiAgICAgICAgJ+CprCc6ICc2JyxcbiAgICAgICAgJ+CprSc6ICc3JyxcbiAgICAgICAgJ+Cpric6ICc4JyxcbiAgICAgICAgJ+Cpryc6ICc5JyxcbiAgICAgICAgJ+Cppic6ICcwJ1xuICAgIH07XG5cbiAgICB2YXIgcGFJbiA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3BhLWluJywge1xuICAgICAgICAvLyBUaGVyZSBhcmUgbW9udGhzIG5hbWUgYXMgcGVyIE5hbmFrc2hhaGkgQ2FsZW5kYXIgYnV0IHRoZXkgYXJlIG5vdCB1c2VkIGFzIHJpZ2lkbHkgaW4gbW9kZXJuIFB1bmphYmkuXG4gICAgICAgIG1vbnRocyA6ICfgqJzgqKjgqLXgqLDgqYBf4Kir4Ki84Kiw4Ki14Kiw4KmAX+CoruCovuCosOComl/gqIXgqKrgqY3gqLDgqYjgqLJf4Kiu4KiIX+ConOCpguCoqF/gqJzgqYHgqLLgqL7gqIhf4KiF4KiX4Ki44KikX+CouOCopOCpsOCorOCosF/gqIXgqJXgqKTgqYLgqKzgqLBf4Kio4Ki14Kmw4Kis4KiwX+CopuCouOCpsOCorOCosCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAn4Kic4Kio4Ki14Kiw4KmAX+Coq+CovOCosOCoteCosOCpgF/gqK7gqL7gqLDgqJpf4KiF4Kiq4KmN4Kiw4KmI4KiyX+CoruCoiF/gqJzgqYLgqKhf4Kic4KmB4Kiy4Ki+4KiIX+CoheCol+CouOCopF/gqLjgqKTgqbDgqKzgqLBf4KiF4KiV4Kik4KmC4Kis4KiwX+CoqOCoteCpsOCorOCosF/gqKbgqLjgqbDgqKzgqLAnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ+CokOCopOCoteCovuCosF/gqLjgqYvgqK7gqLXgqL7gqLBf4Kiu4Kmw4KiX4Kiy4Ki14Ki+4KiwX+CorOCpgeCop+CoteCovuCosF/gqLXgqYDgqLDgqLXgqL7gqLBf4Ki44Ki84KmB4Kmx4KiV4Kiw4Ki14Ki+4KiwX+CouOCovOCoqOCpgOComuCosOCoteCovuCosCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfgqJDgqKRf4Ki44KmL4KiuX+CoruCpsOCol+Cosl/gqKzgqYHgqKdf4Ki14KmA4KiwX+CouOCovOCpgeColeCosF/gqLjgqLzgqKjgqYAnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ+CokOCopF/gqLjgqYvgqK5f4Kiu4Kmw4KiX4KiyX+CorOCpgeCop1/gqLXgqYDgqLBf4Ki44Ki84KmB4KiV4KiwX+CouOCovOCoqOCpgCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdBIGg6bW0g4Ki14Kic4KmHJyxcbiAgICAgICAgICAgIExUUyA6ICdBIGg6bW06c3Mg4Ki14Kic4KmHJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVksIEEgaDptbSDgqLXgqJzgqYcnLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSwgQSBoOm1tIOCoteConOCphydcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vgqIXgqJxdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW+ColeCosl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnW+CoheCol+CosuCovl0gZGRkZCwgTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdb4KiV4KiyXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdb4Kiq4Ki/4Kib4Kiy4KmHXSBkZGRkLCBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnJXMg4Ki14Ki/4Kmx4KiaJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMg4Kiq4Ki/4Kib4Kiy4KmHJyxcbiAgICAgICAgICAgIHMgOiAn4KiV4KmB4KidIOCouOColeCov+CpsOConycsXG4gICAgICAgICAgICBzcyA6ICclZCDgqLjgqJXgqL/gqbDgqJ8nLFxuICAgICAgICAgICAgbSA6ICfgqIfgqJUg4Kiu4Ki/4Kmw4KifJyxcbiAgICAgICAgICAgIG1tIDogJyVkIOCoruCov+CpsOConycsXG4gICAgICAgICAgICBoIDogJ+Coh+CpseColSDgqJjgqbDgqJ/gqL4nLFxuICAgICAgICAgICAgaGggOiAnJWQg4KiY4Kmw4Kif4KmHJyxcbiAgICAgICAgICAgIGQgOiAn4KiH4Kmx4KiVIOCopuCov+CoqCcsXG4gICAgICAgICAgICBkZCA6ICclZCDgqKbgqL/gqKgnLFxuICAgICAgICAgICAgTSA6ICfgqIfgqbHgqJUg4Kiu4Ki54KmA4Kio4Ki+JyxcbiAgICAgICAgICAgIE1NIDogJyVkIOCoruCoueCpgOCoqOCphycsXG4gICAgICAgICAgICB5IDogJ+Coh+CpseColSDgqLjgqL7gqLInLFxuICAgICAgICAgICAgeXkgOiAnJWQg4Ki44Ki+4KiyJ1xuICAgICAgICB9LFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9b4Kmn4Kmo4Kmp4Kmq4Kmr4Kms4Kmt4Kmu4Kmv4KmmXS9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1xcZC9nLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3ltYm9sTWFwW21hdGNoXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICAvLyBQdW5qYWJpIG5vdGF0aW9uIGZvciBtZXJpZGllbXMgYXJlIHF1aXRlIGZ1enp5IGluIHByYWN0aWNlLiBXaGlsZSB0aGVyZSBleGlzdHNcbiAgICAgICAgLy8gYSByaWdpZCBub3Rpb24gb2YgYSAnUGFoYXInIGl0IGlzIG5vdCB1c2VkIGFzIHJpZ2lkbHkgaW4gbW9kZXJuIFB1bmphYmkuXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/gqLDgqL7gqKR84Ki44Ki14KmH4KiwfOCopuCpgeCoquCoueCov+CosHzgqLjgqLzgqL7gqK4vLFxuICAgICAgICBtZXJpZGllbUhvdXIgOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lcmlkaWVtID09PSAn4Kiw4Ki+4KikJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyIDwgNCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4Ki44Ki14KmH4KiwJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+CopuCpgeCoquCoueCov+CosCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMCA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4Ki44Ki84Ki+4KiuJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgqLDgqL7gqKQnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CouOCoteCph+CosCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxNykge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Kim4KmB4Kiq4Ki54Ki/4KiwJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDIwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgqLjgqLzgqL7gqK4nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CosOCovuCopCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAwLCAvLyBTdW5kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDYgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDZ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHBhSW47XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBtb250aHNOb21pbmF0aXZlID0gJ3N0eWN6ZcWEX2x1dHlfbWFyemVjX2t3aWVjaWXFhF9tYWpfY3plcndpZWNfbGlwaWVjX3NpZXJwaWXFhF93cnplc2llxYRfcGHFumR6aWVybmlrX2xpc3RvcGFkX2dydWR6aWXFhCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU3ViamVjdGl2ZSA9ICdzdHljem5pYV9sdXRlZ29fbWFyY2Ffa3dpZXRuaWFfbWFqYV9jemVyd2NhX2xpcGNhX3NpZXJwbmlhX3dyemXFm25pYV9wYcW6ZHppZXJuaWthX2xpc3RvcGFkYV9ncnVkbmlhJy5zcGxpdCgnXycpO1xuICAgIGZ1bmN0aW9uIHBsdXJhbChuKSB7XG4gICAgICAgIHJldHVybiAobiAlIDEwIDwgNSkgJiYgKG4gJSAxMCA+IDEpICYmICgofn4obiAvIDEwKSAlIDEwKSAhPT0gMSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbnVtYmVyICsgJyAnO1xuICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgICAgY2FzZSAnc3MnOlxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnc2VrdW5keScgOiAnc2VrdW5kJyk7XG4gICAgICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICdtaW51dGEnIDogJ21pbnV0xJknO1xuICAgICAgICAgICAgY2FzZSAnbW0nOlxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnbWludXR5JyA6ICdtaW51dCcpO1xuICAgICAgICAgICAgY2FzZSAnaCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggID8gJ2dvZHppbmEnICA6ICdnb2R6aW7EmSc7XG4gICAgICAgICAgICBjYXNlICdoaCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdnb2R6aW55JyA6ICdnb2R6aW4nKTtcbiAgICAgICAgICAgIGNhc2UgJ01NJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ21pZXNpxIVjZScgOiAnbWllc2nEmWN5Jyk7XG4gICAgICAgICAgICBjYXNlICd5eSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdsYXRhJyA6ICdsYXQnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwbCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3BsJywge1xuICAgICAgICBtb250aHMgOiBmdW5jdGlvbiAobW9tZW50VG9Gb3JtYXQsIGZvcm1hdCkge1xuICAgICAgICAgICAgaWYgKCFtb21lbnRUb0Zvcm1hdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNOb21pbmF0aXZlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChmb3JtYXQgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgLy8gSGFjazogaWYgZm9ybWF0IGVtcHR5IHdlIGtub3cgdGhpcyBpcyB1c2VkIHRvIGdlbmVyYXRlXG4gICAgICAgICAgICAgICAgLy8gUmVnRXhwIGJ5IG1vbWVudC4gR2l2ZSB0aGVuIGJhY2sgYm90aCB2YWxpZCBmb3JtcyBvZiBtb250aHNcbiAgICAgICAgICAgICAgICAvLyBpbiBSZWdFeHAgcmVhZHkgZm9ybWF0LlxuICAgICAgICAgICAgICAgIHJldHVybiAnKCcgKyBtb250aHNTdWJqZWN0aXZlW21vbWVudFRvRm9ybWF0Lm1vbnRoKCldICsgJ3wnICsgbW9udGhzTm9taW5hdGl2ZVttb21lbnRUb0Zvcm1hdC5tb250aCgpXSArICcpJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoL0QgTU1NTS8udGVzdChmb3JtYXQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnRoc1N1YmplY3RpdmVbbW9tZW50VG9Gb3JtYXQubW9udGgoKV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBtb250aHNOb21pbmF0aXZlW21vbWVudFRvRm9ybWF0Lm1vbnRoKCldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtb250aHNTaG9ydCA6ICdzdHlfbHV0X21hcl9rd2lfbWFqX2N6ZV9saXBfc2llX3dyel9wYcW6X2xpc19ncnUnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ25pZWR6aWVsYV9wb25pZWR6aWHFgmVrX3d0b3Jla1/Fm3JvZGFfY3p3YXJ0ZWtfcGnEhXRla19zb2JvdGEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnbmR6X3Bvbl93dF/Fm3JfY3p3X3B0X3NvYicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnTmRfUG5fV3RfxZpyX0N6X1B0X1NvJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tEemnFmyBvXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0p1dHJvIG9dIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW1cgbmllZHppZWzEmSBvXSBMVCc7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbV2Ugd3RvcmVrIG9dIExUJztcblxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tXIMWbcm9kxJkgb10gTFQnO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW1cgc29ib3TEmSBvXSBMVCc7XG5cbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW1ddIGRkZGQgW29dIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdERheTogJ1tXY3pvcmFqIG9dIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW1cgemVzesWCxIUgbmllZHppZWzEmSBvXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW1cgemVzesWCxIUgxZtyb2TEmSBvXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW1cgemVzesWCxIUgc29ib3TEmSBvXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tXIHplc3rFgnldIGRkZGQgW29dIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnemEgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyB0ZW11JyxcbiAgICAgICAgICAgIHMgOiAna2lsa2Egc2VrdW5kJyxcbiAgICAgICAgICAgIHNzIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgbSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG1tIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgaCA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGhoIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgZCA6ICcxIGR6aWXFhCcsXG4gICAgICAgICAgICBkZCA6ICclZCBkbmknLFxuICAgICAgICAgICAgTSA6ICdtaWVzacSFYycsXG4gICAgICAgICAgICBNTSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHkgOiAncm9rJyxcbiAgICAgICAgICAgIHl5IDogdHJhbnNsYXRlXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWwgOiAnJWQuJyxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcGw7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBwdCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3B0Jywge1xuICAgICAgICBtb250aHMgOiAnSmFuZWlyb19GZXZlcmVpcm9fTWFyw6dvX0FicmlsX01haW9fSnVuaG9fSnVsaG9fQWdvc3RvX1NldGVtYnJvX091dHVicm9fTm92ZW1icm9fRGV6ZW1icm8nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ0phbl9GZXZfTWFyX0Ficl9NYWlfSnVuX0p1bF9BZ29fU2V0X091dF9Ob3ZfRGV6Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdEb21pbmdvX1NlZ3VuZGEtZmVpcmFfVGVyw6dhLWZlaXJhX1F1YXJ0YS1mZWlyYV9RdWludGEtZmVpcmFfU2V4dGEtZmVpcmFfU8OhYmFkbycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdEb21fU2VnX1Rlcl9RdWFfUXVpX1NleF9Tw6FiJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdEb18ywqpfM8KqXzTCql81wqpfNsKqX1PDoScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgW2RlXSBNTU1NIFtkZV0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBbZGVdIE1NTU0gW2RlXSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBbZGVdIE1NTU0gW2RlXSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbSG9qZSDDoHNdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbQW1hbmjDoyDDoHNdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbw6BzXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW09udGVtIMOgc10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHRoaXMuZGF5KCkgPT09IDAgfHwgdGhpcy5kYXkoKSA9PT0gNikgP1xuICAgICAgICAgICAgICAgICAgICAnW8OabHRpbW9dIGRkZGQgW8Ogc10gTFQnIDogLy8gU2F0dXJkYXkgKyBTdW5kYXlcbiAgICAgICAgICAgICAgICAgICAgJ1vDmmx0aW1hXSBkZGRkIFvDoHNdIExUJzsgLy8gTW9uZGF5IC0gRnJpZGF5XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnZW0gJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICdow6EgJXMnLFxuICAgICAgICAgICAgcyA6ICdzZWd1bmRvcycsXG4gICAgICAgICAgICBzcyA6ICclZCBzZWd1bmRvcycsXG4gICAgICAgICAgICBtIDogJ3VtIG1pbnV0bycsXG4gICAgICAgICAgICBtbSA6ICclZCBtaW51dG9zJyxcbiAgICAgICAgICAgIGggOiAndW1hIGhvcmEnLFxuICAgICAgICAgICAgaGggOiAnJWQgaG9yYXMnLFxuICAgICAgICAgICAgZCA6ICd1bSBkaWEnLFxuICAgICAgICAgICAgZGQgOiAnJWQgZGlhcycsXG4gICAgICAgICAgICBNIDogJ3VtIG3DqnMnLFxuICAgICAgICAgICAgTU0gOiAnJWQgbWVzZXMnLFxuICAgICAgICAgICAgeSA6ICd1bSBhbm8nLFxuICAgICAgICAgICAgeXkgOiAnJWQgYW5vcydcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9wrovLFxuICAgICAgICBvcmRpbmFsIDogJyVkwronLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBwdDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHB0QnIgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdwdC1icicsIHtcbiAgICAgICAgbW9udGhzIDogJ0phbmVpcm9fRmV2ZXJlaXJvX01hcsOnb19BYnJpbF9NYWlvX0p1bmhvX0p1bGhvX0Fnb3N0b19TZXRlbWJyb19PdXR1YnJvX05vdmVtYnJvX0RlemVtYnJvJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdKYW5fRmV2X01hcl9BYnJfTWFpX0p1bl9KdWxfQWdvX1NldF9PdXRfTm92X0Rleicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnRG9taW5nb19TZWd1bmRhLWZlaXJhX1RlcsOnYS1mZWlyYV9RdWFydGEtZmVpcmFfUXVpbnRhLWZlaXJhX1NleHRhLWZlaXJhX1PDoWJhZG8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnRG9tX1NlZ19UZXJfUXVhX1F1aV9TZXhfU8OhYicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnRG9fMsKqXzPCql80wqpfNcKqXzbCql9Tw6EnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIFtkZV0gTU1NTSBbZGVdIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgW2RlXSBNTU1NIFtkZV0gWVlZWSBbw6BzXSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgW2RlXSBNTU1NIFtkZV0gWVlZWSBbw6BzXSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW0hvamUgw6BzXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW0FtYW5ow6Mgw6BzXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW8Ogc10gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tPbnRlbSDDoHNdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICh0aGlzLmRheSgpID09PSAwIHx8IHRoaXMuZGF5KCkgPT09IDYpID9cbiAgICAgICAgICAgICAgICAgICAgJ1vDmmx0aW1vXSBkZGRkIFvDoHNdIExUJyA6IC8vIFNhdHVyZGF5ICsgU3VuZGF5XG4gICAgICAgICAgICAgICAgICAgICdbw5psdGltYV0gZGRkZCBbw6BzXSBMVCc7IC8vIE1vbmRheSAtIEZyaWRheVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ2VtICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnaMOhICVzJyxcbiAgICAgICAgICAgIHMgOiAncG91Y29zIHNlZ3VuZG9zJyxcbiAgICAgICAgICAgIHNzIDogJyVkIHNlZ3VuZG9zJyxcbiAgICAgICAgICAgIG0gOiAndW0gbWludXRvJyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbnV0b3MnLFxuICAgICAgICAgICAgaCA6ICd1bWEgaG9yYScsXG4gICAgICAgICAgICBoaCA6ICclZCBob3JhcycsXG4gICAgICAgICAgICBkIDogJ3VtIGRpYScsXG4gICAgICAgICAgICBkZCA6ICclZCBkaWFzJyxcbiAgICAgICAgICAgIE0gOiAndW0gbcOqcycsXG4gICAgICAgICAgICBNTSA6ICclZCBtZXNlcycsXG4gICAgICAgICAgICB5IDogJ3VtIGFubycsXG4gICAgICAgICAgICB5eSA6ICclZCBhbm9zJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn3Cui8sXG4gICAgICAgIG9yZGluYWwgOiAnJWTCuidcbiAgICB9KTtcblxuICAgIHJldHVybiBwdEJyO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICBmdW5jdGlvbiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5KSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB7XG4gICAgICAgICAgICAgICAgJ3NzJzogJ3NlY3VuZGUnLFxuICAgICAgICAgICAgICAgICdtbSc6ICdtaW51dGUnLFxuICAgICAgICAgICAgICAgICdoaCc6ICdvcmUnLFxuICAgICAgICAgICAgICAgICdkZCc6ICd6aWxlJyxcbiAgICAgICAgICAgICAgICAnTU0nOiAnbHVuaScsXG4gICAgICAgICAgICAgICAgJ3l5JzogJ2FuaSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXBhcmF0b3IgPSAnICc7XG4gICAgICAgIGlmIChudW1iZXIgJSAxMDAgPj0gMjAgfHwgKG51bWJlciA+PSAxMDAgJiYgbnVtYmVyICUgMTAwID09PSAwKSkge1xuICAgICAgICAgICAgc2VwYXJhdG9yID0gJyBkZSAnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudW1iZXIgKyBzZXBhcmF0b3IgKyBmb3JtYXRba2V5XTtcbiAgICB9XG5cbiAgICB2YXIgcm8gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdybycsIHtcbiAgICAgICAgbW9udGhzIDogJ2lhbnVhcmllX2ZlYnJ1YXJpZV9tYXJ0aWVfYXByaWxpZV9tYWlfaXVuaWVfaXVsaWVfYXVndXN0X3NlcHRlbWJyaWVfb2N0b21icmllX25vaWVtYnJpZV9kZWNlbWJyaWUnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ2lhbi5fZmVici5fbWFydC5fYXByLl9tYWlfaXVuLl9pdWwuX2F1Zy5fc2VwdC5fb2N0Ll9ub3YuX2RlYy4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzIDogJ2R1bWluaWPEg19sdW5pX21hcsibaV9taWVyY3VyaV9qb2lfdmluZXJpX3PDom1ixIN0xIMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnRHVtX0x1bl9NYXJfTWllX0pvaV9WaW5fU8OibScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnRHVfTHVfTWFfTWlfSm9fVmlfU8OiJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgSDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW2F6aSBsYV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1ttw6JpbmUgbGFdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbbGFdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbaWVyaSBsYV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbZm9zdGFdIGRkZGQgW2xhXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICdwZXN0ZSAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIMOubiB1cm3EgycsXG4gICAgICAgICAgICBzIDogJ2PDonRldmEgc2VjdW5kZScsXG4gICAgICAgICAgICBzcyA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBtIDogJ3VuIG1pbnV0JyxcbiAgICAgICAgICAgIG1tIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIGggOiAnbyBvcsSDJyxcbiAgICAgICAgICAgIGhoIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIGQgOiAnbyB6aScsXG4gICAgICAgICAgICBkZCA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBNIDogJ28gbHVuxIMnLFxuICAgICAgICAgICAgTU0gOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgeSA6ICd1biBhbicsXG4gICAgICAgICAgICB5eSA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWxcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcm87XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIGZ1bmN0aW9uIHBsdXJhbCh3b3JkLCBudW0pIHtcbiAgICAgICAgdmFyIGZvcm1zID0gd29yZC5zcGxpdCgnXycpO1xuICAgICAgICByZXR1cm4gbnVtICUgMTAgPT09IDEgJiYgbnVtICUgMTAwICE9PSAxMSA/IGZvcm1zWzBdIDogKG51bSAlIDEwID49IDIgJiYgbnVtICUgMTAgPD0gNCAmJiAobnVtICUgMTAwIDwgMTAgfHwgbnVtICUgMTAwID49IDIwKSA/IGZvcm1zWzFdIDogZm9ybXNbMl0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5KSB7XG4gICAgICAgIHZhciBmb3JtYXQgPSB7XG4gICAgICAgICAgICAnc3MnOiB3aXRob3V0U3VmZml4ID8gJ9GB0LXQutGD0L3QtNCwX9GB0LXQutGD0L3QtNGLX9GB0LXQutGD0L3QtCcgOiAn0YHQtdC60YPQvdC00YNf0YHQtdC60YPQvdC00Ytf0YHQtdC60YPQvdC0JyxcbiAgICAgICAgICAgICdtbSc6IHdpdGhvdXRTdWZmaXggPyAn0LzQuNC90YPRgtCwX9C80LjQvdGD0YLRi1/QvNC40L3Rg9GCJyA6ICfQvNC40L3Rg9GC0YNf0LzQuNC90YPRgtGLX9C80LjQvdGD0YInLFxuICAgICAgICAgICAgJ2hoJzogJ9GH0LDRgV/Rh9Cw0YHQsF/Rh9Cw0YHQvtCyJyxcbiAgICAgICAgICAgICdkZCc6ICfQtNC10L3RjF/QtNC90Y9f0LTQvdC10LknLFxuICAgICAgICAgICAgJ01NJzogJ9C80LXRgdGP0YZf0LzQtdGB0Y/RhtCwX9C80LXRgdGP0YbQtdCyJyxcbiAgICAgICAgICAgICd5eSc6ICfQs9C+0LRf0LPQvtC00LBf0LvQtdGCJ1xuICAgICAgICB9O1xuICAgICAgICBpZiAoa2V5ID09PSAnbScpIHtcbiAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ9C80LjQvdGD0YLQsCcgOiAn0LzQuNC90YPRgtGDJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnICcgKyBwbHVyYWwoZm9ybWF0W2tleV0sICtudW1iZXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHZhciBtb250aHNQYXJzZSA9IFsvXtGP0L3Qsi9pLCAvXtGE0LXQsi9pLCAvXtC80LDRgC9pLCAvXtCw0L/RgC9pLCAvXtC80LBb0LnRj10vaSwgL17QuNGO0L0vaSwgL17QuNGO0LsvaSwgL17QsNCy0LMvaSwgL17RgdC10L0vaSwgL17QvtC60YIvaSwgL17QvdC+0Y8vaSwgL17QtNC10LovaV07XG5cbiAgICAvLyBodHRwOi8vbmV3LmdyYW1vdGEucnUvc3ByYXZrYS9ydWxlcy8xMzktcHJvcCA6IMKnIDEwM1xuICAgIC8vINCh0L7QutGA0LDRidC10L3QuNGPINC80LXRgdGP0YbQtdCyOiBodHRwOi8vbmV3LmdyYW1vdGEucnUvc3ByYXZrYS9idXJvL3NlYXJjaC1hbnN3ZXI/cz0yNDI2MzdcbiAgICAvLyBDTERSIGRhdGE6ICAgICAgICAgIGh0dHA6Ly93d3cudW5pY29kZS5vcmcvY2xkci9jaGFydHMvMjgvc3VtbWFyeS9ydS5odG1sIzE3NTNcbiAgICB2YXIgcnUgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdydScsIHtcbiAgICAgICAgbW9udGhzIDoge1xuICAgICAgICAgICAgZm9ybWF0OiAn0Y/QvdCy0LDRgNGPX9GE0LXQstGA0LDQu9GPX9C80LDRgNGC0LBf0LDQv9GA0LXQu9GPX9C80LDRj1/QuNGO0L3Rj1/QuNGO0LvRj1/QsNCy0LPRg9GB0YLQsF/RgdC10L3RgtGP0LHRgNGPX9C+0LrRgtGP0LHRgNGPX9C90L7Rj9Cx0YDRj1/QtNC10LrQsNCx0YDRjycuc3BsaXQoJ18nKSxcbiAgICAgICAgICAgIHN0YW5kYWxvbmU6ICfRj9C90LLQsNGA0Yxf0YTQtdCy0YDQsNC70Yxf0LzQsNGA0YJf0LDQv9GA0LXQu9GMX9C80LDQuV/QuNGO0L3RjF/QuNGO0LvRjF/QsNCy0LPRg9GB0YJf0YHQtdC90YLRj9Cx0YDRjF/QvtC60YLRj9Cx0YDRjF/QvdC+0Y/QsdGA0Yxf0LTQtdC60LDQsdGA0YwnLnNwbGl0KCdfJylcbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiB7XG4gICAgICAgICAgICAvLyDQv9C+IENMRFIg0LjQvNC10L3QvdC+IFwi0LjRjtC7LlwiINC4IFwi0LjRjtC9LlwiLCDQvdC+INC60LDQutC+0Lkg0YHQvNGL0YHQuyDQvNC10L3Rj9GC0Ywg0LHRg9C60LLRgyDQvdCwINGC0L7Rh9C60YMgP1xuICAgICAgICAgICAgZm9ybWF0OiAn0Y/QvdCyLl/RhNC10LLRgC5f0LzQsNGALl/QsNC/0YAuX9C80LDRj1/QuNGO0L3Rj1/QuNGO0LvRj1/QsNCy0LMuX9GB0LXQvdGCLl/QvtC60YIuX9C90L7Rj9CxLl/QtNC10LouJy5zcGxpdCgnXycpLFxuICAgICAgICAgICAgc3RhbmRhbG9uZTogJ9GP0L3Qsi5f0YTQtdCy0YAuX9C80LDRgNGCX9Cw0L/RgC5f0LzQsNC5X9C40Y7QvdGMX9C40Y7Qu9GMX9Cw0LLQsy5f0YHQtdC90YIuX9C+0LrRgi5f0L3QvtGP0LEuX9C00LXQui4nLnNwbGl0KCdfJylcbiAgICAgICAgfSxcbiAgICAgICAgd2Vla2RheXMgOiB7XG4gICAgICAgICAgICBzdGFuZGFsb25lOiAn0LLQvtGB0LrRgNC10YHQtdC90YzQtV/Qv9C+0L3QtdC00LXQu9GM0L3QuNC6X9Cy0YLQvtGA0L3QuNC6X9GB0YDQtdC00LBf0YfQtdGC0LLQtdGA0LNf0L/Rj9GC0L3QuNGG0LBf0YHRg9Cx0LHQvtGC0LAnLnNwbGl0KCdfJyksXG4gICAgICAgICAgICBmb3JtYXQ6ICfQstC+0YHQutGA0LXRgdC10L3RjNC1X9C/0L7QvdC10LTQtdC70YzQvdC40Lpf0LLRgtC+0YDQvdC40Lpf0YHRgNC10LTRg1/Rh9C10YLQstC10YDQs1/Qv9GP0YLQvdC40YbRg1/RgdGD0LHQsdC+0YLRgycuc3BsaXQoJ18nKSxcbiAgICAgICAgICAgIGlzRm9ybWF0OiAvXFxbID9b0JLQsl0gPyg/OtC/0YDQvtGI0LvRg9GOfNGB0LvQtdC00YPRjtGJ0YPRjnzRjdGC0YMpPyA/XFxdID9kZGRkL1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ9Cy0YFf0L/QvV/QstGCX9GB0YBf0YfRgl/Qv9GCX9GB0LEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ9Cy0YFf0L/QvV/QstGCX9GB0YBf0YfRgl/Qv9GCX9GB0LEnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlIDogbW9udGhzUGFyc2UsXG4gICAgICAgIGxvbmdNb250aHNQYXJzZSA6IG1vbnRoc1BhcnNlLFxuICAgICAgICBzaG9ydE1vbnRoc1BhcnNlIDogbW9udGhzUGFyc2UsXG5cbiAgICAgICAgLy8g0L/QvtC70L3Ri9C1INC90LDQt9Cy0LDQvdC40Y8g0YEg0L/QsNC00LXQttCw0LzQuCwg0L/QviDRgtGA0Lgg0LHRg9C60LLRiywg0LTQu9GPINC90LXQutC+0YLQvtGA0YvRhSwg0L/QviA0INCx0YPQutCy0YssINGB0L7QutGA0LDRidC10L3QuNGPINGBINGC0L7Rh9C60L7QuSDQuCDQsdC10Lcg0YLQvtGH0LrQuFxuICAgICAgICBtb250aHNSZWdleDogL14o0Y/QvdCy0LDRgFvRjNGPXXzRj9C90LJcXC4/fNGE0LXQstGA0LDQu1vRjNGPXXzRhNC10LLRgD9cXC4/fNC80LDRgNGC0LA/fNC80LDRgFxcLj980LDQv9GA0LXQu1vRjNGPXXzQsNC/0YBcXC4/fNC80LBb0LnRj1180LjRjtC9W9GM0Y9dfNC40Y7QvVxcLj980LjRjtC7W9GM0Y9dfNC40Y7Qu1xcLj980LDQstCz0YPRgdGC0LA/fNCw0LLQs1xcLj980YHQtdC90YLRj9Cx0YBb0YzRj1180YHQtdC90YI/XFwuP3zQvtC60YLRj9Cx0YBb0YzRj1180L7QutGCXFwuP3zQvdC+0Y/QsdGAW9GM0Y9dfNC90L7Rj9CxP1xcLj980LTQtdC60LDQsdGAW9GM0Y9dfNC00LXQulxcLj8pL2ksXG5cbiAgICAgICAgLy8g0LrQvtC/0LjRjyDQv9GA0LXQtNGL0LTRg9GJ0LXQs9C+XG4gICAgICAgIG1vbnRoc1Nob3J0UmVnZXg6IC9eKNGP0L3QstCw0YBb0YzRj1180Y/QvdCyXFwuP3zRhNC10LLRgNCw0Ltb0YzRj1180YTQtdCy0YA/XFwuP3zQvNCw0YDRgtCwP3zQvNCw0YBcXC4/fNCw0L/RgNC10Ltb0YzRj1180LDQv9GAXFwuP3zQvNCwW9C50Y9dfNC40Y7QvVvRjNGPXXzQuNGO0L1cXC4/fNC40Y7Qu1vRjNGPXXzQuNGO0LtcXC4/fNCw0LLQs9GD0YHRgtCwP3zQsNCy0LNcXC4/fNGB0LXQvdGC0Y/QsdGAW9GM0Y9dfNGB0LXQvdGCP1xcLj980L7QutGC0Y/QsdGAW9GM0Y9dfNC+0LrRglxcLj980L3QvtGP0LHRgFvRjNGPXXzQvdC+0Y/QsT9cXC4/fNC00LXQutCw0LHRgFvRjNGPXXzQtNC10LpcXC4/KS9pLFxuXG4gICAgICAgIC8vINC/0L7Qu9C90YvQtSDQvdCw0LfQstCw0L3QuNGPINGBINC/0LDQtNC10LbQsNC80LhcbiAgICAgICAgbW9udGhzU3RyaWN0UmVnZXg6IC9eKNGP0L3QstCw0YBb0Y/RjF180YTQtdCy0YDQsNC7W9GP0YxdfNC80LDRgNGC0LA/fNCw0L/RgNC10Ltb0Y/RjF180LzQsFvRj9C5XXzQuNGO0L1b0Y/RjF180LjRjtC7W9GP0YxdfNCw0LLQs9GD0YHRgtCwP3zRgdC10L3RgtGP0LHRgFvRj9GMXXzQvtC60YLRj9Cx0YBb0Y/RjF180L3QvtGP0LHRgFvRj9GMXXzQtNC10LrQsNCx0YBb0Y/RjF0pL2ksXG5cbiAgICAgICAgLy8g0JLRi9GA0LDQttC10L3QuNC1LCDQutC+0YLQvtGA0L7QtSDRgdC+0L7RgtCy0LXRgdGC0LLRg9C10YIg0YLQvtC70YzQutC+INGB0L7QutGA0LDRidGR0L3QvdGL0Lwg0YTQvtGA0LzQsNC8XG4gICAgICAgIG1vbnRoc1Nob3J0U3RyaWN0UmVnZXg6IC9eKNGP0L3QslxcLnzRhNC10LLRgD9cXC580LzQsNGAW9GCLl180LDQv9GAXFwufNC80LBb0Y/QuV180LjRjtC9W9GM0Y8uXXzQuNGO0Ltb0YzRjy5dfNCw0LLQs1xcLnzRgdC10L3Rgj9cXC580L7QutGCXFwufNC90L7Rj9CxP1xcLnzQtNC10LpcXC4pL2ksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVkg0LMuJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSDQsy4sIEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSDQsy4sIEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vQodC10LPQvtC00L3Rjywg0LJdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb0JfQsNCy0YLRgNCwLCDQsl0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1vQktGH0LXRgNCwLCDQsl0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uIChub3cpIHtcbiAgICAgICAgICAgICAgICBpZiAobm93LndlZWsoKSAhPT0gdGhpcy53ZWVrKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JIg0YHQu9C10LTRg9GO0YnQtdC1XSBkZGRkLCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQkiDRgdC70LXQtNGD0Y7RidC40LldIGRkZGQsIFvQsl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CSINGB0LvQtdC00YPRjtGJ0YPRjl0gZGRkZCwgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kYXkoKSA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JLQvl0gZGRkZCwgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQkl0gZGRkZCwgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uIChub3cpIHtcbiAgICAgICAgICAgICAgICBpZiAobm93LndlZWsoKSAhPT0gdGhpcy53ZWVrKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmRheSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JIg0L/RgNC+0YjQu9C+0LVdIGRkZGQsIFvQsl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9CSINC/0YDQvtGI0LvRi9C5XSBkZGRkLCBb0LJdIExUJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQkiDQv9GA0L7RiNC70YPRjl0gZGRkZCwgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kYXkoKSA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0JLQvl0gZGRkZCwgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vQkl0gZGRkZCwgW9CyXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAn0YfQtdGA0LXQtyAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzINC90LDQt9Cw0LQnLFxuICAgICAgICAgICAgcyA6ICfQvdC10YHQutC+0LvRjNC60L4g0YHQtdC60YPQvdC0JyxcbiAgICAgICAgICAgIHNzIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIG0gOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgbW0gOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgaCA6ICfRh9Cw0YEnLFxuICAgICAgICAgICAgaGggOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgZCA6ICfQtNC10L3RjCcsXG4gICAgICAgICAgICBkZCA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBNIDogJ9C80LXRgdGP0YYnLFxuICAgICAgICAgICAgTU0gOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgeSA6ICfQs9C+0LQnLFxuICAgICAgICAgICAgeXkgOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/QvdC+0YfQuHzRg9GC0YDQsHzQtNC90Y980LLQtdGH0LXRgNCwL2ksXG4gICAgICAgIGlzUE0gOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAvXijQtNC90Y980LLQtdGH0LXRgNCwKSQvLnRlc3QoaW5wdXQpO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0L3QvtGH0LgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9GD0YLRgNCwJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE3KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfQtNC90Y8nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9Cy0LXRh9C10YDQsCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS0o0Ll80LPQvnzRjykvLFxuICAgICAgICBvcmRpbmFsOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnREREJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0LknO1xuICAgICAgICAgICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3Qs9C+JztcbiAgICAgICAgICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgICAgICBjYXNlICdXJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICct0Y8nO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJ1O1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgbW9udGhzID0gW1xuICAgICAgICAn2KzZhtmI2LHZiicsXG4gICAgICAgICfZgdmK2KjYsdmI2LHZiicsXG4gICAgICAgICfZhdin2LHahicsXG4gICAgICAgICfYp9m+2LHZitmEJyxcbiAgICAgICAgJ9mF2KbZiicsXG4gICAgICAgICfYrNmI2YYnLFxuICAgICAgICAn2KzZiNmE2KfYodmQJyxcbiAgICAgICAgJ9ii2q/Ys9m9JyxcbiAgICAgICAgJ9iz2YrZvtm92YXYqNixJyxcbiAgICAgICAgJ9ii2qrZvdmI2KjYsScsXG4gICAgICAgICfZhtmI2YXYqNixJyxcbiAgICAgICAgJ9qK2LPZhdio2LEnXG4gICAgXTtcbiAgICB2YXIgZGF5cyA9IFtcbiAgICAgICAgJ9ii2obYsScsXG4gICAgICAgICfYs9mI2YXYsScsXG4gICAgICAgICfYp9qx2KfYsdmIJyxcbiAgICAgICAgJ9in2LHYqNi5JyxcbiAgICAgICAgJ9iu2YXZitizJyxcbiAgICAgICAgJ9is2YXYuScsXG4gICAgICAgICfah9mG2ofYsSdcbiAgICBdO1xuXG4gICAgdmFyIHNkID0gbW9tZW50LmRlZmluZUxvY2FsZSgnc2QnLCB7XG4gICAgICAgIG1vbnRocyA6IG1vbnRocyxcbiAgICAgICAgbW9udGhzU2hvcnQgOiBtb250aHMsXG4gICAgICAgIHdlZWtkYXlzIDogZGF5cyxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6IGRheXMsXG4gICAgICAgIHdlZWtkYXlzTWluIDogZGF5cyxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGTYjCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL9i12KjYrXzYtNin2YUvLFxuICAgICAgICBpc1BNIDogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gJ9i02KfZhScgPT09IGlucHV0O1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9i12KjYrSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gJ9i02KfZhSc7XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdb2KfahF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdb2LPagNin2rvZil0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBb2Kfas9mK2YYg2YfZgdiq2Yog2KrZil0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdb2qrYp9mE2YfZh10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW9qv2LLYsdmK2YQg2YfZgdiq2YpdIGRkZGQgW9iq2YpdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICclcyDZvtmI2KEnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyDYp9qzJyxcbiAgICAgICAgICAgIHMgOiAn2obZhtivINiz2YraqtmG2oonLFxuICAgICAgICAgICAgc3MgOiAnJWQg2LPZitqq2YbaiicsXG4gICAgICAgICAgICBtIDogJ9mH2qog2YXZhtm9JyxcbiAgICAgICAgICAgIG1tIDogJyVkINmF2YbZvScsXG4gICAgICAgICAgICBoIDogJ9mH2qog2qrZhNin2qonLFxuICAgICAgICAgICAgaGggOiAnJWQg2qrZhNin2qonLFxuICAgICAgICAgICAgZCA6ICfZh9qqINqP2YrZhtmH2YYnLFxuICAgICAgICAgICAgZGQgOiAnJWQg2o/ZitmG2YfZhicsXG4gICAgICAgICAgICBNIDogJ9mH2qog2YXZh9mK2YbZiCcsXG4gICAgICAgICAgICBNTSA6ICclZCDZhdmH2YrZhtinJyxcbiAgICAgICAgICAgIHkgOiAn2YfaqiDYs9in2YQnLFxuICAgICAgICAgICAgeXkgOiAnJWQg2LPYp9mEJ1xuICAgICAgICB9LFxuICAgICAgICBwcmVwYXJzZTogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC/YjC9nLCAnLCcpO1xuICAgICAgICB9LFxuICAgICAgICBwb3N0Zm9ybWF0OiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoLywvZywgJ9iMJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHNkO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgc2UgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdzZScsIHtcbiAgICAgICAgbW9udGhzIDogJ2/EkcSRYWphZ2Vtw6FubnVfZ3VvdnZhbcOhbm51X25qdWvEjWFtw6FubnVfY3VvxYtvbcOhbm51X21pZXNzZW3DoW5udV9nZWFzc2Vtw6FubnVfc3VvaWRuZW3DoW5udV9ib3JnZW3DoW5udV/EjWFrxI1hbcOhbm51X2dvbGdnb3Rtw6FubnVfc2vDoWJtYW3DoW5udV9qdW92bGFtw6FubnUnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ2/EkcSRal9ndW92X25qdWtfY3VvX21pZXNfZ2Vhc19zdW9pX2JvcmdfxI1ha8SNX2dvbGdfc2vDoWJfanVvdicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnc290bmFiZWFpdmlfdnVvc3PDoXJnYV9tYcWLxYtlYsOhcmdhX2dhc2thdmFoa2t1X2R1b3Jhc3RhdF9iZWFyamFkYXRfbMOhdnZhcmRhdCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdzb3RuX3Z1b3NfbWHFi19nYXNrX2R1b3JfYmVhcl9sw6F2Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdzX3ZfbV9nX2RfYl9MJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEwgOiAnTU1NTSBELiBbYi5dIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ01NTU0gRC4gW2IuXSBZWVlZIFt0aS5dIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgTU1NTSBELiBbYi5dIFlZWVkgW3RpLl0gSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tvdG5lIHRpXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW2lodHRpbiB0aV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFt0aV0gTFQnLFxuICAgICAgICAgICAgbGFzdERheTogJ1tpa3RlIHRpXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ1tvdmRkaXRdIGRkZGQgW3RpXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICclcyBnZWHFvmVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnbWHFi2l0ICVzJyxcbiAgICAgICAgICAgIHMgOiAnbW9hZGRlIHNla3VuZGRhdCcsXG4gICAgICAgICAgICBzczogJyVkIHNla3VuZGRhdCcsXG4gICAgICAgICAgICBtIDogJ29rdGEgbWludWh0YScsXG4gICAgICAgICAgICBtbSA6ICclZCBtaW51aHRhdCcsXG4gICAgICAgICAgICBoIDogJ29rdGEgZGlpbW11JyxcbiAgICAgICAgICAgIGhoIDogJyVkIGRpaW1tdXQnLFxuICAgICAgICAgICAgZCA6ICdva3RhIGJlYWl2aScsXG4gICAgICAgICAgICBkZCA6ICclZCBiZWFpdnZpdCcsXG4gICAgICAgICAgICBNIDogJ29rdGEgbcOhbm51JyxcbiAgICAgICAgICAgIE1NIDogJyVkIG3DoW51dCcsXG4gICAgICAgICAgICB5IDogJ29rdGEgamFoa2knLFxuICAgICAgICAgICAgeXkgOiAnJWQgamFnaXQnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWwgOiAnJWQuJyxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc2U7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIC8qanNoaW50IC1XMTAwKi9cbiAgICB2YXIgc2kgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdzaScsIHtcbiAgICAgICAgbW9udGhzIDogJ+C2ouC2seC3gOC3j+C2u+C3kl/gtrTgt5ngtrbgtrvgt4Dgt4/gtrvgt5Jf4La44LeP4La74LeK4Lat4LeUX+C2heC2tOC3iuKAjeC2u+C3muC2veC3il/gtrjgt5Dgtrrgt5Jf4Lai4LeW4Lax4LeSX+C2ouC3luC2veC3kl/gtoXgtpzgt53gt4Pgt4rgtq3gt5Rf4LeD4LeQ4La04LeK4Lat4LeQ4La44LeK4La24La74LeKX+C2lOC2muC3iuC2reC3neC2tuC2u+C3il/gtrHgt5zgt4Dgt5Dgtrjgt4rgtrbgtrvgt4pf4Lav4LeZ4LeD4LeQ4La44LeK4La24La74LeKJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICfgtqLgtrFf4La04LeZ4La2X+C2uOC3j+C2u+C3il/gtoXgtrTgt4pf4La44LeQ4La64LeSX+C2ouC3luC2seC3kl/gtqLgt5bgtr3gt5Jf4LaF4Lac4LedX+C3g+C3kOC2tOC3il/gtpTgtprgt4pf4Lax4Lec4LeA4LeQX+C2r+C3meC3g+C3kCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAn4LaJ4La74LeS4Lav4LePX+C3g+C2s+C3lOC2r+C3j1/gtoXgtp/gt4Tgtrvgt5Tgt4Dgt4/gtq/gt49f4La24Lav4LeP4Lav4LePX+C2tuC3iuKAjeC2u+C3hOC3g+C3iuC2tOC2reC3kuC2seC3iuC2r+C3j1/gt4Pgt5Lgtprgt5Tgtrvgt4/gtq/gt49f4LeD4LeZ4Lax4LeD4LeU4La74LeP4Lav4LePJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ+C2ieC2u+C3kl/gt4PgtrPgt5Rf4LaF4LafX+C2tuC2r+C3j1/gtrbgt4rigI3gtrvgt4Rf4LeD4LeS4Laa4LeUX+C3g+C3meC2sScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn4LaJX+C3g1/gtoVf4La2X+C2tuC3iuKAjeC2u1/gt4Pgt5Jf4LeD4LeZJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ2EgaDptbScsXG4gICAgICAgICAgICBMVFMgOiAnYSBoOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnWVlZWS9NTS9ERCcsXG4gICAgICAgICAgICBMTCA6ICdZWVlZIE1NTU0gRCcsXG4gICAgICAgICAgICBMTEwgOiAnWVlZWSBNTU1NIEQsIGEgaDptbScsXG4gICAgICAgICAgICBMTExMIDogJ1lZWVkgTU1NTSBEIFvgt4Dgt5DgtrHgt5JdIGRkZGQsIGEgaDptbTpzcydcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vgtoXgtq9dIExUW+C2p10nLFxuICAgICAgICAgICAgbmV4dERheSA6ICdb4LeE4LeZ4LanXSBMVFvgtqddJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgTFRb4LanXScsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1vgtorgtrrgt5pdIExUW+C2p10nLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW+C2tOC3g+C3lOC2nOC3kuC2ul0gZGRkZCBMVFvgtqddJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICclc+C2muC3kuC2seC3iicsXG4gICAgICAgICAgICBwYXN0IDogJyVz4Laa4LanIOC2tOC3meC2uycsXG4gICAgICAgICAgICBzIDogJ+C2reC2reC3iuC2tOC2uyDgtprgt5Lgt4Tgt5LgtrTgtronLFxuICAgICAgICAgICAgc3MgOiAn4Lat4Lat4LeK4La04La7ICVkJyxcbiAgICAgICAgICAgIG0gOiAn4La44LeS4Lax4LeS4Lat4LeK4Lat4LeU4LeAJyxcbiAgICAgICAgICAgIG1tIDogJ+C2uOC3kuC2seC3kuC2reC3iuC2reC3lCAlZCcsXG4gICAgICAgICAgICBoIDogJ+C2tOC3kOC2uicsXG4gICAgICAgICAgICBoaCA6ICfgtrTgt5DgtrogJWQnLFxuICAgICAgICAgICAgZCA6ICfgtq/gt5LgtrHgtronLFxuICAgICAgICAgICAgZGQgOiAn4Lav4LeS4LaxICVkJyxcbiAgICAgICAgICAgIE0gOiAn4La44LeP4LeD4La6JyxcbiAgICAgICAgICAgIE1NIDogJ+C2uOC3j+C3gyAlZCcsXG4gICAgICAgICAgICB5IDogJ+C3gOC3g+C2uycsXG4gICAgICAgICAgICB5eSA6ICfgt4Dgt4PgtrsgJWQnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfSDgt4Dgt5DgtrHgt5IvLFxuICAgICAgICBvcmRpbmFsIDogZnVuY3Rpb24gKG51bWJlcikge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICcg4LeA4LeQ4Lax4LeSJztcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZSA6IC/gtrTgt5ngtrsg4LeA4La74LeUfOC2tOC3g+C3iiDgt4Dgtrvgt5R84La04LeZLuC3gHzgtrQu4LeALi8sXG4gICAgICAgIGlzUE0gOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCA9PT0gJ+C2tC7gt4AuJyB8fCBpbnB1dCA9PT0gJ+C2tOC3g+C3iiDgt4Dgtrvgt5QnO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VycywgbWludXRlcywgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXJzID4gMTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICfgtrQu4LeALicgOiAn4La04LeD4LeKIOC3gOC2u+C3lCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ+C2tOC3mS7gt4AuJyA6ICfgtrTgt5ngtrsg4LeA4La74LeUJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHNpO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgbW9udGhzID0gJ2phbnXDoXJfZmVicnXDoXJfbWFyZWNfYXByw61sX23DoWpfasO6bl9qw7psX2F1Z3VzdF9zZXB0ZW1iZXJfb2t0w7NiZXJfbm92ZW1iZXJfZGVjZW1iZXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0ID0gJ2phbl9mZWJfbWFyX2Fwcl9tw6FqX2rDum5fasO6bF9hdWdfc2VwX29rdF9ub3ZfZGVjJy5zcGxpdCgnXycpO1xuICAgIGZ1bmN0aW9uIHBsdXJhbChuKSB7XG4gICAgICAgIHJldHVybiAobiA+IDEpICYmIChuIDwgNSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSwgaXNGdXR1cmUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG51bWJlciArICcgJztcbiAgICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgICAgIGNhc2UgJ3MnOiAgLy8gYSBmZXcgc2Vjb25kcyAvIGluIGEgZmV3IHNlY29uZHMgLyBhIGZldyBzZWNvbmRzIGFnb1xuICAgICAgICAgICAgICAgIHJldHVybiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkgPyAncMOhciBzZWvDum5kJyA6ICdww6FyIHNla3VuZGFtaSc7XG4gICAgICAgICAgICBjYXNlICdzcyc6IC8vIDkgc2Vjb25kcyAvIGluIDkgc2Vjb25kcyAvIDkgc2Vjb25kcyBhZ29cbiAgICAgICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ3Nla3VuZHknIDogJ3Nla8O6bmQnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ3Nla3VuZGFtaSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbSc6ICAvLyBhIG1pbnV0ZSAvIGluIGEgbWludXRlIC8gYSBtaW51dGUgYWdvXG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAnbWluw7p0YScgOiAoaXNGdXR1cmUgPyAnbWluw7p0dScgOiAnbWluw7p0b3UnKTtcbiAgICAgICAgICAgIGNhc2UgJ21tJzogLy8gOSBtaW51dGVzIC8gaW4gOSBtaW51dGVzIC8gOSBtaW51dGVzIGFnb1xuICAgICAgICAgICAgICAgIGlmICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAocGx1cmFsKG51bWJlcikgPyAnbWluw7p0eScgOiAnbWluw7p0Jyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdtaW7DunRhbWknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2gnOiAgLy8gYW4gaG91ciAvIGluIGFuIGhvdXIgLyBhbiBob3VyIGFnb1xuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gJ2hvZGluYScgOiAoaXNGdXR1cmUgPyAnaG9kaW51JyA6ICdob2Rpbm91Jyk7XG4gICAgICAgICAgICBjYXNlICdoaCc6IC8vIDkgaG91cnMgLyBpbiA5IGhvdXJzIC8gOSBob3VycyBhZ29cbiAgICAgICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ2hvZGlueScgOiAnaG9kw61uJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdob2RpbmFtaSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZCc6ICAvLyBhIGRheSAvIGluIGEgZGF5IC8gYSBkYXkgYWdvXG4gICAgICAgICAgICAgICAgcmV0dXJuICh3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlKSA/ICdkZcWIJyA6ICdkxYhvbSc7XG4gICAgICAgICAgICBjYXNlICdkZCc6IC8vIDkgZGF5cyAvIGluIDkgZGF5cyAvIDkgZGF5cyBhZ29cbiAgICAgICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ2RuaScgOiAnZG7DrScpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnZMWIYW1pJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdNJzogIC8vIGEgbW9udGggLyBpbiBhIG1vbnRoIC8gYSBtb250aCBhZ29cbiAgICAgICAgICAgICAgICByZXR1cm4gKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpID8gJ21lc2lhYycgOiAnbWVzaWFjb20nO1xuICAgICAgICAgICAgY2FzZSAnTU0nOiAvLyA5IG1vbnRocyAvIGluIDkgbW9udGhzIC8gOSBtb250aHMgYWdvXG4gICAgICAgICAgICAgICAgaWYgKHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArIChwbHVyYWwobnVtYmVyKSA/ICdtZXNpYWNlJyA6ICdtZXNpYWNvdicpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnbWVzaWFjbWknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3knOiAgLy8gYSB5ZWFyIC8gaW4gYSB5ZWFyIC8gYSB5ZWFyIGFnb1xuICAgICAgICAgICAgICAgIHJldHVybiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkgPyAncm9rJyA6ICdyb2tvbSc7XG4gICAgICAgICAgICBjYXNlICd5eSc6IC8vIDkgeWVhcnMgLyBpbiA5IHllYXJzIC8gOSB5ZWFycyBhZ29cbiAgICAgICAgICAgICAgICBpZiAod2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgKHBsdXJhbChudW1iZXIpID8gJ3Jva3knIDogJ3Jva292Jyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdCArICdyb2ttaSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHNrID0gbW9tZW50LmRlZmluZUxvY2FsZSgnc2snLCB7XG4gICAgICAgIG1vbnRocyA6IG1vbnRocyxcbiAgICAgICAgbW9udGhzU2hvcnQgOiBtb250aHNTaG9ydCxcbiAgICAgICAgd2Vla2RheXMgOiAnbmVkZcS+YV9wb25kZWxva191dG9yb2tfc3RyZWRhX8WhdHZydG9rX3BpYXRva19zb2JvdGEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnbmVfcG9fdXRfc3RfxaF0X3BpX3NvJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICduZV9wb191dF9zdF/FoXRfcGlfc28nLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQ6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdELiBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QuIE1NTU0gWVlZWSBIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCBELiBNTU1NIFlZWVkgSDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW2RuZXMgb10gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1t6YWp0cmEgb10gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdiBuZWRlxL51IG9dIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2XSBkZGRkIFtvXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3Ygc3RyZWR1IG9dIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdm8gxaF0dnJ0b2sgb10gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2IHBpYXRvayBvXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3Ygc29ib3R1IG9dIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdERheTogJ1t2xI1lcmEgb10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbbWludWzDuiBuZWRlxL51IG9dIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1ttaW51bMO9XSBkZGRkIFtvXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW21pbnVsw7ogc3RyZWR1IG9dIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1ttaW51bMO9XSBkZGRkIFtvXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW21pbnVsw7ogc29ib3R1IG9dIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnemEgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICdwcmVkICVzJyxcbiAgICAgICAgICAgIHMgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBzcyA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG0gOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBtbSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGggOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBoaCA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGQgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBkZCA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIE0gOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBNTSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHkgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICB5eSA6IHRyYW5zbGF0ZVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHNrO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzUmVsYXRpdmVUaW1lKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbnVtYmVyICsgJyAnO1xuICAgICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICAgICAgY2FzZSAncyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnbmVrYWogc2VrdW5kJyA6ICduZWthaiBzZWt1bmRhbWknO1xuICAgICAgICAgICAgY2FzZSAnc3MnOlxuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggPyAnc2VrdW5kbycgOiAnc2VrdW5kaSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnc2VrdW5kaScgOiAnc2VrdW5kYWgnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyIDwgNSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdzZWt1bmRlJyA6ICdzZWt1bmRhaCc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9ICdzZWt1bmQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgY2FzZSAnbSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAnZW5hIG1pbnV0YScgOiAnZW5vIG1pbnV0byc7XG4gICAgICAgICAgICBjYXNlICdtbSc6XG4gICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCA/ICdtaW51dGEnIDogJ21pbnV0byc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnbWludXRpJyA6ICdtaW51dGFtYSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPCA1KSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ21pbnV0ZScgOiAnbWludXRhbWknO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ21pbnV0JyA6ICdtaW51dGFtaSc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICBjYXNlICdoJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/ICdlbmEgdXJhJyA6ICdlbm8gdXJvJztcbiAgICAgICAgICAgIGNhc2UgJ2hoJzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4ID8gJ3VyYScgOiAndXJvJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICd1cmknIDogJ3VyYW1hJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA8IDUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAndXJlJyA6ICd1cmFtaSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAndXInIDogJ3VyYW1pJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ2VuIGRhbicgOiAnZW5pbSBkbmVtJztcbiAgICAgICAgICAgIGNhc2UgJ2RkJzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ2RhbicgOiAnZG5lbSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1iZXIgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnZG5pJyA6ICdkbmV2b21hJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdkbmknIDogJ2RuZXZpJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIGNhc2UgJ00nOlxuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ2VuIG1lc2VjJyA6ICdlbmltIG1lc2VjZW0nO1xuICAgICAgICAgICAgY2FzZSAnTU0nOlxuICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnbWVzZWMnIDogJ21lc2VjZW0nO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ21lc2VjYScgOiAnbWVzZWNlbWEnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyIDwgNSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdtZXNlY2UnIDogJ21lc2VjaSc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHdpdGhvdXRTdWZmaXggfHwgaXNGdXR1cmUgPyAnbWVzZWNldicgOiAnbWVzZWNpJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIGNhc2UgJ3knOlxuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ2VubyBsZXRvJyA6ICdlbmltIGxldG9tJztcbiAgICAgICAgICAgIGNhc2UgJ3l5JzpcbiAgICAgICAgICAgICAgICBpZiAobnVtYmVyID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSB3aXRob3V0U3VmZml4IHx8IGlzRnV0dXJlID8gJ2xldG8nIDogJ2xldG9tJztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG51bWJlciA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdsZXRpJyA6ICdsZXRvbWEnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtYmVyIDwgNSkge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdsZXRhJyA6ICdsZXRpJztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gd2l0aG91dFN1ZmZpeCB8fCBpc0Z1dHVyZSA/ICdsZXQnIDogJ2xldGknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHNsID0gbW9tZW50LmRlZmluZUxvY2FsZSgnc2wnLCB7XG4gICAgICAgIG1vbnRocyA6ICdqYW51YXJfZmVicnVhcl9tYXJlY19hcHJpbF9tYWpfanVuaWpfanVsaWpfYXZndXN0X3NlcHRlbWJlcl9va3RvYmVyX25vdmVtYmVyX2RlY2VtYmVyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdqYW4uX2ZlYi5fbWFyLl9hcHIuX21hai5fanVuLl9qdWwuX2F2Zy5fc2VwLl9va3QuX25vdi5fZGVjLicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXMgOiAnbmVkZWxqYV9wb25lZGVsamVrX3RvcmVrX3NyZWRhX8SNZXRydGVrX3BldGVrX3NvYm90YScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICduZWQuX3Bvbi5fdG9yLl9zcmUuX8SNZXQuX3BldC5fc29iLicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnbmVfcG9fdG9fc3JfxI1lX3BlX3NvJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRC4gTU1NTSBZWVlZIEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBELiBNTU1NIFlZWVkgSDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5ICA6ICdbZGFuZXMgb2JdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgIDogJ1tqdXRyaSBvYl0gTFQnLFxuXG4gICAgICAgICAgICBuZXh0V2VlayA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdl0gW25lZGVsam9dIFtvYl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2XSBbc3JlZG9dIFtvYl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t2XSBbc29ib3RvXSBbb2JdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdl0gZGRkZCBbb2JdIExUJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFzdERheSAgOiAnW3bEjWVyYWogb2JdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1twcmVqxaFuam9dIFtuZWRlbGpvXSBbb2JdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbcHJlasWhbmpvXSBbc3JlZG9dIFtvYl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1twcmVqxaFuam9dIFtzb2JvdG9dIFtvYl0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1twcmVqxaFuamldIGRkZGQgW29iXSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICfEjWV6ICVzJyxcbiAgICAgICAgICAgIHBhc3QgICA6ICdwcmVkICVzJyxcbiAgICAgICAgICAgIHMgICAgICA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBzcyAgICAgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgbSAgICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIG1tICAgICA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBoICAgICAgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgaGggICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGQgICAgICA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBkZCAgICAgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgTSAgICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIE1NICAgICA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICB5ICAgICAgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgeXkgICAgIDogcHJvY2Vzc1JlbGF0aXZlVGltZVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHNsO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgc3EgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdzcScsIHtcbiAgICAgICAgbW9udGhzIDogJ0phbmFyX1Noa3VydF9NYXJzX1ByaWxsX01hal9RZXJzaG9yX0tvcnJpa19HdXNodF9TaHRhdG9yX1RldG9yX07Dq250b3JfRGhqZXRvcicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnSmFuX1Noa19NYXJfUHJpX01hal9RZXJfS29yX0d1c19TaHRfVGV0X07Dq25fRGhqJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdFIERpZWxfRSBIw6tuw6tfRSBNYXJ0w6tfRSBNw6tya3Vyw6tfRSBFbmp0ZV9FIFByZW10ZV9FIFNodHVuw6snLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnRGllX0jDq25fTWFyX03Dq3JfRW5qX1ByZV9TaHQnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ0RfSF9NYV9Nw6tfRV9QX1NoJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAvUER8TUQvLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dC5jaGFyQXQoMCkgPT09ICdNJztcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBob3VycyA8IDEyID8gJ1BEJyA6ICdNRCc7XG4gICAgICAgIH0sXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1tTb3QgbsOrXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1tOZXPDq3IgbsOrXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFtuw6tdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW0RqZSBuw6tdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ2RkZGQgW2Uga2FsdWFyIG7Dq10gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ27DqyAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzIG3DqyBwYXLDqycsXG4gICAgICAgICAgICBzIDogJ2Rpc2Egc2Vrb25kYScsXG4gICAgICAgICAgICBzcyA6ICclZCBzZWtvbmRhJyxcbiAgICAgICAgICAgIG0gOiAnbmrDqyBtaW51dMOrJyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbnV0YScsXG4gICAgICAgICAgICBoIDogJ25qw6sgb3LDqycsXG4gICAgICAgICAgICBoaCA6ICclZCBvcsOrJyxcbiAgICAgICAgICAgIGQgOiAnbmrDqyBkaXTDqycsXG4gICAgICAgICAgICBkZCA6ICclZCBkaXTDqycsXG4gICAgICAgICAgICBNIDogJ25qw6sgbXVhaicsXG4gICAgICAgICAgICBNTSA6ICclZCBtdWFqJyxcbiAgICAgICAgICAgIHkgOiAnbmrDqyB2aXQnLFxuICAgICAgICAgICAgeXkgOiAnJWQgdml0ZSdcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbCA6ICclZC4nLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBzcTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHRyYW5zbGF0b3IgPSB7XG4gICAgICAgIHdvcmRzOiB7IC8vRGlmZmVyZW50IGdyYW1tYXRpY2FsIGNhc2VzXG4gICAgICAgICAgICBzczogWydzZWt1bmRhJywgJ3Nla3VuZGUnLCAnc2VrdW5kaSddLFxuICAgICAgICAgICAgbTogWydqZWRhbiBtaW51dCcsICdqZWRuZSBtaW51dGUnXSxcbiAgICAgICAgICAgIG1tOiBbJ21pbnV0JywgJ21pbnV0ZScsICdtaW51dGEnXSxcbiAgICAgICAgICAgIGg6IFsnamVkYW4gc2F0JywgJ2plZG5vZyBzYXRhJ10sXG4gICAgICAgICAgICBoaDogWydzYXQnLCAnc2F0YScsICdzYXRpJ10sXG4gICAgICAgICAgICBkZDogWydkYW4nLCAnZGFuYScsICdkYW5hJ10sXG4gICAgICAgICAgICBNTTogWydtZXNlYycsICdtZXNlY2EnLCAnbWVzZWNpJ10sXG4gICAgICAgICAgICB5eTogWydnb2RpbmEnLCAnZ29kaW5lJywgJ2dvZGluYSddXG4gICAgICAgIH0sXG4gICAgICAgIGNvcnJlY3RHcmFtbWF0aWNhbENhc2U6IGZ1bmN0aW9uIChudW1iZXIsIHdvcmRLZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgPT09IDEgPyB3b3JkS2V5WzBdIDogKG51bWJlciA+PSAyICYmIG51bWJlciA8PSA0ID8gd29yZEtleVsxXSA6IHdvcmRLZXlbMl0pO1xuICAgICAgICB9LFxuICAgICAgICB0cmFuc2xhdGU6IGZ1bmN0aW9uIChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSkge1xuICAgICAgICAgICAgdmFyIHdvcmRLZXkgPSB0cmFuc2xhdG9yLndvcmRzW2tleV07XG4gICAgICAgICAgICBpZiAoa2V5Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB3aXRob3V0U3VmZml4ID8gd29yZEtleVswXSA6IHdvcmRLZXlbMV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnICcgKyB0cmFuc2xhdG9yLmNvcnJlY3RHcmFtbWF0aWNhbENhc2UobnVtYmVyLCB3b3JkS2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgc3IgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCdzcicsIHtcbiAgICAgICAgbW9udGhzOiAnamFudWFyX2ZlYnJ1YXJfbWFydF9hcHJpbF9tYWpfanVuX2p1bF9hdmd1c3Rfc2VwdGVtYmFyX29rdG9iYXJfbm92ZW1iYXJfZGVjZW1iYXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0OiAnamFuLl9mZWIuX21hci5fYXByLl9tYWpfanVuX2p1bF9hdmcuX3NlcC5fb2t0Ll9ub3YuX2RlYy4nLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1BhcnNlRXhhY3Q6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzOiAnbmVkZWxqYV9wb25lZGVsamFrX3V0b3Jha19zcmVkYV/EjWV0dnJ0YWtfcGV0YWtfc3Vib3RhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0OiAnbmVkLl9wb24uX3V0by5fc3JlLl/EjWV0Ll9wZXQuX3N1Yi4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAnbmVfcG9fdXRfc3JfxI1lX3BlX3N1Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdDoge1xuICAgICAgICAgICAgTFQ6ICdIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdIOm1tOnNzJyxcbiAgICAgICAgICAgIEw6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMOiAnRC4gTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTDogJ0QuIE1NTU0gWVlZWSBIOm1tJyxcbiAgICAgICAgICAgIExMTEw6ICdkZGRkLCBELiBNTU1NIFlZWVkgSDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXI6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbZGFuYXMgdV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tzdXRyYSB1XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXkoKSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBbbmVkZWxqdV0gW3VdIExUJztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbdV0gW3NyZWR1XSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBbc3Vib3R1XSBbdV0gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBkZGRkIFt1XSBMVCc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhc3REYXkgIDogJ1tqdcSNZSB1XSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGFzdFdlZWtEYXlzID0gW1xuICAgICAgICAgICAgICAgICAgICAnW3Byb8WhbGVdIFtuZWRlbGplXSBbdV0gTFQnLFxuICAgICAgICAgICAgICAgICAgICAnW3Byb8WhbG9nXSBbcG9uZWRlbGprYV0gW3VdIExUJyxcbiAgICAgICAgICAgICAgICAgICAgJ1twcm/FoWxvZ10gW3V0b3JrYV0gW3VdIExUJyxcbiAgICAgICAgICAgICAgICAgICAgJ1twcm/FoWxlXSBbc3JlZGVdIFt1XSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdbcHJvxaFsb2ddIFvEjWV0dnJ0a2FdIFt1XSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdbcHJvxaFsb2ddIFtwZXRrYV0gW3VdIExUJyxcbiAgICAgICAgICAgICAgICAgICAgJ1twcm/FoWxlXSBbc3Vib3RlXSBbdV0gTFQnXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbGFzdFdlZWtEYXlzW3RoaXMuZGF5KCldO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICd6YSAlcycsXG4gICAgICAgICAgICBwYXN0ICAgOiAncHJlICVzJyxcbiAgICAgICAgICAgIHMgICAgICA6ICduZWtvbGlrbyBzZWt1bmRpJyxcbiAgICAgICAgICAgIHNzICAgICA6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgbSAgICAgIDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBtbSAgICAgOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGggICAgICA6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgaGggICAgIDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBkICAgICAgOiAnZGFuJyxcbiAgICAgICAgICAgIGRkICAgICA6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgTSAgICAgIDogJ21lc2VjJyxcbiAgICAgICAgICAgIE1NICAgICA6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgeSAgICAgIDogJ2dvZGludScsXG4gICAgICAgICAgICB5eSAgICAgOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZVxuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn1cXC4vLFxuICAgICAgICBvcmRpbmFsIDogJyVkLicsXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHNyO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgdHJhbnNsYXRvciA9IHtcbiAgICAgICAgd29yZHM6IHsgLy9EaWZmZXJlbnQgZ3JhbW1hdGljYWwgY2FzZXNcbiAgICAgICAgICAgIHNzOiBbJ9GB0LXQutGD0L3QtNCwJywgJ9GB0LXQutGD0L3QtNC1JywgJ9GB0LXQutGD0L3QtNC4J10sXG4gICAgICAgICAgICBtOiBbJ9GY0LXQtNCw0L0g0LzQuNC90YPRgicsICfRmNC10LTQvdC1INC80LjQvdGD0YLQtSddLFxuICAgICAgICAgICAgbW06IFsn0LzQuNC90YPRgicsICfQvNC40L3Rg9GC0LUnLCAn0LzQuNC90YPRgtCwJ10sXG4gICAgICAgICAgICBoOiBbJ9GY0LXQtNCw0L0g0YHQsNGCJywgJ9GY0LXQtNC90L7QsyDRgdCw0YLQsCddLFxuICAgICAgICAgICAgaGg6IFsn0YHQsNGCJywgJ9GB0LDRgtCwJywgJ9GB0LDRgtC4J10sXG4gICAgICAgICAgICBkZDogWyfQtNCw0L0nLCAn0LTQsNC90LAnLCAn0LTQsNC90LAnXSxcbiAgICAgICAgICAgIE1NOiBbJ9C80LXRgdC10YYnLCAn0LzQtdGB0LXRhtCwJywgJ9C80LXRgdC10YbQuCddLFxuICAgICAgICAgICAgeXk6IFsn0LPQvtC00LjQvdCwJywgJ9Cz0L7QtNC40L3QtScsICfQs9C+0LTQuNC90LAnXVxuICAgICAgICB9LFxuICAgICAgICBjb3JyZWN0R3JhbW1hdGljYWxDYXNlOiBmdW5jdGlvbiAobnVtYmVyLCB3b3JkS2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyID09PSAxID8gd29yZEtleVswXSA6IChudW1iZXIgPj0gMiAmJiBudW1iZXIgPD0gNCA/IHdvcmRLZXlbMV0gOiB3b3JkS2V5WzJdKTtcbiAgICAgICAgfSxcbiAgICAgICAgdHJhbnNsYXRlOiBmdW5jdGlvbiAobnVtYmVyLCB3aXRob3V0U3VmZml4LCBrZXkpIHtcbiAgICAgICAgICAgIHZhciB3b3JkS2V5ID0gdHJhbnNsYXRvci53b3Jkc1trZXldO1xuICAgICAgICAgICAgaWYgKGtleS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gd2l0aG91dFN1ZmZpeCA/IHdvcmRLZXlbMF0gOiB3b3JkS2V5WzFdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJyAnICsgdHJhbnNsYXRvci5jb3JyZWN0R3JhbW1hdGljYWxDYXNlKG51bWJlciwgd29yZEtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIHNyQ3lybCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3NyLWN5cmwnLCB7XG4gICAgICAgIG1vbnRoczogJ9GY0LDQvdGD0LDRgF/RhNC10LHRgNGD0LDRgF/QvNCw0YDRgl/QsNC/0YDQuNC7X9C80LDRmF/RmNGD0L1f0ZjRg9C7X9Cw0LLQs9GD0YHRgl/RgdC10L/RgtC10LzQsdCw0YBf0L7QutGC0L7QsdCw0YBf0L3QvtCy0LXQvNCx0LDRgF/QtNC10YbQtdC80LHQsNGAJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydDogJ9GY0LDQvS5f0YTQtdCxLl/QvNCw0YAuX9Cw0L/RgC5f0LzQsNGYX9GY0YPQvV/RmNGD0Ltf0LDQstCzLl/RgdC10L8uX9C+0LrRgi5f0L3QvtCyLl/QtNC10YYuJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5czogJ9C90LXQtNC10ZnQsF/Qv9C+0L3QtdC00LXRmdCw0Lpf0YPRgtC+0YDQsNC6X9GB0YDQtdC00LBf0YfQtdGC0LLRgNGC0LDQul/Qv9C10YLQsNC6X9GB0YPQsdC+0YLQsCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ9C90LXQtC5f0L/QvtC9Ll/Rg9GC0L4uX9GB0YDQtS5f0YfQtdGCLl/Qv9C10YIuX9GB0YPQsS4nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn0L3QtV/Qv9C+X9GD0YJf0YHRgF/Rh9C1X9C/0LVf0YHRgycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSDptbTpzcycsXG4gICAgICAgICAgICBMOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTDogJ0QuIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEw6ICdELiBNTU1NIFlZWVkgSDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZCwgRC4gTU1NTSBZWVlZIEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW9C00LDQvdCw0YEg0YNdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb0YHRg9GC0YDQsCDRg10gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdb0YNdIFvQvdC10LTQtdGZ0YNdIFvRg10gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vRg10gW9GB0YDQtdC00YNdIFvRg10gTFQnO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1vRg10gW9GB0YPQsdC+0YLRg10gW9GDXSBMVCc7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnW9GDXSBkZGRkIFvRg10gTFQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsYXN0RGF5ICA6ICdb0ZjRg9GH0LUg0YNdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBsYXN0V2Vla0RheXMgPSBbXG4gICAgICAgICAgICAgICAgICAgICdb0L/RgNC+0YjQu9C1XSBb0L3QtdC00LXRmdC1XSBb0YNdIExUJyxcbiAgICAgICAgICAgICAgICAgICAgJ1vQv9GA0L7RiNC70L7Qs10gW9C/0L7QvdC10LTQtdGZ0LrQsF0gW9GDXSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdb0L/RgNC+0YjQu9C+0LNdIFvRg9GC0L7RgNC60LBdIFvRg10gTFQnLFxuICAgICAgICAgICAgICAgICAgICAnW9C/0YDQvtGI0LvQtV0gW9GB0YDQtdC00LVdIFvRg10gTFQnLFxuICAgICAgICAgICAgICAgICAgICAnW9C/0YDQvtGI0LvQvtCzXSBb0YfQtdGC0LLRgNGC0LrQsF0gW9GDXSBMVCcsXG4gICAgICAgICAgICAgICAgICAgICdb0L/RgNC+0YjQu9C+0LNdIFvQv9C10YLQutCwXSBb0YNdIExUJyxcbiAgICAgICAgICAgICAgICAgICAgJ1vQv9GA0L7RiNC70LVdIFvRgdGD0LHQvtGC0LVdIFvRg10gTFQnXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbGFzdFdlZWtEYXlzW3RoaXMuZGF5KCldO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICfQt9CwICVzJyxcbiAgICAgICAgICAgIHBhc3QgICA6ICfQv9GA0LUgJXMnLFxuICAgICAgICAgICAgcyAgICAgIDogJ9C90LXQutC+0LvQuNC60L4g0YHQtdC60YPQvdC00LgnLFxuICAgICAgICAgICAgc3MgICAgIDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBtICAgICAgOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIG1tICAgICA6IHRyYW5zbGF0b3IudHJhbnNsYXRlLFxuICAgICAgICAgICAgaCAgICAgIDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBoaCAgICAgOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGQgICAgICA6ICfQtNCw0L0nLFxuICAgICAgICAgICAgZGQgICAgIDogdHJhbnNsYXRvci50cmFuc2xhdGUsXG4gICAgICAgICAgICBNICAgICAgOiAn0LzQtdGB0LXRhicsXG4gICAgICAgICAgICBNTSAgICAgOiB0cmFuc2xhdG9yLnRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHkgICAgICA6ICfQs9C+0LTQuNC90YMnLFxuICAgICAgICAgICAgeXkgICAgIDogdHJhbnNsYXRvci50cmFuc2xhdGVcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9XFwuLyxcbiAgICAgICAgb3JkaW5hbCA6ICclZC4nLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA3ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA3dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBzckN5cmw7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBzcyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3NzJywge1xuICAgICAgICBtb250aHMgOiBcIkJoaW1iaWR2d2FuZV9JbmRsb3ZhbmFfSW5kbG92J2xlbmtodWx1X01hYmFzYV9Jbmtod2VraHdldGlfSW5obGFiYV9LaG9sd2FuZV9JbmdjaV9JbnlvbmlfSW1waGFsYV9Md2V0aV9JbmdvbmdvbmlcIi5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdCaGlfSW5hX0ludV9NYWJfSW5rX0luaF9LaG9fSWdjX0lueV9JbXBfTHdlX0lnbycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnTGlzb250Zm9fVW1zb21idWx1a29fTGVzaWJpbGlfTGVzaXRzYXRmdV9MZXNpbmVfTGVzaWhsYW51X1VtZ2NpYmVsbycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdMaXNfVW1iX0xzYl9MZXNfTHNpX0xzaF9VbWcnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ0xpX1VzX0xiX0x0X0xzX0xoX1VnJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ2g6bW0gQScsXG4gICAgICAgICAgICBMVFMgOiAnaDptbTpzcyBBJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgaDptbSBBJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgaDptbSBBJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW05hbXVobGEgbmdhXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1tLdXNhc2EgbmdhXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFtuZ2FdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW0l0b2xvIG5nYV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnZGRkZCBbbGVsaXBoZWxpbGVdIFtuZ2FdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICduZ2EgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICd3ZW50ZWthIG5nYSAlcycsXG4gICAgICAgICAgICBzIDogJ2VtaXp1endhbmEgbG9tY2FuZScsXG4gICAgICAgICAgICBzcyA6ICclZCBtenV6d2FuYScsXG4gICAgICAgICAgICBtIDogJ3VtenV6dScsXG4gICAgICAgICAgICBtbSA6ICclZCBlbWl6dXp1JyxcbiAgICAgICAgICAgIGggOiAnbGlob3JhJyxcbiAgICAgICAgICAgIGhoIDogJyVkIGVtYWhvcmEnLFxuICAgICAgICAgICAgZCA6ICdsaWxhbmdhJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGVtYWxhbmdhJyxcbiAgICAgICAgICAgIE0gOiAnaW55YW5nYScsXG4gICAgICAgICAgICBNTSA6ICclZCB0aW55YW5nYScsXG4gICAgICAgICAgICB5IDogJ3Vtbnlha2EnLFxuICAgICAgICAgICAgeXkgOiAnJWQgaW1pbnlha2EnXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC9la3VzZW5pfGVtaW5pfGVudHNhbWJhbWF8ZWJ1c3VrdS8sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91cnMgPCAxMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZWt1c2VuaSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXJzIDwgMTUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2VtaW5pJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91cnMgPCAxOSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZW50c2FtYmFtYSc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAnZWJ1c3VrdSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtSG91ciA6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICdla3VzZW5pJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ2VtaW5pJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDExID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICdlbnRzYW1iYW1hJyB8fCBtZXJpZGllbSA9PT0gJ2VidXN1a3UnKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhvdXIgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS8sXG4gICAgICAgIG9yZGluYWwgOiAnJWQnLFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBzcztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHN2ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnc3YnLCB7XG4gICAgICAgIG1vbnRocyA6ICdqYW51YXJpX2ZlYnJ1YXJpX21hcnNfYXByaWxfbWFqX2p1bmlfanVsaV9hdWd1c3RpX3NlcHRlbWJlcl9va3RvYmVyX25vdmVtYmVyX2RlY2VtYmVyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdqYW5fZmViX21hcl9hcHJfbWFqX2p1bl9qdWxfYXVnX3NlcF9va3Rfbm92X2RlYycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnc8O2bmRhZ19tw6VuZGFnX3Rpc2RhZ19vbnNkYWdfdG9yc2RhZ19mcmVkYWdfbMO2cmRhZycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdzw7ZuX23DpW5fdGlzX29uc190b3JfZnJlX2zDtnInLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ3PDtl9tw6VfdGlfb25fdG9fZnJfbMO2Jy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ1lZWVktTU0tREQnLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIFtrbC5dIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCBEIE1NTU0gWVlZWSBba2wuXSBISDptbScsXG4gICAgICAgICAgICBsbGwgOiAnRCBNTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBsbGxsIDogJ2RkZCBEIE1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbSWRhZ10gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tJbW9yZ29uXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW0lnw6VyXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ1tQw6VdIGRkZGQgTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdbSV0gZGRkZFtzXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICdvbSAlcycsXG4gICAgICAgICAgICBwYXN0IDogJ2bDtnIgJXMgc2VkYW4nLFxuICAgICAgICAgICAgcyA6ICduw6VncmEgc2VrdW5kZXInLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2VrdW5kZXInLFxuICAgICAgICAgICAgbSA6ICdlbiBtaW51dCcsXG4gICAgICAgICAgICBtbSA6ICclZCBtaW51dGVyJyxcbiAgICAgICAgICAgIGggOiAnZW4gdGltbWUnLFxuICAgICAgICAgICAgaGggOiAnJWQgdGltbWFyJyxcbiAgICAgICAgICAgIGQgOiAnZW4gZGFnJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGRhZ2FyJyxcbiAgICAgICAgICAgIE0gOiAnZW4gbcOlbmFkJyxcbiAgICAgICAgICAgIE1NIDogJyVkIG3DpW5hZGVyJyxcbiAgICAgICAgICAgIHkgOiAnZXR0IMOlcicsXG4gICAgICAgICAgICB5eSA6ICclZCDDpXInXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfShlfGEpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gKH5+KG51bWJlciAlIDEwMCAvIDEwKSA9PT0gMSkgPyAnZScgOlxuICAgICAgICAgICAgICAgIChiID09PSAxKSA/ICdhJyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDIpID8gJ2EnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMykgPyAnZScgOiAnZSc7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBzdjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHN3ID0gbW9tZW50LmRlZmluZUxvY2FsZSgnc3cnLCB7XG4gICAgICAgIG1vbnRocyA6ICdKYW51YXJpX0ZlYnJ1YXJpX01hY2hpX0FwcmlsaV9NZWlfSnVuaV9KdWxhaV9BZ29zdGlfU2VwdGVtYmFfT2t0b2JhX05vdmVtYmFfRGVzZW1iYScuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnSmFuX0ZlYl9NYWNfQXByX01laV9KdW5fSnVsX0Fnb19TZXBfT2t0X05vdl9EZXMnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ0p1bWFwaWxpX0p1bWF0YXR1X0p1bWFubmVfSnVtYXRhbm9fQWxoYW1pc2lfSWp1bWFhX0p1bWFtb3NpJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ0pwbF9KdGF0X0pubmVfSnRhbl9BbGhfSWptX0ptb3MnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ0oyX0ozX0o0X0o1X0FsX0lqX0oxJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbbGVvIHNhYV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdba2VzaG8gc2FhXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdbd2lraSBpamF5b10gZGRkZCBbc2FhdF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdbamFuYV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW3dpa2kgaWxpeW9waXRhXSBkZGRkIFtzYWF0XSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnJXMgYmFhZGF5ZScsXG4gICAgICAgICAgICBwYXN0IDogJ3Rva2VhICVzJyxcbiAgICAgICAgICAgIHMgOiAnaGl2aSBwdW5kZScsXG4gICAgICAgICAgICBzcyA6ICdzZWt1bmRlICVkJyxcbiAgICAgICAgICAgIG0gOiAnZGFraWthIG1vamEnLFxuICAgICAgICAgICAgbW0gOiAnZGFraWthICVkJyxcbiAgICAgICAgICAgIGggOiAnc2FhIGxpbW9qYScsXG4gICAgICAgICAgICBoaCA6ICdtYXNhYSAlZCcsXG4gICAgICAgICAgICBkIDogJ3Npa3UgbW9qYScsXG4gICAgICAgICAgICBkZCA6ICdtYXNpa3UgJWQnLFxuICAgICAgICAgICAgTSA6ICdtd2V6aSBtbW9qYScsXG4gICAgICAgICAgICBNTSA6ICdtaWV6aSAlZCcsXG4gICAgICAgICAgICB5IDogJ213YWthIG1tb2phJyxcbiAgICAgICAgICAgIHl5IDogJ21pYWthICVkJ1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA3ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA3dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBzdztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHN5bWJvbE1hcCA9IHtcbiAgICAgICAgJzEnOiAn4K+nJyxcbiAgICAgICAgJzInOiAn4K+oJyxcbiAgICAgICAgJzMnOiAn4K+pJyxcbiAgICAgICAgJzQnOiAn4K+qJyxcbiAgICAgICAgJzUnOiAn4K+rJyxcbiAgICAgICAgJzYnOiAn4K+sJyxcbiAgICAgICAgJzcnOiAn4K+tJyxcbiAgICAgICAgJzgnOiAn4K+uJyxcbiAgICAgICAgJzknOiAn4K+vJyxcbiAgICAgICAgJzAnOiAn4K+mJ1xuICAgIH0sIG51bWJlck1hcCA9IHtcbiAgICAgICAgJ+Cvpyc6ICcxJyxcbiAgICAgICAgJ+CvqCc6ICcyJyxcbiAgICAgICAgJ+CvqSc6ICczJyxcbiAgICAgICAgJ+Cvqic6ICc0JyxcbiAgICAgICAgJ+Cvqyc6ICc1JyxcbiAgICAgICAgJ+CvrCc6ICc2JyxcbiAgICAgICAgJ+CvrSc6ICc3JyxcbiAgICAgICAgJ+Cvric6ICc4JyxcbiAgICAgICAgJ+Cvryc6ICc5JyxcbiAgICAgICAgJ+Cvpic6ICcwJ1xuICAgIH07XG5cbiAgICB2YXIgdGEgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd0YScsIHtcbiAgICAgICAgbW9udGhzIDogJ+CunOCuqeCuteCusOCuv1/grqrgrr/grqrgr43grrDgrrXgrrDgrr9f4K6u4K6+4K6w4K+N4K6a4K+NX+Cuj+CuquCvjeCusOCusuCvjV/grq7gr4df4K6c4K+C4K6p4K+NX+CunOCvguCusuCviF/grobgrpXgrrjgr43grp/gr41f4K6a4K+G4K6q4K+N4K6f4K+G4K6u4K+N4K6q4K6w4K+NX+CuheCuleCvjeCun+Cvh+CuvuCuquCusOCvjV/grqjgrrXgrq7gr43grqrgrrDgr41f4K6f4K6/4K6a4K6u4K+N4K6q4K6w4K+NJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICfgrpzgrqngrrXgrrDgrr9f4K6q4K6/4K6q4K+N4K6w4K614K6w4K6/X+CuruCuvuCusOCvjeCumuCvjV/gro/grqrgr43grrDgrrLgr41f4K6u4K+HX+CunOCvguCuqeCvjV/grpzgr4LgrrLgr4hf4K6G4K6V4K644K+N4K6f4K+NX+CumuCvhuCuquCvjeCun+CvhuCuruCvjeCuquCusOCvjV/groXgrpXgr43grp/gr4fgrr7grqrgrrDgr41f4K6o4K614K6u4K+N4K6q4K6w4K+NX+Cun+Cuv+CumuCuruCvjeCuquCusOCvjScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAn4K6e4K6+4K6v4K6/4K6x4K+N4K6x4K+B4K6V4K+N4K6V4K6/4K604K6u4K+IX+CupOCuv+CumeCvjeCuleCun+CvjeCuleCuv+CutOCuruCviF/grprgr4bgrrXgr43grrXgrr7grq/gr43grpXgrr/grrTgrq7gr4hf4K6q4K+B4K6k4K6p4K+N4K6V4K6/4K604K6u4K+IX+CuteCuv+Cur+CuvuCutOCuleCvjeCuleCuv+CutOCuruCviF/grrXgr4bgrrPgr43grrPgrr/grpXgr43grpXgrr/grrTgrq7gr4hf4K6a4K6p4K6/4K6V4K+N4K6V4K6/4K604K6u4K+IJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ+CunuCuvuCur+Cuv+CuseCvgV/grqTgrr/grpngr43grpXgrrPgr41f4K6a4K+G4K614K+N4K614K6+4K6v4K+NX+CuquCvgeCupOCuqeCvjV/grrXgrr/grq/grr7grrTgrqngr41f4K614K+G4K6z4K+N4K6z4K6/X+CumuCuqeCuvycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn4K6e4K6+X+CupOCuv1/grprgr4Zf4K6q4K+BX+CuteCuv1/grrXgr4Zf4K6aJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZLCBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZLCBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vgrofgrqngr43grrHgr4FdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW+CuqOCuvuCus+CviF0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCwgTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdb4K6o4K+H4K6x4K+N4K6x4K+BXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdb4K6V4K6f4K6o4K+N4K6kIOCuteCuvuCusOCuruCvjV0gZGRkZCwgTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJyVzIOCuh+CusuCvjScsXG4gICAgICAgICAgICBwYXN0IDogJyVzIOCuruCvgeCuqeCvjScsXG4gICAgICAgICAgICBzIDogJ+CukuCusOCvgSDgrprgrr/grrIg4K614K6/4K6o4K6+4K6f4K6/4K6V4K6z4K+NJyxcbiAgICAgICAgICAgIHNzIDogJyVkIOCuteCuv+CuqOCuvuCun+Cuv+CuleCus+CvjScsXG4gICAgICAgICAgICBtIDogJ+CukuCusOCvgSDgrqjgrr/grq7grr/grp/grq7gr40nLFxuICAgICAgICAgICAgbW0gOiAnJWQg4K6o4K6/4K6u4K6/4K6f4K6Z4K+N4K6V4K6z4K+NJyxcbiAgICAgICAgICAgIGggOiAn4K6S4K6w4K+BIOCuruCuo+CuvyDgrqjgr4fgrrDgrq7gr40nLFxuICAgICAgICAgICAgaGggOiAnJWQg4K6u4K6j4K6/IOCuqOCvh+CusOCuruCvjScsXG4gICAgICAgICAgICBkIDogJ+CukuCusOCvgSDgrqjgrr7grrPgr40nLFxuICAgICAgICAgICAgZGQgOiAnJWQg4K6o4K6+4K6f4K+N4K6V4K6z4K+NJyxcbiAgICAgICAgICAgIE0gOiAn4K6S4K6w4K+BIOCuruCuvuCupOCuruCvjScsXG4gICAgICAgICAgICBNTSA6ICclZCDgrq7grr7grqTgrpngr43grpXgrrPgr40nLFxuICAgICAgICAgICAgeSA6ICfgrpLgrrDgr4Eg4K614K6w4K+B4K6f4K6u4K+NJyxcbiAgICAgICAgICAgIHl5IDogJyVkIOCuhuCuo+CvjeCun+CvgeCuleCus+CvjSdcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ94K614K6k4K+BLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAn4K614K6k4K+BJztcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvW+Cvp+CvqOCvqeCvquCvq+CvrOCvreCvruCvr+Cvpl0vZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlck1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC9cXGQvZywgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN5bWJvbE1hcFttYXRjaF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgLy8gcmVmZXIgaHR0cDovL3RhLndpa2lwZWRpYS5vcmcvcy8xZXIxXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/grq/grr7grq7grq7gr4184K614K+I4K6V4K6x4K+IfOCuleCuvuCusuCviHzgrqjgrqPgr43grqrgrpXgrrLgr4184K6O4K6x4K+N4K6q4K6+4K6f4K+BfOCuruCuvuCusuCviC8sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCAyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcg4K6v4K6+4K6u4K6u4K+NJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDYpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJyDgrrXgr4jgrpXgrrHgr4gnOyAgLy8g4K614K+I4K6V4K6x4K+IXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnIOCuleCuvuCusuCviCc7IC8vIOCuleCuvuCusuCviFxuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJyDgrqjgrqPgr43grqrgrpXgrrLgr40nOyAvLyDgrqjgrqPgr43grqrgrpXgrrLgr41cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcg4K6O4K6x4K+N4K6q4K6+4K6f4K+BJzsgLy8g4K6O4K6x4K+N4K6q4K6+4K6f4K+BXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAyMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAnIOCuruCuvuCusuCviCc7IC8vIOCuruCuvuCusuCviFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJyDgrq/grr7grq7grq7gr40nO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbUhvdXIgOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lcmlkaWVtID09PSAn4K6v4K6+4K6u4K6u4K+NJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyIDwgMiA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4K614K+I4K6V4K6x4K+IJyB8fCBtZXJpZGllbSA9PT0gJ+CuleCuvuCusuCviCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgrqjgrqPgr43grqrgrpXgrrLgr40nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMTAgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA2ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA2dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB0YTtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHRlID0gbW9tZW50LmRlZmluZUxvY2FsZSgndGUnLCB7XG4gICAgICAgIG1vbnRocyA6ICfgsJzgsKjgsLXgsLDgsL9f4LCr4LC/4LCs4LGN4LCw4LC14LCw4LC/X+CwruCwvuCwsOCxjeCwmuCwv1/gsI/gsKrgsY3gsLDgsL/gsLLgsY1f4LCu4LGHX+CwnOCxguCwqOCxjV/gsJzgsYHgsLLgsYhf4LCG4LCX4LC44LGN4LCf4LGBX+CwuOCxhuCwquCxjeCwn+CxhuCwguCwrOCwsOCxjV/gsIXgsJXgsY3gsJ/gsYvgsKzgsLDgsY1f4LCo4LC14LCC4LCs4LCw4LGNX+CwoeCwv+CwuOCxhuCwguCwrOCwsOCxjScuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAn4LCc4LCoLl/gsKvgsL/gsKzgsY3gsLAuX+CwruCwvuCwsOCxjeCwmuCwv1/gsI/gsKrgsY3gsLDgsL8uX+CwruCxh1/gsJzgsYLgsKjgsY1f4LCc4LGB4LCy4LGIX+CwhuCwly5f4LC44LGG4LCq4LGNLl/gsIXgsJXgsY3gsJ/gsYsuX+CwqOCwtS5f4LCh4LC/4LC44LGGLicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzIDogJ+CwhuCwpuCwv+CwteCwvuCwsOCwgl/gsLjgsYvgsK7gsLXgsL7gsLDgsIJf4LCu4LCC4LCX4LCz4LC14LC+4LCw4LCCX+CwrOCxgeCwp+CwteCwvuCwsOCwgl/gsJfgsYHgsLDgsYHgsLXgsL7gsLDgsIJf4LC24LGB4LCV4LGN4LCw4LC14LC+4LCw4LCCX+CwtuCwqOCwv+CwteCwvuCwsOCwgicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfgsIbgsKbgsL9f4LC44LGL4LCuX+CwruCwguCwl+Cws1/gsKzgsYHgsKdf4LCX4LGB4LCw4LGBX+CwtuCxgeCwleCxjeCwsF/gsLbgsKjgsL8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ+Cwhl/gsLjgsYtf4LCu4LCCX+CwrOCxgV/gsJfgsYFf4LC24LGBX+Cwticuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdBIGg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0EgaDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZLCBBIGg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSwgQSBoOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW+CwqOCxh+CwoeCxgV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdb4LCw4LGH4LCq4LGBXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkLCBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1vgsKjgsL/gsKjgsY3gsKhdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1vgsJfgsKRdIGRkZGQsIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICclcyDgsLLgsYsnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyDgsJXgsY3gsLDgsL/gsKTgsIInLFxuICAgICAgICAgICAgcyA6ICfgsJXgsYrgsKjgsY3gsKjgsL8g4LCV4LGN4LC34LCj4LC+4LCy4LGBJyxcbiAgICAgICAgICAgIHNzIDogJyVkIOCwuOCxhuCwleCwqOCxjeCwsuCxgScsXG4gICAgICAgICAgICBtIDogJ+CwkuCwlSDgsKjgsL/gsK7gsL/gsLfgsIInLFxuICAgICAgICAgICAgbW0gOiAnJWQg4LCo4LC/4LCu4LC/4LC34LC+4LCy4LGBJyxcbiAgICAgICAgICAgIGggOiAn4LCS4LCVIOCwl+CwguCwnycsXG4gICAgICAgICAgICBoaCA6ICclZCDgsJfgsILgsJ/gsLLgsYEnLFxuICAgICAgICAgICAgZCA6ICfgsJLgsJUg4LCw4LGL4LCc4LGBJyxcbiAgICAgICAgICAgIGRkIDogJyVkIOCwsOCxi+CwnOCxgeCwsuCxgScsXG4gICAgICAgICAgICBNIDogJ+CwkuCwlSDgsKjgsYbgsLInLFxuICAgICAgICAgICAgTU0gOiAnJWQg4LCo4LGG4LCy4LCy4LGBJyxcbiAgICAgICAgICAgIHkgOiAn4LCS4LCVIOCwuOCwguCwteCwpOCxjeCwuOCwsOCwgicsXG4gICAgICAgICAgICB5eSA6ICclZCDgsLjgsILgsLXgsKTgsY3gsLjgsLDgsL7gsLLgsYEnXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2UgOiAvXFxkezEsMn3gsLUvLFxuICAgICAgICBvcmRpbmFsIDogJyVk4LC1JyxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL+CwsOCwvuCwpOCxjeCwsOCwv3zgsIngsKbgsK/gsIJ84LCu4LCn4LGN4LCv4LC+4LC54LGN4LCo4LCCfOCwuOCwvuCwr+CwguCwpOCxjeCwsOCwgi8sXG4gICAgICAgIG1lcmlkaWVtSG91ciA6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICfgsLDgsL7gsKTgsY3gsLDgsL8nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPCA0ID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgsIngsKbgsK/gsIInKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn4LCu4LCn4LGN4LCv4LC+4LC54LGN4LCo4LCCJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDEwID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfgsLjgsL7gsK/gsILgsKTgsY3gsLDgsIInKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA8IDQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CwsOCwvuCwpOCxjeCwsOCwvyc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhvdXIgPCAxMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4LCJ4LCm4LCv4LCCJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE3KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfgsK7gsKfgsY3gsK/gsL7gsLngsY3gsKjgsIInO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMjApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+CwuOCwvuCwr+CwguCwpOCxjeCwsOCwgic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4LCw4LC+4LCk4LGN4LCw4LC/JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDAsIC8vIFN1bmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNiAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGU7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciB0ZXQgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd0ZXQnLCB7XG4gICAgICAgIG1vbnRocyA6ICdKYW5laXJ1X0ZldmVyZWlydV9NYXJzdV9BYnJpbF9NYWl1X0p1w7F1X0p1bGx1X0FndXN0dV9TZXRlbWJydV9PdXR1YnJ1X05vdmVtYnJ1X0RlemVtYnJ1Jy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdKYW5fRmV2X01hcl9BYnJfTWFpX0p1bl9KdWxfQWdvX1NldF9PdXRfTm92X0Rleicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnRG9taW5ndV9TZWd1bmRhX1RlcnNhX0t1YXJ0YV9LaW50YV9TZXN0YV9TYWJhZHUnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnRG9tX1NlZ19UZXJzX0t1YV9LaW50X1Nlc3RfU2FiJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdEb19TZWdfVGVfS3VfS2lfU2VzX1NhJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1tPaGluIGloYV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheTogJ1tBYmFuIGloYV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdkZGRkIFtpaGFdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbSG9yaXNlaWsgaWhhXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlazogJ2RkZGQgW3NlbWFuYSBrb3R1a10gW2loYV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnaWhhICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMgbGl1YmEnLFxuICAgICAgICAgICAgcyA6ICdtaW51dHUgYmFsdW4nLFxuICAgICAgICAgICAgc3MgOiAnbWludXR1ICVkJyxcbiAgICAgICAgICAgIG0gOiAnbWludXR1IGlkYScsXG4gICAgICAgICAgICBtbSA6ICdtaW51dHUgJWQnLFxuICAgICAgICAgICAgaCA6ICdvcmFzIGlkYScsXG4gICAgICAgICAgICBoaCA6ICdvcmFzICVkJyxcbiAgICAgICAgICAgIGQgOiAnbG9yb24gaWRhJyxcbiAgICAgICAgICAgIGRkIDogJ2xvcm9uICVkJyxcbiAgICAgICAgICAgIE0gOiAnZnVsYW4gaWRhJyxcbiAgICAgICAgICAgIE1NIDogJ2Z1bGFuICVkJyxcbiAgICAgICAgICAgIHkgOiAndGluYW4gaWRhJyxcbiAgICAgICAgICAgIHl5IDogJ3RpbmFuICVkJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0oc3R8bmR8cmR8dGgpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gKH5+KG51bWJlciAlIDEwMCAvIDEwKSA9PT0gMSkgPyAndGgnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMSkgPyAnc3QnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMikgPyAnbmQnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMykgPyAncmQnIDogJ3RoJztcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRldDtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHN1ZmZpeGVzID0ge1xuICAgICAgICAwOiAnLdGD0LwnLFxuICAgICAgICAxOiAnLdGD0LwnLFxuICAgICAgICAyOiAnLdGO0LwnLFxuICAgICAgICAzOiAnLdGO0LwnLFxuICAgICAgICA0OiAnLdGD0LwnLFxuICAgICAgICA1OiAnLdGD0LwnLFxuICAgICAgICA2OiAnLdGD0LwnLFxuICAgICAgICA3OiAnLdGD0LwnLFxuICAgICAgICA4OiAnLdGD0LwnLFxuICAgICAgICA5OiAnLdGD0LwnLFxuICAgICAgICAxMDogJy3Rg9C8JyxcbiAgICAgICAgMTI6ICct0YPQvCcsXG4gICAgICAgIDEzOiAnLdGD0LwnLFxuICAgICAgICAyMDogJy3Rg9C8JyxcbiAgICAgICAgMzA6ICct0Y7QvCcsXG4gICAgICAgIDQwOiAnLdGD0LwnLFxuICAgICAgICA1MDogJy3Rg9C8JyxcbiAgICAgICAgNjA6ICct0YPQvCcsXG4gICAgICAgIDcwOiAnLdGD0LwnLFxuICAgICAgICA4MDogJy3Rg9C8JyxcbiAgICAgICAgOTA6ICct0YPQvCcsXG4gICAgICAgIDEwMDogJy3Rg9C8J1xuICAgIH07XG5cbiAgICB2YXIgdGcgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd0ZycsIHtcbiAgICAgICAgbW9udGhzIDogJ9GP0L3QstCw0YBf0YTQtdCy0YDQsNC7X9C80LDRgNGCX9Cw0L/RgNC10Ltf0LzQsNC5X9C40Y7QvV/QuNGO0Ltf0LDQstCz0YPRgdGCX9GB0LXQvdGC0Y/QsdGAX9C+0LrRgtGP0LHRgF/QvdC+0Y/QsdGAX9C00LXQutCw0LHRgCcuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAn0Y/QvdCyX9GE0LXQsl/QvNCw0YBf0LDQv9GAX9C80LDQuV/QuNGO0L1f0LjRjtC7X9Cw0LLQs1/RgdC10L1f0L7QutGCX9C90L7Rj1/QtNC10LonLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ9GP0LrRiNCw0L3QsdC1X9C00YPRiNCw0L3QsdC1X9GB0LXRiNCw0L3QsdC1X9GH0L7RgNGI0LDQvdCx0LVf0L/QsNC90rfRiNCw0L3QsdC1X9K30YPQvNGK0LBf0YjQsNC90LHQtScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfRj9GI0LFf0LTRiNCxX9GB0YjQsV/Rh9GI0LFf0L/RiNCxX9K30YPQvF/RiNC90LEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ9GP0Yhf0LTRiF/RgdGIX9GH0Yhf0L/RiF/St9C8X9GI0LEnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vQmNC80YDTr9C3INGB0L7QsNGC0LhdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW9Cf0LDQs9C+0rMg0YHQvtCw0YLQuF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdb0JTQuNGA06/QtyDRgdC+0LDRgtC4XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkW9C4XSBb0rPQsNGE0YLQsNC4INC+0Y/QvdC00LAg0YHQvtCw0YLQuF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnZGRkZFvQuF0gW9Kz0LDRhNGC0LDQuCDQs9GD0LfQsNGI0YLQsCDRgdC+0LDRgtC4XSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAn0LHQsNGK0LTQuCAlcycsXG4gICAgICAgICAgICBwYXN0IDogJyVzINC/0LXRiCcsXG4gICAgICAgICAgICBzIDogJ9GP0LrRh9Cw0L3QtCDRgdC+0L3QuNGPJyxcbiAgICAgICAgICAgIG0gOiAn0Y/QuiDQtNCw0pvQuNKb0LAnLFxuICAgICAgICAgICAgbW0gOiAnJWQg0LTQsNKb0LjSm9CwJyxcbiAgICAgICAgICAgIGggOiAn0Y/QuiDRgdC+0LDRgicsXG4gICAgICAgICAgICBoaCA6ICclZCDRgdC+0LDRgicsXG4gICAgICAgICAgICBkIDogJ9GP0Log0YDTr9C3JyxcbiAgICAgICAgICAgIGRkIDogJyVkINGA06/QtycsXG4gICAgICAgICAgICBNIDogJ9GP0Log0LzQvtKzJyxcbiAgICAgICAgICAgIE1NIDogJyVkINC80L7SsycsXG4gICAgICAgICAgICB5IDogJ9GP0Log0YHQvtC7JyxcbiAgICAgICAgICAgIHl5IDogJyVkINGB0L7QuydcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL9GI0LDQsXzRgdGD0LHSs3zRgNOv0Ld80LHQtdCz0L7Ssy8sXG4gICAgICAgIG1lcmlkaWVtSG91cjogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ9GI0LDQsScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA8IDQgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ9GB0YPQsdKzJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ9GA06/QtycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMSA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn0LHQtdCz0L7SsycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbTogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCA0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfRiNCw0LEnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9GB0YPQsdKzJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG91ciA8IDE2KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfRgNOv0LcnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9Cx0LXQs9C+0rMnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9GI0LDQsSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfS0o0YPQvHzRjtC8KS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBhID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgYiA9IG51bWJlciA+PSAxMDAgPyAxMDAgOiBudWxsO1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArIChzdWZmaXhlc1tudW1iZXJdIHx8IHN1ZmZpeGVzW2FdIHx8IHN1ZmZpeGVzW2JdKTtcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gMXRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGc7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciB0aCA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3RoJywge1xuICAgICAgICBtb250aHMgOiAn4Lih4LiB4Lij4Liy4LiE4LihX+C4geC4uOC4oeC4oOC4suC4nuC4seC4meC4mOC5jF/guKHguLXguJnguLLguITguKFf4LmA4Lih4Lip4Liy4Lii4LiZX+C4nuC4pOC4qeC4oOC4suC4hOC4oV/guKHguLTguJbguLjguJnguLLguKLguJlf4LiB4Lij4LiB4LiO4Liy4LiE4LihX+C4quC4tOC4h+C4q+C4suC4hOC4oV/guIHguLHguJnguKLguLLguKLguJlf4LiV4Li44Lil4Liy4LiE4LihX+C4nuC4pOC4qOC4iOC4tOC4geC4suC4ouC4mV/guJjguLHguJnguKfguLLguITguKEnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ+C4oS7guIQuX+C4gS7guJ4uX+C4oeC4tS7guIQuX+C5gOC4oS7guKIuX+C4ni7guIQuX+C4oeC4tC7guKIuX+C4gS7guIQuX+C4qi7guIQuX+C4gS7guKIuX+C4lS7guIQuX+C4ni7guKIuX+C4mC7guIQuJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0OiB0cnVlLFxuICAgICAgICB3ZWVrZGF5cyA6ICfguK3guLLguJfguLTguJXguKLguYxf4LiI4Lix4LiZ4LiX4Lij4LmMX+C4reC4seC4h+C4hOC4suC4o1/guJ7guLjguJhf4Lie4Lik4Lir4Lix4Liq4Lia4LiU4Li1X+C4qOC4uOC4geC4o+C5jF/guYDguKrguLLguKPguYwnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn4Lit4Liy4LiX4Li04LiV4Lii4LmMX+C4iOC4seC4meC4l+C4o+C5jF/guK3guLHguIfguITguLLguKNf4Lie4Li44LiYX+C4nuC4pOC4q+C4seC4ql/guKjguLjguIHguKPguYxf4LmA4Liq4Liy4Lij4LmMJy5zcGxpdCgnXycpLCAvLyB5ZXMsIHRocmVlIGNoYXJhY3RlcnMgZGlmZmVyZW5jZVxuICAgICAgICB3ZWVrZGF5c01pbiA6ICfguK3guLIuX+C4iC5f4LitLl/guJ4uX+C4nuC4pC5f4LioLl/guKouJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0g6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0g6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSDguYDguKfguKXguLIgSDptbScsXG4gICAgICAgICAgICBMTExMIDogJ+C4p+C4seC4mWRkZGTguJfguLXguYggRCBNTU1NIFlZWVkg4LmA4Lin4Lil4LiyIEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/guIHguYjguK3guJnguYDguJfguLXguYjguKLguId84Lir4Lil4Lix4LiH4LmA4LiX4Li14LmI4Lii4LiHLyxcbiAgICAgICAgaXNQTTogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgPT09ICfguKvguKXguLHguIfguYDguJfguLXguYjguKLguIcnO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+C4geC5iOC4reC4meC5gOC4l+C4teC5iOC4ouC4hyc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn4Lir4Lil4Lix4LiH4LmA4LiX4Li14LmI4Lii4LiHJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vguKfguLHguJnguJnguLXguYkg4LmA4Lin4Lil4LiyXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1vguJ7guKPguLjguYjguIfguJnguLXguYkg4LmA4Lin4Lil4LiyXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkW+C4q+C4meC5ieC4siDguYDguKfguKXguLJdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW+C5gOC4oeC4t+C5iOC4reC4p+C4suC4meC4meC4teC5iSDguYDguKfguKXguLJdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1vguKfguLHguJldZGRkZFvguJfguLXguYjguYHguKXguYnguKcg4LmA4Lin4Lil4LiyXSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAn4Lit4Li14LiBICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXPguJfguLXguYjguYHguKXguYnguKcnLFxuICAgICAgICAgICAgcyA6ICfguYTguKHguYjguIHguLXguYjguKfguLTguJnguLLguJfguLUnLFxuICAgICAgICAgICAgc3MgOiAnJWQg4Lin4Li04LiZ4Liy4LiX4Li1JyxcbiAgICAgICAgICAgIG0gOiAnMSDguJnguLLguJfguLUnLFxuICAgICAgICAgICAgbW0gOiAnJWQg4LiZ4Liy4LiX4Li1JyxcbiAgICAgICAgICAgIGggOiAnMSDguIrguLHguYjguKfguYLguKHguIcnLFxuICAgICAgICAgICAgaGggOiAnJWQg4LiK4Lix4LmI4Lin4LmC4Lih4LiHJyxcbiAgICAgICAgICAgIGQgOiAnMSDguKfguLHguJknLFxuICAgICAgICAgICAgZGQgOiAnJWQg4Lin4Lix4LiZJyxcbiAgICAgICAgICAgIE0gOiAnMSDguYDguJTguLfguK3guJknLFxuICAgICAgICAgICAgTU0gOiAnJWQg4LmA4LiU4Li34Lit4LiZJyxcbiAgICAgICAgICAgIHkgOiAnMSDguJvguLUnLFxuICAgICAgICAgICAgeXkgOiAnJWQg4Lib4Li1J1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGg7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciB0bFBoID0gbW9tZW50LmRlZmluZUxvY2FsZSgndGwtcGgnLCB7XG4gICAgICAgIG1vbnRocyA6ICdFbmVyb19QZWJyZXJvX01hcnNvX0FicmlsX01heW9fSHVueW9fSHVseW9fQWdvc3RvX1NldHllbWJyZV9Pa3R1YnJlX05vYnllbWJyZV9EaXN5ZW1icmUnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ0VuZV9QZWJfTWFyX0Ficl9NYXlfSHVuX0h1bF9BZ29fU2V0X09rdF9Ob2JfRGlzJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdMaW5nZ29fTHVuZXNfTWFydGVzX01peWVya3VsZXNfSHV3ZWJlc19CaXllcm5lc19TYWJhZG8nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnTGluX0x1bl9NYXJfTWl5X0h1d19CaXlfU2FiJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdMaV9MdV9NYV9NaV9IdV9CaV9TYWInLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnTU0vRC9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ01NTU0gRCwgWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnTU1NTSBELCBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgTU1NTSBERCwgWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnTFQgW25nYXlvbmcgYXJhd10nLFxuICAgICAgICAgICAgbmV4dERheTogJ1tCdWthcyBuZ10gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdMVCBbc2Egc3VzdW5vZCBuYV0gZGRkZCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnTFQgW2thaGFwb25dJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnTFQgW25vb25nIG5ha2FyYWFuZ10gZGRkZCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICdzYSBsb29iIG5nICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMgYW5nIG5ha2FsaXBhcycsXG4gICAgICAgICAgICBzIDogJ2lsYW5nIHNlZ3VuZG8nLFxuICAgICAgICAgICAgc3MgOiAnJWQgc2VndW5kbycsXG4gICAgICAgICAgICBtIDogJ2lzYW5nIG1pbnV0bycsXG4gICAgICAgICAgICBtbSA6ICclZCBtaW51dG8nLFxuICAgICAgICAgICAgaCA6ICdpc2FuZyBvcmFzJyxcbiAgICAgICAgICAgIGhoIDogJyVkIG9yYXMnLFxuICAgICAgICAgICAgZCA6ICdpc2FuZyBhcmF3JyxcbiAgICAgICAgICAgIGRkIDogJyVkIGFyYXcnLFxuICAgICAgICAgICAgTSA6ICdpc2FuZyBidXdhbicsXG4gICAgICAgICAgICBNTSA6ICclZCBidXdhbicsXG4gICAgICAgICAgICB5IDogJ2lzYW5nIHRhb24nLFxuICAgICAgICAgICAgeXkgOiAnJWQgdGFvbidcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRsUGg7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciBudW1iZXJzTm91bnMgPSAncGFnaF93YeKAmV9jaGHigJlfd2VqX2xvU192YWdoX2phdl9Tb2NoX2Nob3JnaF9IdXQnLnNwbGl0KCdfJyk7XG5cbiAgICBmdW5jdGlvbiB0cmFuc2xhdGVGdXR1cmUob3V0cHV0KSB7XG4gICAgICAgIHZhciB0aW1lID0gb3V0cHV0O1xuICAgICAgICB0aW1lID0gKG91dHB1dC5pbmRleE9mKCdqYWonKSAhPT0gLTEpID9cbiAgICAgICAgdGltZS5zbGljZSgwLCAtMykgKyAnbGVTJyA6XG4gICAgICAgIChvdXRwdXQuaW5kZXhPZignamFyJykgIT09IC0xKSA/XG4gICAgICAgIHRpbWUuc2xpY2UoMCwgLTMpICsgJ3dhUScgOlxuICAgICAgICAob3V0cHV0LmluZGV4T2YoJ0RJUycpICE9PSAtMSkgP1xuICAgICAgICB0aW1lLnNsaWNlKDAsIC0zKSArICduZW0nIDpcbiAgICAgICAgdGltZSArICcgcElxJztcbiAgICAgICAgcmV0dXJuIHRpbWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlUGFzdChvdXRwdXQpIHtcbiAgICAgICAgdmFyIHRpbWUgPSBvdXRwdXQ7XG4gICAgICAgIHRpbWUgPSAob3V0cHV0LmluZGV4T2YoJ2phaicpICE9PSAtMSkgP1xuICAgICAgICB0aW1lLnNsaWNlKDAsIC0zKSArICdIdeKAmScgOlxuICAgICAgICAob3V0cHV0LmluZGV4T2YoJ2phcicpICE9PSAtMSkgP1xuICAgICAgICB0aW1lLnNsaWNlKDAsIC0zKSArICd3ZW4nIDpcbiAgICAgICAgKG91dHB1dC5pbmRleE9mKCdESVMnKSAhPT0gLTEpID9cbiAgICAgICAgdGltZS5zbGljZSgwLCAtMykgKyAnYmVuJyA6XG4gICAgICAgIHRpbWUgKyAnIHJldCc7XG4gICAgICAgIHJldHVybiB0aW1lO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZShudW1iZXIsIHdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpIHtcbiAgICAgICAgdmFyIG51bWJlck5vdW4gPSBudW1iZXJBc05vdW4obnVtYmVyKTtcbiAgICAgICAgc3dpdGNoIChzdHJpbmcpIHtcbiAgICAgICAgICAgIGNhc2UgJ3NzJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTm91biArICcgbHVwJztcbiAgICAgICAgICAgIGNhc2UgJ21tJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTm91biArICcgdHVwJztcbiAgICAgICAgICAgIGNhc2UgJ2hoJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTm91biArICcgcmVwJztcbiAgICAgICAgICAgIGNhc2UgJ2RkJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTm91biArICcgamFqJztcbiAgICAgICAgICAgIGNhc2UgJ01NJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTm91biArICcgamFyJztcbiAgICAgICAgICAgIGNhc2UgJ3l5JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyTm91biArICcgRElTJztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG51bWJlckFzTm91bihudW1iZXIpIHtcbiAgICAgICAgdmFyIGh1bmRyZWQgPSBNYXRoLmZsb29yKChudW1iZXIgJSAxMDAwKSAvIDEwMCksXG4gICAgICAgIHRlbiA9IE1hdGguZmxvb3IoKG51bWJlciAlIDEwMCkgLyAxMCksXG4gICAgICAgIG9uZSA9IG51bWJlciAlIDEwLFxuICAgICAgICB3b3JkID0gJyc7XG4gICAgICAgIGlmIChodW5kcmVkID4gMCkge1xuICAgICAgICAgICAgd29yZCArPSBudW1iZXJzTm91bnNbaHVuZHJlZF0gKyAndmF0bGgnO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0ZW4gPiAwKSB7XG4gICAgICAgICAgICB3b3JkICs9ICgod29yZCAhPT0gJycpID8gJyAnIDogJycpICsgbnVtYmVyc05vdW5zW3Rlbl0gKyAnbWFIJztcbiAgICAgICAgfVxuICAgICAgICBpZiAob25lID4gMCkge1xuICAgICAgICAgICAgd29yZCArPSAoKHdvcmQgIT09ICcnKSA/ICcgJyA6ICcnKSArIG51bWJlcnNOb3Vuc1tvbmVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAod29yZCA9PT0gJycpID8gJ3BhZ2gnIDogd29yZDtcbiAgICB9XG5cbiAgICB2YXIgdGxoID0gbW9tZW50LmRlZmluZUxvY2FsZSgndGxoJywge1xuICAgICAgICBtb250aHMgOiAndGVyYeKAmSBqYXIgd2HigJlfdGVyYeKAmSBqYXIgY2hh4oCZX3RlcmHigJkgamFyIHdlal90ZXJh4oCZIGphciBsb1NfdGVyYeKAmSBqYXIgdmFnaF90ZXJh4oCZIGphciBqYXZfdGVyYeKAmSBqYXIgU29jaF90ZXJh4oCZIGphciBjaG9yZ2hfdGVyYeKAmSBqYXIgSHV0X3RlcmHigJkgamFyIHdh4oCZbWFIX3RlcmHigJkgamFyIHdh4oCZbWFIIHdh4oCZX3RlcmHigJkgamFyIHdh4oCZbWFIIGNoYeKAmScuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnamFyIHdh4oCZX2phciBjaGHigJlfamFyIHdlal9qYXIgbG9TX2phciB2YWdoX2phciBqYXZfamFyIFNvY2hfamFyIGNob3JnaF9qYXIgSHV0X2phciB3YeKAmW1hSF9qYXIgd2HigJltYUggd2HigJlfamFyIHdh4oCZbWFIIGNoYeKAmScuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzUGFyc2VFeGFjdCA6IHRydWUsXG4gICAgICAgIHdlZWtkYXlzIDogJ2xvam1JdGphal9EYVNqYWpfcG92amFqX2doSXRsaGphal9sb2doamFqX2J1cWphal9naEluamFqJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ2xvam1JdGphal9EYVNqYWpfcG92amFqX2doSXRsaGphal9sb2doamFqX2J1cWphal9naEluamFqJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdsb2ptSXRqYWpfRGFTamFqX3Bvdmphal9naEl0bGhqYWpfbG9naGphal9idXFqYWpfZ2hJbmphaicuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQgOiB7XG4gICAgICAgICAgICBMVCA6ICdISDptbScsXG4gICAgICAgICAgICBMVFMgOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC5NTS5ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6ICdbRGFIamFqXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW3dh4oCZbGVTXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ0xMTCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW3dh4oCZSHXigJldIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnTExMJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogdHJhbnNsYXRlRnV0dXJlLFxuICAgICAgICAgICAgcGFzdCA6IHRyYW5zbGF0ZVBhc3QsXG4gICAgICAgICAgICBzIDogJ3B1UyBsdXAnLFxuICAgICAgICAgICAgc3MgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBtIDogJ3dh4oCZIHR1cCcsXG4gICAgICAgICAgICBtbSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIGggOiAnd2HigJkgcmVwJyxcbiAgICAgICAgICAgIGhoIDogdHJhbnNsYXRlLFxuICAgICAgICAgICAgZCA6ICd3YeKAmSBqYWonLFxuICAgICAgICAgICAgZGQgOiB0cmFuc2xhdGUsXG4gICAgICAgICAgICBNIDogJ3dh4oCZIGphcicsXG4gICAgICAgICAgICBNTSA6IHRyYW5zbGF0ZSxcbiAgICAgICAgICAgIHkgOiAnd2HigJkgRElTJyxcbiAgICAgICAgICAgIHl5IDogdHJhbnNsYXRlXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWwgOiAnJWQuJyxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGxoO1xuXG59KSkpO1xuIiwiXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIHN1ZmZpeGVzID0ge1xuICAgICAgICAxOiAnXFwnaW5jaScsXG4gICAgICAgIDU6ICdcXCdpbmNpJyxcbiAgICAgICAgODogJ1xcJ2luY2knLFxuICAgICAgICA3MDogJ1xcJ2luY2knLFxuICAgICAgICA4MDogJ1xcJ2luY2knLFxuICAgICAgICAyOiAnXFwnbmNpJyxcbiAgICAgICAgNzogJ1xcJ25jaScsXG4gICAgICAgIDIwOiAnXFwnbmNpJyxcbiAgICAgICAgNTA6ICdcXCduY2knLFxuICAgICAgICAzOiAnXFwnw7xuY8O8JyxcbiAgICAgICAgNDogJ1xcJ8O8bmPDvCcsXG4gICAgICAgIDEwMDogJ1xcJ8O8bmPDvCcsXG4gICAgICAgIDY6ICdcXCduY8SxJyxcbiAgICAgICAgOTogJ1xcJ3VuY3UnLFxuICAgICAgICAxMDogJ1xcJ3VuY3UnLFxuICAgICAgICAzMDogJ1xcJ3VuY3UnLFxuICAgICAgICA2MDogJ1xcJ8SxbmPEsScsXG4gICAgICAgIDkwOiAnXFwnxLFuY8SxJ1xuICAgIH07XG5cbiAgICB2YXIgdHIgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd0cicsIHtcbiAgICAgICAgbW9udGhzIDogJ09jYWtfxZ51YmF0X01hcnRfTmlzYW5fTWF5xLFzX0hhemlyYW5fVGVtbXV6X0HEn3VzdG9zX0V5bMO8bF9Fa2ltX0thc8SxbV9BcmFsxLFrJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdPY2FfxZ51Yl9NYXJfTmlzX01heV9IYXpfVGVtX0HEn3VfRXlsX0VraV9LYXNfQXJhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICdQYXphcl9QYXphcnRlc2lfU2FsxLFfw4dhcsWfYW1iYV9QZXLFn2VtYmVfQ3VtYV9DdW1hcnRlc2knLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnUGF6X1B0c19TYWxfw4dhcl9QZXJfQ3VtX0N0cycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnUHpfUHRfU2Ffw4dhX1BlX0N1X0N0Jy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0RELk1NLllZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCwgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbYnVnw7xuIHNhYXRdIExUJyxcbiAgICAgICAgICAgIG5leHREYXkgOiAnW3lhcsSxbiBzYWF0XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdbZ2VsZWNla10gZGRkZCBbc2FhdF0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdbZMO8bl0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW2dlw6dlbl0gZGRkZCBbc2FhdF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJyVzIHNvbnJhJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMgw7ZuY2UnLFxuICAgICAgICAgICAgcyA6ICdiaXJrYcOnIHNhbml5ZScsXG4gICAgICAgICAgICBzcyA6ICclZCBzYW5peWUnLFxuICAgICAgICAgICAgbSA6ICdiaXIgZGFraWthJyxcbiAgICAgICAgICAgIG1tIDogJyVkIGRha2lrYScsXG4gICAgICAgICAgICBoIDogJ2JpciBzYWF0JyxcbiAgICAgICAgICAgIGhoIDogJyVkIHNhYXQnLFxuICAgICAgICAgICAgZCA6ICdiaXIgZ8O8bicsXG4gICAgICAgICAgICBkZCA6ICclZCBnw7xuJyxcbiAgICAgICAgICAgIE0gOiAnYmlyIGF5JyxcbiAgICAgICAgICAgIE1NIDogJyVkIGF5JyxcbiAgICAgICAgICAgIHkgOiAnYmlyIHnEsWwnLFxuICAgICAgICAgICAgeXkgOiAnJWQgecSxbCdcbiAgICAgICAgfSxcbiAgICAgICAgb3JkaW5hbDogZnVuY3Rpb24gKG51bWJlciwgcGVyaW9kKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHBlcmlvZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0RvJzpcbiAgICAgICAgICAgICAgICBjYXNlICdERCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKG51bWJlciA9PT0gMCkgeyAgLy8gc3BlY2lhbCBjYXNlIGZvciB6ZXJvXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ1xcJ8SxbmPEsSc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSBudW1iZXIgJSAxMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGIgPSBudW1iZXIgJSAxMDAgLSBhLFxuICAgICAgICAgICAgICAgICAgICAgICAgYyA9IG51bWJlciA+PSAxMDAgPyAxMDAgOiBudWxsO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgKHN1ZmZpeGVzW2FdIHx8IHN1ZmZpeGVzW2JdIHx8IHN1ZmZpeGVzW2NdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gN3RoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdHI7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIC8vIEFmdGVyIHRoZSB5ZWFyIHRoZXJlIHNob3VsZCBiZSBhIHNsYXNoIGFuZCB0aGUgYW1vdW50IG9mIHllYXJzIHNpbmNlIERlY2VtYmVyIDI2LCAxOTc5IGluIFJvbWFuIG51bWVyYWxzLlxuICAgIC8vIFRoaXMgaXMgY3VycmVudGx5IHRvbyBkaWZmaWN1bHQgKG1heWJlIGV2ZW4gaW1wb3NzaWJsZSkgdG8gYWRkLlxuICAgIHZhciB0emwgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd0emwnLCB7XG4gICAgICAgIG1vbnRocyA6ICdKYW51YXJfRmV2cmFnbGhfTWFyw6dfQXZyw691X01haV9Hw7xuX0p1bGlhX0d1c2NodF9TZXRlbXZhcl9MaXN0b3DDpHRzX05vZW12YXJfWmVjZW12YXInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ0phbl9GZXZfTWFyX0F2cl9NYWlfR8O8bl9KdWxfR3VzX1NldF9MaXNfTm9lX1plYycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnU8O6bGFkaV9Mw7puZcOnaV9NYWl0emlfTcOhcmN1cmlfWGjDumFkaV9WacOpbmVyw6dpX1PDoXR1cmknLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAnU8O6bF9Mw7puX01haV9Nw6FyX1how7pfVmnDqV9Tw6F0Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdTw7pfTMO6X01hX03DoV9YaF9WaV9Tw6EnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEgubW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hILm1tLnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdELiBNTU1NIFtkYWxsYXNdIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QuIE1NTU0gW2RhbGxhc10gWVlZWSBISC5tbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQsIFtsaV0gRC4gTU1NTSBbZGFsbGFzXSBZWVlZIEhILm1tJ1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAvZFxcJ298ZFxcJ2EvaSxcbiAgICAgICAgaXNQTSA6IGZ1bmN0aW9uIChpbnB1dCkge1xuICAgICAgICAgICAgcmV0dXJuICdkXFwnbycgPT09IGlucHV0LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXJzLCBtaW51dGVzLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICBpZiAoaG91cnMgPiAxMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ2RcXCdvJyA6ICdEXFwnTyc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ2RcXCdhJyA6ICdEXFwnQSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbb3hoaSDDoF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdbZGVtw6Agw6BdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ2RkZGQgW8OgXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1tpZWlyaSDDoF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW3PDvHIgZWxdIGRkZGQgW2xhc3RldSDDoF0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ29zcHJlaSAlcycsXG4gICAgICAgICAgICBwYXN0IDogJ2phJXMnLFxuICAgICAgICAgICAgcyA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBzcyA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBtIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIG1tIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIGggOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgaGggOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgZCA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBkZCA6IHByb2Nlc3NSZWxhdGl2ZVRpbWUsXG4gICAgICAgICAgICBNIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIE1NIDogcHJvY2Vzc1JlbGF0aXZlVGltZSxcbiAgICAgICAgICAgIHkgOiBwcm9jZXNzUmVsYXRpdmVUaW1lLFxuICAgICAgICAgICAgeXkgOiBwcm9jZXNzUmVsYXRpdmVUaW1lXG4gICAgICAgIH0sXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IC9cXGR7MSwyfVxcLi8sXG4gICAgICAgIG9yZGluYWwgOiAnJWQuJyxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzUmVsYXRpdmVUaW1lKG51bWJlciwgd2l0aG91dFN1ZmZpeCwga2V5LCBpc0Z1dHVyZSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0ge1xuICAgICAgICAgICAgJ3MnOiBbJ3ZpZW5zYXMgc2VjdW5kcycsICdcXCdpZW5zYXMgc2VjdW5kcyddLFxuICAgICAgICAgICAgJ3NzJzogW251bWJlciArICcgc2VjdW5kcycsICcnICsgbnVtYmVyICsgJyBzZWN1bmRzJ10sXG4gICAgICAgICAgICAnbSc6IFsnXFwnbiBtw611dCcsICdcXCdpZW5zIG3DrXV0J10sXG4gICAgICAgICAgICAnbW0nOiBbbnVtYmVyICsgJyBtw611dHMnLCAnJyArIG51bWJlciArICcgbcOtdXRzJ10sXG4gICAgICAgICAgICAnaCc6IFsnXFwnbiDDvm9yYScsICdcXCdpZW5zYSDDvm9yYSddLFxuICAgICAgICAgICAgJ2hoJzogW251bWJlciArICcgw75vcmFzJywgJycgKyBudW1iZXIgKyAnIMO+b3JhcyddLFxuICAgICAgICAgICAgJ2QnOiBbJ1xcJ24geml1YScsICdcXCdpZW5zYSB6aXVhJ10sXG4gICAgICAgICAgICAnZGQnOiBbbnVtYmVyICsgJyB6aXVhcycsICcnICsgbnVtYmVyICsgJyB6aXVhcyddLFxuICAgICAgICAgICAgJ00nOiBbJ1xcJ24gbWVzJywgJ1xcJ2llbnMgbWVzJ10sXG4gICAgICAgICAgICAnTU0nOiBbbnVtYmVyICsgJyBtZXNlbicsICcnICsgbnVtYmVyICsgJyBtZXNlbiddLFxuICAgICAgICAgICAgJ3knOiBbJ1xcJ24gYXInLCAnXFwnaWVucyBhciddLFxuICAgICAgICAgICAgJ3l5JzogW251bWJlciArICcgYXJzJywgJycgKyBudW1iZXIgKyAnIGFycyddXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBpc0Z1dHVyZSA/IGZvcm1hdFtrZXldWzBdIDogKHdpdGhvdXRTdWZmaXggPyBmb3JtYXRba2V5XVswXSA6IGZvcm1hdFtrZXldWzFdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHpsO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgdHptID0gbW9tZW50LmRlZmluZUxvY2FsZSgndHptJywge1xuICAgICAgICBtb250aHMgOiAn4rWJ4rWP4rWP4rSw4rWi4rWUX+K0seK1leK0sOK1ouK1lV/itY7itLDitZXitZpf4rWJ4rSx4rWU4rWJ4rWUX+K1juK0sOK1ouK1ouK1k1/itaLitZPitY/itaLitZNf4rWi4rWT4rWN4rWi4rWT4rWjX+K1luK1k+K1m+K1nF/itZvitZPitZzitLDitY/itLHitYnitZRf4rS94rWf4rWT4rSx4rWVX+K1j+K1k+K1oeK0sOK1j+K0seK1ieK1lF/itLfitZPitYritY/itLHitYnitZQnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ+K1ieK1j+K1j+K0sOK1ouK1lF/itLHitZXitLDitaLitZVf4rWO4rSw4rWV4rWaX+K1ieK0seK1lOK1ieK1lF/itY7itLDitaLitaLitZNf4rWi4rWT4rWP4rWi4rWTX+K1ouK1k+K1jeK1ouK1k+K1o1/itZbitZPitZvitZxf4rWb4rWT4rWc4rSw4rWP4rSx4rWJ4rWUX+K0veK1n+K1k+K0seK1lV/itY/itZPitaHitLDitY/itLHitYnitZRf4rS34rWT4rWK4rWP4rSx4rWJ4rWUJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICfitLDitZnitLDitY7itLDitZlf4rSw4rWi4rWP4rSw4rWZX+K0sOK1meK1ieK1j+K0sOK1mV/itLDitL3itZTitLDitZlf4rSw4rS94rWh4rSw4rWZX+K0sOK1meK1ieK1juK1oeK0sOK1mV/itLDitZnitYnitLnitaLitLDitZknLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn4rSw4rWZ4rSw4rWO4rSw4rWZX+K0sOK1ouK1j+K0sOK1mV/itLDitZnitYnitY/itLDitZlf4rSw4rS94rWU4rSw4rWZX+K0sOK0veK1oeK0sOK1mV/itLDitZnitYnitY7itaHitLDitZlf4rSw4rWZ4rWJ4rS54rWi4rSw4rWZJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICfitLDitZnitLDitY7itLDitZlf4rSw4rWi4rWP4rSw4rWZX+K0sOK1meK1ieK1j+K0sOK1mV/itLDitL3itZTitLDitZlf4rSw4rS94rWh4rSw4rWZX+K0sOK1meK1ieK1juK1oeK0sOK1mV/itLDitZnitYnitLnitaLitLDitZknLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ2RkZGQgRCBNTU1NIFlZWVkgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vitLDitZnitLfitYUg4rS0XSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5OiAnW+K0sOK1meK0veK0sCDitLRdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBb4rS0XSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5OiAnW+K0sOK1muK0sOK1j+K1nCDitLRdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBb4rS0XSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICfitLfitLDitLfitYUg4rWZIOK1ouK0sOK1jyAlcycsXG4gICAgICAgICAgICBwYXN0IDogJ+K1ouK0sOK1jyAlcycsXG4gICAgICAgICAgICBzIDogJ+K1ieK1juK1ieK0vScsXG4gICAgICAgICAgICBzcyA6ICclZCDitYnitY7itYnitL0nLFxuICAgICAgICAgICAgbSA6ICfitY7itYnitY/itZPitLonLFxuICAgICAgICAgICAgbW0gOiAnJWQg4rWO4rWJ4rWP4rWT4rS6JyxcbiAgICAgICAgICAgIGggOiAn4rWZ4rSw4rWE4rSwJyxcbiAgICAgICAgICAgIGhoIDogJyVkIOK1nOK0sOK1meK1meK0sOK1hOK1ieK1jycsXG4gICAgICAgICAgICBkIDogJ+K0sOK1meK1mScsXG4gICAgICAgICAgICBkZCA6ICclZCBv4rWZ4rWZ4rSw4rWPJyxcbiAgICAgICAgICAgIE0gOiAn4rSw4rWib+K1k+K1lCcsXG4gICAgICAgICAgICBNTSA6ICclZCDitYnitaLitaLitYnitZTitY8nLFxuICAgICAgICAgICAgeSA6ICfitLDitZnitLPitLDitZknLFxuICAgICAgICAgICAgeXkgOiAnJWQg4rWJ4rWZ4rSz4rSw4rWZ4rWPJ1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogNiwgLy8gU2F0dXJkYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDEyICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxMnRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdHptO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgdHptTGF0biA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3R6bS1sYXRuJywge1xuICAgICAgICBtb250aHMgOiAnaW5uYXlyX2Jyy6RheXLLpF9tYXLLpHPLpF9pYnJpcl9tYXl5d195d255d195d2x5d3pfyaN3xaF0X8Whd3RhbmJpcl9rdMukd2Jyy6Rfbnd3YW5iaXJfZHdqbmJpcicuc3BsaXQoJ18nKSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAnaW5uYXlyX2Jyy6RheXLLpF9tYXLLpHPLpF9pYnJpcl9tYXl5d195d255d195d2x5d3pfyaN3xaF0X8Whd3RhbmJpcl9rdMukd2Jyy6Rfbnd3YW5iaXJfZHdqbmJpcicuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAnYXNhbWFzX2F5bmFzX2FzaW5hc19ha3Jhc19ha3dhc19hc2ltd2FzX2FzaeG4jXlhcycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdhc2FtYXNfYXluYXNfYXNpbmFzX2FrcmFzX2Frd2FzX2FzaW13YXNfYXNp4biNeWFzJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdhc2FtYXNfYXluYXNfYXNpbmFzX2FrcmFzX2Frd2FzX2FzaW13YXNfYXNp4biNeWFzJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW2FzZGtoIGddIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbYXNrYSBnXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlazogJ2RkZGQgW2ddIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbYXNzYW50IGddIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnZGRkZCBbZ10gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnZGFka2ggcyB5YW4gJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICd5YW4gJXMnLFxuICAgICAgICAgICAgcyA6ICdpbWlrJyxcbiAgICAgICAgICAgIHNzIDogJyVkIGltaWsnLFxuICAgICAgICAgICAgbSA6ICdtaW514biNJyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1pbnXhuI0nLFxuICAgICAgICAgICAgaCA6ICdzYcmbYScsXG4gICAgICAgICAgICBoaCA6ICclZCB0YXNzYcmbaW4nLFxuICAgICAgICAgICAgZCA6ICdhc3MnLFxuICAgICAgICAgICAgZGQgOiAnJWQgb3NzYW4nLFxuICAgICAgICAgICAgTSA6ICdheW93cicsXG4gICAgICAgICAgICBNTSA6ICclZCBpeXlpcm4nLFxuICAgICAgICAgICAgeSA6ICdhc2dhcycsXG4gICAgICAgICAgICB5eSA6ICclZCBpc2dhc24nXG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiA2LCAvLyBTYXR1cmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogMTIgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDEydGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB0em1MYXRuO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsYW5ndWFnZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciB1Z0NuID0gbW9tZW50LmRlZmluZUxvY2FsZSgndWctY24nLCB7XG4gICAgICAgIG1vbnRoczogJ9mK2KfZhtuL2KfYsV/ZgduQ24vYsdin2YRf2YXYp9ix2Kpf2KbYp9m+2LHbkNmEX9mF2KfZil/YptmJ2Yrbh9mGX9im2YnZituH2YRf2KbYp9uL2Lrbh9iz2Kpf2LPbkNmG2Krbldio2YnYsV/YptuG2YPYqtuV2KjZidixX9mG2YjZitin2KjZidixX9iv25DZg9in2KjZidixJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICBtb250aHNTaG9ydDogJ9mK2KfZhtuL2KfYsV/ZgduQ24vYsdin2YRf2YXYp9ix2Kpf2KbYp9m+2LHbkNmEX9mF2KfZil/YptmJ2Yrbh9mGX9im2YnZituH2YRf2KbYp9uL2Lrbh9iz2Kpf2LPbkNmG2Krbldio2YnYsV/YptuG2YPYqtuV2KjZidixX9mG2YjZitin2KjZidixX9iv25DZg9in2KjZidixJy5zcGxpdChcbiAgICAgICAgICAgICdfJ1xuICAgICAgICApLFxuICAgICAgICB3ZWVrZGF5czogJ9mK25XZg9i025XZhtio25Vf2K/biNi025XZhtio25Vf2LPbldmK2LTbldmG2KjblV/ahtin2LHYtNuV2YbYqNuVX9m+25XZiti025XZhtio25Vf2KzbiNmF25Vf2LTbldmG2KjblScuc3BsaXQoXG4gICAgICAgICAgICAnXydcbiAgICAgICAgKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydDogJ9mK25Vf2K/biF/Ys9uVX9qG2Kdf2b7blV/YrNuIX9i025UnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluOiAn2YrblV/Yr9uIX9iz25Vf2obYp1/ZvtuVX9is24hf2LTblScuc3BsaXQoJ18nKSxcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IHtcbiAgICAgICAgICAgIExUOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTOiAnSEg6bW06c3MnLFxuICAgICAgICAgICAgTDogJ1lZWVktTU0tREQnLFxuICAgICAgICAgICAgTEw6ICdZWVlZLdmK2YnZhNmJTS3Yptin2YrZhtmJ2q1ELdmD24jZhtmJJyxcbiAgICAgICAgICAgIExMTDogJ1lZWVkt2YrZidmE2YlNLdim2KfZitmG2YnarUQt2YPbiNmG2YnYjCBISDptbScsXG4gICAgICAgICAgICBMTExMOiAnZGRkZNiMIFlZWVkt2YrZidmE2YlNLdim2KfZitmG2YnarUQt2YPbiNmG2YnYjCBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL9mK25DYsdmJ2YUg2YPbkNqG25V82LPbldq+25XYsXzahtuI2LTYqtmJ2YYg2Kjbh9ix24fZhnzahtuI2LR82obbiNi02KrZidmGINmD25DZitmJ2YZ82YPbldqGLyxcbiAgICAgICAgbWVyaWRpZW1Ib3VyOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIG1lcmlkaWVtID09PSAn2YrbkNix2YnZhSDZg9uQ2obblScgfHxcbiAgICAgICAgICAgICAgICBtZXJpZGllbSA9PT0gJ9iz25XavtuV2LEnIHx8XG4gICAgICAgICAgICAgICAgbWVyaWRpZW0gPT09ICfahtuI2LTYqtmJ2YYg2Kjbh9ix24fZhidcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ9qG24jYtNiq2YnZhiDZg9uQ2YrZidmGJyB8fCBtZXJpZGllbSA9PT0gJ9mD25XahicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMSA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICB2YXIgaG0gPSBob3VyICogMTAwICsgbWludXRlO1xuICAgICAgICAgICAgaWYgKGhtIDwgNjAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfZituQ2LHZidmFINmD25DahtuVJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPCA5MDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9iz25XavtuV2LEnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA8IDExMzApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9qG24jYtNiq2YnZhiDYqNuH2LHbh9mGJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPCAxMjMwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfahtuI2LQnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA8IDE4MDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9qG24jYtNiq2YnZhiDZg9uQ2YrZidmGJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfZg9uV2oYnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhcjoge1xuICAgICAgICAgICAgc2FtZURheTogJ1vYqNuI2q/biNmGINiz2KfYptuV2KpdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdb2Kbbldiq25Ug2LPYp9im25XYql0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWs6ICdb2YPbkNmE25XYsdmD2YldIGRkZGQgW9iz2KfYptuV2KpdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdb2KrbhtmG24jar9uI2YZdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrOiAnW9im2KfZhNiv2YnZhtmC2YldIGRkZGQgW9iz2KfYptuV2KpdIExUJyxcbiAgICAgICAgICAgIHNhbWVFbHNlOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lOiB7XG4gICAgICAgICAgICBmdXR1cmU6ICclcyDZg9uQ2YrZidmGJyxcbiAgICAgICAgICAgIHBhc3Q6ICclcyDYqNuH2LHbh9mGJyxcbiAgICAgICAgICAgIHM6ICfZhtuV2obahtuVINiz25DZg9mI2YbYqicsXG4gICAgICAgICAgICBzczogJyVkINiz25DZg9mI2YbYqicsXG4gICAgICAgICAgICBtOiAn2KjZidixINmF2YnZhtuH2KonLFxuICAgICAgICAgICAgbW06ICclZCDZhdmJ2Ybbh9iqJyxcbiAgICAgICAgICAgIGg6ICfYqNmJ2LEg2LPYp9im25XYqicsXG4gICAgICAgICAgICBoaDogJyVkINiz2KfYptuV2KonLFxuICAgICAgICAgICAgZDogJ9io2YnYsSDZg9uI2YYnLFxuICAgICAgICAgICAgZGQ6ICclZCDZg9uI2YYnLFxuICAgICAgICAgICAgTTogJ9io2YnYsSDYptin2YonLFxuICAgICAgICAgICAgTU06ICclZCDYptin2YonLFxuICAgICAgICAgICAgeTogJ9io2YnYsSDZitmJ2YQnLFxuICAgICAgICAgICAgeXk6ICclZCDZitmJ2YQnXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KC3Zg9uI2YbZiXwt2KbYp9mKfC3avtuV2b7YqtuVKS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEREQnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3Zg9uI2YbZiSc7XG4gICAgICAgICAgICAgICAgY2FzZSAndyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdq+25XZvtiq25UnO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHByZXBhcnNlOiBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL9iML2csICcsJyk7XG4gICAgICAgIH0sXG4gICAgICAgIHBvc3Rmb3JtYXQ6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvLC9nLCAn2IwnKTtcbiAgICAgICAgfSxcbiAgICAgICAgd2Vlazoge1xuICAgICAgICAgICAgLy8gR0IvVCA3NDA4LTE5OTTjgIrmlbDmja7lhYPlkozkuqTmjaLmoLzlvI/Ct+S/oeaBr+S6pOaNosK35pel5pyf5ZKM5pe26Ze06KGo56S65rOV44CL5LiOSVNPIDg2MDE6MTk4OOetieaViFxuICAgICAgICAgICAgZG93OiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveTogNyAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiAxc3QgaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB1Z0NuO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICBmdW5jdGlvbiBwbHVyYWwod29yZCwgbnVtKSB7XG4gICAgICAgIHZhciBmb3JtcyA9IHdvcmQuc3BsaXQoJ18nKTtcbiAgICAgICAgcmV0dXJuIG51bSAlIDEwID09PSAxICYmIG51bSAlIDEwMCAhPT0gMTEgPyBmb3Jtc1swXSA6IChudW0gJSAxMCA+PSAyICYmIG51bSAlIDEwIDw9IDQgJiYgKG51bSAlIDEwMCA8IDEwIHx8IG51bSAlIDEwMCA+PSAyMCkgPyBmb3Jtc1sxXSA6IGZvcm1zWzJdKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVsYXRpdmVUaW1lV2l0aFBsdXJhbChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIGtleSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0ge1xuICAgICAgICAgICAgJ3NzJzogd2l0aG91dFN1ZmZpeCA/ICfRgdC10LrRg9C90LTQsF/RgdC10LrRg9C90LTQuF/RgdC10LrRg9C90LQnIDogJ9GB0LXQutGD0L3QtNGDX9GB0LXQutGD0L3QtNC4X9GB0LXQutGD0L3QtCcsXG4gICAgICAgICAgICAnbW0nOiB3aXRob3V0U3VmZml4ID8gJ9GF0LLQuNC70LjQvdCwX9GF0LLQuNC70LjQvdC4X9GF0LLQuNC70LjQvScgOiAn0YXQstC40LvQuNC90YNf0YXQstC40LvQuNC90Lhf0YXQstC40LvQuNC9JyxcbiAgICAgICAgICAgICdoaCc6IHdpdGhvdXRTdWZmaXggPyAn0LPQvtC00LjQvdCwX9Cz0L7QtNC40L3QuF/Qs9C+0LTQuNC9JyA6ICfQs9C+0LTQuNC90YNf0LPQvtC00LjQvdC4X9Cz0L7QtNC40L0nLFxuICAgICAgICAgICAgJ2RkJzogJ9C00LXQvdGMX9C00L3Rll/QtNC90ZbQsicsXG4gICAgICAgICAgICAnTU0nOiAn0LzRltGB0Y/RhtGMX9C80ZbRgdGP0YbRll/QvNGW0YHRj9GG0ZbQsicsXG4gICAgICAgICAgICAneXknOiAn0YDRltC6X9GA0L7QutC4X9GA0L7QutGW0LInXG4gICAgICAgIH07XG4gICAgICAgIGlmIChrZXkgPT09ICdtJykge1xuICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAn0YXQstC40LvQuNC90LAnIDogJ9GF0LLQuNC70LjQvdGDJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChrZXkgPT09ICdoJykge1xuICAgICAgICAgICAgcmV0dXJuIHdpdGhvdXRTdWZmaXggPyAn0LPQvtC00LjQvdCwJyA6ICfQs9C+0LTQuNC90YMnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICcgJyArIHBsdXJhbChmb3JtYXRba2V5XSwgK251bWJlcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gd2Vla2RheXNDYXNlUmVwbGFjZShtLCBmb3JtYXQpIHtcbiAgICAgICAgdmFyIHdlZWtkYXlzID0ge1xuICAgICAgICAgICAgJ25vbWluYXRpdmUnOiAn0L3QtdC00ZbQu9GPX9C/0L7QvdC10LTRltC70L7Qul/QstGW0LLRgtC+0YDQvtC6X9GB0LXRgNC10LTQsF/Rh9C10YLQstC10YBf0L/igJnRj9GC0L3QuNGG0Y9f0YHRg9Cx0L7RgtCwJy5zcGxpdCgnXycpLFxuICAgICAgICAgICAgJ2FjY3VzYXRpdmUnOiAn0L3QtdC00ZbQu9GOX9C/0L7QvdC10LTRltC70L7Qul/QstGW0LLRgtC+0YDQvtC6X9GB0LXRgNC10LTRg1/Rh9C10YLQstC10YBf0L/igJnRj9GC0L3QuNGG0Y5f0YHRg9Cx0L7RgtGDJy5zcGxpdCgnXycpLFxuICAgICAgICAgICAgJ2dlbml0aXZlJzogJ9C90LXQtNGW0LvRll/Qv9C+0L3QtdC00ZbQu9C60LBf0LLRltCy0YLQvtGA0LrQsF/RgdC10YDQtdC00Lhf0YfQtdGC0LLQtdGA0LPQsF/Qv+KAmdGP0YLQvdC40YbRll/RgdGD0LHQvtGC0LgnLnNwbGl0KCdfJylcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAobSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHdlZWtkYXlzWydub21pbmF0aXZlJ10uc2xpY2UoMSwgNykuY29uY2F0KHdlZWtkYXlzWydub21pbmF0aXZlJ10uc2xpY2UoMCwgMSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghbSkge1xuICAgICAgICAgICAgcmV0dXJuIHdlZWtkYXlzWydub21pbmF0aXZlJ107XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbm91bkNhc2UgPSAoLyhcXFtb0JLQstCj0YNdXFxdKSA/ZGRkZC8pLnRlc3QoZm9ybWF0KSA/XG4gICAgICAgICAgICAnYWNjdXNhdGl2ZScgOlxuICAgICAgICAgICAgKCgvXFxbPyg/OtC80LjQvdGD0LvQvtGXfNC90LDRgdGC0YPQv9C90L7Rlyk/ID9cXF0gP2RkZGQvKS50ZXN0KGZvcm1hdCkgP1xuICAgICAgICAgICAgICAgICdnZW5pdGl2ZScgOlxuICAgICAgICAgICAgICAgICdub21pbmF0aXZlJyk7XG4gICAgICAgIHJldHVybiB3ZWVrZGF5c1tub3VuQ2FzZV1bbS5kYXkoKV07XG4gICAgfVxuICAgIGZ1bmN0aW9uIHByb2Nlc3NIb3Vyc0Z1bmN0aW9uKHN0cikge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHN0ciArICfQvicgKyAodGhpcy5ob3VycygpID09PSAxMSA/ICfQsScgOiAnJykgKyAnXSBMVCc7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIHVrID0gbW9tZW50LmRlZmluZUxvY2FsZSgndWsnLCB7XG4gICAgICAgIG1vbnRocyA6IHtcbiAgICAgICAgICAgICdmb3JtYXQnOiAn0YHRltGH0L3Rj1/Qu9GO0YLQvtCz0L5f0LHQtdGA0LXQt9C90Y9f0LrQstGW0YLQvdGPX9GC0YDQsNCy0L3Rj1/Rh9C10YDQstC90Y9f0LvQuNC/0L3Rj1/RgdC10YDQv9C90Y9f0LLQtdGA0LXRgdC90Y9f0LbQvtCy0YLQvdGPX9C70LjRgdGC0L7Qv9Cw0LTQsF/Qs9GA0YPQtNC90Y8nLnNwbGl0KCdfJyksXG4gICAgICAgICAgICAnc3RhbmRhbG9uZSc6ICfRgdGW0YfQtdC90Yxf0LvRjtGC0LjQuV/QsdC10YDQtdC30LXQvdGMX9C60LLRltGC0LXQvdGMX9GC0YDQsNCy0LXQvdGMX9GH0LXRgNCy0LXQvdGMX9C70LjQv9C10L3RjF/RgdC10YDQv9C10L3RjF/QstC10YDQtdGB0LXQvdGMX9C20L7QstGC0LXQvdGMX9C70LjRgdGC0L7Qv9Cw0LRf0LPRgNGD0LTQtdC90YwnLnNwbGl0KCdfJylcbiAgICAgICAgfSxcbiAgICAgICAgbW9udGhzU2hvcnQgOiAn0YHRltGHX9C70Y7Rgl/QsdC10YBf0LrQstGW0YJf0YLRgNCw0LJf0YfQtdGA0LJf0LvQuNC/X9GB0LXRgNC/X9Cy0LXRgF/QttC+0LLRgl/Qu9C40YHRgl/Qs9GA0YPQtCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiB3ZWVrZGF5c0Nhc2VSZXBsYWNlLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ9C90LRf0L/QvV/QstGCX9GB0YBf0YfRgl/Qv9GCX9GB0LEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ9C90LRf0L/QvV/QstGCX9GB0YBf0YfRgl/Qv9GCX9GB0LEnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQuTU0uWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWSDRgC4nLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZINGALiwgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSDRgC4sIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXk6IHByb2Nlc3NIb3Vyc0Z1bmN0aW9uKCdb0KHRjNC+0LPQvtC00L3RliAnKSxcbiAgICAgICAgICAgIG5leHREYXk6IHByb2Nlc3NIb3Vyc0Z1bmN0aW9uKCdb0JfQsNCy0YLRgNCwICcpLFxuICAgICAgICAgICAgbGFzdERheTogcHJvY2Vzc0hvdXJzRnVuY3Rpb24oJ1vQktGH0L7RgNCwICcpLFxuICAgICAgICAgICAgbmV4dFdlZWs6IHByb2Nlc3NIb3Vyc0Z1bmN0aW9uKCdb0KNdIGRkZGQgWycpLFxuICAgICAgICAgICAgbGFzdFdlZWs6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZGF5KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByb2Nlc3NIb3Vyc0Z1bmN0aW9uKCdb0JzQuNC90YPQu9C+0ZddIGRkZGQgWycpLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvY2Vzc0hvdXJzRnVuY3Rpb24oJ1vQnNC40L3Rg9C70L7Qs9C+XSBkZGRkIFsnKS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYW1lRWxzZTogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICfQt9CwICVzJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXMg0YLQvtC80YMnLFxuICAgICAgICAgICAgcyA6ICfQtNC10LrRltC70YzQutCwINGB0LXQutGD0L3QtCcsXG4gICAgICAgICAgICBzcyA6IHJlbGF0aXZlVGltZVdpdGhQbHVyYWwsXG4gICAgICAgICAgICBtIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIG1tIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIGggOiAn0LPQvtC00LjQvdGDJyxcbiAgICAgICAgICAgIGhoIDogcmVsYXRpdmVUaW1lV2l0aFBsdXJhbCxcbiAgICAgICAgICAgIGQgOiAn0LTQtdC90YwnLFxuICAgICAgICAgICAgZGQgOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgTSA6ICfQvNGW0YHRj9GG0YwnLFxuICAgICAgICAgICAgTU0gOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsLFxuICAgICAgICAgICAgeSA6ICfRgNGW0LonLFxuICAgICAgICAgICAgeXkgOiByZWxhdGl2ZVRpbWVXaXRoUGx1cmFsXG4gICAgICAgIH0sXG4gICAgICAgIC8vIE0uIEUuOiB0aG9zZSB0d28gYXJlIHZpcnR1YWxseSB1bnVzZWQgYnV0IGEgdXNlciBtaWdodCB3YW50IHRvIGltcGxlbWVudCB0aGVtIGZvciBoaXMvaGVyIHdlYnNpdGUgZm9yIHNvbWUgcmVhc29uXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/QvdC+0YfRlnzRgNCw0L3QutGDfNC00L3Rj3zQstC10YfQvtGA0LAvLFxuICAgICAgICBpc1BNOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAvXijQtNC90Y980LLQtdGH0L7RgNCwKSQvLnRlc3QoaW5wdXQpO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VyLCBtaW51dGUsIGlzTG93ZXIpIHtcbiAgICAgICAgICAgIGlmIChob3VyIDwgNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0L3QvtGH0ZYnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9GA0LDQvdC60YMnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChob3VyIDwgMTcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ9C00L3Rjyc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn0LLQtdGH0L7RgNCwJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LSjQuXzQs9C+KS8sXG4gICAgICAgIG9yZGluYWw6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEREQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3cnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1cnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJy3QuSc7XG4gICAgICAgICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAnLdCz0L4nO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDcgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDd0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHVrO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgbW9udGhzID0gW1xuICAgICAgICAn2KzZhtmI2LHbjCcsXG4gICAgICAgICfZgdix2YjYsduMJyxcbiAgICAgICAgJ9mF2KfYsdqGJyxcbiAgICAgICAgJ9in2b7YsduM2YQnLFxuICAgICAgICAn2YXYptuMJyxcbiAgICAgICAgJ9is2YjZhicsXG4gICAgICAgICfYrNmI2YTYp9im24wnLFxuICAgICAgICAn2Kfar9iz2KonLFxuICAgICAgICAn2LPYqtmF2KjYsScsXG4gICAgICAgICfYp9qp2KrZiNio2LEnLFxuICAgICAgICAn2YbZiNmF2KjYsScsXG4gICAgICAgICfYr9iz2YXYqNixJ1xuICAgIF07XG4gICAgdmFyIGRheXMgPSBbXG4gICAgICAgICfYp9iq2YjYp9ixJyxcbiAgICAgICAgJ9m+24zYsScsXG4gICAgICAgICfZhdmG2q/ZhCcsXG4gICAgICAgICfYqNiv2r4nLFxuICAgICAgICAn2KzZhdi52LHYp9iqJyxcbiAgICAgICAgJ9is2YXYuduBJyxcbiAgICAgICAgJ9uB2YHYqtuBJ1xuICAgIF07XG5cbiAgICB2YXIgdXIgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd1cicsIHtcbiAgICAgICAgbW9udGhzIDogbW9udGhzLFxuICAgICAgICBtb250aHNTaG9ydCA6IG1vbnRocyxcbiAgICAgICAgd2Vla2RheXMgOiBkYXlzLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogZGF5cyxcbiAgICAgICAgd2Vla2RheXNNaW4gOiBkYXlzLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnZGRkZNiMIEQgTU1NTSBZWVlZIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv2LXYqNitfNi02KfZhS8sXG4gICAgICAgIGlzUE0gOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAn2LTYp9mFJyA9PT0gaW5wdXQ7XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXIgPCAxMikge1xuICAgICAgICAgICAgICAgIHJldHVybiAn2LXYqNitJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAn2LTYp9mFJztcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vYotisINio2YjZgtiqXSBMVCcsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1vaqdmEINio2YjZgtiqXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFvYqNmI2YLYql0gTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdb2q/YsNi02KrbgSDYsdmI2LIg2KjZiNmC2KpdIExUJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1var9iw2LTYqtuBXSBkZGRkIFvYqNmI2YLYql0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJyVzINio2LnYrycsXG4gICAgICAgICAgICBwYXN0IDogJyVzINmC2KjZhCcsXG4gICAgICAgICAgICBzIDogJ9qG2YbYryDYs9uM2qnZhtqIJyxcbiAgICAgICAgICAgIHNzIDogJyVkINiz24zaqdmG2ognLFxuICAgICAgICAgICAgbSA6ICfYp9uM2qkg2YXZhtm5JyxcbiAgICAgICAgICAgIG1tIDogJyVkINmF2YbZuScsXG4gICAgICAgICAgICBoIDogJ9in24zaqSDar9q+2YbZuduBJyxcbiAgICAgICAgICAgIGhoIDogJyVkINqv2r7Zhtm525InLFxuICAgICAgICAgICAgZCA6ICfYp9uM2qkg2K/ZhicsXG4gICAgICAgICAgICBkZCA6ICclZCDYr9mGJyxcbiAgICAgICAgICAgIE0gOiAn2KfbjNqpINmF2KfbgScsXG4gICAgICAgICAgICBNTSA6ICclZCDZhdin24EnLFxuICAgICAgICAgICAgeSA6ICfYp9uM2qkg2LPYp9mEJyxcbiAgICAgICAgICAgIHl5IDogJyVkINiz2KfZhCdcbiAgICAgICAgfSxcbiAgICAgICAgcHJlcGFyc2U6IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgv2IwvZywgJywnKTtcbiAgICAgICAgfSxcbiAgICAgICAgcG9zdGZvcm1hdDogZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC8sL2csICfYjCcpO1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB1cjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHV6ID0gbW9tZW50LmRlZmluZUxvY2FsZSgndXonLCB7XG4gICAgICAgIG1vbnRocyA6ICfRj9C90LLQsNGAX9GE0LXQstGA0LDQu1/QvNCw0YDRgl/QsNC/0YDQtdC7X9C80LDQuV/QuNGO0L1f0LjRjtC7X9Cw0LLQs9GD0YHRgl/RgdC10L3RgtGP0LHRgF/QvtC60YLRj9Cx0YBf0L3QvtGP0LHRgF/QtNC10LrQsNCx0YAnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ9GP0L3Qsl/RhNC10LJf0LzQsNGAX9Cw0L/RgF/QvNCw0Llf0LjRjtC9X9C40Y7Qu1/QsNCy0LNf0YHQtdC9X9C+0LrRgl/QvdC+0Y9f0LTQtdC6Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICfQr9C60YjQsNC90LHQsF/QlNGD0YjQsNC90LHQsF/QodC10YjQsNC90LHQsF/Qp9C+0YDRiNCw0L3QsdCwX9Cf0LDQudGI0LDQvdCx0LBf0JbRg9C80LBf0KjQsNC90LHQsCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICfQr9C60Yhf0JTRg9GIX9Ch0LXRiF/Qp9C+0YBf0J/QsNC5X9CW0YPQvF/QqNCw0L0nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ9Cv0Lpf0JTRg1/QodC1X9Cn0L5f0J/QsF/QltGDX9Co0LAnLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdEIE1NTU0gWVlZWSwgZGRkZCBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vQkdGD0LPRg9C9INGB0L7QsNGCXSBMVCBb0LTQsF0nLFxuICAgICAgICAgICAgbmV4dERheSA6ICdb0K3RgNGC0LDQs9CwXSBMVCBb0LTQsF0nLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBb0LrRg9C90Lgg0YHQvtCw0YJdIExUIFvQtNCwXScsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1vQmtC10YfQsCDRgdC+0LDRgl0gTFQgW9C00LBdJyxcbiAgICAgICAgICAgIGxhc3RXZWVrIDogJ1vQo9GC0LPQsNC9XSBkZGRkIFvQutGD0L3QuCDRgdC+0LDRgl0gTFQgW9C00LBdJyxcbiAgICAgICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICfQr9C60LjQvSAlcyDQuNGH0LjQtNCwJyxcbiAgICAgICAgICAgIHBhc3QgOiAn0JHQuNGAINC90LXRh9CwICVzINC+0LvQtNC40L0nLFxuICAgICAgICAgICAgcyA6ICfRhNGD0YDRgdCw0YInLFxuICAgICAgICAgICAgc3MgOiAnJWQg0YTRg9GA0YHQsNGCJyxcbiAgICAgICAgICAgIG0gOiAn0LHQuNGAINC00LDQutC40LrQsCcsXG4gICAgICAgICAgICBtbSA6ICclZCDQtNCw0LrQuNC60LAnLFxuICAgICAgICAgICAgaCA6ICfQsdC40YAg0YHQvtCw0YInLFxuICAgICAgICAgICAgaGggOiAnJWQg0YHQvtCw0YInLFxuICAgICAgICAgICAgZCA6ICfQsdC40YAg0LrRg9C9JyxcbiAgICAgICAgICAgIGRkIDogJyVkINC60YPQvScsXG4gICAgICAgICAgICBNIDogJ9Cx0LjRgCDQvtC5JyxcbiAgICAgICAgICAgIE1NIDogJyVkINC+0LknLFxuICAgICAgICAgICAgeSA6ICfQsdC40YAg0LnQuNC7JyxcbiAgICAgICAgICAgIHl5IDogJyVkINC50LjQuydcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNyAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdXo7XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciB1ekxhdG4gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd1ei1sYXRuJywge1xuICAgICAgICBtb250aHMgOiAnWWFudmFyX0ZldnJhbF9NYXJ0X0FwcmVsX01heV9JeXVuX0l5dWxfQXZndXN0X1NlbnRhYnJfT2t0YWJyX05veWFicl9EZWthYnInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ1lhbl9GZXZfTWFyX0Fwcl9NYXlfSXl1bl9JeXVsX0F2Z19TZW5fT2t0X05veV9EZWsnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ1lha3NoYW5iYV9EdXNoYW5iYV9TZXNoYW5iYV9DaG9yc2hhbmJhX1BheXNoYW5iYV9KdW1hX1NoYW5iYScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdZYWtfRHVzaF9TZXNoX0Nob3JfUGF5X0p1bV9TaGFuJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdZYV9EdV9TZV9DaG9fUGFfSnVfU2hhJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFlZWVknLFxuICAgICAgICAgICAgTExMIDogJ0QgTU1NTSBZWVlZIEhIOm1tJyxcbiAgICAgICAgICAgIExMTEwgOiAnRCBNTU1NIFlZWVksIGRkZGQgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbQnVndW4gc29hdF0gTFQgW2RhXScsXG4gICAgICAgICAgICBuZXh0RGF5IDogJ1tFcnRhZ2FdIExUIFtkYV0nLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBba3VuaSBzb2F0XSBMVCBbZGFdJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW0tlY2hhIHNvYXRdIExUIFtkYV0nLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW09cXCd0Z2FuXSBkZGRkIFtrdW5pIHNvYXRdIExUIFtkYV0nLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ1lhcWluICVzIGljaGlkYScsXG4gICAgICAgICAgICBwYXN0IDogJ0JpciBuZWNoYSAlcyBvbGRpbicsXG4gICAgICAgICAgICBzIDogJ3Nvbml5YScsXG4gICAgICAgICAgICBzcyA6ICclZCBzb25peWEnLFxuICAgICAgICAgICAgbSA6ICdiaXIgZGFxaXFhJyxcbiAgICAgICAgICAgIG1tIDogJyVkIGRhcWlxYScsXG4gICAgICAgICAgICBoIDogJ2JpciBzb2F0JyxcbiAgICAgICAgICAgIGhoIDogJyVkIHNvYXQnLFxuICAgICAgICAgICAgZCA6ICdiaXIga3VuJyxcbiAgICAgICAgICAgIGRkIDogJyVkIGt1bicsXG4gICAgICAgICAgICBNIDogJ2JpciBveScsXG4gICAgICAgICAgICBNTSA6ICclZCBveScsXG4gICAgICAgICAgICB5IDogJ2JpciB5aWwnLFxuICAgICAgICAgICAgeXkgOiAnJWQgeWlsJ1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA3ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA3dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB1ekxhdG47XG5cbn0pKSk7XG4iLCIvLyEgbW9tZW50LmpzIGxvY2FsZSBjb25maWd1cmF0aW9uXG5cbjsoZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnXG4gICAgICAgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICdmdW5jdGlvbicgPyBmYWN0b3J5KHJlcXVpcmUoJy4uL21vbWVudCcpKSA6XG4gICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWycuLi9tb21lbnQnXSwgZmFjdG9yeSkgOlxuICAgZmFjdG9yeShnbG9iYWwubW9tZW50KVxufSh0aGlzLCAoZnVuY3Rpb24gKG1vbWVudCkgeyAndXNlIHN0cmljdCc7XG5cblxuICAgIHZhciB2aSA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3ZpJywge1xuICAgICAgICBtb250aHMgOiAndGjDoW5nIDFfdGjDoW5nIDJfdGjDoW5nIDNfdGjDoW5nIDRfdGjDoW5nIDVfdGjDoW5nIDZfdGjDoW5nIDdfdGjDoW5nIDhfdGjDoW5nIDlfdGjDoW5nIDEwX3Row6FuZyAxMV90aMOhbmcgMTInLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJ1RoMDFfVGgwMl9UaDAzX1RoMDRfVGgwNV9UaDA2X1RoMDdfVGgwOF9UaDA5X1RoMTBfVGgxMV9UaDEyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXMgOiAnY2jhu6cgbmjhuq10X3Ro4bupIGhhaV90aOG7qSBiYV90aOG7qSB0xrBfdGjhu6kgbsSDbV90aOG7qSBzw6F1X3Ro4bupIGLhuqN5Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ0NOX1QyX1QzX1Q0X1Q1X1Q2X1Q3Jy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICdDTl9UMl9UM19UNF9UNV9UNl9UNycuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgbWVyaWRpZW1QYXJzZTogL3NhfGNoL2ksXG4gICAgICAgIGlzUE0gOiBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiAvXmNoJC9pLnRlc3QoaW5wdXQpO1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbSA6IGZ1bmN0aW9uIChob3VycywgbWludXRlcywgaXNMb3dlcikge1xuICAgICAgICAgICAgaWYgKGhvdXJzIDwgMTIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICdzYScgOiAnU0EnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICdjaCcgOiAnQ0gnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ0REL01NL1lZWVknLFxuICAgICAgICAgICAgTEwgOiAnRCBNTU1NIFtuxINtXSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gW27Eg21dIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gW27Eg21dIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgbCA6ICdERC9NL1lZWVknLFxuICAgICAgICAgICAgbGwgOiAnRCBNTU0gWVlZWScsXG4gICAgICAgICAgICBsbGwgOiAnRCBNTU0gWVlZWSBISDptbScsXG4gICAgICAgICAgICBsbGxsIDogJ2RkZCwgRCBNTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5OiAnW0jDtG0gbmF5IGzDumNdIExUJyxcbiAgICAgICAgICAgIG5leHREYXk6ICdbTmfDoHkgbWFpIGzDumNdIExUJyxcbiAgICAgICAgICAgIG5leHRXZWVrOiAnZGRkZCBbdHXhuqduIHThu5tpIGzDumNdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXk6ICdbSMO0bSBxdWEgbMO6Y10gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWs6ICdkZGRkIFt0deG6p24gcuG7k2kgbMO6Y10gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2U6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnJXMgdOG7m2knLFxuICAgICAgICAgICAgcGFzdCA6ICclcyB0csaw4bubYycsXG4gICAgICAgICAgICBzIDogJ3bDoGkgZ2nDonknLFxuICAgICAgICAgICAgc3MgOiAnJWQgZ2nDonknICxcbiAgICAgICAgICAgIG0gOiAnbeG7mXQgcGjDunQnLFxuICAgICAgICAgICAgbW0gOiAnJWQgcGjDunQnLFxuICAgICAgICAgICAgaCA6ICdt4buZdCBnaeG7nScsXG4gICAgICAgICAgICBoaCA6ICclZCBnaeG7nScsXG4gICAgICAgICAgICBkIDogJ23hu5l0IG5nw6B5JyxcbiAgICAgICAgICAgIGRkIDogJyVkIG5nw6B5JyxcbiAgICAgICAgICAgIE0gOiAnbeG7mXQgdGjDoW5nJyxcbiAgICAgICAgICAgIE1NIDogJyVkIHRow6FuZycsXG4gICAgICAgICAgICB5IDogJ23hu5l0IG7Eg20nLFxuICAgICAgICAgICAgeXkgOiAnJWQgbsSDbSdcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9LyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgIH0sXG4gICAgICAgIHdlZWsgOiB7XG4gICAgICAgICAgICBkb3cgOiAxLCAvLyBNb25kYXkgaXMgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2Vlay5cbiAgICAgICAgICAgIGRveSA6IDQgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDR0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHZpO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgeFBzZXVkbyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3gtcHNldWRvJywge1xuICAgICAgICBtb250aHMgOiAnSn7DocOxw7rDoX5yw71fRn7DqWJyw7p+w6Fyw71ffk3DoXJjfmhfw4FwfnLDrWxffk3DocO9X35Kw7rDscOpfl9Kw7psfsO9X8OBw7p+Z8O6c3R+X1PDqXB+dMOpbWJ+w6lyX8OTfmN0w7NifsOpcl/DkX7Ds3bDqW1+YsOpcl9+RMOpY8Opfm1iw6lyJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdKfsOhw7FffkbDqWJffk3DoXJffsOBcHJffk3DocO9X35Kw7rDsV9+SsO6bF9+w4HDumdfflPDqXBffsOTY3RffsORw7N2X35Ew6ljJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNQYXJzZUV4YWN0IDogdHJ1ZSxcbiAgICAgICAgd2Vla2RheXMgOiAnU37DusOxZMOhfsO9X03Ds37DsWTDocO9fl9Uw7rDqX5zZMOhw71+X1fDqWR+w7HDqXNkfsOhw71fVH5ow7pyc35kw6HDvV9+RnLDrWR+w6HDvV9TfsOhdMO6cn5kw6HDvScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdTfsO6w7Fffk3Ds8OxX35Uw7rDqV9+V8OpZF9+VGjDul9+RnLDrV9+U8OhdCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAnU37Dul9Nw7N+X1TDul9+V8OpX1R+aF9Gcn5fU8OhJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1BhcnNlRXhhY3QgOiB0cnVlLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIEwgOiAnREQvTU0vWVlZWScsXG4gICAgICAgICAgICBMTCA6ICdEIE1NTU0gWVlZWScsXG4gICAgICAgICAgICBMTEwgOiAnRCBNTU1NIFlZWVkgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBISDptbSdcbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1tUfsOzZMOhfsO9IMOhdF0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdbVH7Ds23Ds35ycsOzfncgw6F0XSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFvDoXRdIExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW8OdfsOpc3R+w6lyZMOhfsO9IMOhdF0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnW0x+w6FzdF0gZGRkZCBbw6F0XSBMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnw61+w7EgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyDDoX5nw7MnLFxuICAgICAgICAgICAgcyA6ICfDoSB+ZsOpdyB+c8OpY8OzfsOxZHMnLFxuICAgICAgICAgICAgc3MgOiAnJWQgc37DqWPDs8OxfmRzJyxcbiAgICAgICAgICAgIG0gOiAnw6Egfm3DrcOxfsO6dMOpJyxcbiAgICAgICAgICAgIG1tIDogJyVkIG1+w63DscO6fnTDqXMnLFxuICAgICAgICAgICAgaCA6ICfDoX7DsSBow7N+w7pyJyxcbiAgICAgICAgICAgIGhoIDogJyVkIGh+w7PDunJzJyxcbiAgICAgICAgICAgIGQgOiAnw6EgfmTDocO9JyxcbiAgICAgICAgICAgIGRkIDogJyVkIGR+w6HDvXMnLFxuICAgICAgICAgICAgTSA6ICfDoSB+bcOzw7F+dGgnLFxuICAgICAgICAgICAgTU0gOiAnJWQgbX7Ds8OxdH5ocycsXG4gICAgICAgICAgICB5IDogJ8OhIH7DvcOpw6FyJyxcbiAgICAgICAgICAgIHl5IDogJyVkIMO9fsOpw6FycydcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KHRofHN0fG5kfHJkKS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgYiA9IG51bWJlciAlIDEwLFxuICAgICAgICAgICAgICAgIG91dHB1dCA9ICh+fihudW1iZXIgJSAxMDAgLyAxMCkgPT09IDEpID8gJ3RoJyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDEpID8gJ3N0JyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDIpID8gJ25kJyA6XG4gICAgICAgICAgICAgICAgKGIgPT09IDMpID8gJ3JkJyA6ICd0aCc7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgb3V0cHV0O1xuICAgICAgICB9LFxuICAgICAgICB3ZWVrIDoge1xuICAgICAgICAgICAgZG93IDogMSwgLy8gTW9uZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgICAgICBkb3kgOiA0ICAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB4UHNldWRvO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgeW8gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd5bycsIHtcbiAgICAgICAgbW9udGhzIDogJ1PhurnMgXLhurnMgV9FzIByZcyAbGXMgF/hurhy4bq5zIBuYcyAX0nMgGdiZcyBX0XMgGJpYmlfT8yAa3XMgGR1X0Fn4bq5bW9fT8yAZ3XMgW5fT3dld2Vf4buMzIB3YcyAcmHMgF9CZcyBbHXMgV/hu4zMgHDhurnMgMyAJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICdT4bq5zIFyX0XMgHJsX+G6uHJuX0nMgGdiX0XMgGJpX0/MgGt1zIBfQWfhurlfT8yAZ3XMgV9Pd2Vf4buMzIB3YcyAX0JlzIFsX+G7jMyAcOG6ucyAzIAnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzIDogJ0HMgGnMgGt1zIFfQWplzIFfScyAc+G6ucyBZ3VuX+G7jGrhu43MgXJ1zIFf4buMauG7jcyBYuG7jV/hurh0acyAX0HMgGJhzIFt4bq5zIF0YScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNTaG9ydCA6ICdBzIBpzIBrX0FqZcyBX0nMgHPhurnMgV/hu4xqcl/hu4xqYl/hurh0acyAX0HMgGJhzIEnLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzTWluIDogJ0HMgGnMgF9Bal9JzIBzX+G7jHJf4buMYl/hurh0X0HMgGInLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnaDptbSBBJyxcbiAgICAgICAgICAgIExUUyA6ICdoOm1tOnNzIEEnLFxuICAgICAgICAgICAgTCA6ICdERC9NTS9ZWVlZJyxcbiAgICAgICAgICAgIExMIDogJ0QgTU1NTSBZWVlZJyxcbiAgICAgICAgICAgIExMTCA6ICdEIE1NTU0gWVlZWSBoOm1tIEEnLFxuICAgICAgICAgICAgTExMTCA6ICdkZGRkLCBEIE1NTU0gWVlZWSBoOm1tIEEnXG4gICAgICAgIH0sXG4gICAgICAgIGNhbGVuZGFyIDoge1xuICAgICAgICAgICAgc2FtZURheSA6ICdbT8yAbmnMgCBuaV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdb4buMzIBsYSBuaV0gTFQnLFxuICAgICAgICAgICAgbmV4dFdlZWsgOiAnZGRkZCBb4buMc+G6ucyAIHRvzIFuXFwnYuG7jV0gW25pXSBMVCcsXG4gICAgICAgICAgICBsYXN0RGF5IDogJ1tBzIBuYSBuaV0gTFQnLFxuICAgICAgICAgICAgbGFzdFdlZWsgOiAnZGRkZCBb4buMc+G6ucyAIHRvzIFs4buNzIFdIFtuaV0gTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJ25pzIEgJXMnLFxuICAgICAgICAgICAgcGFzdCA6ICclcyBr4buNamHMgScsXG4gICAgICAgICAgICBzIDogJ2nMgHPhurlqdcyBIGFheWHMgSBkaWUnLFxuICAgICAgICAgICAgc3MgOidhYXlhzIEgJWQnLFxuICAgICAgICAgICAgbSA6ICdpzIBz4bq5anXMgSBrYW4nLFxuICAgICAgICAgICAgbW0gOiAnacyAc+G6uWp1zIEgJWQnLFxuICAgICAgICAgICAgaCA6ICd3YcyBa2F0aSBrYW4nLFxuICAgICAgICAgICAgaGggOiAnd2HMgWthdGkgJWQnLFxuICAgICAgICAgICAgZCA6ICfhu41q4buNzIEga2FuJyxcbiAgICAgICAgICAgIGRkIDogJ+G7jWrhu43MgSAlZCcsXG4gICAgICAgICAgICBNIDogJ29zdcyAIGthbicsXG4gICAgICAgICAgICBNTSA6ICdvc3XMgCAlZCcsXG4gICAgICAgICAgICB5IDogJ+G7jWR1zIFuIGthbicsXG4gICAgICAgICAgICB5eSA6ICfhu41kdcyBbiAlZCdcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZSA6IC/hu41q4buNzIFcXHNcXGR7MSwyfS8sXG4gICAgICAgIG9yZGluYWwgOiAn4buNauG7jcyBICVkJyxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAvLyBUaGUgd2VlayB0aGF0IGNvbnRhaW5zIEphbiA0dGggaXMgdGhlIGZpcnN0IHdlZWsgb2YgdGhlIHllYXIuXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB5bztcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHpoQ24gPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd6aC1jbicsIHtcbiAgICAgICAgbW9udGhzIDogJ+S4gOaciF/kuozmnIhf5LiJ5pyIX+Wbm+aciF/kupTmnIhf5YWt5pyIX+S4g+aciF/lhavmnIhf5Lmd5pyIX+WNgeaciF/ljYHkuIDmnIhf5Y2B5LqM5pyIJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICcx5pyIXzLmnIhfM+aciF805pyIXzXmnIhfNuaciF835pyIXzjmnIhfOeaciF8xMOaciF8xMeaciF8xMuaciCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAn5pif5pyf5pelX+aYn+acn+S4gF/mmJ/mnJ/kuoxf5pif5pyf5LiJX+aYn+acn+Wbm1/mmJ/mnJ/kupRf5pif5pyf5YWtJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ+WRqOaXpV/lkajkuIBf5ZGo5LqMX+WRqOS4iV/lkajlm5tf5ZGo5LqUX+WRqOWFrScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn5pelX+S4gF/kuoxf5LiJX+Wbm1/kupRf5YWtJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ1lZWVkvTU0vREQnLFxuICAgICAgICAgICAgTEwgOiAnWVlZWeW5tE3mnIhE5pelJyxcbiAgICAgICAgICAgIExMTCA6ICdZWVlZ5bm0TeaciETml6VBaOeCuW1t5YiGJyxcbiAgICAgICAgICAgIExMTEwgOiAnWVlZWeW5tE3mnIhE5pelZGRkZEFo54K5bW3liIYnLFxuICAgICAgICAgICAgbCA6ICdZWVlZL00vRCcsXG4gICAgICAgICAgICBsbCA6ICdZWVlZ5bm0TeaciETml6UnLFxuICAgICAgICAgICAgbGxsIDogJ1lZWVnlubRN5pyIROaXpSBISDptbScsXG4gICAgICAgICAgICBsbGxsIDogJ1lZWVnlubRN5pyIROaXpWRkZGQgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/lh4zmmah85pep5LiKfOS4iuWNiHzkuK3ljYh85LiL5Y2IfOaZmuS4ii8sXG4gICAgICAgIG1lcmlkaWVtSG91cjogZnVuY3Rpb24gKGhvdXIsIG1lcmlkaWVtKSB7XG4gICAgICAgICAgICBpZiAoaG91ciA9PT0gMTIpIHtcbiAgICAgICAgICAgICAgICBob3VyID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXJpZGllbSA9PT0gJ+WHjOaZqCcgfHwgbWVyaWRpZW0gPT09ICfml6nkuIonIHx8XG4gICAgICAgICAgICAgICAgICAgIG1lcmlkaWVtID09PSAn5LiK5Y2IJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+S4i+WNiCcgfHwgbWVyaWRpZW0gPT09ICfmmZrkuIonKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gJ+S4reWNiCdcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91ciA+PSAxMSA/IGhvdXIgOiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgdmFyIGhtID0gaG91ciAqIDEwMCArIG1pbnV0ZTtcbiAgICAgICAgICAgIGlmIChobSA8IDYwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5YeM5pmoJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPCA5MDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+aXqeS4iic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhtIDwgMTEzMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5LiK5Y2IJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPCAxMjMwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfkuK3ljYgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA8IDE4MDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+S4i+WNiCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5pma5LiKJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vku4rlpKldTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdb5piO5aSpXUxUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ1vkuItdZGRkZExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW+aYqOWkqV1MVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdb5LiKXWRkZGRMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0o5pelfOaciHzlkagpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEJzpcbiAgICAgICAgICAgICAgICBjYXNlICdEREQnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+aXpSc7XG4gICAgICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAn5pyIJztcbiAgICAgICAgICAgICAgICBjYXNlICd3JzpcbiAgICAgICAgICAgICAgICBjYXNlICdXJzpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICflkagnO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJlbGF0aXZlVGltZSA6IHtcbiAgICAgICAgICAgIGZ1dHVyZSA6ICclc+WGhScsXG4gICAgICAgICAgICBwYXN0IDogJyVz5YmNJyxcbiAgICAgICAgICAgIHMgOiAn5Yeg56eSJyxcbiAgICAgICAgICAgIHNzIDogJyVkIOenkicsXG4gICAgICAgICAgICBtIDogJzEg5YiG6ZKfJyxcbiAgICAgICAgICAgIG1tIDogJyVkIOWIhumSnycsXG4gICAgICAgICAgICBoIDogJzEg5bCP5pe2JyxcbiAgICAgICAgICAgIGhoIDogJyVkIOWwj+aXticsXG4gICAgICAgICAgICBkIDogJzEg5aSpJyxcbiAgICAgICAgICAgIGRkIDogJyVkIOWkqScsXG4gICAgICAgICAgICBNIDogJzEg5Liq5pyIJyxcbiAgICAgICAgICAgIE1NIDogJyVkIOS4quaciCcsXG4gICAgICAgICAgICB5IDogJzEg5bm0JyxcbiAgICAgICAgICAgIHl5IDogJyVkIOW5tCdcbiAgICAgICAgfSxcbiAgICAgICAgd2VlayA6IHtcbiAgICAgICAgICAgIC8vIEdCL1QgNzQwOC0xOTk044CK5pWw5o2u5YWD5ZKM5Lqk5o2i5qC85byPwrfkv6Hmga/kuqTmjaLCt+aXpeacn+WSjOaXtumXtOihqOekuuazleOAi+S4jklTTyA4NjAxOjE5ODjnrYnmlYhcbiAgICAgICAgICAgIGRvdyA6IDEsIC8vIE1vbmRheSBpcyB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrLlxuICAgICAgICAgICAgZG95IDogNCAgLy8gVGhlIHdlZWsgdGhhdCBjb250YWlucyBKYW4gNHRoIGlzIHRoZSBmaXJzdCB3ZWVrIG9mIHRoZSB5ZWFyLlxuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gemhDbjtcblxufSkpKTtcbiIsIi8vISBtb21lbnQuanMgbG9jYWxlIGNvbmZpZ3VyYXRpb25cblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAmJiB0eXBlb2YgcmVxdWlyZSA9PT0gJ2Z1bmN0aW9uJyA/IGZhY3RvcnkocmVxdWlyZSgnLi4vbW9tZW50JykpIDpcbiAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJy4uL21vbWVudCddLCBmYWN0b3J5KSA6XG4gICBmYWN0b3J5KGdsb2JhbC5tb21lbnQpXG59KHRoaXMsIChmdW5jdGlvbiAobW9tZW50KSB7ICd1c2Ugc3RyaWN0JztcblxuXG4gICAgdmFyIHpoSGsgPSBtb21lbnQuZGVmaW5lTG9jYWxlKCd6aC1oaycsIHtcbiAgICAgICAgbW9udGhzIDogJ+S4gOaciF/kuozmnIhf5LiJ5pyIX+Wbm+aciF/kupTmnIhf5YWt5pyIX+S4g+aciF/lhavmnIhf5Lmd5pyIX+WNgeaciF/ljYHkuIDmnIhf5Y2B5LqM5pyIJy5zcGxpdCgnXycpLFxuICAgICAgICBtb250aHNTaG9ydCA6ICcx5pyIXzLmnIhfM+aciF805pyIXzXmnIhfNuaciF835pyIXzjmnIhfOeaciF8xMOaciF8xMeaciF8xMuaciCcuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXMgOiAn5pif5pyf5pelX+aYn+acn+S4gF/mmJ/mnJ/kuoxf5pif5pyf5LiJX+aYn+acn+Wbm1/mmJ/mnJ/kupRf5pif5pyf5YWtJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c1Nob3J0IDogJ+mAseaXpV/pgLHkuIBf6YCx5LqMX+mAseS4iV/pgLHlm5tf6YCx5LqUX+mAseWFrScuc3BsaXQoJ18nKSxcbiAgICAgICAgd2Vla2RheXNNaW4gOiAn5pelX+S4gF/kuoxf5LiJX+Wbm1/kupRf5YWtJy5zcGxpdCgnXycpLFxuICAgICAgICBsb25nRGF0ZUZvcm1hdCA6IHtcbiAgICAgICAgICAgIExUIDogJ0hIOm1tJyxcbiAgICAgICAgICAgIExUUyA6ICdISDptbTpzcycsXG4gICAgICAgICAgICBMIDogJ1lZWVkvTU0vREQnLFxuICAgICAgICAgICAgTEwgOiAnWVlZWeW5tE3mnIhE5pelJyxcbiAgICAgICAgICAgIExMTCA6ICdZWVlZ5bm0TeaciETml6UgSEg6bW0nLFxuICAgICAgICAgICAgTExMTCA6ICdZWVlZ5bm0TeaciETml6VkZGRkIEhIOm1tJyxcbiAgICAgICAgICAgIGwgOiAnWVlZWS9NL0QnLFxuICAgICAgICAgICAgbGwgOiAnWVlZWeW5tE3mnIhE5pelJyxcbiAgICAgICAgICAgIGxsbCA6ICdZWVlZ5bm0TeaciETml6UgSEg6bW0nLFxuICAgICAgICAgICAgbGxsbCA6ICdZWVlZ5bm0TeaciETml6VkZGRkIEhIOm1tJ1xuICAgICAgICB9LFxuICAgICAgICBtZXJpZGllbVBhcnNlOiAv5YeM5pmofOaXqeS4inzkuIrljYh85Lit5Y2IfOS4i+WNiHzmmZrkuIovLFxuICAgICAgICBtZXJpZGllbUhvdXIgOiBmdW5jdGlvbiAoaG91ciwgbWVyaWRpZW0pIHtcbiAgICAgICAgICAgIGlmIChob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lcmlkaWVtID09PSAn5YeM5pmoJyB8fCBtZXJpZGllbSA9PT0gJ+aXqeS4iicgfHwgbWVyaWRpZW0gPT09ICfkuIrljYgnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lcmlkaWVtID09PSAn5Lit5Y2IJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyID49IDExID8gaG91ciA6IGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfkuIvljYgnIHx8IG1lcmlkaWVtID09PSAn5pma5LiKJykge1xuICAgICAgICAgICAgICAgIHJldHVybiBob3VyICsgMTI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtIDogZnVuY3Rpb24gKGhvdXIsIG1pbnV0ZSwgaXNMb3dlcikge1xuICAgICAgICAgICAgdmFyIGhtID0gaG91ciAqIDEwMCArIG1pbnV0ZTtcbiAgICAgICAgICAgIGlmIChobSA8IDYwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5YeM5pmoJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPCA5MDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+aXqeS4iic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhtIDwgMTEzMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5LiK5Y2IJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPCAxMjMwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfkuK3ljYgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA8IDE4MDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+S4i+WNiCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5pma5LiKJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2FsZW5kYXIgOiB7XG4gICAgICAgICAgICBzYW1lRGF5IDogJ1vku4rlpKldTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdb5piO5aSpXUxUJyxcbiAgICAgICAgICAgIG5leHRXZWVrIDogJ1vkuItdZGRkZExUJyxcbiAgICAgICAgICAgIGxhc3REYXkgOiAnW+aYqOWkqV1MVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdb5LiKXWRkZGRMVCcsXG4gICAgICAgICAgICBzYW1lRWxzZSA6ICdMJ1xuICAgICAgICB9LFxuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0o5pelfOaciHzpgLEpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIsIHBlcmlvZCkge1xuICAgICAgICAgICAgc3dpdGNoIChwZXJpb2QpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdkJyA6XG4gICAgICAgICAgICAgICAgY2FzZSAnRCcgOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0RERCcgOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+aXpSc7XG4gICAgICAgICAgICAgICAgY2FzZSAnTScgOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyICsgJ+aciCc7XG4gICAgICAgICAgICAgICAgY2FzZSAndycgOlxuICAgICAgICAgICAgICAgIGNhc2UgJ1cnIDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfpgLEnO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQgOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVtYmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZWxhdGl2ZVRpbWUgOiB7XG4gICAgICAgICAgICBmdXR1cmUgOiAnJXPlhacnLFxuICAgICAgICAgICAgcGFzdCA6ICclc+WJjScsXG4gICAgICAgICAgICBzIDogJ+W5vuenkicsXG4gICAgICAgICAgICBzcyA6ICclZCDnp5InLFxuICAgICAgICAgICAgbSA6ICcxIOWIhumQmCcsXG4gICAgICAgICAgICBtbSA6ICclZCDliIbpkJgnLFxuICAgICAgICAgICAgaCA6ICcxIOWwj+aZgicsXG4gICAgICAgICAgICBoaCA6ICclZCDlsI/mmYInLFxuICAgICAgICAgICAgZCA6ICcxIOWkqScsXG4gICAgICAgICAgICBkZCA6ICclZCDlpKknLFxuICAgICAgICAgICAgTSA6ICcxIOWAi+aciCcsXG4gICAgICAgICAgICBNTSA6ICclZCDlgIvmnIgnLFxuICAgICAgICAgICAgeSA6ICcxIOW5tCcsXG4gICAgICAgICAgICB5eSA6ICclZCDlubQnXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiB6aEhrO1xuXG59KSkpO1xuIiwiLy8hIG1vbWVudC5qcyBsb2NhbGUgY29uZmlndXJhdGlvblxuXG47KGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICYmIHR5cGVvZiByZXF1aXJlID09PSAnZnVuY3Rpb24nID8gZmFjdG9yeShyZXF1aXJlKCcuLi9tb21lbnQnKSkgOlxuICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnLi4vbW9tZW50J10sIGZhY3RvcnkpIDpcbiAgIGZhY3RvcnkoZ2xvYmFsLm1vbWVudClcbn0odGhpcywgKGZ1bmN0aW9uIChtb21lbnQpIHsgJ3VzZSBzdHJpY3QnO1xuXG5cbiAgICB2YXIgemhUdyA9IG1vbWVudC5kZWZpbmVMb2NhbGUoJ3poLXR3Jywge1xuICAgICAgICBtb250aHMgOiAn5LiA5pyIX+S6jOaciF/kuInmnIhf5Zub5pyIX+S6lOaciF/lha3mnIhf5LiD5pyIX+WFq+aciF/kuZ3mnIhf5Y2B5pyIX+WNgeS4gOaciF/ljYHkuozmnIgnLnNwbGl0KCdfJyksXG4gICAgICAgIG1vbnRoc1Nob3J0IDogJzHmnIhfMuaciF8z5pyIXzTmnIhfNeaciF825pyIXzfmnIhfOOaciF855pyIXzEw5pyIXzEx5pyIXzEy5pyIJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5cyA6ICfmmJ/mnJ/ml6Vf5pif5pyf5LiAX+aYn+acn+S6jF/mmJ/mnJ/kuIlf5pif5pyf5ZubX+aYn+acn+S6lF/mmJ/mnJ/lha0nLnNwbGl0KCdfJyksXG4gICAgICAgIHdlZWtkYXlzU2hvcnQgOiAn6YCx5pelX+mAseS4gF/pgLHkuoxf6YCx5LiJX+mAseWbm1/pgLHkupRf6YCx5YWtJy5zcGxpdCgnXycpLFxuICAgICAgICB3ZWVrZGF5c01pbiA6ICfml6Vf5LiAX+S6jF/kuIlf5ZubX+S6lF/lha0nLnNwbGl0KCdfJyksXG4gICAgICAgIGxvbmdEYXRlRm9ybWF0IDoge1xuICAgICAgICAgICAgTFQgOiAnSEg6bW0nLFxuICAgICAgICAgICAgTFRTIDogJ0hIOm1tOnNzJyxcbiAgICAgICAgICAgIEwgOiAnWVlZWS9NTS9ERCcsXG4gICAgICAgICAgICBMTCA6ICdZWVlZ5bm0TeaciETml6UnLFxuICAgICAgICAgICAgTExMIDogJ1lZWVnlubRN5pyIROaXpSBISDptbScsXG4gICAgICAgICAgICBMTExMIDogJ1lZWVnlubRN5pyIROaXpWRkZGQgSEg6bW0nLFxuICAgICAgICAgICAgbCA6ICdZWVlZL00vRCcsXG4gICAgICAgICAgICBsbCA6ICdZWVlZ5bm0TeaciETml6UnLFxuICAgICAgICAgICAgbGxsIDogJ1lZWVnlubRN5pyIROaXpSBISDptbScsXG4gICAgICAgICAgICBsbGxsIDogJ1lZWVnlubRN5pyIROaXpWRkZGQgSEg6bW0nXG4gICAgICAgIH0sXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IC/lh4zmmah85pep5LiKfOS4iuWNiHzkuK3ljYh85LiL5Y2IfOaZmuS4ii8sXG4gICAgICAgIG1lcmlkaWVtSG91ciA6IGZ1bmN0aW9uIChob3VyLCBtZXJpZGllbSkge1xuICAgICAgICAgICAgaWYgKGhvdXIgPT09IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVyaWRpZW0gPT09ICflh4zmmagnIHx8IG1lcmlkaWVtID09PSAn5pep5LiKJyB8fCBtZXJpZGllbSA9PT0gJ+S4iuWNiCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaG91cjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVyaWRpZW0gPT09ICfkuK3ljYgnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgPj0gMTEgPyBob3VyIDogaG91ciArIDEyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXJpZGllbSA9PT0gJ+S4i+WNiCcgfHwgbWVyaWRpZW0gPT09ICfmmZrkuIonKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhvdXIgKyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWVyaWRpZW0gOiBmdW5jdGlvbiAoaG91ciwgbWludXRlLCBpc0xvd2VyKSB7XG4gICAgICAgICAgICB2YXIgaG0gPSBob3VyICogMTAwICsgbWludXRlO1xuICAgICAgICAgICAgaWYgKGhtIDwgNjAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICflh4zmmagnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA8IDkwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5pep5LiKJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG0gPCAxMTMwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfkuIrljYgnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChobSA8IDEyMzApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ+S4reWNiCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhtIDwgMTgwMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAn5LiL5Y2IJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICfmmZrkuIonO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjYWxlbmRhciA6IHtcbiAgICAgICAgICAgIHNhbWVEYXkgOiAnW+S7iuWkqV0gTFQnLFxuICAgICAgICAgICAgbmV4dERheSA6ICdb5piO5aSpXSBMVCcsXG4gICAgICAgICAgICBuZXh0V2VlayA6ICdb5LiLXWRkZGQgTFQnLFxuICAgICAgICAgICAgbGFzdERheSA6ICdb5pio5aSpXSBMVCcsXG4gICAgICAgICAgICBsYXN0V2VlayA6ICdb5LiKXWRkZGQgTFQnLFxuICAgICAgICAgICAgc2FtZUVsc2UgOiAnTCdcbiAgICAgICAgfSxcbiAgICAgICAgZGF5T2ZNb250aE9yZGluYWxQYXJzZTogL1xcZHsxLDJ9KOaXpXzmnIh86YCxKS8sXG4gICAgICAgIG9yZGluYWwgOiBmdW5jdGlvbiAobnVtYmVyLCBwZXJpb2QpIHtcbiAgICAgICAgICAgIHN3aXRjaCAocGVyaW9kKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnZCcgOlxuICAgICAgICAgICAgICAgIGNhc2UgJ0QnIDpcbiAgICAgICAgICAgICAgICBjYXNlICdEREQnIDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfml6UnO1xuICAgICAgICAgICAgICAgIGNhc2UgJ00nIDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlciArICfmnIgnO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3cnIDpcbiAgICAgICAgICAgICAgICBjYXNlICdXJyA6XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyAn6YCxJztcbiAgICAgICAgICAgICAgICBkZWZhdWx0IDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVsYXRpdmVUaW1lIDoge1xuICAgICAgICAgICAgZnV0dXJlIDogJyVz5YWnJyxcbiAgICAgICAgICAgIHBhc3QgOiAnJXPliY0nLFxuICAgICAgICAgICAgcyA6ICflub7np5InLFxuICAgICAgICAgICAgc3MgOiAnJWQg56eSJyxcbiAgICAgICAgICAgIG0gOiAnMSDliIbpkJgnLFxuICAgICAgICAgICAgbW0gOiAnJWQg5YiG6ZCYJyxcbiAgICAgICAgICAgIGggOiAnMSDlsI/mmYInLFxuICAgICAgICAgICAgaGggOiAnJWQg5bCP5pmCJyxcbiAgICAgICAgICAgIGQgOiAnMSDlpKknLFxuICAgICAgICAgICAgZGQgOiAnJWQg5aSpJyxcbiAgICAgICAgICAgIE0gOiAnMSDlgIvmnIgnLFxuICAgICAgICAgICAgTU0gOiAnJWQg5YCL5pyIJyxcbiAgICAgICAgICAgIHkgOiAnMSDlubQnLFxuICAgICAgICAgICAgeXkgOiAnJWQg5bm0J1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gemhUdztcblxufSkpKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gZXhwb3J0cy5QdXJlQ2FsZW5kYXJEYXkgPSB2b2lkIDA7XG5cbnZhciBfZW56eW1lU2hhbGxvd0VxdWFsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZW56eW1lLXNoYWxsb3ctZXF1YWxcIikpO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpO1xuXG52YXIgX2luaGVyaXRzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9yZWFjdE1vbWVudFByb3B0eXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LW1vbWVudC1wcm9wdHlwZXNcIikpO1xuXG52YXIgX2FpcmJuYlByb3BUeXBlcyA9IHJlcXVpcmUoXCJhaXJibmItcHJvcC10eXBlc1wiKTtcblxudmFyIF9yZWFjdFdpdGhTdHlsZXMgPSByZXF1aXJlKFwicmVhY3Qtd2l0aC1zdHlsZXNcIik7XG5cbnZhciBfbW9tZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwibW9tZW50XCIpKTtcblxudmFyIF9yYWYgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyYWZcIikpO1xuXG52YXIgX2RlZmF1bHRQaHJhc2VzID0gcmVxdWlyZShcIi4uL2RlZmF1bHRQaHJhc2VzXCIpO1xuXG52YXIgX2dldFBocmFzZVByb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2dldFBocmFzZVByb3BUeXBlc1wiKSk7XG5cbnZhciBfZ2V0Q2FsZW5kYXJEYXlTZXR0aW5ncyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2dldENhbGVuZGFyRGF5U2V0dGluZ3NcIikpO1xuXG52YXIgX01vZGlmaWVyc1NoYXBlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc2hhcGVzL01vZGlmaWVyc1NoYXBlXCIpKTtcblxudmFyIF9jb25zdGFudHMgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzXCIpO1xuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbnZhciBwcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX2FpcmJuYlByb3BUeXBlcy5mb3JiaWRFeHRyYVByb3BzKShfb2JqZWN0U3ByZWFkKHt9LCBfcmVhY3RXaXRoU3R5bGVzLndpdGhTdHlsZXNQcm9wVHlwZXMsIHtcbiAgZGF5OiBfcmVhY3RNb21lbnRQcm9wdHlwZXNbXCJkZWZhdWx0XCJdLm1vbWVudE9iaixcbiAgZGF5U2l6ZTogX2FpcmJuYlByb3BUeXBlcy5ub25OZWdhdGl2ZUludGVnZXIsXG4gIGlzT3V0c2lkZURheTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgbW9kaWZpZXJzOiBfTW9kaWZpZXJzU2hhcGVbXCJkZWZhdWx0XCJdLFxuICBpc0ZvY3VzZWQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIHRhYkluZGV4OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5vbmVPZihbMCwgLTFdKSxcbiAgb25EYXlDbGljazogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgb25EYXlNb3VzZUVudGVyOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvbkRheU1vdXNlTGVhdmU6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIHJlbmRlckRheUNvbnRlbnRzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBhcmlhTGFiZWxGb3JtYXQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZyxcbiAgLy8gaW50ZXJuYXRpb25hbGl6YXRpb25cbiAgcGhyYXNlczogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc2hhcGUoKDAsIF9nZXRQaHJhc2VQcm9wVHlwZXNbXCJkZWZhdWx0XCJdKShfZGVmYXVsdFBocmFzZXMuQ2FsZW5kYXJEYXlQaHJhc2VzKSlcbn0pKSA6IHt9O1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgZGF5OiAoMCwgX21vbWVudFtcImRlZmF1bHRcIl0pKCksXG4gIGRheVNpemU6IF9jb25zdGFudHMuREFZX1NJWkUsXG4gIGlzT3V0c2lkZURheTogZmFsc2UsXG4gIG1vZGlmaWVyczogbmV3IFNldCgpLFxuICBpc0ZvY3VzZWQ6IGZhbHNlLFxuICB0YWJJbmRleDogLTEsXG4gIG9uRGF5Q2xpY2s6IGZ1bmN0aW9uIG9uRGF5Q2xpY2soKSB7fSxcbiAgb25EYXlNb3VzZUVudGVyOiBmdW5jdGlvbiBvbkRheU1vdXNlRW50ZXIoKSB7fSxcbiAgb25EYXlNb3VzZUxlYXZlOiBmdW5jdGlvbiBvbkRheU1vdXNlTGVhdmUoKSB7fSxcbiAgcmVuZGVyRGF5Q29udGVudHM6IG51bGwsXG4gIGFyaWFMYWJlbEZvcm1hdDogJ2RkZGQsIExMJyxcbiAgLy8gaW50ZXJuYXRpb25hbGl6YXRpb25cbiAgcGhyYXNlczogX2RlZmF1bHRQaHJhc2VzLkNhbGVuZGFyRGF5UGhyYXNlc1xufTtcblxudmFyIENhbGVuZGFyRGF5ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfcmVmKSB7XG4gICgwLCBfaW5oZXJpdHNMb29zZTJbXCJkZWZhdWx0XCJdKShDYWxlbmRhckRheSwgX3JlZik7XG4gIHZhciBfcHJvdG8gPSBDYWxlbmRhckRheS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvWyFfcmVhY3RbXCJkZWZhdWx0XCJdLlB1cmVDb21wb25lbnQgJiYgXCJzaG91bGRDb21wb25lbnRVcGRhdGVcIl0gPSBmdW5jdGlvbiAobmV4dFByb3BzLCBuZXh0U3RhdGUpIHtcbiAgICByZXR1cm4gISgwLCBfZW56eW1lU2hhbGxvd0VxdWFsW1wiZGVmYXVsdFwiXSkodGhpcy5wcm9wcywgbmV4dFByb3BzKSB8fCAhKDAsIF9lbnp5bWVTaGFsbG93RXF1YWxbXCJkZWZhdWx0XCJdKSh0aGlzLnN0YXRlLCBuZXh0U3RhdGUpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIENhbGVuZGFyRGF5KCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9yZWYuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLnNldEJ1dHRvblJlZiA9IF90aGlzLnNldEJ1dHRvblJlZi5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGlzRm9jdXNlZCA9IF90aGlzJHByb3BzLmlzRm9jdXNlZCxcbiAgICAgICAgdGFiSW5kZXggPSBfdGhpcyRwcm9wcy50YWJJbmRleDtcblxuICAgIGlmICh0YWJJbmRleCA9PT0gMCkge1xuICAgICAgaWYgKGlzRm9jdXNlZCB8fCB0YWJJbmRleCAhPT0gcHJldlByb3BzLnRhYkluZGV4KSB7XG4gICAgICAgICgwLCBfcmFmW1wiZGVmYXVsdFwiXSkoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChfdGhpczIuYnV0dG9uUmVmKSB7XG4gICAgICAgICAgICBfdGhpczIuYnV0dG9uUmVmLmZvY3VzKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLm9uRGF5Q2xpY2sgPSBmdW5jdGlvbiBvbkRheUNsaWNrKGRheSwgZSkge1xuICAgIHZhciBvbkRheUNsaWNrID0gdGhpcy5wcm9wcy5vbkRheUNsaWNrO1xuICAgIG9uRGF5Q2xpY2soZGF5LCBlKTtcbiAgfTtcblxuICBfcHJvdG8ub25EYXlNb3VzZUVudGVyID0gZnVuY3Rpb24gb25EYXlNb3VzZUVudGVyKGRheSwgZSkge1xuICAgIHZhciBvbkRheU1vdXNlRW50ZXIgPSB0aGlzLnByb3BzLm9uRGF5TW91c2VFbnRlcjtcbiAgICBvbkRheU1vdXNlRW50ZXIoZGF5LCBlKTtcbiAgfTtcblxuICBfcHJvdG8ub25EYXlNb3VzZUxlYXZlID0gZnVuY3Rpb24gb25EYXlNb3VzZUxlYXZlKGRheSwgZSkge1xuICAgIHZhciBvbkRheU1vdXNlTGVhdmUgPSB0aGlzLnByb3BzLm9uRGF5TW91c2VMZWF2ZTtcbiAgICBvbkRheU1vdXNlTGVhdmUoZGF5LCBlKTtcbiAgfTtcblxuICBfcHJvdG8ub25LZXlEb3duID0gZnVuY3Rpb24gb25LZXlEb3duKGRheSwgZSkge1xuICAgIHZhciBvbkRheUNsaWNrID0gdGhpcy5wcm9wcy5vbkRheUNsaWNrO1xuICAgIHZhciBrZXkgPSBlLmtleTtcblxuICAgIGlmIChrZXkgPT09ICdFbnRlcicgfHwga2V5ID09PSAnICcpIHtcbiAgICAgIG9uRGF5Q2xpY2soZGF5LCBlKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnNldEJ1dHRvblJlZiA9IGZ1bmN0aW9uIHNldEJ1dHRvblJlZihyZWYpIHtcbiAgICB0aGlzLmJ1dHRvblJlZiA9IHJlZjtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgIGRheSA9IF90aGlzJHByb3BzMi5kYXksXG4gICAgICAgIGFyaWFMYWJlbEZvcm1hdCA9IF90aGlzJHByb3BzMi5hcmlhTGFiZWxGb3JtYXQsXG4gICAgICAgIGRheVNpemUgPSBfdGhpcyRwcm9wczIuZGF5U2l6ZSxcbiAgICAgICAgaXNPdXRzaWRlRGF5ID0gX3RoaXMkcHJvcHMyLmlzT3V0c2lkZURheSxcbiAgICAgICAgbW9kaWZpZXJzID0gX3RoaXMkcHJvcHMyLm1vZGlmaWVycyxcbiAgICAgICAgcmVuZGVyRGF5Q29udGVudHMgPSBfdGhpcyRwcm9wczIucmVuZGVyRGF5Q29udGVudHMsXG4gICAgICAgIHRhYkluZGV4ID0gX3RoaXMkcHJvcHMyLnRhYkluZGV4LFxuICAgICAgICBzdHlsZXMgPSBfdGhpcyRwcm9wczIuc3R5bGVzLFxuICAgICAgICBwaHJhc2VzID0gX3RoaXMkcHJvcHMyLnBocmFzZXM7XG4gICAgaWYgKCFkYXkpIHJldHVybiBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJ0ZFwiLCBudWxsKTtcblxuICAgIHZhciBfZ2V0Q2FsZW5kYXJEYXlTZXR0aW4gPSAoMCwgX2dldENhbGVuZGFyRGF5U2V0dGluZ3NbXCJkZWZhdWx0XCJdKShkYXksIGFyaWFMYWJlbEZvcm1hdCwgZGF5U2l6ZSwgbW9kaWZpZXJzLCBwaHJhc2VzKSxcbiAgICAgICAgZGF5U2l6ZVN0eWxlcyA9IF9nZXRDYWxlbmRhckRheVNldHRpbi5kYXlTaXplU3R5bGVzLFxuICAgICAgICB1c2VEZWZhdWx0Q3Vyc29yID0gX2dldENhbGVuZGFyRGF5U2V0dGluLnVzZURlZmF1bHRDdXJzb3IsXG4gICAgICAgIHNlbGVjdGVkID0gX2dldENhbGVuZGFyRGF5U2V0dGluLnNlbGVjdGVkLFxuICAgICAgICBob3ZlcmVkU3BhbiA9IF9nZXRDYWxlbmRhckRheVNldHRpbi5ob3ZlcmVkU3BhbixcbiAgICAgICAgaXNPdXRzaWRlUmFuZ2UgPSBfZ2V0Q2FsZW5kYXJEYXlTZXR0aW4uaXNPdXRzaWRlUmFuZ2UsXG4gICAgICAgIGFyaWFMYWJlbCA9IF9nZXRDYWxlbmRhckRheVNldHRpbi5hcmlhTGFiZWw7XG5cbiAgICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwidGRcIiwgKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKHt9LCAoMCwgX3JlYWN0V2l0aFN0eWxlcy5jc3MpKHN0eWxlcy5DYWxlbmRhckRheSwgdXNlRGVmYXVsdEN1cnNvciAmJiBzdHlsZXMuQ2FsZW5kYXJEYXlfX2RlZmF1bHRDdXJzb3IsIHN0eWxlcy5DYWxlbmRhckRheV9fZGVmYXVsdCwgaXNPdXRzaWRlRGF5ICYmIHN0eWxlcy5DYWxlbmRhckRheV9fb3V0c2lkZSwgbW9kaWZpZXJzLmhhcygndG9kYXknKSAmJiBzdHlsZXMuQ2FsZW5kYXJEYXlfX3RvZGF5LCBtb2RpZmllcnMuaGFzKCdmaXJzdC1kYXktb2Ytd2VlaycpICYmIHN0eWxlcy5DYWxlbmRhckRheV9fZmlyc3REYXlPZldlZWssIG1vZGlmaWVycy5oYXMoJ2xhc3QtZGF5LW9mLXdlZWsnKSAmJiBzdHlsZXMuQ2FsZW5kYXJEYXlfX2xhc3REYXlPZldlZWssIG1vZGlmaWVycy5oYXMoJ2hvdmVyZWQtb2Zmc2V0JykgJiYgc3R5bGVzLkNhbGVuZGFyRGF5X19ob3ZlcmVkX29mZnNldCwgbW9kaWZpZXJzLmhhcygnaG92ZXJlZC1zdGFydC1maXJzdC1wb3NzaWJsZS1lbmQnKSAmJiBzdHlsZXMuQ2FsZW5kYXJEYXlfX2hvdmVyZWRfc3RhcnRfZmlyc3RfcG9zc2libGVfZW5kLCBtb2RpZmllcnMuaGFzKCdob3ZlcmVkLXN0YXJ0LWJsb2NrZWQtbWluaW11bS1uaWdodHMnKSAmJiBzdHlsZXMuQ2FsZW5kYXJEYXlfX2hvdmVyZWRfc3RhcnRfYmxvY2tlZF9taW5fbmlnaHRzLCBtb2RpZmllcnMuaGFzKCdoaWdobGlnaHRlZC1jYWxlbmRhcicpICYmIHN0eWxlcy5DYWxlbmRhckRheV9faGlnaGxpZ2h0ZWRfY2FsZW5kYXIsIG1vZGlmaWVycy5oYXMoJ2Jsb2NrZWQtbWluaW11bS1uaWdodHMnKSAmJiBzdHlsZXMuQ2FsZW5kYXJEYXlfX2Jsb2NrZWRfbWluaW11bV9uaWdodHMsIG1vZGlmaWVycy5oYXMoJ2Jsb2NrZWQtY2FsZW5kYXInKSAmJiBzdHlsZXMuQ2FsZW5kYXJEYXlfX2Jsb2NrZWRfY2FsZW5kYXIsIGhvdmVyZWRTcGFuICYmIHN0eWxlcy5DYWxlbmRhckRheV9faG92ZXJlZF9zcGFuLCBtb2RpZmllcnMuaGFzKCdhZnRlci1ob3ZlcmVkLXN0YXJ0JykgJiYgc3R5bGVzLkNhbGVuZGFyRGF5X19hZnRlcl9ob3ZlcmVkX3N0YXJ0LCBtb2RpZmllcnMuaGFzKCdzZWxlY3RlZC1zcGFuJykgJiYgc3R5bGVzLkNhbGVuZGFyRGF5X19zZWxlY3RlZF9zcGFuLCBtb2RpZmllcnMuaGFzKCdzZWxlY3RlZC1zdGFydCcpICYmIHN0eWxlcy5DYWxlbmRhckRheV9fc2VsZWN0ZWRfc3RhcnQsIG1vZGlmaWVycy5oYXMoJ3NlbGVjdGVkLWVuZCcpICYmIHN0eWxlcy5DYWxlbmRhckRheV9fc2VsZWN0ZWRfZW5kLCBzZWxlY3RlZCAmJiAhbW9kaWZpZXJzLmhhcygnc2VsZWN0ZWQtc3BhbicpICYmIHN0eWxlcy5DYWxlbmRhckRheV9fc2VsZWN0ZWQsIG1vZGlmaWVycy5oYXMoJ2JlZm9yZS1ob3ZlcmVkLWVuZCcpICYmIHN0eWxlcy5DYWxlbmRhckRheV9fYmVmb3JlX2hvdmVyZWRfZW5kLCBtb2RpZmllcnMuaGFzKCduby1zZWxlY3RlZC1zdGFydC1iZWZvcmUtc2VsZWN0ZWQtZW5kJykgJiYgc3R5bGVzLkNhbGVuZGFyRGF5X19ub19zZWxlY3RlZF9zdGFydF9iZWZvcmVfc2VsZWN0ZWRfZW5kLCBtb2RpZmllcnMuaGFzKCdzZWxlY3RlZC1zdGFydC1pbi1ob3ZlcmVkLXNwYW4nKSAmJiBzdHlsZXMuQ2FsZW5kYXJEYXlfX3NlbGVjdGVkX3N0YXJ0X2luX2hvdmVyZWRfc3BhbiwgbW9kaWZpZXJzLmhhcygnc2VsZWN0ZWQtZW5kLWluLWhvdmVyZWQtc3BhbicpICYmIHN0eWxlcy5DYWxlbmRhckRheV9fc2VsZWN0ZWRfZW5kX2luX2hvdmVyZWRfc3BhbiwgbW9kaWZpZXJzLmhhcygnc2VsZWN0ZWQtc3RhcnQtbm8tc2VsZWN0ZWQtZW5kJykgJiYgc3R5bGVzLkNhbGVuZGFyRGF5X19zZWxlY3RlZF9zdGFydF9ub19zZWxlY3RlZF9lbmQsIG1vZGlmaWVycy5oYXMoJ3NlbGVjdGVkLWVuZC1uby1zZWxlY3RlZC1zdGFydCcpICYmIHN0eWxlcy5DYWxlbmRhckRheV9fc2VsZWN0ZWRfZW5kX25vX3NlbGVjdGVkX3N0YXJ0LCBpc091dHNpZGVSYW5nZSAmJiBzdHlsZXMuQ2FsZW5kYXJEYXlfX2Jsb2NrZWRfb3V0X29mX3JhbmdlLCBkYXlTaXplU3R5bGVzKSwge1xuICAgICAgcm9sZTogXCJidXR0b25cIiAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGpzeC1hMTF5L25vLW5vbmludGVyYWN0aXZlLWVsZW1lbnQtdG8taW50ZXJhY3RpdmUtcm9sZVxuICAgICAgLFxuICAgICAgcmVmOiB0aGlzLnNldEJ1dHRvblJlZixcbiAgICAgIFwiYXJpYS1kaXNhYmxlZFwiOiBtb2RpZmllcnMuaGFzKCdibG9ja2VkJyksXG4gICAgICBcImFyaWEtbGFiZWxcIjogYXJpYUxhYmVsLFxuICAgICAgb25Nb3VzZUVudGVyOiBmdW5jdGlvbiBvbk1vdXNlRW50ZXIoZSkge1xuICAgICAgICBfdGhpczMub25EYXlNb3VzZUVudGVyKGRheSwgZSk7XG4gICAgICB9LFxuICAgICAgb25Nb3VzZUxlYXZlOiBmdW5jdGlvbiBvbk1vdXNlTGVhdmUoZSkge1xuICAgICAgICBfdGhpczMub25EYXlNb3VzZUxlYXZlKGRheSwgZSk7XG4gICAgICB9LFxuICAgICAgb25Nb3VzZVVwOiBmdW5jdGlvbiBvbk1vdXNlVXAoZSkge1xuICAgICAgICBlLmN1cnJlbnRUYXJnZXQuYmx1cigpO1xuICAgICAgfSxcbiAgICAgIG9uQ2xpY2s6IGZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICAgICAgICBfdGhpczMub25EYXlDbGljayhkYXksIGUpO1xuICAgICAgfSxcbiAgICAgIG9uS2V5RG93bjogZnVuY3Rpb24gb25LZXlEb3duKGUpIHtcbiAgICAgICAgX3RoaXMzLm9uS2V5RG93bihkYXksIGUpO1xuICAgICAgfSxcbiAgICAgIHRhYkluZGV4OiB0YWJJbmRleFxuICAgIH0pLCByZW5kZXJEYXlDb250ZW50cyA/IHJlbmRlckRheUNvbnRlbnRzKGRheSwgbW9kaWZpZXJzKSA6IGRheS5mb3JtYXQoJ0QnKSk7XG4gIH07XG5cbiAgcmV0dXJuIENhbGVuZGFyRGF5O1xufShfcmVhY3RbXCJkZWZhdWx0XCJdLlB1cmVDb21wb25lbnQgfHwgX3JlYWN0W1wiZGVmYXVsdFwiXS5Db21wb25lbnQpO1xuXG5leHBvcnRzLlB1cmVDYWxlbmRhckRheSA9IENhbGVuZGFyRGF5O1xuQ2FsZW5kYXJEYXkucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gcHJvcFR5cGVzIDoge307XG5DYWxlbmRhckRheS5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfcmVhY3RXaXRoU3R5bGVzLndpdGhTdHlsZXMpKGZ1bmN0aW9uIChfcmVmMikge1xuICB2YXIgX3JlZjIkcmVhY3REYXRlcyA9IF9yZWYyLnJlYWN0RGF0ZXMsXG4gICAgICBjb2xvciA9IF9yZWYyJHJlYWN0RGF0ZXMuY29sb3IsXG4gICAgICBmb250ID0gX3JlZjIkcmVhY3REYXRlcy5mb250O1xuICByZXR1cm4ge1xuICAgIENhbGVuZGFyRGF5OiB7XG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICAgZm9udFNpemU6IGZvbnQuc2l6ZSxcbiAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAnOmFjdGl2ZSc6IHtcbiAgICAgICAgb3V0bGluZTogMFxuICAgICAgfVxuICAgIH0sXG4gICAgQ2FsZW5kYXJEYXlfX2RlZmF1bHRDdXJzb3I6IHtcbiAgICAgIGN1cnNvcjogJ2RlZmF1bHQnXG4gICAgfSxcbiAgICBDYWxlbmRhckRheV9fZGVmYXVsdDoge1xuICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIi5jb25jYXQoY29sb3IuY29yZS5ib3JkZXJMaWdodCksXG4gICAgICBjb2xvcjogY29sb3IudGV4dCxcbiAgICAgIGJhY2tncm91bmQ6IGNvbG9yLmJhY2tncm91bmQsXG4gICAgICAnOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kOiBjb2xvci5jb3JlLmJvcmRlckxpZ2h0LFxuICAgICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdChjb2xvci5jb3JlLmJvcmRlckxpZ2h0KSxcbiAgICAgICAgY29sb3I6ICdpbmhlcml0J1xuICAgICAgfVxuICAgIH0sXG4gICAgQ2FsZW5kYXJEYXlfX2hvdmVyZWRfb2Zmc2V0OiB7XG4gICAgICBiYWNrZ3JvdW5kOiBjb2xvci5jb3JlLmJvcmRlckJyaWdodCxcbiAgICAgIGJvcmRlcjogXCIxcHggZG91YmxlIFwiLmNvbmNhdChjb2xvci5jb3JlLmJvcmRlckxpZ2h0KSxcbiAgICAgIGNvbG9yOiAnaW5oZXJpdCdcbiAgICB9LFxuICAgIENhbGVuZGFyRGF5X19vdXRzaWRlOiB7XG4gICAgICBib3JkZXI6IDAsXG4gICAgICBiYWNrZ3JvdW5kOiBjb2xvci5vdXRzaWRlLmJhY2tncm91bmRDb2xvcixcbiAgICAgIGNvbG9yOiBjb2xvci5vdXRzaWRlLmNvbG9yLFxuICAgICAgJzpob3Zlcic6IHtcbiAgICAgICAgYm9yZGVyOiAwXG4gICAgICB9XG4gICAgfSxcbiAgICBDYWxlbmRhckRheV9fYmxvY2tlZF9taW5pbXVtX25pZ2h0czoge1xuICAgICAgYmFja2dyb3VuZDogY29sb3IubWluaW11bU5pZ2h0cy5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdChjb2xvci5taW5pbXVtTmlnaHRzLmJvcmRlckNvbG9yKSxcbiAgICAgIGNvbG9yOiBjb2xvci5taW5pbXVtTmlnaHRzLmNvbG9yLFxuICAgICAgJzpob3Zlcic6IHtcbiAgICAgICAgYmFja2dyb3VuZDogY29sb3IubWluaW11bU5pZ2h0cy5iYWNrZ3JvdW5kQ29sb3JfaG92ZXIsXG4gICAgICAgIGNvbG9yOiBjb2xvci5taW5pbXVtTmlnaHRzLmNvbG9yX2FjdGl2ZVxuICAgICAgfSxcbiAgICAgICc6YWN0aXZlJzoge1xuICAgICAgICBiYWNrZ3JvdW5kOiBjb2xvci5taW5pbXVtTmlnaHRzLmJhY2tncm91bmRDb2xvcl9hY3RpdmUsXG4gICAgICAgIGNvbG9yOiBjb2xvci5taW5pbXVtTmlnaHRzLmNvbG9yX2FjdGl2ZVxuICAgICAgfVxuICAgIH0sXG4gICAgQ2FsZW5kYXJEYXlfX2hpZ2hsaWdodGVkX2NhbGVuZGFyOiB7XG4gICAgICBiYWNrZ3JvdW5kOiBjb2xvci5oaWdobGlnaHRlZC5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICBjb2xvcjogY29sb3IuaGlnaGxpZ2h0ZWQuY29sb3IsXG4gICAgICAnOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kOiBjb2xvci5oaWdobGlnaHRlZC5iYWNrZ3JvdW5kQ29sb3JfaG92ZXIsXG4gICAgICAgIGNvbG9yOiBjb2xvci5oaWdobGlnaHRlZC5jb2xvcl9hY3RpdmVcbiAgICAgIH0sXG4gICAgICAnOmFjdGl2ZSc6IHtcbiAgICAgICAgYmFja2dyb3VuZDogY29sb3IuaGlnaGxpZ2h0ZWQuYmFja2dyb3VuZENvbG9yX2FjdGl2ZSxcbiAgICAgICAgY29sb3I6IGNvbG9yLmhpZ2hsaWdodGVkLmNvbG9yX2FjdGl2ZVxuICAgICAgfVxuICAgIH0sXG4gICAgQ2FsZW5kYXJEYXlfX3NlbGVjdGVkX3NwYW46IHtcbiAgICAgIGJhY2tncm91bmQ6IGNvbG9yLnNlbGVjdGVkU3Bhbi5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICBib3JkZXI6IFwiMXB4IGRvdWJsZSBcIi5jb25jYXQoY29sb3Iuc2VsZWN0ZWRTcGFuLmJvcmRlckNvbG9yKSxcbiAgICAgIGNvbG9yOiBjb2xvci5zZWxlY3RlZFNwYW4uY29sb3IsXG4gICAgICAnOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kOiBjb2xvci5zZWxlY3RlZFNwYW4uYmFja2dyb3VuZENvbG9yX2hvdmVyLFxuICAgICAgICBib3JkZXI6IFwiMXB4IGRvdWJsZSBcIi5jb25jYXQoY29sb3Iuc2VsZWN0ZWRTcGFuLmJvcmRlckNvbG9yKSxcbiAgICAgICAgY29sb3I6IGNvbG9yLnNlbGVjdGVkU3Bhbi5jb2xvcl9hY3RpdmVcbiAgICAgIH0sXG4gICAgICAnOmFjdGl2ZSc6IHtcbiAgICAgICAgYmFja2dyb3VuZDogY29sb3Iuc2VsZWN0ZWRTcGFuLmJhY2tncm91bmRDb2xvcl9hY3RpdmUsXG4gICAgICAgIGJvcmRlcjogXCIxcHggZG91YmxlIFwiLmNvbmNhdChjb2xvci5zZWxlY3RlZFNwYW4uYm9yZGVyQ29sb3IpLFxuICAgICAgICBjb2xvcjogY29sb3Iuc2VsZWN0ZWRTcGFuLmNvbG9yX2FjdGl2ZVxuICAgICAgfVxuICAgIH0sXG4gICAgQ2FsZW5kYXJEYXlfX3NlbGVjdGVkOiB7XG4gICAgICBiYWNrZ3JvdW5kOiBjb2xvci5zZWxlY3RlZC5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICBib3JkZXI6IFwiMXB4IGRvdWJsZSBcIi5jb25jYXQoY29sb3Iuc2VsZWN0ZWQuYm9yZGVyQ29sb3IpLFxuICAgICAgY29sb3I6IGNvbG9yLnNlbGVjdGVkLmNvbG9yLFxuICAgICAgJzpob3Zlcic6IHtcbiAgICAgICAgYmFja2dyb3VuZDogY29sb3Iuc2VsZWN0ZWQuYmFja2dyb3VuZENvbG9yX2hvdmVyLFxuICAgICAgICBib3JkZXI6IFwiMXB4IGRvdWJsZSBcIi5jb25jYXQoY29sb3Iuc2VsZWN0ZWQuYm9yZGVyQ29sb3IpLFxuICAgICAgICBjb2xvcjogY29sb3Iuc2VsZWN0ZWQuY29sb3JfYWN0aXZlXG4gICAgICB9LFxuICAgICAgJzphY3RpdmUnOiB7XG4gICAgICAgIGJhY2tncm91bmQ6IGNvbG9yLnNlbGVjdGVkLmJhY2tncm91bmRDb2xvcl9hY3RpdmUsXG4gICAgICAgIGJvcmRlcjogXCIxcHggZG91YmxlIFwiLmNvbmNhdChjb2xvci5zZWxlY3RlZC5ib3JkZXJDb2xvciksXG4gICAgICAgIGNvbG9yOiBjb2xvci5zZWxlY3RlZC5jb2xvcl9hY3RpdmVcbiAgICAgIH1cbiAgICB9LFxuICAgIENhbGVuZGFyRGF5X19ob3ZlcmVkX3NwYW46IHtcbiAgICAgIGJhY2tncm91bmQ6IGNvbG9yLmhvdmVyZWRTcGFuLmJhY2tncm91bmRDb2xvcixcbiAgICAgIGJvcmRlcjogXCIxcHggZG91YmxlIFwiLmNvbmNhdChjb2xvci5ob3ZlcmVkU3Bhbi5ib3JkZXJDb2xvciksXG4gICAgICBjb2xvcjogY29sb3IuaG92ZXJlZFNwYW4uY29sb3IsXG4gICAgICAnOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kOiBjb2xvci5ob3ZlcmVkU3Bhbi5iYWNrZ3JvdW5kQ29sb3JfaG92ZXIsXG4gICAgICAgIGJvcmRlcjogXCIxcHggZG91YmxlIFwiLmNvbmNhdChjb2xvci5ob3ZlcmVkU3Bhbi5ib3JkZXJDb2xvciksXG4gICAgICAgIGNvbG9yOiBjb2xvci5ob3ZlcmVkU3Bhbi5jb2xvcl9hY3RpdmVcbiAgICAgIH0sXG4gICAgICAnOmFjdGl2ZSc6IHtcbiAgICAgICAgYmFja2dyb3VuZDogY29sb3IuaG92ZXJlZFNwYW4uYmFja2dyb3VuZENvbG9yX2FjdGl2ZSxcbiAgICAgICAgYm9yZGVyOiBcIjFweCBkb3VibGUgXCIuY29uY2F0KGNvbG9yLmhvdmVyZWRTcGFuLmJvcmRlckNvbG9yKSxcbiAgICAgICAgY29sb3I6IGNvbG9yLmhvdmVyZWRTcGFuLmNvbG9yX2FjdGl2ZVxuICAgICAgfVxuICAgIH0sXG4gICAgQ2FsZW5kYXJEYXlfX2Jsb2NrZWRfY2FsZW5kYXI6IHtcbiAgICAgIGJhY2tncm91bmQ6IGNvbG9yLmJsb2NrZWRfY2FsZW5kYXIuYmFja2dyb3VuZENvbG9yLFxuICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIi5jb25jYXQoY29sb3IuYmxvY2tlZF9jYWxlbmRhci5ib3JkZXJDb2xvciksXG4gICAgICBjb2xvcjogY29sb3IuYmxvY2tlZF9jYWxlbmRhci5jb2xvcixcbiAgICAgICc6aG92ZXInOiB7XG4gICAgICAgIGJhY2tncm91bmQ6IGNvbG9yLmJsb2NrZWRfY2FsZW5kYXIuYmFja2dyb3VuZENvbG9yX2hvdmVyLFxuICAgICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdChjb2xvci5ibG9ja2VkX2NhbGVuZGFyLmJvcmRlckNvbG9yKSxcbiAgICAgICAgY29sb3I6IGNvbG9yLmJsb2NrZWRfY2FsZW5kYXIuY29sb3JfYWN0aXZlXG4gICAgICB9LFxuICAgICAgJzphY3RpdmUnOiB7XG4gICAgICAgIGJhY2tncm91bmQ6IGNvbG9yLmJsb2NrZWRfY2FsZW5kYXIuYmFja2dyb3VuZENvbG9yX2FjdGl2ZSxcbiAgICAgICAgYm9yZGVyOiBcIjFweCBzb2xpZCBcIi5jb25jYXQoY29sb3IuYmxvY2tlZF9jYWxlbmRhci5ib3JkZXJDb2xvciksXG4gICAgICAgIGNvbG9yOiBjb2xvci5ibG9ja2VkX2NhbGVuZGFyLmNvbG9yX2FjdGl2ZVxuICAgICAgfVxuICAgIH0sXG4gICAgQ2FsZW5kYXJEYXlfX2Jsb2NrZWRfb3V0X29mX3JhbmdlOiB7XG4gICAgICBiYWNrZ3JvdW5kOiBjb2xvci5ibG9ja2VkX291dF9vZl9yYW5nZS5iYWNrZ3JvdW5kQ29sb3IsXG4gICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdChjb2xvci5ibG9ja2VkX291dF9vZl9yYW5nZS5ib3JkZXJDb2xvciksXG4gICAgICBjb2xvcjogY29sb3IuYmxvY2tlZF9vdXRfb2ZfcmFuZ2UuY29sb3IsXG4gICAgICAnOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kOiBjb2xvci5ibG9ja2VkX291dF9vZl9yYW5nZS5iYWNrZ3JvdW5kQ29sb3JfaG92ZXIsXG4gICAgICAgIGJvcmRlcjogXCIxcHggc29saWQgXCIuY29uY2F0KGNvbG9yLmJsb2NrZWRfb3V0X29mX3JhbmdlLmJvcmRlckNvbG9yKSxcbiAgICAgICAgY29sb3I6IGNvbG9yLmJsb2NrZWRfb3V0X29mX3JhbmdlLmNvbG9yX2FjdGl2ZVxuICAgICAgfSxcbiAgICAgICc6YWN0aXZlJzoge1xuICAgICAgICBiYWNrZ3JvdW5kOiBjb2xvci5ibG9ja2VkX291dF9vZl9yYW5nZS5iYWNrZ3JvdW5kQ29sb3JfYWN0aXZlLFxuICAgICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdChjb2xvci5ibG9ja2VkX291dF9vZl9yYW5nZS5ib3JkZXJDb2xvciksXG4gICAgICAgIGNvbG9yOiBjb2xvci5ibG9ja2VkX291dF9vZl9yYW5nZS5jb2xvcl9hY3RpdmVcbiAgICAgIH1cbiAgICB9LFxuICAgIENhbGVuZGFyRGF5X19ob3ZlcmVkX3N0YXJ0X2ZpcnN0X3Bvc3NpYmxlX2VuZDoge1xuICAgICAgYmFja2dyb3VuZDogY29sb3IuY29yZS5ib3JkZXJMaWdodGVyLFxuICAgICAgYm9yZGVyOiBcIjFweCBkb3VibGUgXCIuY29uY2F0KGNvbG9yLmNvcmUuYm9yZGVyTGlnaHRlcilcbiAgICB9LFxuICAgIENhbGVuZGFyRGF5X19ob3ZlcmVkX3N0YXJ0X2Jsb2NrZWRfbWluX25pZ2h0czoge1xuICAgICAgYmFja2dyb3VuZDogY29sb3IuY29yZS5ib3JkZXJMaWdodGVyLFxuICAgICAgYm9yZGVyOiBcIjFweCBkb3VibGUgXCIuY29uY2F0KGNvbG9yLmNvcmUuYm9yZGVyTGlnaHQpXG4gICAgfSxcbiAgICBDYWxlbmRhckRheV9fc2VsZWN0ZWRfc3RhcnQ6IHt9LFxuICAgIENhbGVuZGFyRGF5X19zZWxlY3RlZF9lbmQ6IHt9LFxuICAgIENhbGVuZGFyRGF5X190b2RheToge30sXG4gICAgQ2FsZW5kYXJEYXlfX2ZpcnN0RGF5T2ZXZWVrOiB7fSxcbiAgICBDYWxlbmRhckRheV9fbGFzdERheU9mV2Vlazoge30sXG4gICAgQ2FsZW5kYXJEYXlfX2FmdGVyX2hvdmVyZWRfc3RhcnQ6IHt9LFxuICAgIENhbGVuZGFyRGF5X19iZWZvcmVfaG92ZXJlZF9lbmQ6IHt9LFxuICAgIENhbGVuZGFyRGF5X19ub19zZWxlY3RlZF9zdGFydF9iZWZvcmVfc2VsZWN0ZWRfZW5kOiB7fSxcbiAgICBDYWxlbmRhckRheV9fc2VsZWN0ZWRfc3RhcnRfaW5faG92ZXJlZF9zcGFuOiB7fSxcbiAgICBDYWxlbmRhckRheV9fc2VsZWN0ZWRfZW5kX2luX2hvdmVyZWRfc3Bhbjoge30sXG4gICAgQ2FsZW5kYXJEYXlfX3NlbGVjdGVkX3N0YXJ0X25vX3NlbGVjdGVkX2VuZDoge30sXG4gICAgQ2FsZW5kYXJEYXlfX3NlbGVjdGVkX2VuZF9ub19zZWxlY3RlZF9zdGFydDoge31cbiAgfTtcbn0sIHtcbiAgcHVyZUNvbXBvbmVudDogdHlwZW9mIF9yZWFjdFtcImRlZmF1bHRcIl0uUHVyZUNvbXBvbmVudCAhPT0gJ3VuZGVmaW5lZCdcbn0pKENhbGVuZGFyRGF5KTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCJ2YXIgX3R5cGVvZiA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzL3R5cGVvZlwiKTtcblxuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkge1xuICBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7XG4gIHZhciBjYWNoZSA9IG5ldyBXZWFrTWFwKCk7XG5cbiAgX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkge1xuICAgIHJldHVybiBjYWNoZTtcbiAgfTtcblxuICByZXR1cm4gY2FjaGU7XG59XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikge1xuICBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIGlmIChvYmogPT09IG51bGwgfHwgX3R5cGVvZihvYmopICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikge1xuICAgIHJldHVybiB7XG4gICAgICBcImRlZmF1bHRcIjogb2JqXG4gICAgfTtcbiAgfVxuXG4gIHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpO1xuXG4gIGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkge1xuICAgIHJldHVybiBjYWNoZS5nZXQob2JqKTtcbiAgfVxuXG4gIHZhciBuZXdPYmogPSB7fTtcbiAgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7XG5cbiAgICAgIGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld09ialtrZXldID0gb2JqW2tleV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbmV3T2JqW1wiZGVmYXVsdFwiXSA9IG9iajtcblxuICBpZiAoY2FjaGUpIHtcbiAgICBjYWNoZS5zZXQob2JqLCBuZXdPYmopO1xuICB9XG5cbiAgcmV0dXJuIG5ld09iajtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gZ2V0Q29tcG9uZW50TmFtZTtcblxudmFyIF9mdW5jdGlvblByb3RvdHlwZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImZ1bmN0aW9uLnByb3RvdHlwZS5uYW1lXCIpKTtcblxudmFyIF9yZWFjdElzID0gcmVxdWlyZShcInJlYWN0LWlzXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBcImRlZmF1bHRcIjogb2JqIH07IH1cblxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZShDb21wb25lbnQpIHtcbiAgaWYgKHR5cGVvZiBDb21wb25lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIENvbXBvbmVudDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgQ29tcG9uZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCAoMCwgX2Z1bmN0aW9uUHJvdG90eXBlW1wiZGVmYXVsdFwiXSkoQ29tcG9uZW50KTtcbiAgfVxuXG4gIGlmICgoMCwgX3JlYWN0SXMuaXNGb3J3YXJkUmVmKSh7XG4gICAgdHlwZTogQ29tcG9uZW50LFxuICAgICQkdHlwZW9mOiBfcmVhY3RJcy5FbGVtZW50XG4gIH0pKSB7XG4gICAgcmV0dXJuIENvbXBvbmVudC5kaXNwbGF5TmFtZTtcbiAgfVxuXG4gIGlmICgoMCwgX3JlYWN0SXMuaXNNZW1vKShDb21wb25lbnQpKSB7XG4gICAgcmV0dXJuIGdldENvbXBvbmVudE5hbWUoQ29tcG9uZW50LnR5cGUpO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRDb21wb25lbnROYW1lLmpzLm1hcCIsIid1c2Ugc3RyaWN0JztcblxudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0FyZ3VtZW50cyh2YWx1ZSkge1xuXHR2YXIgc3RyID0gdG9TdHIuY2FsbCh2YWx1ZSk7XG5cdHZhciBpc0FyZ3MgPSBzdHIgPT09ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xuXHRpZiAoIWlzQXJncykge1xuXHRcdGlzQXJncyA9IHN0ciAhPT0gJ1tvYmplY3QgQXJyYXldJyAmJlxuXHRcdFx0dmFsdWUgIT09IG51bGwgJiZcblx0XHRcdHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiZcblx0XHRcdHR5cGVvZiB2YWx1ZS5sZW5ndGggPT09ICdudW1iZXInICYmXG5cdFx0XHR2YWx1ZS5sZW5ndGggPj0gMCAmJlxuXHRcdFx0dG9TdHIuY2FsbCh2YWx1ZS5jYWxsZWUpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xuXHR9XG5cdHJldHVybiBpc0FyZ3M7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgb3JpZ1N5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgaGFzU3ltYm9sU2hhbSA9IHJlcXVpcmUoJy4vc2hhbXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBoYXNOYXRpdmVTeW1ib2xzKCkge1xuXHRpZiAodHlwZW9mIG9yaWdTeW1ib2wgIT09ICdmdW5jdGlvbicpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2YgU3ltYm9sICE9PSAnZnVuY3Rpb24nKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAodHlwZW9mIG9yaWdTeW1ib2woJ2ZvbycpICE9PSAnc3ltYm9sJykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiBTeW1ib2woJ2JhcicpICE9PSAnc3ltYm9sJykgeyByZXR1cm4gZmFsc2U7IH1cblxuXHRyZXR1cm4gaGFzU3ltYm9sU2hhbSgpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIElzQ2FsbGFibGUgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L0lzQ2FsbGFibGUnKTtcbnZhciBmdW5jdGlvbnNIYXZlTmFtZXMgPSByZXF1aXJlKCdmdW5jdGlvbnMtaGF2ZS1uYW1lcycpKCk7XG52YXIgY2FsbEJvdW5kID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvaGVscGVycy9jYWxsQm91bmQnKTtcbnZhciAkZnVuY3Rpb25Ub1N0cmluZyA9IGNhbGxCb3VuZCgnRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nJyk7XG52YXIgJHN0cmluZ01hdGNoID0gY2FsbEJvdW5kKCdTdHJpbmcucHJvdG90eXBlLm1hdGNoJyk7XG5cbnZhciBjbGFzc1JlZ2V4ID0gL15jbGFzcyAvO1xuXG52YXIgaXNDbGFzcyA9IGZ1bmN0aW9uIGlzQ2xhc3NDb25zdHJ1Y3Rvcihmbikge1xuXHRpZiAoSXNDYWxsYWJsZShmbikpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0aWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHR0cnkge1xuXHRcdHZhciBtYXRjaCA9ICRzdHJpbmdNYXRjaCgkZnVuY3Rpb25Ub1N0cmluZyhmbiksIGNsYXNzUmVnZXgpO1xuXHRcdHJldHVybiAhIW1hdGNoO1xuXHR9IGNhdGNoIChlKSB7fVxuXHRyZXR1cm4gZmFsc2U7XG59O1xuXG52YXIgcmVnZXggPSAvXFxzKmZ1bmN0aW9uXFxzKyhbXihcXHNdKilcXHMqLztcblxudmFyIGZ1bmN0aW9uUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0TmFtZSgpIHtcblx0aWYgKCFpc0NsYXNzKHRoaXMpICYmICFJc0NhbGxhYmxlKHRoaXMpKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignRnVuY3Rpb24ucHJvdG90eXBlLm5hbWUgc2hhbSBnZXR0ZXIgY2FsbGVkIG9uIG5vbi1mdW5jdGlvbicpO1xuXHR9XG5cdGlmIChmdW5jdGlvbnNIYXZlTmFtZXMpIHtcblx0XHRyZXR1cm4gdGhpcy5uYW1lO1xuXHR9XG5cdGlmICh0aGlzID09PSBmdW5jdGlvblByb3RvKSB7XG5cdFx0cmV0dXJuICcnO1xuXHR9XG5cdHZhciBzdHIgPSAkZnVuY3Rpb25Ub1N0cmluZyh0aGlzKTtcblx0dmFyIG1hdGNoID0gJHN0cmluZ01hdGNoKHN0ciwgcmVnZXgpO1xuXHR2YXIgbmFtZSA9IG1hdGNoICYmIG1hdGNoWzFdO1xuXHRyZXR1cm4gbmFtZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBmblRvU3RyID0gRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nO1xuXG52YXIgY29uc3RydWN0b3JSZWdleCA9IC9eXFxzKmNsYXNzXFxiLztcbnZhciBpc0VTNkNsYXNzRm4gPSBmdW5jdGlvbiBpc0VTNkNsYXNzRnVuY3Rpb24odmFsdWUpIHtcblx0dHJ5IHtcblx0XHR2YXIgZm5TdHIgPSBmblRvU3RyLmNhbGwodmFsdWUpO1xuXHRcdHJldHVybiBjb25zdHJ1Y3RvclJlZ2V4LnRlc3QoZm5TdHIpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlOyAvLyBub3QgYSBmdW5jdGlvblxuXHR9XG59O1xuXG52YXIgdHJ5RnVuY3Rpb25PYmplY3QgPSBmdW5jdGlvbiB0cnlGdW5jdGlvblRvU3RyKHZhbHVlKSB7XG5cdHRyeSB7XG5cdFx0aWYgKGlzRVM2Q2xhc3NGbih2YWx1ZSkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdFx0Zm5Ub1N0ci5jYWxsKHZhbHVlKTtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufTtcbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgZm5DbGFzcyA9ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG52YXIgZ2VuQ2xhc3MgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nO1xudmFyIGhhc1RvU3RyaW5nVGFnID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sLnRvU3RyaW5nVGFnID09PSAnc3ltYm9sJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbGxhYmxlKHZhbHVlKSB7XG5cdGlmICghdmFsdWUpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2YgdmFsdWUgIT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyAmJiAhdmFsdWUucHJvdG90eXBlKSB7IHJldHVybiB0cnVlOyB9XG5cdGlmIChoYXNUb1N0cmluZ1RhZykgeyByZXR1cm4gdHJ5RnVuY3Rpb25PYmplY3QodmFsdWUpOyB9XG5cdGlmIChpc0VTNkNsYXNzRm4odmFsdWUpKSB7IHJldHVybiBmYWxzZTsgfVxuXHR2YXIgc3RyQ2xhc3MgPSB0b1N0ci5jYWxsKHZhbHVlKTtcblx0cmV0dXJuIHN0ckNsYXNzID09PSBmbkNsYXNzIHx8IHN0ckNsYXNzID09PSBnZW5DbGFzcztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBmdW5jdGlvbnNIYXZlTmFtZXMgPSBmdW5jdGlvbiBmdW5jdGlvbnNIYXZlTmFtZXMoKSB7XG5cdHJldHVybiB0eXBlb2YgZnVuY3Rpb24gZigpIHt9Lm5hbWUgPT09ICdzdHJpbmcnO1xufTtcblxudmFyIGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuaWYgKGdPUEQpIHtcblx0dHJ5IHtcblx0XHRnT1BEKFtdLCAnbGVuZ3RoJyk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHQvLyBJRSA4IGhhcyBhIGJyb2tlbiBnT1BEXG5cdFx0Z09QRCA9IG51bGw7XG5cdH1cbn1cblxuZnVuY3Rpb25zSGF2ZU5hbWVzLmZ1bmN0aW9uc0hhdmVDb25maWd1cmFibGVOYW1lcyA9IGZ1bmN0aW9uIGZ1bmN0aW9uc0hhdmVDb25maWd1cmFibGVOYW1lcygpIHtcblx0cmV0dXJuIGZ1bmN0aW9uc0hhdmVOYW1lcygpICYmIGdPUEQgJiYgISFnT1BEKGZ1bmN0aW9uICgpIHt9LCAnbmFtZScpLmNvbmZpZ3VyYWJsZTtcbn07XG5cbnZhciAkYmluZCA9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kO1xuXG5mdW5jdGlvbnNIYXZlTmFtZXMuYm91bmRGdW5jdGlvbnNIYXZlTmFtZXMgPSBmdW5jdGlvbiBib3VuZEZ1bmN0aW9uc0hhdmVOYW1lcygpIHtcblx0cmV0dXJuIGZ1bmN0aW9uc0hhdmVOYW1lcygpICYmIHR5cGVvZiAkYmluZCA9PT0gJ2Z1bmN0aW9uJyAmJiBmdW5jdGlvbiBmKCkge30uYmluZCgpLm5hbWUgIT09ICcnO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbnNIYXZlTmFtZXM7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRQb2x5ZmlsbCgpIHtcblx0cmV0dXJuIGltcGxlbWVudGF0aW9uO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbnZhciBDSEFOTkVMID0gZXhwb3J0cy5DSEFOTkVMID0gJ19fZGlyZWN0aW9uX18nO1xuXG52YXIgRElSRUNUSU9OUyA9IGV4cG9ydHMuRElSRUNUSU9OUyA9IHtcbiAgTFRSOiAnbHRyJyxcbiAgUlRMOiAncnRsJ1xufTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBoYXMgPSByZXF1aXJlKCdoYXMnKTtcbnZhciBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9SZXF1aXJlT2JqZWN0Q29lcmNpYmxlJyk7XG52YXIgY2FsbEJvdW5kID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvaGVscGVycy9jYWxsQm91bmQnKTtcblxudmFyICRpc0VudW1lcmFibGUgPSBjYWxsQm91bmQoJ09iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB2YWx1ZXMoTykge1xuXHR2YXIgb2JqID0gUmVxdWlyZU9iamVjdENvZXJjaWJsZShPKTtcblx0dmFyIHZhbHMgPSBbXTtcblx0Zm9yICh2YXIga2V5IGluIG9iaikge1xuXHRcdGlmIChoYXMob2JqLCBrZXkpICYmICRpc0VudW1lcmFibGUob2JqLCBrZXkpKSB7XG5cdFx0XHR2YWxzLnB1c2gob2JqW2tleV0pO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gdmFscztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vNS9DaGVja09iamVjdENvZXJjaWJsZScpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0UG9seWZpbGwoKSB7XG5cdHJldHVybiB0eXBlb2YgT2JqZWN0LnZhbHVlcyA9PT0gJ2Z1bmN0aW9uJyA/IE9iamVjdC52YWx1ZXMgOiBpbXBsZW1lbnRhdGlvbjtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuX2dldEludGVyZmFjZSA9IF9nZXRJbnRlcmZhY2U7XG5leHBvcnRzLl9nZXRUaGVtZSA9IGdldDtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xudmFyIHN0eWxlSW50ZXJmYWNlO1xudmFyIHN0eWxlVGhlbWU7XG52YXIgU1RBUlRfTUFSSyA9ICdyZWFjdC13aXRoLXN0eWxlcy5yZXNvbHZlLnN0YXJ0JztcbnZhciBFTkRfTUFSSyA9ICdyZWFjdC13aXRoLXN0eWxlcy5yZXNvbHZlLmVuZCc7XG52YXIgTUVBU1VSRV9NQVJLID0gXCJcXHVEODNEXFx1REM2OVxcdTIwMERcXHVEODNDXFx1REZBOCBbcmVzb2x2ZV1cIjtcblxuZnVuY3Rpb24gcmVnaXN0ZXJUaGVtZSh0aGVtZSkge1xuICBzdHlsZVRoZW1lID0gdGhlbWU7XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVySW50ZXJmYWNlKGludGVyZmFjZVRvUmVnaXN0ZXIpIHtcbiAgc3R5bGVJbnRlcmZhY2UgPSBpbnRlcmZhY2VUb1JlZ2lzdGVyO1xufVxuXG5mdW5jdGlvbiBjcmVhdGUobWFrZUZyb21UaGVtZSwgY3JlYXRlV2l0aERpcmVjdGlvbikge1xuICB2YXIgc3R5bGVzID0gY3JlYXRlV2l0aERpcmVjdGlvbihtYWtlRnJvbVRoZW1lKHN0eWxlVGhlbWUpKTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gc3R5bGVzO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMVFIobWFrZUZyb21UaGVtZSkge1xuICByZXR1cm4gY3JlYXRlKG1ha2VGcm9tVGhlbWUsIHN0eWxlSW50ZXJmYWNlLmNyZWF0ZUxUUiB8fCBzdHlsZUludGVyZmFjZS5jcmVhdGUpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVSVEwobWFrZUZyb21UaGVtZSkge1xuICByZXR1cm4gY3JlYXRlKG1ha2VGcm9tVGhlbWUsIHN0eWxlSW50ZXJmYWNlLmNyZWF0ZVJUTCB8fCBzdHlsZUludGVyZmFjZS5jcmVhdGUpO1xufVxuXG5mdW5jdGlvbiBnZXQoKSB7XG4gIHJldHVybiBzdHlsZVRoZW1lO1xufVxuXG5mdW5jdGlvbiByZXNvbHZlKCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2YgcGVyZm9ybWFuY2UgIT09ICd1bmRlZmluZWQnICYmIHBlcmZvcm1hbmNlLm1hcmsgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgcGVyZm9ybWFuY2UuY2xlYXJNYXJrcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHBlcmZvcm1hbmNlLmNsZWFyTWFya3MoU1RBUlRfTUFSSyk7XG4gICAgcGVyZm9ybWFuY2UubWFyayhTVEFSVF9NQVJLKTtcbiAgfVxuXG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBzdHlsZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgc3R5bGVzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIHJlc3VsdCA9IHN0eWxlSW50ZXJmYWNlLnJlc29sdmUoc3R5bGVzKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlb2YgcGVyZm9ybWFuY2UgIT09ICd1bmRlZmluZWQnICYmIHBlcmZvcm1hbmNlLm1hcmsgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgcGVyZm9ybWFuY2UuY2xlYXJNYXJrcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHBlcmZvcm1hbmNlLmNsZWFyTWFya3MoRU5EX01BUkspO1xuICAgIHBlcmZvcm1hbmNlLm1hcmsoRU5EX01BUkspO1xuICAgIHBlcmZvcm1hbmNlLm1lYXN1cmUoTUVBU1VSRV9NQVJLLCBTVEFSVF9NQVJLLCBFTkRfTUFSSyk7XG4gICAgcGVyZm9ybWFuY2UuY2xlYXJNYXJrcyhNRUFTVVJFX01BUkspO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUxUUigpIHtcbiAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBzdHlsZXMgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICBzdHlsZXNbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgfVxuXG4gIGlmIChzdHlsZUludGVyZmFjZS5yZXNvbHZlTFRSKSB7XG4gICAgcmV0dXJuIHN0eWxlSW50ZXJmYWNlLnJlc29sdmVMVFIoc3R5bGVzKTtcbiAgfVxuXG4gIHJldHVybiByZXNvbHZlKHN0eWxlcyk7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVSVEwoKSB7XG4gIGZvciAodmFyIF9sZW4zID0gYXJndW1lbnRzLmxlbmd0aCwgc3R5bGVzID0gbmV3IEFycmF5KF9sZW4zKSwgX2tleTMgPSAwOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7XG4gICAgc3R5bGVzW19rZXkzXSA9IGFyZ3VtZW50c1tfa2V5M107XG4gIH1cblxuICBpZiAoc3R5bGVJbnRlcmZhY2UucmVzb2x2ZVJUTCkge1xuICAgIHJldHVybiBzdHlsZUludGVyZmFjZS5yZXNvbHZlUlRMKHN0eWxlcyk7XG4gIH1cblxuICByZXR1cm4gcmVzb2x2ZShzdHlsZXMpO1xufVxuXG5mdW5jdGlvbiBmbHVzaCgpIHtcbiAgaWYgKHN0eWxlSW50ZXJmYWNlLmZsdXNoKSB7XG4gICAgc3R5bGVJbnRlcmZhY2UuZmx1c2goKTtcbiAgfVxufSAvLyBFeHBvcnRlZCB1bnRpbCB3ZSBkZXByZWNhdGUgdGhpcyBBUEkgY29tcGxldGVseVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVyc2NvcmUtZGFuZ2xlXG5cblxuZnVuY3Rpb24gX2dldEludGVyZmFjZSgpIHtcbiAgcmV0dXJuIHN0eWxlSW50ZXJmYWNlO1xufSAvLyBFeHBvcnRlZCB1bnRpbCB3ZSBkZXByZWNhdGUgdGhpcyBBUEkgY29tcGxldGVseVxuXG5cbnZhciBfZGVmYXVsdCA9IHtcbiAgcmVnaXN0ZXJUaGVtZTogcmVnaXN0ZXJUaGVtZSxcbiAgcmVnaXN0ZXJJbnRlcmZhY2U6IHJlZ2lzdGVySW50ZXJmYWNlLFxuICBjcmVhdGU6IGNyZWF0ZUxUUixcbiAgY3JlYXRlTFRSOiBjcmVhdGVMVFIsXG4gIGNyZWF0ZVJUTDogY3JlYXRlUlRMLFxuICBnZXQ6IGdldCxcbiAgcmVzb2x2ZTogcmVzb2x2ZUxUUixcbiAgcmVzb2x2ZUxUUjogcmVzb2x2ZUxUUixcbiAgcmVzb2x2ZVJUTDogcmVzb2x2ZVJUTCxcbiAgZmx1c2g6IGZsdXNoXG59O1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF9lbnp5bWVTaGFsbG93RXF1YWwgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJlbnp5bWUtc2hhbGxvdy1lcXVhbFwiKSk7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKSk7XG5cbnZhciBfaW5oZXJpdHNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX3JlYWN0TW9tZW50UHJvcHR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3QtbW9tZW50LXByb3B0eXBlc1wiKSk7XG5cbnZhciBfYWlyYm5iUHJvcFR5cGVzID0gcmVxdWlyZShcImFpcmJuYi1wcm9wLXR5cGVzXCIpO1xuXG52YXIgX3JlYWN0V2l0aFN0eWxlcyA9IHJlcXVpcmUoXCJyZWFjdC13aXRoLXN0eWxlc1wiKTtcblxudmFyIF9tb21lbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJtb21lbnRcIikpO1xuXG52YXIgX2RlZmF1bHRQaHJhc2VzID0gcmVxdWlyZShcIi4uL2RlZmF1bHRQaHJhc2VzXCIpO1xuXG52YXIgX2dldFBocmFzZVByb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2dldFBocmFzZVByb3BUeXBlc1wiKSk7XG5cbnZhciBfQ2FsZW5kYXJXZWVrID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9DYWxlbmRhcldlZWtcIikpO1xuXG52YXIgX0NhbGVuZGFyRGF5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9DYWxlbmRhckRheVwiKSk7XG5cbnZhciBfY2FsY3VsYXRlRGltZW5zaW9uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvY2FsY3VsYXRlRGltZW5zaW9uXCIpKTtcblxudmFyIF9nZXRDYWxlbmRhck1vbnRoV2Vla3MgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9nZXRDYWxlbmRhck1vbnRoV2Vla3NcIikpO1xuXG52YXIgX2lzU2FtZURheSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2lzU2FtZURheVwiKSk7XG5cbnZhciBfdG9JU09EYXRlU3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvdG9JU09EYXRlU3RyaW5nXCIpKTtcblxudmFyIF9Nb2RpZmllcnNTaGFwZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3NoYXBlcy9Nb2RpZmllcnNTaGFwZVwiKSk7XG5cbnZhciBfU2Nyb2xsYWJsZU9yaWVudGF0aW9uU2hhcGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zaGFwZXMvU2Nyb2xsYWJsZU9yaWVudGF0aW9uU2hhcGVcIikpO1xuXG52YXIgX0RheU9mV2Vla1NoYXBlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc2hhcGVzL0RheU9mV2Vla1NoYXBlXCIpKTtcblxudmFyIF9jb25zdGFudHMgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzXCIpO1xuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbnZhciBwcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX2FpcmJuYlByb3BUeXBlcy5mb3JiaWRFeHRyYVByb3BzKShfb2JqZWN0U3ByZWFkKHt9LCBfcmVhY3RXaXRoU3R5bGVzLndpdGhTdHlsZXNQcm9wVHlwZXMsIHtcbiAgbW9udGg6IF9yZWFjdE1vbWVudFByb3B0eXBlc1tcImRlZmF1bHRcIl0ubW9tZW50T2JqLFxuICBob3Jpem9udGFsTW9udGhQYWRkaW5nOiBfYWlyYm5iUHJvcFR5cGVzLm5vbk5lZ2F0aXZlSW50ZWdlcixcbiAgaXNWaXNpYmxlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBlbmFibGVPdXRzaWRlRGF5czogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgbW9kaWZpZXJzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5vYmplY3RPZihfTW9kaWZpZXJzU2hhcGVbXCJkZWZhdWx0XCJdKSxcbiAgb3JpZW50YXRpb246IF9TY3JvbGxhYmxlT3JpZW50YXRpb25TaGFwZVtcImRlZmF1bHRcIl0sXG4gIGRheVNpemU6IF9haXJibmJQcm9wVHlwZXMubm9uTmVnYXRpdmVJbnRlZ2VyLFxuICBvbkRheUNsaWNrOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvbkRheU1vdXNlRW50ZXI6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIG9uRGF5TW91c2VMZWF2ZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgb25Nb250aFNlbGVjdDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgb25ZZWFyU2VsZWN0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICByZW5kZXJNb250aFRleHQ6ICgwLCBfYWlyYm5iUHJvcFR5cGVzLm11dHVhbGx5RXhjbHVzaXZlUHJvcHMpKF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsICdyZW5kZXJNb250aFRleHQnLCAncmVuZGVyTW9udGhFbGVtZW50JyksXG4gIHJlbmRlckNhbGVuZGFyRGF5OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICByZW5kZXJEYXlDb250ZW50czogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgcmVuZGVyTW9udGhFbGVtZW50OiAoMCwgX2FpcmJuYlByb3BUeXBlcy5tdXR1YWxseUV4Y2x1c2l2ZVByb3BzKShfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLCAncmVuZGVyTW9udGhUZXh0JywgJ3JlbmRlck1vbnRoRWxlbWVudCcpLFxuICBmaXJzdERheU9mV2VlazogX0RheU9mV2Vla1NoYXBlW1wiZGVmYXVsdFwiXSxcbiAgc2V0TW9udGhUaXRsZUhlaWdodDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgdmVydGljYWxCb3JkZXJTcGFjaW5nOiBfYWlyYm5iUHJvcFR5cGVzLm5vbk5lZ2F0aXZlSW50ZWdlcixcbiAgZm9jdXNlZERhdGU6IF9yZWFjdE1vbWVudFByb3B0eXBlc1tcImRlZmF1bHRcIl0ubW9tZW50T2JqLFxuICAvLyBpbmRpY2F0ZXMgZm9jdXNhYmxlIGRheVxuICBpc0ZvY3VzZWQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIC8vIGluZGljYXRlcyB3aGV0aGVyIG9yIG5vdCB0byBtb3ZlIGZvY3VzIHRvIGZvY3VzYWJsZSBkYXlcbiAgLy8gaTE4blxuICBtb250aEZvcm1hdDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLFxuICBwaHJhc2VzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zaGFwZSgoMCwgX2dldFBocmFzZVByb3BUeXBlc1tcImRlZmF1bHRcIl0pKF9kZWZhdWx0UGhyYXNlcy5DYWxlbmRhckRheVBocmFzZXMpKSxcbiAgZGF5QXJpYUxhYmVsRm9ybWF0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmdcbn0pKSA6IHt9O1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgbW9udGg6ICgwLCBfbW9tZW50W1wiZGVmYXVsdFwiXSkoKSxcbiAgaG9yaXpvbnRhbE1vbnRoUGFkZGluZzogMTMsXG4gIGlzVmlzaWJsZTogdHJ1ZSxcbiAgZW5hYmxlT3V0c2lkZURheXM6IGZhbHNlLFxuICBtb2RpZmllcnM6IHt9LFxuICBvcmllbnRhdGlvbjogX2NvbnN0YW50cy5IT1JJWk9OVEFMX09SSUVOVEFUSU9OLFxuICBkYXlTaXplOiBfY29uc3RhbnRzLkRBWV9TSVpFLFxuICBvbkRheUNsaWNrOiBmdW5jdGlvbiBvbkRheUNsaWNrKCkge30sXG4gIG9uRGF5TW91c2VFbnRlcjogZnVuY3Rpb24gb25EYXlNb3VzZUVudGVyKCkge30sXG4gIG9uRGF5TW91c2VMZWF2ZTogZnVuY3Rpb24gb25EYXlNb3VzZUxlYXZlKCkge30sXG4gIG9uTW9udGhTZWxlY3Q6IGZ1bmN0aW9uIG9uTW9udGhTZWxlY3QoKSB7fSxcbiAgb25ZZWFyU2VsZWN0OiBmdW5jdGlvbiBvblllYXJTZWxlY3QoKSB7fSxcbiAgcmVuZGVyTW9udGhUZXh0OiBudWxsLFxuICByZW5kZXJDYWxlbmRhckRheTogZnVuY3Rpb24gcmVuZGVyQ2FsZW5kYXJEYXkocHJvcHMpIHtcbiAgICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9DYWxlbmRhckRheVtcImRlZmF1bHRcIl0sIHByb3BzKTtcbiAgfSxcbiAgcmVuZGVyRGF5Q29udGVudHM6IG51bGwsXG4gIHJlbmRlck1vbnRoRWxlbWVudDogbnVsbCxcbiAgZmlyc3REYXlPZldlZWs6IG51bGwsXG4gIHNldE1vbnRoVGl0bGVIZWlnaHQ6IG51bGwsXG4gIGZvY3VzZWREYXRlOiBudWxsLFxuICBpc0ZvY3VzZWQ6IGZhbHNlLFxuICAvLyBpMThuXG4gIG1vbnRoRm9ybWF0OiAnTU1NTSBZWVlZJyxcbiAgLy8gZW5nbGlzaCBsb2NhbGVcbiAgcGhyYXNlczogX2RlZmF1bHRQaHJhc2VzLkNhbGVuZGFyRGF5UGhyYXNlcyxcbiAgZGF5QXJpYUxhYmVsRm9ybWF0OiB1bmRlZmluZWQsXG4gIHZlcnRpY2FsQm9yZGVyU3BhY2luZzogdW5kZWZpbmVkXG59O1xuXG52YXIgQ2FsZW5kYXJNb250aCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX3JlZikge1xuICAoMCwgX2luaGVyaXRzTG9vc2UyW1wiZGVmYXVsdFwiXSkoQ2FsZW5kYXJNb250aCwgX3JlZik7XG4gIHZhciBfcHJvdG8gPSBDYWxlbmRhck1vbnRoLnByb3RvdHlwZTtcblxuICBfcHJvdG9bIV9yZWFjdFtcImRlZmF1bHRcIl0uUHVyZUNvbXBvbmVudCAmJiBcInNob3VsZENvbXBvbmVudFVwZGF0ZVwiXSA9IGZ1bmN0aW9uIChuZXh0UHJvcHMsIG5leHRTdGF0ZSkge1xuICAgIHJldHVybiAhKDAsIF9lbnp5bWVTaGFsbG93RXF1YWxbXCJkZWZhdWx0XCJdKSh0aGlzLnByb3BzLCBuZXh0UHJvcHMpIHx8ICEoMCwgX2VuenltZVNoYWxsb3dFcXVhbFtcImRlZmF1bHRcIl0pKHRoaXMuc3RhdGUsIG5leHRTdGF0ZSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gQ2FsZW5kYXJNb250aChwcm9wcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX3JlZi5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgd2Vla3M6ICgwLCBfZ2V0Q2FsZW5kYXJNb250aFdlZWtzW1wiZGVmYXVsdFwiXSkocHJvcHMubW9udGgsIHByb3BzLmVuYWJsZU91dHNpZGVEYXlzLCBwcm9wcy5maXJzdERheU9mV2VlayA9PSBudWxsID8gX21vbWVudFtcImRlZmF1bHRcIl0ubG9jYWxlRGF0YSgpLmZpcnN0RGF5T2ZXZWVrKCkgOiBwcm9wcy5maXJzdERheU9mV2VlaylcbiAgICB9O1xuICAgIF90aGlzLnNldENhcHRpb25SZWYgPSBfdGhpcy5zZXRDYXB0aW9uUmVmLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5zZXRNb250aFRpdGxlSGVpZ2h0ID0gX3RoaXMuc2V0TW9udGhUaXRsZUhlaWdodC5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5zZXRNb250aFRpdGxlSGVpZ2h0VGltZW91dCA9IHNldFRpbWVvdXQodGhpcy5zZXRNb250aFRpdGxlSGVpZ2h0LCAwKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgdmFyIG1vbnRoID0gbmV4dFByb3BzLm1vbnRoLFxuICAgICAgICBlbmFibGVPdXRzaWRlRGF5cyA9IG5leHRQcm9wcy5lbmFibGVPdXRzaWRlRGF5cyxcbiAgICAgICAgZmlyc3REYXlPZldlZWsgPSBuZXh0UHJvcHMuZmlyc3REYXlPZldlZWs7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgcHJldk1vbnRoID0gX3RoaXMkcHJvcHMubW9udGgsXG4gICAgICAgIHByZXZFbmFibGVPdXRzaWRlRGF5cyA9IF90aGlzJHByb3BzLmVuYWJsZU91dHNpZGVEYXlzLFxuICAgICAgICBwcmV2Rmlyc3REYXlPZldlZWsgPSBfdGhpcyRwcm9wcy5maXJzdERheU9mV2VlaztcblxuICAgIGlmICghbW9udGguaXNTYW1lKHByZXZNb250aCkgfHwgZW5hYmxlT3V0c2lkZURheXMgIT09IHByZXZFbmFibGVPdXRzaWRlRGF5cyB8fCBmaXJzdERheU9mV2VlayAhPT0gcHJldkZpcnN0RGF5T2ZXZWVrKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgd2Vla3M6ICgwLCBfZ2V0Q2FsZW5kYXJNb250aFdlZWtzW1wiZGVmYXVsdFwiXSkobW9udGgsIGVuYWJsZU91dHNpZGVEYXlzLCBmaXJzdERheU9mV2VlayA9PSBudWxsID8gX21vbWVudFtcImRlZmF1bHRcIl0ubG9jYWxlRGF0YSgpLmZpcnN0RGF5T2ZXZWVrKCkgOiBmaXJzdERheU9mV2VlaylcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy5zZXRNb250aFRpdGxlSGVpZ2h0VGltZW91dCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuc2V0TW9udGhUaXRsZUhlaWdodFRpbWVvdXQpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uc2V0TW9udGhUaXRsZUhlaWdodCA9IGZ1bmN0aW9uIHNldE1vbnRoVGl0bGVIZWlnaHQoKSB7XG4gICAgdmFyIHNldE1vbnRoVGl0bGVIZWlnaHQgPSB0aGlzLnByb3BzLnNldE1vbnRoVGl0bGVIZWlnaHQ7XG5cbiAgICBpZiAoc2V0TW9udGhUaXRsZUhlaWdodCkge1xuICAgICAgdmFyIGNhcHRpb25IZWlnaHQgPSAoMCwgX2NhbGN1bGF0ZURpbWVuc2lvbltcImRlZmF1bHRcIl0pKHRoaXMuY2FwdGlvblJlZiwgJ2hlaWdodCcsIHRydWUsIHRydWUpO1xuICAgICAgc2V0TW9udGhUaXRsZUhlaWdodChjYXB0aW9uSGVpZ2h0KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnNldENhcHRpb25SZWYgPSBmdW5jdGlvbiBzZXRDYXB0aW9uUmVmKHJlZikge1xuICAgIHRoaXMuY2FwdGlvblJlZiA9IHJlZjtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICBkYXlBcmlhTGFiZWxGb3JtYXQgPSBfdGhpcyRwcm9wczIuZGF5QXJpYUxhYmVsRm9ybWF0LFxuICAgICAgICBkYXlTaXplID0gX3RoaXMkcHJvcHMyLmRheVNpemUsXG4gICAgICAgIGZvY3VzZWREYXRlID0gX3RoaXMkcHJvcHMyLmZvY3VzZWREYXRlLFxuICAgICAgICBob3Jpem9udGFsTW9udGhQYWRkaW5nID0gX3RoaXMkcHJvcHMyLmhvcml6b250YWxNb250aFBhZGRpbmcsXG4gICAgICAgIGlzRm9jdXNlZCA9IF90aGlzJHByb3BzMi5pc0ZvY3VzZWQsXG4gICAgICAgIGlzVmlzaWJsZSA9IF90aGlzJHByb3BzMi5pc1Zpc2libGUsXG4gICAgICAgIG1vZGlmaWVycyA9IF90aGlzJHByb3BzMi5tb2RpZmllcnMsXG4gICAgICAgIG1vbnRoID0gX3RoaXMkcHJvcHMyLm1vbnRoLFxuICAgICAgICBtb250aEZvcm1hdCA9IF90aGlzJHByb3BzMi5tb250aEZvcm1hdCxcbiAgICAgICAgb25EYXlDbGljayA9IF90aGlzJHByb3BzMi5vbkRheUNsaWNrLFxuICAgICAgICBvbkRheU1vdXNlRW50ZXIgPSBfdGhpcyRwcm9wczIub25EYXlNb3VzZUVudGVyLFxuICAgICAgICBvbkRheU1vdXNlTGVhdmUgPSBfdGhpcyRwcm9wczIub25EYXlNb3VzZUxlYXZlLFxuICAgICAgICBvbk1vbnRoU2VsZWN0ID0gX3RoaXMkcHJvcHMyLm9uTW9udGhTZWxlY3QsXG4gICAgICAgIG9uWWVhclNlbGVjdCA9IF90aGlzJHByb3BzMi5vblllYXJTZWxlY3QsXG4gICAgICAgIG9yaWVudGF0aW9uID0gX3RoaXMkcHJvcHMyLm9yaWVudGF0aW9uLFxuICAgICAgICBwaHJhc2VzID0gX3RoaXMkcHJvcHMyLnBocmFzZXMsXG4gICAgICAgIHJlbmRlckNhbGVuZGFyRGF5ID0gX3RoaXMkcHJvcHMyLnJlbmRlckNhbGVuZGFyRGF5LFxuICAgICAgICByZW5kZXJEYXlDb250ZW50cyA9IF90aGlzJHByb3BzMi5yZW5kZXJEYXlDb250ZW50cyxcbiAgICAgICAgcmVuZGVyTW9udGhFbGVtZW50ID0gX3RoaXMkcHJvcHMyLnJlbmRlck1vbnRoRWxlbWVudCxcbiAgICAgICAgcmVuZGVyTW9udGhUZXh0ID0gX3RoaXMkcHJvcHMyLnJlbmRlck1vbnRoVGV4dCxcbiAgICAgICAgc3R5bGVzID0gX3RoaXMkcHJvcHMyLnN0eWxlcyxcbiAgICAgICAgdmVydGljYWxCb3JkZXJTcGFjaW5nID0gX3RoaXMkcHJvcHMyLnZlcnRpY2FsQm9yZGVyU3BhY2luZztcbiAgICB2YXIgd2Vla3MgPSB0aGlzLnN0YXRlLndlZWtzO1xuICAgIHZhciBtb250aFRpdGxlID0gcmVuZGVyTW9udGhUZXh0ID8gcmVuZGVyTW9udGhUZXh0KG1vbnRoKSA6IG1vbnRoLmZvcm1hdChtb250aEZvcm1hdCk7XG4gICAgdmFyIHZlcnRpY2FsU2Nyb2xsYWJsZSA9IG9yaWVudGF0aW9uID09PSBfY29uc3RhbnRzLlZFUlRJQ0FMX1NDUk9MTEFCTEU7XG4gICAgcmV0dXJuIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImRpdlwiLCAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe30sICgwLCBfcmVhY3RXaXRoU3R5bGVzLmNzcykoc3R5bGVzLkNhbGVuZGFyTW9udGgsIHtcbiAgICAgIHBhZGRpbmc6IFwiMCBcIi5jb25jYXQoaG9yaXpvbnRhbE1vbnRoUGFkZGluZywgXCJweFwiKVxuICAgIH0pLCB7XG4gICAgICBcImRhdGEtdmlzaWJsZVwiOiBpc1Zpc2libGVcbiAgICB9KSwgX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsICgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7XG4gICAgICByZWY6IHRoaXMuc2V0Q2FwdGlvblJlZlxuICAgIH0sICgwLCBfcmVhY3RXaXRoU3R5bGVzLmNzcykoc3R5bGVzLkNhbGVuZGFyTW9udGhfY2FwdGlvbiwgdmVydGljYWxTY3JvbGxhYmxlICYmIHN0eWxlcy5DYWxlbmRhck1vbnRoX2NhcHRpb25fX3ZlcnRpY2FsU2Nyb2xsYWJsZSkpLCByZW5kZXJNb250aEVsZW1lbnQgPyByZW5kZXJNb250aEVsZW1lbnQoe1xuICAgICAgbW9udGg6IG1vbnRoLFxuICAgICAgb25Nb250aFNlbGVjdDogb25Nb250aFNlbGVjdCxcbiAgICAgIG9uWWVhclNlbGVjdDogb25ZZWFyU2VsZWN0LFxuICAgICAgaXNWaXNpYmxlOiBpc1Zpc2libGVcbiAgICB9KSA6IF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcInN0cm9uZ1wiLCBudWxsLCBtb250aFRpdGxlKSksIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcInRhYmxlXCIsICgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7fSwgKDAsIF9yZWFjdFdpdGhTdHlsZXMuY3NzKSghdmVydGljYWxCb3JkZXJTcGFjaW5nICYmIHN0eWxlcy5DYWxlbmRhck1vbnRoX3RhYmxlLCB2ZXJ0aWNhbEJvcmRlclNwYWNpbmcgJiYgc3R5bGVzLkNhbGVuZGFyTW9udGhfdmVydGljYWxTcGFjaW5nLCB2ZXJ0aWNhbEJvcmRlclNwYWNpbmcgJiYge1xuICAgICAgYm9yZGVyU3BhY2luZzogXCIwcHggXCIuY29uY2F0KHZlcnRpY2FsQm9yZGVyU3BhY2luZywgXCJweFwiKVxuICAgIH0pLCB7XG4gICAgICByb2xlOiBcInByZXNlbnRhdGlvblwiXG4gICAgfSksIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcInRib2R5XCIsIG51bGwsIHdlZWtzLm1hcChmdW5jdGlvbiAod2VlaywgaSkge1xuICAgICAgcmV0dXJuIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChfQ2FsZW5kYXJXZWVrW1wiZGVmYXVsdFwiXSwge1xuICAgICAgICBrZXk6IGlcbiAgICAgIH0sIHdlZWsubWFwKGZ1bmN0aW9uIChkYXksIGRheU9mV2Vlaykge1xuICAgICAgICByZXR1cm4gcmVuZGVyQ2FsZW5kYXJEYXkoe1xuICAgICAgICAgIGtleTogZGF5T2ZXZWVrLFxuICAgICAgICAgIGRheTogZGF5LFxuICAgICAgICAgIGRheVNpemU6IGRheVNpemUsXG4gICAgICAgICAgaXNPdXRzaWRlRGF5OiAhZGF5IHx8IGRheS5tb250aCgpICE9PSBtb250aC5tb250aCgpLFxuICAgICAgICAgIHRhYkluZGV4OiBpc1Zpc2libGUgJiYgKDAsIF9pc1NhbWVEYXlbXCJkZWZhdWx0XCJdKShkYXksIGZvY3VzZWREYXRlKSA/IDAgOiAtMSxcbiAgICAgICAgICBpc0ZvY3VzZWQ6IGlzRm9jdXNlZCxcbiAgICAgICAgICBvbkRheU1vdXNlRW50ZXI6IG9uRGF5TW91c2VFbnRlcixcbiAgICAgICAgICBvbkRheU1vdXNlTGVhdmU6IG9uRGF5TW91c2VMZWF2ZSxcbiAgICAgICAgICBvbkRheUNsaWNrOiBvbkRheUNsaWNrLFxuICAgICAgICAgIHJlbmRlckRheUNvbnRlbnRzOiByZW5kZXJEYXlDb250ZW50cyxcbiAgICAgICAgICBwaHJhc2VzOiBwaHJhc2VzLFxuICAgICAgICAgIG1vZGlmaWVyczogbW9kaWZpZXJzWygwLCBfdG9JU09EYXRlU3RyaW5nW1wiZGVmYXVsdFwiXSkoZGF5KV0sXG4gICAgICAgICAgYXJpYUxhYmVsRm9ybWF0OiBkYXlBcmlhTGFiZWxGb3JtYXRcbiAgICAgICAgfSk7XG4gICAgICB9KSk7XG4gICAgfSkpKSk7XG4gIH07XG5cbiAgcmV0dXJuIENhbGVuZGFyTW9udGg7XG59KF9yZWFjdFtcImRlZmF1bHRcIl0uUHVyZUNvbXBvbmVudCB8fCBfcmVhY3RbXCJkZWZhdWx0XCJdLkNvbXBvbmVudCk7XG5cbkNhbGVuZGFyTW9udGgucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gcHJvcFR5cGVzIDoge307XG5DYWxlbmRhck1vbnRoLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9yZWFjdFdpdGhTdHlsZXMud2l0aFN0eWxlcykoZnVuY3Rpb24gKF9yZWYyKSB7XG4gIHZhciBfcmVmMiRyZWFjdERhdGVzID0gX3JlZjIucmVhY3REYXRlcyxcbiAgICAgIGNvbG9yID0gX3JlZjIkcmVhY3REYXRlcy5jb2xvcixcbiAgICAgIGZvbnQgPSBfcmVmMiRyZWFjdERhdGVzLmZvbnQsXG4gICAgICBzcGFjaW5nID0gX3JlZjIkcmVhY3REYXRlcy5zcGFjaW5nO1xuICByZXR1cm4ge1xuICAgIENhbGVuZGFyTW9udGg6IHtcbiAgICAgIGJhY2tncm91bmQ6IGNvbG9yLmJhY2tncm91bmQsXG4gICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgICAgdmVydGljYWxBbGlnbjogJ3RvcCcsXG4gICAgICB1c2VyU2VsZWN0OiAnbm9uZSdcbiAgICB9LFxuICAgIENhbGVuZGFyTW9udGhfdGFibGU6IHtcbiAgICAgIGJvcmRlckNvbGxhcHNlOiAnY29sbGFwc2UnLFxuICAgICAgYm9yZGVyU3BhY2luZzogMFxuICAgIH0sXG4gICAgQ2FsZW5kYXJNb250aF92ZXJ0aWNhbFNwYWNpbmc6IHtcbiAgICAgIGJvcmRlckNvbGxhcHNlOiAnc2VwYXJhdGUnXG4gICAgfSxcbiAgICBDYWxlbmRhck1vbnRoX2NhcHRpb246IHtcbiAgICAgIGNvbG9yOiBjb2xvci50ZXh0LFxuICAgICAgZm9udFNpemU6IGZvbnQuY2FwdGlvblNpemUsXG4gICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgICAgcGFkZGluZ1RvcDogc3BhY2luZy5jYXB0aW9uUGFkZGluZ1RvcCxcbiAgICAgIHBhZGRpbmdCb3R0b206IHNwYWNpbmcuY2FwdGlvblBhZGRpbmdCb3R0b20sXG4gICAgICBjYXB0aW9uU2lkZTogJ2luaXRpYWwnXG4gICAgfSxcbiAgICBDYWxlbmRhck1vbnRoX2NhcHRpb25fX3ZlcnRpY2FsU2Nyb2xsYWJsZToge1xuICAgICAgcGFkZGluZ1RvcDogMTIsXG4gICAgICBwYWRkaW5nQm90dG9tOiA3XG4gICAgfVxuICB9O1xufSwge1xuICBwdXJlQ29tcG9uZW50OiB0eXBlb2YgX3JlYWN0W1wiZGVmYXVsdFwiXS5QdXJlQ29tcG9uZW50ICE9PSAndW5kZWZpbmVkJ1xufSkoQ2FsZW5kYXJNb250aCk7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGNhbGN1bGF0ZURpbWVuc2lvbjtcblxuZnVuY3Rpb24gY2FsY3VsYXRlRGltZW5zaW9uKGVsLCBheGlzKSB7XG4gIHZhciBib3JkZXJCb3ggPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuICB2YXIgd2l0aE1hcmdpbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogZmFsc2U7XG5cbiAgaWYgKCFlbCkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgdmFyIGF4aXNTdGFydCA9IGF4aXMgPT09ICd3aWR0aCcgPyAnTGVmdCcgOiAnVG9wJztcbiAgdmFyIGF4aXNFbmQgPSBheGlzID09PSAnd2lkdGgnID8gJ1JpZ2h0JyA6ICdCb3R0b20nOyAvLyBPbmx5IHJlYWQgc3R5bGVzIGlmIHdlIG5lZWQgdG9cblxuICB2YXIgc3R5bGUgPSAhYm9yZGVyQm94IHx8IHdpdGhNYXJnaW4gPyB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCkgOiBudWxsOyAvLyBPZmZzZXQgaW5jbHVkZXMgYm9yZGVyIGFuZCBwYWRkaW5nXG5cbiAgdmFyIG9mZnNldFdpZHRoID0gZWwub2Zmc2V0V2lkdGgsXG4gICAgICBvZmZzZXRIZWlnaHQgPSBlbC5vZmZzZXRIZWlnaHQ7XG4gIHZhciBzaXplID0gYXhpcyA9PT0gJ3dpZHRoJyA/IG9mZnNldFdpZHRoIDogb2Zmc2V0SGVpZ2h0OyAvLyBHZXQgdGhlIGlubmVyIHNpemVcblxuICBpZiAoIWJvcmRlckJveCkge1xuICAgIHNpemUgLT0gcGFyc2VGbG9hdChzdHlsZVtcInBhZGRpbmdcIi5jb25jYXQoYXhpc1N0YXJ0KV0pICsgcGFyc2VGbG9hdChzdHlsZVtcInBhZGRpbmdcIi5jb25jYXQoYXhpc0VuZCldKSArIHBhcnNlRmxvYXQoc3R5bGVbXCJib3JkZXJcIi5jb25jYXQoYXhpc1N0YXJ0LCBcIldpZHRoXCIpXSkgKyBwYXJzZUZsb2F0KHN0eWxlW1wiYm9yZGVyXCIuY29uY2F0KGF4aXNFbmQsIFwiV2lkdGhcIildKTtcbiAgfSAvLyBBcHBseSBtYXJnaW5cblxuXG4gIGlmICh3aXRoTWFyZ2luKSB7XG4gICAgc2l6ZSArPSBwYXJzZUZsb2F0KHN0eWxlW1wibWFyZ2luXCIuY29uY2F0KGF4aXNTdGFydCldKSArIHBhcnNlRmxvYXQoc3R5bGVbXCJtYXJnaW5cIi5jb25jYXQoYXhpc0VuZCldKTtcbiAgfVxuXG4gIHJldHVybiBzaXplO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX2VuenltZVNoYWxsb3dFcXVhbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImVuenltZS1zaGFsbG93LWVxdWFsXCIpKTtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpKTtcblxudmFyIF9pbmhlcml0c0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfcmVhY3RNb21lbnRQcm9wdHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC1tb21lbnQtcHJvcHR5cGVzXCIpKTtcblxudmFyIF9haXJibmJQcm9wVHlwZXMgPSByZXF1aXJlKFwiYWlyYm5iLXByb3AtdHlwZXNcIik7XG5cbnZhciBfcmVhY3RXaXRoU3R5bGVzID0gcmVxdWlyZShcInJlYWN0LXdpdGgtc3R5bGVzXCIpO1xuXG52YXIgX21vbWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIm1vbWVudFwiKSk7XG5cbnZhciBfY29uc29saWRhdGVkRXZlbnRzID0gcmVxdWlyZShcImNvbnNvbGlkYXRlZC1ldmVudHNcIik7XG5cbnZhciBfZGVmYXVsdFBocmFzZXMgPSByZXF1aXJlKFwiLi4vZGVmYXVsdFBocmFzZXNcIik7XG5cbnZhciBfZ2V0UGhyYXNlUHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvZ2V0UGhyYXNlUHJvcFR5cGVzXCIpKTtcblxudmFyIF9ub2ZsaXAgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9ub2ZsaXBcIikpO1xuXG52YXIgX0NhbGVuZGFyTW9udGggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0NhbGVuZGFyTW9udGhcIikpO1xuXG52YXIgX2lzVHJhbnNpdGlvbkVuZFN1cHBvcnRlZCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2lzVHJhbnNpdGlvbkVuZFN1cHBvcnRlZFwiKSk7XG5cbnZhciBfZ2V0VHJhbnNmb3JtU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvZ2V0VHJhbnNmb3JtU3R5bGVzXCIpKTtcblxudmFyIF9nZXRDYWxlbmRhck1vbnRoV2lkdGggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9nZXRDYWxlbmRhck1vbnRoV2lkdGhcIikpO1xuXG52YXIgX3RvSVNPTW9udGhTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy90b0lTT01vbnRoU3RyaW5nXCIpKTtcblxudmFyIF9pc1ByZXZNb250aCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2lzUHJldk1vbnRoXCIpKTtcblxudmFyIF9pc05leHRNb250aCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2lzTmV4dE1vbnRoXCIpKTtcblxudmFyIF9Nb2RpZmllcnNTaGFwZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3NoYXBlcy9Nb2RpZmllcnNTaGFwZVwiKSk7XG5cbnZhciBfU2Nyb2xsYWJsZU9yaWVudGF0aW9uU2hhcGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zaGFwZXMvU2Nyb2xsYWJsZU9yaWVudGF0aW9uU2hhcGVcIikpO1xuXG52YXIgX0RheU9mV2Vla1NoYXBlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc2hhcGVzL0RheU9mV2Vla1NoYXBlXCIpKTtcblxudmFyIF9jb25zdGFudHMgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzXCIpO1xuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbnZhciBwcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX2FpcmJuYlByb3BUeXBlcy5mb3JiaWRFeHRyYVByb3BzKShfb2JqZWN0U3ByZWFkKHt9LCBfcmVhY3RXaXRoU3R5bGVzLndpdGhTdHlsZXNQcm9wVHlwZXMsIHtcbiAgZW5hYmxlT3V0c2lkZURheXM6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIGZpcnN0VmlzaWJsZU1vbnRoSW5kZXg6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm51bWJlcixcbiAgaG9yaXpvbnRhbE1vbnRoUGFkZGluZzogX2FpcmJuYlByb3BUeXBlcy5ub25OZWdhdGl2ZUludGVnZXIsXG4gIGluaXRpYWxNb250aDogX3JlYWN0TW9tZW50UHJvcHR5cGVzW1wiZGVmYXVsdFwiXS5tb21lbnRPYmosXG4gIGlzQW5pbWF0aW5nOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBudW1iZXJPZk1vbnRoczogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubnVtYmVyLFxuICBtb2RpZmllcnM6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm9iamVjdE9mKF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm9iamVjdE9mKF9Nb2RpZmllcnNTaGFwZVtcImRlZmF1bHRcIl0pKSxcbiAgb3JpZW50YXRpb246IF9TY3JvbGxhYmxlT3JpZW50YXRpb25TaGFwZVtcImRlZmF1bHRcIl0sXG4gIG9uRGF5Q2xpY2s6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIG9uRGF5TW91c2VFbnRlcjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgb25EYXlNb3VzZUxlYXZlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvbk1vbnRoVHJhbnNpdGlvbkVuZDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgb25Nb250aENoYW5nZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgb25ZZWFyQ2hhbmdlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICByZW5kZXJNb250aFRleHQ6ICgwLCBfYWlyYm5iUHJvcFR5cGVzLm11dHVhbGx5RXhjbHVzaXZlUHJvcHMpKF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsICdyZW5kZXJNb250aFRleHQnLCAncmVuZGVyTW9udGhFbGVtZW50JyksXG4gIHJlbmRlckNhbGVuZGFyRGF5OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICByZW5kZXJEYXlDb250ZW50czogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgdHJhbnNsYXRpb25WYWx1ZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubnVtYmVyLFxuICByZW5kZXJNb250aEVsZW1lbnQ6ICgwLCBfYWlyYm5iUHJvcFR5cGVzLm11dHVhbGx5RXhjbHVzaXZlUHJvcHMpKF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsICdyZW5kZXJNb250aFRleHQnLCAncmVuZGVyTW9udGhFbGVtZW50JyksXG4gIGRheVNpemU6IF9haXJibmJQcm9wVHlwZXMubm9uTmVnYXRpdmVJbnRlZ2VyLFxuICBmb2N1c2VkRGF0ZTogX3JlYWN0TW9tZW50UHJvcHR5cGVzW1wiZGVmYXVsdFwiXS5tb21lbnRPYmosXG4gIC8vIGluZGljYXRlcyBmb2N1c2FibGUgZGF5XG4gIGlzRm9jdXNlZDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgLy8gaW5kaWNhdGVzIHdoZXRoZXIgb3Igbm90IHRvIG1vdmUgZm9jdXMgdG8gZm9jdXNhYmxlIGRheVxuICBmaXJzdERheU9mV2VlazogX0RheU9mV2Vla1NoYXBlW1wiZGVmYXVsdFwiXSxcbiAgc2V0TW9udGhUaXRsZUhlaWdodDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgaXNSVEw6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIHRyYW5zaXRpb25EdXJhdGlvbjogX2FpcmJuYlByb3BUeXBlcy5ub25OZWdhdGl2ZUludGVnZXIsXG4gIHZlcnRpY2FsQm9yZGVyU3BhY2luZzogX2FpcmJuYlByb3BUeXBlcy5ub25OZWdhdGl2ZUludGVnZXIsXG4gIC8vIGkxOG5cbiAgbW9udGhGb3JtYXQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZyxcbiAgcGhyYXNlczogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc2hhcGUoKDAsIF9nZXRQaHJhc2VQcm9wVHlwZXNbXCJkZWZhdWx0XCJdKShfZGVmYXVsdFBocmFzZXMuQ2FsZW5kYXJEYXlQaHJhc2VzKSksXG4gIGRheUFyaWFMYWJlbEZvcm1hdDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nXG59KSkgOiB7fTtcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGVuYWJsZU91dHNpZGVEYXlzOiBmYWxzZSxcbiAgZmlyc3RWaXNpYmxlTW9udGhJbmRleDogMCxcbiAgaG9yaXpvbnRhbE1vbnRoUGFkZGluZzogMTMsXG4gIGluaXRpYWxNb250aDogKDAsIF9tb21lbnRbXCJkZWZhdWx0XCJdKSgpLFxuICBpc0FuaW1hdGluZzogZmFsc2UsXG4gIG51bWJlck9mTW9udGhzOiAxLFxuICBtb2RpZmllcnM6IHt9LFxuICBvcmllbnRhdGlvbjogX2NvbnN0YW50cy5IT1JJWk9OVEFMX09SSUVOVEFUSU9OLFxuICBvbkRheUNsaWNrOiBmdW5jdGlvbiBvbkRheUNsaWNrKCkge30sXG4gIG9uRGF5TW91c2VFbnRlcjogZnVuY3Rpb24gb25EYXlNb3VzZUVudGVyKCkge30sXG4gIG9uRGF5TW91c2VMZWF2ZTogZnVuY3Rpb24gb25EYXlNb3VzZUxlYXZlKCkge30sXG4gIG9uTW9udGhDaGFuZ2U6IGZ1bmN0aW9uIG9uTW9udGhDaGFuZ2UoKSB7fSxcbiAgb25ZZWFyQ2hhbmdlOiBmdW5jdGlvbiBvblllYXJDaGFuZ2UoKSB7fSxcbiAgb25Nb250aFRyYW5zaXRpb25FbmQ6IGZ1bmN0aW9uIG9uTW9udGhUcmFuc2l0aW9uRW5kKCkge30sXG4gIHJlbmRlck1vbnRoVGV4dDogbnVsbCxcbiAgcmVuZGVyQ2FsZW5kYXJEYXk6IHVuZGVmaW5lZCxcbiAgcmVuZGVyRGF5Q29udGVudHM6IG51bGwsXG4gIHRyYW5zbGF0aW9uVmFsdWU6IG51bGwsXG4gIHJlbmRlck1vbnRoRWxlbWVudDogbnVsbCxcbiAgZGF5U2l6ZTogX2NvbnN0YW50cy5EQVlfU0laRSxcbiAgZm9jdXNlZERhdGU6IG51bGwsXG4gIGlzRm9jdXNlZDogZmFsc2UsXG4gIGZpcnN0RGF5T2ZXZWVrOiBudWxsLFxuICBzZXRNb250aFRpdGxlSGVpZ2h0OiBudWxsLFxuICBpc1JUTDogZmFsc2UsXG4gIHRyYW5zaXRpb25EdXJhdGlvbjogMjAwLFxuICB2ZXJ0aWNhbEJvcmRlclNwYWNpbmc6IHVuZGVmaW5lZCxcbiAgLy8gaTE4blxuICBtb250aEZvcm1hdDogJ01NTU0gWVlZWScsXG4gIC8vIGVuZ2xpc2ggbG9jYWxlXG4gIHBocmFzZXM6IF9kZWZhdWx0UGhyYXNlcy5DYWxlbmRhckRheVBocmFzZXMsXG4gIGRheUFyaWFMYWJlbEZvcm1hdDogdW5kZWZpbmVkXG59O1xuXG5mdW5jdGlvbiBnZXRNb250aHMoaW5pdGlhbE1vbnRoLCBudW1iZXJPZk1vbnRocywgd2l0aG91dFRyYW5zaXRpb25Nb250aHMpIHtcbiAgdmFyIG1vbnRoID0gaW5pdGlhbE1vbnRoLmNsb25lKCk7XG4gIGlmICghd2l0aG91dFRyYW5zaXRpb25Nb250aHMpIG1vbnRoID0gbW9udGguc3VidHJhY3QoMSwgJ21vbnRoJyk7XG4gIHZhciBtb250aHMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8ICh3aXRob3V0VHJhbnNpdGlvbk1vbnRocyA/IG51bWJlck9mTW9udGhzIDogbnVtYmVyT2ZNb250aHMgKyAyKTsgaSArPSAxKSB7XG4gICAgbW9udGhzLnB1c2gobW9udGgpO1xuICAgIG1vbnRoID0gbW9udGguY2xvbmUoKS5hZGQoMSwgJ21vbnRoJyk7XG4gIH1cblxuICByZXR1cm4gbW9udGhzO1xufVxuXG52YXIgQ2FsZW5kYXJNb250aEdyaWQgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9yZWYpIHtcbiAgKDAsIF9pbmhlcml0c0xvb3NlMltcImRlZmF1bHRcIl0pKENhbGVuZGFyTW9udGhHcmlkLCBfcmVmKTtcbiAgdmFyIF9wcm90byA9IENhbGVuZGFyTW9udGhHcmlkLnByb3RvdHlwZTtcblxuICBfcHJvdG9bIV9yZWFjdFtcImRlZmF1bHRcIl0uUHVyZUNvbXBvbmVudCAmJiBcInNob3VsZENvbXBvbmVudFVwZGF0ZVwiXSA9IGZ1bmN0aW9uIChuZXh0UHJvcHMsIG5leHRTdGF0ZSkge1xuICAgIHJldHVybiAhKDAsIF9lbnp5bWVTaGFsbG93RXF1YWxbXCJkZWZhdWx0XCJdKSh0aGlzLnByb3BzLCBuZXh0UHJvcHMpIHx8ICEoMCwgX2VuenltZVNoYWxsb3dFcXVhbFtcImRlZmF1bHRcIl0pKHRoaXMuc3RhdGUsIG5leHRTdGF0ZSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gQ2FsZW5kYXJNb250aEdyaWQocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9yZWYuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcbiAgICB2YXIgd2l0aG91dFRyYW5zaXRpb25Nb250aHMgPSBwcm9wcy5vcmllbnRhdGlvbiA9PT0gX2NvbnN0YW50cy5WRVJUSUNBTF9TQ1JPTExBQkxFO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgbW9udGhzOiBnZXRNb250aHMocHJvcHMuaW5pdGlhbE1vbnRoLCBwcm9wcy5udW1iZXJPZk1vbnRocywgd2l0aG91dFRyYW5zaXRpb25Nb250aHMpXG4gICAgfTtcbiAgICBfdGhpcy5pc1RyYW5zaXRpb25FbmRTdXBwb3J0ZWQgPSAoMCwgX2lzVHJhbnNpdGlvbkVuZFN1cHBvcnRlZFtcImRlZmF1bHRcIl0pKCk7XG4gICAgX3RoaXMub25UcmFuc2l0aW9uRW5kID0gX3RoaXMub25UcmFuc2l0aW9uRW5kLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5zZXRDb250YWluZXJSZWYgPSBfdGhpcy5zZXRDb250YWluZXJSZWYuYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcykpO1xuICAgIF90aGlzLmxvY2FsZSA9IF9tb21lbnRbXCJkZWZhdWx0XCJdLmxvY2FsZSgpO1xuICAgIF90aGlzLm9uTW9udGhTZWxlY3QgPSBfdGhpcy5vbk1vbnRoU2VsZWN0LmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5vblllYXJTZWxlY3QgPSBfdGhpcy5vblllYXJTZWxlY3QuYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcykpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lciA9ICgwLCBfY29uc29saWRhdGVkRXZlbnRzLmFkZEV2ZW50TGlzdGVuZXIpKHRoaXMuY29udGFpbmVyLCAndHJhbnNpdGlvbmVuZCcsIHRoaXMub25UcmFuc2l0aW9uRW5kKTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgaW5pdGlhbE1vbnRoID0gbmV4dFByb3BzLmluaXRpYWxNb250aCxcbiAgICAgICAgbnVtYmVyT2ZNb250aHMgPSBuZXh0UHJvcHMubnVtYmVyT2ZNb250aHMsXG4gICAgICAgIG9yaWVudGF0aW9uID0gbmV4dFByb3BzLm9yaWVudGF0aW9uO1xuICAgIHZhciBtb250aHMgPSB0aGlzLnN0YXRlLm1vbnRocztcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBwcmV2SW5pdGlhbE1vbnRoID0gX3RoaXMkcHJvcHMuaW5pdGlhbE1vbnRoLFxuICAgICAgICBwcmV2TnVtYmVyT2ZNb250aHMgPSBfdGhpcyRwcm9wcy5udW1iZXJPZk1vbnRocztcbiAgICB2YXIgaGFzTW9udGhDaGFuZ2VkID0gIXByZXZJbml0aWFsTW9udGguaXNTYW1lKGluaXRpYWxNb250aCwgJ21vbnRoJyk7XG4gICAgdmFyIGhhc051bWJlck9mTW9udGhzQ2hhbmdlZCA9IHByZXZOdW1iZXJPZk1vbnRocyAhPT0gbnVtYmVyT2ZNb250aHM7XG4gICAgdmFyIG5ld01vbnRocyA9IG1vbnRocztcblxuICAgIGlmIChoYXNNb250aENoYW5nZWQgJiYgIWhhc051bWJlck9mTW9udGhzQ2hhbmdlZCkge1xuICAgICAgaWYgKCgwLCBfaXNOZXh0TW9udGhbXCJkZWZhdWx0XCJdKShwcmV2SW5pdGlhbE1vbnRoLCBpbml0aWFsTW9udGgpKSB7XG4gICAgICAgIG5ld01vbnRocyA9IG1vbnRocy5zbGljZSgxKTtcbiAgICAgICAgbmV3TW9udGhzLnB1c2gobW9udGhzW21vbnRocy5sZW5ndGggLSAxXS5jbG9uZSgpLmFkZCgxLCAnbW9udGgnKSk7XG4gICAgICB9IGVsc2UgaWYgKCgwLCBfaXNQcmV2TW9udGhbXCJkZWZhdWx0XCJdKShwcmV2SW5pdGlhbE1vbnRoLCBpbml0aWFsTW9udGgpKSB7XG4gICAgICAgIG5ld01vbnRocyA9IG1vbnRocy5zbGljZSgwLCBtb250aHMubGVuZ3RoIC0gMSk7XG4gICAgICAgIG5ld01vbnRocy51bnNoaWZ0KG1vbnRoc1swXS5jbG9uZSgpLnN1YnRyYWN0KDEsICdtb250aCcpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciB3aXRob3V0VHJhbnNpdGlvbk1vbnRocyA9IG9yaWVudGF0aW9uID09PSBfY29uc3RhbnRzLlZFUlRJQ0FMX1NDUk9MTEFCTEU7XG4gICAgICAgIG5ld01vbnRocyA9IGdldE1vbnRocyhpbml0aWFsTW9udGgsIG51bWJlck9mTW9udGhzLCB3aXRob3V0VHJhbnNpdGlvbk1vbnRocyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGhhc051bWJlck9mTW9udGhzQ2hhbmdlZCkge1xuICAgICAgdmFyIF93aXRob3V0VHJhbnNpdGlvbk1vbnRocyA9IG9yaWVudGF0aW9uID09PSBfY29uc3RhbnRzLlZFUlRJQ0FMX1NDUk9MTEFCTEU7XG5cbiAgICAgIG5ld01vbnRocyA9IGdldE1vbnRocyhpbml0aWFsTW9udGgsIG51bWJlck9mTW9udGhzLCBfd2l0aG91dFRyYW5zaXRpb25Nb250aHMpO1xuICAgIH1cblxuICAgIHZhciBtb21lbnRMb2NhbGUgPSBfbW9tZW50W1wiZGVmYXVsdFwiXS5sb2NhbGUoKTtcblxuICAgIGlmICh0aGlzLmxvY2FsZSAhPT0gbW9tZW50TG9jYWxlKSB7XG4gICAgICB0aGlzLmxvY2FsZSA9IG1vbWVudExvY2FsZTtcbiAgICAgIG5ld01vbnRocyA9IG5ld01vbnRocy5tYXAoZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgcmV0dXJuIG0ubG9jYWxlKF90aGlzMi5sb2NhbGUpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBtb250aHM6IG5ld01vbnRoc1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgIGlzQW5pbWF0aW5nID0gX3RoaXMkcHJvcHMyLmlzQW5pbWF0aW5nLFxuICAgICAgICB0cmFuc2l0aW9uRHVyYXRpb24gPSBfdGhpcyRwcm9wczIudHJhbnNpdGlvbkR1cmF0aW9uLFxuICAgICAgICBvbk1vbnRoVHJhbnNpdGlvbkVuZCA9IF90aGlzJHByb3BzMi5vbk1vbnRoVHJhbnNpdGlvbkVuZDsgLy8gRm9yIElFOSwgaW1tZWRpYXRlbHkgY2FsbCBvbk1vbnRoVHJhbnNpdGlvbkVuZCBpbnN0ZWFkIG9mXG4gICAgLy8gd2FpdGluZyBmb3IgdGhlIGFuaW1hdGlvbiB0byBjb21wbGV0ZS4gU2ltaWxhcmx5LCBpZiB0cmFuc2l0aW9uRHVyYXRpb25cbiAgICAvLyBpcyBzZXQgdG8gMCwgYWxzbyBpbW1lZGlhdGVseSBpbnZva2UgdGhlIG9uTW9udGhUcmFuc2l0aW9uRW5kIGNhbGxiYWNrXG5cbiAgICBpZiAoKCF0aGlzLmlzVHJhbnNpdGlvbkVuZFN1cHBvcnRlZCB8fCAhdHJhbnNpdGlvbkR1cmF0aW9uKSAmJiBpc0FuaW1hdGluZykge1xuICAgICAgb25Nb250aFRyYW5zaXRpb25FbmQoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcikgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCk7XG4gIH07XG5cbiAgX3Byb3RvLm9uVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIG9uVHJhbnNpdGlvbkVuZCgpIHtcbiAgICB2YXIgb25Nb250aFRyYW5zaXRpb25FbmQgPSB0aGlzLnByb3BzLm9uTW9udGhUcmFuc2l0aW9uRW5kO1xuICAgIG9uTW9udGhUcmFuc2l0aW9uRW5kKCk7XG4gIH07XG5cbiAgX3Byb3RvLm9uTW9udGhTZWxlY3QgPSBmdW5jdGlvbiBvbk1vbnRoU2VsZWN0KGN1cnJlbnRNb250aCwgbmV3TW9udGhWYWwpIHtcbiAgICB2YXIgbmV3TW9udGggPSBjdXJyZW50TW9udGguY2xvbmUoKTtcbiAgICB2YXIgX3RoaXMkcHJvcHMzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgb25Nb250aENoYW5nZSA9IF90aGlzJHByb3BzMy5vbk1vbnRoQ2hhbmdlLFxuICAgICAgICBvcmllbnRhdGlvbiA9IF90aGlzJHByb3BzMy5vcmllbnRhdGlvbjtcbiAgICB2YXIgbW9udGhzID0gdGhpcy5zdGF0ZS5tb250aHM7XG4gICAgdmFyIHdpdGhvdXRUcmFuc2l0aW9uTW9udGhzID0gb3JpZW50YXRpb24gPT09IF9jb25zdGFudHMuVkVSVElDQUxfU0NST0xMQUJMRTtcbiAgICB2YXIgaW5pdGlhbE1vbnRoU3VidHJhY3Rpb24gPSBtb250aHMuaW5kZXhPZihjdXJyZW50TW9udGgpO1xuXG4gICAgaWYgKCF3aXRob3V0VHJhbnNpdGlvbk1vbnRocykge1xuICAgICAgaW5pdGlhbE1vbnRoU3VidHJhY3Rpb24gLT0gMTtcbiAgICB9XG5cbiAgICBuZXdNb250aC5zZXQoJ21vbnRoJywgbmV3TW9udGhWYWwpLnN1YnRyYWN0KGluaXRpYWxNb250aFN1YnRyYWN0aW9uLCAnbW9udGhzJyk7XG4gICAgb25Nb250aENoYW5nZShuZXdNb250aCk7XG4gIH07XG5cbiAgX3Byb3RvLm9uWWVhclNlbGVjdCA9IGZ1bmN0aW9uIG9uWWVhclNlbGVjdChjdXJyZW50TW9udGgsIG5ld1llYXJWYWwpIHtcbiAgICB2YXIgbmV3TW9udGggPSBjdXJyZW50TW9udGguY2xvbmUoKTtcbiAgICB2YXIgX3RoaXMkcHJvcHM0ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgb25ZZWFyQ2hhbmdlID0gX3RoaXMkcHJvcHM0Lm9uWWVhckNoYW5nZSxcbiAgICAgICAgb3JpZW50YXRpb24gPSBfdGhpcyRwcm9wczQub3JpZW50YXRpb247XG4gICAgdmFyIG1vbnRocyA9IHRoaXMuc3RhdGUubW9udGhzO1xuICAgIHZhciB3aXRob3V0VHJhbnNpdGlvbk1vbnRocyA9IG9yaWVudGF0aW9uID09PSBfY29uc3RhbnRzLlZFUlRJQ0FMX1NDUk9MTEFCTEU7XG4gICAgdmFyIGluaXRpYWxNb250aFN1YnRyYWN0aW9uID0gbW9udGhzLmluZGV4T2YoY3VycmVudE1vbnRoKTtcblxuICAgIGlmICghd2l0aG91dFRyYW5zaXRpb25Nb250aHMpIHtcbiAgICAgIGluaXRpYWxNb250aFN1YnRyYWN0aW9uIC09IDE7XG4gICAgfVxuXG4gICAgbmV3TW9udGguc2V0KCd5ZWFyJywgbmV3WWVhclZhbCkuc3VidHJhY3QoaW5pdGlhbE1vbnRoU3VidHJhY3Rpb24sICdtb250aHMnKTtcbiAgICBvblllYXJDaGFuZ2UobmV3TW9udGgpO1xuICB9O1xuXG4gIF9wcm90by5zZXRDb250YWluZXJSZWYgPSBmdW5jdGlvbiBzZXRDb250YWluZXJSZWYocmVmKSB7XG4gICAgdGhpcy5jb250YWluZXIgPSByZWY7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIHZhciBfdGhpcyRwcm9wczUgPSB0aGlzLnByb3BzLFxuICAgICAgICBlbmFibGVPdXRzaWRlRGF5cyA9IF90aGlzJHByb3BzNS5lbmFibGVPdXRzaWRlRGF5cyxcbiAgICAgICAgZmlyc3RWaXNpYmxlTW9udGhJbmRleCA9IF90aGlzJHByb3BzNS5maXJzdFZpc2libGVNb250aEluZGV4LFxuICAgICAgICBob3Jpem9udGFsTW9udGhQYWRkaW5nID0gX3RoaXMkcHJvcHM1Lmhvcml6b250YWxNb250aFBhZGRpbmcsXG4gICAgICAgIGlzQW5pbWF0aW5nID0gX3RoaXMkcHJvcHM1LmlzQW5pbWF0aW5nLFxuICAgICAgICBtb2RpZmllcnMgPSBfdGhpcyRwcm9wczUubW9kaWZpZXJzLFxuICAgICAgICBudW1iZXJPZk1vbnRocyA9IF90aGlzJHByb3BzNS5udW1iZXJPZk1vbnRocyxcbiAgICAgICAgbW9udGhGb3JtYXQgPSBfdGhpcyRwcm9wczUubW9udGhGb3JtYXQsXG4gICAgICAgIG9yaWVudGF0aW9uID0gX3RoaXMkcHJvcHM1Lm9yaWVudGF0aW9uLFxuICAgICAgICB0cmFuc2xhdGlvblZhbHVlID0gX3RoaXMkcHJvcHM1LnRyYW5zbGF0aW9uVmFsdWUsXG4gICAgICAgIGRheVNpemUgPSBfdGhpcyRwcm9wczUuZGF5U2l6ZSxcbiAgICAgICAgb25EYXlNb3VzZUVudGVyID0gX3RoaXMkcHJvcHM1Lm9uRGF5TW91c2VFbnRlcixcbiAgICAgICAgb25EYXlNb3VzZUxlYXZlID0gX3RoaXMkcHJvcHM1Lm9uRGF5TW91c2VMZWF2ZSxcbiAgICAgICAgb25EYXlDbGljayA9IF90aGlzJHByb3BzNS5vbkRheUNsaWNrLFxuICAgICAgICByZW5kZXJNb250aFRleHQgPSBfdGhpcyRwcm9wczUucmVuZGVyTW9udGhUZXh0LFxuICAgICAgICByZW5kZXJDYWxlbmRhckRheSA9IF90aGlzJHByb3BzNS5yZW5kZXJDYWxlbmRhckRheSxcbiAgICAgICAgcmVuZGVyRGF5Q29udGVudHMgPSBfdGhpcyRwcm9wczUucmVuZGVyRGF5Q29udGVudHMsXG4gICAgICAgIHJlbmRlck1vbnRoRWxlbWVudCA9IF90aGlzJHByb3BzNS5yZW5kZXJNb250aEVsZW1lbnQsXG4gICAgICAgIG9uTW9udGhUcmFuc2l0aW9uRW5kID0gX3RoaXMkcHJvcHM1Lm9uTW9udGhUcmFuc2l0aW9uRW5kLFxuICAgICAgICBmaXJzdERheU9mV2VlayA9IF90aGlzJHByb3BzNS5maXJzdERheU9mV2VlayxcbiAgICAgICAgZm9jdXNlZERhdGUgPSBfdGhpcyRwcm9wczUuZm9jdXNlZERhdGUsXG4gICAgICAgIGlzRm9jdXNlZCA9IF90aGlzJHByb3BzNS5pc0ZvY3VzZWQsXG4gICAgICAgIGlzUlRMID0gX3RoaXMkcHJvcHM1LmlzUlRMLFxuICAgICAgICBzdHlsZXMgPSBfdGhpcyRwcm9wczUuc3R5bGVzLFxuICAgICAgICBwaHJhc2VzID0gX3RoaXMkcHJvcHM1LnBocmFzZXMsXG4gICAgICAgIGRheUFyaWFMYWJlbEZvcm1hdCA9IF90aGlzJHByb3BzNS5kYXlBcmlhTGFiZWxGb3JtYXQsXG4gICAgICAgIHRyYW5zaXRpb25EdXJhdGlvbiA9IF90aGlzJHByb3BzNS50cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgICAgIHZlcnRpY2FsQm9yZGVyU3BhY2luZyA9IF90aGlzJHByb3BzNS52ZXJ0aWNhbEJvcmRlclNwYWNpbmcsXG4gICAgICAgIHNldE1vbnRoVGl0bGVIZWlnaHQgPSBfdGhpcyRwcm9wczUuc2V0TW9udGhUaXRsZUhlaWdodDtcbiAgICB2YXIgbW9udGhzID0gdGhpcy5zdGF0ZS5tb250aHM7XG4gICAgdmFyIGlzVmVydGljYWwgPSBvcmllbnRhdGlvbiA9PT0gX2NvbnN0YW50cy5WRVJUSUNBTF9PUklFTlRBVElPTjtcbiAgICB2YXIgaXNWZXJ0aWNhbFNjcm9sbGFibGUgPSBvcmllbnRhdGlvbiA9PT0gX2NvbnN0YW50cy5WRVJUSUNBTF9TQ1JPTExBQkxFO1xuICAgIHZhciBpc0hvcml6b250YWwgPSBvcmllbnRhdGlvbiA9PT0gX2NvbnN0YW50cy5IT1JJWk9OVEFMX09SSUVOVEFUSU9OO1xuICAgIHZhciBjYWxlbmRhck1vbnRoV2lkdGggPSAoMCwgX2dldENhbGVuZGFyTW9udGhXaWR0aFtcImRlZmF1bHRcIl0pKGRheVNpemUsIGhvcml6b250YWxNb250aFBhZGRpbmcpO1xuICAgIHZhciB3aWR0aCA9IGlzVmVydGljYWwgfHwgaXNWZXJ0aWNhbFNjcm9sbGFibGUgPyBjYWxlbmRhck1vbnRoV2lkdGggOiAobnVtYmVyT2ZNb250aHMgKyAyKSAqIGNhbGVuZGFyTW9udGhXaWR0aDtcbiAgICB2YXIgdHJhbnNmb3JtVHlwZSA9IGlzVmVydGljYWwgfHwgaXNWZXJ0aWNhbFNjcm9sbGFibGUgPyAndHJhbnNsYXRlWScgOiAndHJhbnNsYXRlWCc7XG4gICAgdmFyIHRyYW5zZm9ybVZhbHVlID0gXCJcIi5jb25jYXQodHJhbnNmb3JtVHlwZSwgXCIoXCIpLmNvbmNhdCh0cmFuc2xhdGlvblZhbHVlLCBcInB4KVwiKTtcbiAgICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsICgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7fSwgKDAsIF9yZWFjdFdpdGhTdHlsZXMuY3NzKShzdHlsZXMuQ2FsZW5kYXJNb250aEdyaWQsIGlzSG9yaXpvbnRhbCAmJiBzdHlsZXMuQ2FsZW5kYXJNb250aEdyaWRfX2hvcml6b250YWwsIGlzVmVydGljYWwgJiYgc3R5bGVzLkNhbGVuZGFyTW9udGhHcmlkX192ZXJ0aWNhbCwgaXNWZXJ0aWNhbFNjcm9sbGFibGUgJiYgc3R5bGVzLkNhbGVuZGFyTW9udGhHcmlkX192ZXJ0aWNhbF9zY3JvbGxhYmxlLCBpc0FuaW1hdGluZyAmJiBzdHlsZXMuQ2FsZW5kYXJNb250aEdyaWRfX2FuaW1hdGluZywgaXNBbmltYXRpbmcgJiYgdHJhbnNpdGlvbkR1cmF0aW9uICYmIHtcbiAgICAgIHRyYW5zaXRpb246IFwidHJhbnNmb3JtIFwiLmNvbmNhdCh0cmFuc2l0aW9uRHVyYXRpb24sIFwibXMgZWFzZS1pbi1vdXRcIilcbiAgICB9LCBfb2JqZWN0U3ByZWFkKHt9LCAoMCwgX2dldFRyYW5zZm9ybVN0eWxlc1tcImRlZmF1bHRcIl0pKHRyYW5zZm9ybVZhbHVlKSwge1xuICAgICAgd2lkdGg6IHdpZHRoXG4gICAgfSkpLCB7XG4gICAgICByZWY6IHRoaXMuc2V0Q29udGFpbmVyUmVmLFxuICAgICAgb25UcmFuc2l0aW9uRW5kOiBvbk1vbnRoVHJhbnNpdGlvbkVuZFxuICAgIH0pLCBtb250aHMubWFwKGZ1bmN0aW9uIChtb250aCwgaSkge1xuICAgICAgdmFyIGlzVmlzaWJsZSA9IGkgPj0gZmlyc3RWaXNpYmxlTW9udGhJbmRleCAmJiBpIDwgZmlyc3RWaXNpYmxlTW9udGhJbmRleCArIG51bWJlck9mTW9udGhzO1xuICAgICAgdmFyIGhpZGVGb3JBbmltYXRpb24gPSBpID09PSAwICYmICFpc1Zpc2libGU7XG4gICAgICB2YXIgc2hvd0ZvckFuaW1hdGlvbiA9IGkgPT09IDAgJiYgaXNBbmltYXRpbmcgJiYgaXNWaXNpYmxlO1xuICAgICAgdmFyIG1vbnRoU3RyaW5nID0gKDAsIF90b0lTT01vbnRoU3RyaW5nW1wiZGVmYXVsdFwiXSkobW9udGgpO1xuICAgICAgcmV0dXJuIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImRpdlwiLCAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe1xuICAgICAgICBrZXk6IG1vbnRoU3RyaW5nXG4gICAgICB9LCAoMCwgX3JlYWN0V2l0aFN0eWxlcy5jc3MpKGlzSG9yaXpvbnRhbCAmJiBzdHlsZXMuQ2FsZW5kYXJNb250aEdyaWRfbW9udGhfX2hvcml6b250YWwsIGhpZGVGb3JBbmltYXRpb24gJiYgc3R5bGVzLkNhbGVuZGFyTW9udGhHcmlkX21vbnRoX19oaWRlRm9yQW5pbWF0aW9uLCBzaG93Rm9yQW5pbWF0aW9uICYmICFpc1ZlcnRpY2FsICYmICFpc1JUTCAmJiB7XG4gICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICBsZWZ0OiAtY2FsZW5kYXJNb250aFdpZHRoXG4gICAgICB9LCBzaG93Rm9yQW5pbWF0aW9uICYmICFpc1ZlcnRpY2FsICYmIGlzUlRMICYmIHtcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgIHJpZ2h0OiAwXG4gICAgICB9LCBzaG93Rm9yQW5pbWF0aW9uICYmIGlzVmVydGljYWwgJiYge1xuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgdG9wOiAtdHJhbnNsYXRpb25WYWx1ZVxuICAgICAgfSwgIWlzVmlzaWJsZSAmJiAhaXNBbmltYXRpbmcgJiYgc3R5bGVzLkNhbGVuZGFyTW9udGhHcmlkX21vbnRoX19oaWRkZW4pKSwgX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9DYWxlbmRhck1vbnRoW1wiZGVmYXVsdFwiXSwge1xuICAgICAgICBtb250aDogbW9udGgsXG4gICAgICAgIGlzVmlzaWJsZTogaXNWaXNpYmxlLFxuICAgICAgICBlbmFibGVPdXRzaWRlRGF5czogZW5hYmxlT3V0c2lkZURheXMsXG4gICAgICAgIG1vZGlmaWVyczogbW9kaWZpZXJzW21vbnRoU3RyaW5nXSxcbiAgICAgICAgbW9udGhGb3JtYXQ6IG1vbnRoRm9ybWF0LFxuICAgICAgICBvcmllbnRhdGlvbjogb3JpZW50YXRpb24sXG4gICAgICAgIG9uRGF5TW91c2VFbnRlcjogb25EYXlNb3VzZUVudGVyLFxuICAgICAgICBvbkRheU1vdXNlTGVhdmU6IG9uRGF5TW91c2VMZWF2ZSxcbiAgICAgICAgb25EYXlDbGljazogb25EYXlDbGljayxcbiAgICAgICAgb25Nb250aFNlbGVjdDogX3RoaXMzLm9uTW9udGhTZWxlY3QsXG4gICAgICAgIG9uWWVhclNlbGVjdDogX3RoaXMzLm9uWWVhclNlbGVjdCxcbiAgICAgICAgcmVuZGVyTW9udGhUZXh0OiByZW5kZXJNb250aFRleHQsXG4gICAgICAgIHJlbmRlckNhbGVuZGFyRGF5OiByZW5kZXJDYWxlbmRhckRheSxcbiAgICAgICAgcmVuZGVyRGF5Q29udGVudHM6IHJlbmRlckRheUNvbnRlbnRzLFxuICAgICAgICByZW5kZXJNb250aEVsZW1lbnQ6IHJlbmRlck1vbnRoRWxlbWVudCxcbiAgICAgICAgZmlyc3REYXlPZldlZWs6IGZpcnN0RGF5T2ZXZWVrLFxuICAgICAgICBkYXlTaXplOiBkYXlTaXplLFxuICAgICAgICBmb2N1c2VkRGF0ZTogaXNWaXNpYmxlID8gZm9jdXNlZERhdGUgOiBudWxsLFxuICAgICAgICBpc0ZvY3VzZWQ6IGlzRm9jdXNlZCxcbiAgICAgICAgcGhyYXNlczogcGhyYXNlcyxcbiAgICAgICAgc2V0TW9udGhUaXRsZUhlaWdodDogc2V0TW9udGhUaXRsZUhlaWdodCxcbiAgICAgICAgZGF5QXJpYUxhYmVsRm9ybWF0OiBkYXlBcmlhTGFiZWxGb3JtYXQsXG4gICAgICAgIHZlcnRpY2FsQm9yZGVyU3BhY2luZzogdmVydGljYWxCb3JkZXJTcGFjaW5nLFxuICAgICAgICBob3Jpem9udGFsTW9udGhQYWRkaW5nOiBob3Jpem9udGFsTW9udGhQYWRkaW5nXG4gICAgICB9KSk7XG4gICAgfSkpO1xuICB9O1xuXG4gIHJldHVybiBDYWxlbmRhck1vbnRoR3JpZDtcbn0oX3JlYWN0W1wiZGVmYXVsdFwiXS5QdXJlQ29tcG9uZW50IHx8IF9yZWFjdFtcImRlZmF1bHRcIl0uQ29tcG9uZW50KTtcblxuQ2FsZW5kYXJNb250aEdyaWQucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gcHJvcFR5cGVzIDoge307XG5DYWxlbmRhck1vbnRoR3JpZC5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfcmVhY3RXaXRoU3R5bGVzLndpdGhTdHlsZXMpKGZ1bmN0aW9uIChfcmVmMikge1xuICB2YXIgX3JlZjIkcmVhY3REYXRlcyA9IF9yZWYyLnJlYWN0RGF0ZXMsXG4gICAgICBjb2xvciA9IF9yZWYyJHJlYWN0RGF0ZXMuY29sb3IsXG4gICAgICBzcGFjaW5nID0gX3JlZjIkcmVhY3REYXRlcy5zcGFjaW5nLFxuICAgICAgekluZGV4ID0gX3JlZjIkcmVhY3REYXRlcy56SW5kZXg7XG4gIHJldHVybiB7XG4gICAgQ2FsZW5kYXJNb250aEdyaWQ6IHtcbiAgICAgIGJhY2tncm91bmQ6IGNvbG9yLmJhY2tncm91bmQsXG4gICAgICB0ZXh0QWxpZ246ICgwLCBfbm9mbGlwW1wiZGVmYXVsdFwiXSkoJ2xlZnQnKSxcbiAgICAgIHpJbmRleDogekluZGV4XG4gICAgfSxcbiAgICBDYWxlbmRhck1vbnRoR3JpZF9fYW5pbWF0aW5nOiB7XG4gICAgICB6SW5kZXg6IHpJbmRleCArIDFcbiAgICB9LFxuICAgIENhbGVuZGFyTW9udGhHcmlkX19ob3Jpem9udGFsOiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIGxlZnQ6ICgwLCBfbm9mbGlwW1wiZGVmYXVsdFwiXSkoc3BhY2luZy5kYXlQaWNrZXJIb3Jpem9udGFsUGFkZGluZylcbiAgICB9LFxuICAgIENhbGVuZGFyTW9udGhHcmlkX192ZXJ0aWNhbDoge1xuICAgICAgbWFyZ2luOiAnMCBhdXRvJ1xuICAgIH0sXG4gICAgQ2FsZW5kYXJNb250aEdyaWRfX3ZlcnRpY2FsX3Njcm9sbGFibGU6IHtcbiAgICAgIG1hcmdpbjogJzAgYXV0bydcbiAgICB9LFxuICAgIENhbGVuZGFyTW9udGhHcmlkX21vbnRoX19ob3Jpem9udGFsOiB7XG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgIHZlcnRpY2FsQWxpZ246ICd0b3AnLFxuICAgICAgbWluSGVpZ2h0OiAnMTAwJSdcbiAgICB9LFxuICAgIENhbGVuZGFyTW9udGhHcmlkX21vbnRoX19oaWRlRm9yQW5pbWF0aW9uOiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHpJbmRleDogekluZGV4IC0gMSxcbiAgICAgIG9wYWNpdHk6IDAsXG4gICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZSdcbiAgICB9LFxuICAgIENhbGVuZGFyTW9udGhHcmlkX21vbnRoX19oaWRkZW46IHtcbiAgICAgIHZpc2liaWxpdHk6ICdoaWRkZW4nXG4gICAgfVxuICB9O1xufSwge1xuICBwdXJlQ29tcG9uZW50OiB0eXBlb2YgX3JlYWN0W1wiZGVmYXVsdFwiXS5QdXJlQ29tcG9uZW50ICE9PSAndW5kZWZpbmVkJ1xufSkoQ2FsZW5kYXJNb250aEdyaWQpO1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBnZXRDYWxlbmRhck1vbnRoV2lkdGg7XG5cbmZ1bmN0aW9uIGdldENhbGVuZGFyTW9udGhXaWR0aChkYXlTaXplKSB7XG4gIHZhciBjYWxlbmRhck1vbnRoUGFkZGluZyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcbiAgcmV0dXJuIDcgKiBkYXlTaXplICsgMiAqIGNhbGVuZGFyTW9udGhQYWRkaW5nICsgMTtcbn0iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29udGFpbnMob3RoZXIpIHtcblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPCAxKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignMSBhcmd1bWVudCBpcyByZXF1aXJlZCcpO1xuXHR9XG5cdGlmICh0eXBlb2Ygb3RoZXIgIT09ICdvYmplY3QnKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgMSAo4oCdb3RoZXLigJwpIHRvIE5vZGUuY29udGFpbnMgbXVzdCBiZSBhbiBpbnN0YW5jZSBvZiBOb2RlJyk7XG5cdH1cblxuXHR2YXIgbm9kZSA9IG90aGVyO1xuXHRkbyB7XG5cdFx0aWYgKHRoaXMgPT09IG5vZGUpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRpZiAobm9kZSkge1xuXHRcdFx0bm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcblx0XHR9XG5cdH0gd2hpbGUgKG5vZGUpO1xuXG5cdHJldHVybiBmYWxzZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRQb2x5ZmlsbCgpIHtcblx0aWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRpZiAoZG9jdW1lbnQuY29udGFpbnMpIHtcblx0XHRcdHJldHVybiBkb2N1bWVudC5jb250YWlucztcblx0XHR9XG5cdFx0aWYgKGRvY3VtZW50LmJvZHkgJiYgZG9jdW1lbnQuYm9keS5jb250YWlucykge1xuXHRcdFx0cmV0dXJuIGRvY3VtZW50LmJvZHkuY29udGFpbnM7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBpbXBsZW1lbnRhdGlvbjtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9yZWFjdE1vbWVudFByb3B0eXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LW1vbWVudC1wcm9wdHlwZXNcIikpO1xuXG52YXIgX2FpcmJuYlByb3BUeXBlcyA9IHJlcXVpcmUoXCJhaXJibmItcHJvcC10eXBlc1wiKTtcblxudmFyIF9kZWZhdWx0UGhyYXNlcyA9IHJlcXVpcmUoXCIuLi9kZWZhdWx0UGhyYXNlc1wiKTtcblxudmFyIF9nZXRQaHJhc2VQcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9nZXRQaHJhc2VQcm9wVHlwZXNcIikpO1xuXG52YXIgX0ZvY3VzZWRJbnB1dFNoYXBlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Gb2N1c2VkSW5wdXRTaGFwZVwiKSk7XG5cbnZhciBfSWNvblBvc2l0aW9uU2hhcGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0ljb25Qb3NpdGlvblNoYXBlXCIpKTtcblxudmFyIF9PcmllbnRhdGlvblNoYXBlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9PcmllbnRhdGlvblNoYXBlXCIpKTtcblxudmFyIF9EaXNhYmxlZFNoYXBlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9EaXNhYmxlZFNoYXBlXCIpKTtcblxudmFyIF9BbmNob3JEaXJlY3Rpb25TaGFwZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQW5jaG9yRGlyZWN0aW9uU2hhcGVcIikpO1xuXG52YXIgX09wZW5EaXJlY3Rpb25TaGFwZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vT3BlbkRpcmVjdGlvblNoYXBlXCIpKTtcblxudmFyIF9EYXlPZldlZWtTaGFwZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vRGF5T2ZXZWVrU2hhcGVcIikpO1xuXG52YXIgX0NhbGVuZGFySW5mb1Bvc2l0aW9uU2hhcGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0NhbGVuZGFySW5mb1Bvc2l0aW9uU2hhcGVcIikpO1xuXG52YXIgX05hdlBvc2l0aW9uU2hhcGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL05hdlBvc2l0aW9uU2hhcGVcIikpO1xuXG52YXIgX2RlZmF1bHQgPSB7XG4gIC8vIHJlcXVpcmVkIHByb3BzIGZvciBhIGZ1bmN0aW9uYWwgaW50ZXJhY3RpdmUgRGF0ZVJhbmdlUGlja2VyXG4gIHN0YXJ0RGF0ZTogX3JlYWN0TW9tZW50UHJvcHR5cGVzW1wiZGVmYXVsdFwiXS5tb21lbnRPYmosXG4gIGVuZERhdGU6IF9yZWFjdE1vbWVudFByb3B0eXBlc1tcImRlZmF1bHRcIl0ubW9tZW50T2JqLFxuICBvbkRhdGVzQ2hhbmdlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLmlzUmVxdWlyZWQsXG4gIGZvY3VzZWRJbnB1dDogX0ZvY3VzZWRJbnB1dFNoYXBlW1wiZGVmYXVsdFwiXSxcbiAgb25Gb2N1c0NoYW5nZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYy5pc1JlcXVpcmVkLFxuICBvbkNsb3NlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICAvLyBpbnB1dCByZWxhdGVkIHByb3BzXG4gIHN0YXJ0RGF0ZUlkOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgc3RhcnREYXRlUGxhY2Vob2xkZXJUZXh0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcsXG4gIHN0YXJ0RGF0ZU9mZnNldDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgZW5kRGF0ZU9mZnNldDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgZW5kRGF0ZUlkOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgZW5kRGF0ZVBsYWNlaG9sZGVyVGV4dDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLFxuICBzdGFydERhdGVBcmlhTGFiZWw6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZyxcbiAgZW5kRGF0ZUFyaWFMYWJlbDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLFxuICBkaXNhYmxlZDogX0Rpc2FibGVkU2hhcGVbXCJkZWZhdWx0XCJdLFxuICByZXF1aXJlZDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgcmVhZE9ubHk6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIHNjcmVlblJlYWRlcklucHV0TWVzc2FnZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLFxuICBzaG93Q2xlYXJEYXRlczogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgc2hvd0RlZmF1bHRJbnB1dEljb246IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIGlucHV0SWNvblBvc2l0aW9uOiBfSWNvblBvc2l0aW9uU2hhcGVbXCJkZWZhdWx0XCJdLFxuICBjdXN0b21JbnB1dEljb246IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm5vZGUsXG4gIGN1c3RvbUFycm93SWNvbjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubm9kZSxcbiAgY3VzdG9tQ2xvc2VJY29uOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ub2RlLFxuICBub0JvcmRlcjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgYmxvY2s6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIHNtYWxsOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICByZWd1bGFyOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBrZWVwRm9jdXNPbklucHV0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICAvLyBjYWxlbmRhciBwcmVzZW50YXRpb24gYW5kIGludGVyYWN0aW9uIHJlbGF0ZWQgcHJvcHNcbiAgcmVuZGVyTW9udGhUZXh0OiAoMCwgX2FpcmJuYlByb3BUeXBlcy5tdXR1YWxseUV4Y2x1c2l2ZVByb3BzKShfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLCAncmVuZGVyTW9udGhUZXh0JywgJ3JlbmRlck1vbnRoRWxlbWVudCcpLFxuICByZW5kZXJNb250aEVsZW1lbnQ6ICgwLCBfYWlyYm5iUHJvcFR5cGVzLm11dHVhbGx5RXhjbHVzaXZlUHJvcHMpKF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsICdyZW5kZXJNb250aFRleHQnLCAncmVuZGVyTW9udGhFbGVtZW50JyksXG4gIHJlbmRlcldlZWtIZWFkZXJFbGVtZW50OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvcmllbnRhdGlvbjogX09yaWVudGF0aW9uU2hhcGVbXCJkZWZhdWx0XCJdLFxuICBhbmNob3JEaXJlY3Rpb246IF9BbmNob3JEaXJlY3Rpb25TaGFwZVtcImRlZmF1bHRcIl0sXG4gIG9wZW5EaXJlY3Rpb246IF9PcGVuRGlyZWN0aW9uU2hhcGVbXCJkZWZhdWx0XCJdLFxuICBob3Jpem9udGFsTWFyZ2luOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5udW1iZXIsXG4gIHdpdGhQb3J0YWw6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIHdpdGhGdWxsU2NyZWVuUG9ydGFsOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBhcHBlbmRUb0JvZHk6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIGRpc2FibGVTY3JvbGw6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIGRheVNpemU6IF9haXJibmJQcm9wVHlwZXMubm9uTmVnYXRpdmVJbnRlZ2VyLFxuICBpc1JUTDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgZmlyc3REYXlPZldlZWs6IF9EYXlPZldlZWtTaGFwZVtcImRlZmF1bHRcIl0sXG4gIGluaXRpYWxWaXNpYmxlTW9udGg6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIG51bWJlck9mTW9udGhzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5udW1iZXIsXG4gIGtlZXBPcGVuT25EYXRlU2VsZWN0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICByZW9wZW5QaWNrZXJPbkNsZWFyRGF0ZXM6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIHJlbmRlckNhbGVuZGFySW5mbzogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgY2FsZW5kYXJJbmZvUG9zaXRpb246IF9DYWxlbmRhckluZm9Qb3NpdGlvblNoYXBlW1wiZGVmYXVsdFwiXSxcbiAgaGlkZUtleWJvYXJkU2hvcnRjdXRzUGFuZWw6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIHZlcnRpY2FsSGVpZ2h0OiBfYWlyYm5iUHJvcFR5cGVzLm5vbk5lZ2F0aXZlSW50ZWdlcixcbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiBfYWlyYm5iUHJvcFR5cGVzLm5vbk5lZ2F0aXZlSW50ZWdlcixcbiAgdmVydGljYWxTcGFjaW5nOiBfYWlyYm5iUHJvcFR5cGVzLm5vbk5lZ2F0aXZlSW50ZWdlcixcbiAgaG9yaXpvbnRhbE1vbnRoUGFkZGluZzogX2FpcmJuYlByb3BUeXBlcy5ub25OZWdhdGl2ZUludGVnZXIsXG4gIC8vIG5hdmlnYXRpb24gcmVsYXRlZCBwcm9wc1xuICBkYXlQaWNrZXJOYXZpZ2F0aW9uSW5saW5lU3R5bGVzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5vYmplY3QsXG4gIG5hdlBvc2l0aW9uOiBfTmF2UG9zaXRpb25TaGFwZVtcImRlZmF1bHRcIl0sXG4gIG5hdlByZXY6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm5vZGUsXG4gIG5hdk5leHQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm5vZGUsXG4gIHJlbmRlck5hdlByZXZCdXR0b246IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIHJlbmRlck5hdk5leHRCdXR0b246IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIG9uUHJldk1vbnRoQ2xpY2s6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIG9uTmV4dE1vbnRoQ2xpY2s6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIC8vIGRheSBwcmVzZW50YXRpb24gYW5kIGludGVyYWN0aW9uIHJlbGF0ZWQgcHJvcHNcbiAgcmVuZGVyQ2FsZW5kYXJEYXk6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIHJlbmRlckRheUNvbnRlbnRzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBtaW5pbXVtTmlnaHRzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5udW1iZXIsXG4gIG1pbkRhdGU6IF9yZWFjdE1vbWVudFByb3B0eXBlc1tcImRlZmF1bHRcIl0ubW9tZW50T2JqLFxuICBtYXhEYXRlOiBfcmVhY3RNb21lbnRQcm9wdHlwZXNbXCJkZWZhdWx0XCJdLm1vbWVudE9iaixcbiAgZW5hYmxlT3V0c2lkZURheXM6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIGlzRGF5QmxvY2tlZDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgaXNPdXRzaWRlUmFuZ2U6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIGlzRGF5SGlnaGxpZ2h0ZWQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIC8vIGludGVybmF0aW9uYWxpemF0aW9uIHByb3BzXG4gIGRpc3BsYXlGb3JtYXQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm9uZU9mVHlwZShbX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLCBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jXSksXG4gIG1vbnRoRm9ybWF0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcsXG4gIHdlZWtEYXlGb3JtYXQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZyxcbiAgcGhyYXNlczogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc2hhcGUoKDAsIF9nZXRQaHJhc2VQcm9wVHlwZXNbXCJkZWZhdWx0XCJdKShfZGVmYXVsdFBocmFzZXMuRGF0ZVJhbmdlUGlja2VyUGhyYXNlcykpLFxuICBkYXlBcmlhTGFiZWxGb3JtYXQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZ1xufTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfY29uc3RhbnRzID0gcmVxdWlyZShcIi4uL2NvbnN0YW50c1wiKTtcblxudmFyIF9kZWZhdWx0ID0gX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ub25lT2YoW19jb25zdGFudHMuU1RBUlRfREFURSwgX2NvbnN0YW50cy5FTkRfREFURV0pO1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHNcIik7XG5cbnZhciBfZGVmYXVsdCA9IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm9uZU9mKFtfY29uc3RhbnRzLkhPUklaT05UQUxfT1JJRU5UQVRJT04sIF9jb25zdGFudHMuVkVSVElDQUxfT1JJRU5UQVRJT05dKTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9jb25zdGFudHMgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzXCIpO1xuXG52YXIgX2RlZmF1bHQgPSBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5vbmVPZihbX2NvbnN0YW50cy5BTkNIT1JfTEVGVCwgX2NvbnN0YW50cy5BTkNIT1JfUklHSFRdKTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGdldFJlc3BvbnNpdmVDb250YWluZXJTdHlsZXM7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfY29uc3RhbnRzID0gcmVxdWlyZShcIi4uL2NvbnN0YW50c1wiKTtcblxuZnVuY3Rpb24gZ2V0UmVzcG9uc2l2ZUNvbnRhaW5lclN0eWxlcyhhbmNob3JEaXJlY3Rpb24sIGN1cnJlbnRPZmZzZXQsIGNvbnRhaW5lckVkZ2UsIG1hcmdpbikge1xuICB2YXIgd2luZG93V2lkdGggPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdy5pbm5lcldpZHRoIDogMDtcbiAgdmFyIGNhbGN1bGF0ZWRPZmZzZXQgPSBhbmNob3JEaXJlY3Rpb24gPT09IF9jb25zdGFudHMuQU5DSE9SX0xFRlQgPyB3aW5kb3dXaWR0aCAtIGNvbnRhaW5lckVkZ2UgOiBjb250YWluZXJFZGdlO1xuICB2YXIgY2FsY3VsYXRlZE1hcmdpbiA9IG1hcmdpbiB8fCAwO1xuICByZXR1cm4gKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKSh7fSwgYW5jaG9yRGlyZWN0aW9uLCBNYXRoLm1pbihjdXJyZW50T2Zmc2V0ICsgY2FsY3VsYXRlZE9mZnNldCAtIGNhbGN1bGF0ZWRNYXJnaW4sIDApKTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gZ2V0RGV0YWNoZWRDb250YWluZXJTdHlsZXM7XG5cbnZhciBfY29uc3RhbnRzID0gcmVxdWlyZShcIi4uL2NvbnN0YW50c1wiKTtcblxuLyoqXG4gKiBDYWxjdWxhdGUgYW5kIHJldHVybiBhIENTUyB0cmFuc2Zvcm0gc3R5bGUgdG8gcG9zaXRpb24gYSBkZXRhY2hlZCBlbGVtZW50XG4gKiBuZXh0IHRvIGEgcmVmZXJlbmNlIGVsZW1lbnQuIFRoZSBvcGVuIGFuZCBhbmNob3IgZGlyZWN0aW9uIGluZGljYXRlIHdldGhlclxuICogaXQgc2hvdWxkIGJlIHBvc2l0aW9uZWQgYWJvdmUvYmVsb3cgYW5kL29yIHRvIHRoZSBsZWZ0L3JpZ2h0IG9mIHRoZVxuICogcmVmZXJlbmNlIGVsZW1lbnQuXG4gKlxuICogQXNzdW1pbmcgcigwLDApLCByKDEsMSksIGQoMCwwKSwgZCgxLDEpIGZvciB0aGUgYm90dG9tLWxlZnQgYW5kIHRvcC1yaWdodFxuICogY29ybmVycyBvZiB0aGUgcmVmZXJlbmNlIGFuZCBkZXRhY2hlZCBlbGVtZW50cywgcmVzcGVjdGl2ZWx5OlxuICogIC0gb3BlbkRpcmVjdGlvbiA9IERPV04sIGFuY2hvckRpcmVjdGlvbiA9IExFRlQgPT4gZCgwLDEpID09IHIoMCwxKVxuICogIC0gb3BlbkRpcmVjdGlvbiA9IFVQLCBhbmNob3JEaXJlY3Rpb24gPSBMRUZUID0+IGQoMCwwKSA9PSByKDAsMClcbiAqICAtIG9wZW5EaXJlY3Rpb24gPSBET1dOLCBhbmNob3JEaXJlY3Rpb24gPSBSSUdIVCA9PiBkKDEsMSkgPT0gcigxLDEpXG4gKiAgLSBvcGVuRGlyZWN0aW9uID0gVVAsIGFuY2hvckRpcmVjdGlvbiA9IFJJR0hUID0+IGQoMSwwKSA9PSByKDEsMClcbiAqXG4gKiBCeSB1c2luZyBhIENTUyB0cmFuc2Zvcm0sIHdlIGFsbG93IHRvIGZ1cnRoZXIgcG9zaXRpb24gaXQgdXNpbmdcbiAqIHRvcC9ib3R0b20gQ1NTIHByb3BlcnRpZXMgZm9yIHRoZSBhbmNob3IgZ3V0dGVyLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcGVuRGlyZWN0aW9uIFRoZSB2ZXJ0aWNhbCBwb3NpdGlvbmluZyBvZiB0aGUgcG9wdXBcbiAqIEBwYXJhbSB7c3RyaW5nfSBhbmNob3JEaXJlY3Rpb24gVGhlIGhvcml6b250YWwgcG9zaXRpb24gb2YgdGhlIHBvcHVwXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSByZWZlcmVuY2VFbCBUaGUgcmVmZXJlbmNlIGVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gZ2V0RGV0YWNoZWRDb250YWluZXJTdHlsZXMob3BlbkRpcmVjdGlvbiwgYW5jaG9yRGlyZWN0aW9uLCByZWZlcmVuY2VFbCkge1xuICB2YXIgcmVmZXJlbmNlUmVjdCA9IHJlZmVyZW5jZUVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB2YXIgb2Zmc2V0WCA9IHJlZmVyZW5jZVJlY3QubGVmdDtcbiAgdmFyIG9mZnNldFkgPSByZWZlcmVuY2VSZWN0LnRvcDtcblxuICBpZiAob3BlbkRpcmVjdGlvbiA9PT0gX2NvbnN0YW50cy5PUEVOX1VQKSB7XG4gICAgb2Zmc2V0WSA9IC0od2luZG93LmlubmVySGVpZ2h0IC0gcmVmZXJlbmNlUmVjdC5ib3R0b20pO1xuICB9XG5cbiAgaWYgKGFuY2hvckRpcmVjdGlvbiA9PT0gX2NvbnN0YW50cy5BTkNIT1JfUklHSFQpIHtcbiAgICBvZmZzZXRYID0gLSh3aW5kb3cuaW5uZXJXaWR0aCAtIHJlZmVyZW5jZVJlY3QucmlnaHQpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0cmFuc2Zvcm06IFwidHJhbnNsYXRlM2QoXCIuY29uY2F0KE1hdGgucm91bmQob2Zmc2V0WCksIFwicHgsIFwiKS5jb25jYXQoTWF0aC5yb3VuZChvZmZzZXRZKSwgXCJweCwgMClcIilcbiAgfTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZ2V0U2Nyb2xsUGFyZW50ID0gZ2V0U2Nyb2xsUGFyZW50O1xuZXhwb3J0cy5nZXRTY3JvbGxBbmNlc3RvcnNPdmVyZmxvd1kgPSBnZXRTY3JvbGxBbmNlc3RvcnNPdmVyZmxvd1k7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGRpc2FibGVTY3JvbGw7XG5cbnZhciBnZXRTY3JvbGxpbmdSb290ID0gZnVuY3Rpb24gZ2V0U2Nyb2xsaW5nUm9vdCgpIHtcbiAgcmV0dXJuIGRvY3VtZW50LnNjcm9sbGluZ0VsZW1lbnQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xufTtcbi8qKlxuICogUmVjdXJzaXZlbHkgZmluZHMgdGhlIHNjcm9sbCBwYXJlbnQgb2YgYSBub2RlLiBUaGUgc2Nyb2xsIHBhcnJlbnQgb2YgYSBub2RlXG4gKiBpcyB0aGUgY2xvc2VzdCBub2RlIHRoYXQgaXMgc2Nyb2xsYWJsZS4gQSBub2RlIGlzIHNjcm9sbGFibGUgaWY6XG4gKiAgLSBpdCBpcyBhbGxvd2VkIHRvIHNjcm9sbCB2aWEgQ1NTICgnb3ZlcmZsb3cteScgbm90IHZpc2libGUgb3IgaGlkZGVuKTtcbiAqICAtIGFuZCBpdHMgY2hpbGRyZW4vY29udGVudCBhcmUgXCJiaWdnZXJcIiB0aGFuIHRoZSBub2RlJ3MgYm94IGhlaWdodC5cbiAqXG4gKiBUaGUgcm9vdCBvZiB0aGUgZG9jdW1lbnQgYWx3YXlzIHNjcm9sbHMgYnkgZGVmYXVsdC5cbiAqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBub2RlIEFueSBET00gZWxlbWVudC5cbiAqIEByZXR1cm4ge0hUTUxFbGVtZW50fSBUaGUgc2Nyb2xsIHBhcmVudCBlbGVtZW50LlxuICovXG5cblxuZnVuY3Rpb24gZ2V0U2Nyb2xsUGFyZW50KG5vZGUpIHtcbiAgdmFyIHBhcmVudCA9IG5vZGUucGFyZW50RWxlbWVudDtcbiAgaWYgKHBhcmVudCA9PSBudWxsKSByZXR1cm4gZ2V0U2Nyb2xsaW5nUm9vdCgpO1xuXG4gIHZhciBfd2luZG93JGdldENvbXB1dGVkU3QgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShwYXJlbnQpLFxuICAgICAgb3ZlcmZsb3dZID0gX3dpbmRvdyRnZXRDb21wdXRlZFN0Lm92ZXJmbG93WTtcblxuICB2YXIgY2FuU2Nyb2xsID0gb3ZlcmZsb3dZICE9PSAndmlzaWJsZScgJiYgb3ZlcmZsb3dZICE9PSAnaGlkZGVuJztcblxuICBpZiAoY2FuU2Nyb2xsICYmIHBhcmVudC5zY3JvbGxIZWlnaHQgPiBwYXJlbnQuY2xpZW50SGVpZ2h0KSB7XG4gICAgcmV0dXJuIHBhcmVudDtcbiAgfVxuXG4gIHJldHVybiBnZXRTY3JvbGxQYXJlbnQocGFyZW50KTtcbn1cbi8qKlxuICogUmVjdXJzaXZlbHkgdHJhdmVyc2VzIHRoZSB0cmVlIHVwd2FyZHMgZnJvbSB0aGUgZ2l2ZW4gbm9kZSwgY2FwdHVyaW5nIGFsbFxuICogYW5jZXN0b3Igbm9kZXMgdGhhdCBzY3JvbGwgYWxvbmcgd2l0aCB0aGVpciBjdXJyZW50ICdvdmVyZmxvdy15JyBDU1NcbiAqIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IG5vZGUgQW55IERPTSBlbGVtZW50LlxuICogQHBhcmFtIHtNYXA8SFRNTEVsZW1lbnQsc3RyaW5nPn0gW2FjY10gQWNjdW11bGF0b3IgbWFwLlxuICogQHJldHVybiB7TWFwPEhUTUxFbGVtZW50LHN0cmluZz59IE1hcCBvZiBhbmNlc3RvcnMgd2l0aCB0aGVpciAnb3ZlcmZsb3cteScgdmFsdWUuXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRTY3JvbGxBbmNlc3RvcnNPdmVyZmxvd1kobm9kZSkge1xuICB2YXIgYWNjID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBuZXcgTWFwKCk7XG4gIHZhciBzY3JvbGxpbmdSb290ID0gZ2V0U2Nyb2xsaW5nUm9vdCgpO1xuICB2YXIgc2Nyb2xsUGFyZW50ID0gZ2V0U2Nyb2xsUGFyZW50KG5vZGUpO1xuICBhY2Muc2V0KHNjcm9sbFBhcmVudCwgc2Nyb2xsUGFyZW50LnN0eWxlLm92ZXJmbG93WSk7XG4gIGlmIChzY3JvbGxQYXJlbnQgPT09IHNjcm9sbGluZ1Jvb3QpIHJldHVybiBhY2M7XG4gIHJldHVybiBnZXRTY3JvbGxBbmNlc3RvcnNPdmVyZmxvd1koc2Nyb2xsUGFyZW50LCBhY2MpO1xufVxuLyoqXG4gKiBEaXNhYmxpbmcgdGhlIHNjcm9sbCBvbiBhIG5vZGUgaW52b2x2ZXMgZmluZGluZyBhbGwgdGhlIHNjcm9sbGFibGUgYW5jZXN0b3JzXG4gKiBhbmQgc2V0IHRoZWlyICdvdmVyZmxvdy15JyBDU1MgcHJvcGVydHkgdG8gJ2hpZGRlbicuIFdoZW4gYWxsIGFuY2VzdG9ycyBoYXZlXG4gKiAnb3ZlcmZsb3cteTogaGlkZGVuJyAodXAgdG8gdGhlIGRvY3VtZW50IGVsZW1lbnQpIHRoZXJlIGlzIG5vIHNjcm9sbFxuICogY29udGFpbmVyLCB0aHVzIGFsbCB0aGUgc2Nyb2xsIG91dHNpZGUgb2YgdGhlIG5vZGUgaXMgZGlzYWJsZWQuIEluIG9yZGVyIHRvXG4gKiBlbmFibGUgc2Nyb2xsIGFnYWluLCB3ZSBzdG9yZSB0aGUgcHJldmlvdXMgdmFsdWUgb2YgdGhlICdvdmVyZmxvdy15JyBmb3JcbiAqIGV2ZXJ5IGFuY2VzdG9yIGluIGEgY2xvc3VyZSBhbmQgcmVzZXQgaXQgYmFjay5cbiAqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBub2RlIEFueSBET00gZWxlbWVudC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGRpc2FibGVTY3JvbGwobm9kZSkge1xuICB2YXIgc2Nyb2xsQW5jZXN0b3JzT3ZlcmZsb3dZID0gZ2V0U2Nyb2xsQW5jZXN0b3JzT3ZlcmZsb3dZKG5vZGUpO1xuXG4gIHZhciB0b2dnbGUgPSBmdW5jdGlvbiB0b2dnbGUob24pIHtcbiAgICByZXR1cm4gc2Nyb2xsQW5jZXN0b3JzT3ZlcmZsb3dZLmZvckVhY2goZnVuY3Rpb24gKG92ZXJmbG93WSwgYW5jZXN0b3IpIHtcbiAgICAgIGFuY2VzdG9yLnN0eWxlLnNldFByb3BlcnR5KCdvdmVyZmxvdy15Jywgb24gPyAnaGlkZGVuJyA6IG92ZXJmbG93WSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdG9nZ2xlKHRydWUpO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0b2dnbGUoZmFsc2UpO1xuICB9O1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX2VuenltZVNoYWxsb3dFcXVhbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImVuenltZS1zaGFsbG93LWVxdWFsXCIpKTtcblxudmFyIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpO1xuXG52YXIgX2luaGVyaXRzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9tb21lbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJtb21lbnRcIikpO1xuXG52YXIgX3JlYWN0TW9tZW50UHJvcHR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3QtbW9tZW50LXByb3B0eXBlc1wiKSk7XG5cbnZhciBfYWlyYm5iUHJvcFR5cGVzID0gcmVxdWlyZShcImFpcmJuYi1wcm9wLXR5cGVzXCIpO1xuXG52YXIgX09wZW5EaXJlY3Rpb25TaGFwZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3NoYXBlcy9PcGVuRGlyZWN0aW9uU2hhcGVcIikpO1xuXG52YXIgX2RlZmF1bHRQaHJhc2VzID0gcmVxdWlyZShcIi4uL2RlZmF1bHRQaHJhc2VzXCIpO1xuXG52YXIgX2dldFBocmFzZVByb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2dldFBocmFzZVByb3BUeXBlc1wiKSk7XG5cbnZhciBfRGF0ZVJhbmdlUGlja2VySW5wdXQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0RhdGVSYW5nZVBpY2tlcklucHV0XCIpKTtcblxudmFyIF9JY29uUG9zaXRpb25TaGFwZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3NoYXBlcy9JY29uUG9zaXRpb25TaGFwZVwiKSk7XG5cbnZhciBfRGlzYWJsZWRTaGFwZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3NoYXBlcy9EaXNhYmxlZFNoYXBlXCIpKTtcblxudmFyIF90b01vbWVudE9iamVjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL3RvTW9tZW50T2JqZWN0XCIpKTtcblxudmFyIF90b0xvY2FsaXplZERhdGVTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy90b0xvY2FsaXplZERhdGVTdHJpbmdcIikpO1xuXG52YXIgX2lzSW5jbHVzaXZlbHlBZnRlckRheSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2lzSW5jbHVzaXZlbHlBZnRlckRheVwiKSk7XG5cbnZhciBfaXNCZWZvcmVEYXkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9pc0JlZm9yZURheVwiKSk7XG5cbnZhciBfY29uc3RhbnRzID0gcmVxdWlyZShcIi4uL2NvbnN0YW50c1wiKTtcblxudmFyIHByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfYWlyYm5iUHJvcFR5cGVzLmZvcmJpZEV4dHJhUHJvcHMpKHtcbiAgY2hpbGRyZW46IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm5vZGUsXG4gIHN0YXJ0RGF0ZTogX3JlYWN0TW9tZW50UHJvcHR5cGVzW1wiZGVmYXVsdFwiXS5tb21lbnRPYmosXG4gIHN0YXJ0RGF0ZUlkOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcsXG4gIHN0YXJ0RGF0ZVBsYWNlaG9sZGVyVGV4dDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLFxuICBpc1N0YXJ0RGF0ZUZvY3VzZWQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIHN0YXJ0RGF0ZUFyaWFMYWJlbDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLFxuICBlbmREYXRlOiBfcmVhY3RNb21lbnRQcm9wdHlwZXNbXCJkZWZhdWx0XCJdLm1vbWVudE9iaixcbiAgZW5kRGF0ZUlkOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcsXG4gIGVuZERhdGVQbGFjZWhvbGRlclRleHQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZyxcbiAgaXNFbmREYXRlRm9jdXNlZDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgZW5kRGF0ZUFyaWFMYWJlbDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLFxuICBzY3JlZW5SZWFkZXJNZXNzYWdlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcsXG4gIHNob3dDbGVhckRhdGVzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBzaG93Q2FyZXQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIHNob3dEZWZhdWx0SW5wdXRJY29uOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBpbnB1dEljb25Qb3NpdGlvbjogX0ljb25Qb3NpdGlvblNoYXBlW1wiZGVmYXVsdFwiXSxcbiAgZGlzYWJsZWQ6IF9EaXNhYmxlZFNoYXBlW1wiZGVmYXVsdFwiXSxcbiAgcmVxdWlyZWQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIHJlYWRPbmx5OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBvcGVuRGlyZWN0aW9uOiBfT3BlbkRpcmVjdGlvblNoYXBlW1wiZGVmYXVsdFwiXSxcbiAgbm9Cb3JkZXI6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIGJsb2NrOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBzbWFsbDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgcmVndWxhcjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgdmVydGljYWxTcGFjaW5nOiBfYWlyYm5iUHJvcFR5cGVzLm5vbk5lZ2F0aXZlSW50ZWdlcixcbiAga2VlcE9wZW5PbkRhdGVTZWxlY3Q6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIHJlb3BlblBpY2tlck9uQ2xlYXJEYXRlczogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgd2l0aEZ1bGxTY3JlZW5Qb3J0YWw6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIG1pbmltdW1OaWdodHM6IF9haXJibmJQcm9wVHlwZXMubm9uTmVnYXRpdmVJbnRlZ2VyLFxuICBpc091dHNpZGVSYW5nZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgZGlzcGxheUZvcm1hdDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ub25lT2ZUeXBlKFtfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcsIF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmNdKSxcbiAgb25Gb2N1c0NoYW5nZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgb25DbG9zZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgb25EYXRlc0NoYW5nZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgb25LZXlEb3duQXJyb3dEb3duOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvbktleURvd25RdWVzdGlvbk1hcms6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIGN1c3RvbUlucHV0SWNvbjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubm9kZSxcbiAgY3VzdG9tQXJyb3dJY29uOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ub2RlLFxuICBjdXN0b21DbG9zZUljb246IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm5vZGUsXG4gIC8vIGFjY2Vzc2liaWxpdHlcbiAgaXNGb2N1c2VkOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICAvLyBpMThuXG4gIHBocmFzZXM6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnNoYXBlKCgwLCBfZ2V0UGhyYXNlUHJvcFR5cGVzW1wiZGVmYXVsdFwiXSkoX2RlZmF1bHRQaHJhc2VzLkRhdGVSYW5nZVBpY2tlcklucHV0UGhyYXNlcykpLFxuICBpc1JUTDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbFxufSkgOiB7fTtcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGNoaWxkcmVuOiBudWxsLFxuICBzdGFydERhdGU6IG51bGwsXG4gIHN0YXJ0RGF0ZUlkOiBfY29uc3RhbnRzLlNUQVJUX0RBVEUsXG4gIHN0YXJ0RGF0ZVBsYWNlaG9sZGVyVGV4dDogJ1N0YXJ0IERhdGUnLFxuICBpc1N0YXJ0RGF0ZUZvY3VzZWQ6IGZhbHNlLFxuICBzdGFydERhdGVBcmlhTGFiZWw6IHVuZGVmaW5lZCxcbiAgZW5kRGF0ZTogbnVsbCxcbiAgZW5kRGF0ZUlkOiBfY29uc3RhbnRzLkVORF9EQVRFLFxuICBlbmREYXRlUGxhY2Vob2xkZXJUZXh0OiAnRW5kIERhdGUnLFxuICBpc0VuZERhdGVGb2N1c2VkOiBmYWxzZSxcbiAgZW5kRGF0ZUFyaWFMYWJlbDogdW5kZWZpbmVkLFxuICBzY3JlZW5SZWFkZXJNZXNzYWdlOiAnJyxcbiAgc2hvd0NsZWFyRGF0ZXM6IGZhbHNlLFxuICBzaG93Q2FyZXQ6IGZhbHNlLFxuICBzaG93RGVmYXVsdElucHV0SWNvbjogZmFsc2UsXG4gIGlucHV0SWNvblBvc2l0aW9uOiBfY29uc3RhbnRzLklDT05fQkVGT1JFX1BPU0lUSU9OLFxuICBkaXNhYmxlZDogZmFsc2UsXG4gIHJlcXVpcmVkOiBmYWxzZSxcbiAgcmVhZE9ubHk6IGZhbHNlLFxuICBvcGVuRGlyZWN0aW9uOiBfY29uc3RhbnRzLk9QRU5fRE9XTixcbiAgbm9Cb3JkZXI6IGZhbHNlLFxuICBibG9jazogZmFsc2UsXG4gIHNtYWxsOiBmYWxzZSxcbiAgcmVndWxhcjogZmFsc2UsXG4gIHZlcnRpY2FsU3BhY2luZzogdW5kZWZpbmVkLFxuICBrZWVwT3Blbk9uRGF0ZVNlbGVjdDogZmFsc2UsXG4gIHJlb3BlblBpY2tlck9uQ2xlYXJEYXRlczogZmFsc2UsXG4gIHdpdGhGdWxsU2NyZWVuUG9ydGFsOiBmYWxzZSxcbiAgbWluaW11bU5pZ2h0czogMSxcbiAgaXNPdXRzaWRlUmFuZ2U6IGZ1bmN0aW9uIGlzT3V0c2lkZVJhbmdlKGRheSkge1xuICAgIHJldHVybiAhKDAsIF9pc0luY2x1c2l2ZWx5QWZ0ZXJEYXlbXCJkZWZhdWx0XCJdKShkYXksICgwLCBfbW9tZW50W1wiZGVmYXVsdFwiXSkoKSk7XG4gIH0sXG4gIGRpc3BsYXlGb3JtYXQ6IGZ1bmN0aW9uIGRpc3BsYXlGb3JtYXQoKSB7XG4gICAgcmV0dXJuIF9tb21lbnRbXCJkZWZhdWx0XCJdLmxvY2FsZURhdGEoKS5sb25nRGF0ZUZvcm1hdCgnTCcpO1xuICB9LFxuICBvbkZvY3VzQ2hhbmdlOiBmdW5jdGlvbiBvbkZvY3VzQ2hhbmdlKCkge30sXG4gIG9uQ2xvc2U6IGZ1bmN0aW9uIG9uQ2xvc2UoKSB7fSxcbiAgb25EYXRlc0NoYW5nZTogZnVuY3Rpb24gb25EYXRlc0NoYW5nZSgpIHt9LFxuICBvbktleURvd25BcnJvd0Rvd246IGZ1bmN0aW9uIG9uS2V5RG93bkFycm93RG93bigpIHt9LFxuICBvbktleURvd25RdWVzdGlvbk1hcms6IGZ1bmN0aW9uIG9uS2V5RG93blF1ZXN0aW9uTWFyaygpIHt9LFxuICBjdXN0b21JbnB1dEljb246IG51bGwsXG4gIGN1c3RvbUFycm93SWNvbjogbnVsbCxcbiAgY3VzdG9tQ2xvc2VJY29uOiBudWxsLFxuICAvLyBhY2Nlc3NpYmlsaXR5XG4gIGlzRm9jdXNlZDogZmFsc2UsXG4gIC8vIGkxOG5cbiAgcGhyYXNlczogX2RlZmF1bHRQaHJhc2VzLkRhdGVSYW5nZVBpY2tlcklucHV0UGhyYXNlcyxcbiAgaXNSVEw6IGZhbHNlXG59O1xuXG52YXIgRGF0ZVJhbmdlUGlja2VySW5wdXRDb250cm9sbGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfcmVmKSB7XG4gICgwLCBfaW5oZXJpdHNMb29zZTJbXCJkZWZhdWx0XCJdKShEYXRlUmFuZ2VQaWNrZXJJbnB1dENvbnRyb2xsZXIsIF9yZWYpO1xuICB2YXIgX3Byb3RvID0gRGF0ZVJhbmdlUGlja2VySW5wdXRDb250cm9sbGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG9bIV9yZWFjdFtcImRlZmF1bHRcIl0uUHVyZUNvbXBvbmVudCAmJiBcInNob3VsZENvbXBvbmVudFVwZGF0ZVwiXSA9IGZ1bmN0aW9uIChuZXh0UHJvcHMsIG5leHRTdGF0ZSkge1xuICAgIHJldHVybiAhKDAsIF9lbnp5bWVTaGFsbG93RXF1YWxbXCJkZWZhdWx0XCJdKSh0aGlzLnByb3BzLCBuZXh0UHJvcHMpIHx8ICEoMCwgX2VuenltZVNoYWxsb3dFcXVhbFtcImRlZmF1bHRcIl0pKHRoaXMuc3RhdGUsIG5leHRTdGF0ZSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gRGF0ZVJhbmdlUGlja2VySW5wdXRDb250cm9sbGVyKHByb3BzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfcmVmLmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XG4gICAgX3RoaXMub25DbGVhckZvY3VzID0gX3RoaXMub25DbGVhckZvY3VzLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5vblN0YXJ0RGF0ZUNoYW5nZSA9IF90aGlzLm9uU3RhcnREYXRlQ2hhbmdlLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5vblN0YXJ0RGF0ZUZvY3VzID0gX3RoaXMub25TdGFydERhdGVGb2N1cy5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgX3RoaXMub25FbmREYXRlQ2hhbmdlID0gX3RoaXMub25FbmREYXRlQ2hhbmdlLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5vbkVuZERhdGVGb2N1cyA9IF90aGlzLm9uRW5kRGF0ZUZvY3VzLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5jbGVhckRhdGVzID0gX3RoaXMuY2xlYXJEYXRlcy5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX3Byb3RvLm9uQ2xlYXJGb2N1cyA9IGZ1bmN0aW9uIG9uQ2xlYXJGb2N1cygpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBvbkZvY3VzQ2hhbmdlID0gX3RoaXMkcHJvcHMub25Gb2N1c0NoYW5nZSxcbiAgICAgICAgb25DbG9zZSA9IF90aGlzJHByb3BzLm9uQ2xvc2UsXG4gICAgICAgIHN0YXJ0RGF0ZSA9IF90aGlzJHByb3BzLnN0YXJ0RGF0ZSxcbiAgICAgICAgZW5kRGF0ZSA9IF90aGlzJHByb3BzLmVuZERhdGU7XG4gICAgb25Gb2N1c0NoYW5nZShudWxsKTtcbiAgICBvbkNsb3NlKHtcbiAgICAgIHN0YXJ0RGF0ZTogc3RhcnREYXRlLFxuICAgICAgZW5kRGF0ZTogZW5kRGF0ZVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5vbkVuZERhdGVDaGFuZ2UgPSBmdW5jdGlvbiBvbkVuZERhdGVDaGFuZ2UoZW5kRGF0ZVN0cmluZykge1xuICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICBzdGFydERhdGUgPSBfdGhpcyRwcm9wczIuc3RhcnREYXRlLFxuICAgICAgICBpc091dHNpZGVSYW5nZSA9IF90aGlzJHByb3BzMi5pc091dHNpZGVSYW5nZSxcbiAgICAgICAgbWluaW11bU5pZ2h0cyA9IF90aGlzJHByb3BzMi5taW5pbXVtTmlnaHRzLFxuICAgICAgICBrZWVwT3Blbk9uRGF0ZVNlbGVjdCA9IF90aGlzJHByb3BzMi5rZWVwT3Blbk9uRGF0ZVNlbGVjdCxcbiAgICAgICAgb25EYXRlc0NoYW5nZSA9IF90aGlzJHByb3BzMi5vbkRhdGVzQ2hhbmdlO1xuICAgIHZhciBlbmREYXRlID0gKDAsIF90b01vbWVudE9iamVjdFtcImRlZmF1bHRcIl0pKGVuZERhdGVTdHJpbmcsIHRoaXMuZ2V0RGlzcGxheUZvcm1hdCgpKTtcbiAgICB2YXIgaXNFbmREYXRlVmFsaWQgPSBlbmREYXRlICYmICFpc091dHNpZGVSYW5nZShlbmREYXRlKSAmJiAhKHN0YXJ0RGF0ZSAmJiAoMCwgX2lzQmVmb3JlRGF5W1wiZGVmYXVsdFwiXSkoZW5kRGF0ZSwgc3RhcnREYXRlLmNsb25lKCkuYWRkKG1pbmltdW1OaWdodHMsICdkYXlzJykpKTtcblxuICAgIGlmIChpc0VuZERhdGVWYWxpZCkge1xuICAgICAgb25EYXRlc0NoYW5nZSh7XG4gICAgICAgIHN0YXJ0RGF0ZTogc3RhcnREYXRlLFxuICAgICAgICBlbmREYXRlOiBlbmREYXRlXG4gICAgICB9KTtcbiAgICAgIGlmICgha2VlcE9wZW5PbkRhdGVTZWxlY3QpIHRoaXMub25DbGVhckZvY3VzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9uRGF0ZXNDaGFuZ2Uoe1xuICAgICAgICBzdGFydERhdGU6IHN0YXJ0RGF0ZSxcbiAgICAgICAgZW5kRGF0ZTogbnVsbFxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5vbkVuZERhdGVGb2N1cyA9IGZ1bmN0aW9uIG9uRW5kRGF0ZUZvY3VzKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczMgPSB0aGlzLnByb3BzLFxuICAgICAgICBzdGFydERhdGUgPSBfdGhpcyRwcm9wczMuc3RhcnREYXRlLFxuICAgICAgICBvbkZvY3VzQ2hhbmdlID0gX3RoaXMkcHJvcHMzLm9uRm9jdXNDaGFuZ2UsXG4gICAgICAgIHdpdGhGdWxsU2NyZWVuUG9ydGFsID0gX3RoaXMkcHJvcHMzLndpdGhGdWxsU2NyZWVuUG9ydGFsLFxuICAgICAgICBkaXNhYmxlZCA9IF90aGlzJHByb3BzMy5kaXNhYmxlZDtcblxuICAgIGlmICghc3RhcnREYXRlICYmIHdpdGhGdWxsU2NyZWVuUG9ydGFsICYmICghZGlzYWJsZWQgfHwgZGlzYWJsZWQgPT09IF9jb25zdGFudHMuRU5EX0RBVEUpKSB7XG4gICAgICAvLyBXaGVuIHRoZSBkYXRlcGlja2VyIGlzIGZ1bGwgc2NyZWVuLCB3ZSBuZXZlciB3YW50IHRvIGZvY3VzIHRoZSBlbmQgZGF0ZSBmaXJzdFxuICAgICAgLy8gYmVjYXVzZSB0aGVyZSdzIG5vIGluZGljYXRpb24gdGhhdCB0aGF0IGlzIHRoZSBjYXNlIG9uY2UgdGhlIGRhdGVwaWNrZXIgaXMgb3BlbiBhbmQgaXRcbiAgICAgIC8vIG1pZ2h0IGNvbmZ1c2UgdGhlIHVzZXJcbiAgICAgIG9uRm9jdXNDaGFuZ2UoX2NvbnN0YW50cy5TVEFSVF9EQVRFKTtcbiAgICB9IGVsc2UgaWYgKCFkaXNhYmxlZCB8fCBkaXNhYmxlZCA9PT0gX2NvbnN0YW50cy5TVEFSVF9EQVRFKSB7XG4gICAgICBvbkZvY3VzQ2hhbmdlKF9jb25zdGFudHMuRU5EX0RBVEUpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ub25TdGFydERhdGVDaGFuZ2UgPSBmdW5jdGlvbiBvblN0YXJ0RGF0ZUNoYW5nZShzdGFydERhdGVTdHJpbmcpIHtcbiAgICB2YXIgZW5kRGF0ZSA9IHRoaXMucHJvcHMuZW5kRGF0ZTtcbiAgICB2YXIgX3RoaXMkcHJvcHM0ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgaXNPdXRzaWRlUmFuZ2UgPSBfdGhpcyRwcm9wczQuaXNPdXRzaWRlUmFuZ2UsXG4gICAgICAgIG1pbmltdW1OaWdodHMgPSBfdGhpcyRwcm9wczQubWluaW11bU5pZ2h0cyxcbiAgICAgICAgb25EYXRlc0NoYW5nZSA9IF90aGlzJHByb3BzNC5vbkRhdGVzQ2hhbmdlLFxuICAgICAgICBvbkZvY3VzQ2hhbmdlID0gX3RoaXMkcHJvcHM0Lm9uRm9jdXNDaGFuZ2UsXG4gICAgICAgIGRpc2FibGVkID0gX3RoaXMkcHJvcHM0LmRpc2FibGVkO1xuICAgIHZhciBzdGFydERhdGUgPSAoMCwgX3RvTW9tZW50T2JqZWN0W1wiZGVmYXVsdFwiXSkoc3RhcnREYXRlU3RyaW5nLCB0aGlzLmdldERpc3BsYXlGb3JtYXQoKSk7XG4gICAgdmFyIGlzRW5kRGF0ZUJlZm9yZVN0YXJ0RGF0ZSA9IHN0YXJ0RGF0ZSAmJiAoMCwgX2lzQmVmb3JlRGF5W1wiZGVmYXVsdFwiXSkoZW5kRGF0ZSwgc3RhcnREYXRlLmNsb25lKCkuYWRkKG1pbmltdW1OaWdodHMsICdkYXlzJykpO1xuICAgIHZhciBpc1N0YXJ0RGF0ZVZhbGlkID0gc3RhcnREYXRlICYmICFpc091dHNpZGVSYW5nZShzdGFydERhdGUpICYmICEoZGlzYWJsZWQgPT09IF9jb25zdGFudHMuRU5EX0RBVEUgJiYgaXNFbmREYXRlQmVmb3JlU3RhcnREYXRlKTtcblxuICAgIGlmIChpc1N0YXJ0RGF0ZVZhbGlkKSB7XG4gICAgICBpZiAoaXNFbmREYXRlQmVmb3JlU3RhcnREYXRlKSB7XG4gICAgICAgIGVuZERhdGUgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBvbkRhdGVzQ2hhbmdlKHtcbiAgICAgICAgc3RhcnREYXRlOiBzdGFydERhdGUsXG4gICAgICAgIGVuZERhdGU6IGVuZERhdGVcbiAgICAgIH0pO1xuICAgICAgb25Gb2N1c0NoYW5nZShfY29uc3RhbnRzLkVORF9EQVRFKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb25EYXRlc0NoYW5nZSh7XG4gICAgICAgIHN0YXJ0RGF0ZTogbnVsbCxcbiAgICAgICAgZW5kRGF0ZTogZW5kRGF0ZVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5vblN0YXJ0RGF0ZUZvY3VzID0gZnVuY3Rpb24gb25TdGFydERhdGVGb2N1cygpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHM1ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgZGlzYWJsZWQgPSBfdGhpcyRwcm9wczUuZGlzYWJsZWQsXG4gICAgICAgIG9uRm9jdXNDaGFuZ2UgPSBfdGhpcyRwcm9wczUub25Gb2N1c0NoYW5nZTtcblxuICAgIGlmICghZGlzYWJsZWQgfHwgZGlzYWJsZWQgPT09IF9jb25zdGFudHMuRU5EX0RBVEUpIHtcbiAgICAgIG9uRm9jdXNDaGFuZ2UoX2NvbnN0YW50cy5TVEFSVF9EQVRFKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmdldERpc3BsYXlGb3JtYXQgPSBmdW5jdGlvbiBnZXREaXNwbGF5Rm9ybWF0KCkge1xuICAgIHZhciBkaXNwbGF5Rm9ybWF0ID0gdGhpcy5wcm9wcy5kaXNwbGF5Rm9ybWF0O1xuICAgIHJldHVybiB0eXBlb2YgZGlzcGxheUZvcm1hdCA9PT0gJ3N0cmluZycgPyBkaXNwbGF5Rm9ybWF0IDogZGlzcGxheUZvcm1hdCgpO1xuICB9O1xuXG4gIF9wcm90by5nZXREYXRlU3RyaW5nID0gZnVuY3Rpb24gZ2V0RGF0ZVN0cmluZyhkYXRlKSB7XG4gICAgdmFyIGRpc3BsYXlGb3JtYXQgPSB0aGlzLmdldERpc3BsYXlGb3JtYXQoKTtcblxuICAgIGlmIChkYXRlICYmIGRpc3BsYXlGb3JtYXQpIHtcbiAgICAgIHJldHVybiBkYXRlICYmIGRhdGUuZm9ybWF0KGRpc3BsYXlGb3JtYXQpO1xuICAgIH1cblxuICAgIHJldHVybiAoMCwgX3RvTG9jYWxpemVkRGF0ZVN0cmluZ1tcImRlZmF1bHRcIl0pKGRhdGUpO1xuICB9O1xuXG4gIF9wcm90by5jbGVhckRhdGVzID0gZnVuY3Rpb24gY2xlYXJEYXRlcygpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHM2ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgb25EYXRlc0NoYW5nZSA9IF90aGlzJHByb3BzNi5vbkRhdGVzQ2hhbmdlLFxuICAgICAgICByZW9wZW5QaWNrZXJPbkNsZWFyRGF0ZXMgPSBfdGhpcyRwcm9wczYucmVvcGVuUGlja2VyT25DbGVhckRhdGVzLFxuICAgICAgICBvbkZvY3VzQ2hhbmdlID0gX3RoaXMkcHJvcHM2Lm9uRm9jdXNDaGFuZ2U7XG4gICAgb25EYXRlc0NoYW5nZSh7XG4gICAgICBzdGFydERhdGU6IG51bGwsXG4gICAgICBlbmREYXRlOiBudWxsXG4gICAgfSk7XG5cbiAgICBpZiAocmVvcGVuUGlja2VyT25DbGVhckRhdGVzKSB7XG4gICAgICBvbkZvY3VzQ2hhbmdlKF9jb25zdGFudHMuU1RBUlRfREFURSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzNyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHM3LmNoaWxkcmVuLFxuICAgICAgICBzdGFydERhdGUgPSBfdGhpcyRwcm9wczcuc3RhcnREYXRlLFxuICAgICAgICBzdGFydERhdGVJZCA9IF90aGlzJHByb3BzNy5zdGFydERhdGVJZCxcbiAgICAgICAgc3RhcnREYXRlUGxhY2Vob2xkZXJUZXh0ID0gX3RoaXMkcHJvcHM3LnN0YXJ0RGF0ZVBsYWNlaG9sZGVyVGV4dCxcbiAgICAgICAgaXNTdGFydERhdGVGb2N1c2VkID0gX3RoaXMkcHJvcHM3LmlzU3RhcnREYXRlRm9jdXNlZCxcbiAgICAgICAgc3RhcnREYXRlQXJpYUxhYmVsID0gX3RoaXMkcHJvcHM3LnN0YXJ0RGF0ZUFyaWFMYWJlbCxcbiAgICAgICAgZW5kRGF0ZSA9IF90aGlzJHByb3BzNy5lbmREYXRlLFxuICAgICAgICBlbmREYXRlSWQgPSBfdGhpcyRwcm9wczcuZW5kRGF0ZUlkLFxuICAgICAgICBlbmREYXRlUGxhY2Vob2xkZXJUZXh0ID0gX3RoaXMkcHJvcHM3LmVuZERhdGVQbGFjZWhvbGRlclRleHQsXG4gICAgICAgIGVuZERhdGVBcmlhTGFiZWwgPSBfdGhpcyRwcm9wczcuZW5kRGF0ZUFyaWFMYWJlbCxcbiAgICAgICAgaXNFbmREYXRlRm9jdXNlZCA9IF90aGlzJHByb3BzNy5pc0VuZERhdGVGb2N1c2VkLFxuICAgICAgICBzY3JlZW5SZWFkZXJNZXNzYWdlID0gX3RoaXMkcHJvcHM3LnNjcmVlblJlYWRlck1lc3NhZ2UsXG4gICAgICAgIHNob3dDbGVhckRhdGVzID0gX3RoaXMkcHJvcHM3LnNob3dDbGVhckRhdGVzLFxuICAgICAgICBzaG93Q2FyZXQgPSBfdGhpcyRwcm9wczcuc2hvd0NhcmV0LFxuICAgICAgICBzaG93RGVmYXVsdElucHV0SWNvbiA9IF90aGlzJHByb3BzNy5zaG93RGVmYXVsdElucHV0SWNvbixcbiAgICAgICAgaW5wdXRJY29uUG9zaXRpb24gPSBfdGhpcyRwcm9wczcuaW5wdXRJY29uUG9zaXRpb24sXG4gICAgICAgIGN1c3RvbUlucHV0SWNvbiA9IF90aGlzJHByb3BzNy5jdXN0b21JbnB1dEljb24sXG4gICAgICAgIGN1c3RvbUFycm93SWNvbiA9IF90aGlzJHByb3BzNy5jdXN0b21BcnJvd0ljb24sXG4gICAgICAgIGN1c3RvbUNsb3NlSWNvbiA9IF90aGlzJHByb3BzNy5jdXN0b21DbG9zZUljb24sXG4gICAgICAgIGRpc2FibGVkID0gX3RoaXMkcHJvcHM3LmRpc2FibGVkLFxuICAgICAgICByZXF1aXJlZCA9IF90aGlzJHByb3BzNy5yZXF1aXJlZCxcbiAgICAgICAgcmVhZE9ubHkgPSBfdGhpcyRwcm9wczcucmVhZE9ubHksXG4gICAgICAgIG9wZW5EaXJlY3Rpb24gPSBfdGhpcyRwcm9wczcub3BlbkRpcmVjdGlvbixcbiAgICAgICAgaXNGb2N1c2VkID0gX3RoaXMkcHJvcHM3LmlzRm9jdXNlZCxcbiAgICAgICAgcGhyYXNlcyA9IF90aGlzJHByb3BzNy5waHJhc2VzLFxuICAgICAgICBvbktleURvd25BcnJvd0Rvd24gPSBfdGhpcyRwcm9wczcub25LZXlEb3duQXJyb3dEb3duLFxuICAgICAgICBvbktleURvd25RdWVzdGlvbk1hcmsgPSBfdGhpcyRwcm9wczcub25LZXlEb3duUXVlc3Rpb25NYXJrLFxuICAgICAgICBpc1JUTCA9IF90aGlzJHByb3BzNy5pc1JUTCxcbiAgICAgICAgbm9Cb3JkZXIgPSBfdGhpcyRwcm9wczcubm9Cb3JkZXIsXG4gICAgICAgIGJsb2NrID0gX3RoaXMkcHJvcHM3LmJsb2NrLFxuICAgICAgICBzbWFsbCA9IF90aGlzJHByb3BzNy5zbWFsbCxcbiAgICAgICAgcmVndWxhciA9IF90aGlzJHByb3BzNy5yZWd1bGFyLFxuICAgICAgICB2ZXJ0aWNhbFNwYWNpbmcgPSBfdGhpcyRwcm9wczcudmVydGljYWxTcGFjaW5nO1xuICAgIHZhciBzdGFydERhdGVTdHJpbmcgPSB0aGlzLmdldERhdGVTdHJpbmcoc3RhcnREYXRlKTtcbiAgICB2YXIgZW5kRGF0ZVN0cmluZyA9IHRoaXMuZ2V0RGF0ZVN0cmluZyhlbmREYXRlKTtcbiAgICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9EYXRlUmFuZ2VQaWNrZXJJbnB1dFtcImRlZmF1bHRcIl0sIHtcbiAgICAgIHN0YXJ0RGF0ZTogc3RhcnREYXRlU3RyaW5nLFxuICAgICAgc3RhcnREYXRlSWQ6IHN0YXJ0RGF0ZUlkLFxuICAgICAgc3RhcnREYXRlUGxhY2Vob2xkZXJUZXh0OiBzdGFydERhdGVQbGFjZWhvbGRlclRleHQsXG4gICAgICBpc1N0YXJ0RGF0ZUZvY3VzZWQ6IGlzU3RhcnREYXRlRm9jdXNlZCxcbiAgICAgIHN0YXJ0RGF0ZUFyaWFMYWJlbDogc3RhcnREYXRlQXJpYUxhYmVsLFxuICAgICAgZW5kRGF0ZTogZW5kRGF0ZVN0cmluZyxcbiAgICAgIGVuZERhdGVJZDogZW5kRGF0ZUlkLFxuICAgICAgZW5kRGF0ZVBsYWNlaG9sZGVyVGV4dDogZW5kRGF0ZVBsYWNlaG9sZGVyVGV4dCxcbiAgICAgIGlzRW5kRGF0ZUZvY3VzZWQ6IGlzRW5kRGF0ZUZvY3VzZWQsXG4gICAgICBlbmREYXRlQXJpYUxhYmVsOiBlbmREYXRlQXJpYUxhYmVsLFxuICAgICAgaXNGb2N1c2VkOiBpc0ZvY3VzZWQsXG4gICAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgICByZXF1aXJlZDogcmVxdWlyZWQsXG4gICAgICByZWFkT25seTogcmVhZE9ubHksXG4gICAgICBvcGVuRGlyZWN0aW9uOiBvcGVuRGlyZWN0aW9uLFxuICAgICAgc2hvd0NhcmV0OiBzaG93Q2FyZXQsXG4gICAgICBzaG93RGVmYXVsdElucHV0SWNvbjogc2hvd0RlZmF1bHRJbnB1dEljb24sXG4gICAgICBpbnB1dEljb25Qb3NpdGlvbjogaW5wdXRJY29uUG9zaXRpb24sXG4gICAgICBjdXN0b21JbnB1dEljb246IGN1c3RvbUlucHV0SWNvbixcbiAgICAgIGN1c3RvbUFycm93SWNvbjogY3VzdG9tQXJyb3dJY29uLFxuICAgICAgY3VzdG9tQ2xvc2VJY29uOiBjdXN0b21DbG9zZUljb24sXG4gICAgICBwaHJhc2VzOiBwaHJhc2VzLFxuICAgICAgb25TdGFydERhdGVDaGFuZ2U6IHRoaXMub25TdGFydERhdGVDaGFuZ2UsXG4gICAgICBvblN0YXJ0RGF0ZUZvY3VzOiB0aGlzLm9uU3RhcnREYXRlRm9jdXMsXG4gICAgICBvblN0YXJ0RGF0ZVNoaWZ0VGFiOiB0aGlzLm9uQ2xlYXJGb2N1cyxcbiAgICAgIG9uRW5kRGF0ZUNoYW5nZTogdGhpcy5vbkVuZERhdGVDaGFuZ2UsXG4gICAgICBvbkVuZERhdGVGb2N1czogdGhpcy5vbkVuZERhdGVGb2N1cyxcbiAgICAgIHNob3dDbGVhckRhdGVzOiBzaG93Q2xlYXJEYXRlcyxcbiAgICAgIG9uQ2xlYXJEYXRlczogdGhpcy5jbGVhckRhdGVzLFxuICAgICAgc2NyZWVuUmVhZGVyTWVzc2FnZTogc2NyZWVuUmVhZGVyTWVzc2FnZSxcbiAgICAgIG9uS2V5RG93bkFycm93RG93bjogb25LZXlEb3duQXJyb3dEb3duLFxuICAgICAgb25LZXlEb3duUXVlc3Rpb25NYXJrOiBvbktleURvd25RdWVzdGlvbk1hcmssXG4gICAgICBpc1JUTDogaXNSVEwsXG4gICAgICBub0JvcmRlcjogbm9Cb3JkZXIsXG4gICAgICBibG9jazogYmxvY2ssXG4gICAgICBzbWFsbDogc21hbGwsXG4gICAgICByZWd1bGFyOiByZWd1bGFyLFxuICAgICAgdmVydGljYWxTcGFjaW5nOiB2ZXJ0aWNhbFNwYWNpbmdcbiAgICB9LCBjaGlsZHJlbik7XG4gIH07XG5cbiAgcmV0dXJuIERhdGVSYW5nZVBpY2tlcklucHV0Q29udHJvbGxlcjtcbn0oX3JlYWN0W1wiZGVmYXVsdFwiXS5QdXJlQ29tcG9uZW50IHx8IF9yZWFjdFtcImRlZmF1bHRcIl0uQ29tcG9uZW50KTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBEYXRlUmFuZ2VQaWNrZXJJbnB1dENvbnRyb2xsZXI7XG5EYXRlUmFuZ2VQaWNrZXJJbnB1dENvbnRyb2xsZXIucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gcHJvcFR5cGVzIDoge307XG5EYXRlUmFuZ2VQaWNrZXJJbnB1dENvbnRyb2xsZXIuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9haXJibmJQcm9wVHlwZXMgPSByZXF1aXJlKFwiYWlyYm5iLXByb3AtdHlwZXNcIik7XG5cbnZhciBfcmVhY3RXaXRoU3R5bGVzID0gcmVxdWlyZShcInJlYWN0LXdpdGgtc3R5bGVzXCIpO1xuXG52YXIgX2RlZmF1bHRQaHJhc2VzID0gcmVxdWlyZShcIi4uL2RlZmF1bHRQaHJhc2VzXCIpO1xuXG52YXIgX2dldFBocmFzZVByb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2dldFBocmFzZVByb3BUeXBlc1wiKSk7XG5cbnZhciBfbm9mbGlwID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvbm9mbGlwXCIpKTtcblxudmFyIF9PcGVuRGlyZWN0aW9uU2hhcGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zaGFwZXMvT3BlbkRpcmVjdGlvblNoYXBlXCIpKTtcblxudmFyIF9EYXRlSW5wdXQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0RhdGVJbnB1dFwiKSk7XG5cbnZhciBfSWNvblBvc2l0aW9uU2hhcGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zaGFwZXMvSWNvblBvc2l0aW9uU2hhcGVcIikpO1xuXG52YXIgX0Rpc2FibGVkU2hhcGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zaGFwZXMvRGlzYWJsZWRTaGFwZVwiKSk7XG5cbnZhciBfUmlnaHRBcnJvdyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vUmlnaHRBcnJvd1wiKSk7XG5cbnZhciBfTGVmdEFycm93ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9MZWZ0QXJyb3dcIikpO1xuXG52YXIgX0Nsb3NlQnV0dG9uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9DbG9zZUJ1dHRvblwiKSk7XG5cbnZhciBfQ2FsZW5kYXJJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9DYWxlbmRhckljb25cIikpO1xuXG52YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHNcIik7XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7ICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxudmFyIHByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfYWlyYm5iUHJvcFR5cGVzLmZvcmJpZEV4dHJhUHJvcHMpKF9vYmplY3RTcHJlYWQoe30sIF9yZWFjdFdpdGhTdHlsZXMud2l0aFN0eWxlc1Byb3BUeXBlcywge1xuICBjaGlsZHJlbjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubm9kZSxcbiAgc3RhcnREYXRlSWQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZyxcbiAgc3RhcnREYXRlUGxhY2Vob2xkZXJUZXh0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcsXG4gIHN0YXJ0RGF0ZUFyaWFMYWJlbDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLFxuICBzY3JlZW5SZWFkZXJNZXNzYWdlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcsXG4gIGVuZERhdGVJZDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLFxuICBlbmREYXRlUGxhY2Vob2xkZXJUZXh0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcsXG4gIGVuZERhdGVBcmlhTGFiZWw6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZyxcbiAgb25TdGFydERhdGVGb2N1czogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgb25FbmREYXRlRm9jdXM6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIG9uU3RhcnREYXRlQ2hhbmdlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvbkVuZERhdGVDaGFuZ2U6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIG9uU3RhcnREYXRlU2hpZnRUYWI6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIG9uRW5kRGF0ZVRhYjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgb25DbGVhckRhdGVzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvbktleURvd25BcnJvd0Rvd246IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIG9uS2V5RG93blF1ZXN0aW9uTWFyazogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgc3RhcnREYXRlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcsXG4gIGVuZERhdGU6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZyxcbiAgaXNTdGFydERhdGVGb2N1c2VkOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBpc0VuZERhdGVGb2N1c2VkOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBzaG93Q2xlYXJEYXRlczogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgZGlzYWJsZWQ6IF9EaXNhYmxlZFNoYXBlW1wiZGVmYXVsdFwiXSxcbiAgcmVxdWlyZWQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIHJlYWRPbmx5OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBvcGVuRGlyZWN0aW9uOiBfT3BlbkRpcmVjdGlvblNoYXBlW1wiZGVmYXVsdFwiXSxcbiAgc2hvd0NhcmV0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBzaG93RGVmYXVsdElucHV0SWNvbjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgaW5wdXRJY29uUG9zaXRpb246IF9JY29uUG9zaXRpb25TaGFwZVtcImRlZmF1bHRcIl0sXG4gIGN1c3RvbUlucHV0SWNvbjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubm9kZSxcbiAgY3VzdG9tQXJyb3dJY29uOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ub2RlLFxuICBjdXN0b21DbG9zZUljb246IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm5vZGUsXG4gIG5vQm9yZGVyOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBibG9jazogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgc21hbGw6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIHJlZ3VsYXI6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIHZlcnRpY2FsU3BhY2luZzogX2FpcmJuYlByb3BUeXBlcy5ub25OZWdhdGl2ZUludGVnZXIsXG4gIC8vIGFjY2Vzc2liaWxpdHlcbiAgaXNGb2N1c2VkOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICAvLyBkZXNjcmliZXMgYWN0dWFsIERPTSBmb2N1c1xuICAvLyBpMThuXG4gIHBocmFzZXM6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnNoYXBlKCgwLCBfZ2V0UGhyYXNlUHJvcFR5cGVzW1wiZGVmYXVsdFwiXSkoX2RlZmF1bHRQaHJhc2VzLkRhdGVSYW5nZVBpY2tlcklucHV0UGhyYXNlcykpLFxuICBpc1JUTDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbFxufSkpIDoge307XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBjaGlsZHJlbjogbnVsbCxcbiAgc3RhcnREYXRlSWQ6IF9jb25zdGFudHMuU1RBUlRfREFURSxcbiAgZW5kRGF0ZUlkOiBfY29uc3RhbnRzLkVORF9EQVRFLFxuICBzdGFydERhdGVQbGFjZWhvbGRlclRleHQ6ICdTdGFydCBEYXRlJyxcbiAgZW5kRGF0ZVBsYWNlaG9sZGVyVGV4dDogJ0VuZCBEYXRlJyxcbiAgc3RhcnREYXRlQXJpYUxhYmVsOiB1bmRlZmluZWQsXG4gIGVuZERhdGVBcmlhTGFiZWw6IHVuZGVmaW5lZCxcbiAgc2NyZWVuUmVhZGVyTWVzc2FnZTogJycsXG4gIG9uU3RhcnREYXRlRm9jdXM6IGZ1bmN0aW9uIG9uU3RhcnREYXRlRm9jdXMoKSB7fSxcbiAgb25FbmREYXRlRm9jdXM6IGZ1bmN0aW9uIG9uRW5kRGF0ZUZvY3VzKCkge30sXG4gIG9uU3RhcnREYXRlQ2hhbmdlOiBmdW5jdGlvbiBvblN0YXJ0RGF0ZUNoYW5nZSgpIHt9LFxuICBvbkVuZERhdGVDaGFuZ2U6IGZ1bmN0aW9uIG9uRW5kRGF0ZUNoYW5nZSgpIHt9LFxuICBvblN0YXJ0RGF0ZVNoaWZ0VGFiOiBmdW5jdGlvbiBvblN0YXJ0RGF0ZVNoaWZ0VGFiKCkge30sXG4gIG9uRW5kRGF0ZVRhYjogZnVuY3Rpb24gb25FbmREYXRlVGFiKCkge30sXG4gIG9uQ2xlYXJEYXRlczogZnVuY3Rpb24gb25DbGVhckRhdGVzKCkge30sXG4gIG9uS2V5RG93bkFycm93RG93bjogZnVuY3Rpb24gb25LZXlEb3duQXJyb3dEb3duKCkge30sXG4gIG9uS2V5RG93blF1ZXN0aW9uTWFyazogZnVuY3Rpb24gb25LZXlEb3duUXVlc3Rpb25NYXJrKCkge30sXG4gIHN0YXJ0RGF0ZTogJycsXG4gIGVuZERhdGU6ICcnLFxuICBpc1N0YXJ0RGF0ZUZvY3VzZWQ6IGZhbHNlLFxuICBpc0VuZERhdGVGb2N1c2VkOiBmYWxzZSxcbiAgc2hvd0NsZWFyRGF0ZXM6IGZhbHNlLFxuICBkaXNhYmxlZDogZmFsc2UsXG4gIHJlcXVpcmVkOiBmYWxzZSxcbiAgcmVhZE9ubHk6IGZhbHNlLFxuICBvcGVuRGlyZWN0aW9uOiBfY29uc3RhbnRzLk9QRU5fRE9XTixcbiAgc2hvd0NhcmV0OiBmYWxzZSxcbiAgc2hvd0RlZmF1bHRJbnB1dEljb246IGZhbHNlLFxuICBpbnB1dEljb25Qb3NpdGlvbjogX2NvbnN0YW50cy5JQ09OX0JFRk9SRV9QT1NJVElPTixcbiAgY3VzdG9tSW5wdXRJY29uOiBudWxsLFxuICBjdXN0b21BcnJvd0ljb246IG51bGwsXG4gIGN1c3RvbUNsb3NlSWNvbjogbnVsbCxcbiAgbm9Cb3JkZXI6IGZhbHNlLFxuICBibG9jazogZmFsc2UsXG4gIHNtYWxsOiBmYWxzZSxcbiAgcmVndWxhcjogZmFsc2UsXG4gIHZlcnRpY2FsU3BhY2luZzogdW5kZWZpbmVkLFxuICAvLyBhY2Nlc3NpYmlsaXR5XG4gIGlzRm9jdXNlZDogZmFsc2UsXG4gIC8vIGkxOG5cbiAgcGhyYXNlczogX2RlZmF1bHRQaHJhc2VzLkRhdGVSYW5nZVBpY2tlcklucHV0UGhyYXNlcyxcbiAgaXNSVEw6IGZhbHNlXG59O1xuXG5mdW5jdGlvbiBEYXRlUmFuZ2VQaWNrZXJJbnB1dChfcmVmKSB7XG4gIHZhciBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW4sXG4gICAgICBzdGFydERhdGUgPSBfcmVmLnN0YXJ0RGF0ZSxcbiAgICAgIHN0YXJ0RGF0ZUlkID0gX3JlZi5zdGFydERhdGVJZCxcbiAgICAgIHN0YXJ0RGF0ZVBsYWNlaG9sZGVyVGV4dCA9IF9yZWYuc3RhcnREYXRlUGxhY2Vob2xkZXJUZXh0LFxuICAgICAgc2NyZWVuUmVhZGVyTWVzc2FnZSA9IF9yZWYuc2NyZWVuUmVhZGVyTWVzc2FnZSxcbiAgICAgIGlzU3RhcnREYXRlRm9jdXNlZCA9IF9yZWYuaXNTdGFydERhdGVGb2N1c2VkLFxuICAgICAgb25TdGFydERhdGVDaGFuZ2UgPSBfcmVmLm9uU3RhcnREYXRlQ2hhbmdlLFxuICAgICAgb25TdGFydERhdGVGb2N1cyA9IF9yZWYub25TdGFydERhdGVGb2N1cyxcbiAgICAgIG9uU3RhcnREYXRlU2hpZnRUYWIgPSBfcmVmLm9uU3RhcnREYXRlU2hpZnRUYWIsXG4gICAgICBzdGFydERhdGVBcmlhTGFiZWwgPSBfcmVmLnN0YXJ0RGF0ZUFyaWFMYWJlbCxcbiAgICAgIGVuZERhdGUgPSBfcmVmLmVuZERhdGUsXG4gICAgICBlbmREYXRlSWQgPSBfcmVmLmVuZERhdGVJZCxcbiAgICAgIGVuZERhdGVQbGFjZWhvbGRlclRleHQgPSBfcmVmLmVuZERhdGVQbGFjZWhvbGRlclRleHQsXG4gICAgICBpc0VuZERhdGVGb2N1c2VkID0gX3JlZi5pc0VuZERhdGVGb2N1c2VkLFxuICAgICAgb25FbmREYXRlQ2hhbmdlID0gX3JlZi5vbkVuZERhdGVDaGFuZ2UsXG4gICAgICBvbkVuZERhdGVGb2N1cyA9IF9yZWYub25FbmREYXRlRm9jdXMsXG4gICAgICBvbkVuZERhdGVUYWIgPSBfcmVmLm9uRW5kRGF0ZVRhYixcbiAgICAgIGVuZERhdGVBcmlhTGFiZWwgPSBfcmVmLmVuZERhdGVBcmlhTGFiZWwsXG4gICAgICBvbktleURvd25BcnJvd0Rvd24gPSBfcmVmLm9uS2V5RG93bkFycm93RG93bixcbiAgICAgIG9uS2V5RG93blF1ZXN0aW9uTWFyayA9IF9yZWYub25LZXlEb3duUXVlc3Rpb25NYXJrLFxuICAgICAgb25DbGVhckRhdGVzID0gX3JlZi5vbkNsZWFyRGF0ZXMsXG4gICAgICBzaG93Q2xlYXJEYXRlcyA9IF9yZWYuc2hvd0NsZWFyRGF0ZXMsXG4gICAgICBkaXNhYmxlZCA9IF9yZWYuZGlzYWJsZWQsXG4gICAgICByZXF1aXJlZCA9IF9yZWYucmVxdWlyZWQsXG4gICAgICByZWFkT25seSA9IF9yZWYucmVhZE9ubHksXG4gICAgICBzaG93Q2FyZXQgPSBfcmVmLnNob3dDYXJldCxcbiAgICAgIG9wZW5EaXJlY3Rpb24gPSBfcmVmLm9wZW5EaXJlY3Rpb24sXG4gICAgICBzaG93RGVmYXVsdElucHV0SWNvbiA9IF9yZWYuc2hvd0RlZmF1bHRJbnB1dEljb24sXG4gICAgICBpbnB1dEljb25Qb3NpdGlvbiA9IF9yZWYuaW5wdXRJY29uUG9zaXRpb24sXG4gICAgICBjdXN0b21JbnB1dEljb24gPSBfcmVmLmN1c3RvbUlucHV0SWNvbixcbiAgICAgIGN1c3RvbUFycm93SWNvbiA9IF9yZWYuY3VzdG9tQXJyb3dJY29uLFxuICAgICAgY3VzdG9tQ2xvc2VJY29uID0gX3JlZi5jdXN0b21DbG9zZUljb24sXG4gICAgICBpc0ZvY3VzZWQgPSBfcmVmLmlzRm9jdXNlZCxcbiAgICAgIHBocmFzZXMgPSBfcmVmLnBocmFzZXMsXG4gICAgICBpc1JUTCA9IF9yZWYuaXNSVEwsXG4gICAgICBub0JvcmRlciA9IF9yZWYubm9Cb3JkZXIsXG4gICAgICBibG9jayA9IF9yZWYuYmxvY2ssXG4gICAgICB2ZXJ0aWNhbFNwYWNpbmcgPSBfcmVmLnZlcnRpY2FsU3BhY2luZyxcbiAgICAgIHNtYWxsID0gX3JlZi5zbWFsbCxcbiAgICAgIHJlZ3VsYXIgPSBfcmVmLnJlZ3VsYXIsXG4gICAgICBzdHlsZXMgPSBfcmVmLnN0eWxlcztcblxuICB2YXIgY2FsZW5kYXJJY29uID0gY3VzdG9tSW5wdXRJY29uIHx8IF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChfQ2FsZW5kYXJJY29uW1wiZGVmYXVsdFwiXSwgKDAsIF9yZWFjdFdpdGhTdHlsZXMuY3NzKShzdHlsZXMuRGF0ZVJhbmdlUGlja2VySW5wdXRfY2FsZW5kYXJJY29uX3N2ZykpO1xuXG4gIHZhciBhcnJvd0ljb24gPSBjdXN0b21BcnJvd0ljb24gfHwgX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9SaWdodEFycm93W1wiZGVmYXVsdFwiXSwgKDAsIF9yZWFjdFdpdGhTdHlsZXMuY3NzKShzdHlsZXMuRGF0ZVJhbmdlUGlja2VySW5wdXRfYXJyb3dfc3ZnKSk7XG5cbiAgaWYgKGlzUlRMKSBhcnJvd0ljb24gPSBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoX0xlZnRBcnJvd1tcImRlZmF1bHRcIl0sICgwLCBfcmVhY3RXaXRoU3R5bGVzLmNzcykoc3R5bGVzLkRhdGVSYW5nZVBpY2tlcklucHV0X2Fycm93X3N2ZykpO1xuICBpZiAoc21hbGwpIGFycm93SWNvbiA9ICctJztcblxuICB2YXIgY2xvc2VJY29uID0gY3VzdG9tQ2xvc2VJY29uIHx8IF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChfQ2xvc2VCdXR0b25bXCJkZWZhdWx0XCJdLCAoMCwgX3JlYWN0V2l0aFN0eWxlcy5jc3MpKHN0eWxlcy5EYXRlUmFuZ2VQaWNrZXJJbnB1dF9jbGVhckRhdGVzX3N2Zywgc21hbGwgJiYgc3R5bGVzLkRhdGVSYW5nZVBpY2tlcklucHV0X2NsZWFyRGF0ZXNfc3ZnX19zbWFsbCkpO1xuXG4gIHZhciBzY3JlZW5SZWFkZXJTdGFydERhdGVUZXh0ID0gc2NyZWVuUmVhZGVyTWVzc2FnZSB8fCBwaHJhc2VzLmtleWJvYXJkRm9yd2FyZE5hdmlnYXRpb25JbnN0cnVjdGlvbnM7XG4gIHZhciBzY3JlZW5SZWFkZXJFbmREYXRlVGV4dCA9IHNjcmVlblJlYWRlck1lc3NhZ2UgfHwgcGhyYXNlcy5rZXlib2FyZEJhY2t3YXJkTmF2aWdhdGlvbkluc3RydWN0aW9ucztcblxuICB2YXIgaW5wdXRJY29uID0gKHNob3dEZWZhdWx0SW5wdXRJY29uIHx8IGN1c3RvbUlucHV0SWNvbiAhPT0gbnVsbCkgJiYgX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsICgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7fSwgKDAsIF9yZWFjdFdpdGhTdHlsZXMuY3NzKShzdHlsZXMuRGF0ZVJhbmdlUGlja2VySW5wdXRfY2FsZW5kYXJJY29uKSwge1xuICAgIHR5cGU6IFwiYnV0dG9uXCIsXG4gICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgIFwiYXJpYS1sYWJlbFwiOiBwaHJhc2VzLmZvY3VzU3RhcnREYXRlLFxuICAgIG9uQ2xpY2s6IG9uS2V5RG93bkFycm93RG93blxuICB9KSwgY2FsZW5kYXJJY29uKTtcblxuICB2YXIgc3RhcnREYXRlRGlzYWJsZWQgPSBkaXNhYmxlZCA9PT0gX2NvbnN0YW50cy5TVEFSVF9EQVRFIHx8IGRpc2FibGVkID09PSB0cnVlO1xuICB2YXIgZW5kRGF0ZURpc2FibGVkID0gZGlzYWJsZWQgPT09IF9jb25zdGFudHMuRU5EX0RBVEUgfHwgZGlzYWJsZWQgPT09IHRydWU7XG4gIHJldHVybiBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgKDAsIF9yZWFjdFdpdGhTdHlsZXMuY3NzKShzdHlsZXMuRGF0ZVJhbmdlUGlja2VySW5wdXQsIGRpc2FibGVkICYmIHN0eWxlcy5EYXRlUmFuZ2VQaWNrZXJJbnB1dF9fZGlzYWJsZWQsIGlzUlRMICYmIHN0eWxlcy5EYXRlUmFuZ2VQaWNrZXJJbnB1dF9fcnRsLCAhbm9Cb3JkZXIgJiYgc3R5bGVzLkRhdGVSYW5nZVBpY2tlcklucHV0X193aXRoQm9yZGVyLCBibG9jayAmJiBzdHlsZXMuRGF0ZVJhbmdlUGlja2VySW5wdXRfX2Jsb2NrLCBzaG93Q2xlYXJEYXRlcyAmJiBzdHlsZXMuRGF0ZVJhbmdlUGlja2VySW5wdXRfX3Nob3dDbGVhckRhdGVzKSwgaW5wdXRJY29uUG9zaXRpb24gPT09IF9jb25zdGFudHMuSUNPTl9CRUZPUkVfUE9TSVRJT04gJiYgaW5wdXRJY29uLCBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoX0RhdGVJbnB1dFtcImRlZmF1bHRcIl0sIHtcbiAgICBpZDogc3RhcnREYXRlSWQsXG4gICAgcGxhY2Vob2xkZXI6IHN0YXJ0RGF0ZVBsYWNlaG9sZGVyVGV4dCxcbiAgICBhcmlhTGFiZWw6IHN0YXJ0RGF0ZUFyaWFMYWJlbCxcbiAgICBkaXNwbGF5VmFsdWU6IHN0YXJ0RGF0ZSxcbiAgICBzY3JlZW5SZWFkZXJNZXNzYWdlOiBzY3JlZW5SZWFkZXJTdGFydERhdGVUZXh0LFxuICAgIGZvY3VzZWQ6IGlzU3RhcnREYXRlRm9jdXNlZCxcbiAgICBpc0ZvY3VzZWQ6IGlzRm9jdXNlZCxcbiAgICBkaXNhYmxlZDogc3RhcnREYXRlRGlzYWJsZWQsXG4gICAgcmVxdWlyZWQ6IHJlcXVpcmVkLFxuICAgIHJlYWRPbmx5OiByZWFkT25seSxcbiAgICBzaG93Q2FyZXQ6IHNob3dDYXJldCxcbiAgICBvcGVuRGlyZWN0aW9uOiBvcGVuRGlyZWN0aW9uLFxuICAgIG9uQ2hhbmdlOiBvblN0YXJ0RGF0ZUNoYW5nZSxcbiAgICBvbkZvY3VzOiBvblN0YXJ0RGF0ZUZvY3VzLFxuICAgIG9uS2V5RG93blNoaWZ0VGFiOiBvblN0YXJ0RGF0ZVNoaWZ0VGFiLFxuICAgIG9uS2V5RG93bkFycm93RG93bjogb25LZXlEb3duQXJyb3dEb3duLFxuICAgIG9uS2V5RG93blF1ZXN0aW9uTWFyazogb25LZXlEb3duUXVlc3Rpb25NYXJrLFxuICAgIHZlcnRpY2FsU3BhY2luZzogdmVydGljYWxTcGFjaW5nLFxuICAgIHNtYWxsOiBzbWFsbCxcbiAgICByZWd1bGFyOiByZWd1bGFyXG4gIH0pLCBjaGlsZHJlbiwgX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsICgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7fSwgKDAsIF9yZWFjdFdpdGhTdHlsZXMuY3NzKShzdHlsZXMuRGF0ZVJhbmdlUGlja2VySW5wdXRfYXJyb3cpLCB7XG4gICAgXCJhcmlhLWhpZGRlblwiOiBcInRydWVcIixcbiAgICByb2xlOiBcInByZXNlbnRhdGlvblwiXG4gIH0pLCBhcnJvd0ljb24pLCBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoX0RhdGVJbnB1dFtcImRlZmF1bHRcIl0sIHtcbiAgICBpZDogZW5kRGF0ZUlkLFxuICAgIHBsYWNlaG9sZGVyOiBlbmREYXRlUGxhY2Vob2xkZXJUZXh0LFxuICAgIGFyaWFMYWJlbDogZW5kRGF0ZUFyaWFMYWJlbCxcbiAgICBkaXNwbGF5VmFsdWU6IGVuZERhdGUsXG4gICAgc2NyZWVuUmVhZGVyTWVzc2FnZTogc2NyZWVuUmVhZGVyRW5kRGF0ZVRleHQsXG4gICAgZm9jdXNlZDogaXNFbmREYXRlRm9jdXNlZCxcbiAgICBpc0ZvY3VzZWQ6IGlzRm9jdXNlZCxcbiAgICBkaXNhYmxlZDogZW5kRGF0ZURpc2FibGVkLFxuICAgIHJlcXVpcmVkOiByZXF1aXJlZCxcbiAgICByZWFkT25seTogcmVhZE9ubHksXG4gICAgc2hvd0NhcmV0OiBzaG93Q2FyZXQsXG4gICAgb3BlbkRpcmVjdGlvbjogb3BlbkRpcmVjdGlvbixcbiAgICBvbkNoYW5nZTogb25FbmREYXRlQ2hhbmdlLFxuICAgIG9uRm9jdXM6IG9uRW5kRGF0ZUZvY3VzLFxuICAgIG9uS2V5RG93bkFycm93RG93bjogb25LZXlEb3duQXJyb3dEb3duLFxuICAgIG9uS2V5RG93blF1ZXN0aW9uTWFyazogb25LZXlEb3duUXVlc3Rpb25NYXJrLFxuICAgIG9uS2V5RG93blRhYjogb25FbmREYXRlVGFiLFxuICAgIHZlcnRpY2FsU3BhY2luZzogdmVydGljYWxTcGFjaW5nLFxuICAgIHNtYWxsOiBzbWFsbCxcbiAgICByZWd1bGFyOiByZWd1bGFyXG4gIH0pLCBzaG93Q2xlYXJEYXRlcyAmJiBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwgKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKHtcbiAgICB0eXBlOiBcImJ1dHRvblwiLFxuICAgIFwiYXJpYS1sYWJlbFwiOiBwaHJhc2VzLmNsZWFyRGF0ZXNcbiAgfSwgKDAsIF9yZWFjdFdpdGhTdHlsZXMuY3NzKShzdHlsZXMuRGF0ZVJhbmdlUGlja2VySW5wdXRfY2xlYXJEYXRlcywgc21hbGwgJiYgc3R5bGVzLkRhdGVSYW5nZVBpY2tlcklucHV0X2NsZWFyRGF0ZXNfX3NtYWxsLCAhY3VzdG9tQ2xvc2VJY29uICYmIHN0eWxlcy5EYXRlUmFuZ2VQaWNrZXJJbnB1dF9jbGVhckRhdGVzX2RlZmF1bHQsICEoc3RhcnREYXRlIHx8IGVuZERhdGUpICYmIHN0eWxlcy5EYXRlUmFuZ2VQaWNrZXJJbnB1dF9jbGVhckRhdGVzX19oaWRlKSwge1xuICAgIG9uQ2xpY2s6IG9uQ2xlYXJEYXRlcyxcbiAgICBkaXNhYmxlZDogZGlzYWJsZWRcbiAgfSksIGNsb3NlSWNvbiksIGlucHV0SWNvblBvc2l0aW9uID09PSBfY29uc3RhbnRzLklDT05fQUZURVJfUE9TSVRJT04gJiYgaW5wdXRJY29uKTtcbn1cblxuRGF0ZVJhbmdlUGlja2VySW5wdXQucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gcHJvcFR5cGVzIDoge307XG5EYXRlUmFuZ2VQaWNrZXJJbnB1dC5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfcmVhY3RXaXRoU3R5bGVzLndpdGhTdHlsZXMpKGZ1bmN0aW9uIChfcmVmMikge1xuICB2YXIgX3JlZjIkcmVhY3REYXRlcyA9IF9yZWYyLnJlYWN0RGF0ZXMsXG4gICAgICBib3JkZXIgPSBfcmVmMiRyZWFjdERhdGVzLmJvcmRlcixcbiAgICAgIGNvbG9yID0gX3JlZjIkcmVhY3REYXRlcy5jb2xvcixcbiAgICAgIHNpemluZyA9IF9yZWYyJHJlYWN0RGF0ZXMuc2l6aW5nO1xuICByZXR1cm4ge1xuICAgIERhdGVSYW5nZVBpY2tlcklucHV0OiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGNvbG9yLmJhY2tncm91bmQsXG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJ1xuICAgIH0sXG4gICAgRGF0ZVJhbmdlUGlja2VySW5wdXRfX2Rpc2FibGVkOiB7XG4gICAgICBiYWNrZ3JvdW5kOiBjb2xvci5kaXNhYmxlZFxuICAgIH0sXG4gICAgRGF0ZVJhbmdlUGlja2VySW5wdXRfX3dpdGhCb3JkZXI6IHtcbiAgICAgIGJvcmRlckNvbG9yOiBjb2xvci5ib3JkZXIsXG4gICAgICBib3JkZXJXaWR0aDogYm9yZGVyLnBpY2tlcklucHV0LmJvcmRlcldpZHRoLFxuICAgICAgYm9yZGVyU3R5bGU6IGJvcmRlci5waWNrZXJJbnB1dC5ib3JkZXJTdHlsZSxcbiAgICAgIGJvcmRlclJhZGl1czogYm9yZGVyLnBpY2tlcklucHV0LmJvcmRlclJhZGl1c1xuICAgIH0sXG4gICAgRGF0ZVJhbmdlUGlja2VySW5wdXRfX3J0bDoge1xuICAgICAgZGlyZWN0aW9uOiAoMCwgX25vZmxpcFtcImRlZmF1bHRcIl0pKCdydGwnKVxuICAgIH0sXG4gICAgRGF0ZVJhbmdlUGlja2VySW5wdXRfX2Jsb2NrOiB7XG4gICAgICBkaXNwbGF5OiAnYmxvY2snXG4gICAgfSxcbiAgICBEYXRlUmFuZ2VQaWNrZXJJbnB1dF9fc2hvd0NsZWFyRGF0ZXM6IHtcbiAgICAgIHBhZGRpbmdSaWdodDogMzAgLy8gVE9ETzogc2hvdWxkIGJlIG5vZmxpcCB3cmFwcGVkIGFuZCBoYW5kbGVkIGJ5IGFuIGlzUlRMIHByb3BcblxuICAgIH0sXG4gICAgRGF0ZVJhbmdlUGlja2VySW5wdXRfYXJyb3c6IHtcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgdmVydGljYWxBbGlnbjogJ21pZGRsZScsXG4gICAgICBjb2xvcjogY29sb3IudGV4dFxuICAgIH0sXG4gICAgRGF0ZVJhbmdlUGlja2VySW5wdXRfYXJyb3dfc3ZnOiB7XG4gICAgICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcbiAgICAgIGZpbGw6IGNvbG9yLnRleHQsXG4gICAgICBoZWlnaHQ6IHNpemluZy5hcnJvd1dpZHRoLFxuICAgICAgd2lkdGg6IHNpemluZy5hcnJvd1dpZHRoXG4gICAgfSxcbiAgICBEYXRlUmFuZ2VQaWNrZXJJbnB1dF9jbGVhckRhdGVzOiB7XG4gICAgICBiYWNrZ3JvdW5kOiAnbm9uZScsXG4gICAgICBib3JkZXI6IDAsXG4gICAgICBjb2xvcjogJ2luaGVyaXQnLFxuICAgICAgZm9udDogJ2luaGVyaXQnLFxuICAgICAgbGluZUhlaWdodDogJ25vcm1hbCcsXG4gICAgICBvdmVyZmxvdzogJ3Zpc2libGUnLFxuICAgICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgICBwYWRkaW5nOiAxMCxcbiAgICAgIG1hcmdpbjogJzAgMTBweCAwIDVweCcsXG4gICAgICAvLyBUT0RPOiBzaG91bGQgYmUgbm9mbGlwIHdyYXBwZWQgYW5kIGhhbmRsZWQgYnkgYW4gaXNSVEwgcHJvcFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICByaWdodDogMCxcbiAgICAgIC8vIFRPRE86IHNob3VsZCBiZSBub2ZsaXAgd3JhcHBlZCBhbmQgaGFuZGxlZCBieSBhbiBpc1JUTCBwcm9wXG4gICAgICB0b3A6ICc1MCUnLFxuICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgtNTAlKSdcbiAgICB9LFxuICAgIERhdGVSYW5nZVBpY2tlcklucHV0X2NsZWFyRGF0ZXNfX3NtYWxsOiB7XG4gICAgICBwYWRkaW5nOiA2XG4gICAgfSxcbiAgICBEYXRlUmFuZ2VQaWNrZXJJbnB1dF9jbGVhckRhdGVzX2RlZmF1bHQ6IHtcbiAgICAgICc6Zm9jdXMnOiB7XG4gICAgICAgIGJhY2tncm91bmQ6IGNvbG9yLmNvcmUuYm9yZGVyLFxuICAgICAgICBib3JkZXJSYWRpdXM6ICc1MCUnXG4gICAgICB9LFxuICAgICAgJzpob3Zlcic6IHtcbiAgICAgICAgYmFja2dyb3VuZDogY29sb3IuY29yZS5ib3JkZXIsXG4gICAgICAgIGJvcmRlclJhZGl1czogJzUwJSdcbiAgICAgIH1cbiAgICB9LFxuICAgIERhdGVSYW5nZVBpY2tlcklucHV0X2NsZWFyRGF0ZXNfX2hpZGU6IHtcbiAgICAgIHZpc2liaWxpdHk6ICdoaWRkZW4nXG4gICAgfSxcbiAgICBEYXRlUmFuZ2VQaWNrZXJJbnB1dF9jbGVhckRhdGVzX3N2Zzoge1xuICAgICAgZmlsbDogY29sb3IuY29yZS5ncmF5TGlnaHQsXG4gICAgICBoZWlnaHQ6IDEyLFxuICAgICAgd2lkdGg6IDE1LFxuICAgICAgdmVydGljYWxBbGlnbjogJ21pZGRsZSdcbiAgICB9LFxuICAgIERhdGVSYW5nZVBpY2tlcklucHV0X2NsZWFyRGF0ZXNfc3ZnX19zbWFsbDoge1xuICAgICAgaGVpZ2h0OiA5XG4gICAgfSxcbiAgICBEYXRlUmFuZ2VQaWNrZXJJbnB1dF9jYWxlbmRhckljb246IHtcbiAgICAgIGJhY2tncm91bmQ6ICdub25lJyxcbiAgICAgIGJvcmRlcjogMCxcbiAgICAgIGNvbG9yOiAnaW5oZXJpdCcsXG4gICAgICBmb250OiAnaW5oZXJpdCcsXG4gICAgICBsaW5lSGVpZ2h0OiAnbm9ybWFsJyxcbiAgICAgIG92ZXJmbG93OiAndmlzaWJsZScsXG4gICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgdmVydGljYWxBbGlnbjogJ21pZGRsZScsXG4gICAgICBwYWRkaW5nOiAxMCxcbiAgICAgIG1hcmdpbjogJzAgNXB4IDAgMTBweCcgLy8gVE9ETzogc2hvdWxkIGJlIG5vZmxpcCB3cmFwcGVkIGFuZCBoYW5kbGVkIGJ5IGFuIGlzUlRMIHByb3BcblxuICAgIH0sXG4gICAgRGF0ZVJhbmdlUGlja2VySW5wdXRfY2FsZW5kYXJJY29uX3N2Zzoge1xuICAgICAgZmlsbDogY29sb3IuY29yZS5ncmF5TGlnaHQsXG4gICAgICBoZWlnaHQ6IDE1LFxuICAgICAgd2lkdGg6IDE0LFxuICAgICAgdmVydGljYWxBbGlnbjogJ21pZGRsZSdcbiAgICB9XG4gIH07XG59LCB7XG4gIHB1cmVDb21wb25lbnQ6IHR5cGVvZiBfcmVhY3RbXCJkZWZhdWx0XCJdLlB1cmVDb21wb25lbnQgIT09ICd1bmRlZmluZWQnXG59KShEYXRlUmFuZ2VQaWNrZXJJbnB1dCk7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfZW56eW1lU2hhbGxvd0VxdWFsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZW56eW1lLXNoYWxsb3ctZXF1YWxcIikpO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpO1xuXG52YXIgX2luaGVyaXRzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9haXJibmJQcm9wVHlwZXMgPSByZXF1aXJlKFwiYWlyYm5iLXByb3AtdHlwZXNcIik7XG5cbnZhciBfcmVhY3RXaXRoU3R5bGVzID0gcmVxdWlyZShcInJlYWN0LXdpdGgtc3R5bGVzXCIpO1xuXG52YXIgX3Rocm90dGxlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwibG9kYXNoL3Rocm90dGxlXCIpKTtcblxudmFyIF9pc1RvdWNoRGV2aWNlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiaXMtdG91Y2gtZGV2aWNlXCIpKTtcblxudmFyIF9ub2ZsaXAgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9ub2ZsaXBcIikpO1xuXG52YXIgX2dldElucHV0SGVpZ2h0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvZ2V0SW5wdXRIZWlnaHRcIikpO1xuXG52YXIgX09wZW5EaXJlY3Rpb25TaGFwZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3NoYXBlcy9PcGVuRGlyZWN0aW9uU2hhcGVcIikpO1xuXG52YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHNcIik7XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7ICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxudmFyIEZBTkdfUEFUSF9UT1AgPSBcIk0wLFwiLmNvbmNhdChfY29uc3RhbnRzLkZBTkdfSEVJR0hUX1BYLCBcIiBcIikuY29uY2F0KF9jb25zdGFudHMuRkFOR19XSURUSF9QWCwgXCIsXCIpLmNvbmNhdChfY29uc3RhbnRzLkZBTkdfSEVJR0hUX1BYLCBcIiBcIikuY29uY2F0KF9jb25zdGFudHMuRkFOR19XSURUSF9QWCAvIDIsIFwiLDB6XCIpO1xudmFyIEZBTkdfU1RST0tFX1RPUCA9IFwiTTAsXCIuY29uY2F0KF9jb25zdGFudHMuRkFOR19IRUlHSFRfUFgsIFwiIFwiKS5jb25jYXQoX2NvbnN0YW50cy5GQU5HX1dJRFRIX1BYIC8gMiwgXCIsMCBcIikuY29uY2F0KF9jb25zdGFudHMuRkFOR19XSURUSF9QWCwgXCIsXCIpLmNvbmNhdChfY29uc3RhbnRzLkZBTkdfSEVJR0hUX1BYKTtcbnZhciBGQU5HX1BBVEhfQk9UVE9NID0gXCJNMCwwIFwiLmNvbmNhdChfY29uc3RhbnRzLkZBTkdfV0lEVEhfUFgsIFwiLDAgXCIpLmNvbmNhdChfY29uc3RhbnRzLkZBTkdfV0lEVEhfUFggLyAyLCBcIixcIikuY29uY2F0KF9jb25zdGFudHMuRkFOR19IRUlHSFRfUFgsIFwielwiKTtcbnZhciBGQU5HX1NUUk9LRV9CT1RUT00gPSBcIk0wLDAgXCIuY29uY2F0KF9jb25zdGFudHMuRkFOR19XSURUSF9QWCAvIDIsIFwiLFwiKS5jb25jYXQoX2NvbnN0YW50cy5GQU5HX0hFSUdIVF9QWCwgXCIgXCIpLmNvbmNhdChfY29uc3RhbnRzLkZBTkdfV0lEVEhfUFgsIFwiLDBcIik7XG52YXIgcHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF9haXJibmJQcm9wVHlwZXMuZm9yYmlkRXh0cmFQcm9wcykoX29iamVjdFNwcmVhZCh7fSwgX3JlYWN0V2l0aFN0eWxlcy53aXRoU3R5bGVzUHJvcFR5cGVzLCB7XG4gIGlkOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgcGxhY2Vob2xkZXI6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZyxcbiAgZGlzcGxheVZhbHVlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcsXG4gIGFyaWFMYWJlbDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLFxuICBzY3JlZW5SZWFkZXJNZXNzYWdlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcsXG4gIGZvY3VzZWQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIGRpc2FibGVkOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICByZXF1aXJlZDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgcmVhZE9ubHk6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIG9wZW5EaXJlY3Rpb246IF9PcGVuRGlyZWN0aW9uU2hhcGVbXCJkZWZhdWx0XCJdLFxuICBzaG93Q2FyZXQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIHZlcnRpY2FsU3BhY2luZzogX2FpcmJuYlByb3BUeXBlcy5ub25OZWdhdGl2ZUludGVnZXIsXG4gIHNtYWxsOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBibG9jazogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgcmVndWxhcjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgb25DaGFuZ2U6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIG9uRm9jdXM6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIG9uS2V5RG93blNoaWZ0VGFiOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvbktleURvd25UYWI6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIG9uS2V5RG93bkFycm93RG93bjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgb25LZXlEb3duUXVlc3Rpb25NYXJrOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICAvLyBhY2Nlc3NpYmlsaXR5XG4gIGlzRm9jdXNlZDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCAvLyBkZXNjcmliZXMgYWN0dWFsIERPTSBmb2N1c1xuXG59KSkgOiB7fTtcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIHBsYWNlaG9sZGVyOiAnU2VsZWN0IERhdGUnLFxuICBkaXNwbGF5VmFsdWU6ICcnLFxuICBhcmlhTGFiZWw6IHVuZGVmaW5lZCxcbiAgc2NyZWVuUmVhZGVyTWVzc2FnZTogJycsXG4gIGZvY3VzZWQ6IGZhbHNlLFxuICBkaXNhYmxlZDogZmFsc2UsXG4gIHJlcXVpcmVkOiBmYWxzZSxcbiAgcmVhZE9ubHk6IG51bGwsXG4gIG9wZW5EaXJlY3Rpb246IF9jb25zdGFudHMuT1BFTl9ET1dOLFxuICBzaG93Q2FyZXQ6IGZhbHNlLFxuICB2ZXJ0aWNhbFNwYWNpbmc6IF9jb25zdGFudHMuREVGQVVMVF9WRVJUSUNBTF9TUEFDSU5HLFxuICBzbWFsbDogZmFsc2UsXG4gIGJsb2NrOiBmYWxzZSxcbiAgcmVndWxhcjogZmFsc2UsXG4gIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZSgpIHt9LFxuICBvbkZvY3VzOiBmdW5jdGlvbiBvbkZvY3VzKCkge30sXG4gIG9uS2V5RG93blNoaWZ0VGFiOiBmdW5jdGlvbiBvbktleURvd25TaGlmdFRhYigpIHt9LFxuICBvbktleURvd25UYWI6IGZ1bmN0aW9uIG9uS2V5RG93blRhYigpIHt9LFxuICBvbktleURvd25BcnJvd0Rvd246IGZ1bmN0aW9uIG9uS2V5RG93bkFycm93RG93bigpIHt9LFxuICBvbktleURvd25RdWVzdGlvbk1hcms6IGZ1bmN0aW9uIG9uS2V5RG93blF1ZXN0aW9uTWFyaygpIHt9LFxuICAvLyBhY2Nlc3NpYmlsaXR5XG4gIGlzRm9jdXNlZDogZmFsc2Vcbn07XG5cbnZhciBEYXRlSW5wdXQgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9yZWYpIHtcbiAgKDAsIF9pbmhlcml0c0xvb3NlMltcImRlZmF1bHRcIl0pKERhdGVJbnB1dCwgX3JlZik7XG4gIHZhciBfcHJvdG8gPSBEYXRlSW5wdXQucHJvdG90eXBlO1xuXG4gIF9wcm90b1shX3JlYWN0W1wiZGVmYXVsdFwiXS5QdXJlQ29tcG9uZW50ICYmIFwic2hvdWxkQ29tcG9uZW50VXBkYXRlXCJdID0gZnVuY3Rpb24gKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gICAgcmV0dXJuICEoMCwgX2VuenltZVNoYWxsb3dFcXVhbFtcImRlZmF1bHRcIl0pKHRoaXMucHJvcHMsIG5leHRQcm9wcykgfHwgISgwLCBfZW56eW1lU2hhbGxvd0VxdWFsW1wiZGVmYXVsdFwiXSkodGhpcy5zdGF0ZSwgbmV4dFN0YXRlKTtcbiAgfTtcblxuICBmdW5jdGlvbiBEYXRlSW5wdXQocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9yZWYuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGRhdGVTdHJpbmc6ICcnLFxuICAgICAgaXNUb3VjaERldmljZTogZmFsc2VcbiAgICB9O1xuICAgIF90aGlzLm9uQ2hhbmdlID0gX3RoaXMub25DaGFuZ2UuYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcykpO1xuICAgIF90aGlzLm9uS2V5RG93biA9IF90aGlzLm9uS2V5RG93bi5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgX3RoaXMuc2V0SW5wdXRSZWYgPSBfdGhpcy5zZXRJbnB1dFJlZi5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgX3RoaXMudGhyb3R0bGVkS2V5RG93biA9ICgwLCBfdGhyb3R0bGVbXCJkZWZhdWx0XCJdKShfdGhpcy5vbkZpbmFsS2V5RG93biwgMzAwLCB7XG4gICAgICB0cmFpbGluZzogZmFsc2VcbiAgICB9KTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGlzVG91Y2hEZXZpY2U6ICgwLCBfaXNUb3VjaERldmljZVtcImRlZmF1bHRcIl0pKClcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgdmFyIGRhdGVTdHJpbmcgPSB0aGlzLnN0YXRlLmRhdGVTdHJpbmc7XG5cbiAgICBpZiAoZGF0ZVN0cmluZyAmJiBuZXh0UHJvcHMuZGlzcGxheVZhbHVlKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZGF0ZVN0cmluZzogJydcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGZvY3VzZWQgPSBfdGhpcyRwcm9wcy5mb2N1c2VkLFxuICAgICAgICBpc0ZvY3VzZWQgPSBfdGhpcyRwcm9wcy5pc0ZvY3VzZWQ7XG4gICAgaWYgKHByZXZQcm9wcy5mb2N1c2VkID09PSBmb2N1c2VkICYmIHByZXZQcm9wcy5pc0ZvY3VzZWQgPT09IGlzRm9jdXNlZCkgcmV0dXJuO1xuXG4gICAgaWYgKGZvY3VzZWQgJiYgaXNGb2N1c2VkKSB7XG4gICAgICB0aGlzLmlucHV0UmVmLmZvY3VzKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5vbkNoYW5nZSA9IGZ1bmN0aW9uIG9uQ2hhbmdlKGUpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgb25DaGFuZ2UgPSBfdGhpcyRwcm9wczIub25DaGFuZ2UsXG4gICAgICAgIG9uS2V5RG93blF1ZXN0aW9uTWFyayA9IF90aGlzJHByb3BzMi5vbktleURvd25RdWVzdGlvbk1hcms7XG4gICAgdmFyIGRhdGVTdHJpbmcgPSBlLnRhcmdldC52YWx1ZTsgLy8gSW4gU2FmYXJpLCBvbktleURvd24gZG9lcyBub3QgY29uc2lzdGVudGx5IGZpcmUgYWhlYWQgb2Ygb25DaGFuZ2UuIEFzIGEgcmVzdWx0LCB3ZSBuZWVkIHRvXG4gICAgLy8gc3BlY2lhbCBjYXNlIHRoZSBgP2Aga2V5IHNvIHRoYXQgaXQgYWx3YXlzIHRyaWdnZXJzIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFjaywgaW5zdGVhZCBvZlxuICAgIC8vIG1vZGlmeWluZyB0aGUgaW5wdXQgdmFsdWVcblxuICAgIGlmIChkYXRlU3RyaW5nW2RhdGVTdHJpbmcubGVuZ3RoIC0gMV0gPT09ICc/Jykge1xuICAgICAgb25LZXlEb3duUXVlc3Rpb25NYXJrKGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZGF0ZVN0cmluZzogZGF0ZVN0cmluZ1xuICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gb25DaGFuZ2UoZGF0ZVN0cmluZyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLm9uS2V5RG93biA9IGZ1bmN0aW9uIG9uS2V5RG93bihlKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgIGlmICghX2NvbnN0YW50cy5NT0RJRklFUl9LRVlfTkFNRVMuaGFzKGUua2V5KSkge1xuICAgICAgdGhpcy50aHJvdHRsZWRLZXlEb3duKGUpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ub25GaW5hbEtleURvd24gPSBmdW5jdGlvbiBvbkZpbmFsS2V5RG93bihlKSB7XG4gICAgdmFyIF90aGlzJHByb3BzMyA9IHRoaXMucHJvcHMsXG4gICAgICAgIG9uS2V5RG93blNoaWZ0VGFiID0gX3RoaXMkcHJvcHMzLm9uS2V5RG93blNoaWZ0VGFiLFxuICAgICAgICBvbktleURvd25UYWIgPSBfdGhpcyRwcm9wczMub25LZXlEb3duVGFiLFxuICAgICAgICBvbktleURvd25BcnJvd0Rvd24gPSBfdGhpcyRwcm9wczMub25LZXlEb3duQXJyb3dEb3duLFxuICAgICAgICBvbktleURvd25RdWVzdGlvbk1hcmsgPSBfdGhpcyRwcm9wczMub25LZXlEb3duUXVlc3Rpb25NYXJrO1xuICAgIHZhciBrZXkgPSBlLmtleTtcblxuICAgIGlmIChrZXkgPT09ICdUYWInKSB7XG4gICAgICBpZiAoZS5zaGlmdEtleSkge1xuICAgICAgICBvbktleURvd25TaGlmdFRhYihlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9uS2V5RG93blRhYihlKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ0Fycm93RG93bicpIHtcbiAgICAgIG9uS2V5RG93bkFycm93RG93bihlKTtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJz8nKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBvbktleURvd25RdWVzdGlvbk1hcmsoZSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5zZXRJbnB1dFJlZiA9IGZ1bmN0aW9uIHNldElucHV0UmVmKHJlZikge1xuICAgIHRoaXMuaW5wdXRSZWYgPSByZWY7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkc3RhdGUgPSB0aGlzLnN0YXRlLFxuICAgICAgICBkYXRlU3RyaW5nID0gX3RoaXMkc3RhdGUuZGF0ZVN0cmluZyxcbiAgICAgICAgaXNUb3VjaCA9IF90aGlzJHN0YXRlLmlzVG91Y2hEZXZpY2U7XG4gICAgdmFyIF90aGlzJHByb3BzNCA9IHRoaXMucHJvcHMsXG4gICAgICAgIGlkID0gX3RoaXMkcHJvcHM0LmlkLFxuICAgICAgICBwbGFjZWhvbGRlciA9IF90aGlzJHByb3BzNC5wbGFjZWhvbGRlcixcbiAgICAgICAgYXJpYUxhYmVsID0gX3RoaXMkcHJvcHM0LmFyaWFMYWJlbCxcbiAgICAgICAgZGlzcGxheVZhbHVlID0gX3RoaXMkcHJvcHM0LmRpc3BsYXlWYWx1ZSxcbiAgICAgICAgc2NyZWVuUmVhZGVyTWVzc2FnZSA9IF90aGlzJHByb3BzNC5zY3JlZW5SZWFkZXJNZXNzYWdlLFxuICAgICAgICBmb2N1c2VkID0gX3RoaXMkcHJvcHM0LmZvY3VzZWQsXG4gICAgICAgIHNob3dDYXJldCA9IF90aGlzJHByb3BzNC5zaG93Q2FyZXQsXG4gICAgICAgIG9uRm9jdXMgPSBfdGhpcyRwcm9wczQub25Gb2N1cyxcbiAgICAgICAgZGlzYWJsZWQgPSBfdGhpcyRwcm9wczQuZGlzYWJsZWQsXG4gICAgICAgIHJlcXVpcmVkID0gX3RoaXMkcHJvcHM0LnJlcXVpcmVkLFxuICAgICAgICByZWFkT25seSA9IF90aGlzJHByb3BzNC5yZWFkT25seSxcbiAgICAgICAgb3BlbkRpcmVjdGlvbiA9IF90aGlzJHByb3BzNC5vcGVuRGlyZWN0aW9uLFxuICAgICAgICB2ZXJ0aWNhbFNwYWNpbmcgPSBfdGhpcyRwcm9wczQudmVydGljYWxTcGFjaW5nLFxuICAgICAgICBzbWFsbCA9IF90aGlzJHByb3BzNC5zbWFsbCxcbiAgICAgICAgcmVndWxhciA9IF90aGlzJHByb3BzNC5yZWd1bGFyLFxuICAgICAgICBibG9jayA9IF90aGlzJHByb3BzNC5ibG9jayxcbiAgICAgICAgc3R5bGVzID0gX3RoaXMkcHJvcHM0LnN0eWxlcyxcbiAgICAgICAgcmVhY3REYXRlcyA9IF90aGlzJHByb3BzNC50aGVtZS5yZWFjdERhdGVzO1xuICAgIHZhciB2YWx1ZSA9IGRhdGVTdHJpbmcgfHwgZGlzcGxheVZhbHVlIHx8ICcnO1xuICAgIHZhciBzY3JlZW5SZWFkZXJNZXNzYWdlSWQgPSBcIkRhdGVJbnB1dF9fc2NyZWVuLXJlYWRlci1tZXNzYWdlLVwiLmNvbmNhdChpZCk7XG4gICAgdmFyIHdpdGhGYW5nID0gc2hvd0NhcmV0ICYmIGZvY3VzZWQ7XG4gICAgdmFyIGlucHV0SGVpZ2h0ID0gKDAsIF9nZXRJbnB1dEhlaWdodFtcImRlZmF1bHRcIl0pKHJlYWN0RGF0ZXMsIHNtYWxsKTtcbiAgICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsICgwLCBfcmVhY3RXaXRoU3R5bGVzLmNzcykoc3R5bGVzLkRhdGVJbnB1dCwgc21hbGwgJiYgc3R5bGVzLkRhdGVJbnB1dF9fc21hbGwsIGJsb2NrICYmIHN0eWxlcy5EYXRlSW5wdXRfX2Jsb2NrLCB3aXRoRmFuZyAmJiBzdHlsZXMuRGF0ZUlucHV0X193aXRoRmFuZywgZGlzYWJsZWQgJiYgc3R5bGVzLkRhdGVJbnB1dF9fZGlzYWJsZWQsIHdpdGhGYW5nICYmIG9wZW5EaXJlY3Rpb24gPT09IF9jb25zdGFudHMuT1BFTl9ET1dOICYmIHN0eWxlcy5EYXRlSW5wdXRfX29wZW5Eb3duLCB3aXRoRmFuZyAmJiBvcGVuRGlyZWN0aW9uID09PSBfY29uc3RhbnRzLk9QRU5fVVAgJiYgc3R5bGVzLkRhdGVJbnB1dF9fb3BlblVwKSwgX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiwgKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKHt9LCAoMCwgX3JlYWN0V2l0aFN0eWxlcy5jc3MpKHN0eWxlcy5EYXRlSW5wdXRfaW5wdXQsIHNtYWxsICYmIHN0eWxlcy5EYXRlSW5wdXRfaW5wdXRfX3NtYWxsLCByZWd1bGFyICYmIHN0eWxlcy5EYXRlSW5wdXRfaW5wdXRfX3JlZ3VsYXIsIHJlYWRPbmx5ICYmIHN0eWxlcy5EYXRlSW5wdXRfaW5wdXRfX3JlYWRPbmx5LCBmb2N1c2VkICYmIHN0eWxlcy5EYXRlSW5wdXRfaW5wdXRfX2ZvY3VzZWQsIGRpc2FibGVkICYmIHN0eWxlcy5EYXRlSW5wdXRfaW5wdXRfX2Rpc2FibGVkKSwge1xuICAgICAgXCJhcmlhLWxhYmVsXCI6IGFyaWFMYWJlbCA9PT0gdW5kZWZpbmVkID8gcGxhY2Vob2xkZXIgOiBhcmlhTGFiZWwsXG4gICAgICB0eXBlOiBcInRleHRcIixcbiAgICAgIGlkOiBpZCxcbiAgICAgIG5hbWU6IGlkLFxuICAgICAgcmVmOiB0aGlzLnNldElucHV0UmVmLFxuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgb25DaGFuZ2U6IHRoaXMub25DaGFuZ2UsXG4gICAgICBvbktleURvd246IHRoaXMub25LZXlEb3duLFxuICAgICAgb25Gb2N1czogb25Gb2N1cyxcbiAgICAgIHBsYWNlaG9sZGVyOiBwbGFjZWhvbGRlcixcbiAgICAgIGF1dG9Db21wbGV0ZTogXCJvZmZcIixcbiAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICAgIHJlYWRPbmx5OiB0eXBlb2YgcmVhZE9ubHkgPT09ICdib29sZWFuJyA/IHJlYWRPbmx5IDogaXNUb3VjaCxcbiAgICAgIHJlcXVpcmVkOiByZXF1aXJlZCxcbiAgICAgIFwiYXJpYS1kZXNjcmliZWRieVwiOiBzY3JlZW5SZWFkZXJNZXNzYWdlICYmIHNjcmVlblJlYWRlck1lc3NhZ2VJZFxuICAgIH0pKSwgd2l0aEZhbmcgJiYgX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwic3ZnXCIsICgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7XG4gICAgICByb2xlOiBcInByZXNlbnRhdGlvblwiLFxuICAgICAgZm9jdXNhYmxlOiBcImZhbHNlXCJcbiAgICB9LCAoMCwgX3JlYWN0V2l0aFN0eWxlcy5jc3MpKHN0eWxlcy5EYXRlSW5wdXRfZmFuZywgb3BlbkRpcmVjdGlvbiA9PT0gX2NvbnN0YW50cy5PUEVOX0RPV04gJiYge1xuICAgICAgdG9wOiBpbnB1dEhlaWdodCArIHZlcnRpY2FsU3BhY2luZyAtIF9jb25zdGFudHMuRkFOR19IRUlHSFRfUFggLSAxXG4gICAgfSwgb3BlbkRpcmVjdGlvbiA9PT0gX2NvbnN0YW50cy5PUEVOX1VQICYmIHtcbiAgICAgIGJvdHRvbTogaW5wdXRIZWlnaHQgKyB2ZXJ0aWNhbFNwYWNpbmcgLSBfY29uc3RhbnRzLkZBTkdfSEVJR0hUX1BYIC0gMVxuICAgIH0pKSwgX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe30sICgwLCBfcmVhY3RXaXRoU3R5bGVzLmNzcykoc3R5bGVzLkRhdGVJbnB1dF9mYW5nU2hhcGUpLCB7XG4gICAgICBkOiBvcGVuRGlyZWN0aW9uID09PSBfY29uc3RhbnRzLk9QRU5fRE9XTiA/IEZBTkdfUEFUSF9UT1AgOiBGQU5HX1BBVEhfQk9UVE9NXG4gICAgfSkpLCBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsICgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7fSwgKDAsIF9yZWFjdFdpdGhTdHlsZXMuY3NzKShzdHlsZXMuRGF0ZUlucHV0X2ZhbmdTdHJva2UpLCB7XG4gICAgICBkOiBvcGVuRGlyZWN0aW9uID09PSBfY29uc3RhbnRzLk9QRU5fRE9XTiA/IEZBTkdfU1RST0tFX1RPUCA6IEZBTkdfU1RST0tFX0JPVFRPTVxuICAgIH0pKSksIHNjcmVlblJlYWRlck1lc3NhZ2UgJiYgX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwicFwiLCAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe30sICgwLCBfcmVhY3RXaXRoU3R5bGVzLmNzcykoc3R5bGVzLkRhdGVJbnB1dF9zY3JlZW5SZWFkZXJNZXNzYWdlKSwge1xuICAgICAgaWQ6IHNjcmVlblJlYWRlck1lc3NhZ2VJZFxuICAgIH0pLCBzY3JlZW5SZWFkZXJNZXNzYWdlKSk7XG4gIH07XG5cbiAgcmV0dXJuIERhdGVJbnB1dDtcbn0oX3JlYWN0W1wiZGVmYXVsdFwiXS5QdXJlQ29tcG9uZW50IHx8IF9yZWFjdFtcImRlZmF1bHRcIl0uQ29tcG9uZW50KTtcblxuRGF0ZUlucHV0LnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHByb3BUeXBlcyA6IHt9O1xuRGF0ZUlucHV0LmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9yZWFjdFdpdGhTdHlsZXMud2l0aFN0eWxlcykoZnVuY3Rpb24gKF9yZWYyKSB7XG4gIHZhciBfcmVmMiRyZWFjdERhdGVzID0gX3JlZjIucmVhY3REYXRlcyxcbiAgICAgIGJvcmRlciA9IF9yZWYyJHJlYWN0RGF0ZXMuYm9yZGVyLFxuICAgICAgY29sb3IgPSBfcmVmMiRyZWFjdERhdGVzLmNvbG9yLFxuICAgICAgc2l6aW5nID0gX3JlZjIkcmVhY3REYXRlcy5zaXppbmcsXG4gICAgICBzcGFjaW5nID0gX3JlZjIkcmVhY3REYXRlcy5zcGFjaW5nLFxuICAgICAgZm9udCA9IF9yZWYyJHJlYWN0RGF0ZXMuZm9udCxcbiAgICAgIHpJbmRleCA9IF9yZWYyJHJlYWN0RGF0ZXMuekluZGV4O1xuICByZXR1cm4ge1xuICAgIERhdGVJbnB1dDoge1xuICAgICAgbWFyZ2luOiAwLFxuICAgICAgcGFkZGluZzogc3BhY2luZy5pbnB1dFBhZGRpbmcsXG4gICAgICBiYWNrZ3JvdW5kOiBjb2xvci5iYWNrZ3JvdW5kLFxuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgIHdpZHRoOiBzaXppbmcuaW5wdXRXaWR0aCxcbiAgICAgIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnXG4gICAgfSxcbiAgICBEYXRlSW5wdXRfX3NtYWxsOiB7XG4gICAgICB3aWR0aDogc2l6aW5nLmlucHV0V2lkdGhfc21hbGxcbiAgICB9LFxuICAgIERhdGVJbnB1dF9fYmxvY2s6IHtcbiAgICAgIHdpZHRoOiAnMTAwJSdcbiAgICB9LFxuICAgIERhdGVJbnB1dF9fZGlzYWJsZWQ6IHtcbiAgICAgIGJhY2tncm91bmQ6IGNvbG9yLmRpc2FibGVkLFxuICAgICAgY29sb3I6IGNvbG9yLnRleHREaXNhYmxlZFxuICAgIH0sXG4gICAgRGF0ZUlucHV0X2lucHV0OiB7XG4gICAgICBmb250V2VpZ2h0OiBmb250LmlucHV0LndlaWdodCxcbiAgICAgIGZvbnRTaXplOiBmb250LmlucHV0LnNpemUsXG4gICAgICBsaW5lSGVpZ2h0OiBmb250LmlucHV0LmxpbmVIZWlnaHQsXG4gICAgICBjb2xvcjogY29sb3IudGV4dCxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogY29sb3IuYmFja2dyb3VuZCxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBwYWRkaW5nOiBcIlwiLmNvbmNhdChzcGFjaW5nLmRpc3BsYXlUZXh0UGFkZGluZ1ZlcnRpY2FsLCBcInB4IFwiKS5jb25jYXQoc3BhY2luZy5kaXNwbGF5VGV4dFBhZGRpbmdIb3Jpem9udGFsLCBcInB4XCIpLFxuICAgICAgcGFkZGluZ1RvcDogc3BhY2luZy5kaXNwbGF5VGV4dFBhZGRpbmdUb3AsXG4gICAgICBwYWRkaW5nQm90dG9tOiBzcGFjaW5nLmRpc3BsYXlUZXh0UGFkZGluZ0JvdHRvbSxcbiAgICAgIHBhZGRpbmdMZWZ0OiAoMCwgX25vZmxpcFtcImRlZmF1bHRcIl0pKHNwYWNpbmcuZGlzcGxheVRleHRQYWRkaW5nTGVmdCksXG4gICAgICBwYWRkaW5nUmlnaHQ6ICgwLCBfbm9mbGlwW1wiZGVmYXVsdFwiXSkoc3BhY2luZy5kaXNwbGF5VGV4dFBhZGRpbmdSaWdodCksXG4gICAgICBib3JkZXI6IGJvcmRlci5pbnB1dC5ib3JkZXIsXG4gICAgICBib3JkZXJUb3A6IGJvcmRlci5pbnB1dC5ib3JkZXJUb3AsXG4gICAgICBib3JkZXJSaWdodDogKDAsIF9ub2ZsaXBbXCJkZWZhdWx0XCJdKShib3JkZXIuaW5wdXQuYm9yZGVyUmlnaHQpLFxuICAgICAgYm9yZGVyQm90dG9tOiBib3JkZXIuaW5wdXQuYm9yZGVyQm90dG9tLFxuICAgICAgYm9yZGVyTGVmdDogKDAsIF9ub2ZsaXBbXCJkZWZhdWx0XCJdKShib3JkZXIuaW5wdXQuYm9yZGVyTGVmdCksXG4gICAgICBib3JkZXJSYWRpdXM6IGJvcmRlci5pbnB1dC5ib3JkZXJSYWRpdXNcbiAgICB9LFxuICAgIERhdGVJbnB1dF9pbnB1dF9fc21hbGw6IHtcbiAgICAgIGZvbnRTaXplOiBmb250LmlucHV0LnNpemVfc21hbGwsXG4gICAgICBsaW5lSGVpZ2h0OiBmb250LmlucHV0LmxpbmVIZWlnaHRfc21hbGwsXG4gICAgICBsZXR0ZXJTcGFjaW5nOiBmb250LmlucHV0LmxldHRlclNwYWNpbmdfc21hbGwsXG4gICAgICBwYWRkaW5nOiBcIlwiLmNvbmNhdChzcGFjaW5nLmRpc3BsYXlUZXh0UGFkZGluZ1ZlcnRpY2FsX3NtYWxsLCBcInB4IFwiKS5jb25jYXQoc3BhY2luZy5kaXNwbGF5VGV4dFBhZGRpbmdIb3Jpem9udGFsX3NtYWxsLCBcInB4XCIpLFxuICAgICAgcGFkZGluZ1RvcDogc3BhY2luZy5kaXNwbGF5VGV4dFBhZGRpbmdUb3Bfc21hbGwsXG4gICAgICBwYWRkaW5nQm90dG9tOiBzcGFjaW5nLmRpc3BsYXlUZXh0UGFkZGluZ0JvdHRvbV9zbWFsbCxcbiAgICAgIHBhZGRpbmdMZWZ0OiAoMCwgX25vZmxpcFtcImRlZmF1bHRcIl0pKHNwYWNpbmcuZGlzcGxheVRleHRQYWRkaW5nTGVmdF9zbWFsbCksXG4gICAgICBwYWRkaW5nUmlnaHQ6ICgwLCBfbm9mbGlwW1wiZGVmYXVsdFwiXSkoc3BhY2luZy5kaXNwbGF5VGV4dFBhZGRpbmdSaWdodF9zbWFsbClcbiAgICB9LFxuICAgIERhdGVJbnB1dF9pbnB1dF9fcmVndWxhcjoge1xuICAgICAgZm9udFdlaWdodDogJ2F1dG8nXG4gICAgfSxcbiAgICBEYXRlSW5wdXRfaW5wdXRfX3JlYWRPbmx5OiB7XG4gICAgICB1c2VyU2VsZWN0OiAnbm9uZSdcbiAgICB9LFxuICAgIERhdGVJbnB1dF9pbnB1dF9fZm9jdXNlZDoge1xuICAgICAgb3V0bGluZTogYm9yZGVyLmlucHV0Lm91dGxpbmVGb2N1c2VkLFxuICAgICAgYmFja2dyb3VuZDogY29sb3IuYmFja2dyb3VuZEZvY3VzZWQsXG4gICAgICBib3JkZXI6IGJvcmRlci5pbnB1dC5ib3JkZXJGb2N1c2VkLFxuICAgICAgYm9yZGVyVG9wOiBib3JkZXIuaW5wdXQuYm9yZGVyVG9wRm9jdXNlZCxcbiAgICAgIGJvcmRlclJpZ2h0OiAoMCwgX25vZmxpcFtcImRlZmF1bHRcIl0pKGJvcmRlci5pbnB1dC5ib3JkZXJSaWdodEZvY3VzZWQpLFxuICAgICAgYm9yZGVyQm90dG9tOiBib3JkZXIuaW5wdXQuYm9yZGVyQm90dG9tRm9jdXNlZCxcbiAgICAgIGJvcmRlckxlZnQ6ICgwLCBfbm9mbGlwW1wiZGVmYXVsdFwiXSkoYm9yZGVyLmlucHV0LmJvcmRlckxlZnRGb2N1c2VkKVxuICAgIH0sXG4gICAgRGF0ZUlucHV0X2lucHV0X19kaXNhYmxlZDoge1xuICAgICAgYmFja2dyb3VuZDogY29sb3IuZGlzYWJsZWQsXG4gICAgICBmb250U3R5bGU6IGZvbnQuaW5wdXQuc3R5bGVEaXNhYmxlZFxuICAgIH0sXG4gICAgRGF0ZUlucHV0X3NjcmVlblJlYWRlck1lc3NhZ2U6IHtcbiAgICAgIGJvcmRlcjogMCxcbiAgICAgIGNsaXA6ICdyZWN0KDAsIDAsIDAsIDApJyxcbiAgICAgIGhlaWdodDogMSxcbiAgICAgIG1hcmdpbjogLTEsXG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICB3aWR0aDogMVxuICAgIH0sXG4gICAgRGF0ZUlucHV0X2Zhbmc6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgd2lkdGg6IF9jb25zdGFudHMuRkFOR19XSURUSF9QWCxcbiAgICAgIGhlaWdodDogX2NvbnN0YW50cy5GQU5HX0hFSUdIVF9QWCxcbiAgICAgIGxlZnQ6IDIyLFxuICAgICAgLy8gVE9ETzogc2hvdWxkIGJlIG5vZmxpcCB3cmFwcGVkIGFuZCBoYW5kbGVkIGJ5IGFuIGlzUlRMIHByb3BcbiAgICAgIHpJbmRleDogekluZGV4ICsgMlxuICAgIH0sXG4gICAgRGF0ZUlucHV0X2ZhbmdTaGFwZToge1xuICAgICAgZmlsbDogY29sb3IuYmFja2dyb3VuZFxuICAgIH0sXG4gICAgRGF0ZUlucHV0X2ZhbmdTdHJva2U6IHtcbiAgICAgIHN0cm9rZTogY29sb3IuY29yZS5ib3JkZXIsXG4gICAgICBmaWxsOiAndHJhbnNwYXJlbnQnXG4gICAgfVxuICB9O1xufSwge1xuICBwdXJlQ29tcG9uZW50OiB0eXBlb2YgX3JlYWN0W1wiZGVmYXVsdFwiXS5QdXJlQ29tcG9uZW50ICE9PSAndW5kZWZpbmVkJ1xufSkoRGF0ZUlucHV0KTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCJ2YXIgZGVib3VuY2UgPSByZXF1aXJlKCcuL2RlYm91bmNlJyksXG4gICAgaXNPYmplY3QgPSByZXF1aXJlKCcuL2lzT2JqZWN0Jyk7XG5cbi8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHRocm90dGxlZCBmdW5jdGlvbiB0aGF0IG9ubHkgaW52b2tlcyBgZnVuY2AgYXQgbW9zdCBvbmNlIHBlclxuICogZXZlcnkgYHdhaXRgIG1pbGxpc2Vjb25kcy4gVGhlIHRocm90dGxlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGBcbiAqIG1ldGhvZCB0byBjYW5jZWwgZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG9cbiAqIGltbWVkaWF0ZWx5IGludm9rZSB0aGVtLiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYFxuICogc2hvdWxkIGJlIGludm9rZWQgb24gdGhlIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YFxuICogdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZVxuICogdGhyb3R0bGVkIGZ1bmN0aW9uLiBTdWJzZXF1ZW50IGNhbGxzIHRvIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gcmV0dXJuIHRoZVxuICogcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYCBpbnZvY2F0aW9uLlxuICpcbiAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uXG4gKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gKlxuICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG4gKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gKlxuICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG4gKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLnRocm90dGxlYCBhbmQgYF8uZGVib3VuY2VgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gdGhyb3R0bGUuXG4gKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gdGhyb3R0bGUgaW52b2NhdGlvbnMgdG8uXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz10cnVlXVxuICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIGxlYWRpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgdGhyb3R0bGVkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiAvLyBBdm9pZCBleGNlc3NpdmVseSB1cGRhdGluZyB0aGUgcG9zaXRpb24gd2hpbGUgc2Nyb2xsaW5nLlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3Njcm9sbCcsIF8udGhyb3R0bGUodXBkYXRlUG9zaXRpb24sIDEwMCkpO1xuICpcbiAqIC8vIEludm9rZSBgcmVuZXdUb2tlbmAgd2hlbiB0aGUgY2xpY2sgZXZlbnQgaXMgZmlyZWQsIGJ1dCBub3QgbW9yZSB0aGFuIG9uY2UgZXZlcnkgNSBtaW51dGVzLlxuICogdmFyIHRocm90dGxlZCA9IF8udGhyb3R0bGUocmVuZXdUb2tlbiwgMzAwMDAwLCB7ICd0cmFpbGluZyc6IGZhbHNlIH0pO1xuICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIHRocm90dGxlZCk7XG4gKlxuICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyB0aHJvdHRsZWQgaW52b2NhdGlvbi5cbiAqIGpRdWVyeSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIHRocm90dGxlZC5jYW5jZWwpO1xuICovXG5mdW5jdGlvbiB0aHJvdHRsZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gIHZhciBsZWFkaW5nID0gdHJ1ZSxcbiAgICAgIHRyYWlsaW5nID0gdHJ1ZTtcblxuICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICBsZWFkaW5nID0gJ2xlYWRpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMubGVhZGluZyA6IGxlYWRpbmc7XG4gICAgdHJhaWxpbmcgPSAndHJhaWxpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMudHJhaWxpbmcgOiB0cmFpbGluZztcbiAgfVxuICByZXR1cm4gZGVib3VuY2UoZnVuYywgd2FpdCwge1xuICAgICdsZWFkaW5nJzogbGVhZGluZyxcbiAgICAnbWF4V2FpdCc6IHdhaXQsXG4gICAgJ3RyYWlsaW5nJzogdHJhaWxpbmdcbiAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdGhyb3R0bGU7XG4iLCJ2YXIgZnJlZUdsb2JhbCA9IHJlcXVpcmUoJy4vX2ZyZWVHbG9iYWwnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJvb3Q7XG4iLCJ2YXIgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cbm1vZHVsZS5leHBvcnRzID0gU3ltYm9sO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBSaWdodEFycm93ID0gZnVuY3Rpb24gUmlnaHRBcnJvdyhwcm9wcykge1xuICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwic3ZnXCIsIHByb3BzLCBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk02OTQgMjQybDI0OSAyNTBjMTIgMTEgMTIgMjEgMSAzMkw2OTQgNzczYy01IDUtMTAgNy0xNiA3cy0xMS0yLTE2LTdjLTExLTExLTExLTIxIDAtMzJsMjEwLTIxMEg2OGMtMTMgMC0yMy0xMC0yMy0yM3MxMC0yMyAyMy0yM2g4MDZMNjYyIDI3NWMtMjEtMjIgMTEtNTQgMzItMzN6XCJcbiAgfSkpO1xufTtcblxuUmlnaHRBcnJvdy5kZWZhdWx0UHJvcHMgPSB7XG4gIGZvY3VzYWJsZTogXCJmYWxzZVwiLFxuICB2aWV3Qm94OiBcIjAgMCAxMDAwIDEwMDBcIlxufTtcbnZhciBfZGVmYXVsdCA9IFJpZ2h0QXJyb3c7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgTGVmdEFycm93ID0gZnVuY3Rpb24gTGVmdEFycm93KHByb3BzKSB7XG4gIHJldHVybiBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJzdmdcIiwgcHJvcHMsIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcInBhdGhcIiwge1xuICAgIGQ6IFwiTTMzNiAyNzVMMTI2IDQ4NWg4MDZjMTMgMCAyMyAxMCAyMyAyM3MtMTAgMjMtMjMgMjNIMTI2bDIxMCAyMTBjMTEgMTEgMTEgMjEgMCAzMi01IDUtMTAgNy0xNiA3cy0xMS0yLTE2LTdMNTUgNTI0Yy0xMS0xMS0xMS0yMSAwLTMybDI0OS0yNDljMjEtMjIgNTMgMTAgMzIgMzJ6XCJcbiAgfSkpO1xufTtcblxuTGVmdEFycm93LmRlZmF1bHRQcm9wcyA9IHtcbiAgZm9jdXNhYmxlOiBcImZhbHNlXCIsXG4gIHZpZXdCb3g6IFwiMCAwIDEwMDAgMTAwMFwiXG59O1xudmFyIF9kZWZhdWx0ID0gTGVmdEFycm93O1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIENhbGVuZGFySWNvbiA9IGZ1bmN0aW9uIENhbGVuZGFySWNvbihwcm9wcykge1xuICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwic3ZnXCIsIHByb3BzLCBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIm0xMDcgMTM5M2gyNDF2LTI0MWgtMjQxem0yOTUgMGgyNjh2LTI0MWgtMjY4em0tMjk1LTI5NWgyNDF2LTI2OGgtMjQxem0yOTUgMGgyNjh2LTI2OGgtMjY4em0tMjk1LTMyMWgyNDF2LTI0MWgtMjQxem02MTYgNjE2aDI2OHYtMjQxaC0yNjh6bS0zMjEtNjE2aDI2OHYtMjQxaC0yNjh6bTY0MyA2MTZoMjQxdi0yNDFoLTI0MXptLTMyMi0yOTVoMjY4di0yNjhoLTI2OHptLTI5NC03MjN2LTI0MWMwLTctMy0xNC04LTE5LTYtNS0xMi04LTE5LThoLTU0Yy03IDAtMTMgMy0xOSA4LTUgNS04IDEyLTggMTl2MjQxYzAgNyAzIDE0IDggMTkgNiA1IDEyIDggMTkgOGg1NGM3IDAgMTMtMyAxOS04IDUtNSA4LTEyIDgtMTl6bTYxNiA3MjNoMjQxdi0yNjhoLTI0MXptLTMyMi0zMjFoMjY4di0yNDFoLTI2OHptMzIyIDBoMjQxdi0yNDFoLTI0MXptMjctNDAydi0yNDFjMC03LTMtMTQtOC0xOS02LTUtMTItOC0xOS04aC01NGMtNyAwLTEzIDMtMTkgOC01IDUtOCAxMi04IDE5djI0MWMwIDcgMyAxNCA4IDE5IDYgNSAxMiA4IDE5IDhoNTRjNyAwIDEzLTMgMTktOCA1LTUgOC0xMiA4LTE5em0zMjEtNTR2MTA3MmMwIDI5LTExIDU0LTMyIDc1cy00NiAzMi03NSAzMmgtMTE3OWMtMjkgMC01NC0xMS03NS0zMnMtMzItNDYtMzItNzV2LTEwNzJjMC0yOSAxMS01NCAzMi03NXM0Ni0zMiA3NS0zMmgxMDd2LTgwYzAtMzcgMTMtNjggNDAtOTVzNTctMzkgOTQtMzloNTRjMzcgMCA2OCAxMyA5NSAzOSAyNiAyNiAzOSA1OCAzOSA5NXY4MGgzMjF2LTgwYzAtMzcgMTMtNjkgNDAtOTUgMjYtMjYgNTctMzkgOTQtMzloNTRjMzcgMCA2OCAxMyA5NCAzOXM0MCA1OCA0MCA5NXY4MGgxMDdjMjkgMCA1NCAxMSA3NSAzMnMzMiA0NiAzMiA3NXpcIlxuICB9KSk7XG59O1xuXG5DYWxlbmRhckljb24uZGVmYXVsdFByb3BzID0ge1xuICBmb2N1c2FibGU6IFwiZmFsc2VcIixcbiAgdmlld0JveDogXCIwIDAgMTM5My4xIDE1MDBcIlxufTtcbnZhciBfZGVmYXVsdCA9IENhbGVuZGFySWNvbjtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfZW56eW1lU2hhbGxvd0VxdWFsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZW56eW1lLXNoYWxsb3ctZXF1YWxcIikpO1xuXG52YXIgX3NsaWNlZFRvQXJyYXkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9zbGljZWRUb0FycmF5XCIpKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpO1xuXG52YXIgX2luaGVyaXRzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9yZWFjdE1vbWVudFByb3B0eXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LW1vbWVudC1wcm9wdHlwZXNcIikpO1xuXG52YXIgX2FpcmJuYlByb3BUeXBlcyA9IHJlcXVpcmUoXCJhaXJibmItcHJvcC10eXBlc1wiKTtcblxudmFyIF9tb21lbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJtb21lbnRcIikpO1xuXG52YXIgX29iamVjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIm9iamVjdC52YWx1ZXNcIikpO1xuXG52YXIgX2lzVG91Y2hEZXZpY2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJpcy10b3VjaC1kZXZpY2VcIikpO1xuXG52YXIgX2RlZmF1bHRQaHJhc2VzID0gcmVxdWlyZShcIi4uL2RlZmF1bHRQaHJhc2VzXCIpO1xuXG52YXIgX2dldFBocmFzZVByb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2dldFBocmFzZVByb3BUeXBlc1wiKSk7XG5cbnZhciBfaXNJbmNsdXNpdmVseUFmdGVyRGF5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvaXNJbmNsdXNpdmVseUFmdGVyRGF5XCIpKTtcblxudmFyIF9pc05leHREYXkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9pc05leHREYXlcIikpO1xuXG52YXIgX2lzU2FtZURheSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2lzU2FtZURheVwiKSk7XG5cbnZhciBfaXNBZnRlckRheSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2lzQWZ0ZXJEYXlcIikpO1xuXG52YXIgX2lzQmVmb3JlRGF5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvaXNCZWZvcmVEYXlcIikpO1xuXG52YXIgX2lzUHJldmlvdXNEYXkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9pc1ByZXZpb3VzRGF5XCIpKTtcblxudmFyIF9nZXRWaXNpYmxlRGF5cyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2dldFZpc2libGVEYXlzXCIpKTtcblxudmFyIF9pc0RheVZpc2libGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9pc0RheVZpc2libGVcIikpO1xuXG52YXIgX2dldFNlbGVjdGVkRGF0ZU9mZnNldCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2dldFNlbGVjdGVkRGF0ZU9mZnNldFwiKSk7XG5cbnZhciBfdG9JU09EYXRlU3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvdG9JU09EYXRlU3RyaW5nXCIpKTtcblxudmFyIF9tb2RpZmllcnMgPSByZXF1aXJlKFwiLi4vdXRpbHMvbW9kaWZpZXJzXCIpO1xuXG52YXIgX0Rpc2FibGVkU2hhcGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zaGFwZXMvRGlzYWJsZWRTaGFwZVwiKSk7XG5cbnZhciBfRm9jdXNlZElucHV0U2hhcGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zaGFwZXMvRm9jdXNlZElucHV0U2hhcGVcIikpO1xuXG52YXIgX1Njcm9sbGFibGVPcmllbnRhdGlvblNoYXBlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc2hhcGVzL1Njcm9sbGFibGVPcmllbnRhdGlvblNoYXBlXCIpKTtcblxudmFyIF9EYXlPZldlZWtTaGFwZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3NoYXBlcy9EYXlPZldlZWtTaGFwZVwiKSk7XG5cbnZhciBfQ2FsZW5kYXJJbmZvUG9zaXRpb25TaGFwZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3NoYXBlcy9DYWxlbmRhckluZm9Qb3NpdGlvblNoYXBlXCIpKTtcblxudmFyIF9OYXZQb3NpdGlvblNoYXBlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc2hhcGVzL05hdlBvc2l0aW9uU2hhcGVcIikpO1xuXG52YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHNcIik7XG5cbnZhciBfRGF5UGlja2VyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9EYXlQaWNrZXJcIikpO1xuXG52YXIgX2dldFBvb2xlZE1vbWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2dldFBvb2xlZE1vbWVudFwiKSk7XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7ICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxudmFyIHByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfYWlyYm5iUHJvcFR5cGVzLmZvcmJpZEV4dHJhUHJvcHMpKHtcbiAgc3RhcnREYXRlOiBfcmVhY3RNb21lbnRQcm9wdHlwZXNbXCJkZWZhdWx0XCJdLm1vbWVudE9iaixcbiAgZW5kRGF0ZTogX3JlYWN0TW9tZW50UHJvcHR5cGVzW1wiZGVmYXVsdFwiXS5tb21lbnRPYmosXG4gIG9uRGF0ZXNDaGFuZ2U6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIHN0YXJ0RGF0ZU9mZnNldDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgZW5kRGF0ZU9mZnNldDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgbWluRGF0ZTogX3JlYWN0TW9tZW50UHJvcHR5cGVzW1wiZGVmYXVsdFwiXS5tb21lbnRPYmosXG4gIG1heERhdGU6IF9yZWFjdE1vbWVudFByb3B0eXBlc1tcImRlZmF1bHRcIl0ubW9tZW50T2JqLFxuICBmb2N1c2VkSW5wdXQ6IF9Gb2N1c2VkSW5wdXRTaGFwZVtcImRlZmF1bHRcIl0sXG4gIG9uRm9jdXNDaGFuZ2U6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIG9uQ2xvc2U6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIGtlZXBPcGVuT25EYXRlU2VsZWN0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBtaW5pbXVtTmlnaHRzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5udW1iZXIsXG4gIGRpc2FibGVkOiBfRGlzYWJsZWRTaGFwZVtcImRlZmF1bHRcIl0sXG4gIGlzT3V0c2lkZVJhbmdlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBpc0RheUJsb2NrZWQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIGlzRGF5SGlnaGxpZ2h0ZWQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIGdldE1pbk5pZ2h0c0ZvckhvdmVyRGF0ZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgZGF5c1Zpb2xhdGluZ01pbk5pZ2h0c0NhbkJlQ2xpY2tlZDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgLy8gRGF5UGlja2VyIHByb3BzXG4gIHJlbmRlck1vbnRoVGV4dDogKDAsIF9haXJibmJQcm9wVHlwZXMubXV0dWFsbHlFeGNsdXNpdmVQcm9wcykoX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYywgJ3JlbmRlck1vbnRoVGV4dCcsICdyZW5kZXJNb250aEVsZW1lbnQnKSxcbiAgcmVuZGVyTW9udGhFbGVtZW50OiAoMCwgX2FpcmJuYlByb3BUeXBlcy5tdXR1YWxseUV4Y2x1c2l2ZVByb3BzKShfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLCAncmVuZGVyTW9udGhUZXh0JywgJ3JlbmRlck1vbnRoRWxlbWVudCcpLFxuICByZW5kZXJXZWVrSGVhZGVyRWxlbWVudDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgZW5hYmxlT3V0c2lkZURheXM6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIG51bWJlck9mTW9udGhzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5udW1iZXIsXG4gIG9yaWVudGF0aW9uOiBfU2Nyb2xsYWJsZU9yaWVudGF0aW9uU2hhcGVbXCJkZWZhdWx0XCJdLFxuICB3aXRoUG9ydGFsOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBpbml0aWFsVmlzaWJsZU1vbnRoOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBoaWRlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgZGF5U2l6ZTogX2FpcmJuYlByb3BUeXBlcy5ub25OZWdhdGl2ZUludGVnZXIsXG4gIG5vQm9yZGVyOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICB2ZXJ0aWNhbEJvcmRlclNwYWNpbmc6IF9haXJibmJQcm9wVHlwZXMubm9uTmVnYXRpdmVJbnRlZ2VyLFxuICBob3Jpem9udGFsTW9udGhQYWRkaW5nOiBfYWlyYm5iUHJvcFR5cGVzLm5vbk5lZ2F0aXZlSW50ZWdlcixcbiAgZGF5UGlja2VyTmF2aWdhdGlvbklubGluZVN0eWxlczogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ub2JqZWN0LFxuICBuYXZQb3NpdGlvbjogX05hdlBvc2l0aW9uU2hhcGVbXCJkZWZhdWx0XCJdLFxuICBuYXZQcmV2OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ub2RlLFxuICBuYXZOZXh0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ub2RlLFxuICByZW5kZXJOYXZQcmV2QnV0dG9uOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICByZW5kZXJOYXZOZXh0QnV0dG9uOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBub05hdkJ1dHRvbnM6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIG5vTmF2TmV4dEJ1dHRvbjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgbm9OYXZQcmV2QnV0dG9uOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBvblByZXZNb250aENsaWNrOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvbk5leHRNb250aENsaWNrOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvbk91dHNpZGVDbGljazogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgcmVuZGVyQ2FsZW5kYXJEYXk6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIHJlbmRlckRheUNvbnRlbnRzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICByZW5kZXJDYWxlbmRhckluZm86IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIHJlbmRlcktleWJvYXJkU2hvcnRjdXRzQnV0dG9uOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICByZW5kZXJLZXlib2FyZFNob3J0Y3V0c1BhbmVsOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBjYWxlbmRhckluZm9Qb3NpdGlvbjogX0NhbGVuZGFySW5mb1Bvc2l0aW9uU2hhcGVbXCJkZWZhdWx0XCJdLFxuICBmaXJzdERheU9mV2VlazogX0RheU9mV2Vla1NoYXBlW1wiZGVmYXVsdFwiXSxcbiAgdmVydGljYWxIZWlnaHQ6IF9haXJibmJQcm9wVHlwZXMubm9uTmVnYXRpdmVJbnRlZ2VyLFxuICB0cmFuc2l0aW9uRHVyYXRpb246IF9haXJibmJQcm9wVHlwZXMubm9uTmVnYXRpdmVJbnRlZ2VyLFxuICAvLyBhY2Nlc3NpYmlsaXR5XG4gIG9uQmx1cjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgaXNGb2N1c2VkOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBzaG93S2V5Ym9hcmRTaG9ydGN1dHM6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIG9uVGFiOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvblNoaWZ0VGFiOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICAvLyBpMThuXG4gIG1vbnRoRm9ybWF0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcsXG4gIHdlZWtEYXlGb3JtYXQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZyxcbiAgcGhyYXNlczogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc2hhcGUoKDAsIF9nZXRQaHJhc2VQcm9wVHlwZXNbXCJkZWZhdWx0XCJdKShfZGVmYXVsdFBocmFzZXMuRGF5UGlja2VyUGhyYXNlcykpLFxuICBkYXlBcmlhTGFiZWxGb3JtYXQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZyxcbiAgaXNSVEw6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2xcbn0pIDoge307XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBzdGFydERhdGU6IHVuZGVmaW5lZCxcbiAgLy8gVE9ETzogdXNlIG51bGxcbiAgZW5kRGF0ZTogdW5kZWZpbmVkLFxuICAvLyBUT0RPOiB1c2UgbnVsbFxuICBtaW5EYXRlOiBudWxsLFxuICBtYXhEYXRlOiBudWxsLFxuICBvbkRhdGVzQ2hhbmdlOiBmdW5jdGlvbiBvbkRhdGVzQ2hhbmdlKCkge30sXG4gIHN0YXJ0RGF0ZU9mZnNldDogdW5kZWZpbmVkLFxuICBlbmREYXRlT2Zmc2V0OiB1bmRlZmluZWQsXG4gIGZvY3VzZWRJbnB1dDogbnVsbCxcbiAgb25Gb2N1c0NoYW5nZTogZnVuY3Rpb24gb25Gb2N1c0NoYW5nZSgpIHt9LFxuICBvbkNsb3NlOiBmdW5jdGlvbiBvbkNsb3NlKCkge30sXG4gIGtlZXBPcGVuT25EYXRlU2VsZWN0OiBmYWxzZSxcbiAgbWluaW11bU5pZ2h0czogMSxcbiAgZGlzYWJsZWQ6IGZhbHNlLFxuICBpc091dHNpZGVSYW5nZTogZnVuY3Rpb24gaXNPdXRzaWRlUmFuZ2UoKSB7fSxcbiAgaXNEYXlCbG9ja2VkOiBmdW5jdGlvbiBpc0RheUJsb2NrZWQoKSB7fSxcbiAgaXNEYXlIaWdobGlnaHRlZDogZnVuY3Rpb24gaXNEYXlIaWdobGlnaHRlZCgpIHt9LFxuICBnZXRNaW5OaWdodHNGb3JIb3ZlckRhdGU6IGZ1bmN0aW9uIGdldE1pbk5pZ2h0c0ZvckhvdmVyRGF0ZSgpIHt9LFxuICBkYXlzVmlvbGF0aW5nTWluTmlnaHRzQ2FuQmVDbGlja2VkOiBmYWxzZSxcbiAgLy8gRGF5UGlja2VyIHByb3BzXG4gIHJlbmRlck1vbnRoVGV4dDogbnVsbCxcbiAgcmVuZGVyV2Vla0hlYWRlckVsZW1lbnQ6IG51bGwsXG4gIGVuYWJsZU91dHNpZGVEYXlzOiBmYWxzZSxcbiAgbnVtYmVyT2ZNb250aHM6IDEsXG4gIG9yaWVudGF0aW9uOiBfY29uc3RhbnRzLkhPUklaT05UQUxfT1JJRU5UQVRJT04sXG4gIHdpdGhQb3J0YWw6IGZhbHNlLFxuICBoaWRlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbDogZmFsc2UsXG4gIGluaXRpYWxWaXNpYmxlTW9udGg6IG51bGwsXG4gIGRheVNpemU6IF9jb25zdGFudHMuREFZX1NJWkUsXG4gIGRheVBpY2tlck5hdmlnYXRpb25JbmxpbmVTdHlsZXM6IG51bGwsXG4gIG5hdlBvc2l0aW9uOiBfY29uc3RhbnRzLk5BVl9QT1NJVElPTl9UT1AsXG4gIG5hdlByZXY6IG51bGwsXG4gIG5hdk5leHQ6IG51bGwsXG4gIHJlbmRlck5hdlByZXZCdXR0b246IG51bGwsXG4gIHJlbmRlck5hdk5leHRCdXR0b246IG51bGwsXG4gIG5vTmF2QnV0dG9uczogZmFsc2UsXG4gIG5vTmF2TmV4dEJ1dHRvbjogZmFsc2UsXG4gIG5vTmF2UHJldkJ1dHRvbjogZmFsc2UsXG4gIG9uUHJldk1vbnRoQ2xpY2s6IGZ1bmN0aW9uIG9uUHJldk1vbnRoQ2xpY2soKSB7fSxcbiAgb25OZXh0TW9udGhDbGljazogZnVuY3Rpb24gb25OZXh0TW9udGhDbGljaygpIHt9LFxuICBvbk91dHNpZGVDbGljazogZnVuY3Rpb24gb25PdXRzaWRlQ2xpY2soKSB7fSxcbiAgcmVuZGVyQ2FsZW5kYXJEYXk6IHVuZGVmaW5lZCxcbiAgcmVuZGVyRGF5Q29udGVudHM6IG51bGwsXG4gIHJlbmRlckNhbGVuZGFySW5mbzogbnVsbCxcbiAgcmVuZGVyTW9udGhFbGVtZW50OiBudWxsLFxuICByZW5kZXJLZXlib2FyZFNob3J0Y3V0c0J1dHRvbjogdW5kZWZpbmVkLFxuICByZW5kZXJLZXlib2FyZFNob3J0Y3V0c1BhbmVsOiB1bmRlZmluZWQsXG4gIGNhbGVuZGFySW5mb1Bvc2l0aW9uOiBfY29uc3RhbnRzLklORk9fUE9TSVRJT05fQk9UVE9NLFxuICBmaXJzdERheU9mV2VlazogbnVsbCxcbiAgdmVydGljYWxIZWlnaHQ6IG51bGwsXG4gIG5vQm9yZGVyOiBmYWxzZSxcbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiB1bmRlZmluZWQsXG4gIHZlcnRpY2FsQm9yZGVyU3BhY2luZzogdW5kZWZpbmVkLFxuICBob3Jpem9udGFsTW9udGhQYWRkaW5nOiAxMyxcbiAgLy8gYWNjZXNzaWJpbGl0eVxuICBvbkJsdXI6IGZ1bmN0aW9uIG9uQmx1cigpIHt9LFxuICBpc0ZvY3VzZWQ6IGZhbHNlLFxuICBzaG93S2V5Ym9hcmRTaG9ydGN1dHM6IGZhbHNlLFxuICBvblRhYjogZnVuY3Rpb24gb25UYWIoKSB7fSxcbiAgb25TaGlmdFRhYjogZnVuY3Rpb24gb25TaGlmdFRhYigpIHt9LFxuICAvLyBpMThuXG4gIG1vbnRoRm9ybWF0OiAnTU1NTSBZWVlZJyxcbiAgd2Vla0RheUZvcm1hdDogJ2RkJyxcbiAgcGhyYXNlczogX2RlZmF1bHRQaHJhc2VzLkRheVBpY2tlclBocmFzZXMsXG4gIGRheUFyaWFMYWJlbEZvcm1hdDogdW5kZWZpbmVkLFxuICBpc1JUTDogZmFsc2Vcbn07XG5cbnZhciBnZXRDaG9vc2VBdmFpbGFibGVEYXRlUGhyYXNlID0gZnVuY3Rpb24gZ2V0Q2hvb3NlQXZhaWxhYmxlRGF0ZVBocmFzZShwaHJhc2VzLCBmb2N1c2VkSW5wdXQpIHtcbiAgaWYgKGZvY3VzZWRJbnB1dCA9PT0gX2NvbnN0YW50cy5TVEFSVF9EQVRFKSB7XG4gICAgcmV0dXJuIHBocmFzZXMuY2hvb3NlQXZhaWxhYmxlU3RhcnREYXRlO1xuICB9XG5cbiAgaWYgKGZvY3VzZWRJbnB1dCA9PT0gX2NvbnN0YW50cy5FTkRfREFURSkge1xuICAgIHJldHVybiBwaHJhc2VzLmNob29zZUF2YWlsYWJsZUVuZERhdGU7XG4gIH1cblxuICByZXR1cm4gcGhyYXNlcy5jaG9vc2VBdmFpbGFibGVEYXRlO1xufTtcblxudmFyIERheVBpY2tlclJhbmdlQ29udHJvbGxlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX3JlZikge1xuICAoMCwgX2luaGVyaXRzTG9vc2UyW1wiZGVmYXVsdFwiXSkoRGF5UGlja2VyUmFuZ2VDb250cm9sbGVyLCBfcmVmKTtcbiAgdmFyIF9wcm90byA9IERheVBpY2tlclJhbmdlQ29udHJvbGxlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvWyFfcmVhY3RbXCJkZWZhdWx0XCJdLlB1cmVDb21wb25lbnQgJiYgXCJzaG91bGRDb21wb25lbnRVcGRhdGVcIl0gPSBmdW5jdGlvbiAobmV4dFByb3BzLCBuZXh0U3RhdGUpIHtcbiAgICByZXR1cm4gISgwLCBfZW56eW1lU2hhbGxvd0VxdWFsW1wiZGVmYXVsdFwiXSkodGhpcy5wcm9wcywgbmV4dFByb3BzKSB8fCAhKDAsIF9lbnp5bWVTaGFsbG93RXF1YWxbXCJkZWZhdWx0XCJdKSh0aGlzLnN0YXRlLCBuZXh0U3RhdGUpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIERheVBpY2tlclJhbmdlQ29udHJvbGxlcihwcm9wcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX3JlZi5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgIF90aGlzLmlzVG91Y2hEZXZpY2UgPSAoMCwgX2lzVG91Y2hEZXZpY2VbXCJkZWZhdWx0XCJdKSgpO1xuICAgIF90aGlzLnRvZGF5ID0gKDAsIF9tb21lbnRbXCJkZWZhdWx0XCJdKSgpO1xuICAgIF90aGlzLm1vZGlmaWVycyA9IHtcbiAgICAgIHRvZGF5OiBmdW5jdGlvbiB0b2RheShkYXkpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmlzVG9kYXkoZGF5KTtcbiAgICAgIH0sXG4gICAgICBibG9ja2VkOiBmdW5jdGlvbiBibG9ja2VkKGRheSkge1xuICAgICAgICByZXR1cm4gX3RoaXMuaXNCbG9ja2VkKGRheSk7XG4gICAgICB9LFxuICAgICAgJ2Jsb2NrZWQtY2FsZW5kYXInOiBmdW5jdGlvbiBibG9ja2VkQ2FsZW5kYXIoZGF5KSB7XG4gICAgICAgIHJldHVybiBwcm9wcy5pc0RheUJsb2NrZWQoZGF5KTtcbiAgICAgIH0sXG4gICAgICAnYmxvY2tlZC1vdXQtb2YtcmFuZ2UnOiBmdW5jdGlvbiBibG9ja2VkT3V0T2ZSYW5nZShkYXkpIHtcbiAgICAgICAgcmV0dXJuIHByb3BzLmlzT3V0c2lkZVJhbmdlKGRheSk7XG4gICAgICB9LFxuICAgICAgJ2hpZ2hsaWdodGVkLWNhbGVuZGFyJzogZnVuY3Rpb24gaGlnaGxpZ2h0ZWRDYWxlbmRhcihkYXkpIHtcbiAgICAgICAgcmV0dXJuIHByb3BzLmlzRGF5SGlnaGxpZ2h0ZWQoZGF5KTtcbiAgICAgIH0sXG4gICAgICB2YWxpZDogZnVuY3Rpb24gdmFsaWQoZGF5KSB7XG4gICAgICAgIHJldHVybiAhX3RoaXMuaXNCbG9ja2VkKGRheSk7XG4gICAgICB9LFxuICAgICAgJ3NlbGVjdGVkLXN0YXJ0JzogZnVuY3Rpb24gc2VsZWN0ZWRTdGFydChkYXkpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmlzU3RhcnREYXRlKGRheSk7XG4gICAgICB9LFxuICAgICAgJ3NlbGVjdGVkLWVuZCc6IGZ1bmN0aW9uIHNlbGVjdGVkRW5kKGRheSkge1xuICAgICAgICByZXR1cm4gX3RoaXMuaXNFbmREYXRlKGRheSk7XG4gICAgICB9LFxuICAgICAgJ2Jsb2NrZWQtbWluaW11bS1uaWdodHMnOiBmdW5jdGlvbiBibG9ja2VkTWluaW11bU5pZ2h0cyhkYXkpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmRvZXNOb3RNZWV0TWluaW11bU5pZ2h0cyhkYXkpO1xuICAgICAgfSxcbiAgICAgICdzZWxlY3RlZC1zcGFuJzogZnVuY3Rpb24gc2VsZWN0ZWRTcGFuKGRheSkge1xuICAgICAgICByZXR1cm4gX3RoaXMuaXNJblNlbGVjdGVkU3BhbihkYXkpO1xuICAgICAgfSxcbiAgICAgICdsYXN0LWluLXJhbmdlJzogZnVuY3Rpb24gbGFzdEluUmFuZ2UoZGF5KSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5pc0xhc3RJblJhbmdlKGRheSk7XG4gICAgICB9LFxuICAgICAgaG92ZXJlZDogZnVuY3Rpb24gaG92ZXJlZChkYXkpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmlzSG92ZXJlZChkYXkpO1xuICAgICAgfSxcbiAgICAgICdob3ZlcmVkLXNwYW4nOiBmdW5jdGlvbiBob3ZlcmVkU3BhbihkYXkpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmlzSW5Ib3ZlcmVkU3BhbihkYXkpO1xuICAgICAgfSxcbiAgICAgICdob3ZlcmVkLW9mZnNldCc6IGZ1bmN0aW9uIGhvdmVyZWRPZmZzZXQoZGF5KSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5pc0luSG92ZXJlZFNwYW4oZGF5KTtcbiAgICAgIH0sXG4gICAgICAnYWZ0ZXItaG92ZXJlZC1zdGFydCc6IGZ1bmN0aW9uIGFmdGVySG92ZXJlZFN0YXJ0KGRheSkge1xuICAgICAgICByZXR1cm4gX3RoaXMuaXNEYXlBZnRlckhvdmVyZWRTdGFydERhdGUoZGF5KTtcbiAgICAgIH0sXG4gICAgICAnZmlyc3QtZGF5LW9mLXdlZWsnOiBmdW5jdGlvbiBmaXJzdERheU9mV2VlayhkYXkpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmlzRmlyc3REYXlPZldlZWsoZGF5KTtcbiAgICAgIH0sXG4gICAgICAnbGFzdC1kYXktb2Ytd2Vlayc6IGZ1bmN0aW9uIGxhc3REYXlPZldlZWsoZGF5KSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5pc0xhc3REYXlPZldlZWsoZGF5KTtcbiAgICAgIH0sXG4gICAgICAnaG92ZXJlZC1zdGFydC1maXJzdC1wb3NzaWJsZS1lbmQnOiBmdW5jdGlvbiBob3ZlcmVkU3RhcnRGaXJzdFBvc3NpYmxlRW5kKGRheSwgaG92ZXJEYXRlKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5pc0ZpcnN0UG9zc2libGVFbmREYXRlRm9ySG92ZXJlZFN0YXJ0RGF0ZShkYXksIGhvdmVyRGF0ZSk7XG4gICAgICB9LFxuICAgICAgJ2hvdmVyZWQtc3RhcnQtYmxvY2tlZC1taW5pbXVtLW5pZ2h0cyc6IGZ1bmN0aW9uIGhvdmVyZWRTdGFydEJsb2NrZWRNaW5pbXVtTmlnaHRzKGRheSwgaG92ZXJEYXRlKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5kb2VzTm90TWVldE1pbk5pZ2h0c0ZvckhvdmVyZWRTdGFydERhdGUoZGF5LCBob3ZlckRhdGUpO1xuICAgICAgfSxcbiAgICAgICdiZWZvcmUtaG92ZXJlZC1lbmQnOiBmdW5jdGlvbiBiZWZvcmVIb3ZlcmVkRW5kKGRheSkge1xuICAgICAgICByZXR1cm4gX3RoaXMuaXNEYXlCZWZvcmVIb3ZlcmVkRW5kRGF0ZShkYXkpO1xuICAgICAgfSxcbiAgICAgICduby1zZWxlY3RlZC1zdGFydC1iZWZvcmUtc2VsZWN0ZWQtZW5kJzogZnVuY3Rpb24gbm9TZWxlY3RlZFN0YXJ0QmVmb3JlU2VsZWN0ZWRFbmQoZGF5KSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5iZWZvcmVTZWxlY3RlZEVuZChkYXkpICYmICFwcm9wcy5zdGFydERhdGU7XG4gICAgICB9LFxuICAgICAgJ3NlbGVjdGVkLXN0YXJ0LWluLWhvdmVyZWQtc3Bhbic6IGZ1bmN0aW9uIHNlbGVjdGVkU3RhcnRJbkhvdmVyZWRTcGFuKGRheSwgaG92ZXJEYXRlKSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5pc1N0YXJ0RGF0ZShkYXkpICYmICgwLCBfaXNBZnRlckRheVtcImRlZmF1bHRcIl0pKGhvdmVyRGF0ZSwgZGF5KTtcbiAgICAgIH0sXG4gICAgICAnc2VsZWN0ZWQtc3RhcnQtbm8tc2VsZWN0ZWQtZW5kJzogZnVuY3Rpb24gc2VsZWN0ZWRTdGFydE5vU2VsZWN0ZWRFbmQoZGF5KSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5pc1N0YXJ0RGF0ZShkYXkpICYmICFwcm9wcy5lbmREYXRlO1xuICAgICAgfSxcbiAgICAgICdzZWxlY3RlZC1lbmQtbm8tc2VsZWN0ZWQtc3RhcnQnOiBmdW5jdGlvbiBzZWxlY3RlZEVuZE5vU2VsZWN0ZWRTdGFydChkYXkpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmlzRW5kRGF0ZShkYXkpICYmICFwcm9wcy5zdGFydERhdGU7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciBfdGhpcyRnZXRTdGF0ZUZvck5ld00gPSBfdGhpcy5nZXRTdGF0ZUZvck5ld01vbnRoKHByb3BzKSxcbiAgICAgICAgY3VycmVudE1vbnRoID0gX3RoaXMkZ2V0U3RhdGVGb3JOZXdNLmN1cnJlbnRNb250aCxcbiAgICAgICAgdmlzaWJsZURheXMgPSBfdGhpcyRnZXRTdGF0ZUZvck5ld00udmlzaWJsZURheXM7IC8vIGluaXRpYWxpemUgcGhyYXNlc1xuICAgIC8vIHNldCB0aGUgYXBwcm9wcmlhdGUgQ2FsZW5kYXJEYXkgcGhyYXNlIGJhc2VkIG9uIGZvY3VzZWRJbnB1dFxuXG5cbiAgICB2YXIgY2hvb3NlQXZhaWxhYmxlRGF0ZSA9IGdldENob29zZUF2YWlsYWJsZURhdGVQaHJhc2UocHJvcHMucGhyYXNlcywgcHJvcHMuZm9jdXNlZElucHV0KTtcbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGhvdmVyRGF0ZTogbnVsbCxcbiAgICAgIGN1cnJlbnRNb250aDogY3VycmVudE1vbnRoLFxuICAgICAgcGhyYXNlczogX29iamVjdFNwcmVhZCh7fSwgcHJvcHMucGhyYXNlcywge1xuICAgICAgICBjaG9vc2VBdmFpbGFibGVEYXRlOiBjaG9vc2VBdmFpbGFibGVEYXRlXG4gICAgICB9KSxcbiAgICAgIHZpc2libGVEYXlzOiB2aXNpYmxlRGF5cyxcbiAgICAgIGRpc2FibGVQcmV2OiBfdGhpcy5zaG91bGREaXNhYmxlTW9udGhOYXZpZ2F0aW9uKHByb3BzLm1pbkRhdGUsIGN1cnJlbnRNb250aCksXG4gICAgICBkaXNhYmxlTmV4dDogX3RoaXMuc2hvdWxkRGlzYWJsZU1vbnRoTmF2aWdhdGlvbihwcm9wcy5tYXhEYXRlLCBjdXJyZW50TW9udGgpXG4gICAgfTtcbiAgICBfdGhpcy5vbkRheUNsaWNrID0gX3RoaXMub25EYXlDbGljay5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgX3RoaXMub25EYXlNb3VzZUVudGVyID0gX3RoaXMub25EYXlNb3VzZUVudGVyLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5vbkRheU1vdXNlTGVhdmUgPSBfdGhpcy5vbkRheU1vdXNlTGVhdmUuYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcykpO1xuICAgIF90aGlzLm9uUHJldk1vbnRoQ2xpY2sgPSBfdGhpcy5vblByZXZNb250aENsaWNrLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5vbk5leHRNb250aENsaWNrID0gX3RoaXMub25OZXh0TW9udGhDbGljay5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgX3RoaXMub25Nb250aENoYW5nZSA9IF90aGlzLm9uTW9udGhDaGFuZ2UuYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcykpO1xuICAgIF90aGlzLm9uWWVhckNoYW5nZSA9IF90aGlzLm9uWWVhckNoYW5nZS5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgX3RoaXMub25HZXROZXh0U2Nyb2xsYWJsZU1vbnRocyA9IF90aGlzLm9uR2V0TmV4dFNjcm9sbGFibGVNb250aHMuYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcykpO1xuICAgIF90aGlzLm9uR2V0UHJldlNjcm9sbGFibGVNb250aHMgPSBfdGhpcy5vbkdldFByZXZTY3JvbGxhYmxlTW9udGhzLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5nZXRGaXJzdEZvY3VzYWJsZURheSA9IF90aGlzLmdldEZpcnN0Rm9jdXNhYmxlRGF5LmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgc3RhcnREYXRlID0gbmV4dFByb3BzLnN0YXJ0RGF0ZSxcbiAgICAgICAgZW5kRGF0ZSA9IG5leHRQcm9wcy5lbmREYXRlLFxuICAgICAgICBmb2N1c2VkSW5wdXQgPSBuZXh0UHJvcHMuZm9jdXNlZElucHV0LFxuICAgICAgICBnZXRNaW5OaWdodHNGb3JIb3ZlckRhdGUgPSBuZXh0UHJvcHMuZ2V0TWluTmlnaHRzRm9ySG92ZXJEYXRlLFxuICAgICAgICBtaW5pbXVtTmlnaHRzID0gbmV4dFByb3BzLm1pbmltdW1OaWdodHMsXG4gICAgICAgIGlzT3V0c2lkZVJhbmdlID0gbmV4dFByb3BzLmlzT3V0c2lkZVJhbmdlLFxuICAgICAgICBpc0RheUJsb2NrZWQgPSBuZXh0UHJvcHMuaXNEYXlCbG9ja2VkLFxuICAgICAgICBpc0RheUhpZ2hsaWdodGVkID0gbmV4dFByb3BzLmlzRGF5SGlnaGxpZ2h0ZWQsXG4gICAgICAgIHBocmFzZXMgPSBuZXh0UHJvcHMucGhyYXNlcyxcbiAgICAgICAgaW5pdGlhbFZpc2libGVNb250aCA9IG5leHRQcm9wcy5pbml0aWFsVmlzaWJsZU1vbnRoLFxuICAgICAgICBudW1iZXJPZk1vbnRocyA9IG5leHRQcm9wcy5udW1iZXJPZk1vbnRocyxcbiAgICAgICAgZW5hYmxlT3V0c2lkZURheXMgPSBuZXh0UHJvcHMuZW5hYmxlT3V0c2lkZURheXM7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgcHJldlN0YXJ0RGF0ZSA9IF90aGlzJHByb3BzLnN0YXJ0RGF0ZSxcbiAgICAgICAgcHJldkVuZERhdGUgPSBfdGhpcyRwcm9wcy5lbmREYXRlLFxuICAgICAgICBwcmV2Rm9jdXNlZElucHV0ID0gX3RoaXMkcHJvcHMuZm9jdXNlZElucHV0LFxuICAgICAgICBwcmV2TWluaW11bU5pZ2h0cyA9IF90aGlzJHByb3BzLm1pbmltdW1OaWdodHMsXG4gICAgICAgIHByZXZJc091dHNpZGVSYW5nZSA9IF90aGlzJHByb3BzLmlzT3V0c2lkZVJhbmdlLFxuICAgICAgICBwcmV2SXNEYXlCbG9ja2VkID0gX3RoaXMkcHJvcHMuaXNEYXlCbG9ja2VkLFxuICAgICAgICBwcmV2SXNEYXlIaWdobGlnaHRlZCA9IF90aGlzJHByb3BzLmlzRGF5SGlnaGxpZ2h0ZWQsXG4gICAgICAgIHByZXZQaHJhc2VzID0gX3RoaXMkcHJvcHMucGhyYXNlcyxcbiAgICAgICAgcHJldkluaXRpYWxWaXNpYmxlTW9udGggPSBfdGhpcyRwcm9wcy5pbml0aWFsVmlzaWJsZU1vbnRoLFxuICAgICAgICBwcmV2TnVtYmVyT2ZNb250aHMgPSBfdGhpcyRwcm9wcy5udW1iZXJPZk1vbnRocyxcbiAgICAgICAgcHJldkVuYWJsZU91dHNpZGVEYXlzID0gX3RoaXMkcHJvcHMuZW5hYmxlT3V0c2lkZURheXM7XG4gICAgdmFyIGhvdmVyRGF0ZSA9IHRoaXMuc3RhdGUuaG92ZXJEYXRlO1xuICAgIHZhciB2aXNpYmxlRGF5cyA9IHRoaXMuc3RhdGUudmlzaWJsZURheXM7XG4gICAgdmFyIHJlY29tcHV0ZU91dHNpZGVSYW5nZSA9IGZhbHNlO1xuICAgIHZhciByZWNvbXB1dGVEYXlCbG9ja2VkID0gZmFsc2U7XG4gICAgdmFyIHJlY29tcHV0ZURheUhpZ2hsaWdodGVkID0gZmFsc2U7XG5cbiAgICBpZiAoaXNPdXRzaWRlUmFuZ2UgIT09IHByZXZJc091dHNpZGVSYW5nZSkge1xuICAgICAgdGhpcy5tb2RpZmllcnNbJ2Jsb2NrZWQtb3V0LW9mLXJhbmdlJ10gPSBmdW5jdGlvbiAoZGF5KSB7XG4gICAgICAgIHJldHVybiBpc091dHNpZGVSYW5nZShkYXkpO1xuICAgICAgfTtcblxuICAgICAgcmVjb21wdXRlT3V0c2lkZVJhbmdlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoaXNEYXlCbG9ja2VkICE9PSBwcmV2SXNEYXlCbG9ja2VkKSB7XG4gICAgICB0aGlzLm1vZGlmaWVyc1snYmxvY2tlZC1jYWxlbmRhciddID0gZnVuY3Rpb24gKGRheSkge1xuICAgICAgICByZXR1cm4gaXNEYXlCbG9ja2VkKGRheSk7XG4gICAgICB9O1xuXG4gICAgICByZWNvbXB1dGVEYXlCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoaXNEYXlIaWdobGlnaHRlZCAhPT0gcHJldklzRGF5SGlnaGxpZ2h0ZWQpIHtcbiAgICAgIHRoaXMubW9kaWZpZXJzWydoaWdobGlnaHRlZC1jYWxlbmRhciddID0gZnVuY3Rpb24gKGRheSkge1xuICAgICAgICByZXR1cm4gaXNEYXlIaWdobGlnaHRlZChkYXkpO1xuICAgICAgfTtcblxuICAgICAgcmVjb21wdXRlRGF5SGlnaGxpZ2h0ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHZhciByZWNvbXB1dGVQcm9wTW9kaWZpZXJzID0gcmVjb21wdXRlT3V0c2lkZVJhbmdlIHx8IHJlY29tcHV0ZURheUJsb2NrZWQgfHwgcmVjb21wdXRlRGF5SGlnaGxpZ2h0ZWQ7XG4gICAgdmFyIGRpZFN0YXJ0RGF0ZUNoYW5nZSA9IHN0YXJ0RGF0ZSAhPT0gcHJldlN0YXJ0RGF0ZTtcbiAgICB2YXIgZGlkRW5kRGF0ZUNoYW5nZSA9IGVuZERhdGUgIT09IHByZXZFbmREYXRlO1xuICAgIHZhciBkaWRGb2N1c0NoYW5nZSA9IGZvY3VzZWRJbnB1dCAhPT0gcHJldkZvY3VzZWRJbnB1dDtcblxuICAgIGlmIChudW1iZXJPZk1vbnRocyAhPT0gcHJldk51bWJlck9mTW9udGhzIHx8IGVuYWJsZU91dHNpZGVEYXlzICE9PSBwcmV2RW5hYmxlT3V0c2lkZURheXMgfHwgaW5pdGlhbFZpc2libGVNb250aCAhPT0gcHJldkluaXRpYWxWaXNpYmxlTW9udGggJiYgIXByZXZGb2N1c2VkSW5wdXQgJiYgZGlkRm9jdXNDaGFuZ2UpIHtcbiAgICAgIHZhciBuZXdNb250aFN0YXRlID0gdGhpcy5nZXRTdGF0ZUZvck5ld01vbnRoKG5leHRQcm9wcyk7XG4gICAgICB2YXIgY3VycmVudE1vbnRoID0gbmV3TW9udGhTdGF0ZS5jdXJyZW50TW9udGg7XG4gICAgICB2aXNpYmxlRGF5cyA9IG5ld01vbnRoU3RhdGUudmlzaWJsZURheXM7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgY3VycmVudE1vbnRoOiBjdXJyZW50TW9udGgsXG4gICAgICAgIHZpc2libGVEYXlzOiB2aXNpYmxlRGF5c1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdmFyIG1vZGlmaWVycyA9IHt9O1xuXG4gICAgaWYgKGRpZFN0YXJ0RGF0ZUNoYW5nZSkge1xuICAgICAgbW9kaWZpZXJzID0gdGhpcy5kZWxldGVNb2RpZmllcihtb2RpZmllcnMsIHByZXZTdGFydERhdGUsICdzZWxlY3RlZC1zdGFydCcpO1xuICAgICAgbW9kaWZpZXJzID0gdGhpcy5hZGRNb2RpZmllcihtb2RpZmllcnMsIHN0YXJ0RGF0ZSwgJ3NlbGVjdGVkLXN0YXJ0Jyk7XG5cbiAgICAgIGlmIChwcmV2U3RhcnREYXRlKSB7XG4gICAgICAgIHZhciBzdGFydFNwYW4gPSBwcmV2U3RhcnREYXRlLmNsb25lKCkuYWRkKDEsICdkYXknKTtcbiAgICAgICAgdmFyIGVuZFNwYW4gPSBwcmV2U3RhcnREYXRlLmNsb25lKCkuYWRkKHByZXZNaW5pbXVtTmlnaHRzICsgMSwgJ2RheXMnKTtcbiAgICAgICAgbW9kaWZpZXJzID0gdGhpcy5kZWxldGVNb2RpZmllckZyb21SYW5nZShtb2RpZmllcnMsIHN0YXJ0U3BhbiwgZW5kU3BhbiwgJ2FmdGVyLWhvdmVyZWQtc3RhcnQnKTtcblxuICAgICAgICBpZiAoIWVuZERhdGUgfHwgIXByZXZFbmREYXRlKSB7XG4gICAgICAgICAgbW9kaWZpZXJzID0gdGhpcy5kZWxldGVNb2RpZmllcihtb2RpZmllcnMsIHByZXZTdGFydERhdGUsICdzZWxlY3RlZC1zdGFydC1uby1zZWxlY3RlZC1lbmQnKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIXByZXZTdGFydERhdGUgJiYgZW5kRGF0ZSAmJiBzdGFydERhdGUpIHtcbiAgICAgICAgbW9kaWZpZXJzID0gdGhpcy5kZWxldGVNb2RpZmllcihtb2RpZmllcnMsIGVuZERhdGUsICdzZWxlY3RlZC1lbmQtbm8tc2VsZWN0ZWQtc3RhcnQnKTtcbiAgICAgICAgbW9kaWZpZXJzID0gdGhpcy5kZWxldGVNb2RpZmllcihtb2RpZmllcnMsIGVuZERhdGUsICdzZWxlY3RlZC1lbmQtaW4taG92ZXJlZC1zcGFuJyk7XG4gICAgICAgICgwLCBfb2JqZWN0W1wiZGVmYXVsdFwiXSkodmlzaWJsZURheXMpLmZvckVhY2goZnVuY3Rpb24gKGRheXMpIHtcbiAgICAgICAgICBPYmplY3Qua2V5cyhkYXlzKS5mb3JFYWNoKGZ1bmN0aW9uIChkYXkpIHtcbiAgICAgICAgICAgIHZhciBtb21lbnRPYmogPSAoMCwgX21vbWVudFtcImRlZmF1bHRcIl0pKGRheSk7XG4gICAgICAgICAgICBtb2RpZmllcnMgPSBfdGhpczIuZGVsZXRlTW9kaWZpZXIobW9kaWZpZXJzLCBtb21lbnRPYmosICduby1zZWxlY3RlZC1zdGFydC1iZWZvcmUtc2VsZWN0ZWQtZW5kJyk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChkaWRFbmREYXRlQ2hhbmdlKSB7XG4gICAgICBtb2RpZmllcnMgPSB0aGlzLmRlbGV0ZU1vZGlmaWVyKG1vZGlmaWVycywgcHJldkVuZERhdGUsICdzZWxlY3RlZC1lbmQnKTtcbiAgICAgIG1vZGlmaWVycyA9IHRoaXMuYWRkTW9kaWZpZXIobW9kaWZpZXJzLCBlbmREYXRlLCAnc2VsZWN0ZWQtZW5kJyk7XG5cbiAgICAgIGlmIChwcmV2RW5kRGF0ZSAmJiAoIXN0YXJ0RGF0ZSB8fCAhcHJldlN0YXJ0RGF0ZSkpIHtcbiAgICAgICAgbW9kaWZpZXJzID0gdGhpcy5kZWxldGVNb2RpZmllcihtb2RpZmllcnMsIHByZXZFbmREYXRlLCAnc2VsZWN0ZWQtZW5kLW5vLXNlbGVjdGVkLXN0YXJ0Jyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGRpZFN0YXJ0RGF0ZUNoYW5nZSB8fCBkaWRFbmREYXRlQ2hhbmdlKSB7XG4gICAgICBpZiAocHJldlN0YXJ0RGF0ZSAmJiBwcmV2RW5kRGF0ZSkge1xuICAgICAgICBtb2RpZmllcnMgPSB0aGlzLmRlbGV0ZU1vZGlmaWVyRnJvbVJhbmdlKG1vZGlmaWVycywgcHJldlN0YXJ0RGF0ZSwgcHJldkVuZERhdGUuY2xvbmUoKS5hZGQoMSwgJ2RheScpLCAnc2VsZWN0ZWQtc3BhbicpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhcnREYXRlICYmIGVuZERhdGUpIHtcbiAgICAgICAgbW9kaWZpZXJzID0gdGhpcy5kZWxldGVNb2RpZmllckZyb21SYW5nZShtb2RpZmllcnMsIHN0YXJ0RGF0ZSwgZW5kRGF0ZS5jbG9uZSgpLmFkZCgxLCAnZGF5JyksICdob3ZlcmVkLXNwYW4nKTtcbiAgICAgICAgbW9kaWZpZXJzID0gdGhpcy5hZGRNb2RpZmllclRvUmFuZ2UobW9kaWZpZXJzLCBzdGFydERhdGUuY2xvbmUoKS5hZGQoMSwgJ2RheScpLCBlbmREYXRlLCAnc2VsZWN0ZWQtc3BhbicpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhcnREYXRlICYmICFlbmREYXRlKSB7XG4gICAgICAgIG1vZGlmaWVycyA9IHRoaXMuYWRkTW9kaWZpZXIobW9kaWZpZXJzLCBzdGFydERhdGUsICdzZWxlY3RlZC1zdGFydC1uby1zZWxlY3RlZC1lbmQnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGVuZERhdGUgJiYgIXN0YXJ0RGF0ZSkge1xuICAgICAgICBtb2RpZmllcnMgPSB0aGlzLmFkZE1vZGlmaWVyKG1vZGlmaWVycywgZW5kRGF0ZSwgJ3NlbGVjdGVkLWVuZC1uby1zZWxlY3RlZC1zdGFydCcpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXN0YXJ0RGF0ZSAmJiBlbmREYXRlKSB7XG4gICAgICAgICgwLCBfb2JqZWN0W1wiZGVmYXVsdFwiXSkodmlzaWJsZURheXMpLmZvckVhY2goZnVuY3Rpb24gKGRheXMpIHtcbiAgICAgICAgICBPYmplY3Qua2V5cyhkYXlzKS5mb3JFYWNoKGZ1bmN0aW9uIChkYXkpIHtcbiAgICAgICAgICAgIHZhciBtb21lbnRPYmogPSAoMCwgX21vbWVudFtcImRlZmF1bHRcIl0pKGRheSk7XG5cbiAgICAgICAgICAgIGlmICgoMCwgX2lzQmVmb3JlRGF5W1wiZGVmYXVsdFwiXSkobW9tZW50T2JqLCBlbmREYXRlKSkge1xuICAgICAgICAgICAgICBtb2RpZmllcnMgPSBfdGhpczIuYWRkTW9kaWZpZXIobW9kaWZpZXJzLCBtb21lbnRPYmosICduby1zZWxlY3RlZC1zdGFydC1iZWZvcmUtc2VsZWN0ZWQtZW5kJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghdGhpcy5pc1RvdWNoRGV2aWNlICYmIGRpZFN0YXJ0RGF0ZUNoYW5nZSAmJiBzdGFydERhdGUgJiYgIWVuZERhdGUpIHtcbiAgICAgIHZhciBfc3RhcnRTcGFuID0gc3RhcnREYXRlLmNsb25lKCkuYWRkKDEsICdkYXknKTtcblxuICAgICAgdmFyIF9lbmRTcGFuID0gc3RhcnREYXRlLmNsb25lKCkuYWRkKG1pbmltdW1OaWdodHMgKyAxLCAnZGF5cycpO1xuXG4gICAgICBtb2RpZmllcnMgPSB0aGlzLmFkZE1vZGlmaWVyVG9SYW5nZShtb2RpZmllcnMsIF9zdGFydFNwYW4sIF9lbmRTcGFuLCAnYWZ0ZXItaG92ZXJlZC1zdGFydCcpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5pc1RvdWNoRGV2aWNlICYmIGRpZEVuZERhdGVDaGFuZ2UgJiYgIXN0YXJ0RGF0ZSAmJiBlbmREYXRlKSB7XG4gICAgICB2YXIgX3N0YXJ0U3BhbjIgPSBlbmREYXRlLmNsb25lKCkuc3VidHJhY3QobWluaW11bU5pZ2h0cywgJ2RheXMnKTtcblxuICAgICAgdmFyIF9lbmRTcGFuMiA9IGVuZERhdGUuY2xvbmUoKTtcblxuICAgICAgbW9kaWZpZXJzID0gdGhpcy5hZGRNb2RpZmllclRvUmFuZ2UobW9kaWZpZXJzLCBfc3RhcnRTcGFuMiwgX2VuZFNwYW4yLCAnYmVmb3JlLWhvdmVyZWQtZW5kJyk7XG4gICAgfVxuXG4gICAgaWYgKHByZXZNaW5pbXVtTmlnaHRzID4gMCkge1xuICAgICAgaWYgKGRpZEZvY3VzQ2hhbmdlIHx8IGRpZFN0YXJ0RGF0ZUNoYW5nZSB8fCBtaW5pbXVtTmlnaHRzICE9PSBwcmV2TWluaW11bU5pZ2h0cykge1xuICAgICAgICB2YXIgX3N0YXJ0U3BhbjMgPSBwcmV2U3RhcnREYXRlIHx8IHRoaXMudG9kYXk7XG5cbiAgICAgICAgbW9kaWZpZXJzID0gdGhpcy5kZWxldGVNb2RpZmllckZyb21SYW5nZShtb2RpZmllcnMsIF9zdGFydFNwYW4zLCBfc3RhcnRTcGFuMy5jbG9uZSgpLmFkZChwcmV2TWluaW11bU5pZ2h0cywgJ2RheXMnKSwgJ2Jsb2NrZWQtbWluaW11bS1uaWdodHMnKTtcbiAgICAgICAgbW9kaWZpZXJzID0gdGhpcy5kZWxldGVNb2RpZmllckZyb21SYW5nZShtb2RpZmllcnMsIF9zdGFydFNwYW4zLCBfc3RhcnRTcGFuMy5jbG9uZSgpLmFkZChwcmV2TWluaW11bU5pZ2h0cywgJ2RheXMnKSwgJ2Jsb2NrZWQnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZGlkRm9jdXNDaGFuZ2UgfHwgcmVjb21wdXRlUHJvcE1vZGlmaWVycykge1xuICAgICAgKDAsIF9vYmplY3RbXCJkZWZhdWx0XCJdKSh2aXNpYmxlRGF5cykuZm9yRWFjaChmdW5jdGlvbiAoZGF5cykge1xuICAgICAgICBPYmplY3Qua2V5cyhkYXlzKS5mb3JFYWNoKGZ1bmN0aW9uIChkYXkpIHtcbiAgICAgICAgICB2YXIgbW9tZW50T2JqID0gKDAsIF9nZXRQb29sZWRNb21lbnRbXCJkZWZhdWx0XCJdKShkYXkpO1xuICAgICAgICAgIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICAgICAgICAgIGlmIChkaWRGb2N1c0NoYW5nZSB8fCByZWNvbXB1dGVPdXRzaWRlUmFuZ2UpIHtcbiAgICAgICAgICAgIGlmIChpc091dHNpZGVSYW5nZShtb21lbnRPYmopKSB7XG4gICAgICAgICAgICAgIG1vZGlmaWVycyA9IF90aGlzMi5hZGRNb2RpZmllcihtb2RpZmllcnMsIG1vbWVudE9iaiwgJ2Jsb2NrZWQtb3V0LW9mLXJhbmdlJyk7XG4gICAgICAgICAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBtb2RpZmllcnMgPSBfdGhpczIuZGVsZXRlTW9kaWZpZXIobW9kaWZpZXJzLCBtb21lbnRPYmosICdibG9ja2VkLW91dC1vZi1yYW5nZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChkaWRGb2N1c0NoYW5nZSB8fCByZWNvbXB1dGVEYXlCbG9ja2VkKSB7XG4gICAgICAgICAgICBpZiAoaXNEYXlCbG9ja2VkKG1vbWVudE9iaikpIHtcbiAgICAgICAgICAgICAgbW9kaWZpZXJzID0gX3RoaXMyLmFkZE1vZGlmaWVyKG1vZGlmaWVycywgbW9tZW50T2JqLCAnYmxvY2tlZC1jYWxlbmRhcicpO1xuICAgICAgICAgICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbW9kaWZpZXJzID0gX3RoaXMyLmRlbGV0ZU1vZGlmaWVyKG1vZGlmaWVycywgbW9tZW50T2JqLCAnYmxvY2tlZC1jYWxlbmRhcicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgICAgIG1vZGlmaWVycyA9IF90aGlzMi5hZGRNb2RpZmllcihtb2RpZmllcnMsIG1vbWVudE9iaiwgJ2Jsb2NrZWQnKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbW9kaWZpZXJzID0gX3RoaXMyLmRlbGV0ZU1vZGlmaWVyKG1vZGlmaWVycywgbW9tZW50T2JqLCAnYmxvY2tlZCcpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChkaWRGb2N1c0NoYW5nZSB8fCByZWNvbXB1dGVEYXlIaWdobGlnaHRlZCkge1xuICAgICAgICAgICAgaWYgKGlzRGF5SGlnaGxpZ2h0ZWQobW9tZW50T2JqKSkge1xuICAgICAgICAgICAgICBtb2RpZmllcnMgPSBfdGhpczIuYWRkTW9kaWZpZXIobW9kaWZpZXJzLCBtb21lbnRPYmosICdoaWdobGlnaHRlZC1jYWxlbmRhcicpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbW9kaWZpZXJzID0gX3RoaXMyLmRlbGV0ZU1vZGlmaWVyKG1vZGlmaWVycywgbW9tZW50T2JqLCAnaGlnaGxpZ2h0ZWQtY2FsZW5kYXInKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmlzVG91Y2hEZXZpY2UgJiYgZGlkRm9jdXNDaGFuZ2UgJiYgaG92ZXJEYXRlICYmICF0aGlzLmlzQmxvY2tlZChob3ZlckRhdGUpKSB7XG4gICAgICB2YXIgbWluTmlnaHRzRm9ySG92ZXJEYXRlID0gZ2V0TWluTmlnaHRzRm9ySG92ZXJEYXRlKGhvdmVyRGF0ZSk7XG5cbiAgICAgIGlmIChtaW5OaWdodHNGb3JIb3ZlckRhdGUgPiAwICYmIGZvY3VzZWRJbnB1dCA9PT0gX2NvbnN0YW50cy5FTkRfREFURSkge1xuICAgICAgICBtb2RpZmllcnMgPSB0aGlzLmRlbGV0ZU1vZGlmaWVyRnJvbVJhbmdlKG1vZGlmaWVycywgaG92ZXJEYXRlLmNsb25lKCkuYWRkKDEsICdkYXlzJyksIGhvdmVyRGF0ZS5jbG9uZSgpLmFkZChtaW5OaWdodHNGb3JIb3ZlckRhdGUsICdkYXlzJyksICdob3ZlcmVkLXN0YXJ0LWJsb2NrZWQtbWluaW11bS1uaWdodHMnKTtcbiAgICAgICAgbW9kaWZpZXJzID0gdGhpcy5kZWxldGVNb2RpZmllcihtb2RpZmllcnMsIGhvdmVyRGF0ZS5jbG9uZSgpLmFkZChtaW5OaWdodHNGb3JIb3ZlckRhdGUsICdkYXlzJyksICdob3ZlcmVkLXN0YXJ0LWZpcnN0LXBvc3NpYmxlLWVuZCcpO1xuICAgICAgfVxuXG4gICAgICBpZiAobWluTmlnaHRzRm9ySG92ZXJEYXRlID4gMCAmJiBmb2N1c2VkSW5wdXQgPT09IF9jb25zdGFudHMuU1RBUlRfREFURSkge1xuICAgICAgICBtb2RpZmllcnMgPSB0aGlzLmFkZE1vZGlmaWVyVG9SYW5nZShtb2RpZmllcnMsIGhvdmVyRGF0ZS5jbG9uZSgpLmFkZCgxLCAnZGF5cycpLCBob3ZlckRhdGUuY2xvbmUoKS5hZGQobWluTmlnaHRzRm9ySG92ZXJEYXRlLCAnZGF5cycpLCAnaG92ZXJlZC1zdGFydC1ibG9ja2VkLW1pbmltdW0tbmlnaHRzJyk7XG4gICAgICAgIG1vZGlmaWVycyA9IHRoaXMuYWRkTW9kaWZpZXIobW9kaWZpZXJzLCBob3ZlckRhdGUuY2xvbmUoKS5hZGQobWluTmlnaHRzRm9ySG92ZXJEYXRlLCAnZGF5cycpLCAnaG92ZXJlZC1zdGFydC1maXJzdC1wb3NzaWJsZS1lbmQnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobWluaW11bU5pZ2h0cyA+IDAgJiYgc3RhcnREYXRlICYmIGZvY3VzZWRJbnB1dCA9PT0gX2NvbnN0YW50cy5FTkRfREFURSkge1xuICAgICAgbW9kaWZpZXJzID0gdGhpcy5hZGRNb2RpZmllclRvUmFuZ2UobW9kaWZpZXJzLCBzdGFydERhdGUsIHN0YXJ0RGF0ZS5jbG9uZSgpLmFkZChtaW5pbXVtTmlnaHRzLCAnZGF5cycpLCAnYmxvY2tlZC1taW5pbXVtLW5pZ2h0cycpO1xuICAgICAgbW9kaWZpZXJzID0gdGhpcy5hZGRNb2RpZmllclRvUmFuZ2UobW9kaWZpZXJzLCBzdGFydERhdGUsIHN0YXJ0RGF0ZS5jbG9uZSgpLmFkZChtaW5pbXVtTmlnaHRzLCAnZGF5cycpLCAnYmxvY2tlZCcpO1xuICAgIH1cblxuICAgIHZhciB0b2RheSA9ICgwLCBfbW9tZW50W1wiZGVmYXVsdFwiXSkoKTtcblxuICAgIGlmICghKDAsIF9pc1NhbWVEYXlbXCJkZWZhdWx0XCJdKSh0aGlzLnRvZGF5LCB0b2RheSkpIHtcbiAgICAgIG1vZGlmaWVycyA9IHRoaXMuZGVsZXRlTW9kaWZpZXIobW9kaWZpZXJzLCB0aGlzLnRvZGF5LCAndG9kYXknKTtcbiAgICAgIG1vZGlmaWVycyA9IHRoaXMuYWRkTW9kaWZpZXIobW9kaWZpZXJzLCB0b2RheSwgJ3RvZGF5Jyk7XG4gICAgICB0aGlzLnRvZGF5ID0gdG9kYXk7XG4gICAgfVxuXG4gICAgaWYgKE9iamVjdC5rZXlzKG1vZGlmaWVycykubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHZpc2libGVEYXlzOiBfb2JqZWN0U3ByZWFkKHt9LCB2aXNpYmxlRGF5cywge30sIG1vZGlmaWVycylcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChkaWRGb2N1c0NoYW5nZSB8fCBwaHJhc2VzICE9PSBwcmV2UGhyYXNlcykge1xuICAgICAgLy8gc2V0IHRoZSBhcHByb3ByaWF0ZSBDYWxlbmRhckRheSBwaHJhc2UgYmFzZWQgb24gZm9jdXNlZElucHV0XG4gICAgICB2YXIgY2hvb3NlQXZhaWxhYmxlRGF0ZSA9IGdldENob29zZUF2YWlsYWJsZURhdGVQaHJhc2UocGhyYXNlcywgZm9jdXNlZElucHV0KTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBwaHJhc2VzOiBfb2JqZWN0U3ByZWFkKHt9LCBwaHJhc2VzLCB7XG4gICAgICAgICAgY2hvb3NlQXZhaWxhYmxlRGF0ZTogY2hvb3NlQXZhaWxhYmxlRGF0ZVxuICAgICAgICB9KVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5vbkRheUNsaWNrID0gZnVuY3Rpb24gb25EYXlDbGljayhkYXksIGUpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAga2VlcE9wZW5PbkRhdGVTZWxlY3QgPSBfdGhpcyRwcm9wczIua2VlcE9wZW5PbkRhdGVTZWxlY3QsXG4gICAgICAgIG1pbmltdW1OaWdodHMgPSBfdGhpcyRwcm9wczIubWluaW11bU5pZ2h0cyxcbiAgICAgICAgb25CbHVyID0gX3RoaXMkcHJvcHMyLm9uQmx1cixcbiAgICAgICAgZm9jdXNlZElucHV0ID0gX3RoaXMkcHJvcHMyLmZvY3VzZWRJbnB1dCxcbiAgICAgICAgb25Gb2N1c0NoYW5nZSA9IF90aGlzJHByb3BzMi5vbkZvY3VzQ2hhbmdlLFxuICAgICAgICBvbkNsb3NlID0gX3RoaXMkcHJvcHMyLm9uQ2xvc2UsXG4gICAgICAgIG9uRGF0ZXNDaGFuZ2UgPSBfdGhpcyRwcm9wczIub25EYXRlc0NoYW5nZSxcbiAgICAgICAgc3RhcnREYXRlT2Zmc2V0ID0gX3RoaXMkcHJvcHMyLnN0YXJ0RGF0ZU9mZnNldCxcbiAgICAgICAgZW5kRGF0ZU9mZnNldCA9IF90aGlzJHByb3BzMi5lbmREYXRlT2Zmc2V0LFxuICAgICAgICBkaXNhYmxlZCA9IF90aGlzJHByb3BzMi5kaXNhYmxlZCxcbiAgICAgICAgZGF5c1Zpb2xhdGluZ01pbk5pZ2h0c0NhbkJlQ2xpY2tlZCA9IF90aGlzJHByb3BzMi5kYXlzVmlvbGF0aW5nTWluTmlnaHRzQ2FuQmVDbGlja2VkO1xuICAgIGlmIChlKSBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgaWYgKHRoaXMuaXNCbG9ja2VkKGRheSwgIWRheXNWaW9sYXRpbmdNaW5OaWdodHNDYW5CZUNsaWNrZWQpKSByZXR1cm47XG4gICAgdmFyIF90aGlzJHByb3BzMyA9IHRoaXMucHJvcHMsXG4gICAgICAgIHN0YXJ0RGF0ZSA9IF90aGlzJHByb3BzMy5zdGFydERhdGUsXG4gICAgICAgIGVuZERhdGUgPSBfdGhpcyRwcm9wczMuZW5kRGF0ZTtcblxuICAgIGlmIChzdGFydERhdGVPZmZzZXQgfHwgZW5kRGF0ZU9mZnNldCkge1xuICAgICAgc3RhcnREYXRlID0gKDAsIF9nZXRTZWxlY3RlZERhdGVPZmZzZXRbXCJkZWZhdWx0XCJdKShzdGFydERhdGVPZmZzZXQsIGRheSk7XG4gICAgICBlbmREYXRlID0gKDAsIF9nZXRTZWxlY3RlZERhdGVPZmZzZXRbXCJkZWZhdWx0XCJdKShlbmREYXRlT2Zmc2V0LCBkYXkpO1xuXG4gICAgICBpZiAodGhpcy5pc0Jsb2NrZWQoc3RhcnREYXRlKSB8fCB0aGlzLmlzQmxvY2tlZChlbmREYXRlKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIG9uRGF0ZXNDaGFuZ2Uoe1xuICAgICAgICBzdGFydERhdGU6IHN0YXJ0RGF0ZSxcbiAgICAgICAgZW5kRGF0ZTogZW5kRGF0ZVxuICAgICAgfSk7XG5cbiAgICAgIGlmICgha2VlcE9wZW5PbkRhdGVTZWxlY3QpIHtcbiAgICAgICAgb25Gb2N1c0NoYW5nZShudWxsKTtcbiAgICAgICAgb25DbG9zZSh7XG4gICAgICAgICAgc3RhcnREYXRlOiBzdGFydERhdGUsXG4gICAgICAgICAgZW5kRGF0ZTogZW5kRGF0ZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGZvY3VzZWRJbnB1dCA9PT0gX2NvbnN0YW50cy5TVEFSVF9EQVRFKSB7XG4gICAgICB2YXIgbGFzdEFsbG93ZWRTdGFydERhdGUgPSBlbmREYXRlICYmIGVuZERhdGUuY2xvbmUoKS5zdWJ0cmFjdChtaW5pbXVtTmlnaHRzLCAnZGF5cycpO1xuICAgICAgdmFyIGlzU3RhcnREYXRlQWZ0ZXJFbmREYXRlID0gKDAsIF9pc0JlZm9yZURheVtcImRlZmF1bHRcIl0pKGxhc3RBbGxvd2VkU3RhcnREYXRlLCBkYXkpIHx8ICgwLCBfaXNBZnRlckRheVtcImRlZmF1bHRcIl0pKHN0YXJ0RGF0ZSwgZW5kRGF0ZSk7XG4gICAgICB2YXIgaXNFbmREYXRlRGlzYWJsZWQgPSBkaXNhYmxlZCA9PT0gX2NvbnN0YW50cy5FTkRfREFURTtcblxuICAgICAgaWYgKCFpc0VuZERhdGVEaXNhYmxlZCB8fCAhaXNTdGFydERhdGVBZnRlckVuZERhdGUpIHtcbiAgICAgICAgc3RhcnREYXRlID0gZGF5O1xuXG4gICAgICAgIGlmIChpc1N0YXJ0RGF0ZUFmdGVyRW5kRGF0ZSkge1xuICAgICAgICAgIGVuZERhdGUgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG9uRGF0ZXNDaGFuZ2Uoe1xuICAgICAgICBzdGFydERhdGU6IHN0YXJ0RGF0ZSxcbiAgICAgICAgZW5kRGF0ZTogZW5kRGF0ZVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChpc0VuZERhdGVEaXNhYmxlZCAmJiAhaXNTdGFydERhdGVBZnRlckVuZERhdGUpIHtcbiAgICAgICAgb25Gb2N1c0NoYW5nZShudWxsKTtcbiAgICAgICAgb25DbG9zZSh7XG4gICAgICAgICAgc3RhcnREYXRlOiBzdGFydERhdGUsXG4gICAgICAgICAgZW5kRGF0ZTogZW5kRGF0ZVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoIWlzRW5kRGF0ZURpc2FibGVkKSB7XG4gICAgICAgIG9uRm9jdXNDaGFuZ2UoX2NvbnN0YW50cy5FTkRfREFURSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChmb2N1c2VkSW5wdXQgPT09IF9jb25zdGFudHMuRU5EX0RBVEUpIHtcbiAgICAgIHZhciBmaXJzdEFsbG93ZWRFbmREYXRlID0gc3RhcnREYXRlICYmIHN0YXJ0RGF0ZS5jbG9uZSgpLmFkZChtaW5pbXVtTmlnaHRzLCAnZGF5cycpO1xuXG4gICAgICBpZiAoIXN0YXJ0RGF0ZSkge1xuICAgICAgICBlbmREYXRlID0gZGF5O1xuICAgICAgICBvbkRhdGVzQ2hhbmdlKHtcbiAgICAgICAgICBzdGFydERhdGU6IHN0YXJ0RGF0ZSxcbiAgICAgICAgICBlbmREYXRlOiBlbmREYXRlXG4gICAgICAgIH0pO1xuICAgICAgICBvbkZvY3VzQ2hhbmdlKF9jb25zdGFudHMuU1RBUlRfREFURSk7XG4gICAgICB9IGVsc2UgaWYgKCgwLCBfaXNJbmNsdXNpdmVseUFmdGVyRGF5W1wiZGVmYXVsdFwiXSkoZGF5LCBmaXJzdEFsbG93ZWRFbmREYXRlKSkge1xuICAgICAgICBlbmREYXRlID0gZGF5O1xuICAgICAgICBvbkRhdGVzQ2hhbmdlKHtcbiAgICAgICAgICBzdGFydERhdGU6IHN0YXJ0RGF0ZSxcbiAgICAgICAgICBlbmREYXRlOiBlbmREYXRlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICgha2VlcE9wZW5PbkRhdGVTZWxlY3QpIHtcbiAgICAgICAgICBvbkZvY3VzQ2hhbmdlKG51bGwpO1xuICAgICAgICAgIG9uQ2xvc2Uoe1xuICAgICAgICAgICAgc3RhcnREYXRlOiBzdGFydERhdGUsXG4gICAgICAgICAgICBlbmREYXRlOiBlbmREYXRlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZGF5c1Zpb2xhdGluZ01pbk5pZ2h0c0NhbkJlQ2xpY2tlZCAmJiB0aGlzLmRvZXNOb3RNZWV0TWluaW11bU5pZ2h0cyhkYXkpKSB7XG4gICAgICAgIGVuZERhdGUgPSBkYXk7XG4gICAgICAgIG9uRGF0ZXNDaGFuZ2Uoe1xuICAgICAgICAgIHN0YXJ0RGF0ZTogc3RhcnREYXRlLFxuICAgICAgICAgIGVuZERhdGU6IGVuZERhdGVcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKGRpc2FibGVkICE9PSBfY29uc3RhbnRzLlNUQVJUX0RBVEUpIHtcbiAgICAgICAgc3RhcnREYXRlID0gZGF5O1xuICAgICAgICBlbmREYXRlID0gbnVsbDtcbiAgICAgICAgb25EYXRlc0NoYW5nZSh7XG4gICAgICAgICAgc3RhcnREYXRlOiBzdGFydERhdGUsXG4gICAgICAgICAgZW5kRGF0ZTogZW5kRGF0ZVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9uRGF0ZXNDaGFuZ2Uoe1xuICAgICAgICAgIHN0YXJ0RGF0ZTogc3RhcnREYXRlLFxuICAgICAgICAgIGVuZERhdGU6IGVuZERhdGVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG9uRGF0ZXNDaGFuZ2Uoe1xuICAgICAgICBzdGFydERhdGU6IHN0YXJ0RGF0ZSxcbiAgICAgICAgZW5kRGF0ZTogZW5kRGF0ZVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgb25CbHVyKCk7XG4gIH07XG5cbiAgX3Byb3RvLm9uRGF5TW91c2VFbnRlciA9IGZ1bmN0aW9uIG9uRGF5TW91c2VFbnRlcihkYXkpIHtcbiAgICAvKiBlc2xpbnQgcmVhY3QvZGVzdHJ1Y3R1cmluZy1hc3NpZ25tZW50OiAxICovXG4gICAgaWYgKHRoaXMuaXNUb3VjaERldmljZSkgcmV0dXJuO1xuICAgIHZhciBfdGhpcyRwcm9wczQgPSB0aGlzLnByb3BzLFxuICAgICAgICBzdGFydERhdGUgPSBfdGhpcyRwcm9wczQuc3RhcnREYXRlLFxuICAgICAgICBlbmREYXRlID0gX3RoaXMkcHJvcHM0LmVuZERhdGUsXG4gICAgICAgIGZvY3VzZWRJbnB1dCA9IF90aGlzJHByb3BzNC5mb2N1c2VkSW5wdXQsXG4gICAgICAgIGdldE1pbk5pZ2h0c0ZvckhvdmVyRGF0ZSA9IF90aGlzJHByb3BzNC5nZXRNaW5OaWdodHNGb3JIb3ZlckRhdGUsXG4gICAgICAgIG1pbmltdW1OaWdodHMgPSBfdGhpcyRwcm9wczQubWluaW11bU5pZ2h0cyxcbiAgICAgICAgc3RhcnREYXRlT2Zmc2V0ID0gX3RoaXMkcHJvcHM0LnN0YXJ0RGF0ZU9mZnNldCxcbiAgICAgICAgZW5kRGF0ZU9mZnNldCA9IF90aGlzJHByb3BzNC5lbmREYXRlT2Zmc2V0O1xuICAgIHZhciBfdGhpcyRzdGF0ZSA9IHRoaXMuc3RhdGUsXG4gICAgICAgIGhvdmVyRGF0ZSA9IF90aGlzJHN0YXRlLmhvdmVyRGF0ZSxcbiAgICAgICAgdmlzaWJsZURheXMgPSBfdGhpcyRzdGF0ZS52aXNpYmxlRGF5cyxcbiAgICAgICAgZGF0ZU9mZnNldCA9IF90aGlzJHN0YXRlLmRhdGVPZmZzZXQ7XG4gICAgdmFyIG5leHREYXRlT2Zmc2V0ID0gbnVsbDtcblxuICAgIGlmIChmb2N1c2VkSW5wdXQpIHtcbiAgICAgIHZhciBoYXNPZmZzZXQgPSBzdGFydERhdGVPZmZzZXQgfHwgZW5kRGF0ZU9mZnNldDtcbiAgICAgIHZhciBtb2RpZmllcnMgPSB7fTtcblxuICAgICAgaWYgKGhhc09mZnNldCkge1xuICAgICAgICB2YXIgc3RhcnQgPSAoMCwgX2dldFNlbGVjdGVkRGF0ZU9mZnNldFtcImRlZmF1bHRcIl0pKHN0YXJ0RGF0ZU9mZnNldCwgZGF5KTtcbiAgICAgICAgdmFyIGVuZCA9ICgwLCBfZ2V0U2VsZWN0ZWREYXRlT2Zmc2V0W1wiZGVmYXVsdFwiXSkoZW5kRGF0ZU9mZnNldCwgZGF5LCBmdW5jdGlvbiAocmFuZ2VEYXkpIHtcbiAgICAgICAgICByZXR1cm4gcmFuZ2VEYXkuYWRkKDEsICdkYXknKTtcbiAgICAgICAgfSk7XG4gICAgICAgIG5leHREYXRlT2Zmc2V0ID0ge1xuICAgICAgICAgIHN0YXJ0OiBzdGFydCxcbiAgICAgICAgICBlbmQ6IGVuZFxuICAgICAgICB9OyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvZGVzdHJ1Y3R1cmluZy1hc3NpZ25tZW50XG5cbiAgICAgICAgaWYgKGRhdGVPZmZzZXQgJiYgZGF0ZU9mZnNldC5zdGFydCAmJiBkYXRlT2Zmc2V0LmVuZCkge1xuICAgICAgICAgIG1vZGlmaWVycyA9IHRoaXMuZGVsZXRlTW9kaWZpZXJGcm9tUmFuZ2UobW9kaWZpZXJzLCBkYXRlT2Zmc2V0LnN0YXJ0LCBkYXRlT2Zmc2V0LmVuZCwgJ2hvdmVyZWQtb2Zmc2V0Jyk7XG4gICAgICAgIH1cblxuICAgICAgICBtb2RpZmllcnMgPSB0aGlzLmFkZE1vZGlmaWVyVG9SYW5nZShtb2RpZmllcnMsIHN0YXJ0LCBlbmQsICdob3ZlcmVkLW9mZnNldCcpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWhhc09mZnNldCkge1xuICAgICAgICBtb2RpZmllcnMgPSB0aGlzLmRlbGV0ZU1vZGlmaWVyKG1vZGlmaWVycywgaG92ZXJEYXRlLCAnaG92ZXJlZCcpO1xuICAgICAgICBtb2RpZmllcnMgPSB0aGlzLmFkZE1vZGlmaWVyKG1vZGlmaWVycywgZGF5LCAnaG92ZXJlZCcpO1xuXG4gICAgICAgIGlmIChzdGFydERhdGUgJiYgIWVuZERhdGUgJiYgZm9jdXNlZElucHV0ID09PSBfY29uc3RhbnRzLkVORF9EQVRFKSB7XG4gICAgICAgICAgaWYgKCgwLCBfaXNBZnRlckRheVtcImRlZmF1bHRcIl0pKGhvdmVyRGF0ZSwgc3RhcnREYXRlKSkge1xuICAgICAgICAgICAgdmFyIGVuZFNwYW4gPSBob3ZlckRhdGUuY2xvbmUoKS5hZGQoMSwgJ2RheScpO1xuICAgICAgICAgICAgbW9kaWZpZXJzID0gdGhpcy5kZWxldGVNb2RpZmllckZyb21SYW5nZShtb2RpZmllcnMsIHN0YXJ0RGF0ZSwgZW5kU3BhbiwgJ2hvdmVyZWQtc3BhbicpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICgoMCwgX2lzQmVmb3JlRGF5W1wiZGVmYXVsdFwiXSkoZGF5LCBzdGFydERhdGUpIHx8ICgwLCBfaXNTYW1lRGF5W1wiZGVmYXVsdFwiXSkoZGF5LCBzdGFydERhdGUpKSB7XG4gICAgICAgICAgICBtb2RpZmllcnMgPSB0aGlzLmRlbGV0ZU1vZGlmaWVyKG1vZGlmaWVycywgc3RhcnREYXRlLCAnc2VsZWN0ZWQtc3RhcnQtaW4taG92ZXJlZC1zcGFuJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCF0aGlzLmlzQmxvY2tlZChkYXkpICYmICgwLCBfaXNBZnRlckRheVtcImRlZmF1bHRcIl0pKGRheSwgc3RhcnREYXRlKSkge1xuICAgICAgICAgICAgdmFyIF9lbmRTcGFuMyA9IGRheS5jbG9uZSgpLmFkZCgxLCAnZGF5Jyk7XG5cbiAgICAgICAgICAgIG1vZGlmaWVycyA9IHRoaXMuYWRkTW9kaWZpZXJUb1JhbmdlKG1vZGlmaWVycywgc3RhcnREYXRlLCBfZW5kU3BhbjMsICdob3ZlcmVkLXNwYW4nKTtcbiAgICAgICAgICAgIG1vZGlmaWVycyA9IHRoaXMuYWRkTW9kaWZpZXIobW9kaWZpZXJzLCBzdGFydERhdGUsICdzZWxlY3RlZC1zdGFydC1pbi1ob3ZlcmVkLXNwYW4nKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXN0YXJ0RGF0ZSAmJiBlbmREYXRlICYmIGZvY3VzZWRJbnB1dCA9PT0gX2NvbnN0YW50cy5TVEFSVF9EQVRFKSB7XG4gICAgICAgICAgaWYgKCgwLCBfaXNCZWZvcmVEYXlbXCJkZWZhdWx0XCJdKShob3ZlckRhdGUsIGVuZERhdGUpKSB7XG4gICAgICAgICAgICBtb2RpZmllcnMgPSB0aGlzLmRlbGV0ZU1vZGlmaWVyRnJvbVJhbmdlKG1vZGlmaWVycywgaG92ZXJEYXRlLCBlbmREYXRlLCAnaG92ZXJlZC1zcGFuJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCgwLCBfaXNBZnRlckRheVtcImRlZmF1bHRcIl0pKGRheSwgZW5kRGF0ZSkgfHwgKDAsIF9pc1NhbWVEYXlbXCJkZWZhdWx0XCJdKShkYXksIGVuZERhdGUpKSB7XG4gICAgICAgICAgICBtb2RpZmllcnMgPSB0aGlzLmRlbGV0ZU1vZGlmaWVyKG1vZGlmaWVycywgZW5kRGF0ZSwgJ3NlbGVjdGVkLWVuZC1pbi1ob3ZlcmVkLXNwYW4nKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIXRoaXMuaXNCbG9ja2VkKGRheSkgJiYgKDAsIF9pc0JlZm9yZURheVtcImRlZmF1bHRcIl0pKGRheSwgZW5kRGF0ZSkpIHtcbiAgICAgICAgICAgIG1vZGlmaWVycyA9IHRoaXMuYWRkTW9kaWZpZXJUb1JhbmdlKG1vZGlmaWVycywgZGF5LCBlbmREYXRlLCAnaG92ZXJlZC1zcGFuJyk7XG4gICAgICAgICAgICBtb2RpZmllcnMgPSB0aGlzLmFkZE1vZGlmaWVyKG1vZGlmaWVycywgZW5kRGF0ZSwgJ3NlbGVjdGVkLWVuZC1pbi1ob3ZlcmVkLXNwYW4nKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RhcnREYXRlKSB7XG4gICAgICAgICAgdmFyIHN0YXJ0U3BhbiA9IHN0YXJ0RGF0ZS5jbG9uZSgpLmFkZCgxLCAnZGF5Jyk7XG5cbiAgICAgICAgICB2YXIgX2VuZFNwYW40ID0gc3RhcnREYXRlLmNsb25lKCkuYWRkKG1pbmltdW1OaWdodHMgKyAxLCAnZGF5cycpO1xuXG4gICAgICAgICAgbW9kaWZpZXJzID0gdGhpcy5kZWxldGVNb2RpZmllckZyb21SYW5nZShtb2RpZmllcnMsIHN0YXJ0U3BhbiwgX2VuZFNwYW40LCAnYWZ0ZXItaG92ZXJlZC1zdGFydCcpO1xuXG4gICAgICAgICAgaWYgKCgwLCBfaXNTYW1lRGF5W1wiZGVmYXVsdFwiXSkoZGF5LCBzdGFydERhdGUpKSB7XG4gICAgICAgICAgICB2YXIgbmV3U3RhcnRTcGFuID0gc3RhcnREYXRlLmNsb25lKCkuYWRkKDEsICdkYXknKTtcbiAgICAgICAgICAgIHZhciBuZXdFbmRTcGFuID0gc3RhcnREYXRlLmNsb25lKCkuYWRkKG1pbmltdW1OaWdodHMgKyAxLCAnZGF5cycpO1xuICAgICAgICAgICAgbW9kaWZpZXJzID0gdGhpcy5hZGRNb2RpZmllclRvUmFuZ2UobW9kaWZpZXJzLCBuZXdTdGFydFNwYW4sIG5ld0VuZFNwYW4sICdhZnRlci1ob3ZlcmVkLXN0YXJ0Jyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVuZERhdGUpIHtcbiAgICAgICAgICB2YXIgX3N0YXJ0U3BhbjQgPSBlbmREYXRlLmNsb25lKCkuc3VidHJhY3QobWluaW11bU5pZ2h0cywgJ2RheXMnKTtcblxuICAgICAgICAgIG1vZGlmaWVycyA9IHRoaXMuZGVsZXRlTW9kaWZpZXJGcm9tUmFuZ2UobW9kaWZpZXJzLCBfc3RhcnRTcGFuNCwgZW5kRGF0ZSwgJ2JlZm9yZS1ob3ZlcmVkLWVuZCcpO1xuXG4gICAgICAgICAgaWYgKCgwLCBfaXNTYW1lRGF5W1wiZGVmYXVsdFwiXSkoZGF5LCBlbmREYXRlKSkge1xuICAgICAgICAgICAgdmFyIF9uZXdTdGFydFNwYW4gPSBlbmREYXRlLmNsb25lKCkuc3VidHJhY3QobWluaW11bU5pZ2h0cywgJ2RheXMnKTtcblxuICAgICAgICAgICAgbW9kaWZpZXJzID0gdGhpcy5hZGRNb2RpZmllclRvUmFuZ2UobW9kaWZpZXJzLCBfbmV3U3RhcnRTcGFuLCBlbmREYXRlLCAnYmVmb3JlLWhvdmVyZWQtZW5kJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhvdmVyRGF0ZSAmJiAhdGhpcy5pc0Jsb2NrZWQoaG92ZXJEYXRlKSkge1xuICAgICAgICAgIHZhciBtaW5OaWdodHNGb3JQcmV2SG92ZXJEYXRlID0gZ2V0TWluTmlnaHRzRm9ySG92ZXJEYXRlKGhvdmVyRGF0ZSk7XG5cbiAgICAgICAgICBpZiAobWluTmlnaHRzRm9yUHJldkhvdmVyRGF0ZSA+IDAgJiYgZm9jdXNlZElucHV0ID09PSBfY29uc3RhbnRzLlNUQVJUX0RBVEUpIHtcbiAgICAgICAgICAgIG1vZGlmaWVycyA9IHRoaXMuZGVsZXRlTW9kaWZpZXJGcm9tUmFuZ2UobW9kaWZpZXJzLCBob3ZlckRhdGUuY2xvbmUoKS5hZGQoMSwgJ2RheXMnKSwgaG92ZXJEYXRlLmNsb25lKCkuYWRkKG1pbk5pZ2h0c0ZvclByZXZIb3ZlckRhdGUsICdkYXlzJyksICdob3ZlcmVkLXN0YXJ0LWJsb2NrZWQtbWluaW11bS1uaWdodHMnKTtcbiAgICAgICAgICAgIG1vZGlmaWVycyA9IHRoaXMuZGVsZXRlTW9kaWZpZXIobW9kaWZpZXJzLCBob3ZlckRhdGUuY2xvbmUoKS5hZGQobWluTmlnaHRzRm9yUHJldkhvdmVyRGF0ZSwgJ2RheXMnKSwgJ2hvdmVyZWQtc3RhcnQtZmlyc3QtcG9zc2libGUtZW5kJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLmlzQmxvY2tlZChkYXkpKSB7XG4gICAgICAgICAgdmFyIG1pbk5pZ2h0c0ZvckhvdmVyRGF0ZSA9IGdldE1pbk5pZ2h0c0ZvckhvdmVyRGF0ZShkYXkpO1xuXG4gICAgICAgICAgaWYgKG1pbk5pZ2h0c0ZvckhvdmVyRGF0ZSA+IDAgJiYgZm9jdXNlZElucHV0ID09PSBfY29uc3RhbnRzLlNUQVJUX0RBVEUpIHtcbiAgICAgICAgICAgIG1vZGlmaWVycyA9IHRoaXMuYWRkTW9kaWZpZXJUb1JhbmdlKG1vZGlmaWVycywgZGF5LmNsb25lKCkuYWRkKDEsICdkYXlzJyksIGRheS5jbG9uZSgpLmFkZChtaW5OaWdodHNGb3JIb3ZlckRhdGUsICdkYXlzJyksICdob3ZlcmVkLXN0YXJ0LWJsb2NrZWQtbWluaW11bS1uaWdodHMnKTtcbiAgICAgICAgICAgIG1vZGlmaWVycyA9IHRoaXMuYWRkTW9kaWZpZXIobW9kaWZpZXJzLCBkYXkuY2xvbmUoKS5hZGQobWluTmlnaHRzRm9ySG92ZXJEYXRlLCAnZGF5cycpLCAnaG92ZXJlZC1zdGFydC1maXJzdC1wb3NzaWJsZS1lbmQnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGhvdmVyRGF0ZTogZGF5LFxuICAgICAgICBkYXRlT2Zmc2V0OiBuZXh0RGF0ZU9mZnNldCxcbiAgICAgICAgdmlzaWJsZURheXM6IF9vYmplY3RTcHJlYWQoe30sIHZpc2libGVEYXlzLCB7fSwgbW9kaWZpZXJzKVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5vbkRheU1vdXNlTGVhdmUgPSBmdW5jdGlvbiBvbkRheU1vdXNlTGVhdmUoZGF5KSB7XG4gICAgdmFyIF90aGlzJHByb3BzNSA9IHRoaXMucHJvcHMsXG4gICAgICAgIHN0YXJ0RGF0ZSA9IF90aGlzJHByb3BzNS5zdGFydERhdGUsXG4gICAgICAgIGVuZERhdGUgPSBfdGhpcyRwcm9wczUuZW5kRGF0ZSxcbiAgICAgICAgZm9jdXNlZElucHV0ID0gX3RoaXMkcHJvcHM1LmZvY3VzZWRJbnB1dCxcbiAgICAgICAgZ2V0TWluTmlnaHRzRm9ySG92ZXJEYXRlID0gX3RoaXMkcHJvcHM1LmdldE1pbk5pZ2h0c0ZvckhvdmVyRGF0ZSxcbiAgICAgICAgbWluaW11bU5pZ2h0cyA9IF90aGlzJHByb3BzNS5taW5pbXVtTmlnaHRzO1xuICAgIHZhciBfdGhpcyRzdGF0ZTIgPSB0aGlzLnN0YXRlLFxuICAgICAgICBob3ZlckRhdGUgPSBfdGhpcyRzdGF0ZTIuaG92ZXJEYXRlLFxuICAgICAgICB2aXNpYmxlRGF5cyA9IF90aGlzJHN0YXRlMi52aXNpYmxlRGF5cyxcbiAgICAgICAgZGF0ZU9mZnNldCA9IF90aGlzJHN0YXRlMi5kYXRlT2Zmc2V0O1xuICAgIGlmICh0aGlzLmlzVG91Y2hEZXZpY2UgfHwgIWhvdmVyRGF0ZSkgcmV0dXJuO1xuICAgIHZhciBtb2RpZmllcnMgPSB7fTtcbiAgICBtb2RpZmllcnMgPSB0aGlzLmRlbGV0ZU1vZGlmaWVyKG1vZGlmaWVycywgaG92ZXJEYXRlLCAnaG92ZXJlZCcpO1xuXG4gICAgaWYgKGRhdGVPZmZzZXQpIHtcbiAgICAgIG1vZGlmaWVycyA9IHRoaXMuZGVsZXRlTW9kaWZpZXJGcm9tUmFuZ2UobW9kaWZpZXJzLCBkYXRlT2Zmc2V0LnN0YXJ0LCBkYXRlT2Zmc2V0LmVuZCwgJ2hvdmVyZWQtb2Zmc2V0Jyk7XG4gICAgfVxuXG4gICAgaWYgKHN0YXJ0RGF0ZSAmJiAhZW5kRGF0ZSkge1xuICAgICAgaWYgKCgwLCBfaXNBZnRlckRheVtcImRlZmF1bHRcIl0pKGhvdmVyRGF0ZSwgc3RhcnREYXRlKSkge1xuICAgICAgICB2YXIgZW5kU3BhbiA9IGhvdmVyRGF0ZS5jbG9uZSgpLmFkZCgxLCAnZGF5Jyk7XG4gICAgICAgIG1vZGlmaWVycyA9IHRoaXMuZGVsZXRlTW9kaWZpZXJGcm9tUmFuZ2UobW9kaWZpZXJzLCBzdGFydERhdGUsIGVuZFNwYW4sICdob3ZlcmVkLXNwYW4nKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCgwLCBfaXNBZnRlckRheVtcImRlZmF1bHRcIl0pKGRheSwgc3RhcnREYXRlKSkge1xuICAgICAgICBtb2RpZmllcnMgPSB0aGlzLmRlbGV0ZU1vZGlmaWVyKG1vZGlmaWVycywgc3RhcnREYXRlLCAnc2VsZWN0ZWQtc3RhcnQtaW4taG92ZXJlZC1zcGFuJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFzdGFydERhdGUgJiYgZW5kRGF0ZSkge1xuICAgICAgaWYgKCgwLCBfaXNBZnRlckRheVtcImRlZmF1bHRcIl0pKGVuZERhdGUsIGhvdmVyRGF0ZSkpIHtcbiAgICAgICAgbW9kaWZpZXJzID0gdGhpcy5kZWxldGVNb2RpZmllckZyb21SYW5nZShtb2RpZmllcnMsIGhvdmVyRGF0ZSwgZW5kRGF0ZSwgJ2hvdmVyZWQtc3BhbicpO1xuICAgICAgfVxuXG4gICAgICBpZiAoKDAsIF9pc0JlZm9yZURheVtcImRlZmF1bHRcIl0pKGRheSwgZW5kRGF0ZSkpIHtcbiAgICAgICAgbW9kaWZpZXJzID0gdGhpcy5kZWxldGVNb2RpZmllcihtb2RpZmllcnMsIGVuZERhdGUsICdzZWxlY3RlZC1lbmQtaW4taG92ZXJlZC1zcGFuJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN0YXJ0RGF0ZSAmJiAoMCwgX2lzU2FtZURheVtcImRlZmF1bHRcIl0pKGRheSwgc3RhcnREYXRlKSkge1xuICAgICAgdmFyIHN0YXJ0U3BhbiA9IHN0YXJ0RGF0ZS5jbG9uZSgpLmFkZCgxLCAnZGF5Jyk7XG5cbiAgICAgIHZhciBfZW5kU3BhbjUgPSBzdGFydERhdGUuY2xvbmUoKS5hZGQobWluaW11bU5pZ2h0cyArIDEsICdkYXlzJyk7XG5cbiAgICAgIG1vZGlmaWVycyA9IHRoaXMuZGVsZXRlTW9kaWZpZXJGcm9tUmFuZ2UobW9kaWZpZXJzLCBzdGFydFNwYW4sIF9lbmRTcGFuNSwgJ2FmdGVyLWhvdmVyZWQtc3RhcnQnKTtcbiAgICB9XG5cbiAgICBpZiAoZW5kRGF0ZSAmJiAoMCwgX2lzU2FtZURheVtcImRlZmF1bHRcIl0pKGRheSwgZW5kRGF0ZSkpIHtcbiAgICAgIHZhciBfc3RhcnRTcGFuNSA9IGVuZERhdGUuY2xvbmUoKS5zdWJ0cmFjdChtaW5pbXVtTmlnaHRzLCAnZGF5cycpO1xuXG4gICAgICBtb2RpZmllcnMgPSB0aGlzLmRlbGV0ZU1vZGlmaWVyRnJvbVJhbmdlKG1vZGlmaWVycywgX3N0YXJ0U3BhbjUsIGVuZERhdGUsICdiZWZvcmUtaG92ZXJlZC1lbmQnKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuaXNCbG9ja2VkKGhvdmVyRGF0ZSkpIHtcbiAgICAgIHZhciBtaW5OaWdodHNGb3JIb3ZlckRhdGUgPSBnZXRNaW5OaWdodHNGb3JIb3ZlckRhdGUoaG92ZXJEYXRlKTtcblxuICAgICAgaWYgKG1pbk5pZ2h0c0ZvckhvdmVyRGF0ZSA+IDAgJiYgZm9jdXNlZElucHV0ID09PSBfY29uc3RhbnRzLlNUQVJUX0RBVEUpIHtcbiAgICAgICAgbW9kaWZpZXJzID0gdGhpcy5kZWxldGVNb2RpZmllckZyb21SYW5nZShtb2RpZmllcnMsIGhvdmVyRGF0ZS5jbG9uZSgpLmFkZCgxLCAnZGF5cycpLCBob3ZlckRhdGUuY2xvbmUoKS5hZGQobWluTmlnaHRzRm9ySG92ZXJEYXRlLCAnZGF5cycpLCAnaG92ZXJlZC1zdGFydC1ibG9ja2VkLW1pbmltdW0tbmlnaHRzJyk7XG4gICAgICAgIG1vZGlmaWVycyA9IHRoaXMuZGVsZXRlTW9kaWZpZXIobW9kaWZpZXJzLCBob3ZlckRhdGUuY2xvbmUoKS5hZGQobWluTmlnaHRzRm9ySG92ZXJEYXRlLCAnZGF5cycpLCAnaG92ZXJlZC1zdGFydC1maXJzdC1wb3NzaWJsZS1lbmQnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGhvdmVyRGF0ZTogbnVsbCxcbiAgICAgIHZpc2libGVEYXlzOiBfb2JqZWN0U3ByZWFkKHt9LCB2aXNpYmxlRGF5cywge30sIG1vZGlmaWVycylcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ub25QcmV2TW9udGhDbGljayA9IGZ1bmN0aW9uIG9uUHJldk1vbnRoQ2xpY2soKSB7XG4gICAgdmFyIF90aGlzJHByb3BzNiA9IHRoaXMucHJvcHMsXG4gICAgICAgIGVuYWJsZU91dHNpZGVEYXlzID0gX3RoaXMkcHJvcHM2LmVuYWJsZU91dHNpZGVEYXlzLFxuICAgICAgICBtYXhEYXRlID0gX3RoaXMkcHJvcHM2Lm1heERhdGUsXG4gICAgICAgIG1pbkRhdGUgPSBfdGhpcyRwcm9wczYubWluRGF0ZSxcbiAgICAgICAgbnVtYmVyT2ZNb250aHMgPSBfdGhpcyRwcm9wczYubnVtYmVyT2ZNb250aHMsXG4gICAgICAgIG9uUHJldk1vbnRoQ2xpY2sgPSBfdGhpcyRwcm9wczYub25QcmV2TW9udGhDbGljaztcbiAgICB2YXIgX3RoaXMkc3RhdGUzID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgY3VycmVudE1vbnRoID0gX3RoaXMkc3RhdGUzLmN1cnJlbnRNb250aCxcbiAgICAgICAgdmlzaWJsZURheXMgPSBfdGhpcyRzdGF0ZTMudmlzaWJsZURheXM7XG4gICAgdmFyIG5ld1Zpc2libGVEYXlzID0ge307XG4gICAgT2JqZWN0LmtleXModmlzaWJsZURheXMpLnNvcnQoKS5zbGljZSgwLCBudW1iZXJPZk1vbnRocyArIDEpLmZvckVhY2goZnVuY3Rpb24gKG1vbnRoKSB7XG4gICAgICBuZXdWaXNpYmxlRGF5c1ttb250aF0gPSB2aXNpYmxlRGF5c1ttb250aF07XG4gICAgfSk7XG4gICAgdmFyIHByZXZNb250aCA9IGN1cnJlbnRNb250aC5jbG9uZSgpLnN1YnRyYWN0KDIsICdtb250aHMnKTtcbiAgICB2YXIgcHJldk1vbnRoVmlzaWJsZURheXMgPSAoMCwgX2dldFZpc2libGVEYXlzW1wiZGVmYXVsdFwiXSkocHJldk1vbnRoLCAxLCBlbmFibGVPdXRzaWRlRGF5cywgdHJ1ZSk7XG4gICAgdmFyIG5ld0N1cnJlbnRNb250aCA9IGN1cnJlbnRNb250aC5jbG9uZSgpLnN1YnRyYWN0KDEsICdtb250aCcpO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgY3VycmVudE1vbnRoOiBuZXdDdXJyZW50TW9udGgsXG4gICAgICBkaXNhYmxlUHJldjogdGhpcy5zaG91bGREaXNhYmxlTW9udGhOYXZpZ2F0aW9uKG1pbkRhdGUsIG5ld0N1cnJlbnRNb250aCksXG4gICAgICBkaXNhYmxlTmV4dDogdGhpcy5zaG91bGREaXNhYmxlTW9udGhOYXZpZ2F0aW9uKG1heERhdGUsIG5ld0N1cnJlbnRNb250aCksXG4gICAgICB2aXNpYmxlRGF5czogX29iamVjdFNwcmVhZCh7fSwgbmV3VmlzaWJsZURheXMsIHt9LCB0aGlzLmdldE1vZGlmaWVycyhwcmV2TW9udGhWaXNpYmxlRGF5cykpXG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgb25QcmV2TW9udGhDbGljayhuZXdDdXJyZW50TW9udGguY2xvbmUoKSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLm9uTmV4dE1vbnRoQ2xpY2sgPSBmdW5jdGlvbiBvbk5leHRNb250aENsaWNrKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczcgPSB0aGlzLnByb3BzLFxuICAgICAgICBlbmFibGVPdXRzaWRlRGF5cyA9IF90aGlzJHByb3BzNy5lbmFibGVPdXRzaWRlRGF5cyxcbiAgICAgICAgbWF4RGF0ZSA9IF90aGlzJHByb3BzNy5tYXhEYXRlLFxuICAgICAgICBtaW5EYXRlID0gX3RoaXMkcHJvcHM3Lm1pbkRhdGUsXG4gICAgICAgIG51bWJlck9mTW9udGhzID0gX3RoaXMkcHJvcHM3Lm51bWJlck9mTW9udGhzLFxuICAgICAgICBvbk5leHRNb250aENsaWNrID0gX3RoaXMkcHJvcHM3Lm9uTmV4dE1vbnRoQ2xpY2s7XG4gICAgdmFyIF90aGlzJHN0YXRlNCA9IHRoaXMuc3RhdGUsXG4gICAgICAgIGN1cnJlbnRNb250aCA9IF90aGlzJHN0YXRlNC5jdXJyZW50TW9udGgsXG4gICAgICAgIHZpc2libGVEYXlzID0gX3RoaXMkc3RhdGU0LnZpc2libGVEYXlzO1xuICAgIHZhciBuZXdWaXNpYmxlRGF5cyA9IHt9O1xuICAgIE9iamVjdC5rZXlzKHZpc2libGVEYXlzKS5zb3J0KCkuc2xpY2UoMSkuZm9yRWFjaChmdW5jdGlvbiAobW9udGgpIHtcbiAgICAgIG5ld1Zpc2libGVEYXlzW21vbnRoXSA9IHZpc2libGVEYXlzW21vbnRoXTtcbiAgICB9KTtcbiAgICB2YXIgbmV4dE1vbnRoID0gY3VycmVudE1vbnRoLmNsb25lKCkuYWRkKG51bWJlck9mTW9udGhzICsgMSwgJ21vbnRoJyk7XG4gICAgdmFyIG5leHRNb250aFZpc2libGVEYXlzID0gKDAsIF9nZXRWaXNpYmxlRGF5c1tcImRlZmF1bHRcIl0pKG5leHRNb250aCwgMSwgZW5hYmxlT3V0c2lkZURheXMsIHRydWUpO1xuICAgIHZhciBuZXdDdXJyZW50TW9udGggPSBjdXJyZW50TW9udGguY2xvbmUoKS5hZGQoMSwgJ21vbnRoJyk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBjdXJyZW50TW9udGg6IG5ld0N1cnJlbnRNb250aCxcbiAgICAgIGRpc2FibGVQcmV2OiB0aGlzLnNob3VsZERpc2FibGVNb250aE5hdmlnYXRpb24obWluRGF0ZSwgbmV3Q3VycmVudE1vbnRoKSxcbiAgICAgIGRpc2FibGVOZXh0OiB0aGlzLnNob3VsZERpc2FibGVNb250aE5hdmlnYXRpb24obWF4RGF0ZSwgbmV3Q3VycmVudE1vbnRoKSxcbiAgICAgIHZpc2libGVEYXlzOiBfb2JqZWN0U3ByZWFkKHt9LCBuZXdWaXNpYmxlRGF5cywge30sIHRoaXMuZ2V0TW9kaWZpZXJzKG5leHRNb250aFZpc2libGVEYXlzKSlcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICBvbk5leHRNb250aENsaWNrKG5ld0N1cnJlbnRNb250aC5jbG9uZSgpKTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ub25Nb250aENoYW5nZSA9IGZ1bmN0aW9uIG9uTW9udGhDaGFuZ2UobmV3TW9udGgpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHM4ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgbnVtYmVyT2ZNb250aHMgPSBfdGhpcyRwcm9wczgubnVtYmVyT2ZNb250aHMsXG4gICAgICAgIGVuYWJsZU91dHNpZGVEYXlzID0gX3RoaXMkcHJvcHM4LmVuYWJsZU91dHNpZGVEYXlzLFxuICAgICAgICBvcmllbnRhdGlvbiA9IF90aGlzJHByb3BzOC5vcmllbnRhdGlvbjtcbiAgICB2YXIgd2l0aG91dFRyYW5zaXRpb25Nb250aHMgPSBvcmllbnRhdGlvbiA9PT0gX2NvbnN0YW50cy5WRVJUSUNBTF9TQ1JPTExBQkxFO1xuICAgIHZhciBuZXdWaXNpYmxlRGF5cyA9ICgwLCBfZ2V0VmlzaWJsZURheXNbXCJkZWZhdWx0XCJdKShuZXdNb250aCwgbnVtYmVyT2ZNb250aHMsIGVuYWJsZU91dHNpZGVEYXlzLCB3aXRob3V0VHJhbnNpdGlvbk1vbnRocyk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBjdXJyZW50TW9udGg6IG5ld01vbnRoLmNsb25lKCksXG4gICAgICB2aXNpYmxlRGF5czogdGhpcy5nZXRNb2RpZmllcnMobmV3VmlzaWJsZURheXMpXG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLm9uWWVhckNoYW5nZSA9IGZ1bmN0aW9uIG9uWWVhckNoYW5nZShuZXdNb250aCkge1xuICAgIHZhciBfdGhpcyRwcm9wczkgPSB0aGlzLnByb3BzLFxuICAgICAgICBudW1iZXJPZk1vbnRocyA9IF90aGlzJHByb3BzOS5udW1iZXJPZk1vbnRocyxcbiAgICAgICAgZW5hYmxlT3V0c2lkZURheXMgPSBfdGhpcyRwcm9wczkuZW5hYmxlT3V0c2lkZURheXMsXG4gICAgICAgIG9yaWVudGF0aW9uID0gX3RoaXMkcHJvcHM5Lm9yaWVudGF0aW9uO1xuICAgIHZhciB3aXRob3V0VHJhbnNpdGlvbk1vbnRocyA9IG9yaWVudGF0aW9uID09PSBfY29uc3RhbnRzLlZFUlRJQ0FMX1NDUk9MTEFCTEU7XG4gICAgdmFyIG5ld1Zpc2libGVEYXlzID0gKDAsIF9nZXRWaXNpYmxlRGF5c1tcImRlZmF1bHRcIl0pKG5ld01vbnRoLCBudW1iZXJPZk1vbnRocywgZW5hYmxlT3V0c2lkZURheXMsIHdpdGhvdXRUcmFuc2l0aW9uTW9udGhzKTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGN1cnJlbnRNb250aDogbmV3TW9udGguY2xvbmUoKSxcbiAgICAgIHZpc2libGVEYXlzOiB0aGlzLmdldE1vZGlmaWVycyhuZXdWaXNpYmxlRGF5cylcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ub25HZXROZXh0U2Nyb2xsYWJsZU1vbnRocyA9IGZ1bmN0aW9uIG9uR2V0TmV4dFNjcm9sbGFibGVNb250aHMoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzMTAgPSB0aGlzLnByb3BzLFxuICAgICAgICBudW1iZXJPZk1vbnRocyA9IF90aGlzJHByb3BzMTAubnVtYmVyT2ZNb250aHMsXG4gICAgICAgIGVuYWJsZU91dHNpZGVEYXlzID0gX3RoaXMkcHJvcHMxMC5lbmFibGVPdXRzaWRlRGF5cztcbiAgICB2YXIgX3RoaXMkc3RhdGU1ID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgY3VycmVudE1vbnRoID0gX3RoaXMkc3RhdGU1LmN1cnJlbnRNb250aCxcbiAgICAgICAgdmlzaWJsZURheXMgPSBfdGhpcyRzdGF0ZTUudmlzaWJsZURheXM7XG4gICAgdmFyIG51bWJlck9mVmlzaWJsZU1vbnRocyA9IE9iamVjdC5rZXlzKHZpc2libGVEYXlzKS5sZW5ndGg7XG4gICAgdmFyIG5leHRNb250aCA9IGN1cnJlbnRNb250aC5jbG9uZSgpLmFkZChudW1iZXJPZlZpc2libGVNb250aHMsICdtb250aCcpO1xuICAgIHZhciBuZXdWaXNpYmxlRGF5cyA9ICgwLCBfZ2V0VmlzaWJsZURheXNbXCJkZWZhdWx0XCJdKShuZXh0TW9udGgsIG51bWJlck9mTW9udGhzLCBlbmFibGVPdXRzaWRlRGF5cywgdHJ1ZSk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICB2aXNpYmxlRGF5czogX29iamVjdFNwcmVhZCh7fSwgdmlzaWJsZURheXMsIHt9LCB0aGlzLmdldE1vZGlmaWVycyhuZXdWaXNpYmxlRGF5cykpXG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLm9uR2V0UHJldlNjcm9sbGFibGVNb250aHMgPSBmdW5jdGlvbiBvbkdldFByZXZTY3JvbGxhYmxlTW9udGhzKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczExID0gdGhpcy5wcm9wcyxcbiAgICAgICAgbnVtYmVyT2ZNb250aHMgPSBfdGhpcyRwcm9wczExLm51bWJlck9mTW9udGhzLFxuICAgICAgICBlbmFibGVPdXRzaWRlRGF5cyA9IF90aGlzJHByb3BzMTEuZW5hYmxlT3V0c2lkZURheXM7XG4gICAgdmFyIF90aGlzJHN0YXRlNiA9IHRoaXMuc3RhdGUsXG4gICAgICAgIGN1cnJlbnRNb250aCA9IF90aGlzJHN0YXRlNi5jdXJyZW50TW9udGgsXG4gICAgICAgIHZpc2libGVEYXlzID0gX3RoaXMkc3RhdGU2LnZpc2libGVEYXlzO1xuICAgIHZhciBmaXJzdFByZXZpb3VzTW9udGggPSBjdXJyZW50TW9udGguY2xvbmUoKS5zdWJ0cmFjdChudW1iZXJPZk1vbnRocywgJ21vbnRoJyk7XG4gICAgdmFyIG5ld1Zpc2libGVEYXlzID0gKDAsIF9nZXRWaXNpYmxlRGF5c1tcImRlZmF1bHRcIl0pKGZpcnN0UHJldmlvdXNNb250aCwgbnVtYmVyT2ZNb250aHMsIGVuYWJsZU91dHNpZGVEYXlzLCB0cnVlKTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGN1cnJlbnRNb250aDogZmlyc3RQcmV2aW91c01vbnRoLmNsb25lKCksXG4gICAgICB2aXNpYmxlRGF5czogX29iamVjdFNwcmVhZCh7fSwgdmlzaWJsZURheXMsIHt9LCB0aGlzLmdldE1vZGlmaWVycyhuZXdWaXNpYmxlRGF5cykpXG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmdldEZpcnN0Rm9jdXNhYmxlRGF5ID0gZnVuY3Rpb24gZ2V0Rmlyc3RGb2N1c2FibGVEYXkobmV3TW9udGgpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIHZhciBfdGhpcyRwcm9wczEyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgc3RhcnREYXRlID0gX3RoaXMkcHJvcHMxMi5zdGFydERhdGUsXG4gICAgICAgIGVuZERhdGUgPSBfdGhpcyRwcm9wczEyLmVuZERhdGUsXG4gICAgICAgIGZvY3VzZWRJbnB1dCA9IF90aGlzJHByb3BzMTIuZm9jdXNlZElucHV0LFxuICAgICAgICBtaW5pbXVtTmlnaHRzID0gX3RoaXMkcHJvcHMxMi5taW5pbXVtTmlnaHRzLFxuICAgICAgICBudW1iZXJPZk1vbnRocyA9IF90aGlzJHByb3BzMTIubnVtYmVyT2ZNb250aHM7XG4gICAgdmFyIGZvY3VzZWREYXRlID0gbmV3TW9udGguY2xvbmUoKS5zdGFydE9mKCdtb250aCcpO1xuXG4gICAgaWYgKGZvY3VzZWRJbnB1dCA9PT0gX2NvbnN0YW50cy5TVEFSVF9EQVRFICYmIHN0YXJ0RGF0ZSkge1xuICAgICAgZm9jdXNlZERhdGUgPSBzdGFydERhdGUuY2xvbmUoKTtcbiAgICB9IGVsc2UgaWYgKGZvY3VzZWRJbnB1dCA9PT0gX2NvbnN0YW50cy5FTkRfREFURSAmJiAhZW5kRGF0ZSAmJiBzdGFydERhdGUpIHtcbiAgICAgIGZvY3VzZWREYXRlID0gc3RhcnREYXRlLmNsb25lKCkuYWRkKG1pbmltdW1OaWdodHMsICdkYXlzJyk7XG4gICAgfSBlbHNlIGlmIChmb2N1c2VkSW5wdXQgPT09IF9jb25zdGFudHMuRU5EX0RBVEUgJiYgZW5kRGF0ZSkge1xuICAgICAgZm9jdXNlZERhdGUgPSBlbmREYXRlLmNsb25lKCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNCbG9ja2VkKGZvY3VzZWREYXRlKSkge1xuICAgICAgdmFyIGRheXMgPSBbXTtcbiAgICAgIHZhciBsYXN0VmlzaWJsZURheSA9IG5ld01vbnRoLmNsb25lKCkuYWRkKG51bWJlck9mTW9udGhzIC0gMSwgJ21vbnRocycpLmVuZE9mKCdtb250aCcpO1xuICAgICAgdmFyIGN1cnJlbnREYXkgPSBmb2N1c2VkRGF0ZS5jbG9uZSgpO1xuXG4gICAgICB3aGlsZSAoISgwLCBfaXNBZnRlckRheVtcImRlZmF1bHRcIl0pKGN1cnJlbnREYXksIGxhc3RWaXNpYmxlRGF5KSkge1xuICAgICAgICBjdXJyZW50RGF5ID0gY3VycmVudERheS5jbG9uZSgpLmFkZCgxLCAnZGF5Jyk7XG4gICAgICAgIGRheXMucHVzaChjdXJyZW50RGF5KTtcbiAgICAgIH1cblxuICAgICAgdmFyIHZpYWJsZURheXMgPSBkYXlzLmZpbHRlcihmdW5jdGlvbiAoZGF5KSB7XG4gICAgICAgIHJldHVybiAhX3RoaXMzLmlzQmxvY2tlZChkYXkpO1xuICAgICAgfSk7XG5cbiAgICAgIGlmICh2aWFibGVEYXlzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdmFyIF92aWFibGVEYXlzID0gKDAsIF9zbGljZWRUb0FycmF5MltcImRlZmF1bHRcIl0pKHZpYWJsZURheXMsIDEpO1xuXG4gICAgICAgIGZvY3VzZWREYXRlID0gX3ZpYWJsZURheXNbMF07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZvY3VzZWREYXRlO1xuICB9O1xuXG4gIF9wcm90by5nZXRNb2RpZmllcnMgPSBmdW5jdGlvbiBnZXRNb2RpZmllcnModmlzaWJsZURheXMpIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIHZhciBtb2RpZmllcnMgPSB7fTtcbiAgICBPYmplY3Qua2V5cyh2aXNpYmxlRGF5cykuZm9yRWFjaChmdW5jdGlvbiAobW9udGgpIHtcbiAgICAgIG1vZGlmaWVyc1ttb250aF0gPSB7fTtcbiAgICAgIHZpc2libGVEYXlzW21vbnRoXS5mb3JFYWNoKGZ1bmN0aW9uIChkYXkpIHtcbiAgICAgICAgbW9kaWZpZXJzW21vbnRoXVsoMCwgX3RvSVNPRGF0ZVN0cmluZ1tcImRlZmF1bHRcIl0pKGRheSldID0gX3RoaXM0LmdldE1vZGlmaWVyc0ZvckRheShkYXkpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIG1vZGlmaWVycztcbiAgfTtcblxuICBfcHJvdG8uZ2V0TW9kaWZpZXJzRm9yRGF5ID0gZnVuY3Rpb24gZ2V0TW9kaWZpZXJzRm9yRGF5KGRheSkge1xuICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBTZXQoT2JqZWN0LmtleXModGhpcy5tb2RpZmllcnMpLmZpbHRlcihmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICAgIHJldHVybiBfdGhpczUubW9kaWZpZXJzW21vZGlmaWVyXShkYXkpO1xuICAgIH0pKTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0U3RhdGVGb3JOZXdNb250aCA9IGZ1bmN0aW9uIGdldFN0YXRlRm9yTmV3TW9udGgobmV4dFByb3BzKSB7XG4gICAgdmFyIF90aGlzNiA9IHRoaXM7XG5cbiAgICB2YXIgaW5pdGlhbFZpc2libGVNb250aCA9IG5leHRQcm9wcy5pbml0aWFsVmlzaWJsZU1vbnRoLFxuICAgICAgICBudW1iZXJPZk1vbnRocyA9IG5leHRQcm9wcy5udW1iZXJPZk1vbnRocyxcbiAgICAgICAgZW5hYmxlT3V0c2lkZURheXMgPSBuZXh0UHJvcHMuZW5hYmxlT3V0c2lkZURheXMsXG4gICAgICAgIG9yaWVudGF0aW9uID0gbmV4dFByb3BzLm9yaWVudGF0aW9uLFxuICAgICAgICBzdGFydERhdGUgPSBuZXh0UHJvcHMuc3RhcnREYXRlO1xuICAgIHZhciBpbml0aWFsVmlzaWJsZU1vbnRoVGh1bmsgPSBpbml0aWFsVmlzaWJsZU1vbnRoIHx8IChzdGFydERhdGUgPyBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gc3RhcnREYXRlO1xuICAgIH0gOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gX3RoaXM2LnRvZGF5O1xuICAgIH0pO1xuICAgIHZhciBjdXJyZW50TW9udGggPSBpbml0aWFsVmlzaWJsZU1vbnRoVGh1bmsoKTtcbiAgICB2YXIgd2l0aG91dFRyYW5zaXRpb25Nb250aHMgPSBvcmllbnRhdGlvbiA9PT0gX2NvbnN0YW50cy5WRVJUSUNBTF9TQ1JPTExBQkxFO1xuICAgIHZhciB2aXNpYmxlRGF5cyA9IHRoaXMuZ2V0TW9kaWZpZXJzKCgwLCBfZ2V0VmlzaWJsZURheXNbXCJkZWZhdWx0XCJdKShjdXJyZW50TW9udGgsIG51bWJlck9mTW9udGhzLCBlbmFibGVPdXRzaWRlRGF5cywgd2l0aG91dFRyYW5zaXRpb25Nb250aHMpKTtcbiAgICByZXR1cm4ge1xuICAgICAgY3VycmVudE1vbnRoOiBjdXJyZW50TW9udGgsXG4gICAgICB2aXNpYmxlRGF5czogdmlzaWJsZURheXNcbiAgICB9O1xuICB9O1xuXG4gIF9wcm90by5zaG91bGREaXNhYmxlTW9udGhOYXZpZ2F0aW9uID0gZnVuY3Rpb24gc2hvdWxkRGlzYWJsZU1vbnRoTmF2aWdhdGlvbihkYXRlLCB2aXNpYmxlTW9udGgpIHtcbiAgICBpZiAoIWRhdGUpIHJldHVybiBmYWxzZTtcbiAgICB2YXIgX3RoaXMkcHJvcHMxMyA9IHRoaXMucHJvcHMsXG4gICAgICAgIG51bWJlck9mTW9udGhzID0gX3RoaXMkcHJvcHMxMy5udW1iZXJPZk1vbnRocyxcbiAgICAgICAgZW5hYmxlT3V0c2lkZURheXMgPSBfdGhpcyRwcm9wczEzLmVuYWJsZU91dHNpZGVEYXlzO1xuICAgIHJldHVybiAoMCwgX2lzRGF5VmlzaWJsZVtcImRlZmF1bHRcIl0pKGRhdGUsIHZpc2libGVNb250aCwgbnVtYmVyT2ZNb250aHMsIGVuYWJsZU91dHNpZGVEYXlzKTtcbiAgfTtcblxuICBfcHJvdG8uYWRkTW9kaWZpZXIgPSBmdW5jdGlvbiBhZGRNb2RpZmllcih1cGRhdGVkRGF5cywgZGF5LCBtb2RpZmllcikge1xuICAgIHJldHVybiAoMCwgX21vZGlmaWVycy5hZGRNb2RpZmllcikodXBkYXRlZERheXMsIGRheSwgbW9kaWZpZXIsIHRoaXMucHJvcHMsIHRoaXMuc3RhdGUpO1xuICB9O1xuXG4gIF9wcm90by5hZGRNb2RpZmllclRvUmFuZ2UgPSBmdW5jdGlvbiBhZGRNb2RpZmllclRvUmFuZ2UodXBkYXRlZERheXMsIHN0YXJ0LCBlbmQsIG1vZGlmaWVyKSB7XG4gICAgdmFyIGRheXMgPSB1cGRhdGVkRGF5cztcbiAgICB2YXIgc3BhblN0YXJ0ID0gc3RhcnQuY2xvbmUoKTtcblxuICAgIHdoaWxlICgoMCwgX2lzQmVmb3JlRGF5W1wiZGVmYXVsdFwiXSkoc3BhblN0YXJ0LCBlbmQpKSB7XG4gICAgICBkYXlzID0gdGhpcy5hZGRNb2RpZmllcihkYXlzLCBzcGFuU3RhcnQsIG1vZGlmaWVyKTtcbiAgICAgIHNwYW5TdGFydCA9IHNwYW5TdGFydC5jbG9uZSgpLmFkZCgxLCAnZGF5Jyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRheXM7XG4gIH07XG5cbiAgX3Byb3RvLmRlbGV0ZU1vZGlmaWVyID0gZnVuY3Rpb24gZGVsZXRlTW9kaWZpZXIodXBkYXRlZERheXMsIGRheSwgbW9kaWZpZXIpIHtcbiAgICByZXR1cm4gKDAsIF9tb2RpZmllcnMuZGVsZXRlTW9kaWZpZXIpKHVwZGF0ZWREYXlzLCBkYXksIG1vZGlmaWVyLCB0aGlzLnByb3BzLCB0aGlzLnN0YXRlKTtcbiAgfTtcblxuICBfcHJvdG8uZGVsZXRlTW9kaWZpZXJGcm9tUmFuZ2UgPSBmdW5jdGlvbiBkZWxldGVNb2RpZmllckZyb21SYW5nZSh1cGRhdGVkRGF5cywgc3RhcnQsIGVuZCwgbW9kaWZpZXIpIHtcbiAgICB2YXIgZGF5cyA9IHVwZGF0ZWREYXlzO1xuICAgIHZhciBzcGFuU3RhcnQgPSBzdGFydC5jbG9uZSgpO1xuXG4gICAgd2hpbGUgKCgwLCBfaXNCZWZvcmVEYXlbXCJkZWZhdWx0XCJdKShzcGFuU3RhcnQsIGVuZCkpIHtcbiAgICAgIGRheXMgPSB0aGlzLmRlbGV0ZU1vZGlmaWVyKGRheXMsIHNwYW5TdGFydCwgbW9kaWZpZXIpO1xuICAgICAgc3BhblN0YXJ0ID0gc3BhblN0YXJ0LmNsb25lKCkuYWRkKDEsICdkYXknKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGF5cztcbiAgfTtcblxuICBfcHJvdG8uZG9lc05vdE1lZXRNaW5pbXVtTmlnaHRzID0gZnVuY3Rpb24gZG9lc05vdE1lZXRNaW5pbXVtTmlnaHRzKGRheSkge1xuICAgIHZhciBfdGhpcyRwcm9wczE0ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgc3RhcnREYXRlID0gX3RoaXMkcHJvcHMxNC5zdGFydERhdGUsXG4gICAgICAgIGlzT3V0c2lkZVJhbmdlID0gX3RoaXMkcHJvcHMxNC5pc091dHNpZGVSYW5nZSxcbiAgICAgICAgZm9jdXNlZElucHV0ID0gX3RoaXMkcHJvcHMxNC5mb2N1c2VkSW5wdXQsXG4gICAgICAgIG1pbmltdW1OaWdodHMgPSBfdGhpcyRwcm9wczE0Lm1pbmltdW1OaWdodHM7XG4gICAgaWYgKGZvY3VzZWRJbnB1dCAhPT0gX2NvbnN0YW50cy5FTkRfREFURSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKHN0YXJ0RGF0ZSkge1xuICAgICAgdmFyIGRheURpZmYgPSBkYXkuZGlmZihzdGFydERhdGUuY2xvbmUoKS5zdGFydE9mKCdkYXknKS5ob3VyKDEyKSwgJ2RheXMnKTtcbiAgICAgIHJldHVybiBkYXlEaWZmIDwgbWluaW11bU5pZ2h0cyAmJiBkYXlEaWZmID49IDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIGlzT3V0c2lkZVJhbmdlKCgwLCBfbW9tZW50W1wiZGVmYXVsdFwiXSkoZGF5KS5zdWJ0cmFjdChtaW5pbXVtTmlnaHRzLCAnZGF5cycpKTtcbiAgfTtcblxuICBfcHJvdG8uZG9lc05vdE1lZXRNaW5OaWdodHNGb3JIb3ZlcmVkU3RhcnREYXRlID0gZnVuY3Rpb24gZG9lc05vdE1lZXRNaW5OaWdodHNGb3JIb3ZlcmVkU3RhcnREYXRlKGRheSwgaG92ZXJEYXRlKSB7XG4gICAgdmFyIF90aGlzJHByb3BzMTUgPSB0aGlzLnByb3BzLFxuICAgICAgICBmb2N1c2VkSW5wdXQgPSBfdGhpcyRwcm9wczE1LmZvY3VzZWRJbnB1dCxcbiAgICAgICAgZ2V0TWluTmlnaHRzRm9ySG92ZXJEYXRlID0gX3RoaXMkcHJvcHMxNS5nZXRNaW5OaWdodHNGb3JIb3ZlckRhdGU7XG4gICAgaWYgKGZvY3VzZWRJbnB1dCAhPT0gX2NvbnN0YW50cy5FTkRfREFURSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKGhvdmVyRGF0ZSAmJiAhdGhpcy5pc0Jsb2NrZWQoaG92ZXJEYXRlKSkge1xuICAgICAgdmFyIG1pbk5pZ2h0cyA9IGdldE1pbk5pZ2h0c0ZvckhvdmVyRGF0ZShob3ZlckRhdGUpO1xuICAgICAgdmFyIGRheURpZmYgPSBkYXkuZGlmZihob3ZlckRhdGUuY2xvbmUoKS5zdGFydE9mKCdkYXknKS5ob3VyKDEyKSwgJ2RheXMnKTtcbiAgICAgIHJldHVybiBkYXlEaWZmIDwgbWluTmlnaHRzICYmIGRheURpZmYgPj0gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgX3Byb3RvLmlzRGF5QWZ0ZXJIb3ZlcmVkU3RhcnREYXRlID0gZnVuY3Rpb24gaXNEYXlBZnRlckhvdmVyZWRTdGFydERhdGUoZGF5KSB7XG4gICAgdmFyIF90aGlzJHByb3BzMTYgPSB0aGlzLnByb3BzLFxuICAgICAgICBzdGFydERhdGUgPSBfdGhpcyRwcm9wczE2LnN0YXJ0RGF0ZSxcbiAgICAgICAgZW5kRGF0ZSA9IF90aGlzJHByb3BzMTYuZW5kRGF0ZSxcbiAgICAgICAgbWluaW11bU5pZ2h0cyA9IF90aGlzJHByb3BzMTYubWluaW11bU5pZ2h0cztcblxuICAgIHZhciBfcmVmMiA9IHRoaXMuc3RhdGUgfHwge30sXG4gICAgICAgIGhvdmVyRGF0ZSA9IF9yZWYyLmhvdmVyRGF0ZTtcblxuICAgIHJldHVybiAhIXN0YXJ0RGF0ZSAmJiAhZW5kRGF0ZSAmJiAhdGhpcy5pc0Jsb2NrZWQoZGF5KSAmJiAoMCwgX2lzTmV4dERheVtcImRlZmF1bHRcIl0pKGhvdmVyRGF0ZSwgZGF5KSAmJiBtaW5pbXVtTmlnaHRzID4gMCAmJiAoMCwgX2lzU2FtZURheVtcImRlZmF1bHRcIl0pKGhvdmVyRGF0ZSwgc3RhcnREYXRlKTtcbiAgfTtcblxuICBfcHJvdG8uaXNFbmREYXRlID0gZnVuY3Rpb24gaXNFbmREYXRlKGRheSkge1xuICAgIHZhciBlbmREYXRlID0gdGhpcy5wcm9wcy5lbmREYXRlO1xuICAgIHJldHVybiAoMCwgX2lzU2FtZURheVtcImRlZmF1bHRcIl0pKGRheSwgZW5kRGF0ZSk7XG4gIH07XG5cbiAgX3Byb3RvLmlzSG92ZXJlZCA9IGZ1bmN0aW9uIGlzSG92ZXJlZChkYXkpIHtcbiAgICB2YXIgX3JlZjMgPSB0aGlzLnN0YXRlIHx8IHt9LFxuICAgICAgICBob3ZlckRhdGUgPSBfcmVmMy5ob3ZlckRhdGU7XG5cbiAgICB2YXIgZm9jdXNlZElucHV0ID0gdGhpcy5wcm9wcy5mb2N1c2VkSW5wdXQ7XG4gICAgcmV0dXJuICEhZm9jdXNlZElucHV0ICYmICgwLCBfaXNTYW1lRGF5W1wiZGVmYXVsdFwiXSkoZGF5LCBob3ZlckRhdGUpO1xuICB9O1xuXG4gIF9wcm90by5pc0luSG92ZXJlZFNwYW4gPSBmdW5jdGlvbiBpc0luSG92ZXJlZFNwYW4oZGF5KSB7XG4gICAgdmFyIF90aGlzJHByb3BzMTcgPSB0aGlzLnByb3BzLFxuICAgICAgICBzdGFydERhdGUgPSBfdGhpcyRwcm9wczE3LnN0YXJ0RGF0ZSxcbiAgICAgICAgZW5kRGF0ZSA9IF90aGlzJHByb3BzMTcuZW5kRGF0ZTtcblxuICAgIHZhciBfcmVmNCA9IHRoaXMuc3RhdGUgfHwge30sXG4gICAgICAgIGhvdmVyRGF0ZSA9IF9yZWY0LmhvdmVyRGF0ZTtcblxuICAgIHZhciBpc0ZvcndhcmRSYW5nZSA9ICEhc3RhcnREYXRlICYmICFlbmREYXRlICYmIChkYXkuaXNCZXR3ZWVuKHN0YXJ0RGF0ZSwgaG92ZXJEYXRlKSB8fCAoMCwgX2lzU2FtZURheVtcImRlZmF1bHRcIl0pKGhvdmVyRGF0ZSwgZGF5KSk7XG4gICAgdmFyIGlzQmFja3dhcmRSYW5nZSA9ICEhZW5kRGF0ZSAmJiAhc3RhcnREYXRlICYmIChkYXkuaXNCZXR3ZWVuKGhvdmVyRGF0ZSwgZW5kRGF0ZSkgfHwgKDAsIF9pc1NhbWVEYXlbXCJkZWZhdWx0XCJdKShob3ZlckRhdGUsIGRheSkpO1xuICAgIHZhciBpc1ZhbGlkRGF5SG92ZXJlZCA9IGhvdmVyRGF0ZSAmJiAhdGhpcy5pc0Jsb2NrZWQoaG92ZXJEYXRlKTtcbiAgICByZXR1cm4gKGlzRm9yd2FyZFJhbmdlIHx8IGlzQmFja3dhcmRSYW5nZSkgJiYgaXNWYWxpZERheUhvdmVyZWQ7XG4gIH07XG5cbiAgX3Byb3RvLmlzSW5TZWxlY3RlZFNwYW4gPSBmdW5jdGlvbiBpc0luU2VsZWN0ZWRTcGFuKGRheSkge1xuICAgIHZhciBfdGhpcyRwcm9wczE4ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgc3RhcnREYXRlID0gX3RoaXMkcHJvcHMxOC5zdGFydERhdGUsXG4gICAgICAgIGVuZERhdGUgPSBfdGhpcyRwcm9wczE4LmVuZERhdGU7XG4gICAgcmV0dXJuIGRheS5pc0JldHdlZW4oc3RhcnREYXRlLCBlbmREYXRlLCAnZGF5cycpO1xuICB9O1xuXG4gIF9wcm90by5pc0xhc3RJblJhbmdlID0gZnVuY3Rpb24gaXNMYXN0SW5SYW5nZShkYXkpIHtcbiAgICB2YXIgZW5kRGF0ZSA9IHRoaXMucHJvcHMuZW5kRGF0ZTtcbiAgICByZXR1cm4gdGhpcy5pc0luU2VsZWN0ZWRTcGFuKGRheSkgJiYgKDAsIF9pc05leHREYXlbXCJkZWZhdWx0XCJdKShkYXksIGVuZERhdGUpO1xuICB9O1xuXG4gIF9wcm90by5pc1N0YXJ0RGF0ZSA9IGZ1bmN0aW9uIGlzU3RhcnREYXRlKGRheSkge1xuICAgIHZhciBzdGFydERhdGUgPSB0aGlzLnByb3BzLnN0YXJ0RGF0ZTtcbiAgICByZXR1cm4gKDAsIF9pc1NhbWVEYXlbXCJkZWZhdWx0XCJdKShkYXksIHN0YXJ0RGF0ZSk7XG4gIH07XG5cbiAgX3Byb3RvLmlzQmxvY2tlZCA9IGZ1bmN0aW9uIGlzQmxvY2tlZChkYXkpIHtcbiAgICB2YXIgYmxvY2tEYXlzVmlvbGF0aW5nTWluTmlnaHRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB0cnVlO1xuICAgIHZhciBfdGhpcyRwcm9wczE5ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgaXNEYXlCbG9ja2VkID0gX3RoaXMkcHJvcHMxOS5pc0RheUJsb2NrZWQsXG4gICAgICAgIGlzT3V0c2lkZVJhbmdlID0gX3RoaXMkcHJvcHMxOS5pc091dHNpZGVSYW5nZTtcbiAgICByZXR1cm4gaXNEYXlCbG9ja2VkKGRheSkgfHwgaXNPdXRzaWRlUmFuZ2UoZGF5KSB8fCBibG9ja0RheXNWaW9sYXRpbmdNaW5OaWdodHMgJiYgdGhpcy5kb2VzTm90TWVldE1pbmltdW1OaWdodHMoZGF5KTtcbiAgfTtcblxuICBfcHJvdG8uaXNUb2RheSA9IGZ1bmN0aW9uIGlzVG9kYXkoZGF5KSB7XG4gICAgcmV0dXJuICgwLCBfaXNTYW1lRGF5W1wiZGVmYXVsdFwiXSkoZGF5LCB0aGlzLnRvZGF5KTtcbiAgfTtcblxuICBfcHJvdG8uaXNGaXJzdERheU9mV2VlayA9IGZ1bmN0aW9uIGlzRmlyc3REYXlPZldlZWsoZGF5KSB7XG4gICAgdmFyIGZpcnN0RGF5T2ZXZWVrID0gdGhpcy5wcm9wcy5maXJzdERheU9mV2VlaztcbiAgICByZXR1cm4gZGF5LmRheSgpID09PSAoZmlyc3REYXlPZldlZWsgfHwgX21vbWVudFtcImRlZmF1bHRcIl0ubG9jYWxlRGF0YSgpLmZpcnN0RGF5T2ZXZWVrKCkpO1xuICB9O1xuXG4gIF9wcm90by5pc0xhc3REYXlPZldlZWsgPSBmdW5jdGlvbiBpc0xhc3REYXlPZldlZWsoZGF5KSB7XG4gICAgdmFyIGZpcnN0RGF5T2ZXZWVrID0gdGhpcy5wcm9wcy5maXJzdERheU9mV2VlaztcbiAgICByZXR1cm4gZGF5LmRheSgpID09PSAoKGZpcnN0RGF5T2ZXZWVrIHx8IF9tb21lbnRbXCJkZWZhdWx0XCJdLmxvY2FsZURhdGEoKS5maXJzdERheU9mV2VlaygpKSArIDYpICUgNztcbiAgfTtcblxuICBfcHJvdG8uaXNGaXJzdFBvc3NpYmxlRW5kRGF0ZUZvckhvdmVyZWRTdGFydERhdGUgPSBmdW5jdGlvbiBpc0ZpcnN0UG9zc2libGVFbmREYXRlRm9ySG92ZXJlZFN0YXJ0RGF0ZShkYXksIGhvdmVyRGF0ZSkge1xuICAgIHZhciBfdGhpcyRwcm9wczIwID0gdGhpcy5wcm9wcyxcbiAgICAgICAgZm9jdXNlZElucHV0ID0gX3RoaXMkcHJvcHMyMC5mb2N1c2VkSW5wdXQsXG4gICAgICAgIGdldE1pbk5pZ2h0c0ZvckhvdmVyRGF0ZSA9IF90aGlzJHByb3BzMjAuZ2V0TWluTmlnaHRzRm9ySG92ZXJEYXRlO1xuICAgIGlmIChmb2N1c2VkSW5wdXQgIT09IF9jb25zdGFudHMuRU5EX0RBVEUgfHwgIWhvdmVyRGF0ZSB8fCB0aGlzLmlzQmxvY2tlZChob3ZlckRhdGUpKSByZXR1cm4gZmFsc2U7XG4gICAgdmFyIG1pbk5pZ2h0cyA9IGdldE1pbk5pZ2h0c0ZvckhvdmVyRGF0ZShob3ZlckRhdGUpO1xuICAgIHZhciBmaXJzdEF2YWlsYWJsZUVuZERhdGUgPSBob3ZlckRhdGUuY2xvbmUoKS5hZGQobWluTmlnaHRzLCAnZGF5cycpO1xuICAgIHJldHVybiAoMCwgX2lzU2FtZURheVtcImRlZmF1bHRcIl0pKGRheSwgZmlyc3RBdmFpbGFibGVFbmREYXRlKTtcbiAgfTtcblxuICBfcHJvdG8uYmVmb3JlU2VsZWN0ZWRFbmQgPSBmdW5jdGlvbiBiZWZvcmVTZWxlY3RlZEVuZChkYXkpIHtcbiAgICB2YXIgZW5kRGF0ZSA9IHRoaXMucHJvcHMuZW5kRGF0ZTtcbiAgICByZXR1cm4gKDAsIF9pc0JlZm9yZURheVtcImRlZmF1bHRcIl0pKGRheSwgZW5kRGF0ZSk7XG4gIH07XG5cbiAgX3Byb3RvLmlzRGF5QmVmb3JlSG92ZXJlZEVuZERhdGUgPSBmdW5jdGlvbiBpc0RheUJlZm9yZUhvdmVyZWRFbmREYXRlKGRheSkge1xuICAgIHZhciBfdGhpcyRwcm9wczIxID0gdGhpcy5wcm9wcyxcbiAgICAgICAgc3RhcnREYXRlID0gX3RoaXMkcHJvcHMyMS5zdGFydERhdGUsXG4gICAgICAgIGVuZERhdGUgPSBfdGhpcyRwcm9wczIxLmVuZERhdGUsXG4gICAgICAgIG1pbmltdW1OaWdodHMgPSBfdGhpcyRwcm9wczIxLm1pbmltdW1OaWdodHM7XG5cbiAgICB2YXIgX3JlZjUgPSB0aGlzLnN0YXRlIHx8IHt9LFxuICAgICAgICBob3ZlckRhdGUgPSBfcmVmNS5ob3ZlckRhdGU7XG5cbiAgICByZXR1cm4gISFlbmREYXRlICYmICFzdGFydERhdGUgJiYgIXRoaXMuaXNCbG9ja2VkKGRheSkgJiYgKDAsIF9pc1ByZXZpb3VzRGF5W1wiZGVmYXVsdFwiXSkoaG92ZXJEYXRlLCBkYXkpICYmIG1pbmltdW1OaWdodHMgPiAwICYmICgwLCBfaXNTYW1lRGF5W1wiZGVmYXVsdFwiXSkoaG92ZXJEYXRlLCBlbmREYXRlKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczIyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgbnVtYmVyT2ZNb250aHMgPSBfdGhpcyRwcm9wczIyLm51bWJlck9mTW9udGhzLFxuICAgICAgICBvcmllbnRhdGlvbiA9IF90aGlzJHByb3BzMjIub3JpZW50YXRpb24sXG4gICAgICAgIG1vbnRoRm9ybWF0ID0gX3RoaXMkcHJvcHMyMi5tb250aEZvcm1hdCxcbiAgICAgICAgcmVuZGVyTW9udGhUZXh0ID0gX3RoaXMkcHJvcHMyMi5yZW5kZXJNb250aFRleHQsXG4gICAgICAgIHJlbmRlcldlZWtIZWFkZXJFbGVtZW50ID0gX3RoaXMkcHJvcHMyMi5yZW5kZXJXZWVrSGVhZGVyRWxlbWVudCxcbiAgICAgICAgZGF5UGlja2VyTmF2aWdhdGlvbklubGluZVN0eWxlcyA9IF90aGlzJHByb3BzMjIuZGF5UGlja2VyTmF2aWdhdGlvbklubGluZVN0eWxlcyxcbiAgICAgICAgbmF2UG9zaXRpb24gPSBfdGhpcyRwcm9wczIyLm5hdlBvc2l0aW9uLFxuICAgICAgICBuYXZQcmV2ID0gX3RoaXMkcHJvcHMyMi5uYXZQcmV2LFxuICAgICAgICBuYXZOZXh0ID0gX3RoaXMkcHJvcHMyMi5uYXZOZXh0LFxuICAgICAgICByZW5kZXJOYXZQcmV2QnV0dG9uID0gX3RoaXMkcHJvcHMyMi5yZW5kZXJOYXZQcmV2QnV0dG9uLFxuICAgICAgICByZW5kZXJOYXZOZXh0QnV0dG9uID0gX3RoaXMkcHJvcHMyMi5yZW5kZXJOYXZOZXh0QnV0dG9uLFxuICAgICAgICBub05hdkJ1dHRvbnMgPSBfdGhpcyRwcm9wczIyLm5vTmF2QnV0dG9ucyxcbiAgICAgICAgbm9OYXZOZXh0QnV0dG9uID0gX3RoaXMkcHJvcHMyMi5ub05hdk5leHRCdXR0b24sXG4gICAgICAgIG5vTmF2UHJldkJ1dHRvbiA9IF90aGlzJHByb3BzMjIubm9OYXZQcmV2QnV0dG9uLFxuICAgICAgICBvbk91dHNpZGVDbGljayA9IF90aGlzJHByb3BzMjIub25PdXRzaWRlQ2xpY2ssXG4gICAgICAgIHdpdGhQb3J0YWwgPSBfdGhpcyRwcm9wczIyLndpdGhQb3J0YWwsXG4gICAgICAgIGVuYWJsZU91dHNpZGVEYXlzID0gX3RoaXMkcHJvcHMyMi5lbmFibGVPdXRzaWRlRGF5cyxcbiAgICAgICAgZmlyc3REYXlPZldlZWsgPSBfdGhpcyRwcm9wczIyLmZpcnN0RGF5T2ZXZWVrLFxuICAgICAgICByZW5kZXJLZXlib2FyZFNob3J0Y3V0c0J1dHRvbiA9IF90aGlzJHByb3BzMjIucmVuZGVyS2V5Ym9hcmRTaG9ydGN1dHNCdXR0b24sXG4gICAgICAgIHJlbmRlcktleWJvYXJkU2hvcnRjdXRzUGFuZWwgPSBfdGhpcyRwcm9wczIyLnJlbmRlcktleWJvYXJkU2hvcnRjdXRzUGFuZWwsXG4gICAgICAgIGhpZGVLZXlib2FyZFNob3J0Y3V0c1BhbmVsID0gX3RoaXMkcHJvcHMyMi5oaWRlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCxcbiAgICAgICAgZGF5U2l6ZSA9IF90aGlzJHByb3BzMjIuZGF5U2l6ZSxcbiAgICAgICAgZm9jdXNlZElucHV0ID0gX3RoaXMkcHJvcHMyMi5mb2N1c2VkSW5wdXQsXG4gICAgICAgIHJlbmRlckNhbGVuZGFyRGF5ID0gX3RoaXMkcHJvcHMyMi5yZW5kZXJDYWxlbmRhckRheSxcbiAgICAgICAgcmVuZGVyRGF5Q29udGVudHMgPSBfdGhpcyRwcm9wczIyLnJlbmRlckRheUNvbnRlbnRzLFxuICAgICAgICByZW5kZXJDYWxlbmRhckluZm8gPSBfdGhpcyRwcm9wczIyLnJlbmRlckNhbGVuZGFySW5mbyxcbiAgICAgICAgcmVuZGVyTW9udGhFbGVtZW50ID0gX3RoaXMkcHJvcHMyMi5yZW5kZXJNb250aEVsZW1lbnQsXG4gICAgICAgIGNhbGVuZGFySW5mb1Bvc2l0aW9uID0gX3RoaXMkcHJvcHMyMi5jYWxlbmRhckluZm9Qb3NpdGlvbixcbiAgICAgICAgb25CbHVyID0gX3RoaXMkcHJvcHMyMi5vbkJsdXIsXG4gICAgICAgIG9uU2hpZnRUYWIgPSBfdGhpcyRwcm9wczIyLm9uU2hpZnRUYWIsXG4gICAgICAgIG9uVGFiID0gX3RoaXMkcHJvcHMyMi5vblRhYixcbiAgICAgICAgaXNGb2N1c2VkID0gX3RoaXMkcHJvcHMyMi5pc0ZvY3VzZWQsXG4gICAgICAgIHNob3dLZXlib2FyZFNob3J0Y3V0cyA9IF90aGlzJHByb3BzMjIuc2hvd0tleWJvYXJkU2hvcnRjdXRzLFxuICAgICAgICBpc1JUTCA9IF90aGlzJHByb3BzMjIuaXNSVEwsXG4gICAgICAgIHdlZWtEYXlGb3JtYXQgPSBfdGhpcyRwcm9wczIyLndlZWtEYXlGb3JtYXQsXG4gICAgICAgIGRheUFyaWFMYWJlbEZvcm1hdCA9IF90aGlzJHByb3BzMjIuZGF5QXJpYUxhYmVsRm9ybWF0LFxuICAgICAgICB2ZXJ0aWNhbEhlaWdodCA9IF90aGlzJHByb3BzMjIudmVydGljYWxIZWlnaHQsXG4gICAgICAgIG5vQm9yZGVyID0gX3RoaXMkcHJvcHMyMi5ub0JvcmRlcixcbiAgICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uID0gX3RoaXMkcHJvcHMyMi50cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgICAgIHZlcnRpY2FsQm9yZGVyU3BhY2luZyA9IF90aGlzJHByb3BzMjIudmVydGljYWxCb3JkZXJTcGFjaW5nLFxuICAgICAgICBob3Jpem9udGFsTW9udGhQYWRkaW5nID0gX3RoaXMkcHJvcHMyMi5ob3Jpem9udGFsTW9udGhQYWRkaW5nO1xuICAgIHZhciBfdGhpcyRzdGF0ZTcgPSB0aGlzLnN0YXRlLFxuICAgICAgICBjdXJyZW50TW9udGggPSBfdGhpcyRzdGF0ZTcuY3VycmVudE1vbnRoLFxuICAgICAgICBwaHJhc2VzID0gX3RoaXMkc3RhdGU3LnBocmFzZXMsXG4gICAgICAgIHZpc2libGVEYXlzID0gX3RoaXMkc3RhdGU3LnZpc2libGVEYXlzLFxuICAgICAgICBkaXNhYmxlUHJldiA9IF90aGlzJHN0YXRlNy5kaXNhYmxlUHJldixcbiAgICAgICAgZGlzYWJsZU5leHQgPSBfdGhpcyRzdGF0ZTcuZGlzYWJsZU5leHQ7XG4gICAgcmV0dXJuIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChfRGF5UGlja2VyW1wiZGVmYXVsdFwiXSwge1xuICAgICAgb3JpZW50YXRpb246IG9yaWVudGF0aW9uLFxuICAgICAgZW5hYmxlT3V0c2lkZURheXM6IGVuYWJsZU91dHNpZGVEYXlzLFxuICAgICAgbW9kaWZpZXJzOiB2aXNpYmxlRGF5cyxcbiAgICAgIG51bWJlck9mTW9udGhzOiBudW1iZXJPZk1vbnRocyxcbiAgICAgIG9uRGF5Q2xpY2s6IHRoaXMub25EYXlDbGljayxcbiAgICAgIG9uRGF5TW91c2VFbnRlcjogdGhpcy5vbkRheU1vdXNlRW50ZXIsXG4gICAgICBvbkRheU1vdXNlTGVhdmU6IHRoaXMub25EYXlNb3VzZUxlYXZlLFxuICAgICAgb25QcmV2TW9udGhDbGljazogdGhpcy5vblByZXZNb250aENsaWNrLFxuICAgICAgb25OZXh0TW9udGhDbGljazogdGhpcy5vbk5leHRNb250aENsaWNrLFxuICAgICAgb25Nb250aENoYW5nZTogdGhpcy5vbk1vbnRoQ2hhbmdlLFxuICAgICAgb25UYWI6IG9uVGFiLFxuICAgICAgb25TaGlmdFRhYjogb25TaGlmdFRhYixcbiAgICAgIG9uWWVhckNoYW5nZTogdGhpcy5vblllYXJDaGFuZ2UsXG4gICAgICBvbkdldE5leHRTY3JvbGxhYmxlTW9udGhzOiB0aGlzLm9uR2V0TmV4dFNjcm9sbGFibGVNb250aHMsXG4gICAgICBvbkdldFByZXZTY3JvbGxhYmxlTW9udGhzOiB0aGlzLm9uR2V0UHJldlNjcm9sbGFibGVNb250aHMsXG4gICAgICBtb250aEZvcm1hdDogbW9udGhGb3JtYXQsXG4gICAgICByZW5kZXJNb250aFRleHQ6IHJlbmRlck1vbnRoVGV4dCxcbiAgICAgIHJlbmRlcldlZWtIZWFkZXJFbGVtZW50OiByZW5kZXJXZWVrSGVhZGVyRWxlbWVudCxcbiAgICAgIHdpdGhQb3J0YWw6IHdpdGhQb3J0YWwsXG4gICAgICBoaWRkZW46ICFmb2N1c2VkSW5wdXQsXG4gICAgICBpbml0aWFsVmlzaWJsZU1vbnRoOiBmdW5jdGlvbiBpbml0aWFsVmlzaWJsZU1vbnRoKCkge1xuICAgICAgICByZXR1cm4gY3VycmVudE1vbnRoO1xuICAgICAgfSxcbiAgICAgIGRheVNpemU6IGRheVNpemUsXG4gICAgICBvbk91dHNpZGVDbGljazogb25PdXRzaWRlQ2xpY2ssXG4gICAgICBkaXNhYmxlUHJldjogZGlzYWJsZVByZXYsXG4gICAgICBkaXNhYmxlTmV4dDogZGlzYWJsZU5leHQsXG4gICAgICBkYXlQaWNrZXJOYXZpZ2F0aW9uSW5saW5lU3R5bGVzOiBkYXlQaWNrZXJOYXZpZ2F0aW9uSW5saW5lU3R5bGVzLFxuICAgICAgbmF2UG9zaXRpb246IG5hdlBvc2l0aW9uLFxuICAgICAgbmF2UHJldjogbmF2UHJldixcbiAgICAgIG5hdk5leHQ6IG5hdk5leHQsXG4gICAgICByZW5kZXJOYXZQcmV2QnV0dG9uOiByZW5kZXJOYXZQcmV2QnV0dG9uLFxuICAgICAgcmVuZGVyTmF2TmV4dEJ1dHRvbjogcmVuZGVyTmF2TmV4dEJ1dHRvbixcbiAgICAgIG5vTmF2QnV0dG9uczogbm9OYXZCdXR0b25zLFxuICAgICAgbm9OYXZQcmV2QnV0dG9uOiBub05hdlByZXZCdXR0b24sXG4gICAgICBub05hdk5leHRCdXR0b246IG5vTmF2TmV4dEJ1dHRvbixcbiAgICAgIHJlbmRlckNhbGVuZGFyRGF5OiByZW5kZXJDYWxlbmRhckRheSxcbiAgICAgIHJlbmRlckRheUNvbnRlbnRzOiByZW5kZXJEYXlDb250ZW50cyxcbiAgICAgIHJlbmRlckNhbGVuZGFySW5mbzogcmVuZGVyQ2FsZW5kYXJJbmZvLFxuICAgICAgcmVuZGVyTW9udGhFbGVtZW50OiByZW5kZXJNb250aEVsZW1lbnQsXG4gICAgICByZW5kZXJLZXlib2FyZFNob3J0Y3V0c0J1dHRvbjogcmVuZGVyS2V5Ym9hcmRTaG9ydGN1dHNCdXR0b24sXG4gICAgICByZW5kZXJLZXlib2FyZFNob3J0Y3V0c1BhbmVsOiByZW5kZXJLZXlib2FyZFNob3J0Y3V0c1BhbmVsLFxuICAgICAgY2FsZW5kYXJJbmZvUG9zaXRpb246IGNhbGVuZGFySW5mb1Bvc2l0aW9uLFxuICAgICAgZmlyc3REYXlPZldlZWs6IGZpcnN0RGF5T2ZXZWVrLFxuICAgICAgaGlkZUtleWJvYXJkU2hvcnRjdXRzUGFuZWw6IGhpZGVLZXlib2FyZFNob3J0Y3V0c1BhbmVsLFxuICAgICAgaXNGb2N1c2VkOiBpc0ZvY3VzZWQsXG4gICAgICBnZXRGaXJzdEZvY3VzYWJsZURheTogdGhpcy5nZXRGaXJzdEZvY3VzYWJsZURheSxcbiAgICAgIG9uQmx1cjogb25CbHVyLFxuICAgICAgc2hvd0tleWJvYXJkU2hvcnRjdXRzOiBzaG93S2V5Ym9hcmRTaG9ydGN1dHMsXG4gICAgICBwaHJhc2VzOiBwaHJhc2VzLFxuICAgICAgaXNSVEw6IGlzUlRMLFxuICAgICAgd2Vla0RheUZvcm1hdDogd2Vla0RheUZvcm1hdCxcbiAgICAgIGRheUFyaWFMYWJlbEZvcm1hdDogZGF5QXJpYUxhYmVsRm9ybWF0LFxuICAgICAgdmVydGljYWxIZWlnaHQ6IHZlcnRpY2FsSGVpZ2h0LFxuICAgICAgdmVydGljYWxCb3JkZXJTcGFjaW5nOiB2ZXJ0aWNhbEJvcmRlclNwYWNpbmcsXG4gICAgICBub0JvcmRlcjogbm9Cb3JkZXIsXG4gICAgICB0cmFuc2l0aW9uRHVyYXRpb246IHRyYW5zaXRpb25EdXJhdGlvbixcbiAgICAgIGhvcml6b250YWxNb250aFBhZGRpbmc6IGhvcml6b250YWxNb250aFBhZGRpbmdcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gRGF5UGlja2VyUmFuZ2VDb250cm9sbGVyO1xufShfcmVhY3RbXCJkZWZhdWx0XCJdLlB1cmVDb21wb25lbnQgfHwgX3JlYWN0W1wiZGVmYXVsdFwiXS5Db21wb25lbnQpO1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IERheVBpY2tlclJhbmdlQ29udHJvbGxlcjtcbkRheVBpY2tlclJhbmdlQ29udHJvbGxlci5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBwcm9wVHlwZXMgOiB7fTtcbkRheVBpY2tlclJhbmdlQ29udHJvbGxlci5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7IiwidmFyIGFycmF5V2l0aEhvbGVzID0gcmVxdWlyZShcIi4vYXJyYXlXaXRoSG9sZXNcIik7XG5cbnZhciBpdGVyYWJsZVRvQXJyYXlMaW1pdCA9IHJlcXVpcmUoXCIuL2l0ZXJhYmxlVG9BcnJheUxpbWl0XCIpO1xuXG52YXIgbm9uSXRlcmFibGVSZXN0ID0gcmVxdWlyZShcIi4vbm9uSXRlcmFibGVSZXN0XCIpO1xuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHtcbiAgcmV0dXJuIGFycmF5V2l0aEhvbGVzKGFycikgfHwgaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBub25JdGVyYWJsZVJlc3QoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfc2xpY2VkVG9BcnJheTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGlzTmV4dERheTtcblxudmFyIF9tb21lbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJtb21lbnRcIikpO1xuXG52YXIgX2lzU2FtZURheSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaXNTYW1lRGF5XCIpKTtcblxuZnVuY3Rpb24gaXNOZXh0RGF5KGEsIGIpIHtcbiAgaWYgKCFfbW9tZW50W1wiZGVmYXVsdFwiXS5pc01vbWVudChhKSB8fCAhX21vbWVudFtcImRlZmF1bHRcIl0uaXNNb21lbnQoYikpIHJldHVybiBmYWxzZTtcbiAgdmFyIG5leHREYXkgPSAoMCwgX21vbWVudFtcImRlZmF1bHRcIl0pKGEpLmFkZCgxLCAnZGF5Jyk7XG4gIHJldHVybiAoMCwgX2lzU2FtZURheVtcImRlZmF1bHRcIl0pKG5leHREYXksIGIpO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gZ2V0VmlzaWJsZURheXM7XG5cbnZhciBfbW9tZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwibW9tZW50XCIpKTtcblxudmFyIF90b0lTT01vbnRoU3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi90b0lTT01vbnRoU3RyaW5nXCIpKTtcblxuZnVuY3Rpb24gZ2V0VmlzaWJsZURheXMobW9udGgsIG51bWJlck9mTW9udGhzLCBlbmFibGVPdXRzaWRlRGF5cywgd2l0aG91dFRyYW5zaXRpb25Nb250aHMpIHtcbiAgaWYgKCFfbW9tZW50W1wiZGVmYXVsdFwiXS5pc01vbWVudChtb250aCkpIHJldHVybiB7fTtcbiAgdmFyIHZpc2libGVEYXlzQnlNb250aCA9IHt9O1xuICB2YXIgY3VycmVudE1vbnRoID0gd2l0aG91dFRyYW5zaXRpb25Nb250aHMgPyBtb250aC5jbG9uZSgpIDogbW9udGguY2xvbmUoKS5zdWJ0cmFjdCgxLCAnbW9udGgnKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8ICh3aXRob3V0VHJhbnNpdGlvbk1vbnRocyA/IG51bWJlck9mTW9udGhzIDogbnVtYmVyT2ZNb250aHMgKyAyKTsgaSArPSAxKSB7XG4gICAgdmFyIHZpc2libGVEYXlzID0gW107IC8vIHNldCB1dGMgb2Zmc2V0IHRvIGdldCBjb3JyZWN0IGRhdGVzIGluIGZ1dHVyZSAod2hlbiB0aW1lem9uZSBjaGFuZ2VzKVxuXG4gICAgdmFyIGJhc2VEYXRlID0gY3VycmVudE1vbnRoLmNsb25lKCk7XG4gICAgdmFyIGZpcnN0T2ZNb250aCA9IGJhc2VEYXRlLmNsb25lKCkuc3RhcnRPZignbW9udGgnKS5ob3VyKDEyKTtcbiAgICB2YXIgbGFzdE9mTW9udGggPSBiYXNlRGF0ZS5jbG9uZSgpLmVuZE9mKCdtb250aCcpLmhvdXIoMTIpO1xuICAgIHZhciBjdXJyZW50RGF5ID0gZmlyc3RPZk1vbnRoLmNsb25lKCk7IC8vIGRheXMgYmVsb25naW5nIHRvIHRoZSBwcmV2aW91cyBtb250aFxuXG4gICAgaWYgKGVuYWJsZU91dHNpZGVEYXlzKSB7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGN1cnJlbnREYXkud2Vla2RheSgpOyBqICs9IDEpIHtcbiAgICAgICAgdmFyIHByZXZEYXkgPSBjdXJyZW50RGF5LmNsb25lKCkuc3VidHJhY3QoaiArIDEsICdkYXknKTtcbiAgICAgICAgdmlzaWJsZURheXMudW5zaGlmdChwcmV2RGF5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB3aGlsZSAoY3VycmVudERheSA8IGxhc3RPZk1vbnRoKSB7XG4gICAgICB2aXNpYmxlRGF5cy5wdXNoKGN1cnJlbnREYXkuY2xvbmUoKSk7XG4gICAgICBjdXJyZW50RGF5LmFkZCgxLCAnZGF5Jyk7XG4gICAgfVxuXG4gICAgaWYgKGVuYWJsZU91dHNpZGVEYXlzKSB7XG4gICAgICAvLyB3ZWVrZGF5KCkgcmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGRheSBvZiB0aGUgd2VlayBhY2NvcmRpbmcgdG8gdGhlIGxvY2FsZVxuICAgICAgLy8gdGhpcyBtZWFucyBpZiB0aGUgd2VlayBzdGFydHMgb24gTW9uZGF5LCB3ZWVrZGF5KCkgd2lsbCByZXR1cm4gMCBmb3IgYSBNb25kYXkgZGF0ZSwgbm90IDFcbiAgICAgIGlmIChjdXJyZW50RGF5LndlZWtkYXkoKSAhPT0gMCkge1xuICAgICAgICAvLyBkYXlzIGJlbG9uZ2luZyB0byB0aGUgbmV4dCBtb250aFxuICAgICAgICBmb3IgKHZhciBrID0gY3VycmVudERheS53ZWVrZGF5KCksIGNvdW50ID0gMDsgayA8IDc7IGsgKz0gMSwgY291bnQgKz0gMSkge1xuICAgICAgICAgIHZhciBuZXh0RGF5ID0gY3VycmVudERheS5jbG9uZSgpLmFkZChjb3VudCwgJ2RheScpO1xuICAgICAgICAgIHZpc2libGVEYXlzLnB1c2gobmV4dERheSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB2aXNpYmxlRGF5c0J5TW9udGhbKDAsIF90b0lTT01vbnRoU3RyaW5nW1wiZGVmYXVsdFwiXSkoY3VycmVudE1vbnRoKV0gPSB2aXNpYmxlRGF5cztcbiAgICBjdXJyZW50TW9udGggPSBjdXJyZW50TW9udGguY2xvbmUoKS5hZGQoMSwgJ21vbnRoJyk7XG4gIH1cblxuICByZXR1cm4gdmlzaWJsZURheXNCeU1vbnRoO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuYWRkTW9kaWZpZXIgPSBhZGRNb2RpZmllcjtcbmV4cG9ydHMuZGVsZXRlTW9kaWZpZXIgPSBkZWxldGVNb2RpZmllcjtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9pc0RheVZpc2libGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2lzRGF5VmlzaWJsZVwiKSk7XG5cbnZhciBfdG9JU09EYXRlU3RyaW5nID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi90b0lTT0RhdGVTdHJpbmdcIikpO1xuXG52YXIgX3RvSVNPTW9udGhTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3RvSVNPTW9udGhTdHJpbmdcIikpO1xuXG52YXIgX2dldFByZXZpb3VzTW9udGhNZW1vTGFzdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vZ2V0UHJldmlvdXNNb250aE1lbW9MYXN0XCIpKTtcblxudmFyIF9jb25zdGFudHMgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzXCIpO1xuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIGFkZE1vZGlmaWVyKHVwZGF0ZWREYXlzLCBkYXksIG1vZGlmaWVyLCBwcm9wcywgc3RhdGUpIHtcbiAgdmFyIG51bWJlck9mVmlzaWJsZU1vbnRocyA9IHByb3BzLm51bWJlck9mTW9udGhzLFxuICAgICAgZW5hYmxlT3V0c2lkZURheXMgPSBwcm9wcy5lbmFibGVPdXRzaWRlRGF5cyxcbiAgICAgIG9yaWVudGF0aW9uID0gcHJvcHMub3JpZW50YXRpb247XG4gIHZhciBmaXJzdFZpc2libGVNb250aCA9IHN0YXRlLmN1cnJlbnRNb250aCxcbiAgICAgIHZpc2libGVEYXlzID0gc3RhdGUudmlzaWJsZURheXM7XG4gIHZhciBjdXJyZW50TW9udGggPSBmaXJzdFZpc2libGVNb250aDtcbiAgdmFyIG51bWJlck9mTW9udGhzID0gbnVtYmVyT2ZWaXNpYmxlTW9udGhzO1xuXG4gIGlmIChvcmllbnRhdGlvbiA9PT0gX2NvbnN0YW50cy5WRVJUSUNBTF9TQ1JPTExBQkxFKSB7XG4gICAgbnVtYmVyT2ZNb250aHMgPSBPYmplY3Qua2V5cyh2aXNpYmxlRGF5cykubGVuZ3RoO1xuICB9IGVsc2Uge1xuICAgIGN1cnJlbnRNb250aCA9ICgwLCBfZ2V0UHJldmlvdXNNb250aE1lbW9MYXN0W1wiZGVmYXVsdFwiXSkoY3VycmVudE1vbnRoKTtcbiAgICBudW1iZXJPZk1vbnRocyArPSAyO1xuICB9XG5cbiAgaWYgKCFkYXkgfHwgISgwLCBfaXNEYXlWaXNpYmxlW1wiZGVmYXVsdFwiXSkoZGF5LCBjdXJyZW50TW9udGgsIG51bWJlck9mTW9udGhzLCBlbmFibGVPdXRzaWRlRGF5cykpIHtcbiAgICByZXR1cm4gdXBkYXRlZERheXM7XG4gIH1cblxuICB2YXIgaXNvID0gKDAsIF90b0lTT0RhdGVTdHJpbmdbXCJkZWZhdWx0XCJdKShkYXkpO1xuXG4gIHZhciB1cGRhdGVkRGF5c0FmdGVyQWRkaXRpb24gPSBfb2JqZWN0U3ByZWFkKHt9LCB1cGRhdGVkRGF5cyk7XG5cbiAgaWYgKGVuYWJsZU91dHNpZGVEYXlzKSB7XG4gICAgdmFyIG1vbnRoc1RvVXBkYXRlID0gT2JqZWN0LmtleXModmlzaWJsZURheXMpLmZpbHRlcihmdW5jdGlvbiAobW9udGhLZXkpIHtcbiAgICAgIHJldHVybiBPYmplY3Qua2V5cyh2aXNpYmxlRGF5c1ttb250aEtleV0pLmluZGV4T2YoaXNvKSA+IC0xO1xuICAgIH0pO1xuICAgIHVwZGF0ZWREYXlzQWZ0ZXJBZGRpdGlvbiA9IG1vbnRoc1RvVXBkYXRlLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBtb250aElzbykge1xuICAgICAgdmFyIG1vbnRoID0gdXBkYXRlZERheXNbbW9udGhJc29dIHx8IHZpc2libGVEYXlzW21vbnRoSXNvXTtcblxuICAgICAgaWYgKCFtb250aFtpc29dIHx8ICFtb250aFtpc29dLmhhcyhtb2RpZmllcikpIHtcbiAgICAgICAgdmFyIG1vZGlmaWVycyA9IG5ldyBTZXQobW9udGhbaXNvXSk7XG4gICAgICAgIG1vZGlmaWVycy5hZGQobW9kaWZpZXIpO1xuICAgICAgICBhY2NbbW9udGhJc29dID0gX29iamVjdFNwcmVhZCh7fSwgbW9udGgsICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoe30sIGlzbywgbW9kaWZpZXJzKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgdXBkYXRlZERheXNBZnRlckFkZGl0aW9uKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbW9udGhJc28gPSAoMCwgX3RvSVNPTW9udGhTdHJpbmdbXCJkZWZhdWx0XCJdKShkYXkpO1xuICAgIHZhciBtb250aCA9IHVwZGF0ZWREYXlzW21vbnRoSXNvXSB8fCB2aXNpYmxlRGF5c1ttb250aElzb10gfHwge307XG5cbiAgICBpZiAoIW1vbnRoW2lzb10gfHwgIW1vbnRoW2lzb10uaGFzKG1vZGlmaWVyKSkge1xuICAgICAgdmFyIG1vZGlmaWVycyA9IG5ldyBTZXQobW9udGhbaXNvXSk7XG4gICAgICBtb2RpZmllcnMuYWRkKG1vZGlmaWVyKTtcbiAgICAgIHVwZGF0ZWREYXlzQWZ0ZXJBZGRpdGlvblttb250aElzb10gPSBfb2JqZWN0U3ByZWFkKHt9LCBtb250aCwgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKSh7fSwgaXNvLCBtb2RpZmllcnMpKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdXBkYXRlZERheXNBZnRlckFkZGl0aW9uO1xufVxuXG5mdW5jdGlvbiBkZWxldGVNb2RpZmllcih1cGRhdGVkRGF5cywgZGF5LCBtb2RpZmllciwgcHJvcHMsIHN0YXRlKSB7XG4gIHZhciBudW1iZXJPZlZpc2libGVNb250aHMgPSBwcm9wcy5udW1iZXJPZk1vbnRocyxcbiAgICAgIGVuYWJsZU91dHNpZGVEYXlzID0gcHJvcHMuZW5hYmxlT3V0c2lkZURheXMsXG4gICAgICBvcmllbnRhdGlvbiA9IHByb3BzLm9yaWVudGF0aW9uO1xuICB2YXIgZmlyc3RWaXNpYmxlTW9udGggPSBzdGF0ZS5jdXJyZW50TW9udGgsXG4gICAgICB2aXNpYmxlRGF5cyA9IHN0YXRlLnZpc2libGVEYXlzO1xuICB2YXIgY3VycmVudE1vbnRoID0gZmlyc3RWaXNpYmxlTW9udGg7XG4gIHZhciBudW1iZXJPZk1vbnRocyA9IG51bWJlck9mVmlzaWJsZU1vbnRocztcblxuICBpZiAob3JpZW50YXRpb24gPT09IF9jb25zdGFudHMuVkVSVElDQUxfU0NST0xMQUJMRSkge1xuICAgIG51bWJlck9mTW9udGhzID0gT2JqZWN0LmtleXModmlzaWJsZURheXMpLmxlbmd0aDtcbiAgfSBlbHNlIHtcbiAgICBjdXJyZW50TW9udGggPSAoMCwgX2dldFByZXZpb3VzTW9udGhNZW1vTGFzdFtcImRlZmF1bHRcIl0pKGN1cnJlbnRNb250aCk7XG4gICAgbnVtYmVyT2ZNb250aHMgKz0gMjtcbiAgfVxuXG4gIGlmICghZGF5IHx8ICEoMCwgX2lzRGF5VmlzaWJsZVtcImRlZmF1bHRcIl0pKGRheSwgY3VycmVudE1vbnRoLCBudW1iZXJPZk1vbnRocywgZW5hYmxlT3V0c2lkZURheXMpKSB7XG4gICAgcmV0dXJuIHVwZGF0ZWREYXlzO1xuICB9XG5cbiAgdmFyIGlzbyA9ICgwLCBfdG9JU09EYXRlU3RyaW5nW1wiZGVmYXVsdFwiXSkoZGF5KTtcblxuICB2YXIgdXBkYXRlZERheXNBZnRlckRlbGV0aW9uID0gX29iamVjdFNwcmVhZCh7fSwgdXBkYXRlZERheXMpO1xuXG4gIGlmIChlbmFibGVPdXRzaWRlRGF5cykge1xuICAgIHZhciBtb250aHNUb1VwZGF0ZSA9IE9iamVjdC5rZXlzKHZpc2libGVEYXlzKS5maWx0ZXIoZnVuY3Rpb24gKG1vbnRoS2V5KSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmtleXModmlzaWJsZURheXNbbW9udGhLZXldKS5pbmRleE9mKGlzbykgPiAtMTtcbiAgICB9KTtcbiAgICB1cGRhdGVkRGF5c0FmdGVyRGVsZXRpb24gPSBtb250aHNUb1VwZGF0ZS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgbW9udGhJc28pIHtcbiAgICAgIHZhciBtb250aCA9IHVwZGF0ZWREYXlzW21vbnRoSXNvXSB8fCB2aXNpYmxlRGF5c1ttb250aElzb107XG5cbiAgICAgIGlmIChtb250aFtpc29dICYmIG1vbnRoW2lzb10uaGFzKG1vZGlmaWVyKSkge1xuICAgICAgICB2YXIgbW9kaWZpZXJzID0gbmV3IFNldChtb250aFtpc29dKTtcbiAgICAgICAgbW9kaWZpZXJzW1wiZGVsZXRlXCJdKG1vZGlmaWVyKTtcbiAgICAgICAgYWNjW21vbnRoSXNvXSA9IF9vYmplY3RTcHJlYWQoe30sIG1vbnRoLCAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKHt9LCBpc28sIG1vZGlmaWVycykpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHVwZGF0ZWREYXlzQWZ0ZXJEZWxldGlvbik7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG1vbnRoSXNvID0gKDAsIF90b0lTT01vbnRoU3RyaW5nW1wiZGVmYXVsdFwiXSkoZGF5KTtcbiAgICB2YXIgbW9udGggPSB1cGRhdGVkRGF5c1ttb250aElzb10gfHwgdmlzaWJsZURheXNbbW9udGhJc29dIHx8IHt9O1xuXG4gICAgaWYgKG1vbnRoW2lzb10gJiYgbW9udGhbaXNvXS5oYXMobW9kaWZpZXIpKSB7XG4gICAgICB2YXIgbW9kaWZpZXJzID0gbmV3IFNldChtb250aFtpc29dKTtcbiAgICAgIG1vZGlmaWVyc1tcImRlbGV0ZVwiXShtb2RpZmllcik7XG4gICAgICB1cGRhdGVkRGF5c0FmdGVyRGVsZXRpb25bbW9udGhJc29dID0gX29iamVjdFNwcmVhZCh7fSwgbW9udGgsICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkoe30sIGlzbywgbW9kaWZpZXJzKSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHVwZGF0ZWREYXlzQWZ0ZXJEZWxldGlvbjtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGdldFBvb2xlZE1vbWVudDtcblxudmFyIF9tb21lbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJtb21lbnRcIikpO1xuXG52YXIgbW9tZW50UG9vbCA9IG5ldyBNYXAoKTtcblxuZnVuY3Rpb24gZ2V0UG9vbGVkTW9tZW50KGRheVN0cmluZykge1xuICBpZiAoIW1vbWVudFBvb2wuaGFzKGRheVN0cmluZykpIHtcbiAgICBtb21lbnRQb29sLnNldChkYXlTdHJpbmcsICgwLCBfbW9tZW50W1wiZGVmYXVsdFwiXSkoZGF5U3RyaW5nKSk7XG4gIH1cblxuICByZXR1cm4gbW9tZW50UG9vbC5nZXQoZGF5U3RyaW5nKTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF9lbnp5bWVTaGFsbG93RXF1YWwgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJlbnp5bWUtc2hhbGxvdy1lcXVhbFwiKSk7XG5cbnZhciBfc2xpY2VkVG9BcnJheTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL3NsaWNlZFRvQXJyYXlcIikpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKSk7XG5cbnZhciBfaW5oZXJpdHNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX3JlYWN0TW9tZW50UHJvcHR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3QtbW9tZW50LXByb3B0eXBlc1wiKSk7XG5cbnZhciBfYWlyYm5iUHJvcFR5cGVzID0gcmVxdWlyZShcImFpcmJuYi1wcm9wLXR5cGVzXCIpO1xuXG52YXIgX21vbWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIm1vbWVudFwiKSk7XG5cbnZhciBfb2JqZWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwib2JqZWN0LnZhbHVlc1wiKSk7XG5cbnZhciBfaXNUb3VjaERldmljZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImlzLXRvdWNoLWRldmljZVwiKSk7XG5cbnZhciBfZGVmYXVsdFBocmFzZXMgPSByZXF1aXJlKFwiLi4vZGVmYXVsdFBocmFzZXNcIik7XG5cbnZhciBfZ2V0UGhyYXNlUHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvZ2V0UGhyYXNlUHJvcFR5cGVzXCIpKTtcblxudmFyIF9pc1NhbWVEYXkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9pc1NhbWVEYXlcIikpO1xuXG52YXIgX2lzQWZ0ZXJEYXkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9pc0FmdGVyRGF5XCIpKTtcblxudmFyIF9nZXRWaXNpYmxlRGF5cyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2dldFZpc2libGVEYXlzXCIpKTtcblxudmFyIF90b0lTT0RhdGVTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy90b0lTT0RhdGVTdHJpbmdcIikpO1xuXG52YXIgX21vZGlmaWVycyA9IHJlcXVpcmUoXCIuLi91dGlscy9tb2RpZmllcnNcIik7XG5cbnZhciBfU2Nyb2xsYWJsZU9yaWVudGF0aW9uU2hhcGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zaGFwZXMvU2Nyb2xsYWJsZU9yaWVudGF0aW9uU2hhcGVcIikpO1xuXG52YXIgX0RheU9mV2Vla1NoYXBlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc2hhcGVzL0RheU9mV2Vla1NoYXBlXCIpKTtcblxudmFyIF9DYWxlbmRhckluZm9Qb3NpdGlvblNoYXBlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc2hhcGVzL0NhbGVuZGFySW5mb1Bvc2l0aW9uU2hhcGVcIikpO1xuXG52YXIgX05hdlBvc2l0aW9uU2hhcGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zaGFwZXMvTmF2UG9zaXRpb25TaGFwZVwiKSk7XG5cbnZhciBfY29uc3RhbnRzID0gcmVxdWlyZShcIi4uL2NvbnN0YW50c1wiKTtcblxudmFyIF9EYXlQaWNrZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0RheVBpY2tlclwiKSk7XG5cbnZhciBfZ2V0UG9vbGVkTW9tZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvZ2V0UG9vbGVkTW9tZW50XCIpKTtcblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgcHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF9haXJibmJQcm9wVHlwZXMuZm9yYmlkRXh0cmFQcm9wcykoe1xuICBkYXRlOiBfcmVhY3RNb21lbnRQcm9wdHlwZXNbXCJkZWZhdWx0XCJdLm1vbWVudE9iaixcbiAgb25EYXRlQ2hhbmdlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBmb2N1c2VkOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBvbkZvY3VzQ2hhbmdlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvbkNsb3NlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBrZWVwT3Blbk9uRGF0ZVNlbGVjdDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgaXNPdXRzaWRlUmFuZ2U6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIGlzRGF5QmxvY2tlZDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgaXNEYXlIaWdobGlnaHRlZDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgLy8gRGF5UGlja2VyIHByb3BzXG4gIHJlbmRlck1vbnRoVGV4dDogKDAsIF9haXJibmJQcm9wVHlwZXMubXV0dWFsbHlFeGNsdXNpdmVQcm9wcykoX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYywgJ3JlbmRlck1vbnRoVGV4dCcsICdyZW5kZXJNb250aEVsZW1lbnQnKSxcbiAgcmVuZGVyTW9udGhFbGVtZW50OiAoMCwgX2FpcmJuYlByb3BUeXBlcy5tdXR1YWxseUV4Y2x1c2l2ZVByb3BzKShfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLCAncmVuZGVyTW9udGhUZXh0JywgJ3JlbmRlck1vbnRoRWxlbWVudCcpLFxuICByZW5kZXJXZWVrSGVhZGVyRWxlbWVudDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgZW5hYmxlT3V0c2lkZURheXM6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIG51bWJlck9mTW9udGhzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5udW1iZXIsXG4gIG9yaWVudGF0aW9uOiBfU2Nyb2xsYWJsZU9yaWVudGF0aW9uU2hhcGVbXCJkZWZhdWx0XCJdLFxuICB3aXRoUG9ydGFsOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBpbml0aWFsVmlzaWJsZU1vbnRoOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBmaXJzdERheU9mV2VlazogX0RheU9mV2Vla1NoYXBlW1wiZGVmYXVsdFwiXSxcbiAgaGlkZUtleWJvYXJkU2hvcnRjdXRzUGFuZWw6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIGRheVNpemU6IF9haXJibmJQcm9wVHlwZXMubm9uTmVnYXRpdmVJbnRlZ2VyLFxuICB2ZXJ0aWNhbEhlaWdodDogX2FpcmJuYlByb3BUeXBlcy5ub25OZWdhdGl2ZUludGVnZXIsXG4gIG5vQm9yZGVyOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICB2ZXJ0aWNhbEJvcmRlclNwYWNpbmc6IF9haXJibmJQcm9wVHlwZXMubm9uTmVnYXRpdmVJbnRlZ2VyLFxuICB0cmFuc2l0aW9uRHVyYXRpb246IF9haXJibmJQcm9wVHlwZXMubm9uTmVnYXRpdmVJbnRlZ2VyLFxuICBob3Jpem9udGFsTW9udGhQYWRkaW5nOiBfYWlyYm5iUHJvcFR5cGVzLm5vbk5lZ2F0aXZlSW50ZWdlcixcbiAgZGF5UGlja2VyTmF2aWdhdGlvbklubGluZVN0eWxlczogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ub2JqZWN0LFxuICBuYXZQb3NpdGlvbjogX05hdlBvc2l0aW9uU2hhcGVbXCJkZWZhdWx0XCJdLFxuICBuYXZQcmV2OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ub2RlLFxuICBuYXZOZXh0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ub2RlLFxuICByZW5kZXJOYXZQcmV2QnV0dG9uOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICByZW5kZXJOYXZOZXh0QnV0dG9uOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBub05hdkJ1dHRvbnM6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIG5vTmF2TmV4dEJ1dHRvbjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgbm9OYXZQcmV2QnV0dG9uOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBvblByZXZNb250aENsaWNrOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvbk5leHRNb250aENsaWNrOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvbk91dHNpZGVDbGljazogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgcmVuZGVyQ2FsZW5kYXJEYXk6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIHJlbmRlckRheUNvbnRlbnRzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICByZW5kZXJDYWxlbmRhckluZm86IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIGNhbGVuZGFySW5mb1Bvc2l0aW9uOiBfQ2FsZW5kYXJJbmZvUG9zaXRpb25TaGFwZVtcImRlZmF1bHRcIl0sXG4gIC8vIGFjY2Vzc2liaWxpdHlcbiAgb25CbHVyOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBpc0ZvY3VzZWQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIHNob3dLZXlib2FyZFNob3J0Y3V0czogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgb25UYWI6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIG9uU2hpZnRUYWI6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIC8vIGkxOG5cbiAgbW9udGhGb3JtYXQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZyxcbiAgd2Vla0RheUZvcm1hdDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLFxuICBwaHJhc2VzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zaGFwZSgoMCwgX2dldFBocmFzZVByb3BUeXBlc1tcImRlZmF1bHRcIl0pKF9kZWZhdWx0UGhyYXNlcy5EYXlQaWNrZXJQaHJhc2VzKSksXG4gIGRheUFyaWFMYWJlbEZvcm1hdDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLFxuICBpc1JUTDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbFxufSkgOiB7fTtcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGRhdGU6IHVuZGVmaW5lZCxcbiAgLy8gVE9ETzogdXNlIG51bGxcbiAgb25EYXRlQ2hhbmdlOiBmdW5jdGlvbiBvbkRhdGVDaGFuZ2UoKSB7fSxcbiAgZm9jdXNlZDogZmFsc2UsXG4gIG9uRm9jdXNDaGFuZ2U6IGZ1bmN0aW9uIG9uRm9jdXNDaGFuZ2UoKSB7fSxcbiAgb25DbG9zZTogZnVuY3Rpb24gb25DbG9zZSgpIHt9LFxuICBrZWVwT3Blbk9uRGF0ZVNlbGVjdDogZmFsc2UsXG4gIGlzT3V0c2lkZVJhbmdlOiBmdW5jdGlvbiBpc091dHNpZGVSYW5nZSgpIHt9LFxuICBpc0RheUJsb2NrZWQ6IGZ1bmN0aW9uIGlzRGF5QmxvY2tlZCgpIHt9LFxuICBpc0RheUhpZ2hsaWdodGVkOiBmdW5jdGlvbiBpc0RheUhpZ2hsaWdodGVkKCkge30sXG4gIC8vIERheVBpY2tlciBwcm9wc1xuICByZW5kZXJNb250aFRleHQ6IG51bGwsXG4gIHJlbmRlcldlZWtIZWFkZXJFbGVtZW50OiBudWxsLFxuICBlbmFibGVPdXRzaWRlRGF5czogZmFsc2UsXG4gIG51bWJlck9mTW9udGhzOiAxLFxuICBvcmllbnRhdGlvbjogX2NvbnN0YW50cy5IT1JJWk9OVEFMX09SSUVOVEFUSU9OLFxuICB3aXRoUG9ydGFsOiBmYWxzZSxcbiAgaGlkZUtleWJvYXJkU2hvcnRjdXRzUGFuZWw6IGZhbHNlLFxuICBpbml0aWFsVmlzaWJsZU1vbnRoOiBudWxsLFxuICBmaXJzdERheU9mV2VlazogbnVsbCxcbiAgZGF5U2l6ZTogX2NvbnN0YW50cy5EQVlfU0laRSxcbiAgdmVydGljYWxIZWlnaHQ6IG51bGwsXG4gIG5vQm9yZGVyOiBmYWxzZSxcbiAgdmVydGljYWxCb3JkZXJTcGFjaW5nOiB1bmRlZmluZWQsXG4gIHRyYW5zaXRpb25EdXJhdGlvbjogdW5kZWZpbmVkLFxuICBob3Jpem9udGFsTW9udGhQYWRkaW5nOiAxMyxcbiAgZGF5UGlja2VyTmF2aWdhdGlvbklubGluZVN0eWxlczogbnVsbCxcbiAgbmF2UG9zaXRpb246IF9jb25zdGFudHMuTkFWX1BPU0lUSU9OX1RPUCxcbiAgbmF2UHJldjogbnVsbCxcbiAgbmF2TmV4dDogbnVsbCxcbiAgcmVuZGVyTmF2UHJldkJ1dHRvbjogbnVsbCxcbiAgcmVuZGVyTmF2TmV4dEJ1dHRvbjogbnVsbCxcbiAgbm9OYXZCdXR0b25zOiBmYWxzZSxcbiAgbm9OYXZOZXh0QnV0dG9uOiBmYWxzZSxcbiAgbm9OYXZQcmV2QnV0dG9uOiBmYWxzZSxcbiAgb25QcmV2TW9udGhDbGljazogZnVuY3Rpb24gb25QcmV2TW9udGhDbGljaygpIHt9LFxuICBvbk5leHRNb250aENsaWNrOiBmdW5jdGlvbiBvbk5leHRNb250aENsaWNrKCkge30sXG4gIG9uT3V0c2lkZUNsaWNrOiBmdW5jdGlvbiBvbk91dHNpZGVDbGljaygpIHt9LFxuICByZW5kZXJDYWxlbmRhckRheTogdW5kZWZpbmVkLFxuICByZW5kZXJEYXlDb250ZW50czogbnVsbCxcbiAgcmVuZGVyQ2FsZW5kYXJJbmZvOiBudWxsLFxuICByZW5kZXJNb250aEVsZW1lbnQ6IG51bGwsXG4gIGNhbGVuZGFySW5mb1Bvc2l0aW9uOiBfY29uc3RhbnRzLklORk9fUE9TSVRJT05fQk9UVE9NLFxuICAvLyBhY2Nlc3NpYmlsaXR5XG4gIG9uQmx1cjogZnVuY3Rpb24gb25CbHVyKCkge30sXG4gIGlzRm9jdXNlZDogZmFsc2UsXG4gIHNob3dLZXlib2FyZFNob3J0Y3V0czogZmFsc2UsXG4gIG9uVGFiOiBmdW5jdGlvbiBvblRhYigpIHt9LFxuICBvblNoaWZ0VGFiOiBmdW5jdGlvbiBvblNoaWZ0VGFiKCkge30sXG4gIC8vIGkxOG5cbiAgbW9udGhGb3JtYXQ6ICdNTU1NIFlZWVknLFxuICB3ZWVrRGF5Rm9ybWF0OiAnZGQnLFxuICBwaHJhc2VzOiBfZGVmYXVsdFBocmFzZXMuRGF5UGlja2VyUGhyYXNlcyxcbiAgZGF5QXJpYUxhYmVsRm9ybWF0OiB1bmRlZmluZWQsXG4gIGlzUlRMOiBmYWxzZVxufTtcblxudmFyIERheVBpY2tlclNpbmdsZURhdGVDb250cm9sbGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfcmVmKSB7XG4gICgwLCBfaW5oZXJpdHNMb29zZTJbXCJkZWZhdWx0XCJdKShEYXlQaWNrZXJTaW5nbGVEYXRlQ29udHJvbGxlciwgX3JlZik7XG4gIHZhciBfcHJvdG8gPSBEYXlQaWNrZXJTaW5nbGVEYXRlQ29udHJvbGxlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvWyFfcmVhY3RbXCJkZWZhdWx0XCJdLlB1cmVDb21wb25lbnQgJiYgXCJzaG91bGRDb21wb25lbnRVcGRhdGVcIl0gPSBmdW5jdGlvbiAobmV4dFByb3BzLCBuZXh0U3RhdGUpIHtcbiAgICByZXR1cm4gISgwLCBfZW56eW1lU2hhbGxvd0VxdWFsW1wiZGVmYXVsdFwiXSkodGhpcy5wcm9wcywgbmV4dFByb3BzKSB8fCAhKDAsIF9lbnp5bWVTaGFsbG93RXF1YWxbXCJkZWZhdWx0XCJdKSh0aGlzLnN0YXRlLCBuZXh0U3RhdGUpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIERheVBpY2tlclNpbmdsZURhdGVDb250cm9sbGVyKHByb3BzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfcmVmLmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XG4gICAgX3RoaXMuaXNUb3VjaERldmljZSA9IGZhbHNlO1xuICAgIF90aGlzLnRvZGF5ID0gKDAsIF9tb21lbnRbXCJkZWZhdWx0XCJdKSgpO1xuICAgIF90aGlzLm1vZGlmaWVycyA9IHtcbiAgICAgIHRvZGF5OiBmdW5jdGlvbiB0b2RheShkYXkpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmlzVG9kYXkoZGF5KTtcbiAgICAgIH0sXG4gICAgICBibG9ja2VkOiBmdW5jdGlvbiBibG9ja2VkKGRheSkge1xuICAgICAgICByZXR1cm4gX3RoaXMuaXNCbG9ja2VkKGRheSk7XG4gICAgICB9LFxuICAgICAgJ2Jsb2NrZWQtY2FsZW5kYXInOiBmdW5jdGlvbiBibG9ja2VkQ2FsZW5kYXIoZGF5KSB7XG4gICAgICAgIHJldHVybiBwcm9wcy5pc0RheUJsb2NrZWQoZGF5KTtcbiAgICAgIH0sXG4gICAgICAnYmxvY2tlZC1vdXQtb2YtcmFuZ2UnOiBmdW5jdGlvbiBibG9ja2VkT3V0T2ZSYW5nZShkYXkpIHtcbiAgICAgICAgcmV0dXJuIHByb3BzLmlzT3V0c2lkZVJhbmdlKGRheSk7XG4gICAgICB9LFxuICAgICAgJ2hpZ2hsaWdodGVkLWNhbGVuZGFyJzogZnVuY3Rpb24gaGlnaGxpZ2h0ZWRDYWxlbmRhcihkYXkpIHtcbiAgICAgICAgcmV0dXJuIHByb3BzLmlzRGF5SGlnaGxpZ2h0ZWQoZGF5KTtcbiAgICAgIH0sXG4gICAgICB2YWxpZDogZnVuY3Rpb24gdmFsaWQoZGF5KSB7XG4gICAgICAgIHJldHVybiAhX3RoaXMuaXNCbG9ja2VkKGRheSk7XG4gICAgICB9LFxuICAgICAgaG92ZXJlZDogZnVuY3Rpb24gaG92ZXJlZChkYXkpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmlzSG92ZXJlZChkYXkpO1xuICAgICAgfSxcbiAgICAgIHNlbGVjdGVkOiBmdW5jdGlvbiBzZWxlY3RlZChkYXkpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmlzU2VsZWN0ZWQoZGF5KTtcbiAgICAgIH0sXG4gICAgICAnZmlyc3QtZGF5LW9mLXdlZWsnOiBmdW5jdGlvbiBmaXJzdERheU9mV2VlayhkYXkpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLmlzRmlyc3REYXlPZldlZWsoZGF5KTtcbiAgICAgIH0sXG4gICAgICAnbGFzdC1kYXktb2Ytd2Vlayc6IGZ1bmN0aW9uIGxhc3REYXlPZldlZWsoZGF5KSB7XG4gICAgICAgIHJldHVybiBfdGhpcy5pc0xhc3REYXlPZldlZWsoZGF5KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIF90aGlzJGdldFN0YXRlRm9yTmV3TSA9IF90aGlzLmdldFN0YXRlRm9yTmV3TW9udGgocHJvcHMpLFxuICAgICAgICBjdXJyZW50TW9udGggPSBfdGhpcyRnZXRTdGF0ZUZvck5ld00uY3VycmVudE1vbnRoLFxuICAgICAgICB2aXNpYmxlRGF5cyA9IF90aGlzJGdldFN0YXRlRm9yTmV3TS52aXNpYmxlRGF5cztcblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgaG92ZXJEYXRlOiBudWxsLFxuICAgICAgY3VycmVudE1vbnRoOiBjdXJyZW50TW9udGgsXG4gICAgICB2aXNpYmxlRGF5czogdmlzaWJsZURheXNcbiAgICB9O1xuICAgIF90aGlzLm9uRGF5TW91c2VFbnRlciA9IF90aGlzLm9uRGF5TW91c2VFbnRlci5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgX3RoaXMub25EYXlNb3VzZUxlYXZlID0gX3RoaXMub25EYXlNb3VzZUxlYXZlLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5vbkRheUNsaWNrID0gX3RoaXMub25EYXlDbGljay5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgX3RoaXMub25QcmV2TW9udGhDbGljayA9IF90aGlzLm9uUHJldk1vbnRoQ2xpY2suYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcykpO1xuICAgIF90aGlzLm9uTmV4dE1vbnRoQ2xpY2sgPSBfdGhpcy5vbk5leHRNb250aENsaWNrLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5vbk1vbnRoQ2hhbmdlID0gX3RoaXMub25Nb250aENoYW5nZS5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgX3RoaXMub25ZZWFyQ2hhbmdlID0gX3RoaXMub25ZZWFyQ2hhbmdlLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5vbkdldE5leHRTY3JvbGxhYmxlTW9udGhzID0gX3RoaXMub25HZXROZXh0U2Nyb2xsYWJsZU1vbnRocy5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgX3RoaXMub25HZXRQcmV2U2Nyb2xsYWJsZU1vbnRocyA9IF90aGlzLm9uR2V0UHJldlNjcm9sbGFibGVNb250aHMuYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcykpO1xuICAgIF90aGlzLmdldEZpcnN0Rm9jdXNhYmxlRGF5ID0gX3RoaXMuZ2V0Rmlyc3RGb2N1c2FibGVEYXkuYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcykpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuaXNUb3VjaERldmljZSA9ICgwLCBfaXNUb3VjaERldmljZVtcImRlZmF1bHRcIl0pKCk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIGRhdGUgPSBuZXh0UHJvcHMuZGF0ZSxcbiAgICAgICAgZm9jdXNlZCA9IG5leHRQcm9wcy5mb2N1c2VkLFxuICAgICAgICBpc091dHNpZGVSYW5nZSA9IG5leHRQcm9wcy5pc091dHNpZGVSYW5nZSxcbiAgICAgICAgaXNEYXlCbG9ja2VkID0gbmV4dFByb3BzLmlzRGF5QmxvY2tlZCxcbiAgICAgICAgaXNEYXlIaWdobGlnaHRlZCA9IG5leHRQcm9wcy5pc0RheUhpZ2hsaWdodGVkLFxuICAgICAgICBpbml0aWFsVmlzaWJsZU1vbnRoID0gbmV4dFByb3BzLmluaXRpYWxWaXNpYmxlTW9udGgsXG4gICAgICAgIG51bWJlck9mTW9udGhzID0gbmV4dFByb3BzLm51bWJlck9mTW9udGhzLFxuICAgICAgICBlbmFibGVPdXRzaWRlRGF5cyA9IG5leHRQcm9wcy5lbmFibGVPdXRzaWRlRGF5cztcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBwcmV2SXNPdXRzaWRlUmFuZ2UgPSBfdGhpcyRwcm9wcy5pc091dHNpZGVSYW5nZSxcbiAgICAgICAgcHJldklzRGF5QmxvY2tlZCA9IF90aGlzJHByb3BzLmlzRGF5QmxvY2tlZCxcbiAgICAgICAgcHJldklzRGF5SGlnaGxpZ2h0ZWQgPSBfdGhpcyRwcm9wcy5pc0RheUhpZ2hsaWdodGVkLFxuICAgICAgICBwcmV2TnVtYmVyT2ZNb250aHMgPSBfdGhpcyRwcm9wcy5udW1iZXJPZk1vbnRocyxcbiAgICAgICAgcHJldkVuYWJsZU91dHNpZGVEYXlzID0gX3RoaXMkcHJvcHMuZW5hYmxlT3V0c2lkZURheXMsXG4gICAgICAgIHByZXZJbml0aWFsVmlzaWJsZU1vbnRoID0gX3RoaXMkcHJvcHMuaW5pdGlhbFZpc2libGVNb250aCxcbiAgICAgICAgcHJldkZvY3VzZWQgPSBfdGhpcyRwcm9wcy5mb2N1c2VkLFxuICAgICAgICBwcmV2RGF0ZSA9IF90aGlzJHByb3BzLmRhdGU7XG4gICAgdmFyIHZpc2libGVEYXlzID0gdGhpcy5zdGF0ZS52aXNpYmxlRGF5cztcbiAgICB2YXIgcmVjb21wdXRlT3V0c2lkZVJhbmdlID0gZmFsc2U7XG4gICAgdmFyIHJlY29tcHV0ZURheUJsb2NrZWQgPSBmYWxzZTtcbiAgICB2YXIgcmVjb21wdXRlRGF5SGlnaGxpZ2h0ZWQgPSBmYWxzZTtcblxuICAgIGlmIChpc091dHNpZGVSYW5nZSAhPT0gcHJldklzT3V0c2lkZVJhbmdlKSB7XG4gICAgICB0aGlzLm1vZGlmaWVyc1snYmxvY2tlZC1vdXQtb2YtcmFuZ2UnXSA9IGZ1bmN0aW9uIChkYXkpIHtcbiAgICAgICAgcmV0dXJuIGlzT3V0c2lkZVJhbmdlKGRheSk7XG4gICAgICB9O1xuXG4gICAgICByZWNvbXB1dGVPdXRzaWRlUmFuZ2UgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChpc0RheUJsb2NrZWQgIT09IHByZXZJc0RheUJsb2NrZWQpIHtcbiAgICAgIHRoaXMubW9kaWZpZXJzWydibG9ja2VkLWNhbGVuZGFyJ10gPSBmdW5jdGlvbiAoZGF5KSB7XG4gICAgICAgIHJldHVybiBpc0RheUJsb2NrZWQoZGF5KTtcbiAgICAgIH07XG5cbiAgICAgIHJlY29tcHV0ZURheUJsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChpc0RheUhpZ2hsaWdodGVkICE9PSBwcmV2SXNEYXlIaWdobGlnaHRlZCkge1xuICAgICAgdGhpcy5tb2RpZmllcnNbJ2hpZ2hsaWdodGVkLWNhbGVuZGFyJ10gPSBmdW5jdGlvbiAoZGF5KSB7XG4gICAgICAgIHJldHVybiBpc0RheUhpZ2hsaWdodGVkKGRheSk7XG4gICAgICB9O1xuXG4gICAgICByZWNvbXB1dGVEYXlIaWdobGlnaHRlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgdmFyIHJlY29tcHV0ZVByb3BNb2RpZmllcnMgPSByZWNvbXB1dGVPdXRzaWRlUmFuZ2UgfHwgcmVjb21wdXRlRGF5QmxvY2tlZCB8fCByZWNvbXB1dGVEYXlIaWdobGlnaHRlZDtcblxuICAgIGlmIChudW1iZXJPZk1vbnRocyAhPT0gcHJldk51bWJlck9mTW9udGhzIHx8IGVuYWJsZU91dHNpZGVEYXlzICE9PSBwcmV2RW5hYmxlT3V0c2lkZURheXMgfHwgaW5pdGlhbFZpc2libGVNb250aCAhPT0gcHJldkluaXRpYWxWaXNpYmxlTW9udGggJiYgIXByZXZGb2N1c2VkICYmIGZvY3VzZWQpIHtcbiAgICAgIHZhciBuZXdNb250aFN0YXRlID0gdGhpcy5nZXRTdGF0ZUZvck5ld01vbnRoKG5leHRQcm9wcyk7XG4gICAgICB2YXIgY3VycmVudE1vbnRoID0gbmV3TW9udGhTdGF0ZS5jdXJyZW50TW9udGg7XG4gICAgICB2aXNpYmxlRGF5cyA9IG5ld01vbnRoU3RhdGUudmlzaWJsZURheXM7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgY3VycmVudE1vbnRoOiBjdXJyZW50TW9udGgsXG4gICAgICAgIHZpc2libGVEYXlzOiB2aXNpYmxlRGF5c1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdmFyIGRpZERhdGVDaGFuZ2UgPSBkYXRlICE9PSBwcmV2RGF0ZTtcbiAgICB2YXIgZGlkRm9jdXNDaGFuZ2UgPSBmb2N1c2VkICE9PSBwcmV2Rm9jdXNlZDtcbiAgICB2YXIgbW9kaWZpZXJzID0ge307XG5cbiAgICBpZiAoZGlkRGF0ZUNoYW5nZSkge1xuICAgICAgbW9kaWZpZXJzID0gdGhpcy5kZWxldGVNb2RpZmllcihtb2RpZmllcnMsIHByZXZEYXRlLCAnc2VsZWN0ZWQnKTtcbiAgICAgIG1vZGlmaWVycyA9IHRoaXMuYWRkTW9kaWZpZXIobW9kaWZpZXJzLCBkYXRlLCAnc2VsZWN0ZWQnKTtcbiAgICB9XG5cbiAgICBpZiAoZGlkRm9jdXNDaGFuZ2UgfHwgcmVjb21wdXRlUHJvcE1vZGlmaWVycykge1xuICAgICAgKDAsIF9vYmplY3RbXCJkZWZhdWx0XCJdKSh2aXNpYmxlRGF5cykuZm9yRWFjaChmdW5jdGlvbiAoZGF5cykge1xuICAgICAgICBPYmplY3Qua2V5cyhkYXlzKS5mb3JFYWNoKGZ1bmN0aW9uIChkYXkpIHtcbiAgICAgICAgICB2YXIgbW9tZW50T2JqID0gKDAsIF9nZXRQb29sZWRNb21lbnRbXCJkZWZhdWx0XCJdKShkYXkpO1xuXG4gICAgICAgICAgaWYgKF90aGlzMi5pc0Jsb2NrZWQobW9tZW50T2JqKSkge1xuICAgICAgICAgICAgbW9kaWZpZXJzID0gX3RoaXMyLmFkZE1vZGlmaWVyKG1vZGlmaWVycywgbW9tZW50T2JqLCAnYmxvY2tlZCcpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtb2RpZmllcnMgPSBfdGhpczIuZGVsZXRlTW9kaWZpZXIobW9kaWZpZXJzLCBtb21lbnRPYmosICdibG9ja2VkJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGRpZEZvY3VzQ2hhbmdlIHx8IHJlY29tcHV0ZU91dHNpZGVSYW5nZSkge1xuICAgICAgICAgICAgaWYgKGlzT3V0c2lkZVJhbmdlKG1vbWVudE9iaikpIHtcbiAgICAgICAgICAgICAgbW9kaWZpZXJzID0gX3RoaXMyLmFkZE1vZGlmaWVyKG1vZGlmaWVycywgbW9tZW50T2JqLCAnYmxvY2tlZC1vdXQtb2YtcmFuZ2UnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG1vZGlmaWVycyA9IF90aGlzMi5kZWxldGVNb2RpZmllcihtb2RpZmllcnMsIG1vbWVudE9iaiwgJ2Jsb2NrZWQtb3V0LW9mLXJhbmdlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGRpZEZvY3VzQ2hhbmdlIHx8IHJlY29tcHV0ZURheUJsb2NrZWQpIHtcbiAgICAgICAgICAgIGlmIChpc0RheUJsb2NrZWQobW9tZW50T2JqKSkge1xuICAgICAgICAgICAgICBtb2RpZmllcnMgPSBfdGhpczIuYWRkTW9kaWZpZXIobW9kaWZpZXJzLCBtb21lbnRPYmosICdibG9ja2VkLWNhbGVuZGFyJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBtb2RpZmllcnMgPSBfdGhpczIuZGVsZXRlTW9kaWZpZXIobW9kaWZpZXJzLCBtb21lbnRPYmosICdibG9ja2VkLWNhbGVuZGFyJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGRpZEZvY3VzQ2hhbmdlIHx8IHJlY29tcHV0ZURheUhpZ2hsaWdodGVkKSB7XG4gICAgICAgICAgICBpZiAoaXNEYXlIaWdobGlnaHRlZChtb21lbnRPYmopKSB7XG4gICAgICAgICAgICAgIG1vZGlmaWVycyA9IF90aGlzMi5hZGRNb2RpZmllcihtb2RpZmllcnMsIG1vbWVudE9iaiwgJ2hpZ2hsaWdodGVkLWNhbGVuZGFyJyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBtb2RpZmllcnMgPSBfdGhpczIuZGVsZXRlTW9kaWZpZXIobW9kaWZpZXJzLCBtb21lbnRPYmosICdoaWdobGlnaHRlZC1jYWxlbmRhcicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgdG9kYXkgPSAoMCwgX21vbWVudFtcImRlZmF1bHRcIl0pKCk7XG5cbiAgICBpZiAoISgwLCBfaXNTYW1lRGF5W1wiZGVmYXVsdFwiXSkodGhpcy50b2RheSwgdG9kYXkpKSB7XG4gICAgICBtb2RpZmllcnMgPSB0aGlzLmRlbGV0ZU1vZGlmaWVyKG1vZGlmaWVycywgdGhpcy50b2RheSwgJ3RvZGF5Jyk7XG4gICAgICBtb2RpZmllcnMgPSB0aGlzLmFkZE1vZGlmaWVyKG1vZGlmaWVycywgdG9kYXksICd0b2RheScpO1xuICAgICAgdGhpcy50b2RheSA9IHRvZGF5O1xuICAgIH1cblxuICAgIGlmIChPYmplY3Qua2V5cyhtb2RpZmllcnMpLmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICB2aXNpYmxlRGF5czogX29iamVjdFNwcmVhZCh7fSwgdmlzaWJsZURheXMsIHt9LCBtb2RpZmllcnMpXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVXBkYXRlKCkge1xuICAgIHRoaXMudG9kYXkgPSAoMCwgX21vbWVudFtcImRlZmF1bHRcIl0pKCk7XG4gIH07XG5cbiAgX3Byb3RvLm9uRGF5Q2xpY2sgPSBmdW5jdGlvbiBvbkRheUNsaWNrKGRheSwgZSkge1xuICAgIGlmIChlKSBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgaWYgKHRoaXMuaXNCbG9ja2VkKGRheSkpIHJldHVybjtcbiAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgb25EYXRlQ2hhbmdlID0gX3RoaXMkcHJvcHMyLm9uRGF0ZUNoYW5nZSxcbiAgICAgICAga2VlcE9wZW5PbkRhdGVTZWxlY3QgPSBfdGhpcyRwcm9wczIua2VlcE9wZW5PbkRhdGVTZWxlY3QsXG4gICAgICAgIG9uRm9jdXNDaGFuZ2UgPSBfdGhpcyRwcm9wczIub25Gb2N1c0NoYW5nZSxcbiAgICAgICAgb25DbG9zZSA9IF90aGlzJHByb3BzMi5vbkNsb3NlO1xuICAgIG9uRGF0ZUNoYW5nZShkYXkpO1xuXG4gICAgaWYgKCFrZWVwT3Blbk9uRGF0ZVNlbGVjdCkge1xuICAgICAgb25Gb2N1c0NoYW5nZSh7XG4gICAgICAgIGZvY3VzZWQ6IGZhbHNlXG4gICAgICB9KTtcbiAgICAgIG9uQ2xvc2Uoe1xuICAgICAgICBkYXRlOiBkYXlcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ub25EYXlNb3VzZUVudGVyID0gZnVuY3Rpb24gb25EYXlNb3VzZUVudGVyKGRheSkge1xuICAgIGlmICh0aGlzLmlzVG91Y2hEZXZpY2UpIHJldHVybjtcbiAgICB2YXIgX3RoaXMkc3RhdGUgPSB0aGlzLnN0YXRlLFxuICAgICAgICBob3ZlckRhdGUgPSBfdGhpcyRzdGF0ZS5ob3ZlckRhdGUsXG4gICAgICAgIHZpc2libGVEYXlzID0gX3RoaXMkc3RhdGUudmlzaWJsZURheXM7XG4gICAgdmFyIG1vZGlmaWVycyA9IHRoaXMuZGVsZXRlTW9kaWZpZXIoe30sIGhvdmVyRGF0ZSwgJ2hvdmVyZWQnKTtcbiAgICBtb2RpZmllcnMgPSB0aGlzLmFkZE1vZGlmaWVyKG1vZGlmaWVycywgZGF5LCAnaG92ZXJlZCcpO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgaG92ZXJEYXRlOiBkYXksXG4gICAgICB2aXNpYmxlRGF5czogX29iamVjdFNwcmVhZCh7fSwgdmlzaWJsZURheXMsIHt9LCBtb2RpZmllcnMpXG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLm9uRGF5TW91c2VMZWF2ZSA9IGZ1bmN0aW9uIG9uRGF5TW91c2VMZWF2ZSgpIHtcbiAgICB2YXIgX3RoaXMkc3RhdGUyID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgaG92ZXJEYXRlID0gX3RoaXMkc3RhdGUyLmhvdmVyRGF0ZSxcbiAgICAgICAgdmlzaWJsZURheXMgPSBfdGhpcyRzdGF0ZTIudmlzaWJsZURheXM7XG4gICAgaWYgKHRoaXMuaXNUb3VjaERldmljZSB8fCAhaG92ZXJEYXRlKSByZXR1cm47XG4gICAgdmFyIG1vZGlmaWVycyA9IHRoaXMuZGVsZXRlTW9kaWZpZXIoe30sIGhvdmVyRGF0ZSwgJ2hvdmVyZWQnKTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGhvdmVyRGF0ZTogbnVsbCxcbiAgICAgIHZpc2libGVEYXlzOiBfb2JqZWN0U3ByZWFkKHt9LCB2aXNpYmxlRGF5cywge30sIG1vZGlmaWVycylcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ub25QcmV2TW9udGhDbGljayA9IGZ1bmN0aW9uIG9uUHJldk1vbnRoQ2xpY2soKSB7XG4gICAgdmFyIF90aGlzJHByb3BzMyA9IHRoaXMucHJvcHMsXG4gICAgICAgIG9uUHJldk1vbnRoQ2xpY2sgPSBfdGhpcyRwcm9wczMub25QcmV2TW9udGhDbGljayxcbiAgICAgICAgbnVtYmVyT2ZNb250aHMgPSBfdGhpcyRwcm9wczMubnVtYmVyT2ZNb250aHMsXG4gICAgICAgIGVuYWJsZU91dHNpZGVEYXlzID0gX3RoaXMkcHJvcHMzLmVuYWJsZU91dHNpZGVEYXlzO1xuICAgIHZhciBfdGhpcyRzdGF0ZTMgPSB0aGlzLnN0YXRlLFxuICAgICAgICBjdXJyZW50TW9udGggPSBfdGhpcyRzdGF0ZTMuY3VycmVudE1vbnRoLFxuICAgICAgICB2aXNpYmxlRGF5cyA9IF90aGlzJHN0YXRlMy52aXNpYmxlRGF5cztcbiAgICB2YXIgbmV3VmlzaWJsZURheXMgPSB7fTtcbiAgICBPYmplY3Qua2V5cyh2aXNpYmxlRGF5cykuc29ydCgpLnNsaWNlKDAsIG51bWJlck9mTW9udGhzICsgMSkuZm9yRWFjaChmdW5jdGlvbiAobW9udGgpIHtcbiAgICAgIG5ld1Zpc2libGVEYXlzW21vbnRoXSA9IHZpc2libGVEYXlzW21vbnRoXTtcbiAgICB9KTtcbiAgICB2YXIgcHJldk1vbnRoID0gY3VycmVudE1vbnRoLmNsb25lKCkuc3VidHJhY3QoMSwgJ21vbnRoJyk7XG4gICAgdmFyIHByZXZNb250aFZpc2libGVEYXlzID0gKDAsIF9nZXRWaXNpYmxlRGF5c1tcImRlZmF1bHRcIl0pKHByZXZNb250aCwgMSwgZW5hYmxlT3V0c2lkZURheXMpO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgY3VycmVudE1vbnRoOiBwcmV2TW9udGgsXG4gICAgICB2aXNpYmxlRGF5czogX29iamVjdFNwcmVhZCh7fSwgbmV3VmlzaWJsZURheXMsIHt9LCB0aGlzLmdldE1vZGlmaWVycyhwcmV2TW9udGhWaXNpYmxlRGF5cykpXG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgb25QcmV2TW9udGhDbGljayhwcmV2TW9udGguY2xvbmUoKSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLm9uTmV4dE1vbnRoQ2xpY2sgPSBmdW5jdGlvbiBvbk5leHRNb250aENsaWNrKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczQgPSB0aGlzLnByb3BzLFxuICAgICAgICBvbk5leHRNb250aENsaWNrID0gX3RoaXMkcHJvcHM0Lm9uTmV4dE1vbnRoQ2xpY2ssXG4gICAgICAgIG51bWJlck9mTW9udGhzID0gX3RoaXMkcHJvcHM0Lm51bWJlck9mTW9udGhzLFxuICAgICAgICBlbmFibGVPdXRzaWRlRGF5cyA9IF90aGlzJHByb3BzNC5lbmFibGVPdXRzaWRlRGF5cztcbiAgICB2YXIgX3RoaXMkc3RhdGU0ID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgY3VycmVudE1vbnRoID0gX3RoaXMkc3RhdGU0LmN1cnJlbnRNb250aCxcbiAgICAgICAgdmlzaWJsZURheXMgPSBfdGhpcyRzdGF0ZTQudmlzaWJsZURheXM7XG4gICAgdmFyIG5ld1Zpc2libGVEYXlzID0ge307XG4gICAgT2JqZWN0LmtleXModmlzaWJsZURheXMpLnNvcnQoKS5zbGljZSgxKS5mb3JFYWNoKGZ1bmN0aW9uIChtb250aCkge1xuICAgICAgbmV3VmlzaWJsZURheXNbbW9udGhdID0gdmlzaWJsZURheXNbbW9udGhdO1xuICAgIH0pO1xuICAgIHZhciBuZXh0TW9udGggPSBjdXJyZW50TW9udGguY2xvbmUoKS5hZGQobnVtYmVyT2ZNb250aHMsICdtb250aCcpO1xuICAgIHZhciBuZXh0TW9udGhWaXNpYmxlRGF5cyA9ICgwLCBfZ2V0VmlzaWJsZURheXNbXCJkZWZhdWx0XCJdKShuZXh0TW9udGgsIDEsIGVuYWJsZU91dHNpZGVEYXlzKTtcbiAgICB2YXIgbmV3Q3VycmVudE1vbnRoID0gY3VycmVudE1vbnRoLmNsb25lKCkuYWRkKDEsICdtb250aCcpO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgY3VycmVudE1vbnRoOiBuZXdDdXJyZW50TW9udGgsXG4gICAgICB2aXNpYmxlRGF5czogX29iamVjdFNwcmVhZCh7fSwgbmV3VmlzaWJsZURheXMsIHt9LCB0aGlzLmdldE1vZGlmaWVycyhuZXh0TW9udGhWaXNpYmxlRGF5cykpXG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgb25OZXh0TW9udGhDbGljayhuZXdDdXJyZW50TW9udGguY2xvbmUoKSk7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLm9uTW9udGhDaGFuZ2UgPSBmdW5jdGlvbiBvbk1vbnRoQ2hhbmdlKG5ld01vbnRoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzNSA9IHRoaXMucHJvcHMsXG4gICAgICAgIG51bWJlck9mTW9udGhzID0gX3RoaXMkcHJvcHM1Lm51bWJlck9mTW9udGhzLFxuICAgICAgICBlbmFibGVPdXRzaWRlRGF5cyA9IF90aGlzJHByb3BzNS5lbmFibGVPdXRzaWRlRGF5cyxcbiAgICAgICAgb3JpZW50YXRpb24gPSBfdGhpcyRwcm9wczUub3JpZW50YXRpb247XG4gICAgdmFyIHdpdGhvdXRUcmFuc2l0aW9uTW9udGhzID0gb3JpZW50YXRpb24gPT09IF9jb25zdGFudHMuVkVSVElDQUxfU0NST0xMQUJMRTtcbiAgICB2YXIgbmV3VmlzaWJsZURheXMgPSAoMCwgX2dldFZpc2libGVEYXlzW1wiZGVmYXVsdFwiXSkobmV3TW9udGgsIG51bWJlck9mTW9udGhzLCBlbmFibGVPdXRzaWRlRGF5cywgd2l0aG91dFRyYW5zaXRpb25Nb250aHMpO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgY3VycmVudE1vbnRoOiBuZXdNb250aC5jbG9uZSgpLFxuICAgICAgdmlzaWJsZURheXM6IHRoaXMuZ2V0TW9kaWZpZXJzKG5ld1Zpc2libGVEYXlzKVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5vblllYXJDaGFuZ2UgPSBmdW5jdGlvbiBvblllYXJDaGFuZ2UobmV3TW9udGgpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHM2ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgbnVtYmVyT2ZNb250aHMgPSBfdGhpcyRwcm9wczYubnVtYmVyT2ZNb250aHMsXG4gICAgICAgIGVuYWJsZU91dHNpZGVEYXlzID0gX3RoaXMkcHJvcHM2LmVuYWJsZU91dHNpZGVEYXlzLFxuICAgICAgICBvcmllbnRhdGlvbiA9IF90aGlzJHByb3BzNi5vcmllbnRhdGlvbjtcbiAgICB2YXIgd2l0aG91dFRyYW5zaXRpb25Nb250aHMgPSBvcmllbnRhdGlvbiA9PT0gX2NvbnN0YW50cy5WRVJUSUNBTF9TQ1JPTExBQkxFO1xuICAgIHZhciBuZXdWaXNpYmxlRGF5cyA9ICgwLCBfZ2V0VmlzaWJsZURheXNbXCJkZWZhdWx0XCJdKShuZXdNb250aCwgbnVtYmVyT2ZNb250aHMsIGVuYWJsZU91dHNpZGVEYXlzLCB3aXRob3V0VHJhbnNpdGlvbk1vbnRocyk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBjdXJyZW50TW9udGg6IG5ld01vbnRoLmNsb25lKCksXG4gICAgICB2aXNpYmxlRGF5czogdGhpcy5nZXRNb2RpZmllcnMobmV3VmlzaWJsZURheXMpXG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLm9uR2V0TmV4dFNjcm9sbGFibGVNb250aHMgPSBmdW5jdGlvbiBvbkdldE5leHRTY3JvbGxhYmxlTW9udGhzKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczcgPSB0aGlzLnByb3BzLFxuICAgICAgICBudW1iZXJPZk1vbnRocyA9IF90aGlzJHByb3BzNy5udW1iZXJPZk1vbnRocyxcbiAgICAgICAgZW5hYmxlT3V0c2lkZURheXMgPSBfdGhpcyRwcm9wczcuZW5hYmxlT3V0c2lkZURheXM7XG4gICAgdmFyIF90aGlzJHN0YXRlNSA9IHRoaXMuc3RhdGUsXG4gICAgICAgIGN1cnJlbnRNb250aCA9IF90aGlzJHN0YXRlNS5jdXJyZW50TW9udGgsXG4gICAgICAgIHZpc2libGVEYXlzID0gX3RoaXMkc3RhdGU1LnZpc2libGVEYXlzO1xuICAgIHZhciBudW1iZXJPZlZpc2libGVNb250aHMgPSBPYmplY3Qua2V5cyh2aXNpYmxlRGF5cykubGVuZ3RoO1xuICAgIHZhciBuZXh0TW9udGggPSBjdXJyZW50TW9udGguY2xvbmUoKS5hZGQobnVtYmVyT2ZWaXNpYmxlTW9udGhzLCAnbW9udGgnKTtcbiAgICB2YXIgbmV3VmlzaWJsZURheXMgPSAoMCwgX2dldFZpc2libGVEYXlzW1wiZGVmYXVsdFwiXSkobmV4dE1vbnRoLCBudW1iZXJPZk1vbnRocywgZW5hYmxlT3V0c2lkZURheXMsIHRydWUpO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgdmlzaWJsZURheXM6IF9vYmplY3RTcHJlYWQoe30sIHZpc2libGVEYXlzLCB7fSwgdGhpcy5nZXRNb2RpZmllcnMobmV3VmlzaWJsZURheXMpKVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5vbkdldFByZXZTY3JvbGxhYmxlTW9udGhzID0gZnVuY3Rpb24gb25HZXRQcmV2U2Nyb2xsYWJsZU1vbnRocygpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHM4ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgbnVtYmVyT2ZNb250aHMgPSBfdGhpcyRwcm9wczgubnVtYmVyT2ZNb250aHMsXG4gICAgICAgIGVuYWJsZU91dHNpZGVEYXlzID0gX3RoaXMkcHJvcHM4LmVuYWJsZU91dHNpZGVEYXlzO1xuICAgIHZhciBfdGhpcyRzdGF0ZTYgPSB0aGlzLnN0YXRlLFxuICAgICAgICBjdXJyZW50TW9udGggPSBfdGhpcyRzdGF0ZTYuY3VycmVudE1vbnRoLFxuICAgICAgICB2aXNpYmxlRGF5cyA9IF90aGlzJHN0YXRlNi52aXNpYmxlRGF5cztcbiAgICB2YXIgZmlyc3RQcmV2aW91c01vbnRoID0gY3VycmVudE1vbnRoLmNsb25lKCkuc3VidHJhY3QobnVtYmVyT2ZNb250aHMsICdtb250aCcpO1xuICAgIHZhciBuZXdWaXNpYmxlRGF5cyA9ICgwLCBfZ2V0VmlzaWJsZURheXNbXCJkZWZhdWx0XCJdKShmaXJzdFByZXZpb3VzTW9udGgsIG51bWJlck9mTW9udGhzLCBlbmFibGVPdXRzaWRlRGF5cywgdHJ1ZSk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBjdXJyZW50TW9udGg6IGZpcnN0UHJldmlvdXNNb250aC5jbG9uZSgpLFxuICAgICAgdmlzaWJsZURheXM6IF9vYmplY3RTcHJlYWQoe30sIHZpc2libGVEYXlzLCB7fSwgdGhpcy5nZXRNb2RpZmllcnMobmV3VmlzaWJsZURheXMpKVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5nZXRGaXJzdEZvY3VzYWJsZURheSA9IGZ1bmN0aW9uIGdldEZpcnN0Rm9jdXNhYmxlRGF5KG5ld01vbnRoKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICB2YXIgX3RoaXMkcHJvcHM5ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgZGF0ZSA9IF90aGlzJHByb3BzOS5kYXRlLFxuICAgICAgICBudW1iZXJPZk1vbnRocyA9IF90aGlzJHByb3BzOS5udW1iZXJPZk1vbnRocztcbiAgICB2YXIgZm9jdXNlZERhdGUgPSBuZXdNb250aC5jbG9uZSgpLnN0YXJ0T2YoJ21vbnRoJyk7XG5cbiAgICBpZiAoZGF0ZSkge1xuICAgICAgZm9jdXNlZERhdGUgPSBkYXRlLmNsb25lKCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNCbG9ja2VkKGZvY3VzZWREYXRlKSkge1xuICAgICAgdmFyIGRheXMgPSBbXTtcbiAgICAgIHZhciBsYXN0VmlzaWJsZURheSA9IG5ld01vbnRoLmNsb25lKCkuYWRkKG51bWJlck9mTW9udGhzIC0gMSwgJ21vbnRocycpLmVuZE9mKCdtb250aCcpO1xuICAgICAgdmFyIGN1cnJlbnREYXkgPSBmb2N1c2VkRGF0ZS5jbG9uZSgpO1xuXG4gICAgICB3aGlsZSAoISgwLCBfaXNBZnRlckRheVtcImRlZmF1bHRcIl0pKGN1cnJlbnREYXksIGxhc3RWaXNpYmxlRGF5KSkge1xuICAgICAgICBjdXJyZW50RGF5ID0gY3VycmVudERheS5jbG9uZSgpLmFkZCgxLCAnZGF5Jyk7XG4gICAgICAgIGRheXMucHVzaChjdXJyZW50RGF5KTtcbiAgICAgIH1cblxuICAgICAgdmFyIHZpYWJsZURheXMgPSBkYXlzLmZpbHRlcihmdW5jdGlvbiAoZGF5KSB7XG4gICAgICAgIHJldHVybiAhX3RoaXMzLmlzQmxvY2tlZChkYXkpICYmICgwLCBfaXNBZnRlckRheVtcImRlZmF1bHRcIl0pKGRheSwgZm9jdXNlZERhdGUpO1xuICAgICAgfSk7XG5cbiAgICAgIGlmICh2aWFibGVEYXlzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdmFyIF92aWFibGVEYXlzID0gKDAsIF9zbGljZWRUb0FycmF5MltcImRlZmF1bHRcIl0pKHZpYWJsZURheXMsIDEpO1xuXG4gICAgICAgIGZvY3VzZWREYXRlID0gX3ZpYWJsZURheXNbMF07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZvY3VzZWREYXRlO1xuICB9O1xuXG4gIF9wcm90by5nZXRNb2RpZmllcnMgPSBmdW5jdGlvbiBnZXRNb2RpZmllcnModmlzaWJsZURheXMpIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIHZhciBtb2RpZmllcnMgPSB7fTtcbiAgICBPYmplY3Qua2V5cyh2aXNpYmxlRGF5cykuZm9yRWFjaChmdW5jdGlvbiAobW9udGgpIHtcbiAgICAgIG1vZGlmaWVyc1ttb250aF0gPSB7fTtcbiAgICAgIHZpc2libGVEYXlzW21vbnRoXS5mb3JFYWNoKGZ1bmN0aW9uIChkYXkpIHtcbiAgICAgICAgbW9kaWZpZXJzW21vbnRoXVsoMCwgX3RvSVNPRGF0ZVN0cmluZ1tcImRlZmF1bHRcIl0pKGRheSldID0gX3RoaXM0LmdldE1vZGlmaWVyc0ZvckRheShkYXkpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIG1vZGlmaWVycztcbiAgfTtcblxuICBfcHJvdG8uZ2V0TW9kaWZpZXJzRm9yRGF5ID0gZnVuY3Rpb24gZ2V0TW9kaWZpZXJzRm9yRGF5KGRheSkge1xuICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgcmV0dXJuIG5ldyBTZXQoT2JqZWN0LmtleXModGhpcy5tb2RpZmllcnMpLmZpbHRlcihmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICAgIHJldHVybiBfdGhpczUubW9kaWZpZXJzW21vZGlmaWVyXShkYXkpO1xuICAgIH0pKTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0U3RhdGVGb3JOZXdNb250aCA9IGZ1bmN0aW9uIGdldFN0YXRlRm9yTmV3TW9udGgobmV4dFByb3BzKSB7XG4gICAgdmFyIF90aGlzNiA9IHRoaXM7XG5cbiAgICB2YXIgaW5pdGlhbFZpc2libGVNb250aCA9IG5leHRQcm9wcy5pbml0aWFsVmlzaWJsZU1vbnRoLFxuICAgICAgICBkYXRlID0gbmV4dFByb3BzLmRhdGUsXG4gICAgICAgIG51bWJlck9mTW9udGhzID0gbmV4dFByb3BzLm51bWJlck9mTW9udGhzLFxuICAgICAgICBvcmllbnRhdGlvbiA9IG5leHRQcm9wcy5vcmllbnRhdGlvbixcbiAgICAgICAgZW5hYmxlT3V0c2lkZURheXMgPSBuZXh0UHJvcHMuZW5hYmxlT3V0c2lkZURheXM7XG4gICAgdmFyIGluaXRpYWxWaXNpYmxlTW9udGhUaHVuayA9IGluaXRpYWxWaXNpYmxlTW9udGggfHwgKGRhdGUgPyBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9IDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF90aGlzNi50b2RheTtcbiAgICB9KTtcbiAgICB2YXIgY3VycmVudE1vbnRoID0gaW5pdGlhbFZpc2libGVNb250aFRodW5rKCk7XG4gICAgdmFyIHdpdGhvdXRUcmFuc2l0aW9uTW9udGhzID0gb3JpZW50YXRpb24gPT09IF9jb25zdGFudHMuVkVSVElDQUxfU0NST0xMQUJMRTtcbiAgICB2YXIgdmlzaWJsZURheXMgPSB0aGlzLmdldE1vZGlmaWVycygoMCwgX2dldFZpc2libGVEYXlzW1wiZGVmYXVsdFwiXSkoY3VycmVudE1vbnRoLCBudW1iZXJPZk1vbnRocywgZW5hYmxlT3V0c2lkZURheXMsIHdpdGhvdXRUcmFuc2l0aW9uTW9udGhzKSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGN1cnJlbnRNb250aDogY3VycmVudE1vbnRoLFxuICAgICAgdmlzaWJsZURheXM6IHZpc2libGVEYXlzXG4gICAgfTtcbiAgfTtcblxuICBfcHJvdG8uYWRkTW9kaWZpZXIgPSBmdW5jdGlvbiBhZGRNb2RpZmllcih1cGRhdGVkRGF5cywgZGF5LCBtb2RpZmllcikge1xuICAgIHJldHVybiAoMCwgX21vZGlmaWVycy5hZGRNb2RpZmllcikodXBkYXRlZERheXMsIGRheSwgbW9kaWZpZXIsIHRoaXMucHJvcHMsIHRoaXMuc3RhdGUpO1xuICB9O1xuXG4gIF9wcm90by5kZWxldGVNb2RpZmllciA9IGZ1bmN0aW9uIGRlbGV0ZU1vZGlmaWVyKHVwZGF0ZWREYXlzLCBkYXksIG1vZGlmaWVyKSB7XG4gICAgcmV0dXJuICgwLCBfbW9kaWZpZXJzLmRlbGV0ZU1vZGlmaWVyKSh1cGRhdGVkRGF5cywgZGF5LCBtb2RpZmllciwgdGhpcy5wcm9wcywgdGhpcy5zdGF0ZSk7XG4gIH07XG5cbiAgX3Byb3RvLmlzQmxvY2tlZCA9IGZ1bmN0aW9uIGlzQmxvY2tlZChkYXkpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMxMCA9IHRoaXMucHJvcHMsXG4gICAgICAgIGlzRGF5QmxvY2tlZCA9IF90aGlzJHByb3BzMTAuaXNEYXlCbG9ja2VkLFxuICAgICAgICBpc091dHNpZGVSYW5nZSA9IF90aGlzJHByb3BzMTAuaXNPdXRzaWRlUmFuZ2U7XG4gICAgcmV0dXJuIGlzRGF5QmxvY2tlZChkYXkpIHx8IGlzT3V0c2lkZVJhbmdlKGRheSk7XG4gIH07XG5cbiAgX3Byb3RvLmlzSG92ZXJlZCA9IGZ1bmN0aW9uIGlzSG92ZXJlZChkYXkpIHtcbiAgICB2YXIgX3JlZjIgPSB0aGlzLnN0YXRlIHx8IHt9LFxuICAgICAgICBob3ZlckRhdGUgPSBfcmVmMi5ob3ZlckRhdGU7XG5cbiAgICByZXR1cm4gKDAsIF9pc1NhbWVEYXlbXCJkZWZhdWx0XCJdKShkYXksIGhvdmVyRGF0ZSk7XG4gIH07XG5cbiAgX3Byb3RvLmlzU2VsZWN0ZWQgPSBmdW5jdGlvbiBpc1NlbGVjdGVkKGRheSkge1xuICAgIHZhciBkYXRlID0gdGhpcy5wcm9wcy5kYXRlO1xuICAgIHJldHVybiAoMCwgX2lzU2FtZURheVtcImRlZmF1bHRcIl0pKGRheSwgZGF0ZSk7XG4gIH07XG5cbiAgX3Byb3RvLmlzVG9kYXkgPSBmdW5jdGlvbiBpc1RvZGF5KGRheSkge1xuICAgIHJldHVybiAoMCwgX2lzU2FtZURheVtcImRlZmF1bHRcIl0pKGRheSwgdGhpcy50b2RheSk7XG4gIH07XG5cbiAgX3Byb3RvLmlzRmlyc3REYXlPZldlZWsgPSBmdW5jdGlvbiBpc0ZpcnN0RGF5T2ZXZWVrKGRheSkge1xuICAgIHZhciBmaXJzdERheU9mV2VlayA9IHRoaXMucHJvcHMuZmlyc3REYXlPZldlZWs7XG4gICAgcmV0dXJuIGRheS5kYXkoKSA9PT0gKGZpcnN0RGF5T2ZXZWVrIHx8IF9tb21lbnRbXCJkZWZhdWx0XCJdLmxvY2FsZURhdGEoKS5maXJzdERheU9mV2VlaygpKTtcbiAgfTtcblxuICBfcHJvdG8uaXNMYXN0RGF5T2ZXZWVrID0gZnVuY3Rpb24gaXNMYXN0RGF5T2ZXZWVrKGRheSkge1xuICAgIHZhciBmaXJzdERheU9mV2VlayA9IHRoaXMucHJvcHMuZmlyc3REYXlPZldlZWs7XG4gICAgcmV0dXJuIGRheS5kYXkoKSA9PT0gKChmaXJzdERheU9mV2VlayB8fCBfbW9tZW50W1wiZGVmYXVsdFwiXS5sb2NhbGVEYXRhKCkuZmlyc3REYXlPZldlZWsoKSkgKyA2KSAlIDc7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMxMSA9IHRoaXMucHJvcHMsXG4gICAgICAgIG51bWJlck9mTW9udGhzID0gX3RoaXMkcHJvcHMxMS5udW1iZXJPZk1vbnRocyxcbiAgICAgICAgb3JpZW50YXRpb24gPSBfdGhpcyRwcm9wczExLm9yaWVudGF0aW9uLFxuICAgICAgICBtb250aEZvcm1hdCA9IF90aGlzJHByb3BzMTEubW9udGhGb3JtYXQsXG4gICAgICAgIHJlbmRlck1vbnRoVGV4dCA9IF90aGlzJHByb3BzMTEucmVuZGVyTW9udGhUZXh0LFxuICAgICAgICByZW5kZXJXZWVrSGVhZGVyRWxlbWVudCA9IF90aGlzJHByb3BzMTEucmVuZGVyV2Vla0hlYWRlckVsZW1lbnQsXG4gICAgICAgIGRheVBpY2tlck5hdmlnYXRpb25JbmxpbmVTdHlsZXMgPSBfdGhpcyRwcm9wczExLmRheVBpY2tlck5hdmlnYXRpb25JbmxpbmVTdHlsZXMsXG4gICAgICAgIG5hdlBvc2l0aW9uID0gX3RoaXMkcHJvcHMxMS5uYXZQb3NpdGlvbixcbiAgICAgICAgbmF2UHJldiA9IF90aGlzJHByb3BzMTEubmF2UHJldixcbiAgICAgICAgbmF2TmV4dCA9IF90aGlzJHByb3BzMTEubmF2TmV4dCxcbiAgICAgICAgcmVuZGVyTmF2UHJldkJ1dHRvbiA9IF90aGlzJHByb3BzMTEucmVuZGVyTmF2UHJldkJ1dHRvbixcbiAgICAgICAgcmVuZGVyTmF2TmV4dEJ1dHRvbiA9IF90aGlzJHByb3BzMTEucmVuZGVyTmF2TmV4dEJ1dHRvbixcbiAgICAgICAgbm9OYXZCdXR0b25zID0gX3RoaXMkcHJvcHMxMS5ub05hdkJ1dHRvbnMsXG4gICAgICAgIG5vTmF2UHJldkJ1dHRvbiA9IF90aGlzJHByb3BzMTEubm9OYXZQcmV2QnV0dG9uLFxuICAgICAgICBub05hdk5leHRCdXR0b24gPSBfdGhpcyRwcm9wczExLm5vTmF2TmV4dEJ1dHRvbixcbiAgICAgICAgb25PdXRzaWRlQ2xpY2sgPSBfdGhpcyRwcm9wczExLm9uT3V0c2lkZUNsaWNrLFxuICAgICAgICBvblNoaWZ0VGFiID0gX3RoaXMkcHJvcHMxMS5vblNoaWZ0VGFiLFxuICAgICAgICBvblRhYiA9IF90aGlzJHByb3BzMTEub25UYWIsXG4gICAgICAgIHdpdGhQb3J0YWwgPSBfdGhpcyRwcm9wczExLndpdGhQb3J0YWwsXG4gICAgICAgIGZvY3VzZWQgPSBfdGhpcyRwcm9wczExLmZvY3VzZWQsXG4gICAgICAgIGVuYWJsZU91dHNpZGVEYXlzID0gX3RoaXMkcHJvcHMxMS5lbmFibGVPdXRzaWRlRGF5cyxcbiAgICAgICAgaGlkZUtleWJvYXJkU2hvcnRjdXRzUGFuZWwgPSBfdGhpcyRwcm9wczExLmhpZGVLZXlib2FyZFNob3J0Y3V0c1BhbmVsLFxuICAgICAgICBkYXlTaXplID0gX3RoaXMkcHJvcHMxMS5kYXlTaXplLFxuICAgICAgICBmaXJzdERheU9mV2VlayA9IF90aGlzJHByb3BzMTEuZmlyc3REYXlPZldlZWssXG4gICAgICAgIHJlbmRlckNhbGVuZGFyRGF5ID0gX3RoaXMkcHJvcHMxMS5yZW5kZXJDYWxlbmRhckRheSxcbiAgICAgICAgcmVuZGVyRGF5Q29udGVudHMgPSBfdGhpcyRwcm9wczExLnJlbmRlckRheUNvbnRlbnRzLFxuICAgICAgICByZW5kZXJDYWxlbmRhckluZm8gPSBfdGhpcyRwcm9wczExLnJlbmRlckNhbGVuZGFySW5mbyxcbiAgICAgICAgcmVuZGVyTW9udGhFbGVtZW50ID0gX3RoaXMkcHJvcHMxMS5yZW5kZXJNb250aEVsZW1lbnQsXG4gICAgICAgIGNhbGVuZGFySW5mb1Bvc2l0aW9uID0gX3RoaXMkcHJvcHMxMS5jYWxlbmRhckluZm9Qb3NpdGlvbixcbiAgICAgICAgaXNGb2N1c2VkID0gX3RoaXMkcHJvcHMxMS5pc0ZvY3VzZWQsXG4gICAgICAgIGlzUlRMID0gX3RoaXMkcHJvcHMxMS5pc1JUTCxcbiAgICAgICAgcGhyYXNlcyA9IF90aGlzJHByb3BzMTEucGhyYXNlcyxcbiAgICAgICAgZGF5QXJpYUxhYmVsRm9ybWF0ID0gX3RoaXMkcHJvcHMxMS5kYXlBcmlhTGFiZWxGb3JtYXQsXG4gICAgICAgIG9uQmx1ciA9IF90aGlzJHByb3BzMTEub25CbHVyLFxuICAgICAgICBzaG93S2V5Ym9hcmRTaG9ydGN1dHMgPSBfdGhpcyRwcm9wczExLnNob3dLZXlib2FyZFNob3J0Y3V0cyxcbiAgICAgICAgd2Vla0RheUZvcm1hdCA9IF90aGlzJHByb3BzMTEud2Vla0RheUZvcm1hdCxcbiAgICAgICAgdmVydGljYWxIZWlnaHQgPSBfdGhpcyRwcm9wczExLnZlcnRpY2FsSGVpZ2h0LFxuICAgICAgICBub0JvcmRlciA9IF90aGlzJHByb3BzMTEubm9Cb3JkZXIsXG4gICAgICAgIHRyYW5zaXRpb25EdXJhdGlvbiA9IF90aGlzJHByb3BzMTEudHJhbnNpdGlvbkR1cmF0aW9uLFxuICAgICAgICB2ZXJ0aWNhbEJvcmRlclNwYWNpbmcgPSBfdGhpcyRwcm9wczExLnZlcnRpY2FsQm9yZGVyU3BhY2luZyxcbiAgICAgICAgaG9yaXpvbnRhbE1vbnRoUGFkZGluZyA9IF90aGlzJHByb3BzMTEuaG9yaXpvbnRhbE1vbnRoUGFkZGluZztcbiAgICB2YXIgX3RoaXMkc3RhdGU3ID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgY3VycmVudE1vbnRoID0gX3RoaXMkc3RhdGU3LmN1cnJlbnRNb250aCxcbiAgICAgICAgdmlzaWJsZURheXMgPSBfdGhpcyRzdGF0ZTcudmlzaWJsZURheXM7XG4gICAgcmV0dXJuIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChfRGF5UGlja2VyW1wiZGVmYXVsdFwiXSwge1xuICAgICAgb3JpZW50YXRpb246IG9yaWVudGF0aW9uLFxuICAgICAgZW5hYmxlT3V0c2lkZURheXM6IGVuYWJsZU91dHNpZGVEYXlzLFxuICAgICAgbW9kaWZpZXJzOiB2aXNpYmxlRGF5cyxcbiAgICAgIG51bWJlck9mTW9udGhzOiBudW1iZXJPZk1vbnRocyxcbiAgICAgIG9uRGF5Q2xpY2s6IHRoaXMub25EYXlDbGljayxcbiAgICAgIG9uRGF5TW91c2VFbnRlcjogdGhpcy5vbkRheU1vdXNlRW50ZXIsXG4gICAgICBvbkRheU1vdXNlTGVhdmU6IHRoaXMub25EYXlNb3VzZUxlYXZlLFxuICAgICAgb25QcmV2TW9udGhDbGljazogdGhpcy5vblByZXZNb250aENsaWNrLFxuICAgICAgb25OZXh0TW9udGhDbGljazogdGhpcy5vbk5leHRNb250aENsaWNrLFxuICAgICAgb25Nb250aENoYW5nZTogdGhpcy5vbk1vbnRoQ2hhbmdlLFxuICAgICAgb25ZZWFyQ2hhbmdlOiB0aGlzLm9uWWVhckNoYW5nZSxcbiAgICAgIG9uR2V0TmV4dFNjcm9sbGFibGVNb250aHM6IHRoaXMub25HZXROZXh0U2Nyb2xsYWJsZU1vbnRocyxcbiAgICAgIG9uR2V0UHJldlNjcm9sbGFibGVNb250aHM6IHRoaXMub25HZXRQcmV2U2Nyb2xsYWJsZU1vbnRocyxcbiAgICAgIG1vbnRoRm9ybWF0OiBtb250aEZvcm1hdCxcbiAgICAgIHdpdGhQb3J0YWw6IHdpdGhQb3J0YWwsXG4gICAgICBoaWRkZW46ICFmb2N1c2VkLFxuICAgICAgaGlkZUtleWJvYXJkU2hvcnRjdXRzUGFuZWw6IGhpZGVLZXlib2FyZFNob3J0Y3V0c1BhbmVsLFxuICAgICAgaW5pdGlhbFZpc2libGVNb250aDogZnVuY3Rpb24gaW5pdGlhbFZpc2libGVNb250aCgpIHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRNb250aDtcbiAgICAgIH0sXG4gICAgICBmaXJzdERheU9mV2VlazogZmlyc3REYXlPZldlZWssXG4gICAgICBvbk91dHNpZGVDbGljazogb25PdXRzaWRlQ2xpY2ssXG4gICAgICBkYXlQaWNrZXJOYXZpZ2F0aW9uSW5saW5lU3R5bGVzOiBkYXlQaWNrZXJOYXZpZ2F0aW9uSW5saW5lU3R5bGVzLFxuICAgICAgbmF2UG9zaXRpb246IG5hdlBvc2l0aW9uLFxuICAgICAgbmF2UHJldjogbmF2UHJldixcbiAgICAgIG5hdk5leHQ6IG5hdk5leHQsXG4gICAgICByZW5kZXJOYXZQcmV2QnV0dG9uOiByZW5kZXJOYXZQcmV2QnV0dG9uLFxuICAgICAgcmVuZGVyTmF2TmV4dEJ1dHRvbjogcmVuZGVyTmF2TmV4dEJ1dHRvbixcbiAgICAgIG5vTmF2QnV0dG9uczogbm9OYXZCdXR0b25zLFxuICAgICAgbm9OYXZOZXh0QnV0dG9uOiBub05hdk5leHRCdXR0b24sXG4gICAgICBub05hdlByZXZCdXR0b246IG5vTmF2UHJldkJ1dHRvbixcbiAgICAgIHJlbmRlck1vbnRoVGV4dDogcmVuZGVyTW9udGhUZXh0LFxuICAgICAgcmVuZGVyV2Vla0hlYWRlckVsZW1lbnQ6IHJlbmRlcldlZWtIZWFkZXJFbGVtZW50LFxuICAgICAgcmVuZGVyQ2FsZW5kYXJEYXk6IHJlbmRlckNhbGVuZGFyRGF5LFxuICAgICAgcmVuZGVyRGF5Q29udGVudHM6IHJlbmRlckRheUNvbnRlbnRzLFxuICAgICAgcmVuZGVyQ2FsZW5kYXJJbmZvOiByZW5kZXJDYWxlbmRhckluZm8sXG4gICAgICByZW5kZXJNb250aEVsZW1lbnQ6IHJlbmRlck1vbnRoRWxlbWVudCxcbiAgICAgIGNhbGVuZGFySW5mb1Bvc2l0aW9uOiBjYWxlbmRhckluZm9Qb3NpdGlvbixcbiAgICAgIGlzRm9jdXNlZDogaXNGb2N1c2VkLFxuICAgICAgZ2V0Rmlyc3RGb2N1c2FibGVEYXk6IHRoaXMuZ2V0Rmlyc3RGb2N1c2FibGVEYXksXG4gICAgICBvbkJsdXI6IG9uQmx1cixcbiAgICAgIG9uVGFiOiBvblRhYixcbiAgICAgIG9uU2hpZnRUYWI6IG9uU2hpZnRUYWIsXG4gICAgICBwaHJhc2VzOiBwaHJhc2VzLFxuICAgICAgZGF5U2l6ZTogZGF5U2l6ZSxcbiAgICAgIGlzUlRMOiBpc1JUTCxcbiAgICAgIHNob3dLZXlib2FyZFNob3J0Y3V0czogc2hvd0tleWJvYXJkU2hvcnRjdXRzLFxuICAgICAgd2Vla0RheUZvcm1hdDogd2Vla0RheUZvcm1hdCxcbiAgICAgIGRheUFyaWFMYWJlbEZvcm1hdDogZGF5QXJpYUxhYmVsRm9ybWF0LFxuICAgICAgdmVydGljYWxIZWlnaHQ6IHZlcnRpY2FsSGVpZ2h0LFxuICAgICAgbm9Cb3JkZXI6IG5vQm9yZGVyLFxuICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uOiB0cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgICB2ZXJ0aWNhbEJvcmRlclNwYWNpbmc6IHZlcnRpY2FsQm9yZGVyU3BhY2luZyxcbiAgICAgIGhvcml6b250YWxNb250aFBhZGRpbmc6IGhvcml6b250YWxNb250aFBhZGRpbmdcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gRGF5UGlja2VyU2luZ2xlRGF0ZUNvbnRyb2xsZXI7XG59KF9yZWFjdFtcImRlZmF1bHRcIl0uUHVyZUNvbXBvbmVudCB8fCBfcmVhY3RbXCJkZWZhdWx0XCJdLkNvbXBvbmVudCk7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gRGF5UGlja2VyU2luZ2xlRGF0ZUNvbnRyb2xsZXI7XG5EYXlQaWNrZXJTaW5nbGVEYXRlQ29udHJvbGxlci5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBwcm9wVHlwZXMgOiB7fTtcbkRheVBpY2tlclNpbmdsZURhdGVDb250cm9sbGVyLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wczsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9yZWFjdE1vbWVudFByb3B0eXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LW1vbWVudC1wcm9wdHlwZXNcIikpO1xuXG52YXIgX2FpcmJuYlByb3BUeXBlcyA9IHJlcXVpcmUoXCJhaXJibmItcHJvcC10eXBlc1wiKTtcblxudmFyIF9kZWZhdWx0UGhyYXNlcyA9IHJlcXVpcmUoXCIuLi9kZWZhdWx0UGhyYXNlc1wiKTtcblxudmFyIF9nZXRQaHJhc2VQcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9nZXRQaHJhc2VQcm9wVHlwZXNcIikpO1xuXG52YXIgX0ljb25Qb3NpdGlvblNoYXBlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9JY29uUG9zaXRpb25TaGFwZVwiKSk7XG5cbnZhciBfT3JpZW50YXRpb25TaGFwZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vT3JpZW50YXRpb25TaGFwZVwiKSk7XG5cbnZhciBfQW5jaG9yRGlyZWN0aW9uU2hhcGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0FuY2hvckRpcmVjdGlvblNoYXBlXCIpKTtcblxudmFyIF9PcGVuRGlyZWN0aW9uU2hhcGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL09wZW5EaXJlY3Rpb25TaGFwZVwiKSk7XG5cbnZhciBfRGF5T2ZXZWVrU2hhcGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0RheU9mV2Vla1NoYXBlXCIpKTtcblxudmFyIF9DYWxlbmRhckluZm9Qb3NpdGlvblNoYXBlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9DYWxlbmRhckluZm9Qb3NpdGlvblNoYXBlXCIpKTtcblxudmFyIF9OYXZQb3NpdGlvblNoYXBlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9OYXZQb3NpdGlvblNoYXBlXCIpKTtcblxudmFyIF9kZWZhdWx0ID0ge1xuICAvLyByZXF1aXJlZCBwcm9wcyBmb3IgYSBmdW5jdGlvbmFsIGludGVyYWN0aXZlIFNpbmdsZURhdGVQaWNrZXJcbiAgZGF0ZTogX3JlYWN0TW9tZW50UHJvcHR5cGVzW1wiZGVmYXVsdFwiXS5tb21lbnRPYmosXG4gIG9uRGF0ZUNoYW5nZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYy5pc1JlcXVpcmVkLFxuICBmb2N1c2VkOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBvbkZvY3VzQ2hhbmdlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLmlzUmVxdWlyZWQsXG4gIC8vIGlucHV0IHJlbGF0ZWQgcHJvcHNcbiAgaWQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZy5pc1JlcXVpcmVkLFxuICBwbGFjZWhvbGRlcjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLFxuICBhcmlhTGFiZWw6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZyxcbiAgZGlzYWJsZWQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIHJlcXVpcmVkOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICByZWFkT25seTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgc2NyZWVuUmVhZGVySW5wdXRNZXNzYWdlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcsXG4gIHNob3dDbGVhckRhdGU6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIGN1c3RvbUNsb3NlSWNvbjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubm9kZSxcbiAgc2hvd0RlZmF1bHRJbnB1dEljb246IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIGlucHV0SWNvblBvc2l0aW9uOiBfSWNvblBvc2l0aW9uU2hhcGVbXCJkZWZhdWx0XCJdLFxuICBjdXN0b21JbnB1dEljb246IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm5vZGUsXG4gIG5vQm9yZGVyOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBibG9jazogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgc21hbGw6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIHJlZ3VsYXI6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIHZlcnRpY2FsU3BhY2luZzogX2FpcmJuYlByb3BUeXBlcy5ub25OZWdhdGl2ZUludGVnZXIsXG4gIGtlZXBGb2N1c09uSW5wdXQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIC8vIGNhbGVuZGFyIHByZXNlbnRhdGlvbiBhbmQgaW50ZXJhY3Rpb24gcmVsYXRlZCBwcm9wc1xuICByZW5kZXJNb250aFRleHQ6ICgwLCBfYWlyYm5iUHJvcFR5cGVzLm11dHVhbGx5RXhjbHVzaXZlUHJvcHMpKF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsICdyZW5kZXJNb250aFRleHQnLCAncmVuZGVyTW9udGhFbGVtZW50JyksXG4gIHJlbmRlck1vbnRoRWxlbWVudDogKDAsIF9haXJibmJQcm9wVHlwZXMubXV0dWFsbHlFeGNsdXNpdmVQcm9wcykoX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYywgJ3JlbmRlck1vbnRoVGV4dCcsICdyZW5kZXJNb250aEVsZW1lbnQnKSxcbiAgcmVuZGVyV2Vla0hlYWRlckVsZW1lbnQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIG9yaWVudGF0aW9uOiBfT3JpZW50YXRpb25TaGFwZVtcImRlZmF1bHRcIl0sXG4gIGFuY2hvckRpcmVjdGlvbjogX0FuY2hvckRpcmVjdGlvblNoYXBlW1wiZGVmYXVsdFwiXSxcbiAgb3BlbkRpcmVjdGlvbjogX09wZW5EaXJlY3Rpb25TaGFwZVtcImRlZmF1bHRcIl0sXG4gIGhvcml6b250YWxNYXJnaW46IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm51bWJlcixcbiAgd2l0aFBvcnRhbDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgd2l0aEZ1bGxTY3JlZW5Qb3J0YWw6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIGFwcGVuZFRvQm9keTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgZGlzYWJsZVNjcm9sbDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgaW5pdGlhbFZpc2libGVNb250aDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgZmlyc3REYXlPZldlZWs6IF9EYXlPZldlZWtTaGFwZVtcImRlZmF1bHRcIl0sXG4gIG51bWJlck9mTW9udGhzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5udW1iZXIsXG4gIGtlZXBPcGVuT25EYXRlU2VsZWN0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICByZW9wZW5QaWNrZXJPbkNsZWFyRGF0ZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgcmVuZGVyQ2FsZW5kYXJJbmZvOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBjYWxlbmRhckluZm9Qb3NpdGlvbjogX0NhbGVuZGFySW5mb1Bvc2l0aW9uU2hhcGVbXCJkZWZhdWx0XCJdLFxuICBoaWRlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgZGF5U2l6ZTogX2FpcmJuYlByb3BUeXBlcy5ub25OZWdhdGl2ZUludGVnZXIsXG4gIGlzUlRMOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICB2ZXJ0aWNhbEhlaWdodDogX2FpcmJuYlByb3BUeXBlcy5ub25OZWdhdGl2ZUludGVnZXIsXG4gIHRyYW5zaXRpb25EdXJhdGlvbjogX2FpcmJuYlByb3BUeXBlcy5ub25OZWdhdGl2ZUludGVnZXIsXG4gIGhvcml6b250YWxNb250aFBhZGRpbmc6IF9haXJibmJQcm9wVHlwZXMubm9uTmVnYXRpdmVJbnRlZ2VyLFxuICAvLyBuYXZpZ2F0aW9uIHJlbGF0ZWQgcHJvcHNcbiAgZGF5UGlja2VyTmF2aWdhdGlvbklubGluZVN0eWxlczogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ub2JqZWN0LFxuICBuYXZQb3NpdGlvbjogX05hdlBvc2l0aW9uU2hhcGVbXCJkZWZhdWx0XCJdLFxuICBuYXZQcmV2OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ub2RlLFxuICBuYXZOZXh0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ub2RlLFxuICByZW5kZXJOYXZQcmV2QnV0dG9uOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICByZW5kZXJOYXZOZXh0QnV0dG9uOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvblByZXZNb250aENsaWNrOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvbk5leHRNb250aENsaWNrOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvbkNsb3NlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICAvLyBkYXkgcHJlc2VudGF0aW9uIGFuZCBpbnRlcmFjdGlvbiByZWxhdGVkIHByb3BzXG4gIHJlbmRlckNhbGVuZGFyRGF5OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICByZW5kZXJEYXlDb250ZW50czogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgZW5hYmxlT3V0c2lkZURheXM6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIGlzRGF5QmxvY2tlZDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgaXNPdXRzaWRlUmFuZ2U6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIGlzRGF5SGlnaGxpZ2h0ZWQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIC8vIGludGVybmF0aW9uYWxpemF0aW9uIHByb3BzXG4gIGRpc3BsYXlGb3JtYXQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm9uZU9mVHlwZShbX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLCBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jXSksXG4gIG1vbnRoRm9ybWF0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcsXG4gIHdlZWtEYXlGb3JtYXQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZyxcbiAgcGhyYXNlczogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc2hhcGUoKDAsIF9nZXRQaHJhc2VQcm9wVHlwZXNbXCJkZWZhdWx0XCJdKShfZGVmYXVsdFBocmFzZXMuU2luZ2xlRGF0ZVBpY2tlclBocmFzZXMpKSxcbiAgZGF5QXJpYUxhYmVsRm9ybWF0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmdcbn07XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9haXJibmJQcm9wVHlwZXMgPSByZXF1aXJlKFwiYWlyYm5iLXByb3AtdHlwZXNcIik7XG5cbnZhciBfcmVhY3RXaXRoU3R5bGVzID0gcmVxdWlyZShcInJlYWN0LXdpdGgtc3R5bGVzXCIpO1xuXG52YXIgX2RlZmF1bHRQaHJhc2VzID0gcmVxdWlyZShcIi4uL2RlZmF1bHRQaHJhc2VzXCIpO1xuXG52YXIgX2dldFBocmFzZVByb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2dldFBocmFzZVByb3BUeXBlc1wiKSk7XG5cbnZhciBfbm9mbGlwID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvbm9mbGlwXCIpKTtcblxudmFyIF9EYXRlSW5wdXQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0RhdGVJbnB1dFwiKSk7XG5cbnZhciBfSWNvblBvc2l0aW9uU2hhcGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9zaGFwZXMvSWNvblBvc2l0aW9uU2hhcGVcIikpO1xuXG52YXIgX0Nsb3NlQnV0dG9uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9DbG9zZUJ1dHRvblwiKSk7XG5cbnZhciBfQ2FsZW5kYXJJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9DYWxlbmRhckljb25cIikpO1xuXG52YXIgX09wZW5EaXJlY3Rpb25TaGFwZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3NoYXBlcy9PcGVuRGlyZWN0aW9uU2hhcGVcIikpO1xuXG52YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHNcIik7XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7ICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxudmFyIHByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfYWlyYm5iUHJvcFR5cGVzLmZvcmJpZEV4dHJhUHJvcHMpKF9vYmplY3RTcHJlYWQoe30sIF9yZWFjdFdpdGhTdHlsZXMud2l0aFN0eWxlc1Byb3BUeXBlcywge1xuICBpZDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ub2RlLFxuICBwbGFjZWhvbGRlcjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLFxuICBhcmlhTGFiZWw6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZyxcbiAgZGlzcGxheVZhbHVlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcsXG4gIHNjcmVlblJlYWRlck1lc3NhZ2U6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZyxcbiAgZm9jdXNlZDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgaXNGb2N1c2VkOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICAvLyBkZXNjcmliZXMgYWN0dWFsIERPTSBmb2N1c1xuICBkaXNhYmxlZDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgcmVxdWlyZWQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIHJlYWRPbmx5OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBvcGVuRGlyZWN0aW9uOiBfT3BlbkRpcmVjdGlvblNoYXBlW1wiZGVmYXVsdFwiXSxcbiAgc2hvd0NhcmV0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBzaG93Q2xlYXJEYXRlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBjdXN0b21DbG9zZUljb246IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm5vZGUsXG4gIHNob3dEZWZhdWx0SW5wdXRJY29uOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBpbnB1dEljb25Qb3NpdGlvbjogX0ljb25Qb3NpdGlvblNoYXBlW1wiZGVmYXVsdFwiXSxcbiAgY3VzdG9tSW5wdXRJY29uOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ub2RlLFxuICBpc1JUTDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgbm9Cb3JkZXI6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIGJsb2NrOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBzbWFsbDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgcmVndWxhcjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgdmVydGljYWxTcGFjaW5nOiBfYWlyYm5iUHJvcFR5cGVzLm5vbk5lZ2F0aXZlSW50ZWdlcixcbiAgb25DaGFuZ2U6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIG9uQ2xlYXJEYXRlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvbkZvY3VzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvbktleURvd25TaGlmdFRhYjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgb25LZXlEb3duVGFiOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvbktleURvd25BcnJvd0Rvd246IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIG9uS2V5RG93blF1ZXN0aW9uTWFyazogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgLy8gaTE4blxuICBwaHJhc2VzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zaGFwZSgoMCwgX2dldFBocmFzZVByb3BUeXBlc1tcImRlZmF1bHRcIl0pKF9kZWZhdWx0UGhyYXNlcy5TaW5nbGVEYXRlUGlja2VySW5wdXRQaHJhc2VzKSlcbn0pKSA6IHt9O1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgY2hpbGRyZW46IG51bGwsXG4gIHBsYWNlaG9sZGVyOiAnU2VsZWN0IERhdGUnLFxuICBhcmlhTGFiZWw6IHVuZGVmaW5lZCxcbiAgZGlzcGxheVZhbHVlOiAnJyxcbiAgc2NyZWVuUmVhZGVyTWVzc2FnZTogJycsXG4gIGZvY3VzZWQ6IGZhbHNlLFxuICBpc0ZvY3VzZWQ6IGZhbHNlLFxuICBkaXNhYmxlZDogZmFsc2UsXG4gIHJlcXVpcmVkOiBmYWxzZSxcbiAgcmVhZE9ubHk6IGZhbHNlLFxuICBvcGVuRGlyZWN0aW9uOiBfY29uc3RhbnRzLk9QRU5fRE9XTixcbiAgc2hvd0NhcmV0OiBmYWxzZSxcbiAgc2hvd0NsZWFyRGF0ZTogZmFsc2UsXG4gIHNob3dEZWZhdWx0SW5wdXRJY29uOiBmYWxzZSxcbiAgaW5wdXRJY29uUG9zaXRpb246IF9jb25zdGFudHMuSUNPTl9CRUZPUkVfUE9TSVRJT04sXG4gIGN1c3RvbUNsb3NlSWNvbjogbnVsbCxcbiAgY3VzdG9tSW5wdXRJY29uOiBudWxsLFxuICBpc1JUTDogZmFsc2UsXG4gIG5vQm9yZGVyOiBmYWxzZSxcbiAgYmxvY2s6IGZhbHNlLFxuICBzbWFsbDogZmFsc2UsXG4gIHJlZ3VsYXI6IGZhbHNlLFxuICB2ZXJ0aWNhbFNwYWNpbmc6IHVuZGVmaW5lZCxcbiAgb25DaGFuZ2U6IGZ1bmN0aW9uIG9uQ2hhbmdlKCkge30sXG4gIG9uQ2xlYXJEYXRlOiBmdW5jdGlvbiBvbkNsZWFyRGF0ZSgpIHt9LFxuICBvbkZvY3VzOiBmdW5jdGlvbiBvbkZvY3VzKCkge30sXG4gIG9uS2V5RG93blNoaWZ0VGFiOiBmdW5jdGlvbiBvbktleURvd25TaGlmdFRhYigpIHt9LFxuICBvbktleURvd25UYWI6IGZ1bmN0aW9uIG9uS2V5RG93blRhYigpIHt9LFxuICBvbktleURvd25BcnJvd0Rvd246IGZ1bmN0aW9uIG9uS2V5RG93bkFycm93RG93bigpIHt9LFxuICBvbktleURvd25RdWVzdGlvbk1hcms6IGZ1bmN0aW9uIG9uS2V5RG93blF1ZXN0aW9uTWFyaygpIHt9LFxuICAvLyBpMThuXG4gIHBocmFzZXM6IF9kZWZhdWx0UGhyYXNlcy5TaW5nbGVEYXRlUGlja2VySW5wdXRQaHJhc2VzXG59O1xuXG5mdW5jdGlvbiBTaW5nbGVEYXRlUGlja2VySW5wdXQoX3JlZikge1xuICB2YXIgaWQgPSBfcmVmLmlkLFxuICAgICAgY2hpbGRyZW4gPSBfcmVmLmNoaWxkcmVuLFxuICAgICAgcGxhY2Vob2xkZXIgPSBfcmVmLnBsYWNlaG9sZGVyLFxuICAgICAgYXJpYUxhYmVsID0gX3JlZi5hcmlhTGFiZWwsXG4gICAgICBkaXNwbGF5VmFsdWUgPSBfcmVmLmRpc3BsYXlWYWx1ZSxcbiAgICAgIGZvY3VzZWQgPSBfcmVmLmZvY3VzZWQsXG4gICAgICBpc0ZvY3VzZWQgPSBfcmVmLmlzRm9jdXNlZCxcbiAgICAgIGRpc2FibGVkID0gX3JlZi5kaXNhYmxlZCxcbiAgICAgIHJlcXVpcmVkID0gX3JlZi5yZXF1aXJlZCxcbiAgICAgIHJlYWRPbmx5ID0gX3JlZi5yZWFkT25seSxcbiAgICAgIHNob3dDYXJldCA9IF9yZWYuc2hvd0NhcmV0LFxuICAgICAgc2hvd0NsZWFyRGF0ZSA9IF9yZWYuc2hvd0NsZWFyRGF0ZSxcbiAgICAgIHNob3dEZWZhdWx0SW5wdXRJY29uID0gX3JlZi5zaG93RGVmYXVsdElucHV0SWNvbixcbiAgICAgIGlucHV0SWNvblBvc2l0aW9uID0gX3JlZi5pbnB1dEljb25Qb3NpdGlvbixcbiAgICAgIHBocmFzZXMgPSBfcmVmLnBocmFzZXMsXG4gICAgICBvbkNsZWFyRGF0ZSA9IF9yZWYub25DbGVhckRhdGUsXG4gICAgICBvbkNoYW5nZSA9IF9yZWYub25DaGFuZ2UsXG4gICAgICBvbkZvY3VzID0gX3JlZi5vbkZvY3VzLFxuICAgICAgb25LZXlEb3duU2hpZnRUYWIgPSBfcmVmLm9uS2V5RG93blNoaWZ0VGFiLFxuICAgICAgb25LZXlEb3duVGFiID0gX3JlZi5vbktleURvd25UYWIsXG4gICAgICBvbktleURvd25BcnJvd0Rvd24gPSBfcmVmLm9uS2V5RG93bkFycm93RG93bixcbiAgICAgIG9uS2V5RG93blF1ZXN0aW9uTWFyayA9IF9yZWYub25LZXlEb3duUXVlc3Rpb25NYXJrLFxuICAgICAgc2NyZWVuUmVhZGVyTWVzc2FnZSA9IF9yZWYuc2NyZWVuUmVhZGVyTWVzc2FnZSxcbiAgICAgIGN1c3RvbUNsb3NlSWNvbiA9IF9yZWYuY3VzdG9tQ2xvc2VJY29uLFxuICAgICAgY3VzdG9tSW5wdXRJY29uID0gX3JlZi5jdXN0b21JbnB1dEljb24sXG4gICAgICBvcGVuRGlyZWN0aW9uID0gX3JlZi5vcGVuRGlyZWN0aW9uLFxuICAgICAgaXNSVEwgPSBfcmVmLmlzUlRMLFxuICAgICAgbm9Cb3JkZXIgPSBfcmVmLm5vQm9yZGVyLFxuICAgICAgYmxvY2sgPSBfcmVmLmJsb2NrLFxuICAgICAgc21hbGwgPSBfcmVmLnNtYWxsLFxuICAgICAgcmVndWxhciA9IF9yZWYucmVndWxhcixcbiAgICAgIHZlcnRpY2FsU3BhY2luZyA9IF9yZWYudmVydGljYWxTcGFjaW5nLFxuICAgICAgc3R5bGVzID0gX3JlZi5zdHlsZXM7XG5cbiAgdmFyIGNhbGVuZGFySWNvbiA9IGN1c3RvbUlucHV0SWNvbiB8fCBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoX0NhbGVuZGFySWNvbltcImRlZmF1bHRcIl0sICgwLCBfcmVhY3RXaXRoU3R5bGVzLmNzcykoc3R5bGVzLlNpbmdsZURhdGVQaWNrZXJJbnB1dF9jYWxlbmRhckljb25fc3ZnKSk7XG5cbiAgdmFyIGNsb3NlSWNvbiA9IGN1c3RvbUNsb3NlSWNvbiB8fCBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoX0Nsb3NlQnV0dG9uW1wiZGVmYXVsdFwiXSwgKDAsIF9yZWFjdFdpdGhTdHlsZXMuY3NzKShzdHlsZXMuU2luZ2xlRGF0ZVBpY2tlcklucHV0X2NsZWFyRGF0ZV9zdmcsIHNtYWxsICYmIHN0eWxlcy5TaW5nbGVEYXRlUGlja2VySW5wdXRfY2xlYXJEYXRlX3N2Z19fc21hbGwpKTtcblxuICB2YXIgc2NyZWVuUmVhZGVyVGV4dCA9IHNjcmVlblJlYWRlck1lc3NhZ2UgfHwgcGhyYXNlcy5rZXlib2FyZEZvcndhcmROYXZpZ2F0aW9uSW5zdHJ1Y3Rpb25zO1xuXG4gIHZhciBpbnB1dEljb24gPSAoc2hvd0RlZmF1bHRJbnB1dEljb24gfHwgY3VzdG9tSW5wdXRJY29uICE9PSBudWxsKSAmJiBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwgKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKHt9LCAoMCwgX3JlYWN0V2l0aFN0eWxlcy5jc3MpKHN0eWxlcy5TaW5nbGVEYXRlUGlja2VySW5wdXRfY2FsZW5kYXJJY29uKSwge1xuICAgIHR5cGU6IFwiYnV0dG9uXCIsXG4gICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgIFwiYXJpYS1sYWJlbFwiOiBwaHJhc2VzLmZvY3VzU3RhcnREYXRlLFxuICAgIG9uQ2xpY2s6IG9uRm9jdXNcbiAgfSksIGNhbGVuZGFySWNvbik7XG5cbiAgcmV0dXJuIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImRpdlwiLCAoMCwgX3JlYWN0V2l0aFN0eWxlcy5jc3MpKHN0eWxlcy5TaW5nbGVEYXRlUGlja2VySW5wdXQsIGRpc2FibGVkICYmIHN0eWxlcy5TaW5nbGVEYXRlUGlja2VySW5wdXRfX2Rpc2FibGVkLCBpc1JUTCAmJiBzdHlsZXMuU2luZ2xlRGF0ZVBpY2tlcklucHV0X19ydGwsICFub0JvcmRlciAmJiBzdHlsZXMuU2luZ2xlRGF0ZVBpY2tlcklucHV0X193aXRoQm9yZGVyLCBibG9jayAmJiBzdHlsZXMuU2luZ2xlRGF0ZVBpY2tlcklucHV0X19ibG9jaywgc2hvd0NsZWFyRGF0ZSAmJiBzdHlsZXMuU2luZ2xlRGF0ZVBpY2tlcklucHV0X19zaG93Q2xlYXJEYXRlKSwgaW5wdXRJY29uUG9zaXRpb24gPT09IF9jb25zdGFudHMuSUNPTl9CRUZPUkVfUE9TSVRJT04gJiYgaW5wdXRJY29uLCBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoX0RhdGVJbnB1dFtcImRlZmF1bHRcIl0sIHtcbiAgICBpZDogaWQsXG4gICAgcGxhY2Vob2xkZXI6IHBsYWNlaG9sZGVyLFxuICAgIGFyaWFMYWJlbDogYXJpYUxhYmVsLFxuICAgIGRpc3BsYXlWYWx1ZTogZGlzcGxheVZhbHVlLFxuICAgIHNjcmVlblJlYWRlck1lc3NhZ2U6IHNjcmVlblJlYWRlclRleHQsXG4gICAgZm9jdXNlZDogZm9jdXNlZCxcbiAgICBpc0ZvY3VzZWQ6IGlzRm9jdXNlZCxcbiAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgcmVxdWlyZWQ6IHJlcXVpcmVkLFxuICAgIHJlYWRPbmx5OiByZWFkT25seSxcbiAgICBzaG93Q2FyZXQ6IHNob3dDYXJldCxcbiAgICBvbkNoYW5nZTogb25DaGFuZ2UsXG4gICAgb25Gb2N1czogb25Gb2N1cyxcbiAgICBvbktleURvd25TaGlmdFRhYjogb25LZXlEb3duU2hpZnRUYWIsXG4gICAgb25LZXlEb3duVGFiOiBvbktleURvd25UYWIsXG4gICAgb25LZXlEb3duQXJyb3dEb3duOiBvbktleURvd25BcnJvd0Rvd24sXG4gICAgb25LZXlEb3duUXVlc3Rpb25NYXJrOiBvbktleURvd25RdWVzdGlvbk1hcmssXG4gICAgb3BlbkRpcmVjdGlvbjogb3BlbkRpcmVjdGlvbixcbiAgICB2ZXJ0aWNhbFNwYWNpbmc6IHZlcnRpY2FsU3BhY2luZyxcbiAgICBzbWFsbDogc21hbGwsXG4gICAgcmVndWxhcjogcmVndWxhcixcbiAgICBibG9jazogYmxvY2tcbiAgfSksIGNoaWxkcmVuLCBzaG93Q2xlYXJEYXRlICYmIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImJ1dHRvblwiLCAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe30sICgwLCBfcmVhY3RXaXRoU3R5bGVzLmNzcykoc3R5bGVzLlNpbmdsZURhdGVQaWNrZXJJbnB1dF9jbGVhckRhdGUsIHNtYWxsICYmIHN0eWxlcy5TaW5nbGVEYXRlUGlja2VySW5wdXRfY2xlYXJEYXRlX19zbWFsbCwgIWN1c3RvbUNsb3NlSWNvbiAmJiBzdHlsZXMuU2luZ2xlRGF0ZVBpY2tlcklucHV0X2NsZWFyRGF0ZV9fZGVmYXVsdCwgIWRpc3BsYXlWYWx1ZSAmJiBzdHlsZXMuU2luZ2xlRGF0ZVBpY2tlcklucHV0X2NsZWFyRGF0ZV9faGlkZSksIHtcbiAgICB0eXBlOiBcImJ1dHRvblwiLFxuICAgIFwiYXJpYS1sYWJlbFwiOiBwaHJhc2VzLmNsZWFyRGF0ZSxcbiAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgb25DbGljazogb25DbGVhckRhdGVcbiAgfSksIGNsb3NlSWNvbiksIGlucHV0SWNvblBvc2l0aW9uID09PSBfY29uc3RhbnRzLklDT05fQUZURVJfUE9TSVRJT04gJiYgaW5wdXRJY29uKTtcbn1cblxuU2luZ2xlRGF0ZVBpY2tlcklucHV0LnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHByb3BUeXBlcyA6IHt9O1xuU2luZ2xlRGF0ZVBpY2tlcklucHV0LmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9yZWFjdFdpdGhTdHlsZXMud2l0aFN0eWxlcykoZnVuY3Rpb24gKF9yZWYyKSB7XG4gIHZhciBfcmVmMiRyZWFjdERhdGVzID0gX3JlZjIucmVhY3REYXRlcyxcbiAgICAgIGJvcmRlciA9IF9yZWYyJHJlYWN0RGF0ZXMuYm9yZGVyLFxuICAgICAgY29sb3IgPSBfcmVmMiRyZWFjdERhdGVzLmNvbG9yO1xuICByZXR1cm4ge1xuICAgIFNpbmdsZURhdGVQaWNrZXJJbnB1dDoge1xuICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGNvbG9yLmJhY2tncm91bmRcbiAgICB9LFxuICAgIFNpbmdsZURhdGVQaWNrZXJJbnB1dF9fd2l0aEJvcmRlcjoge1xuICAgICAgYm9yZGVyQ29sb3I6IGNvbG9yLmJvcmRlcixcbiAgICAgIGJvcmRlcldpZHRoOiBib3JkZXIucGlja2VySW5wdXQuYm9yZGVyV2lkdGgsXG4gICAgICBib3JkZXJTdHlsZTogYm9yZGVyLnBpY2tlcklucHV0LmJvcmRlclN0eWxlLFxuICAgICAgYm9yZGVyUmFkaXVzOiBib3JkZXIucGlja2VySW5wdXQuYm9yZGVyUmFkaXVzXG4gICAgfSxcbiAgICBTaW5nbGVEYXRlUGlja2VySW5wdXRfX3J0bDoge1xuICAgICAgZGlyZWN0aW9uOiAoMCwgX25vZmxpcFtcImRlZmF1bHRcIl0pKCdydGwnKVxuICAgIH0sXG4gICAgU2luZ2xlRGF0ZVBpY2tlcklucHV0X19kaXNhYmxlZDoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBjb2xvci5kaXNhYmxlZFxuICAgIH0sXG4gICAgU2luZ2xlRGF0ZVBpY2tlcklucHV0X19ibG9jazoge1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJ1xuICAgIH0sXG4gICAgU2luZ2xlRGF0ZVBpY2tlcklucHV0X19zaG93Q2xlYXJEYXRlOiB7XG4gICAgICBwYWRkaW5nUmlnaHQ6IDMwIC8vIFRPRE86IHNob3VsZCBiZSBub2ZsaXAgd3JhcHBlZCBhbmQgaGFuZGxlZCBieSBhbiBpc1JUTCBwcm9wXG5cbiAgICB9LFxuICAgIFNpbmdsZURhdGVQaWNrZXJJbnB1dF9jbGVhckRhdGU6IHtcbiAgICAgIGJhY2tncm91bmQ6ICdub25lJyxcbiAgICAgIGJvcmRlcjogMCxcbiAgICAgIGNvbG9yOiAnaW5oZXJpdCcsXG4gICAgICBmb250OiAnaW5oZXJpdCcsXG4gICAgICBsaW5lSGVpZ2h0OiAnbm9ybWFsJyxcbiAgICAgIG92ZXJmbG93OiAndmlzaWJsZScsXG4gICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICAgIHBhZGRpbmc6IDEwLFxuICAgICAgbWFyZ2luOiAnMCAxMHB4IDAgNXB4JyxcbiAgICAgIC8vIFRPRE86IHNob3VsZCBiZSBub2ZsaXAgd3JhcHBlZCBhbmQgaGFuZGxlZCBieSBhbiBpc1JUTCBwcm9wXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgLy8gVE9ETzogc2hvdWxkIGJlIG5vZmxpcCB3cmFwcGVkIGFuZCBoYW5kbGVkIGJ5IGFuIGlzUlRMIHByb3BcbiAgICAgIHRvcDogJzUwJScsXG4gICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKC01MCUpJ1xuICAgIH0sXG4gICAgU2luZ2xlRGF0ZVBpY2tlcklucHV0X2NsZWFyRGF0ZV9fZGVmYXVsdDoge1xuICAgICAgJzpmb2N1cyc6IHtcbiAgICAgICAgYmFja2dyb3VuZDogY29sb3IuY29yZS5ib3JkZXIsXG4gICAgICAgIGJvcmRlclJhZGl1czogJzUwJSdcbiAgICAgIH0sXG4gICAgICAnOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kOiBjb2xvci5jb3JlLmJvcmRlcixcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAnNTAlJ1xuICAgICAgfVxuICAgIH0sXG4gICAgU2luZ2xlRGF0ZVBpY2tlcklucHV0X2NsZWFyRGF0ZV9fc21hbGw6IHtcbiAgICAgIHBhZGRpbmc6IDZcbiAgICB9LFxuICAgIFNpbmdsZURhdGVQaWNrZXJJbnB1dF9jbGVhckRhdGVfX2hpZGU6IHtcbiAgICAgIHZpc2liaWxpdHk6ICdoaWRkZW4nXG4gICAgfSxcbiAgICBTaW5nbGVEYXRlUGlja2VySW5wdXRfY2xlYXJEYXRlX3N2Zzoge1xuICAgICAgZmlsbDogY29sb3IuY29yZS5ncmF5TGlnaHQsXG4gICAgICBoZWlnaHQ6IDEyLFxuICAgICAgd2lkdGg6IDE1LFxuICAgICAgdmVydGljYWxBbGlnbjogJ21pZGRsZSdcbiAgICB9LFxuICAgIFNpbmdsZURhdGVQaWNrZXJJbnB1dF9jbGVhckRhdGVfc3ZnX19zbWFsbDoge1xuICAgICAgaGVpZ2h0OiA5XG4gICAgfSxcbiAgICBTaW5nbGVEYXRlUGlja2VySW5wdXRfY2FsZW5kYXJJY29uOiB7XG4gICAgICBiYWNrZ3JvdW5kOiAnbm9uZScsXG4gICAgICBib3JkZXI6IDAsXG4gICAgICBjb2xvcjogJ2luaGVyaXQnLFxuICAgICAgZm9udDogJ2luaGVyaXQnLFxuICAgICAgbGluZUhlaWdodDogJ25vcm1hbCcsXG4gICAgICBvdmVyZmxvdzogJ3Zpc2libGUnLFxuICAgICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLFxuICAgICAgcGFkZGluZzogMTAsXG4gICAgICBtYXJnaW46ICcwIDVweCAwIDEwcHgnIC8vIFRPRE86IHNob3VsZCBiZSBub2ZsaXAgd3JhcHBlZCBhbmQgaGFuZGxlZCBieSBhbiBpc1JUTCBwcm9wXG5cbiAgICB9LFxuICAgIFNpbmdsZURhdGVQaWNrZXJJbnB1dF9jYWxlbmRhckljb25fc3ZnOiB7XG4gICAgICBmaWxsOiBjb2xvci5jb3JlLmdyYXlMaWdodCxcbiAgICAgIGhlaWdodDogMTUsXG4gICAgICB3aWR0aDogMTQsXG4gICAgICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJ1xuICAgIH1cbiAgfTtcbn0sIHtcbiAgcHVyZUNvbXBvbmVudDogdHlwZW9mIF9yZWFjdFtcImRlZmF1bHRcIl0uUHVyZUNvbXBvbmVudCAhPT0gJ3VuZGVmaW5lZCdcbn0pKFNpbmdsZURhdGVQaWNrZXJJbnB1dCk7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9BcnJheVNwZWNpZXNDcmVhdGUnKTtcbnZhciBGbGF0dGVuSW50b0FycmF5ID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9GbGF0dGVuSW50b0FycmF5Jyk7XG52YXIgR2V0ID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9HZXQnKTtcbnZhciBUb0ludGVnZXIgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC8yMDE5L1RvSW50ZWdlcicpO1xudmFyIFRvTGVuZ3RoID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9Ub0xlbmd0aCcpO1xudmFyIFRvT2JqZWN0ID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvMjAxOS9Ub09iamVjdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZsYXQoKSB7XG5cdHZhciBPID0gVG9PYmplY3QodGhpcyk7XG5cdHZhciBzb3VyY2VMZW4gPSBUb0xlbmd0aChHZXQoTywgJ2xlbmd0aCcpKTtcblxuXHR2YXIgZGVwdGhOdW0gPSAxO1xuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIGFyZ3VtZW50c1swXSAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRkZXB0aE51bSA9IFRvSW50ZWdlcihhcmd1bWVudHNbMF0pO1xuXHR9XG5cblx0dmFyIEEgPSBBcnJheVNwZWNpZXNDcmVhdGUoTywgMCk7XG5cdEZsYXR0ZW5JbnRvQXJyYXkoQSwgTywgc291cmNlTGVuLCAwLCBkZXB0aE51bSk7XG5cdHJldHVybiBBO1xufTtcbiIsInZhciBoYXNNYXAgPSB0eXBlb2YgTWFwID09PSAnZnVuY3Rpb24nICYmIE1hcC5wcm90b3R5cGU7XG52YXIgbWFwU2l6ZURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yICYmIGhhc01hcCA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTWFwLnByb3RvdHlwZSwgJ3NpemUnKSA6IG51bGw7XG52YXIgbWFwU2l6ZSA9IGhhc01hcCAmJiBtYXBTaXplRGVzY3JpcHRvciAmJiB0eXBlb2YgbWFwU2l6ZURlc2NyaXB0b3IuZ2V0ID09PSAnZnVuY3Rpb24nID8gbWFwU2l6ZURlc2NyaXB0b3IuZ2V0IDogbnVsbDtcbnZhciBtYXBGb3JFYWNoID0gaGFzTWFwICYmIE1hcC5wcm90b3R5cGUuZm9yRWFjaDtcbnZhciBoYXNTZXQgPSB0eXBlb2YgU2V0ID09PSAnZnVuY3Rpb24nICYmIFNldC5wcm90b3R5cGU7XG52YXIgc2V0U2l6ZURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yICYmIGhhc1NldCA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoU2V0LnByb3RvdHlwZSwgJ3NpemUnKSA6IG51bGw7XG52YXIgc2V0U2l6ZSA9IGhhc1NldCAmJiBzZXRTaXplRGVzY3JpcHRvciAmJiB0eXBlb2Ygc2V0U2l6ZURlc2NyaXB0b3IuZ2V0ID09PSAnZnVuY3Rpb24nID8gc2V0U2l6ZURlc2NyaXB0b3IuZ2V0IDogbnVsbDtcbnZhciBzZXRGb3JFYWNoID0gaGFzU2V0ICYmIFNldC5wcm90b3R5cGUuZm9yRWFjaDtcbnZhciBoYXNXZWFrTWFwID0gdHlwZW9mIFdlYWtNYXAgPT09ICdmdW5jdGlvbicgJiYgV2Vha01hcC5wcm90b3R5cGU7XG52YXIgd2Vha01hcEhhcyA9IGhhc1dlYWtNYXAgPyBXZWFrTWFwLnByb3RvdHlwZS5oYXMgOiBudWxsO1xudmFyIGhhc1dlYWtTZXQgPSB0eXBlb2YgV2Vha1NldCA9PT0gJ2Z1bmN0aW9uJyAmJiBXZWFrU2V0LnByb3RvdHlwZTtcbnZhciB3ZWFrU2V0SGFzID0gaGFzV2Vha1NldCA/IFdlYWtTZXQucHJvdG90eXBlLmhhcyA6IG51bGw7XG52YXIgYm9vbGVhblZhbHVlT2YgPSBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mO1xudmFyIG9iamVjdFRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciBtYXRjaCA9IFN0cmluZy5wcm90b3R5cGUubWF0Y2g7XG52YXIgYmlnSW50VmFsdWVPZiA9IHR5cGVvZiBCaWdJbnQgPT09ICdmdW5jdGlvbicgPyBCaWdJbnQucHJvdG90eXBlLnZhbHVlT2YgOiBudWxsO1xuXG52YXIgaW5zcGVjdEN1c3RvbSA9IHJlcXVpcmUoJy4vdXRpbC5pbnNwZWN0JykuY3VzdG9tO1xudmFyIGluc3BlY3RTeW1ib2wgPSBpbnNwZWN0Q3VzdG9tICYmIGlzU3ltYm9sKGluc3BlY3RDdXN0b20pID8gaW5zcGVjdEN1c3RvbSA6IG51bGw7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaW5zcGVjdF8ob2JqLCBvcHRpb25zLCBkZXB0aCwgc2Vlbikge1xuICAgIHZhciBvcHRzID0gb3B0aW9ucyB8fCB7fTtcblxuICAgIGlmIChoYXMob3B0cywgJ3F1b3RlU3R5bGUnKSAmJiAob3B0cy5xdW90ZVN0eWxlICE9PSAnc2luZ2xlJyAmJiBvcHRzLnF1b3RlU3R5bGUgIT09ICdkb3VibGUnKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb24gXCJxdW90ZVN0eWxlXCIgbXVzdCBiZSBcInNpbmdsZVwiIG9yIFwiZG91YmxlXCInKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuICd1bmRlZmluZWQnO1xuICAgIH1cbiAgICBpZiAob2JqID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAnbnVsbCc7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgcmV0dXJuIG9iaiA/ICd0cnVlJyA6ICdmYWxzZSc7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBpbnNwZWN0U3RyaW5nKG9iaiwgb3B0cyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnbnVtYmVyJykge1xuICAgICAgICBpZiAob2JqID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gSW5maW5pdHkgLyBvYmogPiAwID8gJzAnIDogJy0wJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gU3RyaW5nKG9iaik7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnYmlnaW50JykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHZhbGlkLXR5cGVvZlxuICAgICAgICByZXR1cm4gU3RyaW5nKG9iaikgKyAnbic7XG4gICAgfVxuXG4gICAgdmFyIG1heERlcHRoID0gdHlwZW9mIG9wdHMuZGVwdGggPT09ICd1bmRlZmluZWQnID8gNSA6IG9wdHMuZGVwdGg7XG4gICAgaWYgKHR5cGVvZiBkZXB0aCA9PT0gJ3VuZGVmaW5lZCcpIHsgZGVwdGggPSAwOyB9XG4gICAgaWYgKGRlcHRoID49IG1heERlcHRoICYmIG1heERlcHRoID4gMCAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gJ1tPYmplY3RdJztcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHNlZW4gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHNlZW4gPSBbXTtcbiAgICB9IGVsc2UgaWYgKGluZGV4T2Yoc2Vlbiwgb2JqKSA+PSAwKSB7XG4gICAgICAgIHJldHVybiAnW0NpcmN1bGFyXSc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zcGVjdCh2YWx1ZSwgZnJvbSkge1xuICAgICAgICBpZiAoZnJvbSkge1xuICAgICAgICAgICAgc2VlbiA9IHNlZW4uc2xpY2UoKTtcbiAgICAgICAgICAgIHNlZW4ucHVzaChmcm9tKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW5zcGVjdF8odmFsdWUsIG9wdHMsIGRlcHRoICsgMSwgc2Vlbik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFyIG5hbWUgPSBuYW1lT2Yob2JqKTtcbiAgICAgICAgcmV0dXJuICdbRnVuY3Rpb24nICsgKG5hbWUgPyAnOiAnICsgbmFtZSA6ICcnKSArICddJztcbiAgICB9XG4gICAgaWYgKGlzU3ltYm9sKG9iaikpIHtcbiAgICAgICAgdmFyIHN5bVN0cmluZyA9IFN5bWJvbC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopO1xuICAgICAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgPyBtYXJrQm94ZWQoc3ltU3RyaW5nKSA6IHN5bVN0cmluZztcbiAgICB9XG4gICAgaWYgKGlzRWxlbWVudChvYmopKSB7XG4gICAgICAgIHZhciBzID0gJzwnICsgU3RyaW5nKG9iai5ub2RlTmFtZSkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgdmFyIGF0dHJzID0gb2JqLmF0dHJpYnV0ZXMgfHwgW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXR0cnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHMgKz0gJyAnICsgYXR0cnNbaV0ubmFtZSArICc9JyArIHdyYXBRdW90ZXMocXVvdGUoYXR0cnNbaV0udmFsdWUpLCAnZG91YmxlJywgb3B0cyk7XG4gICAgICAgIH1cbiAgICAgICAgcyArPSAnPic7XG4gICAgICAgIGlmIChvYmouY2hpbGROb2RlcyAmJiBvYmouY2hpbGROb2Rlcy5sZW5ndGgpIHsgcyArPSAnLi4uJzsgfVxuICAgICAgICBzICs9ICc8LycgKyBTdHJpbmcob2JqLm5vZGVOYW1lKS50b0xvd2VyQ2FzZSgpICsgJz4nO1xuICAgICAgICByZXR1cm4gcztcbiAgICB9XG4gICAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgICAgICBpZiAob2JqLmxlbmd0aCA9PT0gMCkgeyByZXR1cm4gJ1tdJzsgfVxuICAgICAgICByZXR1cm4gJ1sgJyArIGFyck9iaktleXMob2JqLCBpbnNwZWN0KS5qb2luKCcsICcpICsgJyBdJztcbiAgICB9XG4gICAgaWYgKGlzRXJyb3Iob2JqKSkge1xuICAgICAgICB2YXIgcGFydHMgPSBhcnJPYmpLZXlzKG9iaiwgaW5zcGVjdCk7XG4gICAgICAgIGlmIChwYXJ0cy5sZW5ndGggPT09IDApIHsgcmV0dXJuICdbJyArIFN0cmluZyhvYmopICsgJ10nOyB9XG4gICAgICAgIHJldHVybiAneyBbJyArIFN0cmluZyhvYmopICsgJ10gJyArIHBhcnRzLmpvaW4oJywgJykgKyAnIH0nO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgaWYgKGluc3BlY3RTeW1ib2wgJiYgdHlwZW9mIG9ialtpbnNwZWN0U3ltYm9sXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIG9ialtpbnNwZWN0U3ltYm9sXSgpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBvYmouaW5zcGVjdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmV0dXJuIG9iai5pbnNwZWN0KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzTWFwKG9iaikpIHtcbiAgICAgICAgdmFyIG1hcFBhcnRzID0gW107XG4gICAgICAgIG1hcEZvckVhY2guY2FsbChvYmosIGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgICAgICAgICBtYXBQYXJ0cy5wdXNoKGluc3BlY3Qoa2V5LCBvYmopICsgJyA9PiAnICsgaW5zcGVjdCh2YWx1ZSwgb2JqKSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY29sbGVjdGlvbk9mKCdNYXAnLCBtYXBTaXplLmNhbGwob2JqKSwgbWFwUGFydHMpO1xuICAgIH1cbiAgICBpZiAoaXNTZXQob2JqKSkge1xuICAgICAgICB2YXIgc2V0UGFydHMgPSBbXTtcbiAgICAgICAgc2V0Rm9yRWFjaC5jYWxsKG9iaiwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBzZXRQYXJ0cy5wdXNoKGluc3BlY3QodmFsdWUsIG9iaikpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb25PZignU2V0Jywgc2V0U2l6ZS5jYWxsKG9iaiksIHNldFBhcnRzKTtcbiAgICB9XG4gICAgaWYgKGlzV2Vha01hcChvYmopKSB7XG4gICAgICAgIHJldHVybiB3ZWFrQ29sbGVjdGlvbk9mKCdXZWFrTWFwJyk7XG4gICAgfVxuICAgIGlmIChpc1dlYWtTZXQob2JqKSkge1xuICAgICAgICByZXR1cm4gd2Vha0NvbGxlY3Rpb25PZignV2Vha1NldCcpO1xuICAgIH1cbiAgICBpZiAoaXNOdW1iZXIob2JqKSkge1xuICAgICAgICByZXR1cm4gbWFya0JveGVkKGluc3BlY3QoTnVtYmVyKG9iaikpKTtcbiAgICB9XG4gICAgaWYgKGlzQmlnSW50KG9iaikpIHtcbiAgICAgICAgcmV0dXJuIG1hcmtCb3hlZChpbnNwZWN0KGJpZ0ludFZhbHVlT2YuY2FsbChvYmopKSk7XG4gICAgfVxuICAgIGlmIChpc0Jvb2xlYW4ob2JqKSkge1xuICAgICAgICByZXR1cm4gbWFya0JveGVkKGJvb2xlYW5WYWx1ZU9mLmNhbGwob2JqKSk7XG4gICAgfVxuICAgIGlmIChpc1N0cmluZyhvYmopKSB7XG4gICAgICAgIHJldHVybiBtYXJrQm94ZWQoaW5zcGVjdChTdHJpbmcob2JqKSkpO1xuICAgIH1cbiAgICBpZiAoIWlzRGF0ZShvYmopICYmICFpc1JlZ0V4cChvYmopKSB7XG4gICAgICAgIHZhciB4cyA9IGFyck9iaktleXMob2JqLCBpbnNwZWN0KTtcbiAgICAgICAgaWYgKHhzLmxlbmd0aCA9PT0gMCkgeyByZXR1cm4gJ3t9JzsgfVxuICAgICAgICByZXR1cm4gJ3sgJyArIHhzLmpvaW4oJywgJykgKyAnIH0nO1xuICAgIH1cbiAgICByZXR1cm4gU3RyaW5nKG9iaik7XG59O1xuXG5mdW5jdGlvbiB3cmFwUXVvdGVzKHMsIGRlZmF1bHRTdHlsZSwgb3B0cykge1xuICAgIHZhciBxdW90ZUNoYXIgPSAob3B0cy5xdW90ZVN0eWxlIHx8IGRlZmF1bHRTdHlsZSkgPT09ICdkb3VibGUnID8gJ1wiJyA6IFwiJ1wiO1xuICAgIHJldHVybiBxdW90ZUNoYXIgKyBzICsgcXVvdGVDaGFyO1xufVxuXG5mdW5jdGlvbiBxdW90ZShzKSB7XG4gICAgcmV0dXJuIFN0cmluZyhzKS5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7Jyk7XG59XG5cbmZ1bmN0aW9uIGlzQXJyYXkob2JqKSB7IHJldHVybiB0b1N0cihvYmopID09PSAnW29iamVjdCBBcnJheV0nOyB9XG5mdW5jdGlvbiBpc0RhdGUob2JqKSB7IHJldHVybiB0b1N0cihvYmopID09PSAnW29iamVjdCBEYXRlXSc7IH1cbmZ1bmN0aW9uIGlzUmVnRXhwKG9iaikgeyByZXR1cm4gdG9TdHIob2JqKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7IH1cbmZ1bmN0aW9uIGlzRXJyb3Iob2JqKSB7IHJldHVybiB0b1N0cihvYmopID09PSAnW29iamVjdCBFcnJvcl0nOyB9XG5mdW5jdGlvbiBpc1N5bWJvbChvYmopIHsgcmV0dXJuIHRvU3RyKG9iaikgPT09ICdbb2JqZWN0IFN5bWJvbF0nOyB9XG5mdW5jdGlvbiBpc1N0cmluZyhvYmopIHsgcmV0dXJuIHRvU3RyKG9iaikgPT09ICdbb2JqZWN0IFN0cmluZ10nOyB9XG5mdW5jdGlvbiBpc051bWJlcihvYmopIHsgcmV0dXJuIHRvU3RyKG9iaikgPT09ICdbb2JqZWN0IE51bWJlcl0nOyB9XG5mdW5jdGlvbiBpc0JpZ0ludChvYmopIHsgcmV0dXJuIHRvU3RyKG9iaikgPT09ICdbb2JqZWN0IEJpZ0ludF0nOyB9XG5mdW5jdGlvbiBpc0Jvb2xlYW4ob2JqKSB7IHJldHVybiB0b1N0cihvYmopID09PSAnW29iamVjdCBCb29sZWFuXSc7IH1cblxudmFyIGhhc093biA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkgfHwgZnVuY3Rpb24gKGtleSkgeyByZXR1cm4ga2V5IGluIHRoaXM7IH07XG5mdW5jdGlvbiBoYXMob2JqLCBrZXkpIHtcbiAgICByZXR1cm4gaGFzT3duLmNhbGwob2JqLCBrZXkpO1xufVxuXG5mdW5jdGlvbiB0b1N0cihvYmopIHtcbiAgICByZXR1cm4gb2JqZWN0VG9TdHJpbmcuY2FsbChvYmopO1xufVxuXG5mdW5jdGlvbiBuYW1lT2YoZikge1xuICAgIGlmIChmLm5hbWUpIHsgcmV0dXJuIGYubmFtZTsgfVxuICAgIHZhciBtID0gbWF0Y2guY2FsbChmLCAvXmZ1bmN0aW9uXFxzKihbXFx3JF0rKS8pO1xuICAgIGlmIChtKSB7IHJldHVybiBtWzFdOyB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGluZGV4T2YoeHMsIHgpIHtcbiAgICBpZiAoeHMuaW5kZXhPZikgeyByZXR1cm4geHMuaW5kZXhPZih4KTsgfVxuICAgIGZvciAodmFyIGkgPSAwLCBsID0geHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGlmICh4c1tpXSA9PT0geCkgeyByZXR1cm4gaTsgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG59XG5cbmZ1bmN0aW9uIGlzTWFwKHgpIHtcbiAgICBpZiAoIW1hcFNpemUgfHwgIXggfHwgdHlwZW9mIHggIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgbWFwU2l6ZS5jYWxsKHgpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc2V0U2l6ZS5jYWxsKHgpO1xuICAgICAgICB9IGNhdGNoIChzKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geCBpbnN0YW5jZW9mIE1hcDsgLy8gY29yZS1qcyB3b3JrYXJvdW5kLCBwcmUtdjIuNS4wXG4gICAgfSBjYXRjaCAoZSkge31cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzV2Vha01hcCh4KSB7XG4gICAgaWYgKCF3ZWFrTWFwSGFzIHx8ICF4IHx8IHR5cGVvZiB4ICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIHdlYWtNYXBIYXMuY2FsbCh4LCB3ZWFrTWFwSGFzKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHdlYWtTZXRIYXMuY2FsbCh4LCB3ZWFrU2V0SGFzKTtcbiAgICAgICAgfSBjYXRjaCAocykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHggaW5zdGFuY2VvZiBXZWFrTWFwOyAvLyBjb3JlLWpzIHdvcmthcm91bmQsIHByZS12Mi41LjBcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNTZXQoeCkge1xuICAgIGlmICghc2V0U2l6ZSB8fCAheCB8fCB0eXBlb2YgeCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBzZXRTaXplLmNhbGwoeCk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBtYXBTaXplLmNhbGwoeCk7XG4gICAgICAgIH0gY2F0Y2ggKG0pIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB4IGluc3RhbmNlb2YgU2V0OyAvLyBjb3JlLWpzIHdvcmthcm91bmQsIHByZS12Mi41LjBcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNXZWFrU2V0KHgpIHtcbiAgICBpZiAoIXdlYWtTZXRIYXMgfHwgIXggfHwgdHlwZW9mIHggIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgd2Vha1NldEhhcy5jYWxsKHgsIHdlYWtTZXRIYXMpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgd2Vha01hcEhhcy5jYWxsKHgsIHdlYWtNYXBIYXMpO1xuICAgICAgICB9IGNhdGNoIChzKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geCBpbnN0YW5jZW9mIFdlYWtTZXQ7IC8vIGNvcmUtanMgd29ya2Fyb3VuZCwgcHJlLXYyLjUuMFxuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc0VsZW1lbnQoeCkge1xuICAgIGlmICgheCB8fCB0eXBlb2YgeCAhPT0gJ29iamVjdCcpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgaWYgKHR5cGVvZiBIVE1MRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgeCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gdHlwZW9mIHgubm9kZU5hbWUgPT09ICdzdHJpbmcnICYmIHR5cGVvZiB4LmdldEF0dHJpYnV0ZSA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZnVuY3Rpb24gaW5zcGVjdFN0cmluZyhzdHIsIG9wdHMpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udHJvbC1yZWdleFxuICAgIHZhciBzID0gc3RyLnJlcGxhY2UoLyhbJ1xcXFxdKS9nLCAnXFxcXCQxJykucmVwbGFjZSgvW1xceDAwLVxceDFmXS9nLCBsb3dieXRlKTtcbiAgICByZXR1cm4gd3JhcFF1b3RlcyhzLCAnc2luZ2xlJywgb3B0cyk7XG59XG5cbmZ1bmN0aW9uIGxvd2J5dGUoYykge1xuICAgIHZhciBuID0gYy5jaGFyQ29kZUF0KDApO1xuICAgIHZhciB4ID0ge1xuICAgICAgICA4OiAnYicsIDk6ICd0JywgMTA6ICduJywgMTI6ICdmJywgMTM6ICdyJ1xuICAgIH1bbl07XG4gICAgaWYgKHgpIHsgcmV0dXJuICdcXFxcJyArIHg7IH1cbiAgICByZXR1cm4gJ1xcXFx4JyArIChuIDwgMHgxMCA/ICcwJyA6ICcnKSArIG4udG9TdHJpbmcoMTYpO1xufVxuXG5mdW5jdGlvbiBtYXJrQm94ZWQoc3RyKSB7XG4gICAgcmV0dXJuICdPYmplY3QoJyArIHN0ciArICcpJztcbn1cblxuZnVuY3Rpb24gd2Vha0NvbGxlY3Rpb25PZih0eXBlKSB7XG4gICAgcmV0dXJuIHR5cGUgKyAnIHsgPyB9Jztcbn1cblxuZnVuY3Rpb24gY29sbGVjdGlvbk9mKHR5cGUsIHNpemUsIGVudHJpZXMpIHtcbiAgICByZXR1cm4gdHlwZSArICcgKCcgKyBzaXplICsgJykgeycgKyBlbnRyaWVzLmpvaW4oJywgJykgKyAnfSc7XG59XG5cbmZ1bmN0aW9uIGFyck9iaktleXMob2JqLCBpbnNwZWN0KSB7XG4gICAgdmFyIGlzQXJyID0gaXNBcnJheShvYmopO1xuICAgIHZhciB4cyA9IFtdO1xuICAgIGlmIChpc0Fycikge1xuICAgICAgICB4cy5sZW5ndGggPSBvYmoubGVuZ3RoO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iai5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgeHNbaV0gPSBoYXMob2JqLCBpKSA/IGluc3BlY3Qob2JqW2ldLCBvYmopIDogJyc7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIga2V5IGluIG9iaikgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICAgIGlmICghaGFzKG9iaiwga2V5KSkgeyBjb250aW51ZTsgfSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4LCBuby1jb250aW51ZVxuICAgICAgICBpZiAoaXNBcnIgJiYgU3RyaW5nKE51bWJlcihrZXkpKSA9PT0ga2V5ICYmIGtleSA8IG9iai5sZW5ndGgpIHsgY29udGludWU7IH0gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheCwgbm8tY29udGludWVcbiAgICAgICAgaWYgKCgvW15cXHckXS8pLnRlc3Qoa2V5KSkge1xuICAgICAgICAgICAgeHMucHVzaChpbnNwZWN0KGtleSwgb2JqKSArICc6ICcgKyBpbnNwZWN0KG9ialtrZXldLCBvYmopKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHhzLnB1c2goa2V5ICsgJzogJyArIGluc3BlY3Qob2JqW2tleV0sIG9iaikpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB4cztcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyICRpc05hTiA9IE51bWJlci5pc05hTiB8fCBmdW5jdGlvbiAoYSkgeyByZXR1cm4gYSAhPT0gYTsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBOdW1iZXIuaXNGaW5pdGUgfHwgZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHR5cGVvZiB4ID09PSAnbnVtYmVyJyAmJiAhJGlzTmFOKHgpICYmIHggIT09IEluZmluaXR5ICYmIHggIT09IC1JbmZpbml0eTsgfTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJE1hdGggPSBHZXRJbnRyaW5zaWMoJyVNYXRoJScpO1xudmFyICROdW1iZXIgPSBHZXRJbnRyaW5zaWMoJyVOdW1iZXIlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gJE51bWJlci5NQVhfU0FGRV9JTlRFR0VSIHx8ICRNYXRoLnBvdygyLCA1MykgLSAxO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkVHlwZUVycm9yID0gR2V0SW50cmluc2ljKCclVHlwZUVycm9yJScpO1xudmFyICRTeW50YXhFcnJvciA9IEdldEludHJpbnNpYygnJVN5bnRheEVycm9yJScpO1xuXG52YXIgaGFzID0gcmVxdWlyZSgnaGFzJyk7XG5cbnZhciBwcmVkaWNhdGVzID0ge1xuXHQvLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtcHJvcGVydHktZGVzY3JpcHRvci1zcGVjaWZpY2F0aW9uLXR5cGVcblx0J1Byb3BlcnR5IERlc2NyaXB0b3InOiBmdW5jdGlvbiBpc1Byb3BlcnR5RGVzY3JpcHRvcihUeXBlLCBEZXNjKSB7XG5cdFx0aWYgKFR5cGUoRGVzYykgIT09ICdPYmplY3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHZhciBhbGxvd2VkID0ge1xuXHRcdFx0J1tbQ29uZmlndXJhYmxlXV0nOiB0cnVlLFxuXHRcdFx0J1tbRW51bWVyYWJsZV1dJzogdHJ1ZSxcblx0XHRcdCdbW0dldF1dJzogdHJ1ZSxcblx0XHRcdCdbW1NldF1dJzogdHJ1ZSxcblx0XHRcdCdbW1ZhbHVlXV0nOiB0cnVlLFxuXHRcdFx0J1tbV3JpdGFibGVdXSc6IHRydWVcblx0XHR9O1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIERlc2MpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXHRcdFx0aWYgKGhhcyhEZXNjLCBrZXkpICYmICFhbGxvd2VkW2tleV0pIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHZhciBpc0RhdGEgPSBoYXMoRGVzYywgJ1tbVmFsdWVdXScpO1xuXHRcdHZhciBJc0FjY2Vzc29yID0gaGFzKERlc2MsICdbW0dldF1dJykgfHwgaGFzKERlc2MsICdbW1NldF1dJyk7XG5cdFx0aWYgKGlzRGF0YSAmJiBJc0FjY2Vzc29yKSB7XG5cdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignUHJvcGVydHkgRGVzY3JpcHRvcnMgbWF5IG5vdCBiZSBib3RoIGFjY2Vzc29yIGFuZCBkYXRhIGRlc2NyaXB0b3JzJyk7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGFzc2VydFJlY29yZChUeXBlLCByZWNvcmRUeXBlLCBhcmd1bWVudE5hbWUsIHZhbHVlKSB7XG5cdHZhciBwcmVkaWNhdGUgPSBwcmVkaWNhdGVzW3JlY29yZFR5cGVdO1xuXHRpZiAodHlwZW9mIHByZWRpY2F0ZSAhPT0gJ2Z1bmN0aW9uJykge1xuXHRcdHRocm93IG5ldyAkU3ludGF4RXJyb3IoJ3Vua25vd24gcmVjb3JkIHR5cGU6ICcgKyByZWNvcmRUeXBlKTtcblx0fVxuXHRpZiAoIXByZWRpY2F0ZShUeXBlLCB2YWx1ZSkpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcihhcmd1bWVudE5hbWUgKyAnIG11c3QgYmUgYSAnICsgcmVjb3JkVHlwZSk7XG5cdH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi81LjEvI3NlYy05LjJcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBUb0Jvb2xlYW4odmFsdWUpIHsgcmV0dXJuICEhdmFsdWU7IH07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNQcmltaXRpdmUodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlID09PSBudWxsIHx8ICh0eXBlb2YgdmFsdWUgIT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvbWF4U2FmZUludGVnZXInKTtcblxudmFyIFRvSW50ZWdlciA9IHJlcXVpcmUoJy4vVG9JbnRlZ2VyJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gVG9MZW5ndGgoYXJndW1lbnQpIHtcblx0dmFyIGxlbiA9IFRvSW50ZWdlcihhcmd1bWVudCk7XG5cdGlmIChsZW4gPD0gMCkgeyByZXR1cm4gMDsgfSAvLyBpbmNsdWRlcyBjb252ZXJ0aW5nIC0wIHRvICswXG5cdGlmIChsZW4gPiBNQVhfU0FGRV9JTlRFR0VSKSB7IHJldHVybiBNQVhfU0FGRV9JTlRFR0VSOyB9XG5cdHJldHVybiBsZW47XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgRVM1VG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vNS9Ub0ludGVnZXInKTtcblxudmFyIFRvTnVtYmVyID0gcmVxdWlyZSgnLi9Ub051bWJlcicpO1xuXG4vLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLXRvaW50ZWdlclxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFRvSW50ZWdlcih2YWx1ZSkge1xuXHR2YXIgbnVtYmVyID0gVG9OdW1iZXIodmFsdWUpO1xuXHRyZXR1cm4gRVM1VG9JbnRlZ2VyKG51bWJlcik7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGhhc1N5bWJvbHMgPSByZXF1aXJlKCdoYXMtc3ltYm9scycpKCk7XG5cbmlmIChoYXNTeW1ib2xzKSB7XG5cdHZhciBzeW1Ub1N0ciA9IFN5bWJvbC5wcm90b3R5cGUudG9TdHJpbmc7XG5cdHZhciBzeW1TdHJpbmdSZWdleCA9IC9eU3ltYm9sXFwoLipcXCkkLztcblx0dmFyIGlzU3ltYm9sT2JqZWN0ID0gZnVuY3Rpb24gaXNSZWFsU3ltYm9sT2JqZWN0KHZhbHVlKSB7XG5cdFx0aWYgKHR5cGVvZiB2YWx1ZS52YWx1ZU9mKCkgIT09ICdzeW1ib2wnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiBzeW1TdHJpbmdSZWdleC50ZXN0KHN5bVRvU3RyLmNhbGwodmFsdWUpKTtcblx0fTtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7XG5cdFx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N5bWJvbCcpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRpZiAodG9TdHIuY2FsbCh2YWx1ZSkgIT09ICdbb2JqZWN0IFN5bWJvbF0nKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHRyeSB7XG5cdFx0XHRyZXR1cm4gaXNTeW1ib2xPYmplY3QodmFsdWUpO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH07XG59IGVsc2Uge1xuXG5cdG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcblx0XHQvLyB0aGlzIGVudmlyb25tZW50IGRvZXMgbm90IHN1cHBvcnQgU3ltYm9scy5cblx0XHRyZXR1cm4gZmFsc2UgJiYgdmFsdWU7XG5cdH07XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRQb2x5ZmlsbCgpIHtcblx0cmV0dXJuIEFycmF5LnByb3RvdHlwZS5mbGF0IHx8IGltcGxlbWVudGF0aW9uO1xufTtcbiIsImV4cG9ydCB2YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTsiLCJ2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgeyBjYW5Vc2VET00gfSBmcm9tICcuL3V0aWxzJztcblxudmFyIFBvcnRhbCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhQb3J0YWwsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFBvcnRhbCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUG9ydGFsKTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoUG9ydGFsLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoUG9ydGFsKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUG9ydGFsLCBbe1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxVbm1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5kZWZhdWx0Tm9kZSkge1xuICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHRoaXMuZGVmYXVsdE5vZGUpO1xuICAgICAgfVxuICAgICAgdGhpcy5kZWZhdWx0Tm9kZSA9IG51bGw7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgaWYgKCFjYW5Vc2VET00pIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBpZiAoIXRoaXMucHJvcHMubm9kZSAmJiAhdGhpcy5kZWZhdWx0Tm9kZSkge1xuICAgICAgICB0aGlzLmRlZmF1bHROb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5kZWZhdWx0Tm9kZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gUmVhY3RET00uY3JlYXRlUG9ydGFsKHRoaXMucHJvcHMuY2hpbGRyZW4sIHRoaXMucHJvcHMubm9kZSB8fCB0aGlzLmRlZmF1bHROb2RlKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUG9ydGFsO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Qb3J0YWwucHJvcFR5cGVzID0ge1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcbiAgbm9kZTogUHJvcFR5cGVzLmFueVxufTtcblxuZXhwb3J0IGRlZmF1bHQgUG9ydGFsOyIsInZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuLy8gVGhpcyBmaWxlIGlzIGEgZmFsbGJhY2sgZm9yIGEgY29uc3VtZXIgd2hvIGlzIG5vdCB5ZXQgb24gUmVhY3QgMTZcbi8vIGFzIGNyZWF0ZVBvcnRhbCB3YXMgaW50cm9kdWNlZCBpbiBSZWFjdCAxNlxuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG52YXIgUG9ydGFsID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFBvcnRhbCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUG9ydGFsKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQb3J0YWwpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChQb3J0YWwuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihQb3J0YWwpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhQb3J0YWwsIFt7XG4gICAga2V5OiAnY29tcG9uZW50RGlkTW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMucmVuZGVyUG9ydGFsKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50RGlkVXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKHByb3BzKSB7XG4gICAgICB0aGlzLnJlbmRlclBvcnRhbCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxVbm1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBSZWFjdERPTS51bm1vdW50Q29tcG9uZW50QXROb2RlKHRoaXMuZGVmYXVsdE5vZGUgfHwgdGhpcy5wcm9wcy5ub2RlKTtcbiAgICAgIGlmICh0aGlzLmRlZmF1bHROb2RlKSB7XG4gICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQodGhpcy5kZWZhdWx0Tm9kZSk7XG4gICAgICB9XG4gICAgICB0aGlzLmRlZmF1bHROb2RlID0gbnVsbDtcbiAgICAgIHRoaXMucG9ydGFsID0gbnVsbDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXJQb3J0YWwnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXJQb3J0YWwocHJvcHMpIHtcbiAgICAgIGlmICghdGhpcy5wcm9wcy5ub2RlICYmICF0aGlzLmRlZmF1bHROb2RlKSB7XG4gICAgICAgIHRoaXMuZGVmYXVsdE5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLmRlZmF1bHROb2RlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICAgIC8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL2ppbWZiL2Q5OWUwNjc4ZTlkYTcxNWNjZjY0NTQ5NjFlZjA0ZDFiXG4gICAgICBpZiAodHlwZW9mIHRoaXMucHJvcHMuY2hpbGRyZW4udHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjaGlsZHJlbiA9IFJlYWN0LmNsb25lRWxlbWVudCh0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5wb3J0YWwgPSBSZWFjdERPTS51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcih0aGlzLCBjaGlsZHJlbiwgdGhpcy5wcm9wcy5ub2RlIHx8IHRoaXMuZGVmYXVsdE5vZGUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBQb3J0YWw7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmV4cG9ydCBkZWZhdWx0IFBvcnRhbDtcblxuXG5Qb3J0YWwucHJvcFR5cGVzID0ge1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcbiAgbm9kZTogUHJvcFR5cGVzLmFueVxufTsiLCJpbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcblxuaW1wb3J0IFBvcnRhbHY0IGZyb20gJy4vUG9ydGFsJztcbmltcG9ydCBMZWdhY3lQb3J0YWwgZnJvbSAnLi9MZWdhY3lQb3J0YWwnO1xuXG52YXIgUG9ydGFsID0gdm9pZCAwO1xuXG5pZiAoUmVhY3RET00uY3JlYXRlUG9ydGFsKSB7XG4gIFBvcnRhbCA9IFBvcnRhbHY0O1xufSBlbHNlIHtcbiAgUG9ydGFsID0gTGVnYWN5UG9ydGFsO1xufVxuXG5leHBvcnQgZGVmYXVsdCBQb3J0YWw7IiwidmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBQb3J0YWwgZnJvbSAnLi9Qb3J0YWxDb21wYXQnO1xuXG52YXIgS0VZQ09ERVMgPSB7XG4gIEVTQ0FQRTogMjdcbn07XG5cbnZhciBQb3J0YWxXaXRoU3RhdGUgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoUG9ydGFsV2l0aFN0YXRlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBQb3J0YWxXaXRoU3RhdGUocHJvcHMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUG9ydGFsV2l0aFN0YXRlKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChQb3J0YWxXaXRoU3RhdGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihQb3J0YWxXaXRoU3RhdGUpKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICBfdGhpcy5wb3J0YWxOb2RlID0gbnVsbDtcbiAgICBfdGhpcy5zdGF0ZSA9IHsgYWN0aXZlOiAhIXByb3BzLmRlZmF1bHRPcGVuIH07XG4gICAgX3RoaXMub3BlblBvcnRhbCA9IF90aGlzLm9wZW5Qb3J0YWwuYmluZChfdGhpcyk7XG4gICAgX3RoaXMuY2xvc2VQb3J0YWwgPSBfdGhpcy5jbG9zZVBvcnRhbC5iaW5kKF90aGlzKTtcbiAgICBfdGhpcy53cmFwV2l0aFBvcnRhbCA9IF90aGlzLndyYXBXaXRoUG9ydGFsLmJpbmQoX3RoaXMpO1xuICAgIF90aGlzLmhhbmRsZU91dHNpZGVNb3VzZUNsaWNrID0gX3RoaXMuaGFuZGxlT3V0c2lkZU1vdXNlQ2xpY2suYmluZChfdGhpcyk7XG4gICAgX3RoaXMuaGFuZGxlS2V5ZG93biA9IF90aGlzLmhhbmRsZUtleWRvd24uYmluZChfdGhpcyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFBvcnRhbFdpdGhTdGF0ZSwgW3tcbiAgICBrZXk6ICdjb21wb25lbnREaWRNb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgaWYgKHRoaXMucHJvcHMuY2xvc2VPbkVzYykge1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5oYW5kbGVLZXlkb3duKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnByb3BzLmNsb3NlT25PdXRzaWRlQ2xpY2spIHtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhhbmRsZU91dHNpZGVNb3VzZUNsaWNrKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsVW5tb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgaWYgKHRoaXMucHJvcHMuY2xvc2VPbkVzYykge1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5oYW5kbGVLZXlkb3duKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnByb3BzLmNsb3NlT25PdXRzaWRlQ2xpY2spIHtcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhhbmRsZU91dHNpZGVNb3VzZUNsaWNrKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdvcGVuUG9ydGFsJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gb3BlblBvcnRhbChlKSB7XG4gICAgICBpZiAodGhpcy5zdGF0ZS5hY3RpdmUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGUgJiYgZS5uYXRpdmVFdmVudCkge1xuICAgICAgICBlLm5hdGl2ZUV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgICAgfVxuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGFjdGl2ZTogdHJ1ZSB9LCB0aGlzLnByb3BzLm9uT3Blbik7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY2xvc2VQb3J0YWwnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjbG9zZVBvcnRhbCgpIHtcbiAgICAgIGlmICghdGhpcy5zdGF0ZS5hY3RpdmUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGFjdGl2ZTogZmFsc2UgfSwgdGhpcy5wcm9wcy5vbkNsb3NlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd3cmFwV2l0aFBvcnRhbCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHdyYXBXaXRoUG9ydGFsKGNoaWxkcmVuKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgaWYgKCF0aGlzLnN0YXRlLmFjdGl2ZSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBQb3J0YWwsXG4gICAgICAgIHtcbiAgICAgICAgICBub2RlOiB0aGlzLnByb3BzLm5vZGUsXG4gICAgICAgICAga2V5OiAncmVhY3QtcG9ydGFsJyxcbiAgICAgICAgICByZWY6IGZ1bmN0aW9uIHJlZihwb3J0YWxOb2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMyLnBvcnRhbE5vZGUgPSBwb3J0YWxOb2RlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY2hpbGRyZW5cbiAgICAgICk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaGFuZGxlT3V0c2lkZU1vdXNlQ2xpY2snLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVPdXRzaWRlTW91c2VDbGljayhlKSB7XG4gICAgICBpZiAoIXRoaXMuc3RhdGUuYWN0aXZlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciByb290ID0gdGhpcy5wb3J0YWxOb2RlICYmICh0aGlzLnBvcnRhbE5vZGUucHJvcHMubm9kZSB8fCB0aGlzLnBvcnRhbE5vZGUuZGVmYXVsdE5vZGUpO1xuICAgICAgaWYgKCFyb290IHx8IHJvb3QuY29udGFpbnMoZS50YXJnZXQpIHx8IGUuYnV0dG9uICYmIGUuYnV0dG9uICE9PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuY2xvc2VQb3J0YWwoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdoYW5kbGVLZXlkb3duJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGFuZGxlS2V5ZG93bihlKSB7XG4gICAgICBpZiAoZS5rZXlDb2RlID09PSBLRVlDT0RFUy5FU0NBUEUgJiYgdGhpcy5zdGF0ZS5hY3RpdmUpIHtcbiAgICAgICAgdGhpcy5jbG9zZVBvcnRhbCgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuKHtcbiAgICAgICAgb3BlblBvcnRhbDogdGhpcy5vcGVuUG9ydGFsLFxuICAgICAgICBjbG9zZVBvcnRhbDogdGhpcy5jbG9zZVBvcnRhbCxcbiAgICAgICAgcG9ydGFsOiB0aGlzLndyYXBXaXRoUG9ydGFsLFxuICAgICAgICBpc09wZW46IHRoaXMuc3RhdGUuYWN0aXZlXG4gICAgICB9KTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUG9ydGFsV2l0aFN0YXRlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Qb3J0YWxXaXRoU3RhdGUucHJvcFR5cGVzID0ge1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgZGVmYXVsdE9wZW46IFByb3BUeXBlcy5ib29sLFxuICBub2RlOiBQcm9wVHlwZXMuYW55LFxuICBjbG9zZU9uRXNjOiBQcm9wVHlwZXMuYm9vbCxcbiAgY2xvc2VPbk91dHNpZGVDbGljazogUHJvcFR5cGVzLmJvb2wsXG4gIG9uT3BlbjogUHJvcFR5cGVzLmZ1bmMsXG4gIG9uQ2xvc2U6IFByb3BUeXBlcy5mdW5jXG59O1xuXG5Qb3J0YWxXaXRoU3RhdGUuZGVmYXVsdFByb3BzID0ge1xuICBvbk9wZW46IGZ1bmN0aW9uIG9uT3BlbigpIHt9LFxuICBvbkNsb3NlOiBmdW5jdGlvbiBvbkNsb3NlKCkge31cbn07XG5cbmV4cG9ydCBkZWZhdWx0IFBvcnRhbFdpdGhTdGF0ZTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwocm9vdCkge1xuXHR2YXIgcmVzdWx0O1xuXHR2YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cblx0aWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicpIHtcblx0XHRpZiAoU3ltYm9sLm9ic2VydmFibGUpIHtcblx0XHRcdHJlc3VsdCA9IFN5bWJvbC5vYnNlcnZhYmxlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2woJ29ic2VydmFibGUnKTtcblx0XHRcdFN5bWJvbC5vYnNlcnZhYmxlID0gcmVzdWx0O1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRyZXN1bHQgPSAnQEBvYnNlcnZhYmxlJztcblx0fVxuXG5cdHJldHVybiByZXN1bHQ7XG59O1xuIiwiLy8gQGZsb3dcbid1c2Ugc3RyaWN0JztcblxudmFyIGtleSA9ICdfX2dsb2JhbF91bmlxdWVfaWRfXyc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBnbG9iYWxba2V5XSA9IChnbG9iYWxba2V5XSB8fCAwKSArIDE7XG59O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB1dWlkXzEgPSByZXF1aXJlKFwidXVpZFwiKTtcbmNvbnN0IHV1aWR2NCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdXVpZF8xLnY0KCk7XG59O1xuZXhwb3J0cy51dWlkID0gdXVpZHY0O1xuY29uc3QgcmVnZXggPSB7XG4gICAgdjQ6IC8oPzpeW2EtZjAtOV17OH0tW2EtZjAtOV17NH0tNFthLWYwLTldezN9LVthLWYwLTldezR9LVthLWYwLTldezEyfSQpfCg/Ol4wezh9LTB7NH0tMHs0fS0wezR9LTB7MTJ9JCkvdSxcbiAgICB2NTogLyg/Ol5bYS1mMC05XXs4fS1bYS1mMC05XXs0fS01W2EtZjAtOV17M30tW2EtZjAtOV17NH0tW2EtZjAtOV17MTJ9JCl8KD86XjB7OH0tMHs0fS0wezR9LTB7NH0tMHsxMn0kKS91XG59O1xuZXhwb3J0cy5yZWdleCA9IHJlZ2V4O1xuY29uc3QgaXNVdWlkID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgcmV0dXJuIHJlZ2V4LnY0LnRlc3QodmFsdWUpIHx8IHJlZ2V4LnY1LnRlc3QodmFsdWUpO1xufTtcbmV4cG9ydHMuaXNVdWlkID0gaXNVdWlkO1xuY29uc3QgZW1wdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICcwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDAnO1xufTtcbmV4cG9ydHMuZW1wdHkgPSBlbXB0eTtcbmNvbnN0IGZyb21TdHJpbmcgPSBmdW5jdGlvbiAodGV4dCkge1xuICAgIGNvbnN0IG5hbWVzcGFjZSA9ICdiYjVkMGZmYS05YTRjLTRkN2MtOGZjMi0wYTdkMjIyMGJhNDUnO1xuICAgIGNvbnN0IHV1aWRGcm9tU3RyaW5nID0gdXVpZF8xLnY1KHRleHQsIG5hbWVzcGFjZSk7XG4gICAgcmV0dXJuIHV1aWRGcm9tU3RyaW5nO1xufTtcbmV4cG9ydHMuZnJvbVN0cmluZyA9IGZyb21TdHJpbmc7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEzLjBcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBsPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixwPW4/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMscT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYscj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyx0PW4/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LHU9bj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsdj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSx3PW4/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAseD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMix5PW4/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLHo9bj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSxBPW4/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6XG42MDExNixCPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBDKGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifVxudmFyIEQ9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319LEU9e307ZnVuY3Rpb24gRihhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1FO3RoaXMudXBkYXRlcj1jfHxEfUYucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307Ri5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtpZihcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hKXRocm93IEVycm9yKEMoODUpKTt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0YucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O1xuZnVuY3Rpb24gRygpe31HLnByb3RvdHlwZT1GLnByb3RvdHlwZTtmdW5jdGlvbiBIKGEsYixjKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUU7dGhpcy51cGRhdGVyPWN8fER9dmFyIEk9SC5wcm90b3R5cGU9bmV3IEc7SS5jb25zdHJ1Y3Rvcj1IO2woSSxGLnByb3RvdHlwZSk7SS5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgSj17Y3VycmVudDpudWxsfSxLPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksTD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gTShhLGIsYyl7dmFyIGUsZD17fSxnPW51bGwsaz1udWxsO2lmKG51bGwhPWIpZm9yKGUgaW4gdm9pZCAwIT09Yi5yZWYmJihrPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGc9XCJcIitiLmtleSksYilLLmNhbGwoYixlKSYmIUwuaGFzT3duUHJvcGVydHkoZSkmJihkW2VdPWJbZV0pO3ZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZilkLmNoaWxkcmVuPWM7ZWxzZSBpZigxPGYpe2Zvcih2YXIgaD1BcnJheShmKSxtPTA7bTxmO20rKyloW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49aH1pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoZSBpbiBmPWEuZGVmYXVsdFByb3BzLGYpdm9pZCAwPT09ZFtlXSYmKGRbZV09ZltlXSk7cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLGtleTpnLHJlZjprLHByb3BzOmQsX293bmVyOkouY3VycmVudH19XG5mdW5jdGlvbiBOKGEsYil7cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfX1mdW5jdGlvbiBPKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1wfWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrKFwiXCIrYSkucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIFA9L1xcLysvZyxRPVtdO2Z1bmN0aW9uIFIoYSxiLGMsZSl7aWYoUS5sZW5ndGgpe3ZhciBkPVEucG9wKCk7ZC5yZXN1bHQ9YTtkLmtleVByZWZpeD1iO2QuZnVuYz1jO2QuY29udGV4dD1lO2QuY291bnQ9MDtyZXR1cm4gZH1yZXR1cm57cmVzdWx0OmEsa2V5UHJlZml4OmIsZnVuYzpjLGNvbnRleHQ6ZSxjb3VudDowfX1cbmZ1bmN0aW9uIFMoYSl7YS5yZXN1bHQ9bnVsbDthLmtleVByZWZpeD1udWxsO2EuZnVuYz1udWxsO2EuY29udGV4dD1udWxsO2EuY291bnQ9MDsxMD5RLmxlbmd0aCYmUS5wdXNoKGEpfVxuZnVuY3Rpb24gVChhLGIsYyxlKXt2YXIgZD10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09ZHx8XCJib29sZWFuXCI9PT1kKWE9bnVsbDt2YXIgZz0hMTtpZihudWxsPT09YSlnPSEwO2Vsc2Ugc3dpdGNoKGQpe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6Zz0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgcDpjYXNlIHE6Zz0hMH19aWYoZylyZXR1cm4gYyhlLGEsXCJcIj09PWI/XCIuXCIrVShhLDApOmIpLDE7Zz0wO2I9XCJcIj09PWI/XCIuXCI6YitcIjpcIjtpZihBcnJheS5pc0FycmF5KGEpKWZvcih2YXIgaz0wO2s8YS5sZW5ndGg7aysrKXtkPWFba107dmFyIGY9YitVKGQsayk7Zys9VChkLGYsYyxlKX1lbHNlIGlmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGE/Zj1udWxsOihmPUImJmFbQl18fGFbXCJAQGl0ZXJhdG9yXCJdLGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGY/ZjpudWxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksaz1cbjA7IShkPWEubmV4dCgpKS5kb25lOylkPWQudmFsdWUsZj1iK1UoZCxrKyspLGcrPVQoZCxmLGMsZSk7ZWxzZSBpZihcIm9iamVjdFwiPT09ZCl0aHJvdyBjPVwiXCIrYSxFcnJvcihDKDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1jP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmMsXCJcIikpO3JldHVybiBnfWZ1bmN0aW9uIFYoYSxiLGMpe3JldHVybiBudWxsPT1hPzA6VChhLFwiXCIsYixjKX1mdW5jdGlvbiBVKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKGEua2V5KTpiLnRvU3RyaW5nKDM2KX1mdW5jdGlvbiBXKGEsYil7YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKX1cbmZ1bmN0aW9uIGFhKGEsYixjKXt2YXIgZT1hLnJlc3VsdCxkPWEua2V5UHJlZml4O2E9YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKTtBcnJheS5pc0FycmF5KGEpP1goYSxlLGMsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTpudWxsIT1hJiYoTyhhKSYmKGE9TihhLGQrKCFhLmtleXx8YiYmYi5rZXk9PT1hLmtleT9cIlwiOihcIlwiK2Eua2V5KS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpK2MpKSxlLnB1c2goYSkpfWZ1bmN0aW9uIFgoYSxiLGMsZSxkKXt2YXIgZz1cIlwiO251bGwhPWMmJihnPShcIlwiK2MpLnJlcGxhY2UoUCxcIiQmL1wiKStcIi9cIik7Yj1SKGIsZyxlLGQpO1YoYSxhYSxiKTtTKGIpfXZhciBZPXtjdXJyZW50Om51bGx9O2Z1bmN0aW9uIFooKXt2YXIgYT1ZLmN1cnJlbnQ7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IoQygzMjEpKTtyZXR1cm4gYX1cbnZhciBiYT17UmVhY3RDdXJyZW50RGlzcGF0Y2hlcjpZLFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnOntzdXNwZW5zZTpudWxsfSxSZWFjdEN1cnJlbnRPd25lcjpKLElzU29tZVJlbmRlcmVyQWN0aW5nOntjdXJyZW50OiExfSxhc3NpZ246bH07ZXhwb3J0cy5DaGlsZHJlbj17bWFwOmZ1bmN0aW9uKGEsYixjKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBlPVtdO1goYSxlLG51bGwsYixjKTtyZXR1cm4gZX0sZm9yRWFjaDpmdW5jdGlvbihhLGIsYyl7aWYobnVsbD09YSlyZXR1cm4gYTtiPVIobnVsbCxudWxsLGIsYyk7VihhLFcsYik7UyhiKX0sY291bnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIFYoYSxmdW5jdGlvbigpe3JldHVybiBudWxsfSxudWxsKX0sdG9BcnJheTpmdW5jdGlvbihhKXt2YXIgYj1bXTtYKGEsYixudWxsLGZ1bmN0aW9uKGEpe3JldHVybiBhfSk7cmV0dXJuIGJ9LG9ubHk6ZnVuY3Rpb24oYSl7aWYoIU8oYSkpdGhyb3cgRXJyb3IoQygxNDMpKTtyZXR1cm4gYX19O1xuZXhwb3J0cy5Db21wb25lbnQ9RjtleHBvcnRzLkZyYWdtZW50PXI7ZXhwb3J0cy5Qcm9maWxlcj11O2V4cG9ydHMuUHVyZUNvbXBvbmVudD1IO2V4cG9ydHMuU3RyaWN0TW9kZT10O2V4cG9ydHMuU3VzcGVuc2U9eTtleHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPWJhO1xuZXhwb3J0cy5jbG9uZUVsZW1lbnQ9ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PT1hfHx2b2lkIDA9PT1hKXRocm93IEVycm9yKEMoMjY3LGEpKTt2YXIgZT1sKHt9LGEucHJvcHMpLGQ9YS5rZXksZz1hLnJlZixrPWEuX293bmVyO2lmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoZz1iLnJlZixrPUouY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihkPVwiXCIrYi5rZXkpO2lmKGEudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyl2YXIgZj1hLnR5cGUuZGVmYXVsdFByb3BzO2ZvcihoIGluIGIpSy5jYWxsKGIsaCkmJiFMLmhhc093blByb3BlcnR5KGgpJiYoZVtoXT12b2lkIDA9PT1iW2hdJiZ2b2lkIDAhPT1mP2ZbaF06YltoXSl9dmFyIGg9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1oKWUuY2hpbGRyZW49YztlbHNlIGlmKDE8aCl7Zj1BcnJheShoKTtmb3IodmFyIG09MDttPGg7bSsrKWZbbV09YXJndW1lbnRzW20rMl07ZS5jaGlsZHJlbj1mfXJldHVybnskJHR5cGVvZjpwLHR5cGU6YS50eXBlLFxua2V5OmQscmVmOmcscHJvcHM6ZSxfb3duZXI6a319O2V4cG9ydHMuY3JlYXRlQ29udGV4dD1mdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2E9eyQkdHlwZW9mOncsX2NhbGN1bGF0ZUNoYW5nZWRCaXRzOmIsX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjp2LF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9O2V4cG9ydHMuY3JlYXRlRWxlbWVudD1NO2V4cG9ydHMuY3JlYXRlRmFjdG9yeT1mdW5jdGlvbihhKXt2YXIgYj1NLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn07ZXhwb3J0cy5jcmVhdGVSZWY9ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX07ZXhwb3J0cy5mb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp4LHJlbmRlcjphfX07ZXhwb3J0cy5pc1ZhbGlkRWxlbWVudD1PO1xuZXhwb3J0cy5sYXp5PWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjpBLF9jdG9yOmEsX3N0YXR1czotMSxfcmVzdWx0Om51bGx9fTtleHBvcnRzLm1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm57JCR0eXBlb2Y6eix0eXBlOmEsY29tcGFyZTp2b2lkIDA9PT1iP251bGw6Yn19O2V4cG9ydHMudXNlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWigpLnVzZUNhbGxiYWNrKGEsYil9O2V4cG9ydHMudXNlQ29udGV4dD1mdW5jdGlvbihhLGIpe3JldHVybiBaKCkudXNlQ29udGV4dChhLGIpfTtleHBvcnRzLnVzZURlYnVnVmFsdWU9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudXNlRWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VJbXBlcmF0aXZlSGFuZGxlPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gWigpLnVzZUltcGVyYXRpdmVIYW5kbGUoYSxiLGMpfTtcbmV4cG9ydHMudXNlTGF5b3V0RWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VMYXlvdXRFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VNZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VNZW1vKGEsYil9O2V4cG9ydHMudXNlUmVkdWNlcj1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIFooKS51c2VSZWR1Y2VyKGEsYixjKX07ZXhwb3J0cy51c2VSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIFooKS51c2VSZWYoYSl9O2V4cG9ydHMudXNlU3RhdGU9ZnVuY3Rpb24oYSl7cmV0dXJuIFooKS51c2VTdGF0ZShhKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTYuMTMuMFwiO1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMy4wXG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLG49cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIikscj1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIHUoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9aWYoIWFhKXRocm93IEVycm9yKHUoMjI3KSk7XG5mdW5jdGlvbiBiYShhLGIsYyxkLGUsZixnLGgsayl7dmFyIGw9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbCl9Y2F0Y2gobSl7dGhpcy5vbkVycm9yKG0pfX12YXIgZGE9ITEsZWE9bnVsbCxmYT0hMSxoYT1udWxsLGlhPXtvbkVycm9yOmZ1bmN0aW9uKGEpe2RhPSEwO2VhPWF9fTtmdW5jdGlvbiBqYShhLGIsYyxkLGUsZixnLGgsayl7ZGE9ITE7ZWE9bnVsbDtiYS5hcHBseShpYSxhcmd1bWVudHMpfWZ1bmN0aW9uIGthKGEsYixjLGQsZSxmLGcsaCxrKXtqYS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoZGEpe2lmKGRhKXt2YXIgbD1lYTtkYT0hMTtlYT1udWxsfWVsc2UgdGhyb3cgRXJyb3IodSgxOTgpKTtmYXx8KGZhPSEwLGhhPWwpfX12YXIgbGE9bnVsbCxtYT1udWxsLG5hPW51bGw7XG5mdW5jdGlvbiBvYShhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9bmEoYyk7a2EoZCxiLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH12YXIgcGE9YWEuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ7cGEuaGFzT3duUHJvcGVydHkoXCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyXCIpfHwocGEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcj17Y3VycmVudDpudWxsfSk7cGEuaGFzT3duUHJvcGVydHkoXCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZ1wiKXx8KHBhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnPXtzdXNwZW5zZTpudWxsfSk7XG52YXIgcWE9L14oLiopW1xcXFxcXC9dLyx2PVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IscmE9dj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxzYT12P1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsdGE9dj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsdWE9dj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsdmE9dj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsd2E9dj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDkseGE9dj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCx5YT12P1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEsemE9dj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIsQWE9dj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMsQmE9dj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTpcbjYwMTIwLENhPXY/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsRGE9dj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNixFYT12P1N5bWJvbC5mb3IoXCJyZWFjdC5ibG9ja1wiKTo2MDEyMSxGYT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gR2EoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPUZhJiZhW0ZhXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfWZ1bmN0aW9uIEhhKGEpe2lmKC0xPT09YS5fc3RhdHVzKXthLl9zdGF0dXM9MDt2YXIgYj1hLl9jdG9yO2I9YigpO2EuX3Jlc3VsdD1iO2IudGhlbihmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYj1iLmRlZmF1bHQsYS5fc3RhdHVzPTEsYS5fcmVzdWx0PWIpfSxmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYS5fc3RhdHVzPTIsYS5fcmVzdWx0PWIpfSl9fVxuZnVuY3Rpb24gSWEoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSB0YTpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSBzYTpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgdmE6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgdWE6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBBYTpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSBCYTpyZXR1cm5cIlN1c3BlbnNlTGlzdFwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSB4YTpyZXR1cm5cIkNvbnRleHQuQ29uc3VtZXJcIjtjYXNlIHdhOnJldHVyblwiQ29udGV4dC5Qcm92aWRlclwiO2Nhc2UgemE6dmFyIGI9YS5yZW5kZXI7Yj1iLmRpc3BsYXlOYW1lfHxiLm5hbWV8fFwiXCI7cmV0dXJuIGEuZGlzcGxheU5hbWV8fChcIlwiIT09Yj9cIkZvcndhcmRSZWYoXCIrYitcIilcIjpcblwiRm9yd2FyZFJlZlwiKTtjYXNlIENhOnJldHVybiBJYShhLnR5cGUpO2Nhc2UgRWE6cmV0dXJuIElhKGEucmVuZGVyKTtjYXNlIERhOmlmKGE9MT09PWEuX3N0YXR1cz9hLl9yZXN1bHQ6bnVsbClyZXR1cm4gSWEoYSl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gSmEoYSl7dmFyIGI9XCJcIjtkb3thOnN3aXRjaChhLnRhZyl7Y2FzZSAzOmNhc2UgNDpjYXNlIDY6Y2FzZSA3OmNhc2UgMTA6Y2FzZSA5OnZhciBjPVwiXCI7YnJlYWsgYTtkZWZhdWx0OnZhciBkPWEuX2RlYnVnT3duZXIsZT1hLl9kZWJ1Z1NvdXJjZSxmPUlhKGEudHlwZSk7Yz1udWxsO2QmJihjPUlhKGQudHlwZSkpO2Q9ZjtmPVwiXCI7ZT9mPVwiIChhdCBcIitlLmZpbGVOYW1lLnJlcGxhY2UocWEsXCJcIikrXCI6XCIrZS5saW5lTnVtYmVyK1wiKVwiOmMmJihmPVwiIChjcmVhdGVkIGJ5IFwiK2MrXCIpXCIpO2M9XCJcXG4gICAgaW4gXCIrKGR8fFwiVW5rbm93blwiKStmfWIrPWM7YT1hLnJldHVybn13aGlsZShhKTtyZXR1cm4gYn12YXIgS2E9bnVsbCxMYT17fTtcbmZ1bmN0aW9uIE1hKCl7aWYoS2EpZm9yKHZhciBhIGluIExhKXt2YXIgYj1MYVthXSxjPUthLmluZGV4T2YoYSk7aWYoISgtMTxjKSl0aHJvdyBFcnJvcih1KDk2LGEpKTtpZighTmFbY10pe2lmKCFiLmV4dHJhY3RFdmVudHMpdGhyb3cgRXJyb3IodSg5NyxhKSk7TmFbY109YjtjPWIuZXZlbnRUeXBlcztmb3IodmFyIGQgaW4gYyl7dmFyIGU9dm9pZCAwO3ZhciBmPWNbZF0sZz1iLGg9ZDtpZihPYS5oYXNPd25Qcm9wZXJ0eShoKSl0aHJvdyBFcnJvcih1KDk5LGgpKTtPYVtoXT1mO3ZhciBrPWYucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7aWYoayl7Zm9yKGUgaW4gaylrLmhhc093blByb3BlcnR5KGUpJiZQYShrW2VdLGcsaCk7ZT0hMH1lbHNlIGYucmVnaXN0cmF0aW9uTmFtZT8oUGEoZi5yZWdpc3RyYXRpb25OYW1lLGcsaCksZT0hMCk6ZT0hMTtpZighZSl0aHJvdyBFcnJvcih1KDk4LGQsYSkpO319fX1cbmZ1bmN0aW9uIFBhKGEsYixjKXtpZihRYVthXSl0aHJvdyBFcnJvcih1KDEwMCxhKSk7UWFbYV09YjtSYVthXT1iLmV2ZW50VHlwZXNbY10uZGVwZW5kZW5jaWVzfXZhciBOYT1bXSxPYT17fSxRYT17fSxSYT17fTtmdW5jdGlvbiBTYShhKXt2YXIgYj0hMSxjO2ZvcihjIGluIGEpaWYoYS5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9YVtjXTtpZighTGEuaGFzT3duUHJvcGVydHkoYyl8fExhW2NdIT09ZCl7aWYoTGFbY10pdGhyb3cgRXJyb3IodSgxMDIsYykpO0xhW2NdPWQ7Yj0hMH19YiYmTWEoKX12YXIgVGE9IShcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnR8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpLFVhPW51bGwsVmE9bnVsbCxXYT1udWxsO1xuZnVuY3Rpb24gWGEoYSl7aWYoYT1tYShhKSl7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIFVhKXRocm93IEVycm9yKHUoMjgwKSk7dmFyIGI9YS5zdGF0ZU5vZGU7YiYmKGI9bGEoYiksVWEoYS5zdGF0ZU5vZGUsYS50eXBlLGIpKX19ZnVuY3Rpb24gWWEoYSl7VmE/V2E/V2EucHVzaChhKTpXYT1bYV06VmE9YX1mdW5jdGlvbiBaYSgpe2lmKFZhKXt2YXIgYT1WYSxiPVdhO1dhPVZhPW51bGw7WGEoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKVhhKGJbYV0pfX1mdW5jdGlvbiAkYShhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIGFiKGEsYixjLGQsZSl7cmV0dXJuIGEoYixjLGQsZSl9ZnVuY3Rpb24gYmIoKXt9dmFyIGNiPSRhLGRiPSExLGViPSExO2Z1bmN0aW9uIGZiKCl7aWYobnVsbCE9PVZhfHxudWxsIT09V2EpYmIoKSxaYSgpfVxuZnVuY3Rpb24gZ2IoYSxiLGMpe2lmKGViKXJldHVybiBhKGIsYyk7ZWI9ITA7dHJ5e3JldHVybiBjYihhLGIsYyl9ZmluYWxseXtlYj0hMSxmYigpfX12YXIgaGI9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLGliPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksamI9e30sa2I9e307XG5mdW5jdGlvbiBsYihhKXtpZihpYi5jYWxsKGtiLGEpKXJldHVybiEwO2lmKGliLmNhbGwoamIsYSkpcmV0dXJuITE7aWYoaGIudGVzdChhKSlyZXR1cm4ga2JbYV09ITA7amJbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gbWIoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBuYihhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxtYihhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIEMoYSxiLGMsZCxlLGYpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWI7dGhpcy5zYW5pdGl6ZVVSTD1mfXZhciBFPXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtFW2FdPW5ldyBDKGEsMCwhMSxhLG51bGwsITEpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO0VbYl09bmV3IEMoYiwxLCExLGFbMV0sbnVsbCwhMSl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtFW2FdPW5ldyBDKGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtFW2FdPW5ldyBDKGEsMiwhMSxhLG51bGwsITEpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtFW2FdPW5ldyBDKGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTtcbltcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtFW2FdPW5ldyBDKGEsMywhMCxhLG51bGwsITEpfSk7W1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtFW2FdPW5ldyBDKGEsNCwhMSxhLG51bGwsITEpfSk7W1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0VbYV09bmV3IEMoYSw2LCExLGEsbnVsbCwhMSl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0VbYV09bmV3IEMoYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO3ZhciBvYj0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIHBiKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cImFjY2VudC1oZWlnaHQgYWxpZ25tZW50LWJhc2VsaW5lIGFyYWJpYy1mb3JtIGJhc2VsaW5lLXNoaWZ0IGNhcC1oZWlnaHQgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBkb21pbmFudC1iYXNlbGluZSBlbmFibGUtYmFja2dyb3VuZCBmaWxsLW9wYWNpdHkgZmlsbC1ydWxlIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBob3Jpei1hZHYteCBob3Jpei1vcmlnaW4teCBpbWFnZS1yZW5kZXJpbmcgbGV0dGVyLXNwYWNpbmcgbGlnaHRpbmctY29sb3IgbWFya2VyLWVuZCBtYXJrZXItbWlkIG1hcmtlci1zdGFydCBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFpbnQtb3JkZXIgcGFub3NlLTEgcG9pbnRlci1ldmVudHMgcmVuZGVyaW5nLWludGVudCBzaGFwZS1yZW5kZXJpbmcgc3RvcC1jb2xvciBzdG9wLW9wYWNpdHkgc3RyaWtldGhyb3VnaC1wb3NpdGlvbiBzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHVuZGVybGluZS1wb3NpdGlvbiB1bmRlcmxpbmUtdGhpY2tuZXNzIHVuaWNvZGUtYmlkaSB1bmljb2RlLXJhbmdlIHVuaXRzLXBlci1lbSB2LWFscGhhYmV0aWMgdi1oYW5naW5nIHYtaWRlb2dyYXBoaWMgdi1tYXRoZW1hdGljYWwgdmVjdG9yLWVmZmVjdCB2ZXJ0LWFkdi15IHZlcnQtb3JpZ2luLXggdmVydC1vcmlnaW4teSB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHhtbG5zOnhsaW5rIHgtaGVpZ2h0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKG9iLFxucGIpO0VbYl09bmV3IEMoYiwxLCExLGEsbnVsbCwhMSl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShvYixwYik7RVtiXT1uZXcgQyhiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMSl9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShvYixwYik7RVtiXT1uZXcgQyhiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLCExKX0pO1tcInRhYkluZGV4XCIsXCJjcm9zc09yaWdpblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0VbYV09bmV3IEMoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO1xuRS54bGlua0hyZWY9bmV3IEMoXCJ4bGlua0hyZWZcIiwxLCExLFwieGxpbms6aHJlZlwiLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCEwKTtbXCJzcmNcIixcImhyZWZcIixcImFjdGlvblwiLFwiZm9ybUFjdGlvblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0VbYV09bmV3IEMoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCEwKX0pO1xuZnVuY3Rpb24gcWIoYSxiLGMsZCl7dmFyIGU9RS5oYXNPd25Qcm9wZXJ0eShiKT9FW2JdOm51bGw7dmFyIGY9bnVsbCE9PWU/MD09PWUudHlwZTpkPyExOiEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXT8hMTohMDtmfHwobmIoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP2xiKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKSl9XG5mdW5jdGlvbiByYihhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19ZnVuY3Rpb24gc2IoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIHRiKGEpe3ZhciBiPXNiKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiB4YihhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9dGIoYSkpfWZ1bmN0aW9uIHliKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1zYihhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfWZ1bmN0aW9uIHpiKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBuKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1cbmZ1bmN0aW9uIEFiKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPXJiKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24gQmIoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZxYihhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24gQ2IoYSxiKXtCYihhLGIpO3ZhciBjPXJiKGIudmFsdWUpLGQ9Yi50eXBlO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWQpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7ZWxzZSBpZihcInN1Ym1pdFwiPT09ZHx8XCJyZXNldFwiPT09ZCl7YS5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtyZXR1cm59Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpP0RiKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJkRiKGEsYi50eXBlLHJiKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gRWIoYSxiLGMpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSl7dmFyIGQ9Yi50eXBlO2lmKCEoXCJzdWJtaXRcIiE9PWQmJlwicmVzZXRcIiE9PWR8fHZvaWQgMCE9PWIudmFsdWUmJm51bGwhPT1iLnZhbHVlKSlyZXR1cm47Yj1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7Y3x8Yj09PWEudmFsdWV8fChhLnZhbHVlPWIpO2EuZGVmYXVsdFZhbHVlPWJ9Yz1hLm5hbWU7XCJcIiE9PWMmJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hIWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZDtcIlwiIT09YyYmKGEubmFtZT1jKX1cbmZ1bmN0aW9uIERiKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8YS5vd25lckRvY3VtZW50LmFjdGl2ZUVsZW1lbnQhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX1mdW5jdGlvbiBGYihhKXt2YXIgYj1cIlwiO2FhLkNoaWxkcmVuLmZvckVhY2goYSxmdW5jdGlvbihhKXtudWxsIT1hJiYoYis9YSl9KTtyZXR1cm4gYn1mdW5jdGlvbiBHYihhLGIpe2E9bih7Y2hpbGRyZW46dm9pZCAwfSxiKTtpZihiPUZiKGIuY2hpbGRyZW4pKWEuY2hpbGRyZW49YjtyZXR1cm4gYX1cbmZ1bmN0aW9uIEhiKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIityYihjKTtiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gSWIoYSxiKXtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXRocm93IEVycm9yKHUoOTEpKTtyZXR1cm4gbih7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBKYihhLGIpe3ZhciBjPWIudmFsdWU7aWYobnVsbD09Yyl7Yz1iLmNoaWxkcmVuO2I9Yi5kZWZhdWx0VmFsdWU7aWYobnVsbCE9Yyl7aWYobnVsbCE9Yil0aHJvdyBFcnJvcih1KDkyKSk7aWYoQXJyYXkuaXNBcnJheShjKSl7aWYoISgxPj1jLmxlbmd0aCkpdGhyb3cgRXJyb3IodSg5MykpO2M9Y1swXX1iPWN9bnVsbD09YiYmKGI9XCJcIik7Yz1ifWEuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOnJiKGMpfX1cbmZ1bmN0aW9uIEtiKGEsYil7dmFyIGM9cmIoYi52YWx1ZSksZD1yYihiLmRlZmF1bHRWYWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1jJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWQmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2QpfWZ1bmN0aW9uIExiKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJlwiXCIhPT1iJiZudWxsIT09YiYmKGEudmFsdWU9Yil9dmFyIE1iPXtodG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifTtcbmZ1bmN0aW9uIE5iKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19ZnVuY3Rpb24gT2IoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP05iKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIFBiLFFiPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihhLm5hbWVzcGFjZVVSSSE9PU1iLnN2Z3x8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle1BiPVBifHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1BiLmlubmVySFRNTD1cIjxzdmc+XCIrYi52YWx1ZU9mKCkudG9TdHJpbmcoKStcIjwvc3ZnPlwiO2ZvcihiPVBiLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIFJiKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9ZnVuY3Rpb24gU2IoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgVGI9e2FuaW1hdGlvbmVuZDpTYihcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpTYihcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OlNiKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOlNiKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sVWI9e30sVmI9e307XG5UYSYmKFZiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIFRiLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIFRiLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIFRiLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIFRiLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gV2IoYSl7aWYoVWJbYV0pcmV0dXJuIFViW2FdO2lmKCFUYlthXSlyZXR1cm4gYTt2YXIgYj1UYlthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBWYilyZXR1cm4gVWJbYV09YltjXTtyZXR1cm4gYX1cbnZhciBYYj1XYihcImFuaW1hdGlvbmVuZFwiKSxZYj1XYihcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxaYj1XYihcImFuaW1hdGlvbnN0YXJ0XCIpLCRiPVdiKFwidHJhbnNpdGlvbmVuZFwiKSxhYz1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2Ugc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksYmM9bmV3IChcImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcCk7ZnVuY3Rpb24gY2MoYSl7dmFyIGI9YmMuZ2V0KGEpO3ZvaWQgMD09PWImJihiPW5ldyBNYXAsYmMuc2V0KGEsYikpO3JldHVybiBifVxuZnVuY3Rpb24gZGMoYSl7dmFyIGI9YSxjPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2E9YjtkbyBiPWEsMCE9PShiLmVmZmVjdFRhZyYxMDI2KSYmKGM9Yi5yZXR1cm4pLGE9Yi5yZXR1cm47d2hpbGUoYSl9cmV0dXJuIDM9PT1iLnRhZz9jOm51bGx9ZnVuY3Rpb24gZWMoYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9YS5tZW1vaXplZFN0YXRlO251bGw9PT1iJiYoYT1hLmFsdGVybmF0ZSxudWxsIT09YSYmKGI9YS5tZW1vaXplZFN0YXRlKSk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZGVoeWRyYXRlZH1yZXR1cm4gbnVsbH1mdW5jdGlvbiBmYyhhKXtpZihkYyhhKSE9PWEpdGhyb3cgRXJyb3IodSgxODgpKTt9XG5mdW5jdGlvbiBnYyhhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYil7Yj1kYyhhKTtpZihudWxsPT09Yil0aHJvdyBFcnJvcih1KDE4OCkpO3JldHVybiBiIT09YT9udWxsOmF9Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuO2lmKG51bGw9PT1lKWJyZWFrO3ZhciBmPWUuYWx0ZXJuYXRlO2lmKG51bGw9PT1mKXtkPWUucmV0dXJuO2lmKG51bGwhPT1kKXtjPWQ7Y29udGludWV9YnJlYWt9aWYoZS5jaGlsZD09PWYuY2hpbGQpe2ZvcihmPWUuY2hpbGQ7Zjspe2lmKGY9PT1jKXJldHVybiBmYyhlKSxhO2lmKGY9PT1kKXJldHVybiBmYyhlKSxiO2Y9Zi5zaWJsaW5nfXRocm93IEVycm9yKHUoMTg4KSk7fWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2Zvcih2YXIgZz0hMSxoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PVxuYyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpdGhyb3cgRXJyb3IodSgxODkpKTt9fWlmKGMuYWx0ZXJuYXRlIT09ZCl0aHJvdyBFcnJvcih1KDE5MCkpO31pZigzIT09Yy50YWcpdGhyb3cgRXJyb3IodSgxODgpKTtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIGhjKGEpe2E9Z2MoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCliLmNoaWxkLnJldHVybj1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBpYyhhLGIpe2lmKG51bGw9PWIpdGhyb3cgRXJyb3IodSgzMCkpO2lmKG51bGw9PWEpcmV0dXJuIGI7aWYoQXJyYXkuaXNBcnJheShhKSl7aWYoQXJyYXkuaXNBcnJheShiKSlyZXR1cm4gYS5wdXNoLmFwcGx5KGEsYiksYTthLnB1c2goYik7cmV0dXJuIGF9cmV0dXJuIEFycmF5LmlzQXJyYXkoYik/W2FdLmNvbmNhdChiKTpbYSxiXX1mdW5jdGlvbiBqYyhhLGIsYyl7QXJyYXkuaXNBcnJheShhKT9hLmZvckVhY2goYixjKTphJiZiLmNhbGwoYyxhKX12YXIga2M9bnVsbDtcbmZ1bmN0aW9uIGxjKGEpe2lmKGEpe3ZhciBiPWEuX2Rpc3BhdGNoTGlzdGVuZXJzLGM9YS5fZGlzcGF0Y2hJbnN0YW5jZXM7aWYoQXJyYXkuaXNBcnJheShiKSlmb3IodmFyIGQ9MDtkPGIubGVuZ3RoJiYhYS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpO2QrKylvYShhLGJbZF0sY1tkXSk7ZWxzZSBiJiZvYShhLGIsYyk7YS5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbDthLl9kaXNwYXRjaEluc3RhbmNlcz1udWxsO2EuaXNQZXJzaXN0ZW50KCl8fGEuY29uc3RydWN0b3IucmVsZWFzZShhKX19ZnVuY3Rpb24gbWMoYSl7bnVsbCE9PWEmJihrYz1pYyhrYyxhKSk7YT1rYztrYz1udWxsO2lmKGEpe2pjKGEsbGMpO2lmKGtjKXRocm93IEVycm9yKHUoOTUpKTtpZihmYSl0aHJvdyBhPWhhLGZhPSExLGhhPW51bGwsYTt9fVxuZnVuY3Rpb24gbmMoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfWZ1bmN0aW9uIG9jKGEpe2lmKCFUYSlyZXR1cm4hMTthPVwib25cIithO3ZhciBiPWEgaW4gZG9jdW1lbnQ7Ynx8KGI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxiLnNldEF0dHJpYnV0ZShhLFwicmV0dXJuO1wiKSxiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBiW2FdKTtyZXR1cm4gYn12YXIgcGM9W107ZnVuY3Rpb24gcWMoYSl7YS50b3BMZXZlbFR5cGU9bnVsbDthLm5hdGl2ZUV2ZW50PW51bGw7YS50YXJnZXRJbnN0PW51bGw7YS5hbmNlc3RvcnMubGVuZ3RoPTA7MTA+cGMubGVuZ3RoJiZwYy5wdXNoKGEpfVxuZnVuY3Rpb24gcmMoYSxiLGMsZCl7aWYocGMubGVuZ3RoKXt2YXIgZT1wYy5wb3AoKTtlLnRvcExldmVsVHlwZT1hO2UuZXZlbnRTeXN0ZW1GbGFncz1kO2UubmF0aXZlRXZlbnQ9YjtlLnRhcmdldEluc3Q9YztyZXR1cm4gZX1yZXR1cm57dG9wTGV2ZWxUeXBlOmEsZXZlbnRTeXN0ZW1GbGFnczpkLG5hdGl2ZUV2ZW50OmIsdGFyZ2V0SW5zdDpjLGFuY2VzdG9yczpbXX19XG5mdW5jdGlvbiBzYyhhKXt2YXIgYj1hLnRhcmdldEluc3QsYz1iO2Rve2lmKCFjKXthLmFuY2VzdG9ycy5wdXNoKGMpO2JyZWFrfXZhciBkPWM7aWYoMz09PWQudGFnKWQ9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlbHNle2Zvcig7ZC5yZXR1cm47KWQ9ZC5yZXR1cm47ZD0zIT09ZC50YWc/bnVsbDpkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvfWlmKCFkKWJyZWFrO2I9Yy50YWc7NSE9PWImJjYhPT1ifHxhLmFuY2VzdG9ycy5wdXNoKGMpO2M9dGMoZCl9d2hpbGUoYyk7Zm9yKGM9MDtjPGEuYW5jZXN0b3JzLmxlbmd0aDtjKyspe2I9YS5hbmNlc3RvcnNbY107dmFyIGU9bmMoYS5uYXRpdmVFdmVudCk7ZD1hLnRvcExldmVsVHlwZTt2YXIgZj1hLm5hdGl2ZUV2ZW50LGc9YS5ldmVudFN5c3RlbUZsYWdzOzA9PT1jJiYoZ3w9NjQpO2Zvcih2YXIgaD1udWxsLGs9MDtrPE5hLmxlbmd0aDtrKyspe3ZhciBsPU5hW2tdO2wmJihsPWwuZXh0cmFjdEV2ZW50cyhkLGIsZixlLGcpKSYmKGg9XG5pYyhoLGwpKX1tYyhoKX19ZnVuY3Rpb24gdWMoYSxiLGMpe2lmKCFjLmhhcyhhKSl7c3dpdGNoKGEpe2Nhc2UgXCJzY3JvbGxcIjp2YyhiLFwic2Nyb2xsXCIsITApO2JyZWFrO2Nhc2UgXCJmb2N1c1wiOmNhc2UgXCJibHVyXCI6dmMoYixcImZvY3VzXCIsITApO3ZjKGIsXCJibHVyXCIsITApO2Muc2V0KFwiYmx1clwiLG51bGwpO2Muc2V0KFwiZm9jdXNcIixudWxsKTticmVhaztjYXNlIFwiY2FuY2VsXCI6Y2FzZSBcImNsb3NlXCI6b2MoYSkmJnZjKGIsYSwhMCk7YnJlYWs7Y2FzZSBcImludmFsaWRcIjpjYXNlIFwic3VibWl0XCI6Y2FzZSBcInJlc2V0XCI6YnJlYWs7ZGVmYXVsdDotMT09PWFjLmluZGV4T2YoYSkmJkYoYSxiKX1jLnNldChhLG51bGwpfX1cbnZhciB3Yyx4Yyx5Yyx6Yz0hMSxBYz1bXSxCYz1udWxsLENjPW51bGwsRGM9bnVsbCxFYz1uZXcgTWFwLEZjPW5ldyBNYXAsR2M9W10sSGM9XCJtb3VzZWRvd24gbW91c2V1cCB0b3VjaGNhbmNlbCB0b3VjaGVuZCB0b3VjaHN0YXJ0IGF1eGNsaWNrIGRibGNsaWNrIHBvaW50ZXJjYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlcnVwIGRyYWdlbmQgZHJhZ3N0YXJ0IGRyb3AgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIGlucHV0IHRleHRJbnB1dCBjbG9zZSBjYW5jZWwgY29weSBjdXQgcGFzdGUgY2xpY2sgY2hhbmdlIGNvbnRleHRtZW51IHJlc2V0IHN1Ym1pdFwiLnNwbGl0KFwiIFwiKSxJYz1cImZvY3VzIGJsdXIgZHJhZ2VudGVyIGRyYWdsZWF2ZSBtb3VzZW92ZXIgbW91c2VvdXQgcG9pbnRlcm92ZXIgcG9pbnRlcm91dCBnb3Rwb2ludGVyY2FwdHVyZSBsb3N0cG9pbnRlcmNhcHR1cmVcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiBKYyhhLGIpe3ZhciBjPWNjKGIpO0hjLmZvckVhY2goZnVuY3Rpb24oYSl7dWMoYSxiLGMpfSk7SWMuZm9yRWFjaChmdW5jdGlvbihhKXt1YyhhLGIsYyl9KX1mdW5jdGlvbiBLYyhhLGIsYyxkLGUpe3JldHVybntibG9ja2VkT246YSx0b3BMZXZlbFR5cGU6YixldmVudFN5c3RlbUZsYWdzOmN8MzIsbmF0aXZlRXZlbnQ6ZSxjb250YWluZXI6ZH19XG5mdW5jdGlvbiBMYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNcIjpjYXNlIFwiYmx1clwiOkJjPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpDYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjpEYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6RWMuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6RmMuZGVsZXRlKGIucG9pbnRlcklkKX19ZnVuY3Rpb24gTWMoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hfHxhLm5hdGl2ZUV2ZW50IT09ZilyZXR1cm4gYT1LYyhiLGMsZCxlLGYpLG51bGwhPT1iJiYoYj1OYyhiKSxudWxsIT09YiYmeGMoYikpLGE7YS5ldmVudFN5c3RlbUZsYWdzfD1kO3JldHVybiBhfVxuZnVuY3Rpb24gT2MoYSxiLGMsZCxlKXtzd2l0Y2goYil7Y2FzZSBcImZvY3VzXCI6cmV0dXJuIEJjPU1jKEJjLGEsYixjLGQsZSksITA7Y2FzZSBcImRyYWdlbnRlclwiOnJldHVybiBDYz1NYyhDYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJtb3VzZW92ZXJcIjpyZXR1cm4gRGM9TWMoRGMsYSxiLGMsZCxlKSwhMDtjYXNlIFwicG9pbnRlcm92ZXJcIjp2YXIgZj1lLnBvaW50ZXJJZDtFYy5zZXQoZixNYyhFYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSk7cmV0dXJuITA7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6cmV0dXJuIGY9ZS5wb2ludGVySWQsRmMuc2V0KGYsTWMoRmMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpLCEwfXJldHVybiExfVxuZnVuY3Rpb24gUGMoYSl7dmFyIGI9dGMoYS50YXJnZXQpO2lmKG51bGwhPT1iKXt2YXIgYz1kYyhiKTtpZihudWxsIT09YylpZihiPWMudGFnLDEzPT09Yil7aWYoYj1lYyhjKSxudWxsIT09Yil7YS5ibG9ja2VkT249YjtyLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShhLnByaW9yaXR5LGZ1bmN0aW9uKCl7eWMoYyl9KTtyZXR1cm59fWVsc2UgaWYoMz09PWImJmMuc3RhdGVOb2RlLmh5ZHJhdGUpe2EuYmxvY2tlZE9uPTM9PT1jLnRhZz9jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7cmV0dXJufX1hLmJsb2NrZWRPbj1udWxsfWZ1bmN0aW9uIFFjKGEpe2lmKG51bGwhPT1hLmJsb2NrZWRPbilyZXR1cm4hMTt2YXIgYj1SYyhhLnRvcExldmVsVHlwZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYS5jb250YWluZXIsYS5uYXRpdmVFdmVudCk7aWYobnVsbCE9PWIpe3ZhciBjPU5jKGIpO251bGwhPT1jJiZ4YyhjKTthLmJsb2NrZWRPbj1iO3JldHVybiExfXJldHVybiEwfVxuZnVuY3Rpb24gU2MoYSxiLGMpe1FjKGEpJiZjLmRlbGV0ZShiKX1mdW5jdGlvbiBUYygpe2Zvcih6Yz0hMTswPEFjLmxlbmd0aDspe3ZhciBhPUFjWzBdO2lmKG51bGwhPT1hLmJsb2NrZWRPbil7YT1OYyhhLmJsb2NrZWRPbik7bnVsbCE9PWEmJndjKGEpO2JyZWFrfXZhciBiPVJjKGEudG9wTGV2ZWxUeXBlLGEuZXZlbnRTeXN0ZW1GbGFncyxhLmNvbnRhaW5lcixhLm5hdGl2ZUV2ZW50KTtudWxsIT09Yj9hLmJsb2NrZWRPbj1iOkFjLnNoaWZ0KCl9bnVsbCE9PUJjJiZRYyhCYykmJihCYz1udWxsKTtudWxsIT09Q2MmJlFjKENjKSYmKENjPW51bGwpO251bGwhPT1EYyYmUWMoRGMpJiYoRGM9bnVsbCk7RWMuZm9yRWFjaChTYyk7RmMuZm9yRWFjaChTYyl9ZnVuY3Rpb24gVWMoYSxiKXthLmJsb2NrZWRPbj09PWImJihhLmJsb2NrZWRPbj1udWxsLHpjfHwoemM9ITAsci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKHIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksVGMpKSl9XG5mdW5jdGlvbiBWYyhhKXtmdW5jdGlvbiBiKGIpe3JldHVybiBVYyhiLGEpfWlmKDA8QWMubGVuZ3RoKXtVYyhBY1swXSxhKTtmb3IodmFyIGM9MTtjPEFjLmxlbmd0aDtjKyspe3ZhciBkPUFjW2NdO2QuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpfX1udWxsIT09QmMmJlVjKEJjLGEpO251bGwhPT1DYyYmVWMoQ2MsYSk7bnVsbCE9PURjJiZVYyhEYyxhKTtFYy5mb3JFYWNoKGIpO0ZjLmZvckVhY2goYik7Zm9yKGM9MDtjPEdjLmxlbmd0aDtjKyspZD1HY1tjXSxkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKTtmb3IoOzA8R2MubGVuZ3RoJiYoYz1HY1swXSxudWxsPT09Yy5ibG9ja2VkT24pOylQYyhjKSxudWxsPT09Yy5ibG9ja2VkT24mJkdjLnNoaWZ0KCl9XG52YXIgV2M9e30sWWM9bmV3IE1hcCxaYz1uZXcgTWFwLCRjPVtcImFib3J0XCIsXCJhYm9ydFwiLFhiLFwiYW5pbWF0aW9uRW5kXCIsWWIsXCJhbmltYXRpb25JdGVyYXRpb25cIixaYixcImFuaW1hdGlvblN0YXJ0XCIsXCJjYW5wbGF5XCIsXCJjYW5QbGF5XCIsXCJjYW5wbGF5dGhyb3VnaFwiLFwiY2FuUGxheVRocm91Z2hcIixcImR1cmF0aW9uY2hhbmdlXCIsXCJkdXJhdGlvbkNoYW5nZVwiLFwiZW1wdGllZFwiLFwiZW1wdGllZFwiLFwiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIixcImVuZGVkXCIsXCJlbmRlZFwiLFwiZXJyb3JcIixcImVycm9yXCIsXCJnb3Rwb2ludGVyY2FwdHVyZVwiLFwiZ290UG9pbnRlckNhcHR1cmVcIixcImxvYWRcIixcImxvYWRcIixcImxvYWRlZGRhdGFcIixcImxvYWRlZERhdGFcIixcImxvYWRlZG1ldGFkYXRhXCIsXCJsb2FkZWRNZXRhZGF0YVwiLFwibG9hZHN0YXJ0XCIsXCJsb2FkU3RhcnRcIixcImxvc3Rwb2ludGVyY2FwdHVyZVwiLFwibG9zdFBvaW50ZXJDYXB0dXJlXCIsXCJwbGF5aW5nXCIsXCJwbGF5aW5nXCIsXCJwcm9ncmVzc1wiLFwicHJvZ3Jlc3NcIixcInNlZWtpbmdcIixcblwic2Vla2luZ1wiLFwic3RhbGxlZFwiLFwic3RhbGxlZFwiLFwic3VzcGVuZFwiLFwic3VzcGVuZFwiLFwidGltZXVwZGF0ZVwiLFwidGltZVVwZGF0ZVwiLCRiLFwidHJhbnNpdGlvbkVuZFwiLFwid2FpdGluZ1wiLFwid2FpdGluZ1wiXTtmdW5jdGlvbiBhZChhLGIpe2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7Yys9Mil7dmFyIGQ9YVtjXSxlPWFbYysxXSxmPVwib25cIisoZVswXS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSkpO2Y9e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOmYsY2FwdHVyZWQ6ZitcIkNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltkXSxldmVudFByaW9yaXR5OmJ9O1pjLnNldChkLGIpO1ljLnNldChkLGYpO1djW2VdPWZ9fVxuYWQoXCJibHVyIGJsdXIgY2FuY2VsIGNhbmNlbCBjbGljayBjbGljayBjbG9zZSBjbG9zZSBjb250ZXh0bWVudSBjb250ZXh0TWVudSBjb3B5IGNvcHkgY3V0IGN1dCBhdXhjbGljayBhdXhDbGljayBkYmxjbGljayBkb3VibGVDbGljayBkcmFnZW5kIGRyYWdFbmQgZHJhZ3N0YXJ0IGRyYWdTdGFydCBkcm9wIGRyb3AgZm9jdXMgZm9jdXMgaW5wdXQgaW5wdXQgaW52YWxpZCBpbnZhbGlkIGtleWRvd24ga2V5RG93biBrZXlwcmVzcyBrZXlQcmVzcyBrZXl1cCBrZXlVcCBtb3VzZWRvd24gbW91c2VEb3duIG1vdXNldXAgbW91c2VVcCBwYXN0ZSBwYXN0ZSBwYXVzZSBwYXVzZSBwbGF5IHBsYXkgcG9pbnRlcmNhbmNlbCBwb2ludGVyQ2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJEb3duIHBvaW50ZXJ1cCBwb2ludGVyVXAgcmF0ZWNoYW5nZSByYXRlQ2hhbmdlIHJlc2V0IHJlc2V0IHNlZWtlZCBzZWVrZWQgc3VibWl0IHN1Ym1pdCB0b3VjaGNhbmNlbCB0b3VjaENhbmNlbCB0b3VjaGVuZCB0b3VjaEVuZCB0b3VjaHN0YXJ0IHRvdWNoU3RhcnQgdm9sdW1lY2hhbmdlIHZvbHVtZUNoYW5nZVwiLnNwbGl0KFwiIFwiKSwwKTtcbmFkKFwiZHJhZyBkcmFnIGRyYWdlbnRlciBkcmFnRW50ZXIgZHJhZ2V4aXQgZHJhZ0V4aXQgZHJhZ2xlYXZlIGRyYWdMZWF2ZSBkcmFnb3ZlciBkcmFnT3ZlciBtb3VzZW1vdmUgbW91c2VNb3ZlIG1vdXNlb3V0IG1vdXNlT3V0IG1vdXNlb3ZlciBtb3VzZU92ZXIgcG9pbnRlcm1vdmUgcG9pbnRlck1vdmUgcG9pbnRlcm91dCBwb2ludGVyT3V0IHBvaW50ZXJvdmVyIHBvaW50ZXJPdmVyIHNjcm9sbCBzY3JvbGwgdG9nZ2xlIHRvZ2dsZSB0b3VjaG1vdmUgdG91Y2hNb3ZlIHdoZWVsIHdoZWVsXCIuc3BsaXQoXCIgXCIpLDEpO2FkKCRjLDIpO2Zvcih2YXIgYmQ9XCJjaGFuZ2Ugc2VsZWN0aW9uY2hhbmdlIHRleHRJbnB1dCBjb21wb3NpdGlvbnN0YXJ0IGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9udXBkYXRlXCIuc3BsaXQoXCIgXCIpLGNkPTA7Y2Q8YmQubGVuZ3RoO2NkKyspWmMuc2V0KGJkW2NkXSwwKTtcbnZhciBkZD1yLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LGVkPXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5LGZkPSEwO2Z1bmN0aW9uIEYoYSxiKXt2YyhiLGEsITEpfWZ1bmN0aW9uIHZjKGEsYixjKXt2YXIgZD1aYy5nZXQoYik7c3dpdGNoKHZvaWQgMD09PWQ/MjpkKXtjYXNlIDA6ZD1nZC5iaW5kKG51bGwsYiwxLGEpO2JyZWFrO2Nhc2UgMTpkPWhkLmJpbmQobnVsbCxiLDEsYSk7YnJlYWs7ZGVmYXVsdDpkPWlkLmJpbmQobnVsbCxiLDEsYSl9Yz9hLmFkZEV2ZW50TGlzdGVuZXIoYixkLCEwKTphLmFkZEV2ZW50TGlzdGVuZXIoYixkLCExKX1mdW5jdGlvbiBnZChhLGIsYyxkKXtkYnx8YmIoKTt2YXIgZT1pZCxmPWRiO2RiPSEwO3RyeXthYihlLGEsYixjLGQpfWZpbmFsbHl7KGRiPWYpfHxmYigpfX1mdW5jdGlvbiBoZChhLGIsYyxkKXtlZChkZCxpZC5iaW5kKG51bGwsYSxiLGMsZCkpfVxuZnVuY3Rpb24gaWQoYSxiLGMsZCl7aWYoZmQpaWYoMDxBYy5sZW5ndGgmJi0xPEhjLmluZGV4T2YoYSkpYT1LYyhudWxsLGEsYixjLGQpLEFjLnB1c2goYSk7ZWxzZXt2YXIgZT1SYyhhLGIsYyxkKTtpZihudWxsPT09ZSlMYyhhLGQpO2Vsc2UgaWYoLTE8SGMuaW5kZXhPZihhKSlhPUtjKGUsYSxiLGMsZCksQWMucHVzaChhKTtlbHNlIGlmKCFPYyhlLGEsYixjLGQpKXtMYyhhLGQpO2E9cmMoYSxkLG51bGwsYik7dHJ5e2diKHNjLGEpfWZpbmFsbHl7cWMoYSl9fX19XG5mdW5jdGlvbiBSYyhhLGIsYyxkKXtjPW5jKGQpO2M9dGMoYyk7aWYobnVsbCE9PWMpe3ZhciBlPWRjKGMpO2lmKG51bGw9PT1lKWM9bnVsbDtlbHNle3ZhciBmPWUudGFnO2lmKDEzPT09Zil7Yz1lYyhlKTtpZihudWxsIT09YylyZXR1cm4gYztjPW51bGx9ZWxzZSBpZigzPT09Zil7aWYoZS5zdGF0ZU5vZGUuaHlkcmF0ZSlyZXR1cm4gMz09PWUudGFnP2Uuc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtjPW51bGx9ZWxzZSBlIT09YyYmKGM9bnVsbCl9fWE9cmMoYSxkLGMsYik7dHJ5e2diKHNjLGEpfWZpbmFsbHl7cWMoYSl9cmV0dXJuIG51bGx9XG52YXIgamQ9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZEFyZWE6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwLGZpbGxPcGFjaXR5OiEwLFxuZmxvb2RPcGFjaXR5OiEwLHN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0sa2Q9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKGpkKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe2tkLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7amRbYl09amRbYV19KX0pO2Z1bmN0aW9uIGxkKGEsYixjKXtyZXR1cm4gbnVsbD09Ynx8XCJib29sZWFuXCI9PT10eXBlb2YgYnx8XCJcIj09PWI/XCJcIjpjfHxcIm51bWJlclwiIT09dHlwZW9mIGJ8fDA9PT1ifHxqZC5oYXNPd25Qcm9wZXJ0eShhKSYmamRbYV0/KFwiXCIrYikudHJpbSgpOmIrXCJweFwifVxuZnVuY3Rpb24gbWQoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpLGU9bGQoYyxiW2NdLGQpO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgbmQ9bih7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIG9kKGEsYil7aWYoYil7aWYobmRbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcih1KDEzNyxhLFwiXCIpKTtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXtpZihudWxsIT1iLmNoaWxkcmVuKXRocm93IEVycm9yKHUoNjApKTtpZighKFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHUoNjEpKTt9aWYobnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlKXRocm93IEVycm9yKHUoNjIsXCJcIikpO319XG5mdW5jdGlvbiBwZChhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19dmFyIHFkPU1iLmh0bWw7ZnVuY3Rpb24gcmQoYSxiKXthPTk9PT1hLm5vZGVUeXBlfHwxMT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQ7dmFyIGM9Y2MoYSk7Yj1SYVtiXTtmb3IodmFyIGQ9MDtkPGIubGVuZ3RoO2QrKyl1YyhiW2RdLGEsYyl9ZnVuY3Rpb24gc2QoKXt9XG5mdW5jdGlvbiB0ZChhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19ZnVuY3Rpb24gdWQoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfWZ1bmN0aW9uIHZkKGEsYil7dmFyIGM9dWQoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9dWQoYyl9fVxuZnVuY3Rpb24gd2QoYSxiKXtyZXR1cm4gYSYmYj9hPT09Yj8hMDphJiYzPT09YS5ub2RlVHlwZT8hMTpiJiYzPT09Yi5ub2RlVHlwZT93ZChhLGIucGFyZW50Tm9kZSk6XCJjb250YWluc1wiaW4gYT9hLmNvbnRhaW5zKGIpOmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24/ISEoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSYxNik6ITE6ITF9ZnVuY3Rpb24geGQoKXtmb3IodmFyIGE9d2luZG93LGI9dGQoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXt2YXIgYz1cInN0cmluZ1wiPT09dHlwZW9mIGIuY29udGVudFdpbmRvdy5sb2NhdGlvbi5ocmVmfWNhdGNoKGQpe2M9ITF9aWYoYylhPWIuY29udGVudFdpbmRvdztlbHNlIGJyZWFrO2I9dGQoYS5kb2N1bWVudCl9cmV0dXJuIGJ9XG5mdW5jdGlvbiB5ZChhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiYoXCJ0ZXh0XCI9PT1hLnR5cGV8fFwic2VhcmNoXCI9PT1hLnR5cGV8fFwidGVsXCI9PT1hLnR5cGV8fFwidXJsXCI9PT1hLnR5cGV8fFwicGFzc3dvcmRcIj09PWEudHlwZSl8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfXZhciB6ZD1cIiRcIixBZD1cIi8kXCIsQmQ9XCIkP1wiLENkPVwiJCFcIixEZD1udWxsLEVkPW51bGw7ZnVuY3Rpb24gRmQoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpyZXR1cm4hIWIuYXV0b0ZvY3VzfXJldHVybiExfVxuZnVuY3Rpb24gR2QoYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcIm9wdGlvblwiPT09YXx8XCJub3NjcmlwdFwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfXZhciBIZD1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnZvaWQgMCxJZD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDA7ZnVuY3Rpb24gSmQoYSl7Zm9yKDtudWxsIT1hO2E9YS5uZXh0U2libGluZyl7dmFyIGI9YS5ub2RlVHlwZTtpZigxPT09Ynx8Mz09PWIpYnJlYWt9cmV0dXJuIGF9XG5mdW5jdGlvbiBLZChhKXthPWEucHJldmlvdXNTaWJsaW5nO2Zvcih2YXIgYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKGM9PT16ZHx8Yz09PUNkfHxjPT09QmQpe2lmKDA9PT1iKXJldHVybiBhO2ItLX1lbHNlIGM9PT1BZCYmYisrfWE9YS5wcmV2aW91c1NpYmxpbmd9cmV0dXJuIG51bGx9dmFyIExkPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLE1kPVwiX19yZWFjdEludGVybmFsSW5zdGFuY2UkXCIrTGQsTmQ9XCJfX3JlYWN0RXZlbnRIYW5kbGVycyRcIitMZCxPZD1cIl9fcmVhY3RDb250YWluZXJlJFwiK0xkO1xuZnVuY3Rpb24gdGMoYSl7dmFyIGI9YVtNZF07aWYoYilyZXR1cm4gYjtmb3IodmFyIGM9YS5wYXJlbnROb2RlO2M7KXtpZihiPWNbT2RdfHxjW01kXSl7Yz1iLmFsdGVybmF0ZTtpZihudWxsIT09Yi5jaGlsZHx8bnVsbCE9PWMmJm51bGwhPT1jLmNoaWxkKWZvcihhPUtkKGEpO251bGwhPT1hOyl7aWYoYz1hW01kXSlyZXR1cm4gYzthPUtkKGEpfXJldHVybiBifWE9YztjPWEucGFyZW50Tm9kZX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBOYyhhKXthPWFbTWRdfHxhW09kXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWcmJjEzIT09YS50YWcmJjMhPT1hLnRhZz9udWxsOmF9ZnVuY3Rpb24gUGQoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO3Rocm93IEVycm9yKHUoMzMpKTt9ZnVuY3Rpb24gUWQoYSl7cmV0dXJuIGFbTmRdfHxudWxsfVxuZnVuY3Rpb24gUmQoYSl7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1cbmZ1bmN0aW9uIFNkKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYoIWMpcmV0dXJuIG51bGw7dmFyIGQ9bGEoYyk7aWYoIWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRW50ZXJcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2lmKGMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjKXRocm93IEVycm9yKHUoMjMxLFxuYix0eXBlb2YgYykpO3JldHVybiBjfWZ1bmN0aW9uIFRkKGEsYixjKXtpZihiPVNkKGEsYy5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lc1tiXSkpYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9aWMoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9aWMoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSl9ZnVuY3Rpb24gVWQoYSl7aWYoYSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyl7Zm9yKHZhciBiPWEuX3RhcmdldEluc3QsYz1bXTtiOyljLnB1c2goYiksYj1SZChiKTtmb3IoYj1jLmxlbmd0aDswPGItLTspVGQoY1tiXSxcImNhcHR1cmVkXCIsYSk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKylUZChjW2JdLFwiYnViYmxlZFwiLGEpfX1cbmZ1bmN0aW9uIFZkKGEsYixjKXthJiZjJiZjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJihiPVNkKGEsYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSkmJihjLl9kaXNwYXRjaExpc3RlbmVycz1pYyhjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz1pYyhjLl9kaXNwYXRjaEluc3RhbmNlcyxhKSl9ZnVuY3Rpb24gV2QoYSl7YSYmYS5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiZWZChhLl90YXJnZXRJbnN0LG51bGwsYSl9ZnVuY3Rpb24gWGQoYSl7amMoYSxVZCl9dmFyIFlkPW51bGwsWmQ9bnVsbCwkZD1udWxsO1xuZnVuY3Rpb24gYWUoKXtpZigkZClyZXR1cm4gJGQ7dmFyIGEsYj1aZCxjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiBZZD9ZZC52YWx1ZTpZZC50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiAkZD1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfWZ1bmN0aW9uIGJlKCl7cmV0dXJuITB9ZnVuY3Rpb24gY2UoKXtyZXR1cm4hMX1cbmZ1bmN0aW9uIEcoYSxiLGMsZCl7dGhpcy5kaXNwYXRjaENvbmZpZz1hO3RoaXMuX3RhcmdldEluc3Q9Yjt0aGlzLm5hdGl2ZUV2ZW50PWM7YT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtmb3IodmFyIGUgaW4gYSlhLmhhc093blByb3BlcnR5KGUpJiYoKGI9YVtlXSk/dGhpc1tlXT1iKGMpOlwidGFyZ2V0XCI9PT1lP3RoaXMudGFyZ2V0PWQ6dGhpc1tlXT1jW2VdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Yy5kZWZhdWx0UHJldmVudGVkP2MuZGVmYXVsdFByZXZlbnRlZDohMT09PWMucmV0dXJuVmFsdWUpP2JlOmNlO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9Y2U7cmV0dXJuIHRoaXN9XG5uKEcucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiYoYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9YmUpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9YmUpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7dGhpcy5pc1BlcnNpc3RlbnQ9YmV9LGlzUGVyc2lzdGVudDpjZSxkZXN0cnVjdG9yOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2UsXG5iO2ZvcihiIGluIGEpdGhpc1tiXT1udWxsO3RoaXMubmF0aXZlRXZlbnQ9dGhpcy5fdGFyZ2V0SW5zdD10aGlzLmRpc3BhdGNoQ29uZmlnPW51bGw7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD10aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1jZTt0aGlzLl9kaXNwYXRjaEluc3RhbmNlcz10aGlzLl9kaXNwYXRjaExpc3RlbmVycz1udWxsfX0pO0cuSW50ZXJmYWNlPXt0eXBlOm51bGwsdGFyZ2V0Om51bGwsY3VycmVudFRhcmdldDpmdW5jdGlvbigpe3JldHVybiBudWxsfSxldmVudFBoYXNlOm51bGwsYnViYmxlczpudWxsLGNhbmNlbGFibGU6bnVsbCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOm51bGwsaXNUcnVzdGVkOm51bGx9O1xuRy5leHRlbmQ9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYigpe31mdW5jdGlvbiBjKCl7cmV0dXJuIGQuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBkPXRoaXM7Yi5wcm90b3R5cGU9ZC5wcm90b3R5cGU7dmFyIGU9bmV3IGI7bihlLGMucHJvdG90eXBlKTtjLnByb3RvdHlwZT1lO2MucHJvdG90eXBlLmNvbnN0cnVjdG9yPWM7Yy5JbnRlcmZhY2U9bih7fSxkLkludGVyZmFjZSxhKTtjLmV4dGVuZD1kLmV4dGVuZDtkZShjKTtyZXR1cm4gY307ZGUoRyk7ZnVuY3Rpb24gZWUoYSxiLGMsZCl7aWYodGhpcy5ldmVudFBvb2wubGVuZ3RoKXt2YXIgZT10aGlzLmV2ZW50UG9vbC5wb3AoKTt0aGlzLmNhbGwoZSxhLGIsYyxkKTtyZXR1cm4gZX1yZXR1cm4gbmV3IHRoaXMoYSxiLGMsZCl9XG5mdW5jdGlvbiBmZShhKXtpZighKGEgaW5zdGFuY2VvZiB0aGlzKSl0aHJvdyBFcnJvcih1KDI3OSkpO2EuZGVzdHJ1Y3RvcigpOzEwPnRoaXMuZXZlbnRQb29sLmxlbmd0aCYmdGhpcy5ldmVudFBvb2wucHVzaChhKX1mdW5jdGlvbiBkZShhKXthLmV2ZW50UG9vbD1bXTthLmdldFBvb2xlZD1lZTthLnJlbGVhc2U9ZmV9dmFyIGdlPUcuZXh0ZW5kKHtkYXRhOm51bGx9KSxoZT1HLmV4dGVuZCh7ZGF0YTpudWxsfSksaWU9WzksMTMsMjcsMzJdLGplPVRhJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyxrZT1udWxsO1RhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJihrZT1kb2N1bWVudC5kb2N1bWVudE1vZGUpO1xudmFyIGxlPVRhJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYha2UsbWU9VGEmJighamV8fGtlJiY4PGtlJiYxMT49a2UpLG5lPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLG9lPXtiZWZvcmVJbnB1dDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkJlZm9yZUlucHV0XCIsY2FwdHVyZWQ6XCJvbkJlZm9yZUlucHV0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdfSxjb21wb3NpdGlvbkVuZDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uRW5kXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uRW5kQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uZW5kIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblN0YXJ0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25TdGFydFwiLFxuY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25VcGRhdGU6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblVwZGF0ZVwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvblVwZGF0ZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnVwZGF0ZSBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX19LHBlPSExO1xuZnVuY3Rpb24gcWUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT1pZS5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiYmx1clwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIHJlKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIHNlPSExO2Z1bmN0aW9uIHRlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiByZShiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7cGU9ITA7cmV0dXJuIG5lO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PW5lJiZwZT9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiB1ZShhLGIpe2lmKHNlKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFqZSYmcWUoYSxiKT8oYT1hZSgpLCRkPVpkPVlkPW51bGwsc2U9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIG1lJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciB2ZT17ZXZlbnRUeXBlczpvZSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlO2lmKGplKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOnZhciBmPW9lLmNvbXBvc2l0aW9uU3RhcnQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpmPW9lLmNvbXBvc2l0aW9uRW5kO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6Zj1vZS5jb21wb3NpdGlvblVwZGF0ZTticmVhayBifWY9dm9pZCAwfWVsc2Ugc2U/cWUoYSxjKSYmKGY9b2UuY29tcG9zaXRpb25FbmQpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoZj1vZS5jb21wb3NpdGlvblN0YXJ0KTtmPyhtZSYmXCJrb1wiIT09Yy5sb2NhbGUmJihzZXx8ZiE9PW9lLmNvbXBvc2l0aW9uU3RhcnQ/Zj09PW9lLmNvbXBvc2l0aW9uRW5kJiZzZSYmKGU9YWUoKSk6KFlkPWQsWmQ9XCJ2YWx1ZVwiaW4gWWQ/WWQudmFsdWU6WWQudGV4dENvbnRlbnQsc2U9ITApKSxmPWdlLmdldFBvb2xlZChmLFxuYixjLGQpLGU/Zi5kYXRhPWU6KGU9cmUoYyksbnVsbCE9PWUmJihmLmRhdGE9ZSkpLFhkKGYpLGU9Zik6ZT1udWxsOyhhPWxlP3RlKGEsYyk6dWUoYSxjKSk/KGI9aGUuZ2V0UG9vbGVkKG9lLmJlZm9yZUlucHV0LGIsYyxkKSxiLmRhdGE9YSxYZChiKSk6Yj1udWxsO3JldHVybiBudWxsPT09ZT9iOm51bGw9PT1iP2U6W2UsYl19fSx3ZT17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiB4ZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIXdlW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1cbnZhciB5ZT17Y2hhbmdlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ2hhbmdlXCIsY2FwdHVyZWQ6XCJvbkNoYW5nZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjaGFuZ2UgY2xpY2sgZm9jdXMgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fTtmdW5jdGlvbiB6ZShhLGIsYyl7YT1HLmdldFBvb2xlZCh5ZS5jaGFuZ2UsYSxiLGMpO2EudHlwZT1cImNoYW5nZVwiO1lhKGMpO1hkKGEpO3JldHVybiBhfXZhciBBZT1udWxsLEJlPW51bGw7ZnVuY3Rpb24gQ2UoYSl7bWMoYSl9ZnVuY3Rpb24gRGUoYSl7dmFyIGI9UGQoYSk7aWYoeWIoYikpcmV0dXJuIGF9ZnVuY3Rpb24gRWUoYSxiKXtpZihcImNoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgRmU9ITE7VGEmJihGZT1vYyhcImlucHV0XCIpJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpKTtcbmZ1bmN0aW9uIEdlKCl7QWUmJihBZS5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixIZSksQmU9QWU9bnVsbCl9ZnVuY3Rpb24gSGUoYSl7aWYoXCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJkRlKEJlKSlpZihhPXplKEJlLGEsbmMoYSkpLGRiKW1jKGEpO2Vsc2V7ZGI9ITA7dHJ5eyRhKENlLGEpfWZpbmFsbHl7ZGI9ITEsZmIoKX19fWZ1bmN0aW9uIEllKGEsYixjKXtcImZvY3VzXCI9PT1hPyhHZSgpLEFlPWIsQmU9YyxBZS5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixIZSkpOlwiYmx1clwiPT09YSYmR2UoKX1mdW5jdGlvbiBKZShhKXtpZihcInNlbGVjdGlvbmNoYW5nZVwiPT09YXx8XCJrZXl1cFwiPT09YXx8XCJrZXlkb3duXCI9PT1hKXJldHVybiBEZShCZSl9ZnVuY3Rpb24gS2UoYSxiKXtpZihcImNsaWNrXCI9PT1hKXJldHVybiBEZShiKX1mdW5jdGlvbiBMZShhLGIpe2lmKFwiaW5wdXRcIj09PWF8fFwiY2hhbmdlXCI9PT1hKXJldHVybiBEZShiKX1cbnZhciBNZT17ZXZlbnRUeXBlczp5ZSxfaXNJbnB1dEV2ZW50U3VwcG9ydGVkOkZlLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9Yj9QZChiKTp3aW5kb3csZj1lLm5vZGVOYW1lJiZlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7aWYoXCJzZWxlY3RcIj09PWZ8fFwiaW5wdXRcIj09PWYmJlwiZmlsZVwiPT09ZS50eXBlKXZhciBnPUVlO2Vsc2UgaWYoeGUoZSkpaWYoRmUpZz1MZTtlbHNle2c9SmU7dmFyIGg9SWV9ZWxzZShmPWUubm9kZU5hbWUpJiZcImlucHV0XCI9PT1mLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1lLnR5cGV8fFwicmFkaW9cIj09PWUudHlwZSkmJihnPUtlKTtpZihnJiYoZz1nKGEsYikpKXJldHVybiB6ZShnLGMsZCk7aCYmaChhLGUsYik7XCJibHVyXCI9PT1hJiYoYT1lLl93cmFwcGVyU3RhdGUpJiZhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1lLnR5cGUmJkRiKGUsXCJudW1iZXJcIixlLnZhbHVlKX19LE5lPUcuZXh0ZW5kKHt2aWV3Om51bGwsZGV0YWlsOm51bGx9KSxcbk9lPXtBbHQ6XCJhbHRLZXlcIixDb250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBQZShhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPU9lW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gUWUoKXtyZXR1cm4gUGV9XG52YXIgUmU9MCxTZT0wLFRlPSExLFVlPSExLFZlPU5lLmV4dGVuZCh7c2NyZWVuWDpudWxsLHNjcmVlblk6bnVsbCxjbGllbnRYOm51bGwsY2xpZW50WTpudWxsLHBhZ2VYOm51bGwscGFnZVk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpRZSxidXR0b246bnVsbCxidXR0b25zOm51bGwscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZWxhdGVkVGFyZ2V0fHwoYS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50KX0sbW92ZW1lbnRYOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRYXCJpbiBhKXJldHVybiBhLm1vdmVtZW50WDt2YXIgYj1SZTtSZT1hLnNjcmVlblg7cmV0dXJuIFRlP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5YLWI6MDooVGU9ITAsMCl9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WVwiaW4gYSlyZXR1cm4gYS5tb3ZlbWVudFk7XG52YXIgYj1TZTtTZT1hLnNjcmVlblk7cmV0dXJuIFVlP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5ZLWI6MDooVWU9ITAsMCl9fSksV2U9VmUuZXh0ZW5kKHtwb2ludGVySWQ6bnVsbCx3aWR0aDpudWxsLGhlaWdodDpudWxsLHByZXNzdXJlOm51bGwsdGFuZ2VudGlhbFByZXNzdXJlOm51bGwsdGlsdFg6bnVsbCx0aWx0WTpudWxsLHR3aXN0Om51bGwscG9pbnRlclR5cGU6bnVsbCxpc1ByaW1hcnk6bnVsbH0pLFhlPXttb3VzZUVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUVudGVyXCIsZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LG1vdXNlTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlTGVhdmVcIixkZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0scG9pbnRlckVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyRW50ZXJcIixkZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19LHBvaW50ZXJMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckxlYXZlXCIsXG5kZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19fSxZZT17ZXZlbnRUeXBlczpYZSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9XCJtb3VzZW92ZXJcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEsZz1cIm1vdXNlb3V0XCI9PT1hfHxcInBvaW50ZXJvdXRcIj09PWE7aWYoZiYmMD09PShlJjMyKSYmKGMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCl8fCFnJiYhZilyZXR1cm4gbnVsbDtmPWQud2luZG93PT09ZD9kOihmPWQub3duZXJEb2N1bWVudCk/Zi5kZWZhdWx0Vmlld3x8Zi5wYXJlbnRXaW5kb3c6d2luZG93O2lmKGcpe2lmKGc9YixiPShiPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQpP3RjKGIpOm51bGwsbnVsbCE9PWIpe3ZhciBoPWRjKGIpO2lmKGIhPT1ofHw1IT09Yi50YWcmJjYhPT1iLnRhZyliPW51bGx9fWVsc2UgZz1udWxsO2lmKGc9PT1iKXJldHVybiBudWxsO2lmKFwibW91c2VvdXRcIj09PWF8fFwibW91c2VvdmVyXCI9PT1cbmEpe3ZhciBrPVZlO3ZhciBsPVhlLm1vdXNlTGVhdmU7dmFyIG09WGUubW91c2VFbnRlcjt2YXIgcD1cIm1vdXNlXCJ9ZWxzZSBpZihcInBvaW50ZXJvdXRcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEpaz1XZSxsPVhlLnBvaW50ZXJMZWF2ZSxtPVhlLnBvaW50ZXJFbnRlcixwPVwicG9pbnRlclwiO2E9bnVsbD09Zz9mOlBkKGcpO2Y9bnVsbD09Yj9mOlBkKGIpO2w9ay5nZXRQb29sZWQobCxnLGMsZCk7bC50eXBlPXArXCJsZWF2ZVwiO2wudGFyZ2V0PWE7bC5yZWxhdGVkVGFyZ2V0PWY7Yz1rLmdldFBvb2xlZChtLGIsYyxkKTtjLnR5cGU9cCtcImVudGVyXCI7Yy50YXJnZXQ9ZjtjLnJlbGF0ZWRUYXJnZXQ9YTtkPWc7cD1iO2lmKGQmJnApYTp7az1kO209cDtnPTA7Zm9yKGE9azthO2E9UmQoYSkpZysrO2E9MDtmb3IoYj1tO2I7Yj1SZChiKSlhKys7Zm9yKDswPGctYTspaz1SZChrKSxnLS07Zm9yKDswPGEtZzspbT1SZChtKSxhLS07Zm9yKDtnLS07KXtpZihrPT09bXx8az09PW0uYWx0ZXJuYXRlKWJyZWFrIGE7XG5rPVJkKGspO209UmQobSl9az1udWxsfWVsc2Ugaz1udWxsO209aztmb3Ioaz1bXTtkJiZkIT09bTspe2c9ZC5hbHRlcm5hdGU7aWYobnVsbCE9PWcmJmc9PT1tKWJyZWFrO2sucHVzaChkKTtkPVJkKGQpfWZvcihkPVtdO3AmJnAhPT1tOyl7Zz1wLmFsdGVybmF0ZTtpZihudWxsIT09ZyYmZz09PW0pYnJlYWs7ZC5wdXNoKHApO3A9UmQocCl9Zm9yKHA9MDtwPGsubGVuZ3RoO3ArKylWZChrW3BdLFwiYnViYmxlZFwiLGwpO2ZvcihwPWQubGVuZ3RoOzA8cC0tOylWZChkW3BdLFwiY2FwdHVyZWRcIixjKTtyZXR1cm4gMD09PShlJjY0KT9bbF06W2wsY119fTtmdW5jdGlvbiBaZShhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyICRlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBPYmplY3QuaXM/T2JqZWN0LmlzOlplLGFmPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBiZihhLGIpe2lmKCRlKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKylpZighYWYuY2FsbChiLGNbZF0pfHwhJGUoYVtjW2RdXSxiW2NbZF1dKSlyZXR1cm4hMTtyZXR1cm4hMH1cbnZhciBjZj1UYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLGRmPXtzZWxlY3Q6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25TZWxlY3RcIixjYXB0dXJlZDpcIm9uU2VsZWN0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXMga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fSxlZj1udWxsLGZmPW51bGwsZ2Y9bnVsbCxoZj0hMTtcbmZ1bmN0aW9uIGpmKGEsYil7dmFyIGM9Yi53aW5kb3c9PT1iP2IuZG9jdW1lbnQ6OT09PWIubm9kZVR5cGU/YjpiLm93bmVyRG9jdW1lbnQ7aWYoaGZ8fG51bGw9PWVmfHxlZiE9PXRkKGMpKXJldHVybiBudWxsO2M9ZWY7XCJzZWxlY3Rpb25TdGFydFwiaW4gYyYmeWQoYyk/Yz17c3RhcnQ6Yy5zZWxlY3Rpb25TdGFydCxlbmQ6Yy5zZWxlY3Rpb25FbmR9OihjPShjLm93bmVyRG9jdW1lbnQmJmMub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxjPXthbmNob3JOb2RlOmMuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6Yy5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmMuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmMuZm9jdXNPZmZzZXR9KTtyZXR1cm4gZ2YmJmJmKGdmLGMpP251bGw6KGdmPWMsYT1HLmdldFBvb2xlZChkZi5zZWxlY3QsZmYsYSxiKSxhLnR5cGU9XCJzZWxlY3RcIixhLnRhcmdldD1lZixYZChhKSxhKX1cbnZhciBrZj17ZXZlbnRUeXBlczpkZixleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQsZSxmKXtlPWZ8fChkLndpbmRvdz09PWQ/ZC5kb2N1bWVudDo5PT09ZC5ub2RlVHlwZT9kOmQub3duZXJEb2N1bWVudCk7aWYoIShmPSFlKSl7YTp7ZT1jYyhlKTtmPVJhLm9uU2VsZWN0O2Zvcih2YXIgZz0wO2c8Zi5sZW5ndGg7ZysrKWlmKCFlLmhhcyhmW2ddKSl7ZT0hMTticmVhayBhfWU9ITB9Zj0hZX1pZihmKXJldHVybiBudWxsO2U9Yj9QZChiKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c1wiOmlmKHhlKGUpfHxcInRydWVcIj09PWUuY29udGVudEVkaXRhYmxlKWVmPWUsZmY9YixnZj1udWxsO2JyZWFrO2Nhc2UgXCJibHVyXCI6Z2Y9ZmY9ZWY9bnVsbDticmVhaztjYXNlIFwibW91c2Vkb3duXCI6aGY9ITA7YnJlYWs7Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwiZHJhZ2VuZFwiOnJldHVybiBoZj0hMSxqZihjLGQpO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihjZilicmVhaztcbmNhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6cmV0dXJuIGpmKGMsZCl9cmV0dXJuIG51bGx9fSxsZj1HLmV4dGVuZCh7YW5pbWF0aW9uTmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksbWY9Ry5leHRlbmQoe2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxuZj1OZS5leHRlbmQoe3JlbGF0ZWRUYXJnZXQ6bnVsbH0pO2Z1bmN0aW9uIG9mKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfVxudmFyIHBmPXtFc2M6XCJFc2NhcGVcIixTcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxxZj17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIixcbjExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLDExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0scmY9TmUuZXh0ZW5kKHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPXBmW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPW9mKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9xZlthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGxvY2F0aW9uOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLHJlcGVhdDpudWxsLGxvY2FsZTpudWxsLGdldE1vZGlmaWVyU3RhdGU6UWUsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/b2YoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/b2YoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSxzZj1WZS5leHRlbmQoe2RhdGFUcmFuc2ZlcjpudWxsfSksdGY9TmUuZXh0ZW5kKHt0b3VjaGVzOm51bGwsdGFyZ2V0VG91Y2hlczpudWxsLGNoYW5nZWRUb3VjaGVzOm51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6UWV9KSx1Zj1HLmV4dGVuZCh7cHJvcGVydHlOYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSx2Zj1WZS5leHRlbmQoe2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpblxuYT8tYS53aGVlbERlbHRhWDowfSxkZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6bnVsbCxkZWx0YU1vZGU6bnVsbH0pLHdmPXtldmVudFR5cGVzOldjLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9WWMuZ2V0KGEpO2lmKCFlKXJldHVybiBudWxsO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09b2YoYykpcmV0dXJuIG51bGw7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjphPXJmO2JyZWFrO2Nhc2UgXCJibHVyXCI6Y2FzZSBcImZvY3VzXCI6YT1uZjticmVhaztjYXNlIFwiY2xpY2tcIjppZigyPT09Yy5idXR0b24pcmV0dXJuIG51bGw7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjphPVxuVmU7YnJlYWs7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6YT1zZjticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjphPXRmO2JyZWFrO2Nhc2UgWGI6Y2FzZSBZYjpjYXNlIFpiOmE9bGY7YnJlYWs7Y2FzZSAkYjphPXVmO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjphPU5lO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOmE9dmY7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6YT1tZjticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjphPVxuV2U7YnJlYWs7ZGVmYXVsdDphPUd9Yj1hLmdldFBvb2xlZChlLGIsYyxkKTtYZChiKTtyZXR1cm4gYn19O2lmKEthKXRocm93IEVycm9yKHUoMTAxKSk7S2E9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoXCJSZXNwb25kZXJFdmVudFBsdWdpbiBTaW1wbGVFdmVudFBsdWdpbiBFbnRlckxlYXZlRXZlbnRQbHVnaW4gQ2hhbmdlRXZlbnRQbHVnaW4gU2VsZWN0RXZlbnRQbHVnaW4gQmVmb3JlSW5wdXRFdmVudFBsdWdpblwiLnNwbGl0KFwiIFwiKSk7TWEoKTt2YXIgeGY9TmM7bGE9UWQ7bWE9eGY7bmE9UGQ7U2Eoe1NpbXBsZUV2ZW50UGx1Z2luOndmLEVudGVyTGVhdmVFdmVudFBsdWdpbjpZZSxDaGFuZ2VFdmVudFBsdWdpbjpNZSxTZWxlY3RFdmVudFBsdWdpbjprZixCZWZvcmVJbnB1dEV2ZW50UGx1Z2luOnZlfSk7dmFyIHlmPVtdLHpmPS0xO2Z1bmN0aW9uIEgoYSl7MD56Znx8KGEuY3VycmVudD15Zlt6Zl0seWZbemZdPW51bGwsemYtLSl9XG5mdW5jdGlvbiBJKGEsYil7emYrKzt5Zlt6Zl09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBBZj17fSxKPXtjdXJyZW50OkFmfSxLPXtjdXJyZW50OiExfSxCZj1BZjtmdW5jdGlvbiBDZihhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIEFmO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfWZ1bmN0aW9uIEwoYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1cbmZ1bmN0aW9uIERmKCl7SChLKTtIKEopfWZ1bmN0aW9uIEVmKGEsYixjKXtpZihKLmN1cnJlbnQhPT1BZil0aHJvdyBFcnJvcih1KDE2OCkpO0koSixiKTtJKEssYyl9ZnVuY3Rpb24gRmYoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2E9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWlmKCEoZSBpbiBhKSl0aHJvdyBFcnJvcih1KDEwOCxJYShiKXx8XCJVbmtub3duXCIsZSkpO3JldHVybiBuKHt9LGMse30sZCl9ZnVuY3Rpb24gR2YoYSl7YT0oYT1hLnN0YXRlTm9kZSkmJmEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fEFmO0JmPUouY3VycmVudDtJKEosYSk7SShLLEsuY3VycmVudCk7cmV0dXJuITB9XG5mdW5jdGlvbiBIZihhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoIWQpdGhyb3cgRXJyb3IodSgxNjkpKTtjPyhhPUZmKGEsYixCZiksZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1hLEgoSyksSChKKSxJKEosYSkpOkgoSyk7SShLLGMpfVxudmFyIElmPXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5LEpmPXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxLZj1yLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrLExmPXIudW5zdGFibGVfcmVxdWVzdFBhaW50LE1mPXIudW5zdGFibGVfbm93LE5mPXIudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwsT2Y9ci51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSxQZj1yLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LFFmPXIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksUmY9ci51bnN0YWJsZV9Mb3dQcmlvcml0eSxTZj1yLnVuc3RhYmxlX0lkbGVQcmlvcml0eSxUZj17fSxVZj1yLnVuc3RhYmxlX3Nob3VsZFlpZWxkLFZmPXZvaWQgMCE9PUxmP0xmOmZ1bmN0aW9uKCl7fSxXZj1udWxsLFhmPW51bGwsWWY9ITEsWmY9TWYoKSwkZj0xRTQ+WmY/TWY6ZnVuY3Rpb24oKXtyZXR1cm4gTWYoKS1aZn07XG5mdW5jdGlvbiBhZygpe3N3aXRjaChOZigpKXtjYXNlIE9mOnJldHVybiA5OTtjYXNlIFBmOnJldHVybiA5ODtjYXNlIFFmOnJldHVybiA5NztjYXNlIFJmOnJldHVybiA5NjtjYXNlIFNmOnJldHVybiA5NTtkZWZhdWx0OnRocm93IEVycm9yKHUoMzMyKSk7fX1mdW5jdGlvbiBiZyhhKXtzd2l0Y2goYSl7Y2FzZSA5OTpyZXR1cm4gT2Y7Y2FzZSA5ODpyZXR1cm4gUGY7Y2FzZSA5NzpyZXR1cm4gUWY7Y2FzZSA5NjpyZXR1cm4gUmY7Y2FzZSA5NTpyZXR1cm4gU2Y7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDMzMikpO319ZnVuY3Rpb24gY2coYSxiKXthPWJnKGEpO3JldHVybiBJZihhLGIpfWZ1bmN0aW9uIGRnKGEsYixjKXthPWJnKGEpO3JldHVybiBKZihhLGIsYyl9ZnVuY3Rpb24gZWcoYSl7bnVsbD09PVdmPyhXZj1bYV0sWGY9SmYoT2YsZmcpKTpXZi5wdXNoKGEpO3JldHVybiBUZn1mdW5jdGlvbiBnZygpe2lmKG51bGwhPT1YZil7dmFyIGE9WGY7WGY9bnVsbDtLZihhKX1mZygpfVxuZnVuY3Rpb24gZmcoKXtpZighWWYmJm51bGwhPT1XZil7WWY9ITA7dmFyIGE9MDt0cnl7dmFyIGI9V2Y7Y2coOTksZnVuY3Rpb24oKXtmb3IoO2E8Yi5sZW5ndGg7YSsrKXt2YXIgYz1iW2FdO2RvIGM9YyghMCk7d2hpbGUobnVsbCE9PWMpfX0pO1dmPW51bGx9Y2F0Y2goYyl7dGhyb3cgbnVsbCE9PVdmJiYoV2Y9V2Yuc2xpY2UoYSsxKSksSmYoT2YsZ2cpLGM7fWZpbmFsbHl7WWY9ITF9fX1mdW5jdGlvbiBoZyhhLGIsYyl7Yy89MTA7cmV0dXJuIDEwNzM3NDE4MjEtKCgoMTA3Mzc0MTgyMS1hK2IvMTApL2N8MCkrMSkqY31mdW5jdGlvbiBpZyhhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPW4oe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKX1yZXR1cm4gYn12YXIgamc9e2N1cnJlbnQ6bnVsbH0sa2c9bnVsbCxsZz1udWxsLG1nPW51bGw7ZnVuY3Rpb24gbmcoKXttZz1sZz1rZz1udWxsfVxuZnVuY3Rpb24gb2coYSl7dmFyIGI9amcuY3VycmVudDtIKGpnKTthLnR5cGUuX2NvbnRleHQuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIHBnKGEsYil7Zm9yKDtudWxsIT09YTspe3ZhciBjPWEuYWx0ZXJuYXRlO2lmKGEuY2hpbGRFeHBpcmF0aW9uVGltZTxiKWEuY2hpbGRFeHBpcmF0aW9uVGltZT1iLG51bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGMuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtlbHNlIGlmKG51bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiljLmNoaWxkRXhwaXJhdGlvblRpbWU9YjtlbHNlIGJyZWFrO2E9YS5yZXR1cm59fWZ1bmN0aW9uIHFnKGEsYil7a2c9YTttZz1sZz1udWxsO2E9YS5kZXBlbmRlbmNpZXM7bnVsbCE9PWEmJm51bGwhPT1hLmZpcnN0Q29udGV4dCYmKGEuZXhwaXJhdGlvblRpbWU+PWImJihyZz0hMCksYS5maXJzdENvbnRleHQ9bnVsbCl9XG5mdW5jdGlvbiBzZyhhLGIpe2lmKG1nIT09YSYmITEhPT1iJiYwIT09Yil7aWYoXCJudW1iZXJcIiE9PXR5cGVvZiBifHwxMDczNzQxODIzPT09YiltZz1hLGI9MTA3Mzc0MTgyMztiPXtjb250ZXh0OmEsb2JzZXJ2ZWRCaXRzOmIsbmV4dDpudWxsfTtpZihudWxsPT09bGcpe2lmKG51bGw9PT1rZyl0aHJvdyBFcnJvcih1KDMwOCkpO2xnPWI7a2cuZGVwZW5kZW5jaWVzPXtleHBpcmF0aW9uVGltZTowLGZpcnN0Q29udGV4dDpiLHJlc3BvbmRlcnM6bnVsbH19ZWxzZSBsZz1sZy5uZXh0PWJ9cmV0dXJuIGEuX2N1cnJlbnRWYWx1ZX12YXIgdGc9ITE7ZnVuY3Rpb24gdWcoYSl7YS51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEubWVtb2l6ZWRTdGF0ZSxiYXNlUXVldWU6bnVsbCxzaGFyZWQ6e3BlbmRpbmc6bnVsbH0sZWZmZWN0czpudWxsfX1cbmZ1bmN0aW9uIHZnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9PT1hJiYoYi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGJhc2VRdWV1ZTphLmJhc2VRdWV1ZSxzaGFyZWQ6YS5zaGFyZWQsZWZmZWN0czphLmVmZmVjdHN9KX1mdW5jdGlvbiB3ZyhhLGIpe2E9e2V4cGlyYXRpb25UaW1lOmEsc3VzcGVuc2VDb25maWc6Yix0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9O3JldHVybiBhLm5leHQ9YX1mdW5jdGlvbiB4ZyhhLGIpe2E9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09YSl7YT1hLnNoYXJlZDt2YXIgYz1hLnBlbmRpbmc7bnVsbD09PWM/Yi5uZXh0PWI6KGIubmV4dD1jLm5leHQsYy5uZXh0PWIpO2EucGVuZGluZz1ifX1cbmZ1bmN0aW9uIHlnKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJnZnKGMsYSk7YT1hLnVwZGF0ZVF1ZXVlO2M9YS5iYXNlUXVldWU7bnVsbD09PWM/KGEuYmFzZVF1ZXVlPWIubmV4dD1iLGIubmV4dD1iKTooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yil9XG5mdW5jdGlvbiB6ZyhhLGIsYyxkKXt2YXIgZT1hLnVwZGF0ZVF1ZXVlO3RnPSExO3ZhciBmPWUuYmFzZVF1ZXVlLGc9ZS5zaGFyZWQucGVuZGluZztpZihudWxsIT09Zyl7aWYobnVsbCE9PWYpe3ZhciBoPWYubmV4dDtmLm5leHQ9Zy5uZXh0O2cubmV4dD1ofWY9ZztlLnNoYXJlZC5wZW5kaW5nPW51bGw7aD1hLmFsdGVybmF0ZTtudWxsIT09aCYmKGg9aC51cGRhdGVRdWV1ZSxudWxsIT09aCYmKGguYmFzZVF1ZXVlPWcpKX1pZihudWxsIT09Zil7aD1mLm5leHQ7dmFyIGs9ZS5iYXNlU3RhdGUsbD0wLG09bnVsbCxwPW51bGwseD1udWxsO2lmKG51bGwhPT1oKXt2YXIgej1oO2Rve2c9ei5leHBpcmF0aW9uVGltZTtpZihnPGQpe3ZhciBjYT17ZXhwaXJhdGlvblRpbWU6ei5leHBpcmF0aW9uVGltZSxzdXNwZW5zZUNvbmZpZzp6LnN1c3BlbnNlQ29uZmlnLHRhZzp6LnRhZyxwYXlsb2FkOnoucGF5bG9hZCxjYWxsYmFjazp6LmNhbGxiYWNrLG5leHQ6bnVsbH07bnVsbD09PXg/KHA9eD1cbmNhLG09ayk6eD14Lm5leHQ9Y2E7Zz5sJiYobD1nKX1lbHNle251bGwhPT14JiYoeD14Lm5leHQ9e2V4cGlyYXRpb25UaW1lOjEwNzM3NDE4MjMsc3VzcGVuc2VDb25maWc6ei5zdXNwZW5zZUNvbmZpZyx0YWc6ei50YWcscGF5bG9hZDp6LnBheWxvYWQsY2FsbGJhY2s6ei5jYWxsYmFjayxuZXh0Om51bGx9KTtBZyhnLHouc3VzcGVuc2VDb25maWcpO2E6e3ZhciBEPWEsdD16O2c9YjtjYT1jO3N3aXRjaCh0LnRhZyl7Y2FzZSAxOkQ9dC5wYXlsb2FkO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBEKXtrPUQuY2FsbChjYSxrLGcpO2JyZWFrIGF9az1EO2JyZWFrIGE7Y2FzZSAzOkQuZWZmZWN0VGFnPUQuZWZmZWN0VGFnJi00MDk3fDY0O2Nhc2UgMDpEPXQucGF5bG9hZDtnPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBEP0QuY2FsbChjYSxrLGcpOkQ7aWYobnVsbD09PWd8fHZvaWQgMD09PWcpYnJlYWsgYTtrPW4oe30sayxnKTticmVhayBhO2Nhc2UgMjp0Zz0hMH19bnVsbCE9PXouY2FsbGJhY2smJlxuKGEuZWZmZWN0VGFnfD0zMixnPWUuZWZmZWN0cyxudWxsPT09Zz9lLmVmZmVjdHM9W3pdOmcucHVzaCh6KSl9ej16Lm5leHQ7aWYobnVsbD09PXp8fHo9PT1oKWlmKGc9ZS5zaGFyZWQucGVuZGluZyxudWxsPT09ZylicmVhaztlbHNlIHo9Zi5uZXh0PWcubmV4dCxnLm5leHQ9aCxlLmJhc2VRdWV1ZT1mPWcsZS5zaGFyZWQucGVuZGluZz1udWxsfXdoaWxlKDEpfW51bGw9PT14P209azp4Lm5leHQ9cDtlLmJhc2VTdGF0ZT1tO2UuYmFzZVF1ZXVlPXg7QmcobCk7YS5leHBpcmF0aW9uVGltZT1sO2EubWVtb2l6ZWRTdGF0ZT1rfX1cbmZ1bmN0aW9uIENnKGEsYixjKXthPWIuZWZmZWN0cztiLmVmZmVjdHM9bnVsbDtpZihudWxsIT09YSlmb3IoYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgZD1hW2JdLGU9ZC5jYWxsYmFjaztpZihudWxsIT09ZSl7ZC5jYWxsYmFjaz1udWxsO2Q9ZTtlPWM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQpdGhyb3cgRXJyb3IodSgxOTEsZCkpO2QuY2FsbChlKX19fXZhciBEZz1wYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxFZz0obmV3IGFhLkNvbXBvbmVudCkucmVmcztmdW5jdGlvbiBGZyhhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6bih7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jOzA9PT1hLmV4cGlyYXRpb25UaW1lJiYoYS51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9Yyl9XG52YXIgSmc9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFsRmliZXIpP2RjKGEpPT09YTohMX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZD1HZygpLGU9RGcuc3VzcGVuc2U7ZD1IZyhkLGEsZSk7ZT13ZyhkLGUpO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTt4ZyhhLGUpO0lnKGEsZCl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPUdnKCksZT1EZy5zdXNwZW5zZTtkPUhnKGQsYSxlKTtlPXdnKGQsZSk7ZS50YWc9MTtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7eGcoYSxlKTtJZyhhLGQpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgYz1HZygpLGQ9RGcuc3VzcGVuc2U7XG5jPUhnKGMsYSxkKTtkPXdnKGMsZCk7ZC50YWc9Mjt2b2lkIDAhPT1iJiZudWxsIT09YiYmKGQuY2FsbGJhY2s9Yik7eGcoYSxkKTtJZyhhLGMpfX07ZnVuY3Rpb24gS2coYSxiLGMsZCxlLGYsZyl7YT1hLnN0YXRlTm9kZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5zaG91bGRDb21wb25lbnRVcGRhdGU/YS5zaG91bGRDb21wb25lbnRVcGRhdGUoZCxmLGcpOmIucHJvdG90eXBlJiZiLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8hYmYoYyxkKXx8IWJmKGUsZik6ITB9XG5mdW5jdGlvbiBMZyhhLGIsYyl7dmFyIGQ9ITEsZT1BZjt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/Zj1zZyhmKTooZT1MKGIpP0JmOkouY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP0NmKGEsZSk6QWYpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj1KZzthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxGaWJlcj1hO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1lLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Zik7cmV0dXJuIGJ9XG5mdW5jdGlvbiBNZyhhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmSmcuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9XG5mdW5jdGlvbiBOZyhhLGIsYyxkKXt2YXIgZT1hLnN0YXRlTm9kZTtlLnByb3BzPWM7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZS5yZWZzPUVnO3VnKGEpO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9lLmNvbnRleHQ9c2coZik6KGY9TChiKT9CZjpKLmN1cnJlbnQsZS5jb250ZXh0PUNmKGEsZikpO3pnKGEsYyxlLGQpO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihGZyhhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHxcbihiPWUuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZKZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSx6ZyhhLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9NCl9dmFyIE9nPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBQZyhhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7aWYoYyl7aWYoMSE9PWMudGFnKXRocm93IEVycm9yKHUoMzA5KSk7dmFyIGQ9Yy5zdGF0ZU5vZGV9aWYoIWQpdGhyb3cgRXJyb3IodSgxNDcsYSkpO3ZhciBlPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1lKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWQucmVmcztiPT09RWcmJihiPWQucmVmcz17fSk7bnVsbD09PWE/ZGVsZXRlIGJbZV06YltlXT1hfTtiLl9zdHJpbmdSZWY9ZTtyZXR1cm4gYn1pZihcInN0cmluZ1wiIT09dHlwZW9mIGEpdGhyb3cgRXJyb3IodSgyODQpKTtpZighYy5fb3duZXIpdGhyb3cgRXJyb3IodSgyOTAsYSkpO31yZXR1cm4gYX1cbmZ1bmN0aW9uIFFnKGEsYil7aWYoXCJ0ZXh0YXJlYVwiIT09YS50eXBlKXRocm93IEVycm9yKHUoMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjpiLFwiXCIpKTt9XG5mdW5jdGlvbiBSZyhhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmVmZmVjdFRhZz04fX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYil7YT1TZyhhLGIpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5lZmZlY3RUYWc9XG4yLGMpOmQ7Yi5lZmZlY3RUYWc9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZWZmZWN0VGFnPTIpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj1UZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe2lmKG51bGwhPT1iJiZiLmVsZW1lbnRUeXBlPT09Yy50eXBlKXJldHVybiBkPWUoYixjLnByb3BzKSxkLnJlZj1QZyhhLGIsYyksZC5yZXR1cm49YSxkO2Q9VWcoYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9UGcoYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PVxuYy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1WZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10pO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbShhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9V2coYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBwKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj1UZyhcIlwiK2IsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSByYTpyZXR1cm4gYz1VZyhiLnR5cGUsYi5rZXksYi5wcm9wcyxudWxsLGEubW9kZSxjKSxjLnJlZj1QZyhhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2Ugc2E6cmV0dXJuIGI9VmcoYixhLm1vZGUsYyksYi5yZXR1cm49YSxifWlmKE9nKGIpfHxcbkdhKGIpKXJldHVybiBiPVdnKGIsYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49YSxiO1FnKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24geChhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgY3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmgoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSByYTpyZXR1cm4gYy5rZXk9PT1lP2MudHlwZT09PXRhP20oYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxlKTprKGEsYixjLGQpOm51bGw7Y2FzZSBzYTpyZXR1cm4gYy5rZXk9PT1lP2woYSxiLGMsZCk6bnVsbH1pZihPZyhjKXx8R2EoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bShhLGIsYyxkLG51bGwpO1FnKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24geihhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPVxuYS5nZXQoYyl8fG51bGwsaChiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIHJhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxkLnR5cGU9PT10YT9tKGIsYSxkLnByb3BzLmNoaWxkcmVuLGUsZC5rZXkpOmsoYixhLGQsZSk7Y2FzZSBzYTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsbChiLGEsZCxlKX1pZihPZyhkKXx8R2EoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbShiLGEsZCxlLG51bGwpO1FnKGIsZCl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gY2EoZSxnLGgsayl7Zm9yKHZhciBsPW51bGwsdD1udWxsLG09Zyx5PWc9MCxBPW51bGw7bnVsbCE9PW0mJnk8aC5sZW5ndGg7eSsrKXttLmluZGV4Pnk/KEE9bSxtPW51bGwpOkE9bS5zaWJsaW5nO3ZhciBxPXgoZSxtLGhbeV0sayk7aWYobnVsbD09PXEpe251bGw9PT1tJiYobT1BKTticmVha31hJiZcbm0mJm51bGw9PT1xLmFsdGVybmF0ZSYmYihlLG0pO2c9ZihxLGcseSk7bnVsbD09PXQ/bD1xOnQuc2libGluZz1xO3Q9cTttPUF9aWYoeT09PWgubGVuZ3RoKXJldHVybiBjKGUsbSksbDtpZihudWxsPT09bSl7Zm9yKDt5PGgubGVuZ3RoO3krKyltPXAoZSxoW3ldLGspLG51bGwhPT1tJiYoZz1mKG0sZyx5KSxudWxsPT09dD9sPW06dC5zaWJsaW5nPW0sdD1tKTtyZXR1cm4gbH1mb3IobT1kKGUsbSk7eTxoLmxlbmd0aDt5KyspQT16KG0sZSx5LGhbeV0sayksbnVsbCE9PUEmJihhJiZudWxsIT09QS5hbHRlcm5hdGUmJm0uZGVsZXRlKG51bGw9PT1BLmtleT95OkEua2V5KSxnPWYoQSxnLHkpLG51bGw9PT10P2w9QTp0LnNpYmxpbmc9QSx0PUEpO2EmJm0uZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9ZnVuY3Rpb24gRChlLGcsaCxsKXt2YXIgaz1HYShoKTtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2Ygayl0aHJvdyBFcnJvcih1KDE1MCkpO2g9ay5jYWxsKGgpO1xuaWYobnVsbD09aCl0aHJvdyBFcnJvcih1KDE1MSkpO2Zvcih2YXIgbT1rPW51bGwsdD1nLHk9Zz0wLEE9bnVsbCxxPWgubmV4dCgpO251bGwhPT10JiYhcS5kb25lO3krKyxxPWgubmV4dCgpKXt0LmluZGV4Pnk/KEE9dCx0PW51bGwpOkE9dC5zaWJsaW5nO3ZhciBEPXgoZSx0LHEudmFsdWUsbCk7aWYobnVsbD09PUQpe251bGw9PT10JiYodD1BKTticmVha31hJiZ0JiZudWxsPT09RC5hbHRlcm5hdGUmJmIoZSx0KTtnPWYoRCxnLHkpO251bGw9PT1tP2s9RDptLnNpYmxpbmc9RDttPUQ7dD1BfWlmKHEuZG9uZSlyZXR1cm4gYyhlLHQpLGs7aWYobnVsbD09PXQpe2Zvcig7IXEuZG9uZTt5KysscT1oLm5leHQoKSlxPXAoZSxxLnZhbHVlLGwpLG51bGwhPT1xJiYoZz1mKHEsZyx5KSxudWxsPT09bT9rPXE6bS5zaWJsaW5nPXEsbT1xKTtyZXR1cm4ga31mb3IodD1kKGUsdCk7IXEuZG9uZTt5KysscT1oLm5leHQoKSlxPXoodCxlLHkscS52YWx1ZSxsKSxudWxsIT09cSYmKGEmJm51bGwhPT1cbnEuYWx0ZXJuYXRlJiZ0LmRlbGV0ZShudWxsPT09cS5rZXk/eTpxLmtleSksZz1mKHEsZyx5KSxudWxsPT09bT9rPXE6bS5zaWJsaW5nPXEsbT1xKTthJiZ0LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBrfXJldHVybiBmdW5jdGlvbihhLGQsZixoKXt2YXIgaz1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT10YSYmbnVsbD09PWYua2V5O2smJihmPWYucHJvcHMuY2hpbGRyZW4pO3ZhciBsPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY7aWYobClzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSByYTphOntsPWYua2V5O2ZvcihrPWQ7bnVsbCE9PWs7KXtpZihrLmtleT09PWwpe3N3aXRjaChrLnRhZyl7Y2FzZSA3OmlmKGYudHlwZT09PXRhKXtjKGEsay5zaWJsaW5nKTtkPWUoayxmLnByb3BzLmNoaWxkcmVuKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWJyZWFrO2RlZmF1bHQ6aWYoay5lbGVtZW50VHlwZT09PWYudHlwZSl7YyhhLFxuay5zaWJsaW5nKTtkPWUoayxmLnByb3BzKTtkLnJlZj1QZyhhLGssZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX19YyhhLGspO2JyZWFrfWVsc2UgYihhLGspO2s9ay5zaWJsaW5nfWYudHlwZT09PXRhPyhkPVdnKGYucHJvcHMuY2hpbGRyZW4sYS5tb2RlLGgsZi5rZXkpLGQucmV0dXJuPWEsYT1kKTooaD1VZyhmLnR5cGUsZi5rZXksZi5wcm9wcyxudWxsLGEubW9kZSxoKSxoLnJlZj1QZyhhLGQsZiksaC5yZXR1cm49YSxhPWgpfXJldHVybiBnKGEpO2Nhc2Ugc2E6YTp7Zm9yKGs9Zi5rZXk7bnVsbCE9PWQ7KXtpZihkLmtleT09PWspaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9XG5kLnNpYmxpbmd9ZD1WZyhmLGEubW9kZSxoKTtkLnJldHVybj1hO2E9ZH1yZXR1cm4gZyhhKX1pZihcInN0cmluZ1wiPT09dHlwZW9mIGZ8fFwibnVtYmVyXCI9PT10eXBlb2YgZilyZXR1cm4gZj1cIlwiK2YsbnVsbCE9PWQmJjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZiksZC5yZXR1cm49YSxhPWQpOihjKGEsZCksZD1UZyhmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKTtpZihPZyhmKSlyZXR1cm4gY2EoYSxkLGYsaCk7aWYoR2EoZikpcmV0dXJuIEQoYSxkLGYsaCk7bCYmUWcoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYmJiFrKXN3aXRjaChhLnRhZyl7Y2FzZSAxOmNhc2UgMDp0aHJvdyBhPWEudHlwZSxFcnJvcih1KDE1MixhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fFwiQ29tcG9uZW50XCIpKTt9cmV0dXJuIGMoYSxkKX19dmFyIFhnPVJnKCEwKSxZZz1SZyghMSksWmc9e30sJGc9e2N1cnJlbnQ6Wmd9LGFoPXtjdXJyZW50OlpnfSxiaD17Y3VycmVudDpaZ307XG5mdW5jdGlvbiBjaChhKXtpZihhPT09WmcpdGhyb3cgRXJyb3IodSgxNzQpKTtyZXR1cm4gYX1mdW5jdGlvbiBkaChhLGIpe0koYmgsYik7SShhaCxhKTtJKCRnLFpnKTthPWIubm9kZVR5cGU7c3dpdGNoKGEpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOk9iKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDphPTg9PT1hP2IucGFyZW50Tm9kZTpiLGI9YS5uYW1lc3BhY2VVUkl8fG51bGwsYT1hLnRhZ05hbWUsYj1PYihiLGEpfUgoJGcpO0koJGcsYil9ZnVuY3Rpb24gZWgoKXtIKCRnKTtIKGFoKTtIKGJoKX1mdW5jdGlvbiBmaChhKXtjaChiaC5jdXJyZW50KTt2YXIgYj1jaCgkZy5jdXJyZW50KTt2YXIgYz1PYihiLGEudHlwZSk7YiE9PWMmJihJKGFoLGEpLEkoJGcsYykpfWZ1bmN0aW9uIGdoKGEpe2FoLmN1cnJlbnQ9PT1hJiYoSCgkZyksSChhaCkpfXZhciBNPXtjdXJyZW50OjB9O1xuZnVuY3Rpb24gaGgoYSl7Zm9yKHZhciBiPWE7bnVsbCE9PWI7KXtpZigxMz09PWIudGFnKXt2YXIgYz1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsPT09Y3x8Yy5kYXRhPT09QmR8fGMuZGF0YT09PUNkKSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmVmZmVjdFRhZyY2NCkpcmV0dXJuIGJ9ZWxzZSBpZihudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfXJldHVybiBudWxsfWZ1bmN0aW9uIGloKGEsYil7cmV0dXJue3Jlc3BvbmRlcjphLHByb3BzOmJ9fVxudmFyIGpoPXBhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsa2g9cGEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsbGg9MCxOPW51bGwsTz1udWxsLFA9bnVsbCxtaD0hMTtmdW5jdGlvbiBRKCl7dGhyb3cgRXJyb3IodSgzMjEpKTt9ZnVuY3Rpb24gbmgoYSxiKXtpZihudWxsPT09YilyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoJiZjPGEubGVuZ3RoO2MrKylpZighJGUoYVtjXSxiW2NdKSlyZXR1cm4hMTtyZXR1cm4hMH1cbmZ1bmN0aW9uIG9oKGEsYixjLGQsZSxmKXtsaD1mO049YjtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7Yi5leHBpcmF0aW9uVGltZT0wO2poLmN1cnJlbnQ9bnVsbD09PWF8fG51bGw9PT1hLm1lbW9pemVkU3RhdGU/cGg6cWg7YT1jKGQsZSk7aWYoYi5leHBpcmF0aW9uVGltZT09PWxoKXtmPTA7ZG97Yi5leHBpcmF0aW9uVGltZT0wO2lmKCEoMjU+ZikpdGhyb3cgRXJyb3IodSgzMDEpKTtmKz0xO1A9Tz1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtqaC5jdXJyZW50PXJoO2E9YyhkLGUpfXdoaWxlKGIuZXhwaXJhdGlvblRpbWU9PT1saCl9amguY3VycmVudD1zaDtiPW51bGwhPT1PJiZudWxsIT09Ty5uZXh0O2xoPTA7UD1PPU49bnVsbDttaD0hMTtpZihiKXRocm93IEVycm9yKHUoMzAwKSk7cmV0dXJuIGF9XG5mdW5jdGlvbiB0aCgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwsYmFzZVF1ZXVlOm51bGwscXVldWU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1QP04ubWVtb2l6ZWRTdGF0ZT1QPWE6UD1QLm5leHQ9YTtyZXR1cm4gUH1mdW5jdGlvbiB1aCgpe2lmKG51bGw9PT1PKXt2YXIgYT1OLmFsdGVybmF0ZTthPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsfWVsc2UgYT1PLm5leHQ7dmFyIGI9bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlOlAubmV4dDtpZihudWxsIT09YilQPWIsTz1hO2Vsc2V7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IodSgzMTApKTtPPWE7YT17bWVtb2l6ZWRTdGF0ZTpPLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOk8uYmFzZVN0YXRlLGJhc2VRdWV1ZTpPLmJhc2VRdWV1ZSxxdWV1ZTpPLnF1ZXVlLG5leHQ6bnVsbH07bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlPVA9YTpQPVAubmV4dD1hfXJldHVybiBQfVxuZnVuY3Rpb24gdmgoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiB3aChhKXt2YXIgYj11aCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcih1KDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPU8sZT1kLmJhc2VRdWV1ZSxmPWMucGVuZGluZztpZihudWxsIT09Zil7aWYobnVsbCE9PWUpe3ZhciBnPWUubmV4dDtlLm5leHQ9Zi5uZXh0O2YubmV4dD1nfWQuYmFzZVF1ZXVlPWU9ZjtjLnBlbmRpbmc9bnVsbH1pZihudWxsIT09ZSl7ZT1lLm5leHQ7ZD1kLmJhc2VTdGF0ZTt2YXIgaD1nPWY9bnVsbCxrPWU7ZG97dmFyIGw9ay5leHBpcmF0aW9uVGltZTtpZihsPGxoKXt2YXIgbT17ZXhwaXJhdGlvblRpbWU6ay5leHBpcmF0aW9uVGltZSxzdXNwZW5zZUNvbmZpZzprLnN1c3BlbnNlQ29uZmlnLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsZWFnZXJTdGF0ZTprLmVhZ2VyU3RhdGUsbmV4dDpudWxsfTtudWxsPT09aD8oZz1oPW0sZj1kKTpoPWgubmV4dD1tO2w+Ti5leHBpcmF0aW9uVGltZSYmXG4oTi5leHBpcmF0aW9uVGltZT1sLEJnKGwpKX1lbHNlIG51bGwhPT1oJiYoaD1oLm5leHQ9e2V4cGlyYXRpb25UaW1lOjEwNzM3NDE4MjMsc3VzcGVuc2VDb25maWc6ay5zdXNwZW5zZUNvbmZpZyxhY3Rpb246ay5hY3Rpb24sZWFnZXJSZWR1Y2VyOmsuZWFnZXJSZWR1Y2VyLGVhZ2VyU3RhdGU6ay5lYWdlclN0YXRlLG5leHQ6bnVsbH0pLEFnKGwsay5zdXNwZW5zZUNvbmZpZyksZD1rLmVhZ2VyUmVkdWNlcj09PWE/ay5lYWdlclN0YXRlOmEoZCxrLmFjdGlvbik7az1rLm5leHR9d2hpbGUobnVsbCE9PWsmJmshPT1lKTtudWxsPT09aD9mPWQ6aC5uZXh0PWc7JGUoZCxiLm1lbW9pemVkU3RhdGUpfHwocmc9ITApO2IubWVtb2l6ZWRTdGF0ZT1kO2IuYmFzZVN0YXRlPWY7Yi5iYXNlUXVldWU9aDtjLmxhc3RSZW5kZXJlZFN0YXRlPWR9cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxjLmRpc3BhdGNoXX1cbmZ1bmN0aW9uIHhoKGEpe3ZhciBiPXVoKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHUoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9Yy5kaXNwYXRjaCxlPWMucGVuZGluZyxmPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZSl7Yy5wZW5kaW5nPW51bGw7dmFyIGc9ZT1lLm5leHQ7ZG8gZj1hKGYsZy5hY3Rpb24pLGc9Zy5uZXh0O3doaWxlKGchPT1lKTskZShmLGIubWVtb2l6ZWRTdGF0ZSl8fChyZz0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7bnVsbD09PWIuYmFzZVF1ZXVlJiYoYi5iYXNlU3RhdGU9Zik7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1mfXJldHVybltmLGRdfVxuZnVuY3Rpb24geWgoYSl7dmFyIGI9dGgoKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPWIucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6dmgsbGFzdFJlbmRlcmVkU3RhdGU6YX07YT1hLmRpc3BhdGNoPXpoLmJpbmQobnVsbCxOLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19ZnVuY3Rpb24gQWgoYSxiLGMsZCl7YT17dGFnOmEsY3JlYXRlOmIsZGVzdHJveTpjLGRlcHM6ZCxuZXh0Om51bGx9O2I9Ti51cGRhdGVRdWV1ZTtudWxsPT09Yj8oYj17bGFzdEVmZmVjdDpudWxsfSxOLnVwZGF0ZVF1ZXVlPWIsYi5sYXN0RWZmZWN0PWEubmV4dD1hKTooYz1iLmxhc3RFZmZlY3QsbnVsbD09PWM/Yi5sYXN0RWZmZWN0PWEubmV4dD1hOihkPWMubmV4dCxjLm5leHQ9YSxhLm5leHQ9ZCxiLmxhc3RFZmZlY3Q9YSkpO3JldHVybiBhfVxuZnVuY3Rpb24gQmgoKXtyZXR1cm4gdWgoKS5tZW1vaXplZFN0YXRlfWZ1bmN0aW9uIENoKGEsYixjLGQpe3ZhciBlPXRoKCk7Ti5lZmZlY3RUYWd8PWE7ZS5tZW1vaXplZFN0YXRlPUFoKDF8YixjLHZvaWQgMCx2b2lkIDA9PT1kP251bGw6ZCl9ZnVuY3Rpb24gRGgoYSxiLGMsZCl7dmFyIGU9dWgoKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Tyl7dmFyIGc9Ty5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZuaChkLGcuZGVwcykpe0FoKGIsYyxmLGQpO3JldHVybn19Ti5lZmZlY3RUYWd8PWE7ZS5tZW1vaXplZFN0YXRlPUFoKDF8YixjLGYsZCl9ZnVuY3Rpb24gRWgoYSxiKXtyZXR1cm4gQ2goNTE2LDQsYSxiKX1mdW5jdGlvbiBGaChhLGIpe3JldHVybiBEaCg1MTYsNCxhLGIpfWZ1bmN0aW9uIEdoKGEsYil7cmV0dXJuIERoKDQsMixhLGIpfVxuZnVuY3Rpb24gSGgoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1mdW5jdGlvbiBJaChhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIERoKDQsMixIaC5iaW5kKG51bGwsYixhKSxjKX1mdW5jdGlvbiBKaCgpe31mdW5jdGlvbiBLaChhLGIpe3RoKCkubWVtb2l6ZWRTdGF0ZT1bYSx2b2lkIDA9PT1iP251bGw6Yl07cmV0dXJuIGF9ZnVuY3Rpb24gTGgoYSxiKXt2YXIgYz11aCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmbmgoYixkWzFdKSlyZXR1cm4gZFswXTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9XG5mdW5jdGlvbiBNaChhLGIpe3ZhciBjPXVoKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZuaChiLGRbMV0pKXJldHVybiBkWzBdO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1mdW5jdGlvbiBOaChhLGIsYyl7dmFyIGQ9YWcoKTtjZyg5OD5kPzk4OmQsZnVuY3Rpb24oKXthKCEwKX0pO2NnKDk3PGQ/OTc6ZCxmdW5jdGlvbigpe3ZhciBkPWtoLnN1c3BlbnNlO2toLnN1c3BlbnNlPXZvaWQgMD09PWI/bnVsbDpiO3RyeXthKCExKSxjKCl9ZmluYWxseXtraC5zdXNwZW5zZT1kfX0pfVxuZnVuY3Rpb24gemgoYSxiLGMpe3ZhciBkPUdnKCksZT1EZy5zdXNwZW5zZTtkPUhnKGQsYSxlKTtlPXtleHBpcmF0aW9uVGltZTpkLHN1c3BlbnNlQ29uZmlnOmUsYWN0aW9uOmMsZWFnZXJSZWR1Y2VyOm51bGwsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH07dmFyIGY9Yi5wZW5kaW5nO251bGw9PT1mP2UubmV4dD1lOihlLm5leHQ9Zi5uZXh0LGYubmV4dD1lKTtiLnBlbmRpbmc9ZTtmPWEuYWx0ZXJuYXRlO2lmKGE9PT1OfHxudWxsIT09ZiYmZj09PU4pbWg9ITAsZS5leHBpcmF0aW9uVGltZT1saCxOLmV4cGlyYXRpb25UaW1lPWxoO2Vsc2V7aWYoMD09PWEuZXhwaXJhdGlvblRpbWUmJihudWxsPT09Znx8MD09PWYuZXhwaXJhdGlvblRpbWUpJiYoZj1iLmxhc3RSZW5kZXJlZFJlZHVjZXIsbnVsbCE9PWYpKXRyeXt2YXIgZz1iLmxhc3RSZW5kZXJlZFN0YXRlLGg9ZihnLGMpO2UuZWFnZXJSZWR1Y2VyPWY7ZS5lYWdlclN0YXRlPWg7aWYoJGUoaCxnKSlyZXR1cm59Y2F0Y2goayl7fWZpbmFsbHl7fUlnKGEsXG5kKX19XG52YXIgc2g9e3JlYWRDb250ZXh0OnNnLHVzZUNhbGxiYWNrOlEsdXNlQ29udGV4dDpRLHVzZUVmZmVjdDpRLHVzZUltcGVyYXRpdmVIYW5kbGU6USx1c2VMYXlvdXRFZmZlY3Q6USx1c2VNZW1vOlEsdXNlUmVkdWNlcjpRLHVzZVJlZjpRLHVzZVN0YXRlOlEsdXNlRGVidWdWYWx1ZTpRLHVzZVJlc3BvbmRlcjpRLHVzZURlZmVycmVkVmFsdWU6USx1c2VUcmFuc2l0aW9uOlF9LHBoPXtyZWFkQ29udGV4dDpzZyx1c2VDYWxsYmFjazpLaCx1c2VDb250ZXh0OnNnLHVzZUVmZmVjdDpFaCx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gQ2goNCwyLEhoLmJpbmQobnVsbCxiLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gQ2goNCwyLGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz10aCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLFxuYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXRoKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPWQucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTthPWEuZGlzcGF0Y2g9emguYmluZChudWxsLE4sYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOmZ1bmN0aW9uKGEpe3ZhciBiPXRoKCk7YT17Y3VycmVudDphfTtyZXR1cm4gYi5tZW1vaXplZFN0YXRlPWF9LHVzZVN0YXRlOnloLHVzZURlYnVnVmFsdWU6SmgsdXNlUmVzcG9uZGVyOmloLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSxiKXt2YXIgYz15aChhKSxkPWNbMF0sZT1jWzFdO0VoKGZ1bmN0aW9uKCl7dmFyIGM9a2guc3VzcGVuc2U7a2guc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2UoYSl9ZmluYWxseXtraC5zdXNwZW5zZT1cbmN9fSxbYSxiXSk7cmV0dXJuIGR9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oYSl7dmFyIGI9eWgoITEpLGM9YlswXTtiPWJbMV07cmV0dXJuW0toKE5oLmJpbmQobnVsbCxiLGEpLFtiLGFdKSxjXX19LHFoPXtyZWFkQ29udGV4dDpzZyx1c2VDYWxsYmFjazpMaCx1c2VDb250ZXh0OnNnLHVzZUVmZmVjdDpGaCx1c2VJbXBlcmF0aXZlSGFuZGxlOkloLHVzZUxheW91dEVmZmVjdDpHaCx1c2VNZW1vOk1oLHVzZVJlZHVjZXI6d2gsdXNlUmVmOkJoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIHdoKHZoKX0sdXNlRGVidWdWYWx1ZTpKaCx1c2VSZXNwb25kZXI6aWgsdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhLGIpe3ZhciBjPXdoKHZoKSxkPWNbMF0sZT1jWzFdO0ZoKGZ1bmN0aW9uKCl7dmFyIGM9a2guc3VzcGVuc2U7a2guc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2UoYSl9ZmluYWxseXtraC5zdXNwZW5zZT1jfX0sW2EsYl0pO3JldHVybiBkfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKGEpe3ZhciBiPVxud2godmgpLGM9YlswXTtiPWJbMV07cmV0dXJuW0xoKE5oLmJpbmQobnVsbCxiLGEpLFtiLGFdKSxjXX19LHJoPXtyZWFkQ29udGV4dDpzZyx1c2VDYWxsYmFjazpMaCx1c2VDb250ZXh0OnNnLHVzZUVmZmVjdDpGaCx1c2VJbXBlcmF0aXZlSGFuZGxlOkloLHVzZUxheW91dEVmZmVjdDpHaCx1c2VNZW1vOk1oLHVzZVJlZHVjZXI6eGgsdXNlUmVmOkJoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIHhoKHZoKX0sdXNlRGVidWdWYWx1ZTpKaCx1c2VSZXNwb25kZXI6aWgsdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhLGIpe3ZhciBjPXhoKHZoKSxkPWNbMF0sZT1jWzFdO0ZoKGZ1bmN0aW9uKCl7dmFyIGM9a2guc3VzcGVuc2U7a2guc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2UoYSl9ZmluYWxseXtraC5zdXNwZW5zZT1jfX0sW2EsYl0pO3JldHVybiBkfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKGEpe3ZhciBiPXhoKHZoKSxjPWJbMF07Yj1iWzFdO3JldHVybltMaChOaC5iaW5kKG51bGwsXG5iLGEpLFtiLGFdKSxjXX19LE9oPW51bGwsUGg9bnVsbCxRaD0hMTtmdW5jdGlvbiBSaChhLGIpe3ZhciBjPVNoKDUsbnVsbCxudWxsLDApO2MuZWxlbWVudFR5cGU9XCJERUxFVEVEXCI7Yy50eXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Yy5yZXR1cm49YTtjLmVmZmVjdFRhZz04O251bGwhPT1hLmxhc3RFZmZlY3Q/KGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsYS5sYXN0RWZmZWN0PWMpOmEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PWN9XG5mdW5jdGlvbiBUaChhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPVwiXCI9PT1hLnBlbmRpbmdQcm9wc3x8MyE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDEzOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gVWgoYSl7aWYoUWgpe3ZhciBiPVBoO2lmKGIpe3ZhciBjPWI7aWYoIVRoKGEsYikpe2I9SmQoYy5uZXh0U2libGluZyk7aWYoIWJ8fCFUaChhLGIpKXthLmVmZmVjdFRhZz1hLmVmZmVjdFRhZyYtMTAyNXwyO1FoPSExO09oPWE7cmV0dXJufVJoKE9oLGMpfU9oPWE7UGg9SmQoYi5maXJzdENoaWxkKX1lbHNlIGEuZWZmZWN0VGFnPWEuZWZmZWN0VGFnJi0xMDI1fDIsUWg9ITEsT2g9YX19ZnVuY3Rpb24gVmgoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnJiYxMyE9PWEudGFnOylhPWEucmV0dXJuO09oPWF9XG5mdW5jdGlvbiBXaChhKXtpZihhIT09T2gpcmV0dXJuITE7aWYoIVFoKXJldHVybiBWaChhKSxRaD0hMCwhMTt2YXIgYj1hLnR5cGU7aWYoNSE9PWEudGFnfHxcImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIUdkKGIsYS5tZW1vaXplZFByb3BzKSlmb3IoYj1QaDtiOylSaChhLGIpLGI9SmQoYi5uZXh0U2libGluZyk7VmgoYSk7aWYoMTM9PT1hLnRhZyl7YT1hLm1lbW9pemVkU3RhdGU7YT1udWxsIT09YT9hLmRlaHlkcmF0ZWQ6bnVsbDtpZighYSl0aHJvdyBFcnJvcih1KDMxNykpO2E6e2E9YS5uZXh0U2libGluZztmb3IoYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKGM9PT1BZCl7aWYoMD09PWIpe1BoPUpkKGEubmV4dFNpYmxpbmcpO2JyZWFrIGF9Yi0tfWVsc2UgYyE9PXpkJiZjIT09Q2QmJmMhPT1CZHx8YisrfWE9YS5uZXh0U2libGluZ31QaD1udWxsfX1lbHNlIFBoPU9oP0pkKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfVxuZnVuY3Rpb24gWGgoKXtQaD1PaD1udWxsO1FoPSExfXZhciBZaD1wYS5SZWFjdEN1cnJlbnRPd25lcixyZz0hMTtmdW5jdGlvbiBSKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/WWcoYixudWxsLGMsZCk6WGcoYixhLmNoaWxkLGMsZCl9ZnVuY3Rpb24gWmgoYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO3FnKGIsZSk7ZD1vaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiFyZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZWZmZWN0VGFnJj0tNTE3LGEuZXhwaXJhdGlvblRpbWU8PWUmJihhLmV4cGlyYXRpb25UaW1lPTApLCRoKGEsYixlKTtiLmVmZmVjdFRhZ3w9MTtSKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gYWkoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hKXt2YXIgZz1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJiFiaShnKSYmdm9pZCAwPT09Zy5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZyxjaShhLGIsZyxkLGUsZik7YT1VZyhjLnR5cGUsbnVsbCxkLG51bGwsYi5tb2RlLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1nPWEuY2hpbGQ7aWYoZTxmJiYoZT1nLm1lbW9pemVkUHJvcHMsYz1jLmNvbXBhcmUsYz1udWxsIT09Yz9jOmJmLGMoZSxkKSYmYS5yZWY9PT1iLnJlZikpcmV0dXJuICRoKGEsYixmKTtiLmVmZmVjdFRhZ3w9MTthPVNnKGcsZCk7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfVxuZnVuY3Rpb24gY2koYSxiLGMsZCxlLGYpe3JldHVybiBudWxsIT09YSYmYmYoYS5tZW1vaXplZFByb3BzLGQpJiZhLnJlZj09PWIucmVmJiYocmc9ITEsZTxmKT8oYi5leHBpcmF0aW9uVGltZT1hLmV4cGlyYXRpb25UaW1lLCRoKGEsYixmKSk6ZGkoYSxiLGMsZCxmKX1mdW5jdGlvbiBlaShhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmVmZmVjdFRhZ3w9MTI4fWZ1bmN0aW9uIGRpKGEsYixjLGQsZSl7dmFyIGY9TChjKT9CZjpKLmN1cnJlbnQ7Zj1DZihiLGYpO3FnKGIsZSk7Yz1vaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiFyZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZWZmZWN0VGFnJj0tNTE3LGEuZXhwaXJhdGlvblRpbWU8PWUmJihhLmV4cGlyYXRpb25UaW1lPTApLCRoKGEsYixlKTtiLmVmZmVjdFRhZ3w9MTtSKGEsYixjLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gZmkoYSxiLGMsZCxlKXtpZihMKGMpKXt2YXIgZj0hMDtHZihiKX1lbHNlIGY9ITE7cWcoYixlKTtpZihudWxsPT09Yi5zdGF0ZU5vZGUpbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpLExnKGIsYyxkKSxOZyhiLGMsZCxlKSxkPSEwO2Vsc2UgaWYobnVsbD09PWEpe3ZhciBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzO2cucHJvcHM9aDt2YXIgaz1nLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD1zZyhsKToobD1MKGMpP0JmOkouY3VycmVudCxsPUNmKGIsbCkpO3ZhciBtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLHA9XCJmdW5jdGlvblwiPT09dHlwZW9mIG18fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlO3B8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8ayE9PWwpJiZNZyhiLGcsZCxsKTt0Zz0hMTt2YXIgeD1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT14O3pnKGIsZCxnLGUpO2s9Yi5tZW1vaXplZFN0YXRlO2ghPT1kfHx4IT09a3x8Sy5jdXJyZW50fHx0Zz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihGZyhiLGMsbSxkKSxrPWIubWVtb2l6ZWRTdGF0ZSksKGg9dGd8fEtnKGIsYyxoLGQseCxrLGwpKT8ocHx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50JiZnLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWspLGcucHJvcHM9ZCxnLnN0YXRlPWssZy5jb250ZXh0PWwsZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksZD0hMSl9ZWxzZSBnPWIuc3RhdGVOb2RlLHZnKGEsYiksaD1iLm1lbW9pemVkUHJvcHMsZy5wcm9wcz1iLnR5cGU9PT1iLmVsZW1lbnRUeXBlP2g6aWcoYi50eXBlLGgpLGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZSxcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9c2cobCk6KGw9TChjKT9CZjpKLmN1cnJlbnQsbD1DZihiLGwpKSxtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLChwPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8ayE9PWwpJiZNZyhiLGcsZCxsKSx0Zz0hMSxrPWIubWVtb2l6ZWRTdGF0ZSxnLnN0YXRlPWssemcoYixkLGcsZSkseD1iLm1lbW9pemVkU3RhdGUsaCE9PWR8fGshPT14fHxLLmN1cnJlbnR8fHRnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbSYmKEZnKGIsYyxtLGQpLHg9Yi5tZW1vaXplZFN0YXRlKSwobT10Z3x8S2coYixjLGgsZCxrLHgsbCkpPyhwfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUmJmcuY29tcG9uZW50V2lsbFVwZGF0ZShkLFxueCxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLHgsbCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZWZmZWN0VGFnfD0yNTYpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPXgpLGcucHJvcHM9ZCxnLnN0YXRlPXgsZy5jb250ZXh0PWwsZD1tKTpcbihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjU2KSxkPSExKTtyZXR1cm4gZ2koYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24gZ2koYSxiLGMsZCxlLGYpe2VpKGEsYik7dmFyIGc9MCE9PShiLmVmZmVjdFRhZyY2NCk7aWYoIWQmJiFnKXJldHVybiBlJiZIZihiLGMsITEpLCRoKGEsYixmKTtkPWIuc3RhdGVOb2RlO1loLmN1cnJlbnQ9Yjt2YXIgaD1nJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I/bnVsbDpkLnJlbmRlcigpO2IuZWZmZWN0VGFnfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPVhnKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9WGcoYixudWxsLGgsZikpOlIoYSxiLGgsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7ZSYmSGYoYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBoaShhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P0VmKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJkVmKGEsYi5jb250ZXh0LCExKTtkaChhLGIuY29udGFpbmVySW5mbyl9XG52YXIgaWk9e2RlaHlkcmF0ZWQ6bnVsbCxyZXRyeVRpbWU6MH07XG5mdW5jdGlvbiBqaShhLGIsYyl7dmFyIGQ9Yi5tb2RlLGU9Yi5wZW5kaW5nUHJvcHMsZj1NLmN1cnJlbnQsZz0hMSxoOyhoPTAhPT0oYi5lZmZlY3RUYWcmNjQpKXx8KGg9MCE9PShmJjIpJiYobnVsbD09PWF8fG51bGwhPT1hLm1lbW9pemVkU3RhdGUpKTtoPyhnPSEwLGIuZWZmZWN0VGFnJj0tNjUpOm51bGwhPT1hJiZudWxsPT09YS5tZW1vaXplZFN0YXRlfHx2b2lkIDA9PT1lLmZhbGxiYWNrfHwhMD09PWUudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fChmfD0xKTtJKE0sZiYxKTtpZihudWxsPT09YSl7dm9pZCAwIT09ZS5mYWxsYmFjayYmVWgoYik7aWYoZyl7Zz1lLmZhbGxiYWNrO2U9V2cobnVsbCxkLDAsbnVsbCk7ZS5yZXR1cm49YjtpZigwPT09KGIubW9kZSYyKSlmb3IoYT1udWxsIT09Yi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCxlLmNoaWxkPWE7bnVsbCE9PWE7KWEucmV0dXJuPWUsYT1hLnNpYmxpbmc7Yz1XZyhnLGQsYyxudWxsKTtjLnJldHVybj1cbmI7ZS5zaWJsaW5nPWM7Yi5tZW1vaXplZFN0YXRlPWlpO2IuY2hpbGQ9ZTtyZXR1cm4gY31kPWUuY2hpbGRyZW47Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGIuY2hpbGQ9WWcoYixudWxsLGQsYyl9aWYobnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSl7YT1hLmNoaWxkO2Q9YS5zaWJsaW5nO2lmKGcpe2U9ZS5mYWxsYmFjaztjPVNnKGEsYS5wZW5kaW5nUHJvcHMpO2MucmV0dXJuPWI7aWYoMD09PShiLm1vZGUmMikmJihnPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkLGchPT1hLmNoaWxkKSlmb3IoYy5jaGlsZD1nO251bGwhPT1nOylnLnJldHVybj1jLGc9Zy5zaWJsaW5nO2Q9U2coZCxlKTtkLnJldHVybj1iO2Muc2libGluZz1kO2MuY2hpbGRFeHBpcmF0aW9uVGltZT0wO2IubWVtb2l6ZWRTdGF0ZT1paTtiLmNoaWxkPWM7cmV0dXJuIGR9Yz1YZyhiLGEuY2hpbGQsZS5jaGlsZHJlbixjKTtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gYi5jaGlsZD1cbmN9YT1hLmNoaWxkO2lmKGcpe2c9ZS5mYWxsYmFjaztlPVdnKG51bGwsZCwwLG51bGwpO2UucmV0dXJuPWI7ZS5jaGlsZD1hO251bGwhPT1hJiYoYS5yZXR1cm49ZSk7aWYoMD09PShiLm1vZGUmMikpZm9yKGE9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQsZS5jaGlsZD1hO251bGwhPT1hOylhLnJldHVybj1lLGE9YS5zaWJsaW5nO2M9V2coZyxkLGMsbnVsbCk7Yy5yZXR1cm49YjtlLnNpYmxpbmc9YztjLmVmZmVjdFRhZ3w9MjtlLmNoaWxkRXhwaXJhdGlvblRpbWU9MDtiLm1lbW9pemVkU3RhdGU9aWk7Yi5jaGlsZD1lO3JldHVybiBjfWIubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBiLmNoaWxkPVhnKGIsYSxlLmNoaWxkcmVuLGMpfVxuZnVuY3Rpb24ga2koYSxiKXthLmV4cGlyYXRpb25UaW1lPGImJihhLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZjLmV4cGlyYXRpb25UaW1lPGImJihjLmV4cGlyYXRpb25UaW1lPWIpO3BnKGEucmV0dXJuLGIpfWZ1bmN0aW9uIGxpKGEsYixjLGQsZSxmKXt2YXIgZz1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWc/YS5tZW1vaXplZFN0YXRlPXtpc0JhY2t3YXJkczpiLHJlbmRlcmluZzpudWxsLHJlbmRlcmluZ1N0YXJ0VGltZTowLGxhc3Q6ZCx0YWlsOmMsdGFpbEV4cGlyYXRpb246MCx0YWlsTW9kZTplLGxhc3RFZmZlY3Q6Zn06KGcuaXNCYWNrd2FyZHM9YixnLnJlbmRlcmluZz1udWxsLGcucmVuZGVyaW5nU3RhcnRUaW1lPTAsZy5sYXN0PWQsZy50YWlsPWMsZy50YWlsRXhwaXJhdGlvbj0wLGcudGFpbE1vZGU9ZSxnLmxhc3RFZmZlY3Q9Zil9XG5mdW5jdGlvbiBtaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLnJldmVhbE9yZGVyLGY9ZC50YWlsO1IoYSxiLGQuY2hpbGRyZW4sYyk7ZD1NLmN1cnJlbnQ7aWYoMCE9PShkJjIpKWQ9ZCYxfDIsYi5lZmZlY3RUYWd8PTY0O2Vsc2V7aWYobnVsbCE9PWEmJjAhPT0oYS5lZmZlY3RUYWcmNjQpKWE6Zm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2lmKDEzPT09YS50YWcpbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYma2koYSxjKTtlbHNlIGlmKDE5PT09YS50YWcpa2koYSxjKTtlbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YilicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1iKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfWQmPTF9SShNLGQpO2lmKDA9PT0oYi5tb2RlJjIpKWIubWVtb2l6ZWRTdGF0ZT1cbm51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWE9Yy5hbHRlcm5hdGUsbnVsbCE9PWEmJm51bGw9PT1oaChhKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO2xpKGIsITEsZSxjLGYsYi5sYXN0RWZmZWN0KTticmVhaztjYXNlIFwiYmFja3dhcmRzXCI6Yz1udWxsO2U9Yi5jaGlsZDtmb3IoYi5jaGlsZD1udWxsO251bGwhPT1lOyl7YT1lLmFsdGVybmF0ZTtpZihudWxsIT09YSYmbnVsbD09PWhoKGEpKXtiLmNoaWxkPWU7YnJlYWt9YT1lLnNpYmxpbmc7ZS5zaWJsaW5nPWM7Yz1lO2U9YX1saShiLCEwLGMsbnVsbCxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcInRvZ2V0aGVyXCI6bGkoYiwhMSxudWxsLG51bGwsdm9pZCAwLGIubGFzdEVmZmVjdCk7YnJlYWs7ZGVmYXVsdDpiLm1lbW9pemVkU3RhdGU9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uICRoKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTt2YXIgZD1iLmV4cGlyYXRpb25UaW1lOzAhPT1kJiZCZyhkKTtpZihiLmNoaWxkRXhwaXJhdGlvblRpbWU8YylyZXR1cm4gbnVsbDtpZihudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQpdGhyb3cgRXJyb3IodSgxNTMpKTtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO2M9U2coYSxhLnBlbmRpbmdQcm9wcyk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPVNnKGEsYS5wZW5kaW5nUHJvcHMpLGMucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9dmFyIG5pLG9pLHBpLHFpO1xubmk9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9Yi5jaGlsZDtudWxsIT09Yzspe2lmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKWEuYXBwZW5kQ2hpbGQoYy5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWMudGFnJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319O29pPWZ1bmN0aW9uKCl7fTtcbnBpPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9YS5tZW1vaXplZFByb3BzO2lmKGYhPT1kKXt2YXIgZz1iLnN0YXRlTm9kZTtjaCgkZy5jdXJyZW50KTthPW51bGw7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOmY9emIoZyxmKTtkPXpiKGcsZCk7YT1bXTticmVhaztjYXNlIFwib3B0aW9uXCI6Zj1HYihnLGYpO2Q9R2IoZyxkKTthPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpmPW4oe30sZix7dmFsdWU6dm9pZCAwfSk7ZD1uKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2E9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6Zj1JYihnLGYpO2Q9SWIoZyxkKTthPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGYub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGcub25jbGljaz1zZCl9b2QoYyxkKTt2YXIgaCxrO2M9bnVsbDtmb3IoaCBpbiBmKWlmKCFkLmhhc093blByb3BlcnR5KGgpJiZmLmhhc093blByb3BlcnR5KGgpJiZudWxsIT1mW2hdKWlmKFwic3R5bGVcIj09PVxuaClmb3IoayBpbiBnPWZbaF0sZylnLmhhc093blByb3BlcnR5KGspJiYoY3x8KGM9e30pLGNba109XCJcIik7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWgmJlwiY2hpbGRyZW5cIiE9PWgmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1oJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09aCYmXCJhdXRvRm9jdXNcIiE9PWgmJihRYS5oYXNPd25Qcm9wZXJ0eShoKT9hfHwoYT1bXSk6KGE9YXx8W10pLnB1c2goaCxudWxsKSk7Zm9yKGggaW4gZCl7dmFyIGw9ZFtoXTtnPW51bGwhPWY/ZltoXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShoKSYmbCE9PWcmJihudWxsIT1sfHxudWxsIT1nKSlpZihcInN0eWxlXCI9PT1oKWlmKGcpe2ZvcihrIGluIGcpIWcuaGFzT3duUHJvcGVydHkoayl8fGwmJmwuaGFzT3duUHJvcGVydHkoayl8fChjfHwoYz17fSksY1trXT1cIlwiKTtmb3IoayBpbiBsKWwuaGFzT3duUHJvcGVydHkoaykmJmdba10hPT1sW2tdJiYoY3x8KGM9e30pLFxuY1trXT1sW2tdKX1lbHNlIGN8fChhfHwoYT1bXSksYS5wdXNoKGgsYykpLGM9bDtlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09aD8obD1sP2wuX19odG1sOnZvaWQgMCxnPWc/Zy5fX2h0bWw6dm9pZCAwLG51bGwhPWwmJmchPT1sJiYoYT1hfHxbXSkucHVzaChoLGwpKTpcImNoaWxkcmVuXCI9PT1oP2c9PT1sfHxcInN0cmluZ1wiIT09dHlwZW9mIGwmJlwibnVtYmVyXCIhPT10eXBlb2YgbHx8KGE9YXx8W10pLnB1c2goaCxcIlwiK2wpOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1oJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09aCYmKFFhLmhhc093blByb3BlcnR5KGgpPyhudWxsIT1sJiZyZChlLGgpLGF8fGc9PT1sfHwoYT1bXSkpOihhPWF8fFtdKS5wdXNoKGgsbCkpfWMmJihhPWF8fFtdKS5wdXNoKFwic3R5bGVcIixjKTtlPWE7aWYoYi51cGRhdGVRdWV1ZT1lKWIuZWZmZWN0VGFnfD00fX07XG5xaT1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmKGIuZWZmZWN0VGFnfD00KX07ZnVuY3Rpb24gcmkoYSxiKXtzd2l0Y2goYS50YWlsTW9kZSl7Y2FzZSBcImhpZGRlblwiOmI9YS50YWlsO2Zvcih2YXIgYz1udWxsO251bGwhPT1iOyludWxsIT09Yi5hbHRlcm5hdGUmJihjPWIpLGI9Yi5zaWJsaW5nO251bGw9PT1jP2EudGFpbD1udWxsOmMuc2libGluZz1udWxsO2JyZWFrO2Nhc2UgXCJjb2xsYXBzZWRcIjpjPWEudGFpbDtmb3IodmFyIGQ9bnVsbDtudWxsIT09YzspbnVsbCE9PWMuYWx0ZXJuYXRlJiYoZD1jKSxjPWMuc2libGluZztudWxsPT09ZD9ifHxudWxsPT09YS50YWlsP2EudGFpbD1udWxsOmEudGFpbC5zaWJsaW5nPW51bGw6ZC5zaWJsaW5nPW51bGx9fVxuZnVuY3Rpb24gc2koYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmNhc2UgMTY6Y2FzZSAxNTpjYXNlIDA6Y2FzZSAxMTpjYXNlIDc6Y2FzZSA4OmNhc2UgMTI6Y2FzZSA5OmNhc2UgMTQ6cmV0dXJuIG51bGw7Y2FzZSAxOnJldHVybiBMKGIudHlwZSkmJkRmKCksbnVsbDtjYXNlIDM6cmV0dXJuIGVoKCksSChLKSxIKEopLGM9Yi5zdGF0ZU5vZGUsYy5wZW5kaW5nQ29udGV4dCYmKGMuY29udGV4dD1jLnBlbmRpbmdDb250ZXh0LGMucGVuZGluZ0NvbnRleHQ9bnVsbCksbnVsbCE9PWEmJm51bGwhPT1hLmNoaWxkfHwhV2goYil8fChiLmVmZmVjdFRhZ3w9NCksb2koYiksbnVsbDtjYXNlIDU6Z2goYik7Yz1jaChiaC5jdXJyZW50KTt2YXIgZT1iLnR5cGU7aWYobnVsbCE9PWEmJm51bGwhPWIuc3RhdGVOb2RlKXBpKGEsYixlLGQsYyksYS5yZWYhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpO2Vsc2V7aWYoIWQpe2lmKG51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih1KDE2NikpO1xucmV0dXJuIG51bGx9YT1jaCgkZy5jdXJyZW50KTtpZihXaChiKSl7ZD1iLnN0YXRlTm9kZTtlPWIudHlwZTt2YXIgZj1iLm1lbW9pemVkUHJvcHM7ZFtNZF09YjtkW05kXT1mO3N3aXRjaChlKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkYoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGE9MDthPGFjLmxlbmd0aDthKyspRihhY1thXSxkKTticmVhaztjYXNlIFwic291cmNlXCI6RihcImVycm9yXCIsZCk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RihcImVycm9yXCIsZCk7RihcImxvYWRcIixkKTticmVhaztjYXNlIFwiZm9ybVwiOkYoXCJyZXNldFwiLGQpO0YoXCJzdWJtaXRcIixkKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkYoXCJ0b2dnbGVcIixkKTticmVhaztjYXNlIFwiaW5wdXRcIjpBYihkLGYpO0YoXCJpbnZhbGlkXCIsZCk7cmQoYyxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpkLl93cmFwcGVyU3RhdGU9XG57d2FzTXVsdGlwbGU6ISFmLm11bHRpcGxlfTtGKFwiaW52YWxpZFwiLGQpO3JkKGMsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpKYihkLGYpLEYoXCJpbnZhbGlkXCIsZCkscmQoYyxcIm9uQ2hhbmdlXCIpfW9kKGUsZik7YT1udWxsO2Zvcih2YXIgZyBpbiBmKWlmKGYuaGFzT3duUHJvcGVydHkoZykpe3ZhciBoPWZbZ107XCJjaGlsZHJlblwiPT09Zz9cInN0cmluZ1wiPT09dHlwZW9mIGg/ZC50ZXh0Q29udGVudCE9PWgmJihhPVtcImNoaWxkcmVuXCIsaF0pOlwibnVtYmVyXCI9PT10eXBlb2YgaCYmZC50ZXh0Q29udGVudCE9PVwiXCIraCYmKGE9W1wiY2hpbGRyZW5cIixcIlwiK2hdKTpRYS5oYXNPd25Qcm9wZXJ0eShnKSYmbnVsbCE9aCYmcmQoYyxnKX1zd2l0Y2goZSl7Y2FzZSBcImlucHV0XCI6eGIoZCk7RWIoZCxmLCEwKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjp4YihkKTtMYihkKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGYub25DbGljayYmXG4oZC5vbmNsaWNrPXNkKX1jPWE7Yi51cGRhdGVRdWV1ZT1jO251bGwhPT1jJiYoYi5lZmZlY3RUYWd8PTQpfWVsc2V7Zz05PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudDthPT09cWQmJihhPU5iKGUpKTthPT09cWQ/XCJzY3JpcHRcIj09PWU/KGE9Zy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGEuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsYT1hLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpOlwic3RyaW5nXCI9PT10eXBlb2YgZC5pcz9hPWcuY3JlYXRlRWxlbWVudChlLHtpczpkLmlzfSk6KGE9Zy5jcmVhdGVFbGVtZW50KGUpLFwic2VsZWN0XCI9PT1lJiYoZz1hLGQubXVsdGlwbGU/Zy5tdWx0aXBsZT0hMDpkLnNpemUmJihnLnNpemU9ZC5zaXplKSkpOmE9Zy5jcmVhdGVFbGVtZW50TlMoYSxlKTthW01kXT1iO2FbTmRdPWQ7bmkoYSxiLCExLCExKTtiLnN0YXRlTm9kZT1hO2c9cGQoZSxkKTtzd2l0Y2goZSl7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpGKFwibG9hZFwiLFxuYSk7aD1kO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihoPTA7aDxhYy5sZW5ndGg7aCsrKUYoYWNbaF0sYSk7aD1kO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpGKFwiZXJyb3JcIixhKTtoPWQ7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RihcImVycm9yXCIsYSk7RihcImxvYWRcIixhKTtoPWQ7YnJlYWs7Y2FzZSBcImZvcm1cIjpGKFwicmVzZXRcIixhKTtGKFwic3VibWl0XCIsYSk7aD1kO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RihcInRvZ2dsZVwiLGEpO2g9ZDticmVhaztjYXNlIFwiaW5wdXRcIjpBYihhLGQpO2g9emIoYSxkKTtGKFwiaW52YWxpZFwiLGEpO3JkKGMsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwib3B0aW9uXCI6aD1HYihhLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZC5tdWx0aXBsZX07aD1uKHt9LGQse3ZhbHVlOnZvaWQgMH0pO0YoXCJpbnZhbGlkXCIsYSk7cmQoYyxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOkpiKGEsXG5kKTtoPUliKGEsZCk7RihcImludmFsaWRcIixhKTtyZChjLFwib25DaGFuZ2VcIik7YnJlYWs7ZGVmYXVsdDpoPWR9b2QoZSxoKTt2YXIgaz1oO2ZvcihmIGluIGspaWYoay5oYXNPd25Qcm9wZXJ0eShmKSl7dmFyIGw9a1tmXTtcInN0eWxlXCI9PT1mP21kKGEsbCk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zj8obD1sP2wuX19odG1sOnZvaWQgMCxudWxsIT1sJiZRYihhLGwpKTpcImNoaWxkcmVuXCI9PT1mP1wic3RyaW5nXCI9PT10eXBlb2YgbD8oXCJ0ZXh0YXJlYVwiIT09ZXx8XCJcIiE9PWwpJiZSYihhLGwpOlwibnVtYmVyXCI9PT10eXBlb2YgbCYmUmIoYSxcIlwiK2wpOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1mJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ZiYmXCJhdXRvRm9jdXNcIiE9PWYmJihRYS5oYXNPd25Qcm9wZXJ0eShmKT9udWxsIT1sJiZyZChjLGYpOm51bGwhPWwmJnFiKGEsZixsLGcpKX1zd2l0Y2goZSl7Y2FzZSBcImlucHV0XCI6eGIoYSk7RWIoYSxkLCExKTtcbmJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOnhiKGEpO0xiKGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1kLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIityYihkLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFkLm11bHRpcGxlO2M9ZC52YWx1ZTtudWxsIT1jP0hiKGEsISFkLm11bHRpcGxlLGMsITEpOm51bGwhPWQuZGVmYXVsdFZhbHVlJiZIYihhLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC5vbkNsaWNrJiYoYS5vbmNsaWNrPXNkKX1GZChlLGQpJiYoYi5lZmZlY3RUYWd8PTQpfW51bGwhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpfXJldHVybiBudWxsO2Nhc2UgNjppZihhJiZudWxsIT1iLnN0YXRlTm9kZSlxaShhLGIsYS5tZW1vaXplZFByb3BzLGQpO2Vsc2V7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBkJiZudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IodSgxNjYpKTtcbmM9Y2goYmguY3VycmVudCk7Y2goJGcuY3VycmVudCk7V2goYik/KGM9Yi5zdGF0ZU5vZGUsZD1iLm1lbW9pemVkUHJvcHMsY1tNZF09YixjLm5vZGVWYWx1ZSE9PWQmJihiLmVmZmVjdFRhZ3w9NCkpOihjPSg5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZCksY1tNZF09YixiLnN0YXRlTm9kZT1jKX1yZXR1cm4gbnVsbDtjYXNlIDEzOkgoTSk7ZD1iLm1lbW9pemVkU3RhdGU7aWYoMCE9PShiLmVmZmVjdFRhZyY2NCkpcmV0dXJuIGIuZXhwaXJhdGlvblRpbWU9YyxiO2M9bnVsbCE9PWQ7ZD0hMTtudWxsPT09YT92b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMuZmFsbGJhY2smJldoKGIpOihlPWEubWVtb2l6ZWRTdGF0ZSxkPW51bGwhPT1lLGN8fG51bGw9PT1lfHwoZT1hLmNoaWxkLnNpYmxpbmcsbnVsbCE9PWUmJihmPWIuZmlyc3RFZmZlY3QsbnVsbCE9PWY/KGIuZmlyc3RFZmZlY3Q9ZSxlLm5leHRFZmZlY3Q9Zik6KGIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PVxuZSxlLm5leHRFZmZlY3Q9bnVsbCksZS5lZmZlY3RUYWc9OCkpKTtpZihjJiYhZCYmMCE9PShiLm1vZGUmMikpaWYobnVsbD09PWEmJiEwIT09Yi5tZW1vaXplZFByb3BzLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrfHwwIT09KE0uY3VycmVudCYxKSlTPT09dGkmJihTPXVpKTtlbHNle2lmKFM9PT10aXx8Uz09PXVpKVM9dmk7MCE9PXdpJiZudWxsIT09VCYmKHhpKFQsVSkseWkoVCx3aSkpfWlmKGN8fGQpYi5lZmZlY3RUYWd8PTQ7cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBlaCgpLG9pKGIpLG51bGw7Y2FzZSAxMDpyZXR1cm4gb2coYiksbnVsbDtjYXNlIDE3OnJldHVybiBMKGIudHlwZSkmJkRmKCksbnVsbDtjYXNlIDE5OkgoTSk7ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7ZT0wIT09KGIuZWZmZWN0VGFnJjY0KTtmPWQucmVuZGVyaW5nO2lmKG51bGw9PT1mKWlmKGUpcmkoZCwhMSk7ZWxzZXtpZihTIT09dGl8fG51bGwhPT1hJiYwIT09KGEuZWZmZWN0VGFnJlxuNjQpKWZvcihmPWIuY2hpbGQ7bnVsbCE9PWY7KXthPWhoKGYpO2lmKG51bGwhPT1hKXtiLmVmZmVjdFRhZ3w9NjQ7cmkoZCwhMSk7ZT1hLnVwZGF0ZVF1ZXVlO251bGwhPT1lJiYoYi51cGRhdGVRdWV1ZT1lLGIuZWZmZWN0VGFnfD00KTtudWxsPT09ZC5sYXN0RWZmZWN0JiYoYi5maXJzdEVmZmVjdD1udWxsKTtiLmxhc3RFZmZlY3Q9ZC5sYXN0RWZmZWN0O2ZvcihkPWIuY2hpbGQ7bnVsbCE9PWQ7KWU9ZCxmPWMsZS5lZmZlY3RUYWcmPTIsZS5uZXh0RWZmZWN0PW51bGwsZS5maXJzdEVmZmVjdD1udWxsLGUubGFzdEVmZmVjdD1udWxsLGE9ZS5hbHRlcm5hdGUsbnVsbD09PWE/KGUuY2hpbGRFeHBpcmF0aW9uVGltZT0wLGUuZXhwaXJhdGlvblRpbWU9ZixlLmNoaWxkPW51bGwsZS5tZW1vaXplZFByb3BzPW51bGwsZS5tZW1vaXplZFN0YXRlPW51bGwsZS51cGRhdGVRdWV1ZT1udWxsLGUuZGVwZW5kZW5jaWVzPW51bGwpOihlLmNoaWxkRXhwaXJhdGlvblRpbWU9YS5jaGlsZEV4cGlyYXRpb25UaW1lLFxuZS5leHBpcmF0aW9uVGltZT1hLmV4cGlyYXRpb25UaW1lLGUuY2hpbGQ9YS5jaGlsZCxlLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzLGUubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGUsZS51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGY9YS5kZXBlbmRlbmNpZXMsZS5kZXBlbmRlbmNpZXM9bnVsbD09PWY/bnVsbDp7ZXhwaXJhdGlvblRpbWU6Zi5leHBpcmF0aW9uVGltZSxmaXJzdENvbnRleHQ6Zi5maXJzdENvbnRleHQscmVzcG9uZGVyczpmLnJlc3BvbmRlcnN9KSxkPWQuc2libGluZztJKE0sTS5jdXJyZW50JjF8Mik7cmV0dXJuIGIuY2hpbGR9Zj1mLnNpYmxpbmd9fWVsc2V7aWYoIWUpaWYoYT1oaChmKSxudWxsIT09YSl7aWYoYi5lZmZlY3RUYWd8PTY0LGU9ITAsYz1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1jJiYoYi51cGRhdGVRdWV1ZT1jLGIuZWZmZWN0VGFnfD00KSxyaShkLCEwKSxudWxsPT09ZC50YWlsJiZcImhpZGRlblwiPT09ZC50YWlsTW9kZSYmIWYuYWx0ZXJuYXRlKXJldHVybiBiPVxuYi5sYXN0RWZmZWN0PWQubGFzdEVmZmVjdCxudWxsIT09YiYmKGIubmV4dEVmZmVjdD1udWxsKSxudWxsfWVsc2UgMiokZigpLWQucmVuZGVyaW5nU3RhcnRUaW1lPmQudGFpbEV4cGlyYXRpb24mJjE8YyYmKGIuZWZmZWN0VGFnfD02NCxlPSEwLHJpKGQsITEpLGIuZXhwaXJhdGlvblRpbWU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPWMtMSk7ZC5pc0JhY2t3YXJkcz8oZi5zaWJsaW5nPWIuY2hpbGQsYi5jaGlsZD1mKTooYz1kLmxhc3QsbnVsbCE9PWM/Yy5zaWJsaW5nPWY6Yi5jaGlsZD1mLGQubGFzdD1mKX1yZXR1cm4gbnVsbCE9PWQudGFpbD8oMD09PWQudGFpbEV4cGlyYXRpb24mJihkLnRhaWxFeHBpcmF0aW9uPSRmKCkrNTAwKSxjPWQudGFpbCxkLnJlbmRlcmluZz1jLGQudGFpbD1jLnNpYmxpbmcsZC5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdCxkLnJlbmRlcmluZ1N0YXJ0VGltZT0kZigpLGMuc2libGluZz1udWxsLGI9TS5jdXJyZW50LEkoTSxlP2ImMXwyOmImMSksYyk6bnVsbH10aHJvdyBFcnJvcih1KDE1NixcbmIudGFnKSk7fWZ1bmN0aW9uIHppKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAxOkwoYS50eXBlKSYmRGYoKTt2YXIgYj1hLmVmZmVjdFRhZztyZXR1cm4gYiY0MDk2PyhhLmVmZmVjdFRhZz1iJi00MDk3fDY0LGEpOm51bGw7Y2FzZSAzOmVoKCk7SChLKTtIKEopO2I9YS5lZmZlY3RUYWc7aWYoMCE9PShiJjY0KSl0aHJvdyBFcnJvcih1KDI4NSkpO2EuZWZmZWN0VGFnPWImLTQwOTd8NjQ7cmV0dXJuIGE7Y2FzZSA1OnJldHVybiBnaChhKSxudWxsO2Nhc2UgMTM6cmV0dXJuIEgoTSksYj1hLmVmZmVjdFRhZyxiJjQwOTY/KGEuZWZmZWN0VGFnPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDE5OnJldHVybiBIKE0pLG51bGw7Y2FzZSA0OnJldHVybiBlaCgpLG51bGw7Y2FzZSAxMDpyZXR1cm4gb2coYSksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX1mdW5jdGlvbiBBaShhLGIpe3JldHVybnt2YWx1ZTphLHNvdXJjZTpiLHN0YWNrOkphKGIpfX1cbnZhciBCaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha1NldD9XZWFrU2V0OlNldDtmdW5jdGlvbiBDaShhLGIpe3ZhciBjPWIuc291cmNlLGQ9Yi5zdGFjaztudWxsPT09ZCYmbnVsbCE9PWMmJihkPUphKGMpKTtudWxsIT09YyYmSWEoYy50eXBlKTtiPWIudmFsdWU7bnVsbCE9PWEmJjE9PT1hLnRhZyYmSWEoYS50eXBlKTt0cnl7Y29uc29sZS5lcnJvcihiKX1jYXRjaChlKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgZTt9KX19ZnVuY3Rpb24gRGkoYSxiKXt0cnl7Yi5wcm9wcz1hLm1lbW9pemVkUHJvcHMsYi5zdGF0ZT1hLm1lbW9pemVkU3RhdGUsYi5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGMpe0VpKGEsYyl9fWZ1bmN0aW9uIEZpKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXRyeXtiKG51bGwpfWNhdGNoKGMpe0VpKGEsYyl9ZWxzZSBiLmN1cnJlbnQ9bnVsbH1cbmZ1bmN0aW9uIEdpKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmNhc2UgMjI6cmV0dXJuO2Nhc2UgMTppZihiLmVmZmVjdFRhZyYyNTYmJm51bGwhPT1hKXt2YXIgYz1hLm1lbW9pemVkUHJvcHMsZD1hLm1lbW9pemVkU3RhdGU7YT1iLnN0YXRlTm9kZTtiPWEuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoYi5lbGVtZW50VHlwZT09PWIudHlwZT9jOmlnKGIudHlwZSxjKSxkKTthLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPWJ9cmV0dXJuO2Nhc2UgMzpjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OnJldHVybn10aHJvdyBFcnJvcih1KDE2MykpO31cbmZ1bmN0aW9uIEhpKGEsYil7Yj1iLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe3ZhciBjPWI9Yi5uZXh0O2Rve2lmKChjLnRhZyZhKT09PWEpe3ZhciBkPWMuZGVzdHJveTtjLmRlc3Ryb3k9dm9pZCAwO3ZvaWQgMCE9PWQmJmQoKX1jPWMubmV4dH13aGlsZShjIT09Yil9fWZ1bmN0aW9uIElpKGEsYil7Yj1iLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe3ZhciBjPWI9Yi5uZXh0O2Rve2lmKChjLnRhZyZhKT09PWEpe3ZhciBkPWMuY3JlYXRlO2MuZGVzdHJveT1kKCl9Yz1jLm5leHR9d2hpbGUoYyE9PWIpfX1cbmZ1bmN0aW9uIEppKGEsYixjKXtzd2l0Y2goYy50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpJaSgzLGMpO3JldHVybjtjYXNlIDE6YT1jLnN0YXRlTm9kZTtpZihjLmVmZmVjdFRhZyY0KWlmKG51bGw9PT1iKWEuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciBkPWMuZWxlbWVudFR5cGU9PT1jLnR5cGU/Yi5tZW1vaXplZFByb3BzOmlnKGMudHlwZSxiLm1lbW9pemVkUHJvcHMpO2EuY29tcG9uZW50RGlkVXBkYXRlKGQsYi5tZW1vaXplZFN0YXRlLGEuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfWI9Yy51cGRhdGVRdWV1ZTtudWxsIT09YiYmQ2coYyxiLGEpO3JldHVybjtjYXNlIDM6Yj1jLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthPW51bGw7aWYobnVsbCE9PWMuY2hpbGQpc3dpdGNoKGMuY2hpbGQudGFnKXtjYXNlIDU6YT1jLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6YT1jLmNoaWxkLnN0YXRlTm9kZX1DZyhjLGIsYSl9cmV0dXJuO1xuY2FzZSA1OmE9Yy5zdGF0ZU5vZGU7bnVsbD09PWImJmMuZWZmZWN0VGFnJjQmJkZkKGMudHlwZSxjLm1lbW9pemVkUHJvcHMpJiZhLmZvY3VzKCk7cmV0dXJuO2Nhc2UgNjpyZXR1cm47Y2FzZSA0OnJldHVybjtjYXNlIDEyOnJldHVybjtjYXNlIDEzOm51bGw9PT1jLm1lbW9pemVkU3RhdGUmJihjPWMuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYz1jLm1lbW9pemVkU3RhdGUsbnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsIT09YyYmVmMoYykpKSk7cmV0dXJuO2Nhc2UgMTk6Y2FzZSAxNzpjYXNlIDIwOmNhc2UgMjE6cmV0dXJufXRocm93IEVycm9yKHUoMTYzKSk7fVxuZnVuY3Rpb24gS2koYSxiLGMpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBMaSYmTGkoYik7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6Y2FzZSAyMjphPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWEmJihhPWEubGFzdEVmZmVjdCxudWxsIT09YSkpe3ZhciBkPWEubmV4dDtjZyg5NzxjPzk3OmMsZnVuY3Rpb24oKXt2YXIgYT1kO2Rve3ZhciBjPWEuZGVzdHJveTtpZih2b2lkIDAhPT1jKXt2YXIgZz1iO3RyeXtjKCl9Y2F0Y2goaCl7RWkoZyxoKX19YT1hLm5leHR9d2hpbGUoYSE9PWQpfSl9YnJlYWs7Y2FzZSAxOkZpKGIpO2M9Yi5zdGF0ZU5vZGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGMuY29tcG9uZW50V2lsbFVubW91bnQmJkRpKGIsYyk7YnJlYWs7Y2FzZSA1OkZpKGIpO2JyZWFrO2Nhc2UgNDpNaShhLGIsYyl9fVxuZnVuY3Rpb24gTmkoYSl7dmFyIGI9YS5hbHRlcm5hdGU7YS5yZXR1cm49bnVsbDthLmNoaWxkPW51bGw7YS5tZW1vaXplZFN0YXRlPW51bGw7YS51cGRhdGVRdWV1ZT1udWxsO2EuZGVwZW5kZW5jaWVzPW51bGw7YS5hbHRlcm5hdGU9bnVsbDthLmZpcnN0RWZmZWN0PW51bGw7YS5sYXN0RWZmZWN0PW51bGw7YS5wZW5kaW5nUHJvcHM9bnVsbDthLm1lbW9pemVkUHJvcHM9bnVsbDthLnN0YXRlTm9kZT1udWxsO251bGwhPT1iJiZOaShiKX1mdW5jdGlvbiBPaShhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIFBpKGEpe2E6e2Zvcih2YXIgYj1hLnJldHVybjtudWxsIT09Yjspe2lmKE9pKGIpKXt2YXIgYz1iO2JyZWFrIGF9Yj1iLnJldHVybn10aHJvdyBFcnJvcih1KDE2MCkpO31iPWMuc3RhdGVOb2RlO3N3aXRjaChjLnRhZyl7Y2FzZSA1OnZhciBkPSExO2JyZWFrO2Nhc2UgMzpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2Nhc2UgNDpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgxNjEpKTt9Yy5lZmZlY3RUYWcmMTYmJihSYihiLFwiXCIpLGMuZWZmZWN0VGFnJj0tMTcpO2E6Yjpmb3IoYz1hOzspe2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8T2koYy5yZXR1cm4pKXtjPW51bGw7YnJlYWsgYX1jPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Zm9yKGM9Yy5zaWJsaW5nOzUhPT1jLnRhZyYmNiE9PWMudGFnJiYxOCE9PWMudGFnOyl7aWYoYy5lZmZlY3RUYWcmMiljb250aW51ZSBiO1xuaWYobnVsbD09PWMuY2hpbGR8fDQ9PT1jLnRhZyljb250aW51ZSBiO2Vsc2UgYy5jaGlsZC5yZXR1cm49YyxjPWMuY2hpbGR9aWYoIShjLmVmZmVjdFRhZyYyKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1kP1FpKGEsYyxiKTpSaShhLGMsYil9XG5mdW5jdGlvbiBRaShhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj84PT09Yy5ub2RlVHlwZT9jLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsYik6Yy5pbnNlcnRCZWZvcmUoYSxiKTooOD09PWMubm9kZVR5cGU/KGI9Yy5wYXJlbnROb2RlLGIuaW5zZXJ0QmVmb3JlKGEsYykpOihiPWMsYi5hcHBlbmRDaGlsZChhKSksYz1jLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWMmJnZvaWQgMCE9PWN8fG51bGwhPT1iLm9uY2xpY2t8fChiLm9uY2xpY2s9c2QpKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoUWkoYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylRaShhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBSaShhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj9jLmluc2VydEJlZm9yZShhLGIpOmMuYXBwZW5kQ2hpbGQoYSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKFJpKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspUmkoYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gTWkoYSxiLGMpe2Zvcih2YXIgZD1iLGU9ITEsZixnOzspe2lmKCFlKXtlPWQucmV0dXJuO2E6Zm9yKDs7KXtpZihudWxsPT09ZSl0aHJvdyBFcnJvcih1KDE2MCkpO2Y9ZS5zdGF0ZU5vZGU7c3dpdGNoKGUudGFnKXtjYXNlIDU6Zz0hMTticmVhayBhO2Nhc2UgMzpmPWYuY29udGFpbmVySW5mbztnPSEwO2JyZWFrIGE7Y2FzZSA0OmY9Zi5jb250YWluZXJJbmZvO2c9ITA7YnJlYWsgYX1lPWUucmV0dXJufWU9ITB9aWYoNT09PWQudGFnfHw2PT09ZC50YWcpe2E6Zm9yKHZhciBoPWEsaz1kLGw9YyxtPWs7OylpZihLaShoLG0sbCksbnVsbCE9PW0uY2hpbGQmJjQhPT1tLnRhZyltLmNoaWxkLnJldHVybj1tLG09bS5jaGlsZDtlbHNle2lmKG09PT1rKWJyZWFrIGE7Zm9yKDtudWxsPT09bS5zaWJsaW5nOyl7aWYobnVsbD09PW0ucmV0dXJufHxtLnJldHVybj09PWspYnJlYWsgYTttPW0ucmV0dXJufW0uc2libGluZy5yZXR1cm49bS5yZXR1cm47bT1tLnNpYmxpbmd9Zz8oaD1cbmYsaz1kLnN0YXRlTm9kZSw4PT09aC5ub2RlVHlwZT9oLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoayk6aC5yZW1vdmVDaGlsZChrKSk6Zi5yZW1vdmVDaGlsZChkLnN0YXRlTm9kZSl9ZWxzZSBpZig0PT09ZC50YWcpe2lmKG51bGwhPT1kLmNoaWxkKXtmPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87Zz0hMDtkLmNoaWxkLnJldHVybj1kO2Q9ZC5jaGlsZDtjb250aW51ZX19ZWxzZSBpZihLaShhLGQsYyksbnVsbCE9PWQuY2hpbGQpe2QuY2hpbGQucmV0dXJuPWQ7ZD1kLmNoaWxkO2NvbnRpbnVlfWlmKGQ9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWQuc2libGluZzspe2lmKG51bGw9PT1kLnJldHVybnx8ZC5yZXR1cm49PT1iKXJldHVybjtkPWQucmV0dXJuOzQ9PT1kLnRhZyYmKGU9ITEpfWQuc2libGluZy5yZXR1cm49ZC5yZXR1cm47ZD1kLnNpYmxpbmd9fVxuZnVuY3Rpb24gU2koYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpjYXNlIDIyOkhpKDMsYik7cmV0dXJuO2Nhc2UgMTpyZXR1cm47Y2FzZSA1OnZhciBjPWIuc3RhdGVOb2RlO2lmKG51bGwhPWMpe3ZhciBkPWIubWVtb2l6ZWRQcm9wcyxlPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpkO2E9Yi50eXBlO3ZhciBmPWIudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT1udWxsO2lmKG51bGwhPT1mKXtjW05kXT1kO1wiaW5wdXRcIj09PWEmJlwicmFkaW9cIj09PWQudHlwZSYmbnVsbCE9ZC5uYW1lJiZCYihjLGQpO3BkKGEsZSk7Yj1wZChhLGQpO2ZvcihlPTA7ZTxmLmxlbmd0aDtlKz0yKXt2YXIgZz1mW2VdLGg9ZltlKzFdO1wic3R5bGVcIj09PWc/bWQoYyxoKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nP1FiKGMsaCk6XCJjaGlsZHJlblwiPT09Zz9SYihjLGgpOnFiKGMsZyxoLGIpfXN3aXRjaChhKXtjYXNlIFwiaW5wdXRcIjpDYihjLGQpO2JyZWFrO1xuY2FzZSBcInRleHRhcmVhXCI6S2IoYyxkKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGUsYy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZC5tdWx0aXBsZSxhPWQudmFsdWUsbnVsbCE9YT9IYihjLCEhZC5tdWx0aXBsZSxhLCExKTpiIT09ISFkLm11bHRpcGxlJiYobnVsbCE9ZC5kZWZhdWx0VmFsdWU/SGIoYywhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsITApOkhiKGMsISFkLm11bHRpcGxlLGQubXVsdGlwbGU/W106XCJcIiwhMSkpfX19cmV0dXJuO2Nhc2UgNjppZihudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IodSgxNjIpKTtiLnN0YXRlTm9kZS5ub2RlVmFsdWU9Yi5tZW1vaXplZFByb3BzO3JldHVybjtjYXNlIDM6Yj1iLnN0YXRlTm9kZTtiLmh5ZHJhdGUmJihiLmh5ZHJhdGU9ITEsVmMoYi5jb250YWluZXJJbmZvKSk7cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6Yz1iO251bGw9PT1iLm1lbW9pemVkU3RhdGU/XG5kPSExOihkPSEwLGM9Yi5jaGlsZCxUaT0kZigpKTtpZihudWxsIT09YylhOmZvcihhPWM7Oyl7aWYoNT09PWEudGFnKWY9YS5zdGF0ZU5vZGUsZD8oZj1mLnN0eWxlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLnNldFByb3BlcnR5P2Yuc2V0UHJvcGVydHkoXCJkaXNwbGF5XCIsXCJub25lXCIsXCJpbXBvcnRhbnRcIik6Zi5kaXNwbGF5PVwibm9uZVwiKTooZj1hLnN0YXRlTm9kZSxlPWEubWVtb2l6ZWRQcm9wcy5zdHlsZSxlPXZvaWQgMCE9PWUmJm51bGwhPT1lJiZlLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9lLmRpc3BsYXk6bnVsbCxmLnN0eWxlLmRpc3BsYXk9bGQoXCJkaXNwbGF5XCIsZSkpO2Vsc2UgaWYoNj09PWEudGFnKWEuc3RhdGVOb2RlLm5vZGVWYWx1ZT1kP1wiXCI6YS5tZW1vaXplZFByb3BzO2Vsc2UgaWYoMTM9PT1hLnRhZyYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZS5kZWh5ZHJhdGVkKXtmPWEuY2hpbGQuc2libGluZztmLnJldHVybj1hO2E9XG5mO2NvbnRpbnVlfWVsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPWE7YT1hLmNoaWxkO2NvbnRpbnVlfWlmKGE9PT1jKWJyZWFrO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1jKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfVVpKGIpO3JldHVybjtjYXNlIDE5OlVpKGIpO3JldHVybjtjYXNlIDE3OnJldHVybn10aHJvdyBFcnJvcih1KDE2MykpO31mdW5jdGlvbiBVaShhKXt2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbD09PWMmJihjPWEuc3RhdGVOb2RlPW5ldyBCaSk7Yi5mb3JFYWNoKGZ1bmN0aW9uKGIpe3ZhciBkPVZpLmJpbmQobnVsbCxhLGIpO2MuaGFzKGIpfHwoYy5hZGQoYiksYi50aGVuKGQsZCkpfSl9fVxudmFyIFdpPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwO2Z1bmN0aW9uIFhpKGEsYixjKXtjPXdnKGMsbnVsbCk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7WWl8fChZaT0hMCxaaT1kKTtDaShhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uICRpKGEsYixjKXtjPXdnKGMsbnVsbCk7Yy50YWc9Mzt2YXIgZD1hLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZT1iLnZhbHVlO2MucGF5bG9hZD1mdW5jdGlvbigpe0NpKGEsYik7cmV0dXJuIGQoZSl9fXZhciBmPWEuc3RhdGVOb2RlO251bGwhPT1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5jb21wb25lbnREaWRDYXRjaCYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZCYmKG51bGw9PT1haj9haj1uZXcgU2V0KFt0aGlzXSk6YWouYWRkKHRoaXMpLENpKGEsYikpO3ZhciBjPWIuc3RhY2s7dGhpcy5jb21wb25lbnREaWRDYXRjaChiLnZhbHVlLHtjb21wb25lbnRTdGFjazpudWxsIT09Yz9jOlwiXCJ9KX0pO3JldHVybiBjfVxudmFyIGJqPU1hdGguY2VpbCxjaj1wYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGRqPXBhLlJlYWN0Q3VycmVudE93bmVyLFY9MCxlaj04LGZqPTE2LGdqPTMyLHRpPTAsaGo9MSxpaj0yLHVpPTMsdmk9NCxqaj01LFc9VixUPW51bGwsWD1udWxsLFU9MCxTPXRpLGtqPW51bGwsbGo9MTA3Mzc0MTgyMyxtaj0xMDczNzQxODIzLG5qPW51bGwsd2k9MCxvaj0hMSxUaT0wLHBqPTUwMCxZPW51bGwsWWk9ITEsWmk9bnVsbCxhaj1udWxsLHFqPSExLHJqPW51bGwsc2o9OTAsdGo9bnVsbCx1aj0wLHZqPW51bGwsd2o9MDtmdW5jdGlvbiBHZygpe3JldHVybihXJihmanxnaikpIT09Vj8xMDczNzQxODIxLSgkZigpLzEwfDApOjAhPT13aj93ajp3aj0xMDczNzQxODIxLSgkZigpLzEwfDApfVxuZnVuY3Rpb24gSGcoYSxiLGMpe2I9Yi5tb2RlO2lmKDA9PT0oYiYyKSlyZXR1cm4gMTA3Mzc0MTgyMzt2YXIgZD1hZygpO2lmKDA9PT0oYiY0KSlyZXR1cm4gOTk9PT1kPzEwNzM3NDE4MjM6MTA3Mzc0MTgyMjtpZigoVyZmaikhPT1WKXJldHVybiBVO2lmKG51bGwhPT1jKWE9aGcoYSxjLnRpbWVvdXRNc3wwfHw1RTMsMjUwKTtlbHNlIHN3aXRjaChkKXtjYXNlIDk5OmE9MTA3Mzc0MTgyMzticmVhaztjYXNlIDk4OmE9aGcoYSwxNTAsMTAwKTticmVhaztjYXNlIDk3OmNhc2UgOTY6YT1oZyhhLDVFMywyNTApO2JyZWFrO2Nhc2UgOTU6YT0yO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgzMjYpKTt9bnVsbCE9PVQmJmE9PT1VJiYtLWE7cmV0dXJuIGF9XG5mdW5jdGlvbiBJZyhhLGIpe2lmKDUwPHVqKXRocm93IHVqPTAsdmo9bnVsbCxFcnJvcih1KDE4NSkpO2E9eGooYSxiKTtpZihudWxsIT09YSl7dmFyIGM9YWcoKTsxMDczNzQxODIzPT09Yj8oVyZlaikhPT1WJiYoVyYoZmp8Z2opKT09PVY/eWooYSk6KFooYSksVz09PVYmJmdnKCkpOlooYSk7KFcmNCk9PT1WfHw5OCE9PWMmJjk5IT09Y3x8KG51bGw9PT10aj90aj1uZXcgTWFwKFtbYSxiXV0pOihjPXRqLmdldChhKSwodm9pZCAwPT09Y3x8Yz5iKSYmdGouc2V0KGEsYikpKX19XG5mdW5jdGlvbiB4aihhLGIpe2EuZXhwaXJhdGlvblRpbWU8YiYmKGEuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJmMuZXhwaXJhdGlvblRpbWU8YiYmKGMuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGQ9YS5yZXR1cm4sZT1udWxsO2lmKG51bGw9PT1kJiYzPT09YS50YWcpZT1hLnN0YXRlTm9kZTtlbHNlIGZvcig7bnVsbCE9PWQ7KXtjPWQuYWx0ZXJuYXRlO2QuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoZC5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO251bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGMuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtpZihudWxsPT09ZC5yZXR1cm4mJjM9PT1kLnRhZyl7ZT1kLnN0YXRlTm9kZTticmVha31kPWQucmV0dXJufW51bGwhPT1lJiYoVD09PWUmJihCZyhiKSxTPT09dmkmJnhpKGUsVSkpLHlpKGUsYikpO3JldHVybiBlfVxuZnVuY3Rpb24gemooYSl7dmFyIGI9YS5sYXN0RXhwaXJlZFRpbWU7aWYoMCE9PWIpcmV0dXJuIGI7Yj1hLmZpcnN0UGVuZGluZ1RpbWU7aWYoIUFqKGEsYikpcmV0dXJuIGI7dmFyIGM9YS5sYXN0UGluZ2VkVGltZTthPWEubmV4dEtub3duUGVuZGluZ0xldmVsO2E9Yz5hP2M6YTtyZXR1cm4gMj49YSYmYiE9PWE/MDphfVxuZnVuY3Rpb24gWihhKXtpZigwIT09YS5sYXN0RXhwaXJlZFRpbWUpYS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPTEwNzM3NDE4MjMsYS5jYWxsYmFja1ByaW9yaXR5PTk5LGEuY2FsbGJhY2tOb2RlPWVnKHlqLmJpbmQobnVsbCxhKSk7ZWxzZXt2YXIgYj16aihhKSxjPWEuY2FsbGJhY2tOb2RlO2lmKDA9PT1iKW51bGwhPT1jJiYoYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9MCxhLmNhbGxiYWNrUHJpb3JpdHk9OTApO2Vsc2V7dmFyIGQ9R2coKTsxMDczNzQxODIzPT09Yj9kPTk5OjE9PT1ifHwyPT09Yj9kPTk1OihkPTEwKigxMDczNzQxODIxLWIpLTEwKigxMDczNzQxODIxLWQpLGQ9MD49ZD85OToyNTA+PWQ/OTg6NTI1MD49ZD85Nzo5NSk7aWYobnVsbCE9PWMpe3ZhciBlPWEuY2FsbGJhY2tQcmlvcml0eTtpZihhLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9PT1iJiZlPj1kKXJldHVybjtjIT09VGYmJktmKGMpfWEuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT1cbmI7YS5jYWxsYmFja1ByaW9yaXR5PWQ7Yj0xMDczNzQxODIzPT09Yj9lZyh5ai5iaW5kKG51bGwsYSkpOmRnKGQsQmouYmluZChudWxsLGEpLHt0aW1lb3V0OjEwKigxMDczNzQxODIxLWIpLSRmKCl9KTthLmNhbGxiYWNrTm9kZT1ifX19XG5mdW5jdGlvbiBCaihhLGIpe3dqPTA7aWYoYilyZXR1cm4gYj1HZygpLENqKGEsYiksWihhKSxudWxsO3ZhciBjPXpqKGEpO2lmKDAhPT1jKXtiPWEuY2FsbGJhY2tOb2RlO2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDMyNykpO0RqKCk7YT09PVQmJmM9PT1VfHxFaihhLGMpO2lmKG51bGwhPT1YKXt2YXIgZD1XO1d8PWZqO3ZhciBlPUZqKCk7ZG8gdHJ5e0dqKCk7YnJlYWt9Y2F0Y2goaCl7SGooYSxoKX13aGlsZSgxKTtuZygpO1c9ZDtjai5jdXJyZW50PWU7aWYoUz09PWhqKXRocm93IGI9a2osRWooYSxjKSx4aShhLGMpLFooYSksYjtpZihudWxsPT09WClzd2l0Y2goZT1hLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlLGEuZmluaXNoZWRFeHBpcmF0aW9uVGltZT1jLGQ9UyxUPW51bGwsZCl7Y2FzZSB0aTpjYXNlIGhqOnRocm93IEVycm9yKHUoMzQ1KSk7Y2FzZSBpajpDaihhLDI8Yz8yOmMpO2JyZWFrO2Nhc2UgdWk6eGkoYSxjKTtkPWEubGFzdFN1c3BlbmRlZFRpbWU7XG5jPT09ZCYmKGEubmV4dEtub3duUGVuZGluZ0xldmVsPUlqKGUpKTtpZigxMDczNzQxODIzPT09bGomJihlPVRpK3BqLSRmKCksMTA8ZSkpe2lmKG9qKXt2YXIgZj1hLmxhc3RQaW5nZWRUaW1lO2lmKDA9PT1mfHxmPj1jKXthLmxhc3RQaW5nZWRUaW1lPWM7RWooYSxjKTticmVha319Zj16aihhKTtpZigwIT09ZiYmZiE9PWMpYnJlYWs7aWYoMCE9PWQmJmQhPT1jKXthLmxhc3RQaW5nZWRUaW1lPWQ7YnJlYWt9YS50aW1lb3V0SGFuZGxlPUhkKEpqLmJpbmQobnVsbCxhKSxlKTticmVha31KaihhKTticmVhaztjYXNlIHZpOnhpKGEsYyk7ZD1hLmxhc3RTdXNwZW5kZWRUaW1lO2M9PT1kJiYoYS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9SWooZSkpO2lmKG9qJiYoZT1hLmxhc3RQaW5nZWRUaW1lLDA9PT1lfHxlPj1jKSl7YS5sYXN0UGluZ2VkVGltZT1jO0VqKGEsYyk7YnJlYWt9ZT16aihhKTtpZigwIT09ZSYmZSE9PWMpYnJlYWs7aWYoMCE9PWQmJmQhPT1jKXthLmxhc3RQaW5nZWRUaW1lPVxuZDticmVha30xMDczNzQxODIzIT09bWo/ZD0xMCooMTA3Mzc0MTgyMS1taiktJGYoKToxMDczNzQxODIzPT09bGo/ZD0wOihkPTEwKigxMDczNzQxODIxLWxqKS01RTMsZT0kZigpLGM9MTAqKDEwNzM3NDE4MjEtYyktZSxkPWUtZCwwPmQmJihkPTApLGQ9KDEyMD5kPzEyMDo0ODA+ZD80ODA6MTA4MD5kPzEwODA6MTkyMD5kPzE5MjA6M0UzPmQ/M0UzOjQzMjA+ZD80MzIwOjE5NjAqYmooZC8xOTYwKSktZCxjPGQmJihkPWMpKTtpZigxMDxkKXthLnRpbWVvdXRIYW5kbGU9SGQoSmouYmluZChudWxsLGEpLGQpO2JyZWFrfUpqKGEpO2JyZWFrO2Nhc2Ugamo6aWYoMTA3Mzc0MTgyMyE9PWxqJiZudWxsIT09bmope2Y9bGo7dmFyIGc9bmo7ZD1nLmJ1c3lNaW5EdXJhdGlvbk1zfDA7MD49ZD9kPTA6KGU9Zy5idXN5RGVsYXlNc3wwLGY9JGYoKS0oMTAqKDEwNzM3NDE4MjEtZiktKGcudGltZW91dE1zfDB8fDVFMykpLGQ9Zjw9ZT8wOmUrZC1mKTtpZigxMDxkKXt4aShhLGMpO2EudGltZW91dEhhbmRsZT1cbkhkKEpqLmJpbmQobnVsbCxhKSxkKTticmVha319SmooYSk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDMyOSkpO31aKGEpO2lmKGEuY2FsbGJhY2tOb2RlPT09YilyZXR1cm4gQmouYmluZChudWxsLGEpfX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIHlqKGEpe3ZhciBiPWEubGFzdEV4cGlyZWRUaW1lO2I9MCE9PWI/YjoxMDczNzQxODIzO2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDMyNykpO0RqKCk7YT09PVQmJmI9PT1VfHxFaihhLGIpO2lmKG51bGwhPT1YKXt2YXIgYz1XO1d8PWZqO3ZhciBkPUZqKCk7ZG8gdHJ5e0tqKCk7YnJlYWt9Y2F0Y2goZSl7SGooYSxlKX13aGlsZSgxKTtuZygpO1c9Yztjai5jdXJyZW50PWQ7aWYoUz09PWhqKXRocm93IGM9a2osRWooYSxiKSx4aShhLGIpLFooYSksYztpZihudWxsIT09WCl0aHJvdyBFcnJvcih1KDI2MSkpO2EuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPWI7VD1udWxsO0pqKGEpO1ooYSl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gTGooKXtpZihudWxsIT09dGope3ZhciBhPXRqO3RqPW51bGw7YS5mb3JFYWNoKGZ1bmN0aW9uKGEsYyl7Q2ooYyxhKTtaKGMpfSk7Z2coKX19XG5mdW5jdGlvbiBNaihhLGIpe3ZhciBjPVc7V3w9MTt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtXPWMsVz09PVYmJmdnKCl9fWZ1bmN0aW9uIE5qKGEsYil7dmFyIGM9VztXJj0tMjtXfD1lajt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtXPWMsVz09PVYmJmdnKCl9fVxuZnVuY3Rpb24gRWooYSxiKXthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRFeHBpcmF0aW9uVGltZT0wO3ZhciBjPWEudGltZW91dEhhbmRsZTstMSE9PWMmJihhLnRpbWVvdXRIYW5kbGU9LTEsSWQoYykpO2lmKG51bGwhPT1YKWZvcihjPVgucmV0dXJuO251bGwhPT1jOyl7dmFyIGQ9Yztzd2l0Y2goZC50YWcpe2Nhc2UgMTpkPWQudHlwZS5jaGlsZENvbnRleHRUeXBlcztudWxsIT09ZCYmdm9pZCAwIT09ZCYmRGYoKTticmVhaztjYXNlIDM6ZWgoKTtIKEspO0goSik7YnJlYWs7Y2FzZSA1OmdoKGQpO2JyZWFrO2Nhc2UgNDplaCgpO2JyZWFrO2Nhc2UgMTM6SChNKTticmVhaztjYXNlIDE5OkgoTSk7YnJlYWs7Y2FzZSAxMDpvZyhkKX1jPWMucmV0dXJufVQ9YTtYPVNnKGEuY3VycmVudCxudWxsKTtVPWI7Uz10aTtraj1udWxsO21qPWxqPTEwNzM3NDE4MjM7bmo9bnVsbDt3aT0wO29qPSExfVxuZnVuY3Rpb24gSGooYSxiKXtkb3t0cnl7bmcoKTtqaC5jdXJyZW50PXNoO2lmKG1oKWZvcih2YXIgYz1OLm1lbW9pemVkU3RhdGU7bnVsbCE9PWM7KXt2YXIgZD1jLnF1ZXVlO251bGwhPT1kJiYoZC5wZW5kaW5nPW51bGwpO2M9Yy5uZXh0fWxoPTA7UD1PPU49bnVsbDttaD0hMTtpZihudWxsPT09WHx8bnVsbD09PVgucmV0dXJuKXJldHVybiBTPWhqLGtqPWIsWD1udWxsO2E6e3ZhciBlPWEsZj1YLnJldHVybixnPVgsaD1iO2I9VTtnLmVmZmVjdFRhZ3w9MjA0ODtnLmZpcnN0RWZmZWN0PWcubGFzdEVmZmVjdD1udWxsO2lmKG51bGwhPT1oJiZcIm9iamVjdFwiPT09dHlwZW9mIGgmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLnRoZW4pe3ZhciBrPWg7aWYoMD09PShnLm1vZGUmMikpe3ZhciBsPWcuYWx0ZXJuYXRlO2w/KGcubWVtb2l6ZWRTdGF0ZT1sLm1lbW9pemVkU3RhdGUsZy5leHBpcmF0aW9uVGltZT1sLmV4cGlyYXRpb25UaW1lKTpnLm1lbW9pemVkU3RhdGU9bnVsbH12YXIgbT0wIT09XG4oTS5jdXJyZW50JjEpLHA9Zjtkb3t2YXIgeDtpZih4PTEzPT09cC50YWcpe3ZhciB6PXAubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09eil4PW51bGwhPT16LmRlaHlkcmF0ZWQ/ITA6ITE7ZWxzZXt2YXIgY2E9cC5tZW1vaXplZFByb3BzO3g9dm9pZCAwPT09Y2EuZmFsbGJhY2s/ITE6ITAhPT1jYS51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjaz8hMDptPyExOiEwfX1pZih4KXt2YXIgRD1wLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT1EKXt2YXIgdD1uZXcgU2V0O3QuYWRkKGspO3AudXBkYXRlUXVldWU9dH1lbHNlIEQuYWRkKGspO2lmKDA9PT0ocC5tb2RlJjIpKXtwLmVmZmVjdFRhZ3w9NjQ7Zy5lZmZlY3RUYWcmPS0yOTgxO2lmKDE9PT1nLnRhZylpZihudWxsPT09Zy5hbHRlcm5hdGUpZy50YWc9MTc7ZWxzZXt2YXIgeT13ZygxMDczNzQxODIzLG51bGwpO3kudGFnPTI7eGcoZyx5KX1nLmV4cGlyYXRpb25UaW1lPTEwNzM3NDE4MjM7YnJlYWsgYX1oPXZvaWQgMDtnPWI7dmFyIEE9ZS5waW5nQ2FjaGU7XG5udWxsPT09QT8oQT1lLnBpbmdDYWNoZT1uZXcgV2ksaD1uZXcgU2V0LEEuc2V0KGssaCkpOihoPUEuZ2V0KGspLHZvaWQgMD09PWgmJihoPW5ldyBTZXQsQS5zZXQoayxoKSkpO2lmKCFoLmhhcyhnKSl7aC5hZGQoZyk7dmFyIHE9T2ouYmluZChudWxsLGUsayxnKTtrLnRoZW4ocSxxKX1wLmVmZmVjdFRhZ3w9NDA5NjtwLmV4cGlyYXRpb25UaW1lPWI7YnJlYWsgYX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKTtoPUVycm9yKChJYShnLnR5cGUpfHxcIkEgUmVhY3QgY29tcG9uZW50XCIpK1wiIHN1c3BlbmRlZCB3aGlsZSByZW5kZXJpbmcsIGJ1dCBubyBmYWxsYmFjayBVSSB3YXMgc3BlY2lmaWVkLlxcblxcbkFkZCBhIDxTdXNwZW5zZSBmYWxsYmFjaz0uLi4+IGNvbXBvbmVudCBoaWdoZXIgaW4gdGhlIHRyZWUgdG8gcHJvdmlkZSBhIGxvYWRpbmcgaW5kaWNhdG9yIG9yIHBsYWNlaG9sZGVyIHRvIGRpc3BsYXkuXCIrSmEoZykpfVMhPT1qaiYmKFM9aWopO2g9QWkoaCxnKTtwPWY7ZG97c3dpdGNoKHAudGFnKXtjYXNlIDM6az1cbmg7cC5lZmZlY3RUYWd8PTQwOTY7cC5leHBpcmF0aW9uVGltZT1iO3ZhciBCPVhpKHAsayxiKTt5ZyhwLEIpO2JyZWFrIGE7Y2FzZSAxOms9aDt2YXIgdz1wLnR5cGUsdWI9cC5zdGF0ZU5vZGU7aWYoMD09PShwLmVmZmVjdFRhZyY2NCkmJihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fG51bGwhPT11YiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHViLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PWFqfHwhYWouaGFzKHViKSkpKXtwLmVmZmVjdFRhZ3w9NDA5NjtwLmV4cGlyYXRpb25UaW1lPWI7dmFyIHZiPSRpKHAsayxiKTt5ZyhwLHZiKTticmVhayBhfX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKX1YPVBqKFgpfWNhdGNoKFhjKXtiPVhjO2NvbnRpbnVlfWJyZWFrfXdoaWxlKDEpfWZ1bmN0aW9uIEZqKCl7dmFyIGE9Y2ouY3VycmVudDtjai5jdXJyZW50PXNoO3JldHVybiBudWxsPT09YT9zaDphfVxuZnVuY3Rpb24gQWcoYSxiKXthPGxqJiYyPGEmJihsaj1hKTtudWxsIT09YiYmYTxtaiYmMjxhJiYobWo9YSxuaj1iKX1mdW5jdGlvbiBCZyhhKXthPndpJiYod2k9YSl9ZnVuY3Rpb24gS2ooKXtmb3IoO251bGwhPT1YOylYPVFqKFgpfWZ1bmN0aW9uIEdqKCl7Zm9yKDtudWxsIT09WCYmIVVmKCk7KVg9UWooWCl9ZnVuY3Rpb24gUWooYSl7dmFyIGI9UmooYS5hbHRlcm5hdGUsYSxVKTthLm1lbW9pemVkUHJvcHM9YS5wZW5kaW5nUHJvcHM7bnVsbD09PWImJihiPVBqKGEpKTtkai5jdXJyZW50PW51bGw7cmV0dXJuIGJ9XG5mdW5jdGlvbiBQaihhKXtYPWE7ZG97dmFyIGI9WC5hbHRlcm5hdGU7YT1YLnJldHVybjtpZigwPT09KFguZWZmZWN0VGFnJjIwNDgpKXtiPXNpKGIsWCxVKTtpZigxPT09VXx8MSE9PVguY2hpbGRFeHBpcmF0aW9uVGltZSl7Zm9yKHZhciBjPTAsZD1YLmNoaWxkO251bGwhPT1kOyl7dmFyIGU9ZC5leHBpcmF0aW9uVGltZSxmPWQuY2hpbGRFeHBpcmF0aW9uVGltZTtlPmMmJihjPWUpO2Y+YyYmKGM9Zik7ZD1kLnNpYmxpbmd9WC5jaGlsZEV4cGlyYXRpb25UaW1lPWN9aWYobnVsbCE9PWIpcmV0dXJuIGI7bnVsbCE9PWEmJjA9PT0oYS5lZmZlY3RUYWcmMjA0OCkmJihudWxsPT09YS5maXJzdEVmZmVjdCYmKGEuZmlyc3RFZmZlY3Q9WC5maXJzdEVmZmVjdCksbnVsbCE9PVgubGFzdEVmZmVjdCYmKG51bGwhPT1hLmxhc3RFZmZlY3QmJihhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1YLmZpcnN0RWZmZWN0KSxhLmxhc3RFZmZlY3Q9WC5sYXN0RWZmZWN0KSwxPFguZWZmZWN0VGFnJiYobnVsbCE9PVxuYS5sYXN0RWZmZWN0P2EubGFzdEVmZmVjdC5uZXh0RWZmZWN0PVg6YS5maXJzdEVmZmVjdD1YLGEubGFzdEVmZmVjdD1YKSl9ZWxzZXtiPXppKFgpO2lmKG51bGwhPT1iKXJldHVybiBiLmVmZmVjdFRhZyY9MjA0NyxiO251bGwhPT1hJiYoYS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9bnVsbCxhLmVmZmVjdFRhZ3w9MjA0OCl9Yj1YLnNpYmxpbmc7aWYobnVsbCE9PWIpcmV0dXJuIGI7WD1hfXdoaWxlKG51bGwhPT1YKTtTPT09dGkmJihTPWpqKTtyZXR1cm4gbnVsbH1mdW5jdGlvbiBJaihhKXt2YXIgYj1hLmV4cGlyYXRpb25UaW1lO2E9YS5jaGlsZEV4cGlyYXRpb25UaW1lO3JldHVybiBiPmE/YjphfWZ1bmN0aW9uIEpqKGEpe3ZhciBiPWFnKCk7Y2coOTksU2ouYmluZChudWxsLGEsYikpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gU2ooYSxiKXtkbyBEaigpO3doaWxlKG51bGwhPT1yaik7aWYoKFcmKGZqfGdqKSkhPT1WKXRocm93IEVycm9yKHUoMzI3KSk7dmFyIGM9YS5maW5pc2hlZFdvcmssZD1hLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9MDtpZihjPT09YS5jdXJyZW50KXRocm93IEVycm9yKHUoMTc3KSk7YS5jYWxsYmFja05vZGU9bnVsbDthLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9MDthLmNhbGxiYWNrUHJpb3JpdHk9OTA7YS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9MDt2YXIgZT1JaihjKTthLmZpcnN0UGVuZGluZ1RpbWU9ZTtkPD1hLmxhc3RTdXNwZW5kZWRUaW1lP2EuZmlyc3RTdXNwZW5kZWRUaW1lPWEubGFzdFN1c3BlbmRlZFRpbWU9YS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9MDpkPD1hLmZpcnN0U3VzcGVuZGVkVGltZSYmKGEuZmlyc3RTdXNwZW5kZWRUaW1lPVxuZC0xKTtkPD1hLmxhc3RQaW5nZWRUaW1lJiYoYS5sYXN0UGluZ2VkVGltZT0wKTtkPD1hLmxhc3RFeHBpcmVkVGltZSYmKGEubGFzdEV4cGlyZWRUaW1lPTApO2E9PT1UJiYoWD1UPW51bGwsVT0wKTsxPGMuZWZmZWN0VGFnP251bGwhPT1jLmxhc3RFZmZlY3Q/KGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsZT1jLmZpcnN0RWZmZWN0KTplPWM6ZT1jLmZpcnN0RWZmZWN0O2lmKG51bGwhPT1lKXt2YXIgZj1XO1d8PWdqO2RqLmN1cnJlbnQ9bnVsbDtEZD1mZDt2YXIgZz14ZCgpO2lmKHlkKGcpKXtpZihcInNlbGVjdGlvblN0YXJ0XCJpbiBnKXZhciBoPXtzdGFydDpnLnNlbGVjdGlvblN0YXJ0LGVuZDpnLnNlbGVjdGlvbkVuZH07ZWxzZSBhOntoPShoPWcub3duZXJEb2N1bWVudCkmJmguZGVmYXVsdFZpZXd8fHdpbmRvdzt2YXIgaz1oLmdldFNlbGVjdGlvbiYmaC5nZXRTZWxlY3Rpb24oKTtpZihrJiYwIT09ay5yYW5nZUNvdW50KXtoPWsuYW5jaG9yTm9kZTt2YXIgbD1rLmFuY2hvck9mZnNldCxcbm09ay5mb2N1c05vZGU7az1rLmZvY3VzT2Zmc2V0O3RyeXtoLm5vZGVUeXBlLG0ubm9kZVR5cGV9Y2F0Y2god2Ipe2g9bnVsbDticmVhayBhfXZhciBwPTAseD0tMSx6PS0xLGNhPTAsRD0wLHQ9Zyx5PW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgQTs7KXt0IT09aHx8MCE9PWwmJjMhPT10Lm5vZGVUeXBlfHwoeD1wK2wpO3QhPT1tfHwwIT09ayYmMyE9PXQubm9kZVR5cGV8fCh6PXArayk7Mz09PXQubm9kZVR5cGUmJihwKz10Lm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0oQT10LmZpcnN0Q2hpbGQpKWJyZWFrO3k9dDt0PUF9Zm9yKDs7KXtpZih0PT09ZylicmVhayBiO3k9PT1oJiYrK2NhPT09bCYmKHg9cCk7eT09PW0mJisrRD09PWsmJih6PXApO2lmKG51bGwhPT0oQT10Lm5leHRTaWJsaW5nKSlicmVhazt0PXk7eT10LnBhcmVudE5vZGV9dD1BfWg9LTE9PT14fHwtMT09PXo/bnVsbDp7c3RhcnQ6eCxlbmQ6en19ZWxzZSBoPW51bGx9aD1ofHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBoPVxubnVsbDtFZD17YWN0aXZlRWxlbWVudERldGFjaGVkOm51bGwsZm9jdXNlZEVsZW06ZyxzZWxlY3Rpb25SYW5nZTpofTtmZD0hMTtZPWU7ZG8gdHJ5e1RqKCl9Y2F0Y2god2Ipe2lmKG51bGw9PT1ZKXRocm93IEVycm9yKHUoMzMwKSk7RWkoWSx3Yik7WT1ZLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVkpO1k9ZTtkbyB0cnl7Zm9yKGc9YSxoPWI7bnVsbCE9PVk7KXt2YXIgcT1ZLmVmZmVjdFRhZztxJjE2JiZSYihZLnN0YXRlTm9kZSxcIlwiKTtpZihxJjEyOCl7dmFyIEI9WS5hbHRlcm5hdGU7aWYobnVsbCE9PUIpe3ZhciB3PUIucmVmO251bGwhPT13JiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHc/dyhudWxsKTp3LmN1cnJlbnQ9bnVsbCl9fXN3aXRjaChxJjEwMzgpe2Nhc2UgMjpQaShZKTtZLmVmZmVjdFRhZyY9LTM7YnJlYWs7Y2FzZSA2OlBpKFkpO1kuZWZmZWN0VGFnJj0tMztTaShZLmFsdGVybmF0ZSxZKTticmVhaztjYXNlIDEwMjQ6WS5lZmZlY3RUYWcmPS0xMDI1O2JyZWFrO2Nhc2UgMTAyODpZLmVmZmVjdFRhZyY9XG4tMTAyNTtTaShZLmFsdGVybmF0ZSxZKTticmVhaztjYXNlIDQ6U2koWS5hbHRlcm5hdGUsWSk7YnJlYWs7Y2FzZSA4Omw9WSxNaShnLGwsaCksTmkobCl9WT1ZLm5leHRFZmZlY3R9fWNhdGNoKHdiKXtpZihudWxsPT09WSl0aHJvdyBFcnJvcih1KDMzMCkpO0VpKFksd2IpO1k9WS5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1ZKTt3PUVkO0I9eGQoKTtxPXcuZm9jdXNlZEVsZW07aD13LnNlbGVjdGlvblJhbmdlO2lmKEIhPT1xJiZxJiZxLm93bmVyRG9jdW1lbnQmJndkKHEub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQscSkpe251bGwhPT1oJiZ5ZChxKSYmKEI9aC5zdGFydCx3PWguZW5kLHZvaWQgMD09PXcmJih3PUIpLFwic2VsZWN0aW9uU3RhcnRcImluIHE/KHEuc2VsZWN0aW9uU3RhcnQ9QixxLnNlbGVjdGlvbkVuZD1NYXRoLm1pbih3LHEudmFsdWUubGVuZ3RoKSk6KHc9KEI9cS5vd25lckRvY3VtZW50fHxkb2N1bWVudCkmJkIuZGVmYXVsdFZpZXd8fHdpbmRvdyx3LmdldFNlbGVjdGlvbiYmXG4odz13LmdldFNlbGVjdGlvbigpLGw9cS50ZXh0Q29udGVudC5sZW5ndGgsZz1NYXRoLm1pbihoLnN0YXJ0LGwpLGg9dm9pZCAwPT09aC5lbmQ/ZzpNYXRoLm1pbihoLmVuZCxsKSwhdy5leHRlbmQmJmc+aCYmKGw9aCxoPWcsZz1sKSxsPXZkKHEsZyksbT12ZChxLGgpLGwmJm0mJigxIT09dy5yYW5nZUNvdW50fHx3LmFuY2hvck5vZGUhPT1sLm5vZGV8fHcuYW5jaG9yT2Zmc2V0IT09bC5vZmZzZXR8fHcuZm9jdXNOb2RlIT09bS5ub2RlfHx3LmZvY3VzT2Zmc2V0IT09bS5vZmZzZXQpJiYoQj1CLmNyZWF0ZVJhbmdlKCksQi5zZXRTdGFydChsLm5vZGUsbC5vZmZzZXQpLHcucmVtb3ZlQWxsUmFuZ2VzKCksZz5oPyh3LmFkZFJhbmdlKEIpLHcuZXh0ZW5kKG0ubm9kZSxtLm9mZnNldCkpOihCLnNldEVuZChtLm5vZGUsbS5vZmZzZXQpLHcuYWRkUmFuZ2UoQikpKSkpKTtCPVtdO2Zvcih3PXE7dz13LnBhcmVudE5vZGU7KTE9PT13Lm5vZGVUeXBlJiZCLnB1c2goe2VsZW1lbnQ6dyxsZWZ0Oncuc2Nyb2xsTGVmdCxcbnRvcDp3LnNjcm9sbFRvcH0pO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBxLmZvY3VzJiZxLmZvY3VzKCk7Zm9yKHE9MDtxPEIubGVuZ3RoO3ErKyl3PUJbcV0sdy5lbGVtZW50LnNjcm9sbExlZnQ9dy5sZWZ0LHcuZWxlbWVudC5zY3JvbGxUb3A9dy50b3B9ZmQ9ISFEZDtFZD1EZD1udWxsO2EuY3VycmVudD1jO1k9ZTtkbyB0cnl7Zm9yKHE9YTtudWxsIT09WTspe3ZhciB1Yj1ZLmVmZmVjdFRhZzt1YiYzNiYmSmkocSxZLmFsdGVybmF0ZSxZKTtpZih1YiYxMjgpe0I9dm9pZCAwO3ZhciB2Yj1ZLnJlZjtpZihudWxsIT09dmIpe3ZhciBYYz1ZLnN0YXRlTm9kZTtzd2l0Y2goWS50YWcpe2Nhc2UgNTpCPVhjO2JyZWFrO2RlZmF1bHQ6Qj1YY31cImZ1bmN0aW9uXCI9PT10eXBlb2YgdmI/dmIoQik6dmIuY3VycmVudD1CfX1ZPVkubmV4dEVmZmVjdH19Y2F0Y2god2Ipe2lmKG51bGw9PT1ZKXRocm93IEVycm9yKHUoMzMwKSk7RWkoWSx3Yik7WT1ZLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVkpO1k9XG5udWxsO1ZmKCk7Vz1mfWVsc2UgYS5jdXJyZW50PWM7aWYocWopcWo9ITEscmo9YSxzaj1iO2Vsc2UgZm9yKFk9ZTtudWxsIT09WTspYj1ZLm5leHRFZmZlY3QsWS5uZXh0RWZmZWN0PW51bGwsWT1iO2I9YS5maXJzdFBlbmRpbmdUaW1lOzA9PT1iJiYoYWo9bnVsbCk7MTA3Mzc0MTgyMz09PWI/YT09PXZqP3VqKys6KHVqPTAsdmo9YSk6dWo9MDtcImZ1bmN0aW9uXCI9PT10eXBlb2YgVWomJlVqKGMuc3RhdGVOb2RlLGQpO1ooYSk7aWYoWWkpdGhyb3cgWWk9ITEsYT1aaSxaaT1udWxsLGE7aWYoKFcmZWopIT09VilyZXR1cm4gbnVsbDtnZygpO3JldHVybiBudWxsfWZ1bmN0aW9uIFRqKCl7Zm9yKDtudWxsIT09WTspe3ZhciBhPVkuZWZmZWN0VGFnOzAhPT0oYSYyNTYpJiZHaShZLmFsdGVybmF0ZSxZKTswPT09KGEmNTEyKXx8cWp8fChxaj0hMCxkZyg5NyxmdW5jdGlvbigpe0RqKCk7cmV0dXJuIG51bGx9KSk7WT1ZLm5leHRFZmZlY3R9fVxuZnVuY3Rpb24gRGooKXtpZig5MCE9PXNqKXt2YXIgYT05Nzxzaj85Nzpzajtzaj05MDtyZXR1cm4gY2coYSxWail9fWZ1bmN0aW9uIFZqKCl7aWYobnVsbD09PXJqKXJldHVybiExO3ZhciBhPXJqO3JqPW51bGw7aWYoKFcmKGZqfGdqKSkhPT1WKXRocm93IEVycm9yKHUoMzMxKSk7dmFyIGI9VztXfD1najtmb3IoYT1hLmN1cnJlbnQuZmlyc3RFZmZlY3Q7bnVsbCE9PWE7KXt0cnl7dmFyIGM9YTtpZigwIT09KGMuZWZmZWN0VGFnJjUxMikpc3dpdGNoKGMudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmNhc2UgMjI6SGkoNSxjKSxJaSg1LGMpfX1jYXRjaChkKXtpZihudWxsPT09YSl0aHJvdyBFcnJvcih1KDMzMCkpO0VpKGEsZCl9Yz1hLm5leHRFZmZlY3Q7YS5uZXh0RWZmZWN0PW51bGw7YT1jfVc9YjtnZygpO3JldHVybiEwfVxuZnVuY3Rpb24gV2ooYSxiLGMpe2I9QWkoYyxiKTtiPVhpKGEsYiwxMDczNzQxODIzKTt4ZyhhLGIpO2E9eGooYSwxMDczNzQxODIzKTtudWxsIT09YSYmWihhKX1mdW5jdGlvbiBFaShhLGIpe2lmKDM9PT1hLnRhZylXaihhLGEsYik7ZWxzZSBmb3IodmFyIGM9YS5yZXR1cm47bnVsbCE9PWM7KXtpZigzPT09Yy50YWcpe1dqKGMsYSxiKTticmVha31lbHNlIGlmKDE9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PWFqfHwhYWouaGFzKGQpKSl7YT1BaShiLGEpO2E9JGkoYyxhLDEwNzM3NDE4MjMpO3hnKGMsYSk7Yz14aihjLDEwNzM3NDE4MjMpO251bGwhPT1jJiZaKGMpO2JyZWFrfX1jPWMucmV0dXJufX1cbmZ1bmN0aW9uIE9qKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtudWxsIT09ZCYmZC5kZWxldGUoYik7VD09PWEmJlU9PT1jP1M9PT12aXx8Uz09PXVpJiYxMDczNzQxODIzPT09bGomJiRmKCktVGk8cGo/RWooYSxVKTpvaj0hMDpBaihhLGMpJiYoYj1hLmxhc3RQaW5nZWRUaW1lLDAhPT1iJiZiPGN8fChhLmxhc3RQaW5nZWRUaW1lPWMsWihhKSkpfWZ1bmN0aW9uIFZpKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbCE9PWMmJmMuZGVsZXRlKGIpO2I9MDswPT09YiYmKGI9R2coKSxiPUhnKGIsYSxudWxsKSk7YT14aihhLGIpO251bGwhPT1hJiZaKGEpfXZhciBSajtcblJqPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1iLmV4cGlyYXRpb25UaW1lO2lmKG51bGwhPT1hKXt2YXIgZT1iLnBlbmRpbmdQcm9wcztpZihhLm1lbW9pemVkUHJvcHMhPT1lfHxLLmN1cnJlbnQpcmc9ITA7ZWxzZXtpZihkPGMpe3JnPSExO3N3aXRjaChiLnRhZyl7Y2FzZSAzOmhpKGIpO1hoKCk7YnJlYWs7Y2FzZSA1OmZoKGIpO2lmKGIubW9kZSY0JiYxIT09YyYmZS5oaWRkZW4pcmV0dXJuIGIuZXhwaXJhdGlvblRpbWU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPTEsbnVsbDticmVhaztjYXNlIDE6TChiLnR5cGUpJiZHZihiKTticmVhaztjYXNlIDQ6ZGgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEwOmQ9Yi5tZW1vaXplZFByb3BzLnZhbHVlO2U9Yi50eXBlLl9jb250ZXh0O0koamcsZS5fY3VycmVudFZhbHVlKTtlLl9jdXJyZW50VmFsdWU9ZDticmVhaztjYXNlIDEzOmlmKG51bGwhPT1iLm1lbW9pemVkU3RhdGUpe2Q9Yi5jaGlsZC5jaGlsZEV4cGlyYXRpb25UaW1lO1xuaWYoMCE9PWQmJmQ+PWMpcmV0dXJuIGppKGEsYixjKTtJKE0sTS5jdXJyZW50JjEpO2I9JGgoYSxiLGMpO3JldHVybiBudWxsIT09Yj9iLnNpYmxpbmc6bnVsbH1JKE0sTS5jdXJyZW50JjEpO2JyZWFrO2Nhc2UgMTk6ZD1iLmNoaWxkRXhwaXJhdGlvblRpbWU+PWM7aWYoMCE9PShhLmVmZmVjdFRhZyY2NCkpe2lmKGQpcmV0dXJuIG1pKGEsYixjKTtiLmVmZmVjdFRhZ3w9NjR9ZT1iLm1lbW9pemVkU3RhdGU7bnVsbCE9PWUmJihlLnJlbmRlcmluZz1udWxsLGUudGFpbD1udWxsKTtJKE0sTS5jdXJyZW50KTtpZighZClyZXR1cm4gbnVsbH1yZXR1cm4gJGgoYSxiLGMpfXJnPSExfX1lbHNlIHJnPSExO2IuZXhwaXJhdGlvblRpbWU9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjpkPWIudHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9Mik7YT1iLnBlbmRpbmdQcm9wcztlPUNmKGIsSi5jdXJyZW50KTtxZyhiLGMpO2U9b2gobnVsbCxcbmIsZCxhLGUsYyk7Yi5lZmZlY3RUYWd8PTE7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBlJiZudWxsIT09ZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGUucmVuZGVyJiZ2b2lkIDA9PT1lLiQkdHlwZW9mKXtiLnRhZz0xO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtpZihMKGQpKXt2YXIgZj0hMDtHZihiKX1lbHNlIGY9ITE7Yi5tZW1vaXplZFN0YXRlPW51bGwhPT1lLnN0YXRlJiZ2b2lkIDAhPT1lLnN0YXRlP2Uuc3RhdGU6bnVsbDt1ZyhiKTt2YXIgZz1kLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYmRmcoYixkLGcsYSk7ZS51cGRhdGVyPUpnO2Iuc3RhdGVOb2RlPWU7ZS5fcmVhY3RJbnRlcm5hbEZpYmVyPWI7TmcoYixkLGEsYyk7Yj1naShudWxsLGIsZCwhMCxmLGMpfWVsc2UgYi50YWc9MCxSKG51bGwsYixlLGMpLGI9Yi5jaGlsZDtyZXR1cm4gYjtjYXNlIDE2OmE6e2U9Yi5lbGVtZW50VHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPVxubnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKTthPWIucGVuZGluZ1Byb3BzO0hhKGUpO2lmKDEhPT1lLl9zdGF0dXMpdGhyb3cgZS5fcmVzdWx0O2U9ZS5fcmVzdWx0O2IudHlwZT1lO2Y9Yi50YWc9WGooZSk7YT1pZyhlLGEpO3N3aXRjaChmKXtjYXNlIDA6Yj1kaShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxOmI9ZmkobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTE6Yj1aaChudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxNDpiPWFpKG51bGwsYixlLGlnKGUudHlwZSxhKSxkLGMpO2JyZWFrIGF9dGhyb3cgRXJyb3IodSgzMDYsZSxcIlwiKSk7fXJldHVybiBiO2Nhc2UgMDpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6aWcoZCxlKSxkaShhLGIsZCxlLGMpO2Nhc2UgMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6aWcoZCxlKSxmaShhLGIsZCxlLGMpO1xuY2FzZSAzOmhpKGIpO2Q9Yi51cGRhdGVRdWV1ZTtpZihudWxsPT09YXx8bnVsbD09PWQpdGhyb3cgRXJyb3IodSgyODIpKTtkPWIucGVuZGluZ1Byb3BzO2U9Yi5tZW1vaXplZFN0YXRlO2U9bnVsbCE9PWU/ZS5lbGVtZW50Om51bGw7dmcoYSxiKTt6ZyhiLGQsbnVsbCxjKTtkPWIubWVtb2l6ZWRTdGF0ZS5lbGVtZW50O2lmKGQ9PT1lKVhoKCksYj0kaChhLGIsYyk7ZWxzZXtpZihlPWIuc3RhdGVOb2RlLmh5ZHJhdGUpUGg9SmQoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mby5maXJzdENoaWxkKSxPaD1iLGU9UWg9ITA7aWYoZSlmb3IoYz1ZZyhiLG51bGwsZCxjKSxiLmNoaWxkPWM7YzspYy5lZmZlY3RUYWc9Yy5lZmZlY3RUYWcmLTN8MTAyNCxjPWMuc2libGluZztlbHNlIFIoYSxiLGQsYyksWGgoKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA1OnJldHVybiBmaChiKSxudWxsPT09YSYmVWgoYiksZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpcbm51bGwsZz1lLmNoaWxkcmVuLEdkKGQsZSk/Zz1udWxsOm51bGwhPT1mJiZHZChkLGYpJiYoYi5lZmZlY3RUYWd8PTE2KSxlaShhLGIpLGIubW9kZSY0JiYxIT09YyYmZS5oaWRkZW4/KGIuZXhwaXJhdGlvblRpbWU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPTEsYj1udWxsKTooUihhLGIsZyxjKSxiPWIuY2hpbGQpLGI7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmVWgoYiksbnVsbDtjYXNlIDEzOnJldHVybiBqaShhLGIsYyk7Y2FzZSA0OnJldHVybiBkaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGQ9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWE/Yi5jaGlsZD1YZyhiLG51bGwsZCxjKTpSKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6aWcoZCxlKSxaaChhLGIsZCxlLGMpO2Nhc2UgNzpyZXR1cm4gUihhLGIsYi5wZW5kaW5nUHJvcHMsYyksYi5jaGlsZDtjYXNlIDg6cmV0dXJuIFIoYSxcbmIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEyOnJldHVybiBSKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTA6YTp7ZD1iLnR5cGUuX2NvbnRleHQ7ZT1iLnBlbmRpbmdQcm9wcztnPWIubWVtb2l6ZWRQcm9wcztmPWUudmFsdWU7dmFyIGg9Yi50eXBlLl9jb250ZXh0O0koamcsaC5fY3VycmVudFZhbHVlKTtoLl9jdXJyZW50VmFsdWU9ZjtpZihudWxsIT09ZylpZihoPWcudmFsdWUsZj0kZShoLGYpPzA6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyhoLGYpOjEwNzM3NDE4MjMpfDAsMD09PWYpe2lmKGcuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhSy5jdXJyZW50KXtiPSRoKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihoPWIuY2hpbGQsbnVsbCE9PWgmJihoLnJldHVybj1iKTtudWxsIT09aDspe3ZhciBrPWguZGVwZW5kZW5jaWVzO2lmKG51bGwhPT1cbmspe2c9aC5jaGlsZDtmb3IodmFyIGw9ay5maXJzdENvbnRleHQ7bnVsbCE9PWw7KXtpZihsLmNvbnRleHQ9PT1kJiYwIT09KGwub2JzZXJ2ZWRCaXRzJmYpKXsxPT09aC50YWcmJihsPXdnKGMsbnVsbCksbC50YWc9Mix4ZyhoLGwpKTtoLmV4cGlyYXRpb25UaW1lPGMmJihoLmV4cGlyYXRpb25UaW1lPWMpO2w9aC5hbHRlcm5hdGU7bnVsbCE9PWwmJmwuZXhwaXJhdGlvblRpbWU8YyYmKGwuZXhwaXJhdGlvblRpbWU9Yyk7cGcoaC5yZXR1cm4sYyk7ay5leHBpcmF0aW9uVGltZTxjJiYoay5leHBpcmF0aW9uVGltZT1jKTticmVha31sPWwubmV4dH19ZWxzZSBnPTEwPT09aC50YWc/aC50eXBlPT09Yi50eXBlP251bGw6aC5jaGlsZDpoLmNoaWxkO2lmKG51bGwhPT1nKWcucmV0dXJuPWg7ZWxzZSBmb3IoZz1oO251bGwhPT1nOyl7aWYoZz09PWIpe2c9bnVsbDticmVha31oPWcuc2libGluZztpZihudWxsIT09aCl7aC5yZXR1cm49Zy5yZXR1cm47Zz1oO2JyZWFrfWc9Zy5yZXR1cm59aD1cbmd9UihhLGIsZS5jaGlsZHJlbixjKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA5OnJldHVybiBlPWIudHlwZSxmPWIucGVuZGluZ1Byb3BzLGQ9Zi5jaGlsZHJlbixxZyhiLGMpLGU9c2coZSxmLnVuc3RhYmxlX29ic2VydmVkQml0cyksZD1kKGUpLGIuZWZmZWN0VGFnfD0xLFIoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDE0OnJldHVybiBlPWIudHlwZSxmPWlnKGUsYi5wZW5kaW5nUHJvcHMpLGY9aWcoZS50eXBlLGYpLGFpKGEsYixlLGYsZCxjKTtjYXNlIDE1OnJldHVybiBjaShhLGIsYi50eXBlLGIucGVuZGluZ1Byb3BzLGQsYyk7Y2FzZSAxNzpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6aWcoZCxlKSxudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9MiksYi50YWc9MSxMKGQpPyhhPSEwLEdmKGIpKTphPSExLHFnKGIsYyksTGcoYixkLGUpLE5nKGIsZCxlLGMpLGdpKG51bGwsXG5iLGQsITAsYSxjKTtjYXNlIDE5OnJldHVybiBtaShhLGIsYyl9dGhyb3cgRXJyb3IodSgxNTYsYi50YWcpKTt9O3ZhciBVaj1udWxsLExpPW51bGw7ZnVuY3Rpb24gWWooYSl7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pcmV0dXJuITE7dmFyIGI9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKGIuaXNEaXNhYmxlZHx8IWIuc3VwcG9ydHNGaWJlcilyZXR1cm4hMDt0cnl7dmFyIGM9Yi5pbmplY3QoYSk7VWo9ZnVuY3Rpb24oYSl7dHJ5e2Iub25Db21taXRGaWJlclJvb3QoYyxhLHZvaWQgMCw2ND09PShhLmN1cnJlbnQuZWZmZWN0VGFnJjY0KSl9Y2F0Y2goZSl7fX07TGk9ZnVuY3Rpb24oYSl7dHJ5e2Iub25Db21taXRGaWJlclVubW91bnQoYyxhKX1jYXRjaChlKXt9fX1jYXRjaChkKXt9cmV0dXJuITB9XG5mdW5jdGlvbiBaaihhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpcy5yZXR1cm49dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPXRoaXMuZWxlbWVudFR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMuZGVwZW5kZW5jaWVzPXRoaXMubWVtb2l6ZWRTdGF0ZT10aGlzLnVwZGF0ZVF1ZXVlPXRoaXMubWVtb2l6ZWRQcm9wcz1udWxsO3RoaXMubW9kZT1kO3RoaXMuZWZmZWN0VGFnPTA7dGhpcy5sYXN0RWZmZWN0PXRoaXMuZmlyc3RFZmZlY3Q9dGhpcy5uZXh0RWZmZWN0PW51bGw7dGhpcy5jaGlsZEV4cGlyYXRpb25UaW1lPXRoaXMuZXhwaXJhdGlvblRpbWU9MDt0aGlzLmFsdGVybmF0ZT1udWxsfWZ1bmN0aW9uIFNoKGEsYixjLGQpe3JldHVybiBuZXcgWmooYSxiLGMsZCl9XG5mdW5jdGlvbiBiaShhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfWZ1bmN0aW9uIFhqKGEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBiaShhKT8xOjA7aWYodm9pZCAwIT09YSYmbnVsbCE9PWEpe2E9YS4kJHR5cGVvZjtpZihhPT09emEpcmV0dXJuIDExO2lmKGE9PT1DYSlyZXR1cm4gMTR9cmV0dXJuIDJ9XG5mdW5jdGlvbiBTZyhhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGw9PT1jPyhjPVNoKGEudGFnLGIsYS5rZXksYS5tb2RlKSxjLmVsZW1lbnRUeXBlPWEuZWxlbWVudFR5cGUsYy50eXBlPWEudHlwZSxjLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxjLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWMpOihjLnBlbmRpbmdQcm9wcz1iLGMuZWZmZWN0VGFnPTAsYy5uZXh0RWZmZWN0PW51bGwsYy5maXJzdEVmZmVjdD1udWxsLGMubGFzdEVmZmVjdD1udWxsKTtjLmNoaWxkRXhwaXJhdGlvblRpbWU9YS5jaGlsZEV4cGlyYXRpb25UaW1lO2MuZXhwaXJhdGlvblRpbWU9YS5leHBpcmF0aW9uVGltZTtjLmNoaWxkPWEuY2hpbGQ7Yy5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztjLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2MudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtiPWEuZGVwZW5kZW5jaWVzO2MuZGVwZW5kZW5jaWVzPW51bGw9PT1iP251bGw6e2V4cGlyYXRpb25UaW1lOmIuZXhwaXJhdGlvblRpbWUsXG5maXJzdENvbnRleHQ6Yi5maXJzdENvbnRleHQscmVzcG9uZGVyczpiLnJlc3BvbmRlcnN9O2Muc2libGluZz1hLnNpYmxpbmc7Yy5pbmRleD1hLmluZGV4O2MucmVmPWEucmVmO3JldHVybiBjfVxuZnVuY3Rpb24gVWcoYSxiLGMsZCxlLGYpe3ZhciBnPTI7ZD1hO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKWJpKGEpJiYoZz0xKTtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlnPTU7ZWxzZSBhOnN3aXRjaChhKXtjYXNlIHRhOnJldHVybiBXZyhjLmNoaWxkcmVuLGUsZixiKTtjYXNlIHlhOmc9ODtlfD03O2JyZWFrO2Nhc2UgdWE6Zz04O2V8PTE7YnJlYWs7Y2FzZSB2YTpyZXR1cm4gYT1TaCgxMixjLGIsZXw4KSxhLmVsZW1lbnRUeXBlPXZhLGEudHlwZT12YSxhLmV4cGlyYXRpb25UaW1lPWYsYTtjYXNlIEFhOnJldHVybiBhPVNoKDEzLGMsYixlKSxhLnR5cGU9QWEsYS5lbGVtZW50VHlwZT1BYSxhLmV4cGlyYXRpb25UaW1lPWYsYTtjYXNlIEJhOnJldHVybiBhPVNoKDE5LGMsYixlKSxhLmVsZW1lbnRUeXBlPUJhLGEuZXhwaXJhdGlvblRpbWU9ZixhO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSB3YTpnPVxuMTA7YnJlYWsgYTtjYXNlIHhhOmc9OTticmVhayBhO2Nhc2UgemE6Zz0xMTticmVhayBhO2Nhc2UgQ2E6Zz0xNDticmVhayBhO2Nhc2UgRGE6Zz0xNjtkPW51bGw7YnJlYWsgYTtjYXNlIEVhOmc9MjI7YnJlYWsgYX10aHJvdyBFcnJvcih1KDEzMCxudWxsPT1hP2E6dHlwZW9mIGEsXCJcIikpO31iPVNoKGcsYyxiLGUpO2IuZWxlbWVudFR5cGU9YTtiLnR5cGU9ZDtiLmV4cGlyYXRpb25UaW1lPWY7cmV0dXJuIGJ9ZnVuY3Rpb24gV2coYSxiLGMsZCl7YT1TaCg3LGEsZCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9ZnVuY3Rpb24gVGcoYSxiLGMpe2E9U2goNixhLG51bGwsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfVxuZnVuY3Rpb24gVmcoYSxiLGMpe2I9U2goNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IuZXhwaXJhdGlvblRpbWU9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9XG5mdW5jdGlvbiBhayhhLGIsYyl7dGhpcy50YWc9Yjt0aGlzLmN1cnJlbnQ9bnVsbDt0aGlzLmNvbnRhaW5lckluZm89YTt0aGlzLnBpbmdDYWNoZT10aGlzLnBlbmRpbmdDaGlsZHJlbj1udWxsO3RoaXMuZmluaXNoZWRFeHBpcmF0aW9uVGltZT0wO3RoaXMuZmluaXNoZWRXb3JrPW51bGw7dGhpcy50aW1lb3V0SGFuZGxlPS0xO3RoaXMucGVuZGluZ0NvbnRleHQ9dGhpcy5jb250ZXh0PW51bGw7dGhpcy5oeWRyYXRlPWM7dGhpcy5jYWxsYmFja05vZGU9bnVsbDt0aGlzLmNhbGxiYWNrUHJpb3JpdHk9OTA7dGhpcy5sYXN0RXhwaXJlZFRpbWU9dGhpcy5sYXN0UGluZ2VkVGltZT10aGlzLm5leHRLbm93blBlbmRpbmdMZXZlbD10aGlzLmxhc3RTdXNwZW5kZWRUaW1lPXRoaXMuZmlyc3RTdXNwZW5kZWRUaW1lPXRoaXMuZmlyc3RQZW5kaW5nVGltZT0wfVxuZnVuY3Rpb24gQWooYSxiKXt2YXIgYz1hLmZpcnN0U3VzcGVuZGVkVGltZTthPWEubGFzdFN1c3BlbmRlZFRpbWU7cmV0dXJuIDAhPT1jJiZjPj1iJiZhPD1ifWZ1bmN0aW9uIHhpKGEsYil7dmFyIGM9YS5maXJzdFN1c3BlbmRlZFRpbWUsZD1hLmxhc3RTdXNwZW5kZWRUaW1lO2M8YiYmKGEuZmlyc3RTdXNwZW5kZWRUaW1lPWIpO2lmKGQ+Ynx8MD09PWMpYS5sYXN0U3VzcGVuZGVkVGltZT1iO2I8PWEubGFzdFBpbmdlZFRpbWUmJihhLmxhc3RQaW5nZWRUaW1lPTApO2I8PWEubGFzdEV4cGlyZWRUaW1lJiYoYS5sYXN0RXhwaXJlZFRpbWU9MCl9XG5mdW5jdGlvbiB5aShhLGIpe2I+YS5maXJzdFBlbmRpbmdUaW1lJiYoYS5maXJzdFBlbmRpbmdUaW1lPWIpO3ZhciBjPWEuZmlyc3RTdXNwZW5kZWRUaW1lOzAhPT1jJiYoYj49Yz9hLmZpcnN0U3VzcGVuZGVkVGltZT1hLmxhc3RTdXNwZW5kZWRUaW1lPWEubmV4dEtub3duUGVuZGluZ0xldmVsPTA6Yj49YS5sYXN0U3VzcGVuZGVkVGltZSYmKGEubGFzdFN1c3BlbmRlZFRpbWU9YisxKSxiPmEubmV4dEtub3duUGVuZGluZ0xldmVsJiYoYS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9YikpfWZ1bmN0aW9uIENqKGEsYil7dmFyIGM9YS5sYXN0RXhwaXJlZFRpbWU7aWYoMD09PWN8fGM+YilhLmxhc3RFeHBpcmVkVGltZT1ifVxuZnVuY3Rpb24gYmsoYSxiLGMsZCl7dmFyIGU9Yi5jdXJyZW50LGY9R2coKSxnPURnLnN1c3BlbnNlO2Y9SGcoZixlLGcpO2E6aWYoYyl7Yz1jLl9yZWFjdEludGVybmFsRmliZXI7Yjp7aWYoZGMoYykhPT1jfHwxIT09Yy50YWcpdGhyb3cgRXJyb3IodSgxNzApKTt2YXIgaD1jO2Rve3N3aXRjaChoLnRhZyl7Y2FzZSAzOmg9aC5zdGF0ZU5vZGUuY29udGV4dDticmVhayBiO2Nhc2UgMTppZihMKGgudHlwZSkpe2g9aC5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7YnJlYWsgYn19aD1oLnJldHVybn13aGlsZShudWxsIT09aCk7dGhyb3cgRXJyb3IodSgxNzEpKTt9aWYoMT09PWMudGFnKXt2YXIgaz1jLnR5cGU7aWYoTChrKSl7Yz1GZihjLGssaCk7YnJlYWsgYX19Yz1ofWVsc2UgYz1BZjtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPXdnKGYsZyk7Yi5wYXlsb2FkPXtlbGVtZW50OmF9O2Q9dm9pZCAwPT09XG5kP251bGw6ZDtudWxsIT09ZCYmKGIuY2FsbGJhY2s9ZCk7eGcoZSxiKTtJZyhlLGYpO3JldHVybiBmfWZ1bmN0aW9uIGNrKGEpe2E9YS5jdXJyZW50O2lmKCFhLmNoaWxkKXJldHVybiBudWxsO3N3aXRjaChhLmNoaWxkLnRhZyl7Y2FzZSA1OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZTtkZWZhdWx0OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZX19ZnVuY3Rpb24gZGsoYSxiKXthPWEubWVtb2l6ZWRTdGF0ZTtudWxsIT09YSYmbnVsbCE9PWEuZGVoeWRyYXRlZCYmYS5yZXRyeVRpbWU8YiYmKGEucmV0cnlUaW1lPWIpfWZ1bmN0aW9uIGVrKGEsYil7ZGsoYSxiKTsoYT1hLmFsdGVybmF0ZSkmJmRrKGEsYil9XG5mdW5jdGlvbiBmayhhLGIsYyl7Yz1udWxsIT1jJiYhMD09PWMuaHlkcmF0ZTt2YXIgZD1uZXcgYWsoYSxiLGMpLGU9U2goMyxudWxsLG51bGwsMj09PWI/NzoxPT09Yj8zOjApO2QuY3VycmVudD1lO2Uuc3RhdGVOb2RlPWQ7dWcoZSk7YVtPZF09ZC5jdXJyZW50O2MmJjAhPT1iJiZKYyhhLDk9PT1hLm5vZGVUeXBlP2E6YS5vd25lckRvY3VtZW50KTt0aGlzLl9pbnRlcm5hbFJvb3Q9ZH1may5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe2JrKGEsdGhpcy5faW50ZXJuYWxSb290LG51bGwsbnVsbCl9O2ZrLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5faW50ZXJuYWxSb290LGI9YS5jb250YWluZXJJbmZvO2JrKG51bGwsYSxudWxsLGZ1bmN0aW9uKCl7YltPZF09bnVsbH0pfTtcbmZ1bmN0aW9uIGdrKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1mdW5jdGlvbiBoayhhLGIpe2J8fChiPWE/OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YS5maXJzdENoaWxkOm51bGwsYj0hKCFifHwxIT09Yi5ub2RlVHlwZXx8IWIuaGFzQXR0cmlidXRlKFwiZGF0YS1yZWFjdHJvb3RcIikpKTtpZighYilmb3IodmFyIGM7Yz1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChjKTtyZXR1cm4gbmV3IGZrKGEsMCxiP3toeWRyYXRlOiEwfTp2b2lkIDApfVxuZnVuY3Rpb24gaWsoYSxiLGMsZCxlKXt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7dmFyIGc9Zi5faW50ZXJuYWxSb290O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1jayhnKTtoLmNhbGwoYSl9fWJrKGIsZyxhLGUpfWVsc2V7Zj1jLl9yZWFjdFJvb3RDb250YWluZXI9aGsoYyxkKTtnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGs9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9Y2soZyk7ay5jYWxsKGEpfX1OaihmdW5jdGlvbigpe2JrKGIsZyxhLGUpfSl9cmV0dXJuIGNrKGcpfWZ1bmN0aW9uIGprKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6c2Esa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319XG53Yz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1oZyhHZygpLDE1MCwxMDApO0lnKGEsYik7ZWsoYSxiKX19O3hjPWZ1bmN0aW9uKGEpezEzPT09YS50YWcmJihJZyhhLDMpLGVrKGEsMykpfTt5Yz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1HZygpO2I9SGcoYixhLG51bGwpO0lnKGEsYik7ZWsoYSxiKX19O1xuVWE9ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpDYihhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGU9XCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9UWQoZCk7aWYoIWUpdGhyb3cgRXJyb3IodSg5MCkpO3liKGQpO0NiKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjpLYihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmSGIoYSwhIWMubXVsdGlwbGUsYiwhMSl9fTskYT1NajtcbmFiPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9VztXfD00O3RyeXtyZXR1cm4gY2coOTgsYS5iaW5kKG51bGwsYixjLGQsZSkpfWZpbmFsbHl7Vz1mLFc9PT1WJiZnZygpfX07YmI9ZnVuY3Rpb24oKXsoVyYoMXxmanxnaikpPT09ViYmKExqKCksRGooKSl9O2NiPWZ1bmN0aW9uKGEsYil7dmFyIGM9VztXfD0yO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1c9YyxXPT09ViYmZ2coKX19O2Z1bmN0aW9uIGtrKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7aWYoIWdrKGIpKXRocm93IEVycm9yKHUoMjAwKSk7cmV0dXJuIGprKGEsYixudWxsLGMpfXZhciBsaz17RXZlbnRzOltOYyxQZCxRZCxTYSxPYSxYZCxmdW5jdGlvbihhKXtqYyhhLFdkKX0sWWEsWmEsaWQsbWMsRGose2N1cnJlbnQ6ITF9XX07XG4oZnVuY3Rpb24oYSl7dmFyIGI9YS5maW5kRmliZXJCeUhvc3RJbnN0YW5jZTtyZXR1cm4gWWoobih7fSxhLHtvdmVycmlkZUhvb2tTdGF0ZTpudWxsLG92ZXJyaWRlUHJvcHM6bnVsbCxzZXRTdXNwZW5zZUhhbmRsZXI6bnVsbCxzY2hlZHVsZVVwZGF0ZTpudWxsLGN1cnJlbnREaXNwYXRjaGVyUmVmOnBhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7YT1oYyhhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0sZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6ZnVuY3Rpb24oYSl7cmV0dXJuIGI/YihhKTpudWxsfSxmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2g6bnVsbCxzY2hlZHVsZVJlZnJlc2g6bnVsbCxzY2hlZHVsZVJvb3Q6bnVsbCxzZXRSZWZyZXNoSGFuZGxlcjpudWxsLGdldEN1cnJlbnRGaWJlcjpudWxsfSkpfSkoe2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOnRjLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTYuMTMuMFwiLFxucmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifSk7ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD1saztleHBvcnRzLmNyZWF0ZVBvcnRhbD1raztleHBvcnRzLmZpbmRET01Ob2RlPWZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO2lmKHZvaWQgMD09PWIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcil0aHJvdyBFcnJvcih1KDE4OCkpO3Rocm93IEVycm9yKHUoMjY4LE9iamVjdC5rZXlzKGEpKSk7fWE9aGMoYik7YT1udWxsPT09YT9udWxsOmEuc3RhdGVOb2RlO3JldHVybiBhfTtcbmV4cG9ydHMuZmx1c2hTeW5jPWZ1bmN0aW9uKGEsYil7aWYoKFcmKGZqfGdqKSkhPT1WKXRocm93IEVycm9yKHUoMTg3KSk7dmFyIGM9VztXfD0xO3RyeXtyZXR1cm4gY2coOTksYS5iaW5kKG51bGwsYikpfWZpbmFsbHl7Vz1jLGdnKCl9fTtleHBvcnRzLmh5ZHJhdGU9ZnVuY3Rpb24oYSxiLGMpe2lmKCFnayhiKSl0aHJvdyBFcnJvcih1KDIwMCkpO3JldHVybiBpayhudWxsLGEsYiwhMCxjKX07ZXhwb3J0cy5yZW5kZXI9ZnVuY3Rpb24oYSxiLGMpe2lmKCFnayhiKSl0aHJvdyBFcnJvcih1KDIwMCkpO3JldHVybiBpayhudWxsLGEsYiwhMSxjKX07XG5leHBvcnRzLnVubW91bnRDb21wb25lbnRBdE5vZGU9ZnVuY3Rpb24oYSl7aWYoIWdrKGEpKXRocm93IEVycm9yKHUoNDApKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhOaihmdW5jdGlvbigpe2lrKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGw7YVtPZF09bnVsbH0pfSksITApOiExfTtleHBvcnRzLnVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzPU1qO2V4cG9ydHMudW5zdGFibGVfY3JlYXRlUG9ydGFsPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGtrKGEsYiwyPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbCl9O1xuZXhwb3J0cy51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyxkKXtpZighZ2soYykpdGhyb3cgRXJyb3IodSgyMDApKTtpZihudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFsRmliZXIpdGhyb3cgRXJyb3IodSgzOCkpO3JldHVybiBpayhhLGIsYywhMSxkKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTYuMTMuMFwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MC4xOS4wXG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGYsZyxoLGssbDtcbmlmKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgTWVzc2FnZUNoYW5uZWwpe3ZhciBwPW51bGwscT1udWxsLHQ9ZnVuY3Rpb24oKXtpZihudWxsIT09cCl0cnl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtwKCEwLGEpO3A9bnVsbH1jYXRjaChiKXt0aHJvdyBzZXRUaW1lb3V0KHQsMCksYjt9fSx1PURhdGUubm93KCk7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gRGF0ZS5ub3coKS11fTtmPWZ1bmN0aW9uKGEpe251bGwhPT1wP3NldFRpbWVvdXQoZiwwLGEpOihwPWEsc2V0VGltZW91dCh0LDApKX07Zz1mdW5jdGlvbihhLGIpe3E9c2V0VGltZW91dChhLGIpfTtoPWZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHEpfTtrPWZ1bmN0aW9uKCl7cmV0dXJuITF9O2w9ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbigpe319ZWxzZXt2YXIgdz13aW5kb3cucGVyZm9ybWFuY2UseD13aW5kb3cuRGF0ZSxcbnk9d2luZG93LnNldFRpbWVvdXQsej13aW5kb3cuY2xlYXJUaW1lb3V0O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgY29uc29sZSl7dmFyIEE9d2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lJiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vZmIubWUvcmVhY3QtcG9seWZpbGxzXCIpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBBJiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBjYW5jZWxBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9mYi5tZS9yZWFjdC1wb2x5ZmlsbHNcIil9aWYoXCJvYmplY3RcIj09PVxudHlwZW9mIHcmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiB3Lm5vdylleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiB3Lm5vdygpfTtlbHNle3ZhciBCPXgubm93KCk7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4geC5ub3coKS1CfX12YXIgQz0hMSxEPW51bGwsRT0tMSxGPTUsRz0wO2s9ZnVuY3Rpb24oKXtyZXR1cm4gZXhwb3J0cy51bnN0YWJsZV9ub3coKT49R307bD1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbihhKXswPmF8fDEyNTxhP2NvbnNvbGUuZXJyb3IoXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZXJhdGVzIGhpZ2hlciB0aGFuIDEyNSBmcHMgaXMgbm90IHVuc3VwcG9ydGVkXCIpOkY9MDxhP01hdGguZmxvb3IoMUUzL2EpOjV9O3ZhciBIPW5ldyBNZXNzYWdlQ2hhbm5lbCxJPUgucG9ydDI7SC5wb3J0MS5vbm1lc3NhZ2U9XG5mdW5jdGlvbigpe2lmKG51bGwhPT1EKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO0c9YStGO3RyeXtEKCEwLGEpP0kucG9zdE1lc3NhZ2UobnVsbCk6KEM9ITEsRD1udWxsKX1jYXRjaChiKXt0aHJvdyBJLnBvc3RNZXNzYWdlKG51bGwpLGI7fX1lbHNlIEM9ITF9O2Y9ZnVuY3Rpb24oYSl7RD1hO0N8fChDPSEwLEkucG9zdE1lc3NhZ2UobnVsbCkpfTtnPWZ1bmN0aW9uKGEsYil7RT15KGZ1bmN0aW9uKCl7YShleHBvcnRzLnVuc3RhYmxlX25vdygpKX0sYil9O2g9ZnVuY3Rpb24oKXt6KEUpO0U9LTF9fWZ1bmN0aW9uIEooYSxiKXt2YXIgYz1hLmxlbmd0aDthLnB1c2goYik7YTpmb3IoOzspe3ZhciBkPWMtMT4+PjEsZT1hW2RdO2lmKHZvaWQgMCE9PWUmJjA8SyhlLGIpKWFbZF09YixhW2NdPWUsYz1kO2Vsc2UgYnJlYWsgYX19ZnVuY3Rpb24gTChhKXthPWFbMF07cmV0dXJuIHZvaWQgMD09PWE/bnVsbDphfVxuZnVuY3Rpb24gTShhKXt2YXIgYj1hWzBdO2lmKHZvaWQgMCE9PWIpe3ZhciBjPWEucG9wKCk7aWYoYyE9PWIpe2FbMF09YzthOmZvcih2YXIgZD0wLGU9YS5sZW5ndGg7ZDxlOyl7dmFyIG09MiooZCsxKS0xLG49YVttXSx2PW0rMSxyPWFbdl07aWYodm9pZCAwIT09biYmMD5LKG4sYykpdm9pZCAwIT09ciYmMD5LKHIsbik/KGFbZF09cixhW3ZdPWMsZD12KTooYVtkXT1uLGFbbV09YyxkPW0pO2Vsc2UgaWYodm9pZCAwIT09ciYmMD5LKHIsYykpYVtkXT1yLGFbdl09YyxkPXY7ZWxzZSBicmVhayBhfX1yZXR1cm4gYn1yZXR1cm4gbnVsbH1mdW5jdGlvbiBLKGEsYil7dmFyIGM9YS5zb3J0SW5kZXgtYi5zb3J0SW5kZXg7cmV0dXJuIDAhPT1jP2M6YS5pZC1iLmlkfXZhciBOPVtdLE89W10sUD0xLFE9bnVsbCxSPTMsUz0hMSxUPSExLFU9ITE7XG5mdW5jdGlvbiBWKGEpe2Zvcih2YXIgYj1MKE8pO251bGwhPT1iOyl7aWYobnVsbD09PWIuY2FsbGJhY2spTShPKTtlbHNlIGlmKGIuc3RhcnRUaW1lPD1hKU0oTyksYi5zb3J0SW5kZXg9Yi5leHBpcmF0aW9uVGltZSxKKE4sYik7ZWxzZSBicmVhaztiPUwoTyl9fWZ1bmN0aW9uIFcoYSl7VT0hMTtWKGEpO2lmKCFUKWlmKG51bGwhPT1MKE4pKVQ9ITAsZihYKTtlbHNle3ZhciBiPUwoTyk7bnVsbCE9PWImJmcoVyxiLnN0YXJ0VGltZS1hKX19XG5mdW5jdGlvbiBYKGEsYil7VD0hMTtVJiYoVT0hMSxoKCkpO1M9ITA7dmFyIGM9Ujt0cnl7VihiKTtmb3IoUT1MKE4pO251bGwhPT1RJiYoIShRLmV4cGlyYXRpb25UaW1lPmIpfHxhJiYhaygpKTspe3ZhciBkPVEuY2FsbGJhY2s7aWYobnVsbCE9PWQpe1EuY2FsbGJhY2s9bnVsbDtSPVEucHJpb3JpdHlMZXZlbDt2YXIgZT1kKFEuZXhwaXJhdGlvblRpbWU8PWIpO2I9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZT9RLmNhbGxiYWNrPWU6UT09PUwoTikmJk0oTik7VihiKX1lbHNlIE0oTik7UT1MKE4pfWlmKG51bGwhPT1RKXZhciBtPSEwO2Vsc2V7dmFyIG49TChPKTtudWxsIT09biYmZyhXLG4uc3RhcnRUaW1lLWIpO209ITF9cmV0dXJuIG19ZmluYWxseXtRPW51bGwsUj1jLFM9ITF9fVxuZnVuY3Rpb24gWShhKXtzd2l0Y2goYSl7Y2FzZSAxOnJldHVybi0xO2Nhc2UgMjpyZXR1cm4gMjUwO2Nhc2UgNTpyZXR1cm4gMTA3Mzc0MTgyMztjYXNlIDQ6cmV0dXJuIDFFNDtkZWZhdWx0OnJldHVybiA1RTN9fXZhciBaPWw7ZXhwb3J0cy51bnN0YWJsZV9JZGxlUHJpb3JpdHk9NTtleHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5PTE7ZXhwb3J0cy51bnN0YWJsZV9Mb3dQcmlvcml0eT00O2V4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk9MztleHBvcnRzLnVuc3RhYmxlX1Byb2ZpbGluZz1udWxsO2V4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk9MjtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe2EuY2FsbGJhY2s9bnVsbH07ZXhwb3J0cy51bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbj1mdW5jdGlvbigpe1R8fFN8fChUPSEwLGYoWCkpfTtcbmV4cG9ydHMudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWw9ZnVuY3Rpb24oKXtyZXR1cm4gUn07ZXhwb3J0cy51bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZT1mdW5jdGlvbigpe3JldHVybiBMKE4pfTtleHBvcnRzLnVuc3RhYmxlX25leHQ9ZnVuY3Rpb24oYSl7c3dpdGNoKFIpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOnZhciBiPTM7YnJlYWs7ZGVmYXVsdDpiPVJ9dmFyIGM9UjtSPWI7dHJ5e3JldHVybiBhKCl9ZmluYWxseXtSPWN9fTtleHBvcnRzLnVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX3JlcXVlc3RQYWludD1aO2V4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5PWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6YnJlYWs7ZGVmYXVsdDphPTN9dmFyIGM9UjtSPWE7dHJ5e3JldHVybiBiKCl9ZmluYWxseXtSPWN9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXt2YXIgZT1jLmRlbGF5O2U9XCJudW1iZXJcIj09PXR5cGVvZiBlJiYwPGU/ZCtlOmQ7Yz1cIm51bWJlclwiPT09dHlwZW9mIGMudGltZW91dD9jLnRpbWVvdXQ6WShhKX1lbHNlIGM9WShhKSxlPWQ7Yz1lK2M7YT17aWQ6UCsrLGNhbGxiYWNrOmIscHJpb3JpdHlMZXZlbDphLHN0YXJ0VGltZTplLGV4cGlyYXRpb25UaW1lOmMsc29ydEluZGV4Oi0xfTtlPmQ/KGEuc29ydEluZGV4PWUsSihPLGEpLG51bGw9PT1MKE4pJiZhPT09TChPKSYmKFU/aCgpOlU9ITAsZyhXLGUtZCkpKTooYS5zb3J0SW5kZXg9YyxKKE4sYSksVHx8U3x8KFQ9ITAsZihYKSkpO3JldHVybiBhfTtcbmV4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9ZnVuY3Rpb24oKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO1YoYSk7dmFyIGI9TChOKTtyZXR1cm4gYiE9PVEmJm51bGwhPT1RJiZudWxsIT09YiYmbnVsbCE9PWIuY2FsbGJhY2smJmIuc3RhcnRUaW1lPD1hJiZiLmV4cGlyYXRpb25UaW1lPFEuZXhwaXJhdGlvblRpbWV8fGsoKX07ZXhwb3J0cy51bnN0YWJsZV93cmFwQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7dmFyIGI9UjtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYz1SO1I9Yjt0cnl7cmV0dXJuIGEuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZpbmFsbHl7Uj1jfX19O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9IHJlcXVpcmUoJy4vbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0Jyk7XG5cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fVxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbldpdGhSZXNldCgpIHt9XG5lbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LnJlc2V0V2FybmluZ0NhY2hlID0gZW1wdHlGdW5jdGlvbjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gc2hpbShwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUsIHNlY3JldCkge1xuICAgIGlmIChzZWNyZXQgPT09IFJlYWN0UHJvcFR5cGVzU2VjcmV0KSB7XG4gICAgICAvLyBJdCBpcyBzdGlsbCBzYWZlIHdoZW4gY2FsbGVkIGZyb20gUmVhY3QuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICAgIGVyci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIHRocm93IGVycjtcbiAgfTtcbiAgc2hpbS5pc1JlcXVpcmVkID0gc2hpbTtcbiAgZnVuY3Rpb24gZ2V0U2hpbSgpIHtcbiAgICByZXR1cm4gc2hpbTtcbiAgfTtcbiAgLy8gSW1wb3J0YW50IVxuICAvLyBLZWVwIHRoaXMgbGlzdCBpbiBzeW5jIHdpdGggcHJvZHVjdGlvbiB2ZXJzaW9uIGluIGAuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzLmpzYC5cbiAgdmFyIFJlYWN0UHJvcFR5cGVzID0ge1xuICAgIGFycmF5OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGVsZW1lbnRUeXBlOiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW0sXG5cbiAgICBjaGVja1Byb3BUeXBlczogZW1wdHlGdW5jdGlvbldpdGhSZXNldCxcbiAgICByZXNldFdhcm5pbmdDYWNoZTogZW1wdHlGdW5jdGlvblxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJztcblxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdFByb3BUeXBlc1NlY3JldDtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMFxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/XG5TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTo2MDEyMCxyPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHY9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsdz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyx4PWI/U3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTo2MDExOCx5PWI/U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpOjYwMTE5O1xuZnVuY3Rpb24geihhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgdDpjYXNlIHI6Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIEEoYSl7cmV0dXJuIHooYSk9PT1tfWV4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtleHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXQ7ZXhwb3J0cy5NZW1vPXI7ZXhwb3J0cy5Qb3J0YWw9ZDtcbmV4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gQShhKXx8eihhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1BO2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1rfTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09aH07ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT10fTtcbmV4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cn07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Zn07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cH07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXR8fGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09d3x8YS4kJHR5cGVvZj09PXh8fGEuJCR0eXBlb2Y9PT15fHxhLiQkdHlwZW9mPT09dil9O2V4cG9ydHMudHlwZU9mPXo7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9yaWdpbmFsTW9kdWxlKSB7XG5cdGlmICghb3JpZ2luYWxNb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0dmFyIG1vZHVsZSA9IE9iamVjdC5jcmVhdGUob3JpZ2luYWxNb2R1bGUpO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImV4cG9ydHNcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XG5cdFx0bW9kdWxlLnBhdGhzID0gW107XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwidmFyIG1hcCA9IHtcblx0XCIuL2FmXCI6IDY0LFxuXHRcIi4vYWYuanNcIjogNjQsXG5cdFwiLi9hclwiOiA2NSxcblx0XCIuL2FyLWR6XCI6IDY2LFxuXHRcIi4vYXItZHouanNcIjogNjYsXG5cdFwiLi9hci1rd1wiOiA2Nyxcblx0XCIuL2FyLWt3LmpzXCI6IDY3LFxuXHRcIi4vYXItbHlcIjogNjgsXG5cdFwiLi9hci1seS5qc1wiOiA2OCxcblx0XCIuL2FyLW1hXCI6IDY5LFxuXHRcIi4vYXItbWEuanNcIjogNjksXG5cdFwiLi9hci1zYVwiOiA3MCxcblx0XCIuL2FyLXNhLmpzXCI6IDcwLFxuXHRcIi4vYXItdG5cIjogNzEsXG5cdFwiLi9hci10bi5qc1wiOiA3MSxcblx0XCIuL2FyLmpzXCI6IDY1LFxuXHRcIi4vYXpcIjogNzIsXG5cdFwiLi9hei5qc1wiOiA3Mixcblx0XCIuL2JlXCI6IDczLFxuXHRcIi4vYmUuanNcIjogNzMsXG5cdFwiLi9iZ1wiOiA3NCxcblx0XCIuL2JnLmpzXCI6IDc0LFxuXHRcIi4vYm1cIjogNzUsXG5cdFwiLi9ibS5qc1wiOiA3NSxcblx0XCIuL2JuXCI6IDc2LFxuXHRcIi4vYm4uanNcIjogNzYsXG5cdFwiLi9ib1wiOiA3Nyxcblx0XCIuL2JvLmpzXCI6IDc3LFxuXHRcIi4vYnJcIjogNzgsXG5cdFwiLi9ici5qc1wiOiA3OCxcblx0XCIuL2JzXCI6IDc5LFxuXHRcIi4vYnMuanNcIjogNzksXG5cdFwiLi9jYVwiOiA4MCxcblx0XCIuL2NhLmpzXCI6IDgwLFxuXHRcIi4vY3NcIjogODEsXG5cdFwiLi9jcy5qc1wiOiA4MSxcblx0XCIuL2N2XCI6IDgyLFxuXHRcIi4vY3YuanNcIjogODIsXG5cdFwiLi9jeVwiOiA4Myxcblx0XCIuL2N5LmpzXCI6IDgzLFxuXHRcIi4vZGFcIjogODQsXG5cdFwiLi9kYS5qc1wiOiA4NCxcblx0XCIuL2RlXCI6IDg1LFxuXHRcIi4vZGUtYXRcIjogODYsXG5cdFwiLi9kZS1hdC5qc1wiOiA4Nixcblx0XCIuL2RlLWNoXCI6IDg3LFxuXHRcIi4vZGUtY2guanNcIjogODcsXG5cdFwiLi9kZS5qc1wiOiA4NSxcblx0XCIuL2R2XCI6IDg4LFxuXHRcIi4vZHYuanNcIjogODgsXG5cdFwiLi9lbFwiOiA4OSxcblx0XCIuL2VsLmpzXCI6IDg5LFxuXHRcIi4vZW4tU0dcIjogOTAsXG5cdFwiLi9lbi1TRy5qc1wiOiA5MCxcblx0XCIuL2VuLWF1XCI6IDkxLFxuXHRcIi4vZW4tYXUuanNcIjogOTEsXG5cdFwiLi9lbi1jYVwiOiA5Mixcblx0XCIuL2VuLWNhLmpzXCI6IDkyLFxuXHRcIi4vZW4tZ2JcIjogOTMsXG5cdFwiLi9lbi1nYi5qc1wiOiA5Myxcblx0XCIuL2VuLWllXCI6IDk0LFxuXHRcIi4vZW4taWUuanNcIjogOTQsXG5cdFwiLi9lbi1pbFwiOiA5NSxcblx0XCIuL2VuLWlsLmpzXCI6IDk1LFxuXHRcIi4vZW4tbnpcIjogOTYsXG5cdFwiLi9lbi1uei5qc1wiOiA5Nixcblx0XCIuL2VvXCI6IDk3LFxuXHRcIi4vZW8uanNcIjogOTcsXG5cdFwiLi9lc1wiOiA5OCxcblx0XCIuL2VzLWRvXCI6IDk5LFxuXHRcIi4vZXMtZG8uanNcIjogOTksXG5cdFwiLi9lcy11c1wiOiAxMDAsXG5cdFwiLi9lcy11cy5qc1wiOiAxMDAsXG5cdFwiLi9lcy5qc1wiOiA5OCxcblx0XCIuL2V0XCI6IDEwMSxcblx0XCIuL2V0LmpzXCI6IDEwMSxcblx0XCIuL2V1XCI6IDEwMixcblx0XCIuL2V1LmpzXCI6IDEwMixcblx0XCIuL2ZhXCI6IDEwMyxcblx0XCIuL2ZhLmpzXCI6IDEwMyxcblx0XCIuL2ZpXCI6IDEwNCxcblx0XCIuL2ZpLmpzXCI6IDEwNCxcblx0XCIuL2ZvXCI6IDEwNSxcblx0XCIuL2ZvLmpzXCI6IDEwNSxcblx0XCIuL2ZyXCI6IDEwNixcblx0XCIuL2ZyLWNhXCI6IDEwNyxcblx0XCIuL2ZyLWNhLmpzXCI6IDEwNyxcblx0XCIuL2ZyLWNoXCI6IDEwOCxcblx0XCIuL2ZyLWNoLmpzXCI6IDEwOCxcblx0XCIuL2ZyLmpzXCI6IDEwNixcblx0XCIuL2Z5XCI6IDEwOSxcblx0XCIuL2Z5LmpzXCI6IDEwOSxcblx0XCIuL2dhXCI6IDExMCxcblx0XCIuL2dhLmpzXCI6IDExMCxcblx0XCIuL2dkXCI6IDExMSxcblx0XCIuL2dkLmpzXCI6IDExMSxcblx0XCIuL2dsXCI6IDExMixcblx0XCIuL2dsLmpzXCI6IDExMixcblx0XCIuL2dvbS1sYXRuXCI6IDExMyxcblx0XCIuL2dvbS1sYXRuLmpzXCI6IDExMyxcblx0XCIuL2d1XCI6IDExNCxcblx0XCIuL2d1LmpzXCI6IDExNCxcblx0XCIuL2hlXCI6IDExNSxcblx0XCIuL2hlLmpzXCI6IDExNSxcblx0XCIuL2hpXCI6IDExNixcblx0XCIuL2hpLmpzXCI6IDExNixcblx0XCIuL2hyXCI6IDExNyxcblx0XCIuL2hyLmpzXCI6IDExNyxcblx0XCIuL2h1XCI6IDExOCxcblx0XCIuL2h1LmpzXCI6IDExOCxcblx0XCIuL2h5LWFtXCI6IDExOSxcblx0XCIuL2h5LWFtLmpzXCI6IDExOSxcblx0XCIuL2lkXCI6IDEyMCxcblx0XCIuL2lkLmpzXCI6IDEyMCxcblx0XCIuL2lzXCI6IDEyMSxcblx0XCIuL2lzLmpzXCI6IDEyMSxcblx0XCIuL2l0XCI6IDEyMixcblx0XCIuL2l0LWNoXCI6IDEyMyxcblx0XCIuL2l0LWNoLmpzXCI6IDEyMyxcblx0XCIuL2l0LmpzXCI6IDEyMixcblx0XCIuL2phXCI6IDEyNCxcblx0XCIuL2phLmpzXCI6IDEyNCxcblx0XCIuL2p2XCI6IDEyNSxcblx0XCIuL2p2LmpzXCI6IDEyNSxcblx0XCIuL2thXCI6IDEyNixcblx0XCIuL2thLmpzXCI6IDEyNixcblx0XCIuL2trXCI6IDEyNyxcblx0XCIuL2trLmpzXCI6IDEyNyxcblx0XCIuL2ttXCI6IDEyOCxcblx0XCIuL2ttLmpzXCI6IDEyOCxcblx0XCIuL2tuXCI6IDEyOSxcblx0XCIuL2tuLmpzXCI6IDEyOSxcblx0XCIuL2tvXCI6IDEzMCxcblx0XCIuL2tvLmpzXCI6IDEzMCxcblx0XCIuL2t1XCI6IDEzMSxcblx0XCIuL2t1LmpzXCI6IDEzMSxcblx0XCIuL2t5XCI6IDEzMixcblx0XCIuL2t5LmpzXCI6IDEzMixcblx0XCIuL2xiXCI6IDEzMyxcblx0XCIuL2xiLmpzXCI6IDEzMyxcblx0XCIuL2xvXCI6IDEzNCxcblx0XCIuL2xvLmpzXCI6IDEzNCxcblx0XCIuL2x0XCI6IDEzNSxcblx0XCIuL2x0LmpzXCI6IDEzNSxcblx0XCIuL2x2XCI6IDEzNixcblx0XCIuL2x2LmpzXCI6IDEzNixcblx0XCIuL21lXCI6IDEzNyxcblx0XCIuL21lLmpzXCI6IDEzNyxcblx0XCIuL21pXCI6IDEzOCxcblx0XCIuL21pLmpzXCI6IDEzOCxcblx0XCIuL21rXCI6IDEzOSxcblx0XCIuL21rLmpzXCI6IDEzOSxcblx0XCIuL21sXCI6IDE0MCxcblx0XCIuL21sLmpzXCI6IDE0MCxcblx0XCIuL21uXCI6IDE0MSxcblx0XCIuL21uLmpzXCI6IDE0MSxcblx0XCIuL21yXCI6IDE0Mixcblx0XCIuL21yLmpzXCI6IDE0Mixcblx0XCIuL21zXCI6IDE0Myxcblx0XCIuL21zLW15XCI6IDE0NCxcblx0XCIuL21zLW15LmpzXCI6IDE0NCxcblx0XCIuL21zLmpzXCI6IDE0Myxcblx0XCIuL210XCI6IDE0NSxcblx0XCIuL210LmpzXCI6IDE0NSxcblx0XCIuL215XCI6IDE0Nixcblx0XCIuL215LmpzXCI6IDE0Nixcblx0XCIuL25iXCI6IDE0Nyxcblx0XCIuL25iLmpzXCI6IDE0Nyxcblx0XCIuL25lXCI6IDE0OCxcblx0XCIuL25lLmpzXCI6IDE0OCxcblx0XCIuL25sXCI6IDE0OSxcblx0XCIuL25sLWJlXCI6IDE1MCxcblx0XCIuL25sLWJlLmpzXCI6IDE1MCxcblx0XCIuL25sLmpzXCI6IDE0OSxcblx0XCIuL25uXCI6IDE1MSxcblx0XCIuL25uLmpzXCI6IDE1MSxcblx0XCIuL3BhLWluXCI6IDE1Mixcblx0XCIuL3BhLWluLmpzXCI6IDE1Mixcblx0XCIuL3BsXCI6IDE1Myxcblx0XCIuL3BsLmpzXCI6IDE1Myxcblx0XCIuL3B0XCI6IDE1NCxcblx0XCIuL3B0LWJyXCI6IDE1NSxcblx0XCIuL3B0LWJyLmpzXCI6IDE1NSxcblx0XCIuL3B0LmpzXCI6IDE1NCxcblx0XCIuL3JvXCI6IDE1Nixcblx0XCIuL3JvLmpzXCI6IDE1Nixcblx0XCIuL3J1XCI6IDE1Nyxcblx0XCIuL3J1LmpzXCI6IDE1Nyxcblx0XCIuL3NkXCI6IDE1OCxcblx0XCIuL3NkLmpzXCI6IDE1OCxcblx0XCIuL3NlXCI6IDE1OSxcblx0XCIuL3NlLmpzXCI6IDE1OSxcblx0XCIuL3NpXCI6IDE2MCxcblx0XCIuL3NpLmpzXCI6IDE2MCxcblx0XCIuL3NrXCI6IDE2MSxcblx0XCIuL3NrLmpzXCI6IDE2MSxcblx0XCIuL3NsXCI6IDE2Mixcblx0XCIuL3NsLmpzXCI6IDE2Mixcblx0XCIuL3NxXCI6IDE2Myxcblx0XCIuL3NxLmpzXCI6IDE2Myxcblx0XCIuL3NyXCI6IDE2NCxcblx0XCIuL3NyLWN5cmxcIjogMTY1LFxuXHRcIi4vc3ItY3lybC5qc1wiOiAxNjUsXG5cdFwiLi9zci5qc1wiOiAxNjQsXG5cdFwiLi9zc1wiOiAxNjYsXG5cdFwiLi9zcy5qc1wiOiAxNjYsXG5cdFwiLi9zdlwiOiAxNjcsXG5cdFwiLi9zdi5qc1wiOiAxNjcsXG5cdFwiLi9zd1wiOiAxNjgsXG5cdFwiLi9zdy5qc1wiOiAxNjgsXG5cdFwiLi90YVwiOiAxNjksXG5cdFwiLi90YS5qc1wiOiAxNjksXG5cdFwiLi90ZVwiOiAxNzAsXG5cdFwiLi90ZS5qc1wiOiAxNzAsXG5cdFwiLi90ZXRcIjogMTcxLFxuXHRcIi4vdGV0LmpzXCI6IDE3MSxcblx0XCIuL3RnXCI6IDE3Mixcblx0XCIuL3RnLmpzXCI6IDE3Mixcblx0XCIuL3RoXCI6IDE3Myxcblx0XCIuL3RoLmpzXCI6IDE3Myxcblx0XCIuL3RsLXBoXCI6IDE3NCxcblx0XCIuL3RsLXBoLmpzXCI6IDE3NCxcblx0XCIuL3RsaFwiOiAxNzUsXG5cdFwiLi90bGguanNcIjogMTc1LFxuXHRcIi4vdHJcIjogMTc2LFxuXHRcIi4vdHIuanNcIjogMTc2LFxuXHRcIi4vdHpsXCI6IDE3Nyxcblx0XCIuL3R6bC5qc1wiOiAxNzcsXG5cdFwiLi90em1cIjogMTc4LFxuXHRcIi4vdHptLWxhdG5cIjogMTc5LFxuXHRcIi4vdHptLWxhdG4uanNcIjogMTc5LFxuXHRcIi4vdHptLmpzXCI6IDE3OCxcblx0XCIuL3VnLWNuXCI6IDE4MCxcblx0XCIuL3VnLWNuLmpzXCI6IDE4MCxcblx0XCIuL3VrXCI6IDE4MSxcblx0XCIuL3VrLmpzXCI6IDE4MSxcblx0XCIuL3VyXCI6IDE4Mixcblx0XCIuL3VyLmpzXCI6IDE4Mixcblx0XCIuL3V6XCI6IDE4Myxcblx0XCIuL3V6LWxhdG5cIjogMTg0LFxuXHRcIi4vdXotbGF0bi5qc1wiOiAxODQsXG5cdFwiLi91ei5qc1wiOiAxODMsXG5cdFwiLi92aVwiOiAxODUsXG5cdFwiLi92aS5qc1wiOiAxODUsXG5cdFwiLi94LXBzZXVkb1wiOiAxODYsXG5cdFwiLi94LXBzZXVkby5qc1wiOiAxODYsXG5cdFwiLi95b1wiOiAxODcsXG5cdFwiLi95by5qc1wiOiAxODcsXG5cdFwiLi96aC1jblwiOiAxODgsXG5cdFwiLi96aC1jbi5qc1wiOiAxODgsXG5cdFwiLi96aC1oa1wiOiAxODksXG5cdFwiLi96aC1oay5qc1wiOiAxODksXG5cdFwiLi96aC10d1wiOiAxOTAsXG5cdFwiLi96aC10dy5qc1wiOiAxOTBcbn07XG5cblxuZnVuY3Rpb24gd2VicGFja0NvbnRleHQocmVxKSB7XG5cdHZhciBpZCA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpO1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhpZCk7XG59XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSB7XG5cdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8obWFwLCByZXEpKSB7XG5cdFx0dmFyIGUgPSBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInXCIpO1xuXHRcdGUuY29kZSA9ICdNT0RVTEVfTk9UX0ZPVU5EJztcblx0XHR0aHJvdyBlO1xuXHR9XG5cdHJldHVybiBtYXBbcmVxXTtcbn1cbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSAyNjE7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ2FsZW5kYXJEYXlcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0NhbGVuZGFyRGF5W1wiZGVmYXVsdFwiXTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDYWxlbmRhck1vbnRoXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9DYWxlbmRhck1vbnRoW1wiZGVmYXVsdFwiXTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDYWxlbmRhck1vbnRoR3JpZFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfQ2FsZW5kYXJNb250aEdyaWRbXCJkZWZhdWx0XCJdO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRhdGVSYW5nZVBpY2tlclwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfRGF0ZVJhbmdlUGlja2VyW1wiZGVmYXVsdFwiXTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEYXRlUmFuZ2VQaWNrZXJJbnB1dFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfRGF0ZVJhbmdlUGlja2VySW5wdXRbXCJkZWZhdWx0XCJdO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRhdGVSYW5nZVBpY2tlcklucHV0Q29udHJvbGxlclwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfRGF0ZVJhbmdlUGlja2VySW5wdXRDb250cm9sbGVyW1wiZGVmYXVsdFwiXTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEYXRlUmFuZ2VQaWNrZXJTaGFwZVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfRGF0ZVJhbmdlUGlja2VyU2hhcGVbXCJkZWZhdWx0XCJdO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRheVBpY2tlclwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfRGF5UGlja2VyW1wiZGVmYXVsdFwiXTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJEYXlQaWNrZXJSYW5nZUNvbnRyb2xsZXJcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0RheVBpY2tlclJhbmdlQ29udHJvbGxlcltcImRlZmF1bHRcIl07XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRGF5UGlja2VyU2luZ2xlRGF0ZUNvbnRyb2xsZXJcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX0RheVBpY2tlclNpbmdsZURhdGVDb250cm9sbGVyW1wiZGVmYXVsdFwiXTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTaW5nbGVEYXRlUGlja2VyXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9TaW5nbGVEYXRlUGlja2VyW1wiZGVmYXVsdFwiXTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJTaW5nbGVEYXRlUGlja2VySW5wdXRcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX1NpbmdsZURhdGVQaWNrZXJJbnB1dFtcImRlZmF1bHRcIl07XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU2luZ2xlRGF0ZVBpY2tlclNoYXBlXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9TaW5nbGVEYXRlUGlja2VyU2hhcGVbXCJkZWZhdWx0XCJdO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzSW5jbHVzaXZlbHlBZnRlckRheVwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaXNJbmNsdXNpdmVseUFmdGVyRGF5W1wiZGVmYXVsdFwiXTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc0luY2x1c2l2ZWx5QmVmb3JlRGF5XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pc0luY2x1c2l2ZWx5QmVmb3JlRGF5W1wiZGVmYXVsdFwiXTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJpc05leHREYXlcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2lzTmV4dERheVtcImRlZmF1bHRcIl07XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaXNTYW1lRGF5XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9pc1NhbWVEYXlbXCJkZWZhdWx0XCJdO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInRvSVNPRGF0ZVN0cmluZ1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfdG9JU09EYXRlU3RyaW5nW1wiZGVmYXVsdFwiXTtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ0b0xvY2FsaXplZERhdGVTdHJpbmdcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX3RvTG9jYWxpemVkRGF0ZVN0cmluZ1tcImRlZmF1bHRcIl07XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidG9Nb21lbnRPYmplY3RcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX3RvTW9tZW50T2JqZWN0W1wiZGVmYXVsdFwiXTtcbiAgfVxufSk7XG5cbnZhciBfQ2FsZW5kYXJEYXkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvQ2FsZW5kYXJEYXlcIikpO1xuXG52YXIgX0NhbGVuZGFyTW9udGggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvQ2FsZW5kYXJNb250aFwiKSk7XG5cbnZhciBfQ2FsZW5kYXJNb250aEdyaWQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvQ2FsZW5kYXJNb250aEdyaWRcIikpO1xuXG52YXIgX0RhdGVSYW5nZVBpY2tlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY29tcG9uZW50cy9EYXRlUmFuZ2VQaWNrZXJcIikpO1xuXG52YXIgX0RhdGVSYW5nZVBpY2tlcklucHV0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jb21wb25lbnRzL0RhdGVSYW5nZVBpY2tlcklucHV0XCIpKTtcblxudmFyIF9EYXRlUmFuZ2VQaWNrZXJJbnB1dENvbnRyb2xsZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvRGF0ZVJhbmdlUGlja2VySW5wdXRDb250cm9sbGVyXCIpKTtcblxudmFyIF9EYXRlUmFuZ2VQaWNrZXJTaGFwZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vc2hhcGVzL0RhdGVSYW5nZVBpY2tlclNoYXBlXCIpKTtcblxudmFyIF9EYXlQaWNrZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvRGF5UGlja2VyXCIpKTtcblxudmFyIF9EYXlQaWNrZXJSYW5nZUNvbnRyb2xsZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvRGF5UGlja2VyUmFuZ2VDb250cm9sbGVyXCIpKTtcblxudmFyIF9EYXlQaWNrZXJTaW5nbGVEYXRlQ29udHJvbGxlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY29tcG9uZW50cy9EYXlQaWNrZXJTaW5nbGVEYXRlQ29udHJvbGxlclwiKSk7XG5cbnZhciBfU2luZ2xlRGF0ZVBpY2tlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY29tcG9uZW50cy9TaW5nbGVEYXRlUGlja2VyXCIpKTtcblxudmFyIF9TaW5nbGVEYXRlUGlja2VySW5wdXQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NvbXBvbmVudHMvU2luZ2xlRGF0ZVBpY2tlcklucHV0XCIpKTtcblxudmFyIF9TaW5nbGVEYXRlUGlja2VyU2hhcGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3NoYXBlcy9TaW5nbGVEYXRlUGlja2VyU2hhcGVcIikpO1xuXG52YXIgX2lzSW5jbHVzaXZlbHlBZnRlckRheSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvaXNJbmNsdXNpdmVseUFmdGVyRGF5XCIpKTtcblxudmFyIF9pc0luY2x1c2l2ZWx5QmVmb3JlRGF5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9pc0luY2x1c2l2ZWx5QmVmb3JlRGF5XCIpKTtcblxudmFyIF9pc05leHREYXkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2lzTmV4dERheVwiKSk7XG5cbnZhciBfaXNTYW1lRGF5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9pc1NhbWVEYXlcIikpO1xuXG52YXIgX3RvSVNPRGF0ZVN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvdG9JU09EYXRlU3RyaW5nXCIpKTtcblxudmFyIF90b0xvY2FsaXplZERhdGVTdHJpbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL3RvTG9jYWxpemVkRGF0ZVN0cmluZ1wiKSk7XG5cbnZhciBfdG9Nb21lbnRPYmplY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL3RvTW9tZW50T2JqZWN0XCIpKTsiLCIndXNlIHN0cmljdCc7XG5cbi8vIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1vYmplY3QuaXNcblxudmFyIG51bWJlcklzTmFOID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzKGEsIGIpIHtcblx0aWYgKGEgPT09IDAgJiYgYiA9PT0gMCkge1xuXHRcdHJldHVybiAxIC8gYSA9PT0gMSAvIGI7XG5cdH1cblx0aWYgKGEgPT09IGIpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXHRpZiAobnVtYmVySXNOYU4oYSkgJiYgbnVtYmVySXNOYU4oYikpIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXHRyZXR1cm4gZmFsc2U7XG59O1xuXG4iLCIndXNlIHN0cmljdCc7XG5cbi8qIGVzbGludCBuby1pbnZhbGlkLXRoaXM6IDEgKi9cblxudmFyIEVSUk9SX01FU1NBR0UgPSAnRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgY2FsbGVkIG9uIGluY29tcGF0aWJsZSAnO1xudmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciBmdW5jVHlwZSA9ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZCh0aGF0KSB7XG4gICAgdmFyIHRhcmdldCA9IHRoaXM7XG4gICAgaWYgKHR5cGVvZiB0YXJnZXQgIT09ICdmdW5jdGlvbicgfHwgdG9TdHIuY2FsbCh0YXJnZXQpICE9PSBmdW5jVHlwZSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEVSUk9SX01FU1NBR0UgKyB0YXJnZXQpO1xuICAgIH1cbiAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcblxuICAgIHZhciBib3VuZDtcbiAgICB2YXIgYmluZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIGJvdW5kKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGFyZ2V0LmFwcGx5KFxuICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgYXJncy5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmIChPYmplY3QocmVzdWx0KSA9PT0gcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5hcHBseShcbiAgICAgICAgICAgICAgICB0aGF0LFxuICAgICAgICAgICAgICAgIGFyZ3MuY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzKSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIGJvdW5kTGVuZ3RoID0gTWF0aC5tYXgoMCwgdGFyZ2V0Lmxlbmd0aCAtIGFyZ3MubGVuZ3RoKTtcbiAgICB2YXIgYm91bmRBcmdzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib3VuZExlbmd0aDsgaSsrKSB7XG4gICAgICAgIGJvdW5kQXJncy5wdXNoKCckJyArIGkpO1xuICAgIH1cblxuICAgIGJvdW5kID0gRnVuY3Rpb24oJ2JpbmRlcicsICdyZXR1cm4gZnVuY3Rpb24gKCcgKyBib3VuZEFyZ3Muam9pbignLCcpICsgJyl7IHJldHVybiBiaW5kZXIuYXBwbHkodGhpcyxhcmd1bWVudHMpOyB9JykoYmluZGVyKTtcblxuICAgIGlmICh0YXJnZXQucHJvdG90eXBlKSB7XG4gICAgICAgIHZhciBFbXB0eSA9IGZ1bmN0aW9uIEVtcHR5KCkge307XG4gICAgICAgIEVtcHR5LnByb3RvdHlwZSA9IHRhcmdldC5wcm90b3R5cGU7XG4gICAgICAgIGJvdW5kLnByb3RvdHlwZSA9IG5ldyBFbXB0eSgpO1xuICAgICAgICBFbXB0eS5wcm90b3R5cGUgPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBib3VuZDtcbn07XG4iLCJ2YXIgbW9tZW50ID0gcmVxdWlyZSgnbW9tZW50Jyk7XG5cbmZ1bmN0aW9uIGlzVmFsaWRNb21lbnQodGVzdE1vbWVudCkge1xuICBpZiAodHlwZW9mIG1vbWVudC5pc01vbWVudCA9PT0gJ2Z1bmN0aW9uJyAmJiAhbW9tZW50LmlzTW9tZW50KHRlc3RNb21lbnQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgICovXG4gIGlmICh0eXBlb2YgdGVzdE1vbWVudC5pc1ZhbGlkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gbW9tZW50IDEuNy4wK1xuICAgIHJldHVybiB0ZXN0TW9tZW50LmlzVmFsaWQoKTtcbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHJldHVybiAhaXNOYU4odGVzdE1vbWVudCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc1ZhbGlkTW9tZW50IDogaXNWYWxpZE1vbWVudCxcbn07XG4iLCJ2YXIgbWVzc2FnZXMgPSB7XG4gIGludmFsaWRQcmVkaWNhdGU6ICdgcHJlZGljYXRlYCBtdXN0IGJlIGEgZnVuY3Rpb24nLFxuICBpbnZhbGlkUHJvcFZhbGlkYXRvcjogJ2Bwcm9wVmFsaWRhdG9yYCBtdXN0IGJlIGEgZnVuY3Rpb24nLFxuICByZXF1aXJlZENvcmU6ICdpcyBtYXJrZWQgYXMgcmVxdWlyZWQnLFxuICBpbnZhbGlkVHlwZUNvcmU6ICdJbnZhbGlkIGlucHV0IHR5cGUnLFxuICBwcmVkaWNhdGVGYWlsdXJlQ29yZTogJ0ZhaWxlZCB0byBzdWNjZWVkIHdpdGggcHJlZGljYXRlJyxcbiAgYW5vbnltb3VzTWVzc2FnZTogJzw8YW5vbnltb3VzPj4nLFxuICBiYXNlSW52YWxpZE1lc3NhZ2U6ICdJbnZhbGlkICcsXG59O1xuXG5mdW5jdGlvbiBjb25zdHJ1Y3RQcm9wVmFsaWRhdG9yVmFyaWF0aW9ucyhwcm9wVmFsaWRhdG9yKSB7XG4gIGlmICh0eXBlb2YgcHJvcFZhbGlkYXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlcy5pbnZhbGlkUHJvcFZhbGlkYXRvcik7XG4gIH1cblxuICB2YXIgcmVxdWlyZWRQcm9wVmFsaWRhdG9yID0gcHJvcFZhbGlkYXRvci5iaW5kKG51bGwsIGZhbHNlLCBudWxsKTtcbiAgcmVxdWlyZWRQcm9wVmFsaWRhdG9yLmlzUmVxdWlyZWQgPSBwcm9wVmFsaWRhdG9yLmJpbmQobnVsbCwgdHJ1ZSwgbnVsbCk7XG5cbiAgcmVxdWlyZWRQcm9wVmFsaWRhdG9yLndpdGhQcmVkaWNhdGUgPSBmdW5jdGlvbiBwcmVkaWNhdGVBcHBsaWNhdGlvbihwcmVkaWNhdGUpIHtcbiAgICBpZiAodHlwZW9mIHByZWRpY2F0ZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2VzLmludmFsaWRQcmVkaWNhdGUpO1xuICAgIH1cbiAgICB2YXIgYmFzZVByb3BWYWxpZGF0b3IgPSBwcm9wVmFsaWRhdG9yLmJpbmQobnVsbCwgZmFsc2UsIHByZWRpY2F0ZSk7XG4gICAgYmFzZVByb3BWYWxpZGF0b3IuaXNSZXF1aXJlZCA9IHByb3BWYWxpZGF0b3IuYmluZChudWxsLCB0cnVlLCBwcmVkaWNhdGUpO1xuICAgIHJldHVybiBiYXNlUHJvcFZhbGlkYXRvcjtcbiAgfTtcblxuICByZXR1cm4gcmVxdWlyZWRQcm9wVmFsaWRhdG9yO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVJbnZhbGlkUmVxdWlyZWRFcnJvck1lc3NhZ2UocHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBuZXcgRXJyb3IoXG4gICAgJ1RoZSBwcm9wIGAnICsgcHJvcE5hbWUgKyAnYCAnICsgbWVzc2FnZXMucmVxdWlyZWRDb3JlICtcbiAgICAnIGluIGAnICsgY29tcG9uZW50TmFtZSArICdgLCBidXQgaXRzIHZhbHVlIGlzIGAnICsgdmFsdWUgKyAnYC4nXG4gICk7XG59XG5cbnZhciBpbmRlcGVuZGVudEd1YXJkaWFuVmFsdWUgPSAtMTtcblxuZnVuY3Rpb24gcHJlVmFsaWRhdGlvblJlcXVpcmVDaGVjayhpc1JlcXVpcmVkLCBjb21wb25lbnROYW1lLCBwcm9wRnVsbE5hbWUsIHByb3BWYWx1ZSkge1xuICB2YXIgaXNQcm9wVmFsdWVVbmRlZmluZWQgPSB0eXBlb2YgcHJvcFZhbHVlID09PSAndW5kZWZpbmVkJztcbiAgdmFyIGlzUHJvcFZhbHVlTnVsbCA9IHByb3BWYWx1ZSA9PT0gbnVsbDtcblxuICBpZiAoaXNSZXF1aXJlZCkge1xuICAgIGlmIChpc1Byb3BWYWx1ZVVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGNyZWF0ZUludmFsaWRSZXF1aXJlZEVycm9yTWVzc2FnZShwcm9wRnVsbE5hbWUsIGNvbXBvbmVudE5hbWUsICd1bmRlZmluZWQnKTtcbiAgICB9IGVsc2UgaWYgKGlzUHJvcFZhbHVlTnVsbCkge1xuICAgICAgcmV0dXJuIGNyZWF0ZUludmFsaWRSZXF1aXJlZEVycm9yTWVzc2FnZShwcm9wRnVsbE5hbWUsIGNvbXBvbmVudE5hbWUsICdudWxsJyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGlzUHJvcFZhbHVlVW5kZWZpbmVkIHx8IGlzUHJvcFZhbHVlTnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGluZGVwZW5kZW50R3VhcmRpYW5WYWx1ZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTW9tZW50Q2hlY2tlcih0eXBlLCB0eXBlVmFsaWRhdG9yLCB2YWxpZGF0b3IsIG1vbWVudFR5cGUpIHtcblxuICBmdW5jdGlvbiBwcm9wVmFsaWRhdG9yKFxuICAgIGlzUmVxdWlyZWQsIC8vIEJvdW5kIHBhcmFtZXRlciB0byBpbmRpY2F0ZSB3aXRoIHRoZSBwcm9wVHlwZSBpcyByZXF1aXJlZFxuICAgIHByZWRpY2F0ZSwgLy8gQm91bmQgcGFyYW1ldGVyIHRvIGFsbG93IHVzZXIgdG8gYWRkIGR5bmFtaWMgdmFsaWRhdGlvblxuICAgIHByb3BzLFxuICAgIHByb3BOYW1lLFxuICAgIGNvbXBvbmVudE5hbWUsXG4gICAgbG9jYXRpb24sXG4gICAgcHJvcEZ1bGxOYW1lXG4gICkge1xuICAgIHZhciBwcm9wVmFsdWUgPSBwcm9wc1sgcHJvcE5hbWUgXTtcbiAgICB2YXIgcHJvcFR5cGUgPSB0eXBlb2YgcHJvcFZhbHVlO1xuXG4gICAgY29tcG9uZW50TmFtZSA9IGNvbXBvbmVudE5hbWUgfHwgbWVzc2FnZXMuYW5vbnltb3VzTWVzc2FnZTtcbiAgICBwcm9wRnVsbE5hbWUgPSBwcm9wRnVsbE5hbWUgfHwgcHJvcE5hbWU7XG5cbiAgICB2YXIgcHJlVmFsaWRhdGlvblJlcXVpcmVDaGVja1ZhbHVlID0gcHJlVmFsaWRhdGlvblJlcXVpcmVDaGVjayhcbiAgICAgIGlzUmVxdWlyZWQsIGNvbXBvbmVudE5hbWUsIHByb3BGdWxsTmFtZSwgcHJvcFZhbHVlXG4gICAgKTtcblxuICAgIGlmIChwcmVWYWxpZGF0aW9uUmVxdWlyZUNoZWNrVmFsdWUgIT09IGluZGVwZW5kZW50R3VhcmRpYW5WYWx1ZSkge1xuICAgICAgcmV0dXJuIHByZVZhbGlkYXRpb25SZXF1aXJlQ2hlY2tWYWx1ZTtcbiAgICB9XG5cbiAgICBpZiAodHlwZVZhbGlkYXRvciAmJiAhdHlwZVZhbGlkYXRvcihwcm9wVmFsdWUpKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgICBtZXNzYWdlcy5pbnZhbGlkVHlwZUNvcmUgKyAnOiBgJyArIHByb3BOYW1lICsgJ2Agb2YgdHlwZSBgJyArIHByb3BUeXBlICsgJ2AgJyArXG4gICAgICAgICdzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYCwgZXhwZWN0ZWQgYCcgKyB0eXBlICsgJ2AuJ1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoIXZhbGlkYXRvcihwcm9wVmFsdWUpKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgICBtZXNzYWdlcy5iYXNlSW52YWxpZE1lc3NhZ2UgKyBsb2NhdGlvbiArICcgYCcgKyBwcm9wTmFtZSArICdgIG9mIHR5cGUgYCcgKyBwcm9wVHlwZSArICdgICcgK1xuICAgICAgICAnc3VwcGxpZWQgdG8gYCcgKyBjb21wb25lbnROYW1lICsgJ2AsIGV4cGVjdGVkIGAnICsgbW9tZW50VHlwZSArICdgLidcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKHByZWRpY2F0ZSAmJiAhcHJlZGljYXRlKHByb3BWYWx1ZSkpIHtcbiAgICAgIHZhciBwcmVkaWNhdGVOYW1lID0gcHJlZGljYXRlLm5hbWUgfHwgbWVzc2FnZXMuYW5vbnltb3VzTWVzc2FnZTtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAgIG1lc3NhZ2VzLmJhc2VJbnZhbGlkTWVzc2FnZSArIGxvY2F0aW9uICsgJyBgJyArIHByb3BOYW1lICsgJ2Agb2YgdHlwZSBgJyArIHByb3BUeXBlICsgJ2AgJyArXG4gICAgICAgICdzdXBwbGllZCB0byBgJyArIGNvbXBvbmVudE5hbWUgKyAnYC4gJyArIG1lc3NhZ2VzLnByZWRpY2F0ZUZhaWx1cmVDb3JlICsgJyBgJyArXG4gICAgICAgIHByZWRpY2F0ZU5hbWUgKyAnYC4nXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuXG4gIH1cblxuICByZXR1cm4gY29uc3RydWN0UHJvcFZhbGlkYXRvclZhcmlhdGlvbnMocHJvcFZhbGlkYXRvcik7XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGNvbnN0cnVjdFByb3BWYWxpZGF0b3JWYXJpYXRpb25zOiBjb25zdHJ1Y3RQcm9wVmFsaWRhdG9yVmFyaWF0aW9ucyxcbiAgY3JlYXRlTW9tZW50Q2hlY2tlcjogY3JlYXRlTW9tZW50Q2hlY2tlcixcbiAgbWVzc2FnZXM6IG1lc3NhZ2VzLFxufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBub29wKCkge1xuICByZXR1cm4gbnVsbDtcbn1cblxubm9vcC5pc1JlcXVpcmVkID0gbm9vcDtcblxuZnVuY3Rpb24gbm9vcFRodW5rKCkge1xuICByZXR1cm4gbm9vcDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGFuZDogbm9vcFRodW5rLFxuICBiZXR3ZWVuOiBub29wVGh1bmssXG4gIGJvb2xlYW5Tb21lOiBub29wVGh1bmssXG4gIGNoaWxkcmVuSGF2ZVByb3BYb3JDaGlsZHJlbjogbm9vcFRodW5rLFxuICBjaGlsZHJlbk9mOiBub29wVGh1bmssXG4gIGNoaWxkcmVuT2ZUeXBlOiBub29wVGh1bmssXG4gIGNoaWxkcmVuU2VxdWVuY2VPZjogbm9vcFRodW5rLFxuICBjb21wb25lbnRXaXRoTmFtZTogbm9vcFRodW5rLFxuICBkaXNhbGxvd2VkSWY6IG5vb3BUaHVuayxcbiAgZWxlbWVudFR5cGU6IG5vb3BUaHVuayxcbiAgZW1wdHk6IG5vb3BUaHVuayxcbiAgZXhwbGljaXROdWxsOiBub29wVGh1bmssXG4gIGZvcmJpZEV4dHJhUHJvcHM6IE9iamVjdCxcbiAgaW50ZWdlcjogbm9vcFRodW5rLFxuICBrZXlzT2Y6IG5vb3BUaHVuayxcbiAgbXV0dWFsbHlFeGNsdXNpdmVQcm9wczogbm9vcFRodW5rLFxuICBtdXR1YWxseUV4Y2x1c2l2ZVRydWVQcm9wczogbm9vcFRodW5rLFxuICBuQ2hpbGRyZW46IG5vb3BUaHVuayxcbiAgbm9uTmVnYXRpdmVJbnRlZ2VyOiBub29wLFxuICBub25OZWdhdGl2ZU51bWJlcjogbm9vcFRodW5rLFxuICBudW1lcmljU3RyaW5nOiBub29wVGh1bmssXG4gIG9iamVjdDogbm9vcFRodW5rLFxuICBvcjogbm9vcFRodW5rLFxuICByYW5nZTogbm9vcFRodW5rLFxuICByZWY6IG5vb3BUaHVuayxcbiAgcmVxdWlyZWRCeTogbm9vcFRodW5rLFxuICByZXN0cmljdGVkUHJvcDogbm9vcFRodW5rLFxuICBzZXF1ZW5jZU9mOiBub29wVGh1bmssXG4gIHNoYXBlOiBub29wVGh1bmssXG4gIHN0cmluZ0VuZHNXaXRoOiBub29wVGh1bmssXG4gIHN0cmluZ1N0YXJ0c1dpdGg6IG5vb3BUaHVuayxcbiAgdW5pcXVlQXJyYXk6IG5vb3BUaHVuayxcbiAgdW5pcXVlQXJyYXlPZjogbm9vcFRodW5rLFxuICB2YWx1ZXNPZjogbm9vcFRodW5rLFxuICB3aXRoU2hhcGU6IG5vb3BUaHVua1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gIFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjtcblxuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfdHlwZW9mKG9iaik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3R5cGVvZjsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWZpbmUgPSByZXF1aXJlKCdkZWZpbmUtcHJvcGVydGllcycpO1xudmFyIGNhbGxCaW5kID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvaGVscGVycy9jYWxsQmluZCcpO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG52YXIgc2hpbSA9IHJlcXVpcmUoJy4vc2hpbScpO1xuXG52YXIgYm91bmQgPSBjYWxsQmluZChpbXBsZW1lbnRhdGlvbik7XG5cbmRlZmluZShib3VuZCwge1xuXHRnZXRQb2x5ZmlsbDogZ2V0UG9seWZpbGwsXG5cdGltcGxlbWVudGF0aW9uOiBpbXBsZW1lbnRhdGlvbixcblx0c2hpbTogc2hpbVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gYm91bmQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbnZhciBpc0FyZ3MgPSByZXF1aXJlKCcuL2lzQXJndW1lbnRzJyk7XG5cbnZhciBvcmlnS2V5cyA9IE9iamVjdC5rZXlzO1xudmFyIGtleXNTaGltID0gb3JpZ0tleXMgPyBmdW5jdGlvbiBrZXlzKG8pIHsgcmV0dXJuIG9yaWdLZXlzKG8pOyB9IDogcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xuXG52YXIgb3JpZ2luYWxLZXlzID0gT2JqZWN0LmtleXM7XG5cbmtleXNTaGltLnNoaW0gPSBmdW5jdGlvbiBzaGltT2JqZWN0S2V5cygpIHtcblx0aWYgKE9iamVjdC5rZXlzKSB7XG5cdFx0dmFyIGtleXNXb3Jrc1dpdGhBcmd1bWVudHMgPSAoZnVuY3Rpb24gKCkge1xuXHRcdFx0Ly8gU2FmYXJpIDUuMCBidWdcblx0XHRcdHZhciBhcmdzID0gT2JqZWN0LmtleXMoYXJndW1lbnRzKTtcblx0XHRcdHJldHVybiBhcmdzICYmIGFyZ3MubGVuZ3RoID09PSBhcmd1bWVudHMubGVuZ3RoO1xuXHRcdH0oMSwgMikpO1xuXHRcdGlmICgha2V5c1dvcmtzV2l0aEFyZ3VtZW50cykge1xuXHRcdFx0T2JqZWN0LmtleXMgPSBmdW5jdGlvbiBrZXlzKG9iamVjdCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGZ1bmMtbmFtZS1tYXRjaGluZ1xuXHRcdFx0XHRpZiAoaXNBcmdzKG9iamVjdCkpIHtcblx0XHRcdFx0XHRyZXR1cm4gb3JpZ2luYWxLZXlzKHNsaWNlLmNhbGwob2JqZWN0KSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIG9yaWdpbmFsS2V5cyhvYmplY3QpO1xuXHRcdFx0fTtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0T2JqZWN0LmtleXMgPSBrZXlzU2hpbTtcblx0fVxuXHRyZXR1cm4gT2JqZWN0LmtleXMgfHwga2V5c1NoaW07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGtleXNTaGltO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIga2V5c1NoaW07XG5pZiAoIU9iamVjdC5rZXlzKSB7XG5cdC8vIG1vZGlmaWVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltXG5cdHZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXHR2YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXHR2YXIgaXNBcmdzID0gcmVxdWlyZSgnLi9pc0FyZ3VtZW50cycpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGdsb2JhbC1yZXF1aXJlXG5cdHZhciBpc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXHR2YXIgaGFzRG9udEVudW1CdWcgPSAhaXNFbnVtZXJhYmxlLmNhbGwoeyB0b1N0cmluZzogbnVsbCB9LCAndG9TdHJpbmcnKTtcblx0dmFyIGhhc1Byb3RvRW51bUJ1ZyA9IGlzRW51bWVyYWJsZS5jYWxsKGZ1bmN0aW9uICgpIHt9LCAncHJvdG90eXBlJyk7XG5cdHZhciBkb250RW51bXMgPSBbXG5cdFx0J3RvU3RyaW5nJyxcblx0XHQndG9Mb2NhbGVTdHJpbmcnLFxuXHRcdCd2YWx1ZU9mJyxcblx0XHQnaGFzT3duUHJvcGVydHknLFxuXHRcdCdpc1Byb3RvdHlwZU9mJyxcblx0XHQncHJvcGVydHlJc0VudW1lcmFibGUnLFxuXHRcdCdjb25zdHJ1Y3Rvcidcblx0XTtcblx0dmFyIGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlID0gZnVuY3Rpb24gKG8pIHtcblx0XHR2YXIgY3RvciA9IG8uY29uc3RydWN0b3I7XG5cdFx0cmV0dXJuIGN0b3IgJiYgY3Rvci5wcm90b3R5cGUgPT09IG87XG5cdH07XG5cdHZhciBleGNsdWRlZEtleXMgPSB7XG5cdFx0JGFwcGxpY2F0aW9uQ2FjaGU6IHRydWUsXG5cdFx0JGNvbnNvbGU6IHRydWUsXG5cdFx0JGV4dGVybmFsOiB0cnVlLFxuXHRcdCRmcmFtZTogdHJ1ZSxcblx0XHQkZnJhbWVFbGVtZW50OiB0cnVlLFxuXHRcdCRmcmFtZXM6IHRydWUsXG5cdFx0JGlubmVySGVpZ2h0OiB0cnVlLFxuXHRcdCRpbm5lcldpZHRoOiB0cnVlLFxuXHRcdCRvbm1vemZ1bGxzY3JlZW5jaGFuZ2U6IHRydWUsXG5cdFx0JG9ubW96ZnVsbHNjcmVlbmVycm9yOiB0cnVlLFxuXHRcdCRvdXRlckhlaWdodDogdHJ1ZSxcblx0XHQkb3V0ZXJXaWR0aDogdHJ1ZSxcblx0XHQkcGFnZVhPZmZzZXQ6IHRydWUsXG5cdFx0JHBhZ2VZT2Zmc2V0OiB0cnVlLFxuXHRcdCRwYXJlbnQ6IHRydWUsXG5cdFx0JHNjcm9sbExlZnQ6IHRydWUsXG5cdFx0JHNjcm9sbFRvcDogdHJ1ZSxcblx0XHQkc2Nyb2xsWDogdHJ1ZSxcblx0XHQkc2Nyb2xsWTogdHJ1ZSxcblx0XHQkc2VsZjogdHJ1ZSxcblx0XHQkd2Via2l0SW5kZXhlZERCOiB0cnVlLFxuXHRcdCR3ZWJraXRTdG9yYWdlSW5mbzogdHJ1ZSxcblx0XHQkd2luZG93OiB0cnVlXG5cdH07XG5cdHZhciBoYXNBdXRvbWF0aW9uRXF1YWxpdHlCdWcgPSAoZnVuY3Rpb24gKCkge1xuXHRcdC8qIGdsb2JhbCB3aW5kb3cgKi9cblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdFx0Zm9yICh2YXIgayBpbiB3aW5kb3cpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGlmICghZXhjbHVkZWRLZXlzWyckJyArIGtdICYmIGhhcy5jYWxsKHdpbmRvdywgaykgJiYgd2luZG93W2tdICE9PSBudWxsICYmIHR5cGVvZiB3aW5kb3dba10gPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlKHdpbmRvd1trXSk7XG5cdFx0XHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0oKSk7XG5cdHZhciBlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZUlmTm90QnVnZ3kgPSBmdW5jdGlvbiAobykge1xuXHRcdC8qIGdsb2JhbCB3aW5kb3cgKi9cblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgfHwgIWhhc0F1dG9tYXRpb25FcXVhbGl0eUJ1Zykge1xuXHRcdFx0cmV0dXJuIGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlKG8pO1xuXHRcdH1cblx0XHR0cnkge1xuXHRcdFx0cmV0dXJuIGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlKG8pO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH07XG5cblx0a2V5c1NoaW0gPSBmdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuXHRcdHZhciBpc09iamVjdCA9IG9iamVjdCAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0Jztcblx0XHR2YXIgaXNGdW5jdGlvbiA9IHRvU3RyLmNhbGwob2JqZWN0KSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcblx0XHR2YXIgaXNBcmd1bWVudHMgPSBpc0FyZ3Mob2JqZWN0KTtcblx0XHR2YXIgaXNTdHJpbmcgPSBpc09iamVjdCAmJiB0b1N0ci5jYWxsKG9iamVjdCkgPT09ICdbb2JqZWN0IFN0cmluZ10nO1xuXHRcdHZhciB0aGVLZXlzID0gW107XG5cblx0XHRpZiAoIWlzT2JqZWN0ICYmICFpc0Z1bmN0aW9uICYmICFpc0FyZ3VtZW50cykge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmtleXMgY2FsbGVkIG9uIGEgbm9uLW9iamVjdCcpO1xuXHRcdH1cblxuXHRcdHZhciBza2lwUHJvdG8gPSBoYXNQcm90b0VudW1CdWcgJiYgaXNGdW5jdGlvbjtcblx0XHRpZiAoaXNTdHJpbmcgJiYgb2JqZWN0Lmxlbmd0aCA+IDAgJiYgIWhhcy5jYWxsKG9iamVjdCwgMCkpIHtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgb2JqZWN0Lmxlbmd0aDsgKytpKSB7XG5cdFx0XHRcdHRoZUtleXMucHVzaChTdHJpbmcoaSkpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChpc0FyZ3VtZW50cyAmJiBvYmplY3QubGVuZ3RoID4gMCkge1xuXHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBvYmplY3QubGVuZ3RoOyArK2opIHtcblx0XHRcdFx0dGhlS2V5cy5wdXNoKFN0cmluZyhqKSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAodmFyIG5hbWUgaW4gb2JqZWN0KSB7XG5cdFx0XHRcdGlmICghKHNraXBQcm90byAmJiBuYW1lID09PSAncHJvdG90eXBlJykgJiYgaGFzLmNhbGwob2JqZWN0LCBuYW1lKSkge1xuXHRcdFx0XHRcdHRoZUtleXMucHVzaChTdHJpbmcobmFtZSkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGhhc0RvbnRFbnVtQnVnKSB7XG5cdFx0XHR2YXIgc2tpcENvbnN0cnVjdG9yID0gZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGVJZk5vdEJ1Z2d5KG9iamVjdCk7XG5cblx0XHRcdGZvciAodmFyIGsgPSAwOyBrIDwgZG9udEVudW1zLmxlbmd0aDsgKytrKSB7XG5cdFx0XHRcdGlmICghKHNraXBDb25zdHJ1Y3RvciAmJiBkb250RW51bXNba10gPT09ICdjb25zdHJ1Y3RvcicpICYmIGhhcy5jYWxsKG9iamVjdCwgZG9udEVudW1zW2tdKSkge1xuXHRcdFx0XHRcdHRoZUtleXMucHVzaChkb250RW51bXNba10pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiB0aGVLZXlzO1xuXHR9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBrZXlzU2hpbTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyogZXNsaW50IGNvbXBsZXhpdHk6IFsyLCAxOF0sIG1heC1zdGF0ZW1lbnRzOiBbMiwgMzNdICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGhhc1N5bWJvbHMoKSB7XG5cdGlmICh0eXBlb2YgU3ltYm9sICE9PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzICE9PSAnZnVuY3Rpb24nKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAodHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gJ3N5bWJvbCcpIHsgcmV0dXJuIHRydWU7IH1cblxuXHR2YXIgb2JqID0ge307XG5cdHZhciBzeW0gPSBTeW1ib2woJ3Rlc3QnKTtcblx0dmFyIHN5bU9iaiA9IE9iamVjdChzeW0pO1xuXHRpZiAodHlwZW9mIHN5bSA9PT0gJ3N0cmluZycpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0aWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzeW0pICE9PSAnW29iamVjdCBTeW1ib2xdJykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChzeW1PYmopICE9PSAnW29iamVjdCBTeW1ib2xdJykgeyByZXR1cm4gZmFsc2U7IH1cblxuXHQvLyB0ZW1wIGRpc2FibGVkIHBlciBodHRwczovL2dpdGh1Yi5jb20vbGpoYXJiL29iamVjdC5hc3NpZ24vaXNzdWVzLzE3XG5cdC8vIGlmIChzeW0gaW5zdGFuY2VvZiBTeW1ib2wpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdC8vIHRlbXAgZGlzYWJsZWQgcGVyIGh0dHBzOi8vZ2l0aHViLmNvbS9XZWJSZWZsZWN0aW9uL2dldC1vd24tcHJvcGVydHktc3ltYm9scy9pc3N1ZXMvNFxuXHQvLyBpZiAoIShzeW1PYmogaW5zdGFuY2VvZiBTeW1ib2wpKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdC8vIGlmICh0eXBlb2YgU3ltYm9sLnByb3RvdHlwZS50b1N0cmluZyAhPT0gJ2Z1bmN0aW9uJykgeyByZXR1cm4gZmFsc2U7IH1cblx0Ly8gaWYgKFN0cmluZyhzeW0pICE9PSBTeW1ib2wucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc3ltKSkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHR2YXIgc3ltVmFsID0gNDI7XG5cdG9ialtzeW1dID0gc3ltVmFsO1xuXHRmb3IgKHN5bSBpbiBvYmopIHsgcmV0dXJuIGZhbHNlOyB9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcblx0aWYgKHR5cGVvZiBPYmplY3Qua2V5cyA9PT0gJ2Z1bmN0aW9uJyAmJiBPYmplY3Qua2V5cyhvYmopLmxlbmd0aCAhPT0gMCkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHRpZiAodHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzID09PSAnZnVuY3Rpb24nICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaikubGVuZ3RoICE9PSAwKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdHZhciBzeW1zID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmopO1xuXHRpZiAoc3ltcy5sZW5ndGggIT09IDEgfHwgc3ltc1swXSAhPT0gc3ltKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKG9iaiwgc3ltKSkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHRpZiAodHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPT09ICdmdW5jdGlvbicpIHtcblx0XHR2YXIgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBzeW0pO1xuXHRcdGlmIChkZXNjcmlwdG9yLnZhbHVlICE9PSBzeW1WYWwgfHwgZGVzY3JpcHRvci5lbnVtZXJhYmxlICE9PSB0cnVlKSB7IHJldHVybiBmYWxzZTsgfVxuXHR9XG5cblx0cmV0dXJuIHRydWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgc3VwcG9ydHNEZXNjcmlwdG9ycyA9IHJlcXVpcmUoJ2RlZmluZS1wcm9wZXJ0aWVzJykuc3VwcG9ydHNEZXNjcmlwdG9ycztcbnZhciBmdW5jdGlvbnNIYXZlTmFtZXMgPSByZXF1aXJlKCdmdW5jdGlvbnMtaGF2ZS1uYW1lcycpKCk7XG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgVHlwZUVyciA9IFR5cGVFcnJvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaGltTmFtZSgpIHtcblx0dmFyIHBvbHlmaWxsID0gZ2V0UG9seWZpbGwoKTtcblx0aWYgKGZ1bmN0aW9uc0hhdmVOYW1lcykge1xuXHRcdHJldHVybiBwb2x5ZmlsbDtcblx0fVxuXHRpZiAoIXN1cHBvcnRzRGVzY3JpcHRvcnMpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycignU2hpbW1pbmcgRnVuY3Rpb24ucHJvdG90eXBlLm5hbWUgc3VwcG9ydCByZXF1aXJlcyBFUzUgcHJvcGVydHkgZGVzY3JpcHRvciBzdXBwb3J0LicpO1xuXHR9XG5cdHZhciBmdW5jdGlvblByb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuXHRkZWZpbmVQcm9wZXJ0eShmdW5jdGlvblByb3RvLCAnbmFtZScsIHtcblx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0Z2V0OiBmdW5jdGlvbiAoKSB7XG5cdFx0XHR2YXIgbmFtZSA9IHBvbHlmaWxsLmNhbGwodGhpcyk7XG5cdFx0XHRpZiAodGhpcyAhPT0gZnVuY3Rpb25Qcm90bykge1xuXHRcdFx0XHRkZWZpbmVQcm9wZXJ0eSh0aGlzLCAnbmFtZScsIHtcblx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdFx0ZW51bWVyYWJsZTogZmFsc2UsXG5cdFx0XHRcdFx0dmFsdWU6IG5hbWUsXG5cdFx0XHRcdFx0d3JpdGFibGU6IGZhbHNlXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG5hbWU7XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIHBvbHlmaWxsO1xufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG52YXIgRU1QVFlfU1RZTEVTID0ge307XG5cbnZhciBFTVBUWV9TVFlMRVNfRk4gPSBmdW5jdGlvbiBFTVBUWV9TVFlMRVNfRk4oKSB7XG4gIHJldHVybiBFTVBUWV9TVFlMRVM7XG59O1xuXG52YXIgX2RlZmF1bHQgPSBFTVBUWV9TVFlMRVNfRk47XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5wZXJmU3RhcnQgPSBwZXJmU3RhcnQ7XG5leHBvcnRzLnBlcmZFbmQgPSBwZXJmRW5kO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB3aXRoUGVyZjtcblxuZnVuY3Rpb24gcGVyZlN0YXJ0KHN0YXJ0TWFyaykge1xuICBpZiAodHlwZW9mIHBlcmZvcm1hbmNlICE9PSAndW5kZWZpbmVkJyAmJiBwZXJmb3JtYW5jZS5tYXJrICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIHBlcmZvcm1hbmNlLmNsZWFyTWFya3MgPT09ICdmdW5jdGlvbicgJiYgc3RhcnRNYXJrKSB7XG4gICAgcGVyZm9ybWFuY2UuY2xlYXJNYXJrcyhzdGFydE1hcmspO1xuICAgIHBlcmZvcm1hbmNlLm1hcmsoc3RhcnRNYXJrKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwZXJmRW5kKHN0YXJ0TWFyaywgZW5kTWFyaywgbWVhc3VyZU5hbWUpIHtcbiAgaWYgKHR5cGVvZiBwZXJmb3JtYW5jZSAhPT0gJ3VuZGVmaW5lZCcgJiYgcGVyZm9ybWFuY2UubWFyayAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBwZXJmb3JtYW5jZS5jbGVhck1hcmtzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcGVyZm9ybWFuY2UuY2xlYXJNYXJrcyhlbmRNYXJrKTtcbiAgICBwZXJmb3JtYW5jZS5tYXJrKGVuZE1hcmspO1xuICAgIHBlcmZvcm1hbmNlLm1lYXN1cmUobWVhc3VyZU5hbWUsIHN0YXJ0TWFyaywgZW5kTWFyayk7XG4gICAgcGVyZm9ybWFuY2UuY2xlYXJNYXJrcyhtZWFzdXJlTmFtZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gd2l0aFBlcmYobWV0aG9kTmFtZSkge1xuICB2YXIgc3RhcnRNYXJrID0gXCJyZWFjdC13aXRoLXN0eWxlcy5cIi5jb25jYXQobWV0aG9kTmFtZSwgXCIuc3RhcnRcIik7XG4gIHZhciBlbmRNYXJrID0gXCJyZWFjdC13aXRoLXN0eWxlcy5cIi5jb25jYXQobWV0aG9kTmFtZSwgXCIuZW5kXCIpO1xuICB2YXIgbWVhc3VyZU5hbWUgPSBcIlxcdUQ4M0RcXHVEQzY5XFx1MjAwRFxcdUQ4M0NcXHVERkE4IFtcIi5jb25jYXQobWV0aG9kTmFtZSwgXCJdXCIpO1xuICByZXR1cm4gZnVuY3Rpb24gKGZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHBlcmZTdGFydChzdGFydE1hcmspO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVzdWx0ID0gZm4uYXBwbHkodm9pZCAwLCBhcmd1bWVudHMpO1xuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBwZXJmRW5kKHN0YXJ0TWFyaywgZW5kTWFyaywgbWVhc3VyZU5hbWUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gIH07XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRElSRUNUSU9OU1wiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfcmVhY3RXaXRoRGlyZWN0aW9uLkRJUkVDVElPTlM7XG4gIH1cbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKFwicmVhY3RcIik7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfcmVhY3RXaXRoRGlyZWN0aW9uID0gcmVxdWlyZShcInJlYWN0LXdpdGgtZGlyZWN0aW9uXCIpO1xuXG5mdW5jdGlvbiBkZXRlY3RBbmRDcmVhdGVDb250ZXh0KGRlZmF1bHRWYWx1ZSkge1xuICBpZiAoX3JlYWN0LmNyZWF0ZUNvbnRleHQpIHtcbiAgICByZXR1cm4gKDAsIF9yZWFjdC5jcmVhdGVDb250ZXh0KShkZWZhdWx0VmFsdWUpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBQcm92aWRlcjogZnVuY3Rpb24gUHJvdmlkZXIoKSB7XG4gICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoJ1dpdGhTdHlsZXNDb250ZXh0IHJlcXVpcmVzIFJlYWN0IDE2LjMgb3IgbGF0ZXInKTtcbiAgICB9LFxuICAgIENvbnN1bWVyOiBmdW5jdGlvbiBDb25zdW1lcigpIHtcbiAgICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcignV2l0aFN0eWxlc0NvbnRleHQgcmVxdWlyZXMgUmVhY3QgMTYuMyBvciBsYXRlcicpO1xuICAgIH1cbiAgfTtcbn1cblxudmFyIFdpdGhTdHlsZXNDb250ZXh0ID0gZGV0ZWN0QW5kQ3JlYXRlQ29udGV4dCh7XG4gIHN0eWxlc0ludGVyZmFjZTogbnVsbCxcbiAgc3R5bGVzVGhlbWU6IG51bGwsXG4gIGRpcmVjdGlvbjogbnVsbFxufSk7XG5XaXRoU3R5bGVzQ29udGV4dC5Qcm92aWRlci5wcm9wVHlwZXMgPSB7XG4gIHN0eWxlc0ludGVyZmFjZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ub2JqZWN0LFxuICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlYWN0L2ZvcmJpZC1wcm9wLXR5cGVzXG4gIHN0eWxlc1RoZW1lOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5vYmplY3QsXG4gIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVhY3QvZm9yYmlkLXByb3AtdHlwZXNcbiAgZGlyZWN0aW9uOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5vbmVPZihbX3JlYWN0V2l0aERpcmVjdGlvbi5ESVJFQ1RJT05TLkxUUiwgX3JlYWN0V2l0aERpcmVjdGlvbi5ESVJFQ1RJT05TLlJUTF0pXG59O1xudmFyIF9kZWZhdWx0ID0gV2l0aFN0eWxlc0NvbnRleHQ7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMud2l0aERpcmVjdGlvblByb3BUeXBlcyA9IGV4cG9ydHMuRElSRUNUSU9OUyA9IHVuZGVmaW5lZDtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gd2l0aERpcmVjdGlvbjtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX2hvaXN0Tm9uUmVhY3RTdGF0aWNzID0gcmVxdWlyZSgnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnKTtcblxudmFyIF9ob2lzdE5vblJlYWN0U3RhdGljczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9ob2lzdE5vblJlYWN0U3RhdGljcyk7XG5cbnZhciBfZGVlcG1lcmdlID0gcmVxdWlyZSgnZGVlcG1lcmdlJyk7XG5cbnZhciBfZGVlcG1lcmdlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlZXBtZXJnZSk7XG5cbnZhciBfZ2V0Q29tcG9uZW50TmFtZSA9IHJlcXVpcmUoJ2FpcmJuYi1wcm9wLXR5cGVzL2J1aWxkL2hlbHBlcnMvZ2V0Q29tcG9uZW50TmFtZScpO1xuXG52YXIgX2dldENvbXBvbmVudE5hbWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0Q29tcG9uZW50TmFtZSk7XG5cbnZhciBfY29uc3RhbnRzID0gcmVxdWlyZSgnLi9jb25zdGFudHMnKTtcblxudmFyIF9icmNhc3QgPSByZXF1aXJlKCcuL3Byb3B0eXBlcy9icmNhc3QnKTtcblxudmFyIF9icmNhc3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYnJjYXN0KTtcblxudmFyIF9kaXJlY3Rpb24gPSByZXF1aXJlKCcuL3Byb3B0eXBlcy9kaXJlY3Rpb24nKTtcblxudmFyIF9kaXJlY3Rpb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGlyZWN0aW9uKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9IC8qIGVzbGludC1kaXNhYmxlIHJlYWN0L2ZvcmJpZC1mb3JlaWduLXByb3AtdHlwZXMgKi9cbi8vIFRoaXMgaGlnaGVyLW9yZGVyIGNvbXBvbmVudCBjb25zdW1lcyBhIHN0cmluZyBmcm9tIFJlYWN0IGNvbnRleHQgdGhhdCBpc1xuLy8gcHJvdmlkZWQgYnkgdGhlIERpcmVjdGlvblByb3ZpZGVyIGNvbXBvbmVudC5cbi8vIFdlIGNhbiB1c2UgdGhpcyB0byBjb25kaXRpb25hbGx5IHN3aXRjaCBsYXlvdXQvZGlyZWN0aW9uIGZvciByaWdodC10by1sZWZ0IGxheW91dHMuXG5cbnZhciBjb250ZXh0VHlwZXMgPSBfZGVmaW5lUHJvcGVydHkoe30sIF9jb25zdGFudHMuQ0hBTk5FTCwgX2JyY2FzdDJbJ2RlZmF1bHQnXSk7XG5cbmV4cG9ydHMuRElSRUNUSU9OUyA9IF9jb25zdGFudHMuRElSRUNUSU9OUztcblxuLy8gc2V0IGEgZGVmYXVsdCBkaXJlY3Rpb24gc28gdGhhdCBhIGNvbXBvbmVudCB3cmFwcGVkIHdpdGggdGhpcyBIT0MgY2FuIGJlXG4vLyB1c2VkIGV2ZW4gd2l0aG91dCBhIERpcmVjdGlvblByb3ZpZGVyIGFuY2VzdG9yIGluIGl0cyByZWFjdCB0cmVlLlxuXG52YXIgZGVmYXVsdERpcmVjdGlvbiA9IF9jb25zdGFudHMuRElSRUNUSU9OUy5MVFI7XG5cbi8vIGV4cG9ydCBmb3IgY29udmVuaWVuY2UsIGluIG9yZGVyIGZvciBjb21wb25lbnRzIHRvIHNwcmVhZCB0aGVzZSBvbnRvIHRoZWlyIHByb3BUeXBlc1xudmFyIHdpdGhEaXJlY3Rpb25Qcm9wVHlwZXMgPSBleHBvcnRzLndpdGhEaXJlY3Rpb25Qcm9wVHlwZXMgPSB7XG4gIGRpcmVjdGlvbjogX2RpcmVjdGlvbjJbJ2RlZmF1bHQnXS5pc1JlcXVpcmVkXG59O1xuXG5mdW5jdGlvbiB3aXRoRGlyZWN0aW9uKFdyYXBwZWRDb21wb25lbnQpIHtcbiAgdmFyIFdpdGhEaXJlY3Rpb24gPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAgIF9pbmhlcml0cyhXaXRoRGlyZWN0aW9uLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIFdpdGhEaXJlY3Rpb24ocHJvcHMsIGNvbnRleHQpIHtcbiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBXaXRoRGlyZWN0aW9uKTtcblxuICAgICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFdpdGhEaXJlY3Rpb24uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihXaXRoRGlyZWN0aW9uKSkuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkpO1xuXG4gICAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgZGlyZWN0aW9uOiBjb250ZXh0W19jb25zdGFudHMuQ0hBTk5FTF0gPyBjb250ZXh0W19jb25zdGFudHMuQ0hBTk5FTF0uZ2V0U3RhdGUoKSA6IGRlZmF1bHREaXJlY3Rpb25cbiAgICAgIH07XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKFdpdGhEaXJlY3Rpb24sIFt7XG4gICAgICBrZXk6ICdjb21wb25lbnREaWRNb3VudCcsXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICAgIGlmICh0aGlzLmNvbnRleHRbX2NvbnN0YW50cy5DSEFOTkVMXSkge1xuICAgICAgICAgICAgLy8gc3Vic2NyaWJlIHRvIGZ1dHVyZSBkaXJlY3Rpb24gY2hhbmdlc1xuICAgICAgICAgICAgdGhpcy5jaGFubmVsVW5zdWJzY3JpYmUgPSB0aGlzLmNvbnRleHRbX2NvbnN0YW50cy5DSEFOTkVMXS5zdWJzY3JpYmUoZnVuY3Rpb24gKGRpcmVjdGlvbikge1xuICAgICAgICAgICAgICBfdGhpczIuc2V0U3RhdGUoeyBkaXJlY3Rpb246IGRpcmVjdGlvbiB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb21wb25lbnREaWRNb3VudDtcbiAgICAgIH0oKVxuICAgIH0sIHtcbiAgICAgIGtleTogJ2NvbXBvbmVudFdpbGxVbm1vdW50JyxcbiAgICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICAgIGlmICh0aGlzLmNoYW5uZWxVbnN1YnNjcmliZSkge1xuICAgICAgICAgICAgdGhpcy5jaGFubmVsVW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29tcG9uZW50V2lsbFVubW91bnQ7XG4gICAgICB9KClcbiAgICB9LCB7XG4gICAgICBrZXk6ICdyZW5kZXInLFxuICAgICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgIHZhciBkaXJlY3Rpb24gPSB0aGlzLnN0YXRlLmRpcmVjdGlvbjtcblxuXG4gICAgICAgICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFdyYXBwZWRDb21wb25lbnQsIF9leHRlbmRzKHt9LCB0aGlzLnByb3BzLCB7XG4gICAgICAgICAgICBkaXJlY3Rpb246IGRpcmVjdGlvblxuICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZW5kZXI7XG4gICAgICB9KClcbiAgICB9XSk7XG5cbiAgICByZXR1cm4gV2l0aERpcmVjdGlvbjtcbiAgfShfcmVhY3QyWydkZWZhdWx0J10uQ29tcG9uZW50KTtcblxuICB2YXIgd3JhcHBlZENvbXBvbmVudE5hbWUgPSAoMCwgX2dldENvbXBvbmVudE5hbWUyWydkZWZhdWx0J10pKFdyYXBwZWRDb21wb25lbnQpIHx8ICdDb21wb25lbnQnO1xuXG4gIFdpdGhEaXJlY3Rpb24uV3JhcHBlZENvbXBvbmVudCA9IFdyYXBwZWRDb21wb25lbnQ7XG4gIFdpdGhEaXJlY3Rpb24uY29udGV4dFR5cGVzID0gY29udGV4dFR5cGVzO1xuICBXaXRoRGlyZWN0aW9uLmRpc3BsYXlOYW1lID0gJ3dpdGhEaXJlY3Rpb24oJyArIFN0cmluZyh3cmFwcGVkQ29tcG9uZW50TmFtZSkgKyAnKSc7XG4gIGlmIChXcmFwcGVkQ29tcG9uZW50LnByb3BUeXBlcykge1xuICAgIFdpdGhEaXJlY3Rpb24ucHJvcFR5cGVzID0gKDAsIF9kZWVwbWVyZ2UyWydkZWZhdWx0J10pKHt9LCBXcmFwcGVkQ29tcG9uZW50LnByb3BUeXBlcyk7XG4gICAgZGVsZXRlIFdpdGhEaXJlY3Rpb24ucHJvcFR5cGVzLmRpcmVjdGlvbjtcbiAgfVxuICBpZiAoV3JhcHBlZENvbXBvbmVudC5kZWZhdWx0UHJvcHMpIHtcbiAgICBXaXRoRGlyZWN0aW9uLmRlZmF1bHRQcm9wcyA9ICgwLCBfZGVlcG1lcmdlMlsnZGVmYXVsdCddKSh7fSwgV3JhcHBlZENvbXBvbmVudC5kZWZhdWx0UHJvcHMpO1xuICB9XG5cbiAgcmV0dXJuICgwLCBfaG9pc3ROb25SZWFjdFN0YXRpY3MyWydkZWZhdWx0J10pKFdpdGhEaXJlY3Rpb24sIFdyYXBwZWRDb21wb25lbnQpO1xufSIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzTWVyZ2VhYmxlT2JqZWN0ID0gZnVuY3Rpb24gaXNNZXJnZWFibGVPYmplY3QodmFsdWUpIHtcblx0cmV0dXJuIGlzTm9uTnVsbE9iamVjdCh2YWx1ZSlcblx0XHQmJiAhaXNTcGVjaWFsKHZhbHVlKVxufTtcblxuZnVuY3Rpb24gaXNOb25OdWxsT2JqZWN0KHZhbHVlKSB7XG5cdHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCdcbn1cblxuZnVuY3Rpb24gaXNTcGVjaWFsKHZhbHVlKSB7XG5cdHZhciBzdHJpbmdWYWx1ZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG5cblx0cmV0dXJuIHN0cmluZ1ZhbHVlID09PSAnW29iamVjdCBSZWdFeHBdJ1xuXHRcdHx8IHN0cmluZ1ZhbHVlID09PSAnW29iamVjdCBEYXRlXSdcblx0XHR8fCBpc1JlYWN0RWxlbWVudCh2YWx1ZSlcbn1cblxuLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iL2I1YWM5NjNmYjc5MWQxMjk4ZTdmMzk2MjM2MzgzYmM5NTVmOTE2YzEvc3JjL2lzb21vcnBoaWMvY2xhc3NpYy9lbGVtZW50L1JlYWN0RWxlbWVudC5qcyNMMjEtTDI1XG52YXIgY2FuVXNlU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuZm9yO1xudmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9IGNhblVzZVN5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LmVsZW1lbnQnKSA6IDB4ZWFjNztcblxuZnVuY3Rpb24gaXNSZWFjdEVsZW1lbnQodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlLiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEVcbn1cblxuZnVuY3Rpb24gZW1wdHlUYXJnZXQodmFsKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsKSA/IFtdIDoge31cbn1cblxuZnVuY3Rpb24gY2xvbmVJZk5lY2Vzc2FyeSh2YWx1ZSwgb3B0aW9uc0FyZ3VtZW50KSB7XG4gICAgdmFyIGNsb25lID0gb3B0aW9uc0FyZ3VtZW50ICYmIG9wdGlvbnNBcmd1bWVudC5jbG9uZSA9PT0gdHJ1ZTtcbiAgICByZXR1cm4gKGNsb25lICYmIGlzTWVyZ2VhYmxlT2JqZWN0KHZhbHVlKSkgPyBkZWVwbWVyZ2UoZW1wdHlUYXJnZXQodmFsdWUpLCB2YWx1ZSwgb3B0aW9uc0FyZ3VtZW50KSA6IHZhbHVlXG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRBcnJheU1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zQXJndW1lbnQpIHtcbiAgICB2YXIgZGVzdGluYXRpb24gPSB0YXJnZXQuc2xpY2UoKTtcbiAgICBzb3VyY2UuZm9yRWFjaChmdW5jdGlvbihlLCBpKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZGVzdGluYXRpb25baV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbltpXSA9IGNsb25lSWZOZWNlc3NhcnkoZSwgb3B0aW9uc0FyZ3VtZW50KTtcbiAgICAgICAgfSBlbHNlIGlmIChpc01lcmdlYWJsZU9iamVjdChlKSkge1xuICAgICAgICAgICAgZGVzdGluYXRpb25baV0gPSBkZWVwbWVyZ2UodGFyZ2V0W2ldLCBlLCBvcHRpb25zQXJndW1lbnQpO1xuICAgICAgICB9IGVsc2UgaWYgKHRhcmdldC5pbmRleE9mKGUpID09PSAtMSkge1xuICAgICAgICAgICAgZGVzdGluYXRpb24ucHVzaChjbG9uZUlmTmVjZXNzYXJ5KGUsIG9wdGlvbnNBcmd1bWVudCkpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGRlc3RpbmF0aW9uXG59XG5cbmZ1bmN0aW9uIG1lcmdlT2JqZWN0KHRhcmdldCwgc291cmNlLCBvcHRpb25zQXJndW1lbnQpIHtcbiAgICB2YXIgZGVzdGluYXRpb24gPSB7fTtcbiAgICBpZiAoaXNNZXJnZWFibGVPYmplY3QodGFyZ2V0KSkge1xuICAgICAgICBPYmplY3Qua2V5cyh0YXJnZXQpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbltrZXldID0gY2xvbmVJZk5lY2Vzc2FyeSh0YXJnZXRba2V5XSwgb3B0aW9uc0FyZ3VtZW50KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIE9iamVjdC5rZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgaWYgKCFpc01lcmdlYWJsZU9iamVjdChzb3VyY2Vba2V5XSkgfHwgIXRhcmdldFtrZXldKSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbltrZXldID0gY2xvbmVJZk5lY2Vzc2FyeShzb3VyY2Vba2V5XSwgb3B0aW9uc0FyZ3VtZW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uW2tleV0gPSBkZWVwbWVyZ2UodGFyZ2V0W2tleV0sIHNvdXJjZVtrZXldLCBvcHRpb25zQXJndW1lbnQpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGRlc3RpbmF0aW9uXG59XG5cbmZ1bmN0aW9uIGRlZXBtZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9uc0FyZ3VtZW50KSB7XG4gICAgdmFyIHNvdXJjZUlzQXJyYXkgPSBBcnJheS5pc0FycmF5KHNvdXJjZSk7XG4gICAgdmFyIHRhcmdldElzQXJyYXkgPSBBcnJheS5pc0FycmF5KHRhcmdldCk7XG4gICAgdmFyIG9wdGlvbnMgPSBvcHRpb25zQXJndW1lbnQgfHwgeyBhcnJheU1lcmdlOiBkZWZhdWx0QXJyYXlNZXJnZSB9O1xuICAgIHZhciBzb3VyY2VBbmRUYXJnZXRUeXBlc01hdGNoID0gc291cmNlSXNBcnJheSA9PT0gdGFyZ2V0SXNBcnJheTtcblxuICAgIGlmICghc291cmNlQW5kVGFyZ2V0VHlwZXNNYXRjaCkge1xuICAgICAgICByZXR1cm4gY2xvbmVJZk5lY2Vzc2FyeShzb3VyY2UsIG9wdGlvbnNBcmd1bWVudClcbiAgICB9IGVsc2UgaWYgKHNvdXJjZUlzQXJyYXkpIHtcbiAgICAgICAgdmFyIGFycmF5TWVyZ2UgPSBvcHRpb25zLmFycmF5TWVyZ2UgfHwgZGVmYXVsdEFycmF5TWVyZ2U7XG4gICAgICAgIHJldHVybiBhcnJheU1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zQXJndW1lbnQpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlT2JqZWN0KHRhcmdldCwgc291cmNlLCBvcHRpb25zQXJndW1lbnQpXG4gICAgfVxufVxuXG5kZWVwbWVyZ2UuYWxsID0gZnVuY3Rpb24gZGVlcG1lcmdlQWxsKGFycmF5LCBvcHRpb25zQXJndW1lbnQpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoYXJyYXkpIHx8IGFycmF5Lmxlbmd0aCA8IDIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdmaXJzdCBhcmd1bWVudCBzaG91bGQgYmUgYW4gYXJyYXkgd2l0aCBhdCBsZWFzdCB0d28gZWxlbWVudHMnKVxuICAgIH1cblxuICAgIC8vIHdlIGFyZSBzdXJlIHRoZXJlIGFyZSBhdCBsZWFzdCAyIHZhbHVlcywgc28gaXQgaXMgc2FmZSB0byBoYXZlIG5vIGluaXRpYWwgdmFsdWVcbiAgICByZXR1cm4gYXJyYXkucmVkdWNlKGZ1bmN0aW9uKHByZXYsIG5leHQpIHtcbiAgICAgICAgcmV0dXJuIGRlZXBtZXJnZShwcmV2LCBuZXh0LCBvcHRpb25zQXJndW1lbnQpXG4gICAgfSlcbn07XG5cbnZhciBkZWVwbWVyZ2VfMSA9IGRlZXBtZXJnZTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWVwbWVyZ2VfMTtcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZXhwb3J0c1snZGVmYXVsdCddID0gX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zaGFwZSh7XG4gIGdldFN0YXRlOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsXG4gIHNldFN0YXRlOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsXG4gIHN1YnNjcmliZTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jXG59KTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfb2JqZWN0ID0gcmVxdWlyZSgnb2JqZWN0LnZhbHVlcycpO1xuXG52YXIgX29iamVjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vYmplY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9jb25zdGFudHMgPSByZXF1aXJlKCcuLi9jb25zdGFudHMnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5leHBvcnRzWydkZWZhdWx0J10gPSBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLm9uZU9mKCgwLCBfb2JqZWN0MlsnZGVmYXVsdCddKShfY29uc3RhbnRzLkRJUkVDVElPTlMpKTsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG5cbi8vIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi81LjEvI3NlYy05LjEwXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gQ2hlY2tPYmplY3RDb2VyY2libGUodmFsdWUsIG9wdE1lc3NhZ2UpIHtcblx0aWYgKHZhbHVlID09IG51bGwpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcihvcHRNZXNzYWdlIHx8ICgnQ2Fubm90IGNhbGwgbWV0aG9kIG9uICcgKyB2YWx1ZSkpO1xuXHR9XG5cdHJldHVybiB2YWx1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBnZXRQb2x5ZmlsbCA9IHJlcXVpcmUoJy4vcG9seWZpbGwnKTtcbnZhciBkZWZpbmUgPSByZXF1aXJlKCdkZWZpbmUtcHJvcGVydGllcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNoaW1WYWx1ZXMoKSB7XG5cdHZhciBwb2x5ZmlsbCA9IGdldFBvbHlmaWxsKCk7XG5cdGRlZmluZShPYmplY3QsIHsgdmFsdWVzOiBwb2x5ZmlsbCB9LCB7XG5cdFx0dmFsdWVzOiBmdW5jdGlvbiB0ZXN0VmFsdWVzKCkge1xuXHRcdFx0cmV0dXJuIE9iamVjdC52YWx1ZXMgIT09IHBvbHlmaWxsO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBwb2x5ZmlsbDtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGV4cG9ydHMud2l0aFN0eWxlc1Byb3BUeXBlcyA9IHZvaWQgMDtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIHdpdGhTdHlsZXNQcm9wVHlwZXMgPSB7XG4gIHN0eWxlczogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ub2JqZWN0LmlzUmVxdWlyZWQsXG4gIHRoZW1lOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5vYmplY3QuaXNSZXF1aXJlZCxcbiAgY3NzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLmlzUmVxdWlyZWRcbn07XG5leHBvcnRzLndpdGhTdHlsZXNQcm9wVHlwZXMgPSB3aXRoU3R5bGVzUHJvcFR5cGVzO1xudmFyIF9kZWZhdWx0ID0gd2l0aFN0eWxlc1Byb3BUeXBlcztcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwidmFyIG5vdyA9IHJlcXVpcmUoJ3BlcmZvcm1hbmNlLW5vdycpXG4gICwgcm9vdCA9IHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogd2luZG93XG4gICwgdmVuZG9ycyA9IFsnbW96JywgJ3dlYmtpdCddXG4gICwgc3VmZml4ID0gJ0FuaW1hdGlvbkZyYW1lJ1xuICAsIHJhZiA9IHJvb3RbJ3JlcXVlc3QnICsgc3VmZml4XVxuICAsIGNhZiA9IHJvb3RbJ2NhbmNlbCcgKyBzdWZmaXhdIHx8IHJvb3RbJ2NhbmNlbFJlcXVlc3QnICsgc3VmZml4XVxuXG5mb3IodmFyIGkgPSAwOyAhcmFmICYmIGkgPCB2ZW5kb3JzLmxlbmd0aDsgaSsrKSB7XG4gIHJhZiA9IHJvb3RbdmVuZG9yc1tpXSArICdSZXF1ZXN0JyArIHN1ZmZpeF1cbiAgY2FmID0gcm9vdFt2ZW5kb3JzW2ldICsgJ0NhbmNlbCcgKyBzdWZmaXhdXG4gICAgICB8fCByb290W3ZlbmRvcnNbaV0gKyAnQ2FuY2VsUmVxdWVzdCcgKyBzdWZmaXhdXG59XG5cbi8vIFNvbWUgdmVyc2lvbnMgb2YgRkYgaGF2ZSByQUYgYnV0IG5vdCBjQUZcbmlmKCFyYWYgfHwgIWNhZikge1xuICB2YXIgbGFzdCA9IDBcbiAgICAsIGlkID0gMFxuICAgICwgcXVldWUgPSBbXVxuICAgICwgZnJhbWVEdXJhdGlvbiA9IDEwMDAgLyA2MFxuXG4gIHJhZiA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgaWYocXVldWUubGVuZ3RoID09PSAwKSB7XG4gICAgICB2YXIgX25vdyA9IG5vdygpXG4gICAgICAgICwgbmV4dCA9IE1hdGgubWF4KDAsIGZyYW1lRHVyYXRpb24gLSAoX25vdyAtIGxhc3QpKVxuICAgICAgbGFzdCA9IG5leHQgKyBfbm93XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgY3AgPSBxdWV1ZS5zbGljZSgwKVxuICAgICAgICAvLyBDbGVhciBxdWV1ZSBoZXJlIHRvIHByZXZlbnRcbiAgICAgICAgLy8gY2FsbGJhY2tzIGZyb20gYXBwZW5kaW5nIGxpc3RlbmVyc1xuICAgICAgICAvLyB0byB0aGUgY3VycmVudCBmcmFtZSdzIHF1ZXVlXG4gICAgICAgIHF1ZXVlLmxlbmd0aCA9IDBcbiAgICAgICAgZm9yKHZhciBpID0gMDsgaSA8IGNwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYoIWNwW2ldLmNhbmNlbGxlZCkge1xuICAgICAgICAgICAgdHJ5e1xuICAgICAgICAgICAgICBjcFtpXS5jYWxsYmFjayhsYXN0KVxuICAgICAgICAgICAgfSBjYXRjaChlKSB7XG4gICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IHRocm93IGUgfSwgMClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sIE1hdGgucm91bmQobmV4dCkpXG4gICAgfVxuICAgIHF1ZXVlLnB1c2goe1xuICAgICAgaGFuZGxlOiArK2lkLFxuICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrLFxuICAgICAgY2FuY2VsbGVkOiBmYWxzZVxuICAgIH0pXG4gICAgcmV0dXJuIGlkXG4gIH1cblxuICBjYWYgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmKHF1ZXVlW2ldLmhhbmRsZSA9PT0gaGFuZGxlKSB7XG4gICAgICAgIHF1ZXVlW2ldLmNhbmNlbGxlZCA9IHRydWVcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihmbikge1xuICAvLyBXcmFwIGluIGEgbmV3IGZ1bmN0aW9uIHRvIHByZXZlbnRcbiAgLy8gYGNhbmNlbGAgcG90ZW50aWFsbHkgYmVpbmcgYXNzaWduZWRcbiAgLy8gdG8gdGhlIG5hdGl2ZSByQUYgZnVuY3Rpb25cbiAgcmV0dXJuIHJhZi5jYWxsKHJvb3QsIGZuKVxufVxubW9kdWxlLmV4cG9ydHMuY2FuY2VsID0gZnVuY3Rpb24oKSB7XG4gIGNhZi5hcHBseShyb290LCBhcmd1bWVudHMpXG59XG5tb2R1bGUuZXhwb3J0cy5wb2x5ZmlsbCA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICBpZiAoIW9iamVjdCkge1xuICAgIG9iamVjdCA9IHJvb3Q7XG4gIH1cbiAgb2JqZWN0LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IHJhZlxuICBvYmplY3QuY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSBjYWZcbn1cbiIsIi8vIEdlbmVyYXRlZCBieSBDb2ZmZWVTY3JpcHQgMS4xMi4yXG4oZnVuY3Rpb24oKSB7XG4gIHZhciBnZXROYW5vU2Vjb25kcywgaHJ0aW1lLCBsb2FkVGltZSwgbW9kdWxlTG9hZFRpbWUsIG5vZGVMb2FkVGltZSwgdXBUaW1lO1xuXG4gIGlmICgodHlwZW9mIHBlcmZvcm1hbmNlICE9PSBcInVuZGVmaW5lZFwiICYmIHBlcmZvcm1hbmNlICE9PSBudWxsKSAmJiBwZXJmb3JtYW5jZS5ub3cpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpO1xuICAgIH07XG4gIH0gZWxzZSBpZiAoKHR5cGVvZiBwcm9jZXNzICE9PSBcInVuZGVmaW5lZFwiICYmIHByb2Nlc3MgIT09IG51bGwpICYmIHByb2Nlc3MuaHJ0aW1lKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAoZ2V0TmFub1NlY29uZHMoKSAtIG5vZGVMb2FkVGltZSkgLyAxZTY7XG4gICAgfTtcbiAgICBocnRpbWUgPSBwcm9jZXNzLmhydGltZTtcbiAgICBnZXROYW5vU2Vjb25kcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGhyO1xuICAgICAgaHIgPSBocnRpbWUoKTtcbiAgICAgIHJldHVybiBoclswXSAqIDFlOSArIGhyWzFdO1xuICAgIH07XG4gICAgbW9kdWxlTG9hZFRpbWUgPSBnZXROYW5vU2Vjb25kcygpO1xuICAgIHVwVGltZSA9IHByb2Nlc3MudXB0aW1lKCkgKiAxZTk7XG4gICAgbm9kZUxvYWRUaW1lID0gbW9kdWxlTG9hZFRpbWUgLSB1cFRpbWU7XG4gIH0gZWxzZSBpZiAoRGF0ZS5ub3cpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIERhdGUubm93KCkgLSBsb2FkVGltZTtcbiAgICB9O1xuICAgIGxvYWRUaW1lID0gRGF0ZS5ub3coKTtcbiAgfSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gbG9hZFRpbWU7XG4gICAgfTtcbiAgICBsb2FkVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICB9XG5cbn0pLmNhbGwodGhpcyk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBlcmZvcm1hbmNlLW5vdy5qcy5tYXBcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGdldENhbGVuZGFyRGF5U2V0dGluZ3M7XG5cbnZhciBfZ2V0UGhyYXNlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9nZXRQaHJhc2VcIikpO1xuXG52YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHNcIik7XG5cbmZ1bmN0aW9uIGlzU2VsZWN0ZWQobW9kaWZpZXJzKSB7XG4gIHJldHVybiBtb2RpZmllcnMuaGFzKCdzZWxlY3RlZCcpIHx8IG1vZGlmaWVycy5oYXMoJ3NlbGVjdGVkLXNwYW4nKSB8fCBtb2RpZmllcnMuaGFzKCdzZWxlY3RlZC1zdGFydCcpIHx8IG1vZGlmaWVycy5oYXMoJ3NlbGVjdGVkLWVuZCcpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VEZWZhdWx0Q3Vyc29yKG1vZGlmaWVycykge1xuICByZXR1cm4gbW9kaWZpZXJzLmhhcygnYmxvY2tlZC1taW5pbXVtLW5pZ2h0cycpIHx8IG1vZGlmaWVycy5oYXMoJ2Jsb2NrZWQtY2FsZW5kYXInKSB8fCBtb2RpZmllcnMuaGFzKCdibG9ja2VkLW91dC1vZi1yYW5nZScpO1xufVxuXG5mdW5jdGlvbiBpc0hvdmVyZWRTcGFuKG1vZGlmaWVycykge1xuICBpZiAoaXNTZWxlY3RlZChtb2RpZmllcnMpKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBtb2RpZmllcnMuaGFzKCdob3ZlcmVkLXNwYW4nKSB8fCBtb2RpZmllcnMuaGFzKCdhZnRlci1ob3ZlcmVkLXN0YXJ0JykgfHwgbW9kaWZpZXJzLmhhcygnYmVmb3JlLWhvdmVyZWQtZW5kJyk7XG59XG5cbmZ1bmN0aW9uIGdldEFyaWFMYWJlbChwaHJhc2VzLCBtb2RpZmllcnMsIGRheSwgYXJpYUxhYmVsRm9ybWF0KSB7XG4gIHZhciBjaG9vc2VBdmFpbGFibGVEYXRlID0gcGhyYXNlcy5jaG9vc2VBdmFpbGFibGVEYXRlLFxuICAgICAgZGF0ZUlzVW5hdmFpbGFibGUgPSBwaHJhc2VzLmRhdGVJc1VuYXZhaWxhYmxlLFxuICAgICAgZGF0ZUlzU2VsZWN0ZWQgPSBwaHJhc2VzLmRhdGVJc1NlbGVjdGVkLFxuICAgICAgZGF0ZUlzU2VsZWN0ZWRBc1N0YXJ0RGF0ZSA9IHBocmFzZXMuZGF0ZUlzU2VsZWN0ZWRBc1N0YXJ0RGF0ZSxcbiAgICAgIGRhdGVJc1NlbGVjdGVkQXNFbmREYXRlID0gcGhyYXNlcy5kYXRlSXNTZWxlY3RlZEFzRW5kRGF0ZTtcbiAgdmFyIGZvcm1hdHRlZERhdGUgPSB7XG4gICAgZGF0ZTogZGF5LmZvcm1hdChhcmlhTGFiZWxGb3JtYXQpXG4gIH07XG5cbiAgaWYgKG1vZGlmaWVycy5oYXMoJ3NlbGVjdGVkLXN0YXJ0JykgJiYgZGF0ZUlzU2VsZWN0ZWRBc1N0YXJ0RGF0ZSkge1xuICAgIHJldHVybiAoMCwgX2dldFBocmFzZVtcImRlZmF1bHRcIl0pKGRhdGVJc1NlbGVjdGVkQXNTdGFydERhdGUsIGZvcm1hdHRlZERhdGUpO1xuICB9XG5cbiAgaWYgKG1vZGlmaWVycy5oYXMoJ3NlbGVjdGVkLWVuZCcpICYmIGRhdGVJc1NlbGVjdGVkQXNFbmREYXRlKSB7XG4gICAgcmV0dXJuICgwLCBfZ2V0UGhyYXNlW1wiZGVmYXVsdFwiXSkoZGF0ZUlzU2VsZWN0ZWRBc0VuZERhdGUsIGZvcm1hdHRlZERhdGUpO1xuICB9XG5cbiAgaWYgKGlzU2VsZWN0ZWQobW9kaWZpZXJzKSAmJiBkYXRlSXNTZWxlY3RlZCkge1xuICAgIHJldHVybiAoMCwgX2dldFBocmFzZVtcImRlZmF1bHRcIl0pKGRhdGVJc1NlbGVjdGVkLCBmb3JtYXR0ZWREYXRlKTtcbiAgfVxuXG4gIGlmIChtb2RpZmllcnMuaGFzKF9jb25zdGFudHMuQkxPQ0tFRF9NT0RJRklFUikpIHtcbiAgICByZXR1cm4gKDAsIF9nZXRQaHJhc2VbXCJkZWZhdWx0XCJdKShkYXRlSXNVbmF2YWlsYWJsZSwgZm9ybWF0dGVkRGF0ZSk7XG4gIH1cblxuICByZXR1cm4gKDAsIF9nZXRQaHJhc2VbXCJkZWZhdWx0XCJdKShjaG9vc2VBdmFpbGFibGVEYXRlLCBmb3JtYXR0ZWREYXRlKTtcbn1cblxuZnVuY3Rpb24gZ2V0Q2FsZW5kYXJEYXlTZXR0aW5ncyhkYXksIGFyaWFMYWJlbEZvcm1hdCwgZGF5U2l6ZSwgbW9kaWZpZXJzLCBwaHJhc2VzKSB7XG4gIHJldHVybiB7XG4gICAgYXJpYUxhYmVsOiBnZXRBcmlhTGFiZWwocGhyYXNlcywgbW9kaWZpZXJzLCBkYXksIGFyaWFMYWJlbEZvcm1hdCksXG4gICAgaG92ZXJlZFNwYW46IGlzSG92ZXJlZFNwYW4obW9kaWZpZXJzKSxcbiAgICBpc091dHNpZGVSYW5nZTogbW9kaWZpZXJzLmhhcygnYmxvY2tlZC1vdXQtb2YtcmFuZ2UnKSxcbiAgICBzZWxlY3RlZDogaXNTZWxlY3RlZChtb2RpZmllcnMpLFxuICAgIHVzZURlZmF1bHRDdXJzb3I6IHNob3VsZFVzZURlZmF1bHRDdXJzb3IobW9kaWZpZXJzKSxcbiAgICBkYXlTaXplU3R5bGVzOiB7XG4gICAgICB3aWR0aDogZGF5U2l6ZSxcbiAgICAgIGhlaWdodDogZGF5U2l6ZSAtIDFcbiAgICB9XG4gIH07XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGdldFBocmFzZTtcblxuZnVuY3Rpb24gZ2V0UGhyYXNlKHBocmFzZSwgYXJncykge1xuICBpZiAodHlwZW9mIHBocmFzZSA9PT0gJ3N0cmluZycpIHJldHVybiBwaHJhc2U7XG5cbiAgaWYgKHR5cGVvZiBwaHJhc2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gcGhyYXNlKGFyZ3MpO1xuICB9XG5cbiAgcmV0dXJuICcnO1xufSIsImZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcnIyW2ldID0gYXJyW2ldO1xuICAgIH1cblxuICAgIHJldHVybiBhcnIyO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2FycmF5V2l0aG91dEhvbGVzOyIsImZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikge1xuICBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaXRlcikgPT09IFwiW29iamVjdCBBcmd1bWVudHNdXCIpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pdGVyYWJsZVRvQXJyYXk7IiwiZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2VcIik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX25vbkl0ZXJhYmxlU3ByZWFkOyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gQ2FsZW5kYXJXZWVrO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2FpcmJuYlByb3BUeXBlcyA9IHJlcXVpcmUoXCJhaXJibmItcHJvcC10eXBlc1wiKTtcblxudmFyIHByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfYWlyYm5iUHJvcFR5cGVzLmZvcmJpZEV4dHJhUHJvcHMpKHtcbiAgY2hpbGRyZW46IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm5vZGUuaXNSZXF1aXJlZFxufSkgOiB7fTtcblxuZnVuY3Rpb24gQ2FsZW5kYXJXZWVrKF9yZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbjtcbiAgcmV0dXJuIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcInRyXCIsIG51bGwsIGNoaWxkcmVuKTtcbn1cblxuQ2FsZW5kYXJXZWVrLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHByb3BUeXBlcyA6IHt9OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gZ2V0Q2FsZW5kYXJNb250aFdlZWtzO1xuXG52YXIgX21vbWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIm1vbWVudFwiKSk7XG5cbnZhciBfY29uc3RhbnRzID0gcmVxdWlyZShcIi4uL2NvbnN0YW50c1wiKTtcblxuZnVuY3Rpb24gZ2V0Q2FsZW5kYXJNb250aFdlZWtzKG1vbnRoLCBlbmFibGVPdXRzaWRlRGF5cykge1xuICB2YXIgZmlyc3REYXlPZldlZWsgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IF9tb21lbnRbXCJkZWZhdWx0XCJdLmxvY2FsZURhdGEoKS5maXJzdERheU9mV2VlaygpO1xuXG4gIGlmICghX21vbWVudFtcImRlZmF1bHRcIl0uaXNNb21lbnQobW9udGgpIHx8ICFtb250aC5pc1ZhbGlkKCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdgbW9udGhgIG11c3QgYmUgYSB2YWxpZCBtb21lbnQgb2JqZWN0Jyk7XG4gIH1cblxuICBpZiAoX2NvbnN0YW50cy5XRUVLREFZUy5pbmRleE9mKGZpcnN0RGF5T2ZXZWVrKSA9PT0gLTEpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdgZmlyc3REYXlPZldlZWtgIG11c3QgYmUgYW4gaW50ZWdlciBiZXR3ZWVuIDAgYW5kIDYnKTtcbiAgfSAvLyBzZXQgdXRjIG9mZnNldCB0byBnZXQgY29ycmVjdCBkYXRlcyBpbiBmdXR1cmUgKHdoZW4gdGltZXpvbmUgY2hhbmdlcylcblxuXG4gIHZhciBmaXJzdE9mTW9udGggPSBtb250aC5jbG9uZSgpLnN0YXJ0T2YoJ21vbnRoJykuaG91cigxMik7XG4gIHZhciBsYXN0T2ZNb250aCA9IG1vbnRoLmNsb25lKCkuZW5kT2YoJ21vbnRoJykuaG91cigxMik7IC8vIGNhbGN1bGF0ZSB0aGUgZXhhY3QgZmlyc3QgYW5kIGxhc3QgZGF5cyB0byBmaWxsIHRoZSBlbnRpcmUgbWF0cml4XG4gIC8vIChjb25zaWRlcmluZyBkYXlzIG91dHNpZGUgbW9udGgpXG5cbiAgdmFyIHByZXZEYXlzID0gKGZpcnN0T2ZNb250aC5kYXkoKSArIDcgLSBmaXJzdERheU9mV2VlaykgJSA3O1xuICB2YXIgbmV4dERheXMgPSAoZmlyc3REYXlPZldlZWsgKyA2IC0gbGFzdE9mTW9udGguZGF5KCkpICUgNztcbiAgdmFyIGZpcnN0RGF5ID0gZmlyc3RPZk1vbnRoLmNsb25lKCkuc3VidHJhY3QocHJldkRheXMsICdkYXknKTtcbiAgdmFyIGxhc3REYXkgPSBsYXN0T2ZNb250aC5jbG9uZSgpLmFkZChuZXh0RGF5cywgJ2RheScpO1xuICB2YXIgdG90YWxEYXlzID0gbGFzdERheS5kaWZmKGZpcnN0RGF5LCAnZGF5cycpICsgMTtcbiAgdmFyIGN1cnJlbnREYXkgPSBmaXJzdERheS5jbG9uZSgpO1xuICB2YXIgd2Vla3NJbk1vbnRoID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b3RhbERheXM7IGkgKz0gMSkge1xuICAgIGlmIChpICUgNyA9PT0gMCkge1xuICAgICAgd2Vla3NJbk1vbnRoLnB1c2goW10pO1xuICAgIH1cblxuICAgIHZhciBkYXkgPSBudWxsO1xuXG4gICAgaWYgKGkgPj0gcHJldkRheXMgJiYgaSA8IHRvdGFsRGF5cyAtIG5leHREYXlzIHx8IGVuYWJsZU91dHNpZGVEYXlzKSB7XG4gICAgICBkYXkgPSBjdXJyZW50RGF5LmNsb25lKCk7XG4gICAgfVxuXG4gICAgd2Vla3NJbk1vbnRoW3dlZWtzSW5Nb250aC5sZW5ndGggLSAxXS5wdXNoKGRheSk7XG4gICAgY3VycmVudERheS5hZGQoMSwgJ2RheScpO1xuICB9XG5cbiAgcmV0dXJuIHdlZWtzSW5Nb250aDtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gaXNUcmFuc2l0aW9uRW5kU3VwcG9ydGVkO1xuXG5mdW5jdGlvbiBpc1RyYW5zaXRpb25FbmRTdXBwb3J0ZWQoKSB7XG4gIHJldHVybiAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiAnVHJhbnNpdGlvbkV2ZW50JyBpbiB3aW5kb3cpO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBnZXRUcmFuc2Zvcm1TdHlsZXM7XG5cbmZ1bmN0aW9uIGdldFRyYW5zZm9ybVN0eWxlcyh0cmFuc2Zvcm1WYWx1ZSkge1xuICByZXR1cm4ge1xuICAgIHRyYW5zZm9ybTogdHJhbnNmb3JtVmFsdWUsXG4gICAgbXNUcmFuc2Zvcm06IHRyYW5zZm9ybVZhbHVlLFxuICAgIE1velRyYW5zZm9ybTogdHJhbnNmb3JtVmFsdWUsXG4gICAgV2Via2l0VHJhbnNmb3JtOiB0cmFuc2Zvcm1WYWx1ZVxuICB9O1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gaXNQcmV2TW9udGg7XG5cbnZhciBfbW9tZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwibW9tZW50XCIpKTtcblxudmFyIF9pc1NhbWVNb250aCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaXNTYW1lTW9udGhcIikpO1xuXG5mdW5jdGlvbiBpc1ByZXZNb250aChhLCBiKSB7XG4gIGlmICghX21vbWVudFtcImRlZmF1bHRcIl0uaXNNb21lbnQoYSkgfHwgIV9tb21lbnRbXCJkZWZhdWx0XCJdLmlzTW9tZW50KGIpKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiAoMCwgX2lzU2FtZU1vbnRoW1wiZGVmYXVsdFwiXSkoYS5jbG9uZSgpLnN1YnRyYWN0KDEsICdtb250aCcpLCBiKTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGlzTmV4dE1vbnRoO1xuXG52YXIgX21vbWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIm1vbWVudFwiKSk7XG5cbnZhciBfaXNTYW1lTW9udGggPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2lzU2FtZU1vbnRoXCIpKTtcblxuZnVuY3Rpb24gaXNOZXh0TW9udGgoYSwgYikge1xuICBpZiAoIV9tb21lbnRbXCJkZWZhdWx0XCJdLmlzTW9tZW50KGEpIHx8ICFfbW9tZW50W1wiZGVmYXVsdFwiXS5pc01vbWVudChiKSkgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gKDAsIF9pc1NhbWVNb250aFtcImRlZmF1bHRcIl0pKGEuY2xvbmUoKS5hZGQoMSwgJ21vbnRoJyksIGIpO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gZXhwb3J0cy5QdXJlRGF0ZVJhbmdlUGlja2VyID0gdm9pZCAwO1xuXG52YXIgX2VuenltZVNoYWxsb3dFcXVhbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImVuenltZS1zaGFsbG93LWVxdWFsXCIpKTtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpKTtcblxudmFyIF9pbmhlcml0c0xvb3NlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHNMb29zZVwiKSk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfbW9tZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwibW9tZW50XCIpKTtcblxudmFyIF9yZWFjdFdpdGhTdHlsZXMgPSByZXF1aXJlKFwicmVhY3Qtd2l0aC1zdHlsZXNcIik7XG5cbnZhciBfcmVhY3RQb3J0YWwgPSByZXF1aXJlKFwicmVhY3QtcG9ydGFsXCIpO1xuXG52YXIgX2FpcmJuYlByb3BUeXBlcyA9IHJlcXVpcmUoXCJhaXJibmItcHJvcC10eXBlc1wiKTtcblxudmFyIF9jb25zb2xpZGF0ZWRFdmVudHMgPSByZXF1aXJlKFwiY29uc29saWRhdGVkLWV2ZW50c1wiKTtcblxudmFyIF9pc1RvdWNoRGV2aWNlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiaXMtdG91Y2gtZGV2aWNlXCIpKTtcblxudmFyIF9yZWFjdE91dHNpZGVDbGlja0hhbmRsZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC1vdXRzaWRlLWNsaWNrLWhhbmRsZXJcIikpO1xuXG52YXIgX0RhdGVSYW5nZVBpY2tlclNoYXBlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc2hhcGVzL0RhdGVSYW5nZVBpY2tlclNoYXBlXCIpKTtcblxudmFyIF9kZWZhdWx0UGhyYXNlcyA9IHJlcXVpcmUoXCIuLi9kZWZhdWx0UGhyYXNlc1wiKTtcblxudmFyIF9nZXRSZXNwb25zaXZlQ29udGFpbmVyU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvZ2V0UmVzcG9uc2l2ZUNvbnRhaW5lclN0eWxlc1wiKSk7XG5cbnZhciBfZ2V0RGV0YWNoZWRDb250YWluZXJTdHlsZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9nZXREZXRhY2hlZENvbnRhaW5lclN0eWxlc1wiKSk7XG5cbnZhciBfZ2V0SW5wdXRIZWlnaHQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9nZXRJbnB1dEhlaWdodFwiKSk7XG5cbnZhciBfaXNJbmNsdXNpdmVseUFmdGVyRGF5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvaXNJbmNsdXNpdmVseUFmdGVyRGF5XCIpKTtcblxudmFyIF9kaXNhYmxlU2Nyb2xsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2Rpc2FibGVTY3JvbGxcIikpO1xuXG52YXIgX25vZmxpcCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL25vZmxpcFwiKSk7XG5cbnZhciBfRGF0ZVJhbmdlUGlja2VySW5wdXRDb250cm9sbGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9EYXRlUmFuZ2VQaWNrZXJJbnB1dENvbnRyb2xsZXJcIikpO1xuXG52YXIgX0RheVBpY2tlclJhbmdlQ29udHJvbGxlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vRGF5UGlja2VyUmFuZ2VDb250cm9sbGVyXCIpKTtcblxudmFyIF9DbG9zZUJ1dHRvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQ2xvc2VCdXR0b25cIikpO1xuXG52YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoXCIuLi9jb25zdGFudHNcIik7XG5cbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7ICgwLCBfZGVmaW5lUHJvcGVydHkyW1wiZGVmYXVsdFwiXSkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxudmFyIHByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfYWlyYm5iUHJvcFR5cGVzLmZvcmJpZEV4dHJhUHJvcHMpKF9vYmplY3RTcHJlYWQoe30sIF9yZWFjdFdpdGhTdHlsZXMud2l0aFN0eWxlc1Byb3BUeXBlcywge30sIF9EYXRlUmFuZ2VQaWNrZXJTaGFwZVtcImRlZmF1bHRcIl0pKSA6IHt9O1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgLy8gcmVxdWlyZWQgcHJvcHMgZm9yIGEgZnVuY3Rpb25hbCBpbnRlcmFjdGl2ZSBEYXRlUmFuZ2VQaWNrZXJcbiAgc3RhcnREYXRlOiBudWxsLFxuICBlbmREYXRlOiBudWxsLFxuICBmb2N1c2VkSW5wdXQ6IG51bGwsXG4gIC8vIGlucHV0IHJlbGF0ZWQgcHJvcHNcbiAgc3RhcnREYXRlUGxhY2Vob2xkZXJUZXh0OiAnU3RhcnQgRGF0ZScsXG4gIGVuZERhdGVQbGFjZWhvbGRlclRleHQ6ICdFbmQgRGF0ZScsXG4gIHN0YXJ0RGF0ZUFyaWFMYWJlbDogdW5kZWZpbmVkLFxuICBlbmREYXRlQXJpYUxhYmVsOiB1bmRlZmluZWQsXG4gIHN0YXJ0RGF0ZU9mZnNldDogdW5kZWZpbmVkLFxuICBlbmREYXRlT2Zmc2V0OiB1bmRlZmluZWQsXG4gIGRpc2FibGVkOiBmYWxzZSxcbiAgcmVxdWlyZWQ6IGZhbHNlLFxuICByZWFkT25seTogZmFsc2UsXG4gIHNjcmVlblJlYWRlcklucHV0TWVzc2FnZTogJycsXG4gIHNob3dDbGVhckRhdGVzOiBmYWxzZSxcbiAgc2hvd0RlZmF1bHRJbnB1dEljb246IGZhbHNlLFxuICBpbnB1dEljb25Qb3NpdGlvbjogX2NvbnN0YW50cy5JQ09OX0JFRk9SRV9QT1NJVElPTixcbiAgY3VzdG9tSW5wdXRJY29uOiBudWxsLFxuICBjdXN0b21BcnJvd0ljb246IG51bGwsXG4gIGN1c3RvbUNsb3NlSWNvbjogbnVsbCxcbiAgbm9Cb3JkZXI6IGZhbHNlLFxuICBibG9jazogZmFsc2UsXG4gIHNtYWxsOiBmYWxzZSxcbiAgcmVndWxhcjogZmFsc2UsXG4gIGtlZXBGb2N1c09uSW5wdXQ6IGZhbHNlLFxuICAvLyBjYWxlbmRhciBwcmVzZW50YXRpb24gYW5kIGludGVyYWN0aW9uIHJlbGF0ZWQgcHJvcHNcbiAgcmVuZGVyTW9udGhUZXh0OiBudWxsLFxuICByZW5kZXJXZWVrSGVhZGVyRWxlbWVudDogbnVsbCxcbiAgb3JpZW50YXRpb246IF9jb25zdGFudHMuSE9SSVpPTlRBTF9PUklFTlRBVElPTixcbiAgYW5jaG9yRGlyZWN0aW9uOiBfY29uc3RhbnRzLkFOQ0hPUl9MRUZULFxuICBvcGVuRGlyZWN0aW9uOiBfY29uc3RhbnRzLk9QRU5fRE9XTixcbiAgaG9yaXpvbnRhbE1hcmdpbjogMCxcbiAgd2l0aFBvcnRhbDogZmFsc2UsXG4gIHdpdGhGdWxsU2NyZWVuUG9ydGFsOiBmYWxzZSxcbiAgYXBwZW5kVG9Cb2R5OiBmYWxzZSxcbiAgZGlzYWJsZVNjcm9sbDogZmFsc2UsXG4gIGluaXRpYWxWaXNpYmxlTW9udGg6IG51bGwsXG4gIG51bWJlck9mTW9udGhzOiAyLFxuICBrZWVwT3Blbk9uRGF0ZVNlbGVjdDogZmFsc2UsXG4gIHJlb3BlblBpY2tlck9uQ2xlYXJEYXRlczogZmFsc2UsXG4gIHJlbmRlckNhbGVuZGFySW5mbzogbnVsbCxcbiAgY2FsZW5kYXJJbmZvUG9zaXRpb246IF9jb25zdGFudHMuSU5GT19QT1NJVElPTl9CT1RUT00sXG4gIGhpZGVLZXlib2FyZFNob3J0Y3V0c1BhbmVsOiBmYWxzZSxcbiAgZGF5U2l6ZTogX2NvbnN0YW50cy5EQVlfU0laRSxcbiAgaXNSVEw6IGZhbHNlLFxuICBmaXJzdERheU9mV2VlazogbnVsbCxcbiAgdmVydGljYWxIZWlnaHQ6IG51bGwsXG4gIHRyYW5zaXRpb25EdXJhdGlvbjogdW5kZWZpbmVkLFxuICB2ZXJ0aWNhbFNwYWNpbmc6IF9jb25zdGFudHMuREVGQVVMVF9WRVJUSUNBTF9TUEFDSU5HLFxuICBob3Jpem9udGFsTW9udGhQYWRkaW5nOiB1bmRlZmluZWQsXG4gIC8vIG5hdmlnYXRpb24gcmVsYXRlZCBwcm9wc1xuICBkYXlQaWNrZXJOYXZpZ2F0aW9uSW5saW5lU3R5bGVzOiBudWxsLFxuICBuYXZQb3NpdGlvbjogX2NvbnN0YW50cy5OQVZfUE9TSVRJT05fVE9QLFxuICBuYXZQcmV2OiBudWxsLFxuICBuYXZOZXh0OiBudWxsLFxuICByZW5kZXJOYXZQcmV2QnV0dG9uOiBudWxsLFxuICByZW5kZXJOYXZOZXh0QnV0dG9uOiBudWxsLFxuICBvblByZXZNb250aENsaWNrOiBmdW5jdGlvbiBvblByZXZNb250aENsaWNrKCkge30sXG4gIG9uTmV4dE1vbnRoQ2xpY2s6IGZ1bmN0aW9uIG9uTmV4dE1vbnRoQ2xpY2soKSB7fSxcbiAgb25DbG9zZTogZnVuY3Rpb24gb25DbG9zZSgpIHt9LFxuICAvLyBkYXkgcHJlc2VudGF0aW9uIGFuZCBpbnRlcmFjdGlvbiByZWxhdGVkIHByb3BzXG4gIHJlbmRlckNhbGVuZGFyRGF5OiB1bmRlZmluZWQsXG4gIHJlbmRlckRheUNvbnRlbnRzOiBudWxsLFxuICByZW5kZXJNb250aEVsZW1lbnQ6IG51bGwsXG4gIG1pbmltdW1OaWdodHM6IDEsXG4gIGVuYWJsZU91dHNpZGVEYXlzOiBmYWxzZSxcbiAgaXNEYXlCbG9ja2VkOiBmdW5jdGlvbiBpc0RheUJsb2NrZWQoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBpc091dHNpZGVSYW5nZTogZnVuY3Rpb24gaXNPdXRzaWRlUmFuZ2UoZGF5KSB7XG4gICAgcmV0dXJuICEoMCwgX2lzSW5jbHVzaXZlbHlBZnRlckRheVtcImRlZmF1bHRcIl0pKGRheSwgKDAsIF9tb21lbnRbXCJkZWZhdWx0XCJdKSgpKTtcbiAgfSxcbiAgaXNEYXlIaWdobGlnaHRlZDogZnVuY3Rpb24gaXNEYXlIaWdobGlnaHRlZCgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIG1pbkRhdGU6IHVuZGVmaW5lZCxcbiAgbWF4RGF0ZTogdW5kZWZpbmVkLFxuICAvLyBpbnRlcm5hdGlvbmFsaXphdGlvblxuICBkaXNwbGF5Rm9ybWF0OiBmdW5jdGlvbiBkaXNwbGF5Rm9ybWF0KCkge1xuICAgIHJldHVybiBfbW9tZW50W1wiZGVmYXVsdFwiXS5sb2NhbGVEYXRhKCkubG9uZ0RhdGVGb3JtYXQoJ0wnKTtcbiAgfSxcbiAgbW9udGhGb3JtYXQ6ICdNTU1NIFlZWVknLFxuICB3ZWVrRGF5Rm9ybWF0OiAnZGQnLFxuICBwaHJhc2VzOiBfZGVmYXVsdFBocmFzZXMuRGF0ZVJhbmdlUGlja2VyUGhyYXNlcyxcbiAgZGF5QXJpYUxhYmVsRm9ybWF0OiB1bmRlZmluZWRcbn07XG5cbnZhciBEYXRlUmFuZ2VQaWNrZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9yZWYpIHtcbiAgKDAsIF9pbmhlcml0c0xvb3NlMltcImRlZmF1bHRcIl0pKERhdGVSYW5nZVBpY2tlciwgX3JlZik7XG4gIHZhciBfcHJvdG8gPSBEYXRlUmFuZ2VQaWNrZXIucHJvdG90eXBlO1xuXG4gIF9wcm90b1shX3JlYWN0W1wiZGVmYXVsdFwiXS5QdXJlQ29tcG9uZW50ICYmIFwic2hvdWxkQ29tcG9uZW50VXBkYXRlXCJdID0gZnVuY3Rpb24gKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gICAgcmV0dXJuICEoMCwgX2VuenltZVNoYWxsb3dFcXVhbFtcImRlZmF1bHRcIl0pKHRoaXMucHJvcHMsIG5leHRQcm9wcykgfHwgISgwLCBfZW56eW1lU2hhbGxvd0VxdWFsW1wiZGVmYXVsdFwiXSkodGhpcy5zdGF0ZSwgbmV4dFN0YXRlKTtcbiAgfTtcblxuICBmdW5jdGlvbiBEYXRlUmFuZ2VQaWNrZXIocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9yZWYuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGRheVBpY2tlckNvbnRhaW5lclN0eWxlczoge30sXG4gICAgICBpc0RhdGVSYW5nZVBpY2tlcklucHV0Rm9jdXNlZDogZmFsc2UsXG4gICAgICBpc0RheVBpY2tlckZvY3VzZWQ6IGZhbHNlLFxuICAgICAgc2hvd0tleWJvYXJkU2hvcnRjdXRzOiBmYWxzZVxuICAgIH07XG4gICAgX3RoaXMuaXNUb3VjaERldmljZSA9IGZhbHNlO1xuICAgIF90aGlzLm9uT3V0c2lkZUNsaWNrID0gX3RoaXMub25PdXRzaWRlQ2xpY2suYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcykpO1xuICAgIF90aGlzLm9uRGF0ZVJhbmdlUGlja2VySW5wdXRGb2N1cyA9IF90aGlzLm9uRGF0ZVJhbmdlUGlja2VySW5wdXRGb2N1cy5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgX3RoaXMub25EYXlQaWNrZXJGb2N1cyA9IF90aGlzLm9uRGF5UGlja2VyRm9jdXMuYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcykpO1xuICAgIF90aGlzLm9uRGF5UGlja2VyRm9jdXNPdXQgPSBfdGhpcy5vbkRheVBpY2tlckZvY3VzT3V0LmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5vbkRheVBpY2tlckJsdXIgPSBfdGhpcy5vbkRheVBpY2tlckJsdXIuYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcykpO1xuICAgIF90aGlzLnNob3dLZXlib2FyZFNob3J0Y3V0c1BhbmVsID0gX3RoaXMuc2hvd0tleWJvYXJkU2hvcnRjdXRzUGFuZWwuYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcykpO1xuICAgIF90aGlzLnJlc3BvbnNpdml6ZVBpY2tlclBvc2l0aW9uID0gX3RoaXMucmVzcG9uc2l2aXplUGlja2VyUG9zaXRpb24uYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcykpO1xuICAgIF90aGlzLmRpc2FibGVTY3JvbGwgPSBfdGhpcy5kaXNhYmxlU2Nyb2xsLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5zZXREYXlQaWNrZXJDb250YWluZXJSZWYgPSBfdGhpcy5zZXREYXlQaWNrZXJDb250YWluZXJSZWYuYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcykpO1xuICAgIF90aGlzLnNldENvbnRhaW5lclJlZiA9IF90aGlzLnNldENvbnRhaW5lclJlZi5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyID0gKDAsIF9jb25zb2xpZGF0ZWRFdmVudHMuYWRkRXZlbnRMaXN0ZW5lcikod2luZG93LCAncmVzaXplJywgdGhpcy5yZXNwb25zaXZpemVQaWNrZXJQb3NpdGlvbiwge1xuICAgICAgcGFzc2l2ZTogdHJ1ZVxuICAgIH0pO1xuICAgIHRoaXMucmVzcG9uc2l2aXplUGlja2VyUG9zaXRpb24oKTtcbiAgICB0aGlzLmRpc2FibGVTY3JvbGwoKTtcbiAgICB2YXIgZm9jdXNlZElucHV0ID0gdGhpcy5wcm9wcy5mb2N1c2VkSW5wdXQ7XG5cbiAgICBpZiAoZm9jdXNlZElucHV0KSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgaXNEYXRlUmFuZ2VQaWNrZXJJbnB1dEZvY3VzZWQ6IHRydWVcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMuaXNUb3VjaERldmljZSA9ICgwLCBfaXNUb3VjaERldmljZVtcImRlZmF1bHRcIl0pKCk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICB2YXIgZm9jdXNlZElucHV0ID0gdGhpcy5wcm9wcy5mb2N1c2VkSW5wdXQ7XG5cbiAgICBpZiAoIXByZXZQcm9wcy5mb2N1c2VkSW5wdXQgJiYgZm9jdXNlZElucHV0ICYmIHRoaXMuaXNPcGVuZWQoKSkge1xuICAgICAgLy8gVGhlIGRhdGUgcGlja2VyIGp1c3QgY2hhbmdlZCBmcm9tIGJlaW5nIGNsb3NlZCB0byBiZWluZyBvcGVuLlxuICAgICAgdGhpcy5yZXNwb25zaXZpemVQaWNrZXJQb3NpdGlvbigpO1xuICAgICAgdGhpcy5kaXNhYmxlU2Nyb2xsKCk7XG4gICAgfSBlbHNlIGlmIChwcmV2UHJvcHMuZm9jdXNlZElucHV0ICYmICFmb2N1c2VkSW5wdXQgJiYgIXRoaXMuaXNPcGVuZWQoKSkge1xuICAgICAgLy8gVGhlIGRhdGUgcGlja2VyIGp1c3QgY2hhbmdlZCBmcm9tIGJlaW5nIG9wZW4gdG8gYmVpbmcgY2xvc2VkLlxuICAgICAgaWYgKHRoaXMuZW5hYmxlU2Nyb2xsKSB0aGlzLmVuYWJsZVNjcm9sbCgpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLnJlbW92ZURheVBpY2tlckV2ZW50TGlzdGVuZXJzKCk7XG4gICAgaWYgKHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcikgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCk7XG4gICAgaWYgKHRoaXMuZW5hYmxlU2Nyb2xsKSB0aGlzLmVuYWJsZVNjcm9sbCgpO1xuICB9O1xuXG4gIF9wcm90by5vbk91dHNpZGVDbGljayA9IGZ1bmN0aW9uIG9uT3V0c2lkZUNsaWNrKGV2ZW50KSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgb25Gb2N1c0NoYW5nZSA9IF90aGlzJHByb3BzLm9uRm9jdXNDaGFuZ2UsXG4gICAgICAgIG9uQ2xvc2UgPSBfdGhpcyRwcm9wcy5vbkNsb3NlLFxuICAgICAgICBzdGFydERhdGUgPSBfdGhpcyRwcm9wcy5zdGFydERhdGUsXG4gICAgICAgIGVuZERhdGUgPSBfdGhpcyRwcm9wcy5lbmREYXRlLFxuICAgICAgICBhcHBlbmRUb0JvZHkgPSBfdGhpcyRwcm9wcy5hcHBlbmRUb0JvZHk7XG4gICAgaWYgKCF0aGlzLmlzT3BlbmVkKCkpIHJldHVybjtcbiAgICBpZiAoYXBwZW5kVG9Cb2R5ICYmIHRoaXMuZGF5UGlja2VyQ29udGFpbmVyLmNvbnRhaW5zKGV2ZW50LnRhcmdldCkpIHJldHVybjtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGlzRGF0ZVJhbmdlUGlja2VySW5wdXRGb2N1c2VkOiBmYWxzZSxcbiAgICAgIGlzRGF5UGlja2VyRm9jdXNlZDogZmFsc2UsXG4gICAgICBzaG93S2V5Ym9hcmRTaG9ydGN1dHM6IGZhbHNlXG4gICAgfSk7XG4gICAgb25Gb2N1c0NoYW5nZShudWxsKTtcbiAgICBvbkNsb3NlKHtcbiAgICAgIHN0YXJ0RGF0ZTogc3RhcnREYXRlLFxuICAgICAgZW5kRGF0ZTogZW5kRGF0ZVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5vbkRhdGVSYW5nZVBpY2tlcklucHV0Rm9jdXMgPSBmdW5jdGlvbiBvbkRhdGVSYW5nZVBpY2tlcklucHV0Rm9jdXMoZm9jdXNlZElucHV0KSB7XG4gICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgIG9uRm9jdXNDaGFuZ2UgPSBfdGhpcyRwcm9wczIub25Gb2N1c0NoYW5nZSxcbiAgICAgICAgcmVhZE9ubHkgPSBfdGhpcyRwcm9wczIucmVhZE9ubHksXG4gICAgICAgIHdpdGhQb3J0YWwgPSBfdGhpcyRwcm9wczIud2l0aFBvcnRhbCxcbiAgICAgICAgd2l0aEZ1bGxTY3JlZW5Qb3J0YWwgPSBfdGhpcyRwcm9wczIud2l0aEZ1bGxTY3JlZW5Qb3J0YWwsXG4gICAgICAgIGtlZXBGb2N1c09uSW5wdXQgPSBfdGhpcyRwcm9wczIua2VlcEZvY3VzT25JbnB1dDtcblxuICAgIGlmIChmb2N1c2VkSW5wdXQpIHtcbiAgICAgIHZhciB3aXRoQW55UG9ydGFsID0gd2l0aFBvcnRhbCB8fCB3aXRoRnVsbFNjcmVlblBvcnRhbDtcbiAgICAgIHZhciBtb3ZlRm9jdXNUb0RheVBpY2tlciA9IHdpdGhBbnlQb3J0YWwgfHwgcmVhZE9ubHkgJiYgIWtlZXBGb2N1c09uSW5wdXQgfHwgdGhpcy5pc1RvdWNoRGV2aWNlICYmICFrZWVwRm9jdXNPbklucHV0O1xuXG4gICAgICBpZiAobW92ZUZvY3VzVG9EYXlQaWNrZXIpIHtcbiAgICAgICAgdGhpcy5vbkRheVBpY2tlckZvY3VzKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm9uRGF5UGlja2VyQmx1cigpO1xuICAgICAgfVxuICAgIH1cblxuICAgIG9uRm9jdXNDaGFuZ2UoZm9jdXNlZElucHV0KTtcbiAgfTtcblxuICBfcHJvdG8ub25EYXlQaWNrZXJGb2N1cyA9IGZ1bmN0aW9uIG9uRGF5UGlja2VyRm9jdXMoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzMyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGZvY3VzZWRJbnB1dCA9IF90aGlzJHByb3BzMy5mb2N1c2VkSW5wdXQsXG4gICAgICAgIG9uRm9jdXNDaGFuZ2UgPSBfdGhpcyRwcm9wczMub25Gb2N1c0NoYW5nZTtcbiAgICBpZiAoIWZvY3VzZWRJbnB1dCkgb25Gb2N1c0NoYW5nZShfY29uc3RhbnRzLlNUQVJUX0RBVEUpO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgaXNEYXRlUmFuZ2VQaWNrZXJJbnB1dEZvY3VzZWQ6IGZhbHNlLFxuICAgICAgaXNEYXlQaWNrZXJGb2N1c2VkOiB0cnVlLFxuICAgICAgc2hvd0tleWJvYXJkU2hvcnRjdXRzOiBmYWxzZVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5vbkRheVBpY2tlckZvY3VzT3V0ID0gZnVuY3Rpb24gb25EYXlQaWNrZXJGb2N1c091dChldmVudCkge1xuICAgIC8vIEluIGNhc2VzIHdoZXJlICoqcmVsYXRlZFRhcmdldCoqIGlzIG5vdCBudWxsLCBpdCBwb2ludHMgdG8gdGhlIHJpZ2h0XG4gICAgLy8gZWxlbWVudCBoZXJlLiBIb3dldmVyLCBpbiBjYXNlcyB3aGVyZSBpdCBpcyBudWxsIChzdWNoIGFzIGNsaWNraW5nIG9uIGFcbiAgICAvLyBzcGVjaWZpYyBkYXkpIG9yIGl0IGlzICoqZG9jdW1lbnQuYm9keSoqIChJRTExKSwgdGhlIGFwcHJvcHJpYXRlIHZhbHVlIGlzICoqZXZlbnQudGFyZ2V0KiouXG4gICAgLy9cbiAgICAvLyBXZSBoYW5kbGUgYm90aCBzaXR1YXRpb25zIGhlcmUgYnkgdXNpbmcgdGhlIGAgfHwgYCBvcGVyYXRvciB0byBmYWxsYmFja1xuICAgIC8vIHRvICpldmVudC50YXJnZXQqKiB3aGVuICoqcmVsYXRlZFRhcmdldCoqIGlzIG5vdCBwcm92aWRlZC5cbiAgICB2YXIgcmVsYXRlZFRhcmdldCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQgPT09IGRvY3VtZW50LmJvZHkgPyBldmVudC50YXJnZXQgOiBldmVudC5yZWxhdGVkVGFyZ2V0IHx8IGV2ZW50LnRhcmdldDtcbiAgICBpZiAodGhpcy5kYXlQaWNrZXJDb250YWluZXIuY29udGFpbnMocmVsYXRlZFRhcmdldCkpIHJldHVybjtcbiAgICB0aGlzLm9uT3V0c2lkZUNsaWNrKGV2ZW50KTtcbiAgfTtcblxuICBfcHJvdG8ub25EYXlQaWNrZXJCbHVyID0gZnVuY3Rpb24gb25EYXlQaWNrZXJCbHVyKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgaXNEYXRlUmFuZ2VQaWNrZXJJbnB1dEZvY3VzZWQ6IHRydWUsXG4gICAgICBpc0RheVBpY2tlckZvY3VzZWQ6IGZhbHNlLFxuICAgICAgc2hvd0tleWJvYXJkU2hvcnRjdXRzOiBmYWxzZVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5zZXREYXlQaWNrZXJDb250YWluZXJSZWYgPSBmdW5jdGlvbiBzZXREYXlQaWNrZXJDb250YWluZXJSZWYocmVmKSB7XG4gICAgaWYgKHJlZiA9PT0gdGhpcy5kYXlQaWNrZXJDb250YWluZXIpIHJldHVybjtcbiAgICBpZiAodGhpcy5kYXlQaWNrZXJDb250YWluZXIpIHRoaXMucmVtb3ZlRGF5UGlja2VyRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB0aGlzLmRheVBpY2tlckNvbnRhaW5lciA9IHJlZjtcbiAgICBpZiAoIXJlZikgcmV0dXJuO1xuICAgIHRoaXMuYWRkRGF5UGlja2VyRXZlbnRMaXN0ZW5lcnMoKTtcbiAgfTtcblxuICBfcHJvdG8uc2V0Q29udGFpbmVyUmVmID0gZnVuY3Rpb24gc2V0Q29udGFpbmVyUmVmKHJlZikge1xuICAgIHRoaXMuY29udGFpbmVyID0gcmVmO1xuICB9O1xuXG4gIF9wcm90by5hZGREYXlQaWNrZXJFdmVudExpc3RlbmVycyA9IGZ1bmN0aW9uIGFkZERheVBpY2tlckV2ZW50TGlzdGVuZXJzKCkge1xuICAgIC8vIE5PVEU6IFdlIGFyZSB1c2luZyBhIG1hbnVhbCBldmVudCBsaXN0ZW5lciBoZXJlLCBiZWNhdXNlIFJlYWN0IGRvZXNuJ3RcbiAgICAvLyBwcm92aWRlIEZvY3VzT3V0LCB3aGlsZSBibHVyIGFuZCBrZXlkb3duIGRvbid0IHByb3ZpZGUgdGhlIGluZm9ybWF0aW9uXG4gICAgLy8gbmVlZGVkIGluIG9yZGVyIHRvIGtub3cgd2hldGhlciB3ZSBoYXZlIGxlZnQgZm9jdXMgb3Igbm90LlxuICAgIC8vXG4gICAgLy8gRm9yIHJlZmVyZW5jZSwgdGhpcyBpc3N1ZSBpcyBmdXJ0aGVyIGRlc2NyaWJlZCBoZXJlOlxuICAgIC8vIC0gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy82NDEwXG4gICAgdGhpcy5yZW1vdmVEYXlQaWNrZXJGb2N1c091dCA9ICgwLCBfY29uc29saWRhdGVkRXZlbnRzLmFkZEV2ZW50TGlzdGVuZXIpKHRoaXMuZGF5UGlja2VyQ29udGFpbmVyLCAnZm9jdXNvdXQnLCB0aGlzLm9uRGF5UGlja2VyRm9jdXNPdXQpO1xuICB9O1xuXG4gIF9wcm90by5yZW1vdmVEYXlQaWNrZXJFdmVudExpc3RlbmVycyA9IGZ1bmN0aW9uIHJlbW92ZURheVBpY2tlckV2ZW50TGlzdGVuZXJzKCkge1xuICAgIGlmICh0aGlzLnJlbW92ZURheVBpY2tlckZvY3VzT3V0KSB0aGlzLnJlbW92ZURheVBpY2tlckZvY3VzT3V0KCk7XG4gIH07XG5cbiAgX3Byb3RvLmlzT3BlbmVkID0gZnVuY3Rpb24gaXNPcGVuZWQoKSB7XG4gICAgdmFyIGZvY3VzZWRJbnB1dCA9IHRoaXMucHJvcHMuZm9jdXNlZElucHV0O1xuICAgIHJldHVybiBmb2N1c2VkSW5wdXQgPT09IF9jb25zdGFudHMuU1RBUlRfREFURSB8fCBmb2N1c2VkSW5wdXQgPT09IF9jb25zdGFudHMuRU5EX0RBVEU7XG4gIH07XG5cbiAgX3Byb3RvLmRpc2FibGVTY3JvbGwgPSBmdW5jdGlvbiBkaXNhYmxlU2Nyb2xsKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczQgPSB0aGlzLnByb3BzLFxuICAgICAgICBhcHBlbmRUb0JvZHkgPSBfdGhpcyRwcm9wczQuYXBwZW5kVG9Cb2R5LFxuICAgICAgICBwcm9wRGlzYWJsZVNjcm9sbCA9IF90aGlzJHByb3BzNC5kaXNhYmxlU2Nyb2xsO1xuICAgIGlmICghYXBwZW5kVG9Cb2R5ICYmICFwcm9wRGlzYWJsZVNjcm9sbCkgcmV0dXJuO1xuICAgIGlmICghdGhpcy5pc09wZW5lZCgpKSByZXR1cm47IC8vIERpc2FibGUgc2Nyb2xsIGZvciBldmVyeSBhbmNlc3RvciBvZiB0aGlzIERhdGVSYW5nZVBpY2tlciB1cCB0byB0aGVcbiAgICAvLyBkb2N1bWVudCBsZXZlbC4gVGhpcyBlbnN1cmVzIHRoZSBpbnB1dCBhbmQgdGhlIHBpY2tlciBuZXZlciBtb3ZlLiBPdGhlclxuICAgIC8vIHNpYmxpbmcgZWxlbWVudHMgb3IgdGhlIHBpY2tlciBpdHNlbGYgY2FuIHNjcm9sbC5cblxuICAgIHRoaXMuZW5hYmxlU2Nyb2xsID0gKDAsIF9kaXNhYmxlU2Nyb2xsMltcImRlZmF1bHRcIl0pKHRoaXMuY29udGFpbmVyKTtcbiAgfTtcblxuICBfcHJvdG8ucmVzcG9uc2l2aXplUGlja2VyUG9zaXRpb24gPSBmdW5jdGlvbiByZXNwb25zaXZpemVQaWNrZXJQb3NpdGlvbigpIHtcbiAgICAvLyBJdCdzIHBvc3NpYmxlIHRoZSBwb3J0YWwgcHJvcHMgaGF2ZSBiZWVuIGNoYW5nZWQgaW4gcmVzcG9uc2UgdG8gd2luZG93IHJlc2l6ZXNcbiAgICAvLyBTbyBsZXQncyBlbnN1cmUgd2UgcmVzZXQgdGhpcyBiYWNrIHRvIHRoZSBiYXNlIHN0YXRlIGVhY2ggdGltZVxuICAgIHZhciBkYXlQaWNrZXJDb250YWluZXJTdHlsZXMgPSB0aGlzLnN0YXRlLmRheVBpY2tlckNvbnRhaW5lclN0eWxlcztcblxuICAgIGlmIChPYmplY3Qua2V5cyhkYXlQaWNrZXJDb250YWluZXJTdHlsZXMpLmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBkYXlQaWNrZXJDb250YWluZXJTdHlsZXM6IHt9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuaXNPcGVuZWQoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBfdGhpcyRwcm9wczUgPSB0aGlzLnByb3BzLFxuICAgICAgICBvcGVuRGlyZWN0aW9uID0gX3RoaXMkcHJvcHM1Lm9wZW5EaXJlY3Rpb24sXG4gICAgICAgIGFuY2hvckRpcmVjdGlvbiA9IF90aGlzJHByb3BzNS5hbmNob3JEaXJlY3Rpb24sXG4gICAgICAgIGhvcml6b250YWxNYXJnaW4gPSBfdGhpcyRwcm9wczUuaG9yaXpvbnRhbE1hcmdpbixcbiAgICAgICAgd2l0aFBvcnRhbCA9IF90aGlzJHByb3BzNS53aXRoUG9ydGFsLFxuICAgICAgICB3aXRoRnVsbFNjcmVlblBvcnRhbCA9IF90aGlzJHByb3BzNS53aXRoRnVsbFNjcmVlblBvcnRhbCxcbiAgICAgICAgYXBwZW5kVG9Cb2R5ID0gX3RoaXMkcHJvcHM1LmFwcGVuZFRvQm9keTtcbiAgICB2YXIgaXNBbmNob3JlZExlZnQgPSBhbmNob3JEaXJlY3Rpb24gPT09IF9jb25zdGFudHMuQU5DSE9SX0xFRlQ7XG5cbiAgICBpZiAoIXdpdGhQb3J0YWwgJiYgIXdpdGhGdWxsU2NyZWVuUG9ydGFsKSB7XG4gICAgICB2YXIgY29udGFpbmVyUmVjdCA9IHRoaXMuZGF5UGlja2VyQ29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgdmFyIGN1cnJlbnRPZmZzZXQgPSBkYXlQaWNrZXJDb250YWluZXJTdHlsZXNbYW5jaG9yRGlyZWN0aW9uXSB8fCAwO1xuICAgICAgdmFyIGNvbnRhaW5lckVkZ2UgPSBpc0FuY2hvcmVkTGVmdCA/IGNvbnRhaW5lclJlY3RbX2NvbnN0YW50cy5BTkNIT1JfUklHSFRdIDogY29udGFpbmVyUmVjdFtfY29uc3RhbnRzLkFOQ0hPUl9MRUZUXTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBkYXlQaWNrZXJDb250YWluZXJTdHlsZXM6IF9vYmplY3RTcHJlYWQoe30sICgwLCBfZ2V0UmVzcG9uc2l2ZUNvbnRhaW5lclN0eWxlc1tcImRlZmF1bHRcIl0pKGFuY2hvckRpcmVjdGlvbiwgY3VycmVudE9mZnNldCwgY29udGFpbmVyRWRnZSwgaG9yaXpvbnRhbE1hcmdpbiksIHt9LCBhcHBlbmRUb0JvZHkgJiYgKDAsIF9nZXREZXRhY2hlZENvbnRhaW5lclN0eWxlc1tcImRlZmF1bHRcIl0pKG9wZW5EaXJlY3Rpb24sIGFuY2hvckRpcmVjdGlvbiwgdGhpcy5jb250YWluZXIpKVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5zaG93S2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCA9IGZ1bmN0aW9uIHNob3dLZXlib2FyZFNob3J0Y3V0c1BhbmVsKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgaXNEYXRlUmFuZ2VQaWNrZXJJbnB1dEZvY3VzZWQ6IGZhbHNlLFxuICAgICAgaXNEYXlQaWNrZXJGb2N1c2VkOiB0cnVlLFxuICAgICAgc2hvd0tleWJvYXJkU2hvcnRjdXRzOiB0cnVlXG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLm1heWJlUmVuZGVyRGF5UGlja2VyV2l0aFBvcnRhbCA9IGZ1bmN0aW9uIG1heWJlUmVuZGVyRGF5UGlja2VyV2l0aFBvcnRhbCgpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHM2ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgd2l0aFBvcnRhbCA9IF90aGlzJHByb3BzNi53aXRoUG9ydGFsLFxuICAgICAgICB3aXRoRnVsbFNjcmVlblBvcnRhbCA9IF90aGlzJHByb3BzNi53aXRoRnVsbFNjcmVlblBvcnRhbCxcbiAgICAgICAgYXBwZW5kVG9Cb2R5ID0gX3RoaXMkcHJvcHM2LmFwcGVuZFRvQm9keTtcblxuICAgIGlmICghdGhpcy5pc09wZW5lZCgpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAod2l0aFBvcnRhbCB8fCB3aXRoRnVsbFNjcmVlblBvcnRhbCB8fCBhcHBlbmRUb0JvZHkpIHtcbiAgICAgIHJldHVybiBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoX3JlYWN0UG9ydGFsLlBvcnRhbCwgbnVsbCwgdGhpcy5yZW5kZXJEYXlQaWNrZXIoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucmVuZGVyRGF5UGlja2VyKCk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlckRheVBpY2tlciA9IGZ1bmN0aW9uIHJlbmRlckRheVBpY2tlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHM3ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYW5jaG9yRGlyZWN0aW9uID0gX3RoaXMkcHJvcHM3LmFuY2hvckRpcmVjdGlvbixcbiAgICAgICAgb3BlbkRpcmVjdGlvbiA9IF90aGlzJHByb3BzNy5vcGVuRGlyZWN0aW9uLFxuICAgICAgICBpc0RheUJsb2NrZWQgPSBfdGhpcyRwcm9wczcuaXNEYXlCbG9ja2VkLFxuICAgICAgICBpc0RheUhpZ2hsaWdodGVkID0gX3RoaXMkcHJvcHM3LmlzRGF5SGlnaGxpZ2h0ZWQsXG4gICAgICAgIGlzT3V0c2lkZVJhbmdlID0gX3RoaXMkcHJvcHM3LmlzT3V0c2lkZVJhbmdlLFxuICAgICAgICBudW1iZXJPZk1vbnRocyA9IF90aGlzJHByb3BzNy5udW1iZXJPZk1vbnRocyxcbiAgICAgICAgb3JpZW50YXRpb24gPSBfdGhpcyRwcm9wczcub3JpZW50YXRpb24sXG4gICAgICAgIG1vbnRoRm9ybWF0ID0gX3RoaXMkcHJvcHM3Lm1vbnRoRm9ybWF0LFxuICAgICAgICByZW5kZXJNb250aFRleHQgPSBfdGhpcyRwcm9wczcucmVuZGVyTW9udGhUZXh0LFxuICAgICAgICByZW5kZXJXZWVrSGVhZGVyRWxlbWVudCA9IF90aGlzJHByb3BzNy5yZW5kZXJXZWVrSGVhZGVyRWxlbWVudCxcbiAgICAgICAgZGF5UGlja2VyTmF2aWdhdGlvbklubGluZVN0eWxlcyA9IF90aGlzJHByb3BzNy5kYXlQaWNrZXJOYXZpZ2F0aW9uSW5saW5lU3R5bGVzLFxuICAgICAgICBuYXZQb3NpdGlvbiA9IF90aGlzJHByb3BzNy5uYXZQb3NpdGlvbixcbiAgICAgICAgbmF2UHJldiA9IF90aGlzJHByb3BzNy5uYXZQcmV2LFxuICAgICAgICBuYXZOZXh0ID0gX3RoaXMkcHJvcHM3Lm5hdk5leHQsXG4gICAgICAgIHJlbmRlck5hdlByZXZCdXR0b24gPSBfdGhpcyRwcm9wczcucmVuZGVyTmF2UHJldkJ1dHRvbixcbiAgICAgICAgcmVuZGVyTmF2TmV4dEJ1dHRvbiA9IF90aGlzJHByb3BzNy5yZW5kZXJOYXZOZXh0QnV0dG9uLFxuICAgICAgICBvblByZXZNb250aENsaWNrID0gX3RoaXMkcHJvcHM3Lm9uUHJldk1vbnRoQ2xpY2ssXG4gICAgICAgIG9uTmV4dE1vbnRoQ2xpY2sgPSBfdGhpcyRwcm9wczcub25OZXh0TW9udGhDbGljayxcbiAgICAgICAgb25EYXRlc0NoYW5nZSA9IF90aGlzJHByb3BzNy5vbkRhdGVzQ2hhbmdlLFxuICAgICAgICBvbkZvY3VzQ2hhbmdlID0gX3RoaXMkcHJvcHM3Lm9uRm9jdXNDaGFuZ2UsXG4gICAgICAgIHdpdGhQb3J0YWwgPSBfdGhpcyRwcm9wczcud2l0aFBvcnRhbCxcbiAgICAgICAgd2l0aEZ1bGxTY3JlZW5Qb3J0YWwgPSBfdGhpcyRwcm9wczcud2l0aEZ1bGxTY3JlZW5Qb3J0YWwsXG4gICAgICAgIGRheVNpemUgPSBfdGhpcyRwcm9wczcuZGF5U2l6ZSxcbiAgICAgICAgZW5hYmxlT3V0c2lkZURheXMgPSBfdGhpcyRwcm9wczcuZW5hYmxlT3V0c2lkZURheXMsXG4gICAgICAgIGZvY3VzZWRJbnB1dCA9IF90aGlzJHByb3BzNy5mb2N1c2VkSW5wdXQsXG4gICAgICAgIHN0YXJ0RGF0ZSA9IF90aGlzJHByb3BzNy5zdGFydERhdGUsXG4gICAgICAgIHN0YXJ0RGF0ZU9mZnNldCA9IF90aGlzJHByb3BzNy5zdGFydERhdGVPZmZzZXQsXG4gICAgICAgIGVuZERhdGUgPSBfdGhpcyRwcm9wczcuZW5kRGF0ZSxcbiAgICAgICAgZW5kRGF0ZU9mZnNldCA9IF90aGlzJHByb3BzNy5lbmREYXRlT2Zmc2V0LFxuICAgICAgICBtaW5EYXRlID0gX3RoaXMkcHJvcHM3Lm1pbkRhdGUsXG4gICAgICAgIG1heERhdGUgPSBfdGhpcyRwcm9wczcubWF4RGF0ZSxcbiAgICAgICAgbWluaW11bU5pZ2h0cyA9IF90aGlzJHByb3BzNy5taW5pbXVtTmlnaHRzLFxuICAgICAgICBrZWVwT3Blbk9uRGF0ZVNlbGVjdCA9IF90aGlzJHByb3BzNy5rZWVwT3Blbk9uRGF0ZVNlbGVjdCxcbiAgICAgICAgcmVuZGVyQ2FsZW5kYXJEYXkgPSBfdGhpcyRwcm9wczcucmVuZGVyQ2FsZW5kYXJEYXksXG4gICAgICAgIHJlbmRlckRheUNvbnRlbnRzID0gX3RoaXMkcHJvcHM3LnJlbmRlckRheUNvbnRlbnRzLFxuICAgICAgICByZW5kZXJDYWxlbmRhckluZm8gPSBfdGhpcyRwcm9wczcucmVuZGVyQ2FsZW5kYXJJbmZvLFxuICAgICAgICByZW5kZXJNb250aEVsZW1lbnQgPSBfdGhpcyRwcm9wczcucmVuZGVyTW9udGhFbGVtZW50LFxuICAgICAgICBjYWxlbmRhckluZm9Qb3NpdGlvbiA9IF90aGlzJHByb3BzNy5jYWxlbmRhckluZm9Qb3NpdGlvbixcbiAgICAgICAgZmlyc3REYXlPZldlZWsgPSBfdGhpcyRwcm9wczcuZmlyc3REYXlPZldlZWssXG4gICAgICAgIGluaXRpYWxWaXNpYmxlTW9udGggPSBfdGhpcyRwcm9wczcuaW5pdGlhbFZpc2libGVNb250aCxcbiAgICAgICAgaGlkZUtleWJvYXJkU2hvcnRjdXRzUGFuZWwgPSBfdGhpcyRwcm9wczcuaGlkZUtleWJvYXJkU2hvcnRjdXRzUGFuZWwsXG4gICAgICAgIGN1c3RvbUNsb3NlSWNvbiA9IF90aGlzJHByb3BzNy5jdXN0b21DbG9zZUljb24sXG4gICAgICAgIG9uQ2xvc2UgPSBfdGhpcyRwcm9wczcub25DbG9zZSxcbiAgICAgICAgcGhyYXNlcyA9IF90aGlzJHByb3BzNy5waHJhc2VzLFxuICAgICAgICBkYXlBcmlhTGFiZWxGb3JtYXQgPSBfdGhpcyRwcm9wczcuZGF5QXJpYUxhYmVsRm9ybWF0LFxuICAgICAgICBpc1JUTCA9IF90aGlzJHByb3BzNy5pc1JUTCxcbiAgICAgICAgd2Vla0RheUZvcm1hdCA9IF90aGlzJHByb3BzNy53ZWVrRGF5Rm9ybWF0LFxuICAgICAgICBzdHlsZXMgPSBfdGhpcyRwcm9wczcuc3R5bGVzLFxuICAgICAgICB2ZXJ0aWNhbEhlaWdodCA9IF90aGlzJHByb3BzNy52ZXJ0aWNhbEhlaWdodCxcbiAgICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uID0gX3RoaXMkcHJvcHM3LnRyYW5zaXRpb25EdXJhdGlvbixcbiAgICAgICAgdmVydGljYWxTcGFjaW5nID0gX3RoaXMkcHJvcHM3LnZlcnRpY2FsU3BhY2luZyxcbiAgICAgICAgaG9yaXpvbnRhbE1vbnRoUGFkZGluZyA9IF90aGlzJHByb3BzNy5ob3Jpem9udGFsTW9udGhQYWRkaW5nLFxuICAgICAgICBzbWFsbCA9IF90aGlzJHByb3BzNy5zbWFsbCxcbiAgICAgICAgZGlzYWJsZWQgPSBfdGhpcyRwcm9wczcuZGlzYWJsZWQsXG4gICAgICAgIHJlYWN0RGF0ZXMgPSBfdGhpcyRwcm9wczcudGhlbWUucmVhY3REYXRlcztcbiAgICB2YXIgX3RoaXMkc3RhdGUgPSB0aGlzLnN0YXRlLFxuICAgICAgICBkYXlQaWNrZXJDb250YWluZXJTdHlsZXMgPSBfdGhpcyRzdGF0ZS5kYXlQaWNrZXJDb250YWluZXJTdHlsZXMsXG4gICAgICAgIGlzRGF5UGlja2VyRm9jdXNlZCA9IF90aGlzJHN0YXRlLmlzRGF5UGlja2VyRm9jdXNlZCxcbiAgICAgICAgc2hvd0tleWJvYXJkU2hvcnRjdXRzID0gX3RoaXMkc3RhdGUuc2hvd0tleWJvYXJkU2hvcnRjdXRzO1xuICAgIHZhciBvbk91dHNpZGVDbGljayA9ICF3aXRoRnVsbFNjcmVlblBvcnRhbCAmJiB3aXRoUG9ydGFsID8gdGhpcy5vbk91dHNpZGVDbGljayA6IHVuZGVmaW5lZDtcblxuICAgIHZhciBpbml0aWFsVmlzaWJsZU1vbnRoVGh1bmsgPSBpbml0aWFsVmlzaWJsZU1vbnRoIHx8IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBzdGFydERhdGUgfHwgZW5kRGF0ZSB8fCAoMCwgX21vbWVudFtcImRlZmF1bHRcIl0pKCk7XG4gICAgfTtcblxuICAgIHZhciBjbG9zZUljb24gPSBjdXN0b21DbG9zZUljb24gfHwgX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9DbG9zZUJ1dHRvbltcImRlZmF1bHRcIl0sICgwLCBfcmVhY3RXaXRoU3R5bGVzLmNzcykoc3R5bGVzLkRhdGVSYW5nZVBpY2tlcl9jbG9zZUJ1dHRvbl9zdmcpKTtcblxuICAgIHZhciBpbnB1dEhlaWdodCA9ICgwLCBfZ2V0SW5wdXRIZWlnaHRbXCJkZWZhdWx0XCJdKShyZWFjdERhdGVzLCBzbWFsbCk7XG4gICAgdmFyIHdpdGhBbnlQb3J0YWwgPSB3aXRoUG9ydGFsIHx8IHdpdGhGdWxsU2NyZWVuUG9ydGFsO1xuICAgIC8qIGVzbGludC1kaXNhYmxlIGpzeC1hMTF5L25vLXN0YXRpYy1lbGVtZW50LWludGVyYWN0aW9ucyAqL1xuXG4gICAgLyogZXNsaW50LWRpc2FibGUganN4LWExMXkvY2xpY2stZXZlbnRzLWhhdmUta2V5LWV2ZW50cyAqL1xuXG4gICAgcmV0dXJuIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImRpdlwiLCAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe1xuICAgICAgcmVmOiB0aGlzLnNldERheVBpY2tlckNvbnRhaW5lclJlZlxuICAgIH0sICgwLCBfcmVhY3RXaXRoU3R5bGVzLmNzcykoc3R5bGVzLkRhdGVSYW5nZVBpY2tlcl9waWNrZXIsIGFuY2hvckRpcmVjdGlvbiA9PT0gX2NvbnN0YW50cy5BTkNIT1JfTEVGVCAmJiBzdHlsZXMuRGF0ZVJhbmdlUGlja2VyX3BpY2tlcl9fZGlyZWN0aW9uTGVmdCwgYW5jaG9yRGlyZWN0aW9uID09PSBfY29uc3RhbnRzLkFOQ0hPUl9SSUdIVCAmJiBzdHlsZXMuRGF0ZVJhbmdlUGlja2VyX3BpY2tlcl9fZGlyZWN0aW9uUmlnaHQsIG9yaWVudGF0aW9uID09PSBfY29uc3RhbnRzLkhPUklaT05UQUxfT1JJRU5UQVRJT04gJiYgc3R5bGVzLkRhdGVSYW5nZVBpY2tlcl9waWNrZXJfX2hvcml6b250YWwsIG9yaWVudGF0aW9uID09PSBfY29uc3RhbnRzLlZFUlRJQ0FMX09SSUVOVEFUSU9OICYmIHN0eWxlcy5EYXRlUmFuZ2VQaWNrZXJfcGlja2VyX192ZXJ0aWNhbCwgIXdpdGhBbnlQb3J0YWwgJiYgb3BlbkRpcmVjdGlvbiA9PT0gX2NvbnN0YW50cy5PUEVOX0RPV04gJiYge1xuICAgICAgdG9wOiBpbnB1dEhlaWdodCArIHZlcnRpY2FsU3BhY2luZ1xuICAgIH0sICF3aXRoQW55UG9ydGFsICYmIG9wZW5EaXJlY3Rpb24gPT09IF9jb25zdGFudHMuT1BFTl9VUCAmJiB7XG4gICAgICBib3R0b206IGlucHV0SGVpZ2h0ICsgdmVydGljYWxTcGFjaW5nXG4gICAgfSwgd2l0aEFueVBvcnRhbCAmJiBzdHlsZXMuRGF0ZVJhbmdlUGlja2VyX3BpY2tlcl9fcG9ydGFsLCB3aXRoRnVsbFNjcmVlblBvcnRhbCAmJiBzdHlsZXMuRGF0ZVJhbmdlUGlja2VyX3BpY2tlcl9fZnVsbFNjcmVlblBvcnRhbCwgaXNSVEwgJiYgc3R5bGVzLkRhdGVSYW5nZVBpY2tlcl9waWNrZXJfX3J0bCwgZGF5UGlja2VyQ29udGFpbmVyU3R5bGVzKSwge1xuICAgICAgb25DbGljazogb25PdXRzaWRlQ2xpY2tcbiAgICB9KSwgX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9EYXlQaWNrZXJSYW5nZUNvbnRyb2xsZXJbXCJkZWZhdWx0XCJdLCB7XG4gICAgICBvcmllbnRhdGlvbjogb3JpZW50YXRpb24sXG4gICAgICBlbmFibGVPdXRzaWRlRGF5czogZW5hYmxlT3V0c2lkZURheXMsXG4gICAgICBudW1iZXJPZk1vbnRoczogbnVtYmVyT2ZNb250aHMsXG4gICAgICBvblByZXZNb250aENsaWNrOiBvblByZXZNb250aENsaWNrLFxuICAgICAgb25OZXh0TW9udGhDbGljazogb25OZXh0TW9udGhDbGljayxcbiAgICAgIG9uRGF0ZXNDaGFuZ2U6IG9uRGF0ZXNDaGFuZ2UsXG4gICAgICBvbkZvY3VzQ2hhbmdlOiBvbkZvY3VzQ2hhbmdlLFxuICAgICAgb25DbG9zZTogb25DbG9zZSxcbiAgICAgIGZvY3VzZWRJbnB1dDogZm9jdXNlZElucHV0LFxuICAgICAgc3RhcnREYXRlOiBzdGFydERhdGUsXG4gICAgICBzdGFydERhdGVPZmZzZXQ6IHN0YXJ0RGF0ZU9mZnNldCxcbiAgICAgIGVuZERhdGU6IGVuZERhdGUsXG4gICAgICBlbmREYXRlT2Zmc2V0OiBlbmREYXRlT2Zmc2V0LFxuICAgICAgbWluRGF0ZTogbWluRGF0ZSxcbiAgICAgIG1heERhdGU6IG1heERhdGUsXG4gICAgICBtb250aEZvcm1hdDogbW9udGhGb3JtYXQsXG4gICAgICByZW5kZXJNb250aFRleHQ6IHJlbmRlck1vbnRoVGV4dCxcbiAgICAgIHJlbmRlcldlZWtIZWFkZXJFbGVtZW50OiByZW5kZXJXZWVrSGVhZGVyRWxlbWVudCxcbiAgICAgIHdpdGhQb3J0YWw6IHdpdGhBbnlQb3J0YWwsXG4gICAgICBkYXlTaXplOiBkYXlTaXplLFxuICAgICAgaW5pdGlhbFZpc2libGVNb250aDogaW5pdGlhbFZpc2libGVNb250aFRodW5rLFxuICAgICAgaGlkZUtleWJvYXJkU2hvcnRjdXRzUGFuZWw6IGhpZGVLZXlib2FyZFNob3J0Y3V0c1BhbmVsLFxuICAgICAgZGF5UGlja2VyTmF2aWdhdGlvbklubGluZVN0eWxlczogZGF5UGlja2VyTmF2aWdhdGlvbklubGluZVN0eWxlcyxcbiAgICAgIG5hdlBvc2l0aW9uOiBuYXZQb3NpdGlvbixcbiAgICAgIG5hdlByZXY6IG5hdlByZXYsXG4gICAgICBuYXZOZXh0OiBuYXZOZXh0LFxuICAgICAgcmVuZGVyTmF2UHJldkJ1dHRvbjogcmVuZGVyTmF2UHJldkJ1dHRvbixcbiAgICAgIHJlbmRlck5hdk5leHRCdXR0b246IHJlbmRlck5hdk5leHRCdXR0b24sXG4gICAgICBtaW5pbXVtTmlnaHRzOiBtaW5pbXVtTmlnaHRzLFxuICAgICAgaXNPdXRzaWRlUmFuZ2U6IGlzT3V0c2lkZVJhbmdlLFxuICAgICAgaXNEYXlIaWdobGlnaHRlZDogaXNEYXlIaWdobGlnaHRlZCxcbiAgICAgIGlzRGF5QmxvY2tlZDogaXNEYXlCbG9ja2VkLFxuICAgICAga2VlcE9wZW5PbkRhdGVTZWxlY3Q6IGtlZXBPcGVuT25EYXRlU2VsZWN0LFxuICAgICAgcmVuZGVyQ2FsZW5kYXJEYXk6IHJlbmRlckNhbGVuZGFyRGF5LFxuICAgICAgcmVuZGVyRGF5Q29udGVudHM6IHJlbmRlckRheUNvbnRlbnRzLFxuICAgICAgcmVuZGVyQ2FsZW5kYXJJbmZvOiByZW5kZXJDYWxlbmRhckluZm8sXG4gICAgICByZW5kZXJNb250aEVsZW1lbnQ6IHJlbmRlck1vbnRoRWxlbWVudCxcbiAgICAgIGNhbGVuZGFySW5mb1Bvc2l0aW9uOiBjYWxlbmRhckluZm9Qb3NpdGlvbixcbiAgICAgIGlzRm9jdXNlZDogaXNEYXlQaWNrZXJGb2N1c2VkLFxuICAgICAgc2hvd0tleWJvYXJkU2hvcnRjdXRzOiBzaG93S2V5Ym9hcmRTaG9ydGN1dHMsXG4gICAgICBvbkJsdXI6IHRoaXMub25EYXlQaWNrZXJCbHVyLFxuICAgICAgcGhyYXNlczogcGhyYXNlcyxcbiAgICAgIGRheUFyaWFMYWJlbEZvcm1hdDogZGF5QXJpYUxhYmVsRm9ybWF0LFxuICAgICAgaXNSVEw6IGlzUlRMLFxuICAgICAgZmlyc3REYXlPZldlZWs6IGZpcnN0RGF5T2ZXZWVrLFxuICAgICAgd2Vla0RheUZvcm1hdDogd2Vla0RheUZvcm1hdCxcbiAgICAgIHZlcnRpY2FsSGVpZ2h0OiB2ZXJ0aWNhbEhlaWdodCxcbiAgICAgIHRyYW5zaXRpb25EdXJhdGlvbjogdHJhbnNpdGlvbkR1cmF0aW9uLFxuICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgICAgaG9yaXpvbnRhbE1vbnRoUGFkZGluZzogaG9yaXpvbnRhbE1vbnRoUGFkZGluZ1xuICAgIH0pLCB3aXRoRnVsbFNjcmVlblBvcnRhbCAmJiBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwgKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKHt9LCAoMCwgX3JlYWN0V2l0aFN0eWxlcy5jc3MpKHN0eWxlcy5EYXRlUmFuZ2VQaWNrZXJfY2xvc2VCdXR0b24pLCB7XG4gICAgICB0eXBlOiBcImJ1dHRvblwiLFxuICAgICAgb25DbGljazogdGhpcy5vbk91dHNpZGVDbGljayxcbiAgICAgIFwiYXJpYS1sYWJlbFwiOiBwaHJhc2VzLmNsb3NlRGF0ZVBpY2tlclxuICAgIH0pLCBjbG9zZUljb24pKTtcbiAgICAvKiBlc2xpbnQtZW5hYmxlIGpzeC1hMTF5L25vLXN0YXRpYy1lbGVtZW50LWludGVyYWN0aW9ucyAqL1xuXG4gICAgLyogZXNsaW50LWVuYWJsZSBqc3gtYTExeS9jbGljay1ldmVudHMtaGF2ZS1rZXktZXZlbnRzICovXG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHM4ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgc3RhcnREYXRlID0gX3RoaXMkcHJvcHM4LnN0YXJ0RGF0ZSxcbiAgICAgICAgc3RhcnREYXRlSWQgPSBfdGhpcyRwcm9wczguc3RhcnREYXRlSWQsXG4gICAgICAgIHN0YXJ0RGF0ZVBsYWNlaG9sZGVyVGV4dCA9IF90aGlzJHByb3BzOC5zdGFydERhdGVQbGFjZWhvbGRlclRleHQsXG4gICAgICAgIHN0YXJ0RGF0ZUFyaWFMYWJlbCA9IF90aGlzJHByb3BzOC5zdGFydERhdGVBcmlhTGFiZWwsXG4gICAgICAgIGVuZERhdGUgPSBfdGhpcyRwcm9wczguZW5kRGF0ZSxcbiAgICAgICAgZW5kRGF0ZUlkID0gX3RoaXMkcHJvcHM4LmVuZERhdGVJZCxcbiAgICAgICAgZW5kRGF0ZVBsYWNlaG9sZGVyVGV4dCA9IF90aGlzJHByb3BzOC5lbmREYXRlUGxhY2Vob2xkZXJUZXh0LFxuICAgICAgICBlbmREYXRlQXJpYUxhYmVsID0gX3RoaXMkcHJvcHM4LmVuZERhdGVBcmlhTGFiZWwsXG4gICAgICAgIGZvY3VzZWRJbnB1dCA9IF90aGlzJHByb3BzOC5mb2N1c2VkSW5wdXQsXG4gICAgICAgIHNjcmVlblJlYWRlcklucHV0TWVzc2FnZSA9IF90aGlzJHByb3BzOC5zY3JlZW5SZWFkZXJJbnB1dE1lc3NhZ2UsXG4gICAgICAgIHNob3dDbGVhckRhdGVzID0gX3RoaXMkcHJvcHM4LnNob3dDbGVhckRhdGVzLFxuICAgICAgICBzaG93RGVmYXVsdElucHV0SWNvbiA9IF90aGlzJHByb3BzOC5zaG93RGVmYXVsdElucHV0SWNvbixcbiAgICAgICAgaW5wdXRJY29uUG9zaXRpb24gPSBfdGhpcyRwcm9wczguaW5wdXRJY29uUG9zaXRpb24sXG4gICAgICAgIGN1c3RvbUlucHV0SWNvbiA9IF90aGlzJHByb3BzOC5jdXN0b21JbnB1dEljb24sXG4gICAgICAgIGN1c3RvbUFycm93SWNvbiA9IF90aGlzJHByb3BzOC5jdXN0b21BcnJvd0ljb24sXG4gICAgICAgIGN1c3RvbUNsb3NlSWNvbiA9IF90aGlzJHByb3BzOC5jdXN0b21DbG9zZUljb24sXG4gICAgICAgIGRpc2FibGVkID0gX3RoaXMkcHJvcHM4LmRpc2FibGVkLFxuICAgICAgICByZXF1aXJlZCA9IF90aGlzJHByb3BzOC5yZXF1aXJlZCxcbiAgICAgICAgcmVhZE9ubHkgPSBfdGhpcyRwcm9wczgucmVhZE9ubHksXG4gICAgICAgIG9wZW5EaXJlY3Rpb24gPSBfdGhpcyRwcm9wczgub3BlbkRpcmVjdGlvbixcbiAgICAgICAgcGhyYXNlcyA9IF90aGlzJHByb3BzOC5waHJhc2VzLFxuICAgICAgICBpc091dHNpZGVSYW5nZSA9IF90aGlzJHByb3BzOC5pc091dHNpZGVSYW5nZSxcbiAgICAgICAgbWluaW11bU5pZ2h0cyA9IF90aGlzJHByb3BzOC5taW5pbXVtTmlnaHRzLFxuICAgICAgICB3aXRoUG9ydGFsID0gX3RoaXMkcHJvcHM4LndpdGhQb3J0YWwsXG4gICAgICAgIHdpdGhGdWxsU2NyZWVuUG9ydGFsID0gX3RoaXMkcHJvcHM4LndpdGhGdWxsU2NyZWVuUG9ydGFsLFxuICAgICAgICBkaXNwbGF5Rm9ybWF0ID0gX3RoaXMkcHJvcHM4LmRpc3BsYXlGb3JtYXQsXG4gICAgICAgIHJlb3BlblBpY2tlck9uQ2xlYXJEYXRlcyA9IF90aGlzJHByb3BzOC5yZW9wZW5QaWNrZXJPbkNsZWFyRGF0ZXMsXG4gICAgICAgIGtlZXBPcGVuT25EYXRlU2VsZWN0ID0gX3RoaXMkcHJvcHM4LmtlZXBPcGVuT25EYXRlU2VsZWN0LFxuICAgICAgICBvbkRhdGVzQ2hhbmdlID0gX3RoaXMkcHJvcHM4Lm9uRGF0ZXNDaGFuZ2UsXG4gICAgICAgIG9uQ2xvc2UgPSBfdGhpcyRwcm9wczgub25DbG9zZSxcbiAgICAgICAgaXNSVEwgPSBfdGhpcyRwcm9wczguaXNSVEwsXG4gICAgICAgIG5vQm9yZGVyID0gX3RoaXMkcHJvcHM4Lm5vQm9yZGVyLFxuICAgICAgICBibG9jayA9IF90aGlzJHByb3BzOC5ibG9jayxcbiAgICAgICAgdmVydGljYWxTcGFjaW5nID0gX3RoaXMkcHJvcHM4LnZlcnRpY2FsU3BhY2luZyxcbiAgICAgICAgc21hbGwgPSBfdGhpcyRwcm9wczguc21hbGwsXG4gICAgICAgIHJlZ3VsYXIgPSBfdGhpcyRwcm9wczgucmVndWxhcixcbiAgICAgICAgc3R5bGVzID0gX3RoaXMkcHJvcHM4LnN0eWxlcztcbiAgICB2YXIgaXNEYXRlUmFuZ2VQaWNrZXJJbnB1dEZvY3VzZWQgPSB0aGlzLnN0YXRlLmlzRGF0ZVJhbmdlUGlja2VySW5wdXRGb2N1c2VkO1xuICAgIHZhciBlbmFibGVPdXRzaWRlQ2xpY2sgPSAhd2l0aFBvcnRhbCAmJiAhd2l0aEZ1bGxTY3JlZW5Qb3J0YWw7XG4gICAgdmFyIGhpZGVGYW5nID0gdmVydGljYWxTcGFjaW5nIDwgX2NvbnN0YW50cy5GQU5HX0hFSUdIVF9QWDtcblxuICAgIHZhciBpbnB1dCA9IF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChfRGF0ZVJhbmdlUGlja2VySW5wdXRDb250cm9sbGVyW1wiZGVmYXVsdFwiXSwge1xuICAgICAgc3RhcnREYXRlOiBzdGFydERhdGUsXG4gICAgICBzdGFydERhdGVJZDogc3RhcnREYXRlSWQsXG4gICAgICBzdGFydERhdGVQbGFjZWhvbGRlclRleHQ6IHN0YXJ0RGF0ZVBsYWNlaG9sZGVyVGV4dCxcbiAgICAgIGlzU3RhcnREYXRlRm9jdXNlZDogZm9jdXNlZElucHV0ID09PSBfY29uc3RhbnRzLlNUQVJUX0RBVEUsXG4gICAgICBzdGFydERhdGVBcmlhTGFiZWw6IHN0YXJ0RGF0ZUFyaWFMYWJlbCxcbiAgICAgIGVuZERhdGU6IGVuZERhdGUsXG4gICAgICBlbmREYXRlSWQ6IGVuZERhdGVJZCxcbiAgICAgIGVuZERhdGVQbGFjZWhvbGRlclRleHQ6IGVuZERhdGVQbGFjZWhvbGRlclRleHQsXG4gICAgICBpc0VuZERhdGVGb2N1c2VkOiBmb2N1c2VkSW5wdXQgPT09IF9jb25zdGFudHMuRU5EX0RBVEUsXG4gICAgICBlbmREYXRlQXJpYUxhYmVsOiBlbmREYXRlQXJpYUxhYmVsLFxuICAgICAgZGlzcGxheUZvcm1hdDogZGlzcGxheUZvcm1hdCxcbiAgICAgIHNob3dDbGVhckRhdGVzOiBzaG93Q2xlYXJEYXRlcyxcbiAgICAgIHNob3dDYXJldDogIXdpdGhQb3J0YWwgJiYgIXdpdGhGdWxsU2NyZWVuUG9ydGFsICYmICFoaWRlRmFuZyxcbiAgICAgIHNob3dEZWZhdWx0SW5wdXRJY29uOiBzaG93RGVmYXVsdElucHV0SWNvbixcbiAgICAgIGlucHV0SWNvblBvc2l0aW9uOiBpbnB1dEljb25Qb3NpdGlvbixcbiAgICAgIGN1c3RvbUlucHV0SWNvbjogY3VzdG9tSW5wdXRJY29uLFxuICAgICAgY3VzdG9tQXJyb3dJY29uOiBjdXN0b21BcnJvd0ljb24sXG4gICAgICBjdXN0b21DbG9zZUljb246IGN1c3RvbUNsb3NlSWNvbixcbiAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICAgIHJlcXVpcmVkOiByZXF1aXJlZCxcbiAgICAgIHJlYWRPbmx5OiByZWFkT25seSxcbiAgICAgIG9wZW5EaXJlY3Rpb246IG9wZW5EaXJlY3Rpb24sXG4gICAgICByZW9wZW5QaWNrZXJPbkNsZWFyRGF0ZXM6IHJlb3BlblBpY2tlck9uQ2xlYXJEYXRlcyxcbiAgICAgIGtlZXBPcGVuT25EYXRlU2VsZWN0OiBrZWVwT3Blbk9uRGF0ZVNlbGVjdCxcbiAgICAgIGlzT3V0c2lkZVJhbmdlOiBpc091dHNpZGVSYW5nZSxcbiAgICAgIG1pbmltdW1OaWdodHM6IG1pbmltdW1OaWdodHMsXG4gICAgICB3aXRoRnVsbFNjcmVlblBvcnRhbDogd2l0aEZ1bGxTY3JlZW5Qb3J0YWwsXG4gICAgICBvbkRhdGVzQ2hhbmdlOiBvbkRhdGVzQ2hhbmdlLFxuICAgICAgb25Gb2N1c0NoYW5nZTogdGhpcy5vbkRhdGVSYW5nZVBpY2tlcklucHV0Rm9jdXMsXG4gICAgICBvbktleURvd25BcnJvd0Rvd246IHRoaXMub25EYXlQaWNrZXJGb2N1cyxcbiAgICAgIG9uS2V5RG93blF1ZXN0aW9uTWFyazogdGhpcy5zaG93S2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCxcbiAgICAgIG9uQ2xvc2U6IG9uQ2xvc2UsXG4gICAgICBwaHJhc2VzOiBwaHJhc2VzLFxuICAgICAgc2NyZWVuUmVhZGVyTWVzc2FnZTogc2NyZWVuUmVhZGVySW5wdXRNZXNzYWdlLFxuICAgICAgaXNGb2N1c2VkOiBpc0RhdGVSYW5nZVBpY2tlcklucHV0Rm9jdXNlZCxcbiAgICAgIGlzUlRMOiBpc1JUTCxcbiAgICAgIG5vQm9yZGVyOiBub0JvcmRlcixcbiAgICAgIGJsb2NrOiBibG9jayxcbiAgICAgIHNtYWxsOiBzbWFsbCxcbiAgICAgIHJlZ3VsYXI6IHJlZ3VsYXIsXG4gICAgICB2ZXJ0aWNhbFNwYWNpbmc6IHZlcnRpY2FsU3BhY2luZ1xuICAgIH0sIHRoaXMubWF5YmVSZW5kZXJEYXlQaWNrZXJXaXRoUG9ydGFsKCkpO1xuXG4gICAgcmV0dXJuIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImRpdlwiLCAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe1xuICAgICAgcmVmOiB0aGlzLnNldENvbnRhaW5lclJlZlxuICAgIH0sICgwLCBfcmVhY3RXaXRoU3R5bGVzLmNzcykoc3R5bGVzLkRhdGVSYW5nZVBpY2tlciwgYmxvY2sgJiYgc3R5bGVzLkRhdGVSYW5nZVBpY2tlcl9fYmxvY2spKSwgZW5hYmxlT3V0c2lkZUNsaWNrICYmIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChfcmVhY3RPdXRzaWRlQ2xpY2tIYW5kbGVyW1wiZGVmYXVsdFwiXSwge1xuICAgICAgb25PdXRzaWRlQ2xpY2s6IHRoaXMub25PdXRzaWRlQ2xpY2tcbiAgICB9LCBpbnB1dCksIGVuYWJsZU91dHNpZGVDbGljayB8fCBpbnB1dCk7XG4gIH07XG5cbiAgcmV0dXJuIERhdGVSYW5nZVBpY2tlcjtcbn0oX3JlYWN0W1wiZGVmYXVsdFwiXS5QdXJlQ29tcG9uZW50IHx8IF9yZWFjdFtcImRlZmF1bHRcIl0uQ29tcG9uZW50KTtcblxuZXhwb3J0cy5QdXJlRGF0ZVJhbmdlUGlja2VyID0gRGF0ZVJhbmdlUGlja2VyO1xuRGF0ZVJhbmdlUGlja2VyLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHByb3BUeXBlcyA6IHt9O1xuRGF0ZVJhbmdlUGlja2VyLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9yZWFjdFdpdGhTdHlsZXMud2l0aFN0eWxlcykoZnVuY3Rpb24gKF9yZWYyKSB7XG4gIHZhciBfcmVmMiRyZWFjdERhdGVzID0gX3JlZjIucmVhY3REYXRlcyxcbiAgICAgIGNvbG9yID0gX3JlZjIkcmVhY3REYXRlcy5jb2xvcixcbiAgICAgIHpJbmRleCA9IF9yZWYyJHJlYWN0RGF0ZXMuekluZGV4O1xuICByZXR1cm4ge1xuICAgIERhdGVSYW5nZVBpY2tlcjoge1xuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJ1xuICAgIH0sXG4gICAgRGF0ZVJhbmdlUGlja2VyX19ibG9jazoge1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJ1xuICAgIH0sXG4gICAgRGF0ZVJhbmdlUGlja2VyX3BpY2tlcjoge1xuICAgICAgekluZGV4OiB6SW5kZXggKyAxLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBjb2xvci5iYWNrZ3JvdW5kLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZSdcbiAgICB9LFxuICAgIERhdGVSYW5nZVBpY2tlcl9waWNrZXJfX3J0bDoge1xuICAgICAgZGlyZWN0aW9uOiAoMCwgX25vZmxpcFtcImRlZmF1bHRcIl0pKCdydGwnKVxuICAgIH0sXG4gICAgRGF0ZVJhbmdlUGlja2VyX3BpY2tlcl9fZGlyZWN0aW9uTGVmdDoge1xuICAgICAgbGVmdDogKDAsIF9ub2ZsaXBbXCJkZWZhdWx0XCJdKSgwKVxuICAgIH0sXG4gICAgRGF0ZVJhbmdlUGlja2VyX3BpY2tlcl9fZGlyZWN0aW9uUmlnaHQ6IHtcbiAgICAgIHJpZ2h0OiAoMCwgX25vZmxpcFtcImRlZmF1bHRcIl0pKDApXG4gICAgfSxcbiAgICBEYXRlUmFuZ2VQaWNrZXJfcGlja2VyX19wb3J0YWw6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMCwgMCwgMCwgMC4zKScsXG4gICAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICAgIHRvcDogMCxcbiAgICAgIGxlZnQ6ICgwLCBfbm9mbGlwW1wiZGVmYXVsdFwiXSkoMCksXG4gICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgIHdpZHRoOiAnMTAwJSdcbiAgICB9LFxuICAgIERhdGVSYW5nZVBpY2tlcl9waWNrZXJfX2Z1bGxTY3JlZW5Qb3J0YWw6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogY29sb3IuYmFja2dyb3VuZFxuICAgIH0sXG4gICAgRGF0ZVJhbmdlUGlja2VyX2Nsb3NlQnV0dG9uOiB7XG4gICAgICBiYWNrZ3JvdW5kOiAnbm9uZScsXG4gICAgICBib3JkZXI6IDAsXG4gICAgICBjb2xvcjogJ2luaGVyaXQnLFxuICAgICAgZm9udDogJ2luaGVyaXQnLFxuICAgICAgbGluZUhlaWdodDogJ25vcm1hbCcsXG4gICAgICBvdmVyZmxvdzogJ3Zpc2libGUnLFxuICAgICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHRvcDogMCxcbiAgICAgIHJpZ2h0OiAoMCwgX25vZmxpcFtcImRlZmF1bHRcIl0pKDApLFxuICAgICAgcGFkZGluZzogMTUsXG4gICAgICB6SW5kZXg6IHpJbmRleCArIDIsXG4gICAgICAnOmhvdmVyJzoge1xuICAgICAgICBjb2xvcjogXCJkYXJrZW4oXCIuY29uY2F0KGNvbG9yLmNvcmUuZ3JheUxpZ2h0ZXIsIFwiLCAxMCUpXCIpLFxuICAgICAgICB0ZXh0RGVjb3JhdGlvbjogJ25vbmUnXG4gICAgICB9LFxuICAgICAgJzpmb2N1cyc6IHtcbiAgICAgICAgY29sb3I6IFwiZGFya2VuKFwiLmNvbmNhdChjb2xvci5jb3JlLmdyYXlMaWdodGVyLCBcIiwgMTAlKVwiKSxcbiAgICAgICAgdGV4dERlY29yYXRpb246ICdub25lJ1xuICAgICAgfVxuICAgIH0sXG4gICAgRGF0ZVJhbmdlUGlja2VyX2Nsb3NlQnV0dG9uX3N2Zzoge1xuICAgICAgaGVpZ2h0OiAxNSxcbiAgICAgIHdpZHRoOiAxNSxcbiAgICAgIGZpbGw6IGNvbG9yLmNvcmUuZ3JheUxpZ2h0ZXJcbiAgICB9XG4gIH07XG59LCB7XG4gIHB1cmVDb21wb25lbnQ6IHR5cGVvZiBfcmVhY3RbXCJkZWZhdWx0XCJdLlB1cmVDb21wb25lbnQgIT09ICd1bmRlZmluZWQnXG59KShEYXRlUmFuZ2VQaWNrZXIpO1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9haXJibmJQcm9wVHlwZXMgPSByZXF1aXJlKCdhaXJibmItcHJvcC10eXBlcycpO1xuXG52YXIgX2NvbnNvbGlkYXRlZEV2ZW50cyA9IHJlcXVpcmUoJ2NvbnNvbGlkYXRlZC1ldmVudHMnKTtcblxudmFyIF9vYmplY3QgPSByZXF1aXJlKCdvYmplY3QudmFsdWVzJyk7XG5cbnZhciBfb2JqZWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29iamVjdCk7XG5cbnZhciBfZG9jdW1lbnQgPSByZXF1aXJlKCdkb2N1bWVudC5jb250YWlucycpO1xuXG52YXIgX2RvY3VtZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RvY3VtZW50KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBESVNQTEFZID0ge1xuICBCTE9DSzogJ2Jsb2NrJyxcbiAgRkxFWDogJ2ZsZXgnLFxuICBJTkxJTkU6ICdpbmxpbmUnLFxuICBJTkxJTkVfQkxPQ0s6ICdpbmxpbmUtYmxvY2snLFxuICBDT05URU5UUzogJ2NvbnRlbnRzJ1xufTtcblxudmFyIHByb3BUeXBlcyA9ICgwLCBfYWlyYm5iUHJvcFR5cGVzLmZvcmJpZEV4dHJhUHJvcHMpKHtcbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMyWydkZWZhdWx0J10ubm9kZS5pc1JlcXVpcmVkLFxuICBvbk91dHNpZGVDbGljazogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLmlzUmVxdWlyZWQsXG4gIGRpc2FibGVkOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmJvb2wsXG4gIHVzZUNhcHR1cmU6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCxcbiAgZGlzcGxheTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5vbmVPZigoMCwgX29iamVjdDJbJ2RlZmF1bHQnXSkoRElTUExBWSkpXG59KTtcblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgZGlzYWJsZWQ6IGZhbHNlLFxuXG4gIC8vIGB1c2VDYXB0dXJlYCBpcyBzZXQgdG8gdHJ1ZSBieSBkZWZhdWx0IHNvIHRoYXQgYSBgc3RvcFByb3BhZ2F0aW9uYCBpbiB0aGVcbiAgLy8gY2hpbGRyZW4gd2lsbCBub3QgcHJldmVudCBhbGwgb3V0c2lkZSBjbGljayBoYW5kbGVycyBmcm9tIGZpcmluZyAtIG1hamFcbiAgdXNlQ2FwdHVyZTogdHJ1ZSxcbiAgZGlzcGxheTogRElTUExBWS5CTE9DS1xufTtcblxudmFyIE91dHNpZGVDbGlja0hhbmRsZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoT3V0c2lkZUNsaWNrSGFuZGxlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gT3V0c2lkZUNsaWNrSGFuZGxlcigpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBPdXRzaWRlQ2xpY2tIYW5kbGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gT3V0c2lkZUNsaWNrSGFuZGxlci5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKE91dHNpZGVDbGlja0hhbmRsZXIpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKTtcblxuICAgIF90aGlzLm9uTW91c2VEb3duID0gX3RoaXMub25Nb3VzZURvd24uYmluZChfdGhpcyk7XG4gICAgX3RoaXMub25Nb3VzZVVwID0gX3RoaXMub25Nb3VzZVVwLmJpbmQoX3RoaXMpO1xuICAgIF90aGlzLnNldENoaWxkTm9kZVJlZiA9IF90aGlzLnNldENoaWxkTm9kZVJlZi5iaW5kKF90aGlzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoT3V0c2lkZUNsaWNrSGFuZGxlciwgW3tcbiAgICBrZXk6ICdjb21wb25lbnREaWRNb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICAgIGRpc2FibGVkID0gX3Byb3BzLmRpc2FibGVkLFxuICAgICAgICAgICAgdXNlQ2FwdHVyZSA9IF9wcm9wcy51c2VDYXB0dXJlO1xuXG5cbiAgICAgICAgaWYgKCFkaXNhYmxlZCkgdGhpcy5hZGRNb3VzZURvd25FdmVudExpc3RlbmVyKHVzZUNhcHR1cmUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29tcG9uZW50RGlkTW91bnQ7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnREaWRVcGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoX3JlZjIpIHtcbiAgICAgICAgdmFyIHByZXZEaXNhYmxlZCA9IF9yZWYyLmRpc2FibGVkO1xuICAgICAgICB2YXIgX3Byb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgICBkaXNhYmxlZCA9IF9wcm9wczIuZGlzYWJsZWQsXG4gICAgICAgICAgICB1c2VDYXB0dXJlID0gX3Byb3BzMi51c2VDYXB0dXJlO1xuXG4gICAgICAgIGlmIChwcmV2RGlzYWJsZWQgIT09IGRpc2FibGVkKSB7XG4gICAgICAgICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXJzKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYWRkTW91c2VEb3duRXZlbnRMaXN0ZW5lcih1c2VDYXB0dXJlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbXBvbmVudERpZFVwZGF0ZTtcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxVbm1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbXBvbmVudFdpbGxVbm1vdW50O1xuICAgIH0oKVxuXG4gICAgLy8gVXNlIG1vdXNlZG93bi9tb3VzZXVwIHRvIGVuZm9yY2UgdGhhdCBjbGlja3MgcmVtYWluIG91dHNpZGUgdGhlIHJvb3Qnc1xuICAgIC8vIGRlc2NlbmRhbnQgdHJlZSwgZXZlbiB3aGVuIGRyYWdnZWQuIFRoaXMgc2hvdWxkIGFsc28gZ2V0IHRyaWdnZXJlZCBvblxuICAgIC8vIHRvdWNoIGRldmljZXMuXG5cbiAgfSwge1xuICAgIGtleTogJ29uTW91c2VEb3duJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gb25Nb3VzZURvd24oZSkge1xuICAgICAgICB2YXIgdXNlQ2FwdHVyZSA9IHRoaXMucHJvcHMudXNlQ2FwdHVyZTtcblxuXG4gICAgICAgIHZhciBpc0Rlc2NlbmRhbnRPZlJvb3QgPSB0aGlzLmNoaWxkTm9kZSAmJiAoMCwgX2RvY3VtZW50MlsnZGVmYXVsdCddKSh0aGlzLmNoaWxkTm9kZSwgZS50YXJnZXQpO1xuICAgICAgICBpZiAoIWlzRGVzY2VuZGFudE9mUm9vdCkge1xuICAgICAgICAgIGlmICh0aGlzLnJlbW92ZU1vdXNlVXApIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlTW91c2VVcCgpO1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVNb3VzZVVwID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5yZW1vdmVNb3VzZVVwID0gKDAsIF9jb25zb2xpZGF0ZWRFdmVudHMuYWRkRXZlbnRMaXN0ZW5lcikoZG9jdW1lbnQsICdtb3VzZXVwJywgdGhpcy5vbk1vdXNlVXAsIHsgY2FwdHVyZTogdXNlQ2FwdHVyZSB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gb25Nb3VzZURvd247XG4gICAgfSgpXG5cbiAgICAvLyBVc2UgbW91c2Vkb3duL21vdXNldXAgdG8gZW5mb3JjZSB0aGF0IGNsaWNrcyByZW1haW4gb3V0c2lkZSB0aGUgcm9vdCdzXG4gICAgLy8gZGVzY2VuZGFudCB0cmVlLCBldmVuIHdoZW4gZHJhZ2dlZC4gVGhpcyBzaG91bGQgYWxzbyBnZXQgdHJpZ2dlcmVkIG9uXG4gICAgLy8gdG91Y2ggZGV2aWNlcy5cblxuICB9LCB7XG4gICAga2V5OiAnb25Nb3VzZVVwJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gb25Nb3VzZVVwKGUpIHtcbiAgICAgICAgdmFyIG9uT3V0c2lkZUNsaWNrID0gdGhpcy5wcm9wcy5vbk91dHNpZGVDbGljaztcblxuXG4gICAgICAgIHZhciBpc0Rlc2NlbmRhbnRPZlJvb3QgPSB0aGlzLmNoaWxkTm9kZSAmJiAoMCwgX2RvY3VtZW50MlsnZGVmYXVsdCddKSh0aGlzLmNoaWxkTm9kZSwgZS50YXJnZXQpO1xuICAgICAgICBpZiAodGhpcy5yZW1vdmVNb3VzZVVwKSB7XG4gICAgICAgICAgdGhpcy5yZW1vdmVNb3VzZVVwKCk7XG4gICAgICAgICAgdGhpcy5yZW1vdmVNb3VzZVVwID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaXNEZXNjZW5kYW50T2ZSb290KSB7XG4gICAgICAgICAgb25PdXRzaWRlQ2xpY2soZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9uTW91c2VVcDtcbiAgICB9KClcbiAgfSwge1xuICAgIGtleTogJ3NldENoaWxkTm9kZVJlZicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIHNldENoaWxkTm9kZVJlZihyZWYpIHtcbiAgICAgICAgdGhpcy5jaGlsZE5vZGUgPSByZWY7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzZXRDaGlsZE5vZGVSZWY7XG4gICAgfSgpXG4gIH0sIHtcbiAgICBrZXk6ICdhZGRNb3VzZURvd25FdmVudExpc3RlbmVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gYWRkTW91c2VEb3duRXZlbnRMaXN0ZW5lcih1c2VDYXB0dXJlKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlTW91c2VEb3duID0gKDAsIF9jb25zb2xpZGF0ZWRFdmVudHMuYWRkRXZlbnRMaXN0ZW5lcikoZG9jdW1lbnQsICdtb3VzZWRvd24nLCB0aGlzLm9uTW91c2VEb3duLCB7IGNhcHR1cmU6IHVzZUNhcHR1cmUgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhZGRNb3VzZURvd25FdmVudExpc3RlbmVyO1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAncmVtb3ZlRXZlbnRMaXN0ZW5lcnMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVycygpIHtcbiAgICAgICAgaWYgKHRoaXMucmVtb3ZlTW91c2VEb3duKSB0aGlzLnJlbW92ZU1vdXNlRG93bigpO1xuICAgICAgICBpZiAodGhpcy5yZW1vdmVNb3VzZVVwKSB0aGlzLnJlbW92ZU1vdXNlVXAoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlbW92ZUV2ZW50TGlzdGVuZXJzO1xuICAgIH0oKVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICB2YXIgX3Byb3BzMyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgICBjaGlsZHJlbiA9IF9wcm9wczMuY2hpbGRyZW4sXG4gICAgICAgICAgICBkaXNwbGF5ID0gX3Byb3BzMy5kaXNwbGF5O1xuXG5cbiAgICAgICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHJlZjogdGhpcy5zZXRDaGlsZE5vZGVSZWYsXG4gICAgICAgICAgICBzdHlsZTogZGlzcGxheSAhPT0gRElTUExBWS5CTE9DSyAmJiAoMCwgX29iamVjdDJbJ2RlZmF1bHQnXSkoRElTUExBWSkuaW5jbHVkZXMoZGlzcGxheSkgPyB7IGRpc3BsYXk6IGRpc3BsYXkgfSA6IHVuZGVmaW5lZFxuICAgICAgICAgIH0sXG4gICAgICAgICAgY2hpbGRyZW5cbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlbmRlcjtcbiAgICB9KClcbiAgfV0pO1xuXG4gIHJldHVybiBPdXRzaWRlQ2xpY2tIYW5kbGVyO1xufShfcmVhY3QyWydkZWZhdWx0J10uQ29tcG9uZW50KTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gT3V0c2lkZUNsaWNrSGFuZGxlcjtcblxuXG5PdXRzaWRlQ2xpY2tIYW5kbGVyLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbk91dHNpZGVDbGlja0hhbmRsZXIuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmluZSA9IHJlcXVpcmUoJ2RlZmluZS1wcm9wZXJ0aWVzJyk7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcbnZhciBnZXRQb2x5ZmlsbCA9IHJlcXVpcmUoJy4vcG9seWZpbGwnKTtcbnZhciBwb2x5ZmlsbCA9IGdldFBvbHlmaWxsKCk7XG52YXIgc2hpbSA9IHJlcXVpcmUoJy4vc2hpbScpO1xuXG52YXIgYm91bmRDb250YWlucyA9IGZ1bmN0aW9uIGNvbnRhaW5zKG5vZGUsIG90aGVyKSB7XG5cdHJldHVybiBwb2x5ZmlsbC5hcHBseShub2RlLCBbb3RoZXJdKTtcbn07XG5cbmRlZmluZShib3VuZENvbnRhaW5zLCB7XG5cdGdldFBvbHlmaWxsOiBnZXRQb2x5ZmlsbCxcblx0aW1wbGVtZW50YXRpb246IGltcGxlbWVudGF0aW9uLFxuXHRzaGltOiBzaGltXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBib3VuZENvbnRhaW5zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmaW5lID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciBnZXRQb2x5ZmlsbCA9IHJlcXVpcmUoJy4vcG9seWZpbGwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaGltQ29udGFpbnMoKSB7XG5cdHZhciBwb2x5ZmlsbCA9IGdldFBvbHlmaWxsKCk7XG5cdGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0ZGVmaW5lKFxuXHRcdFx0ZG9jdW1lbnQsXG5cdFx0XHR7IGNvbnRhaW5zOiBwb2x5ZmlsbCB9LFxuXHRcdFx0eyBjb250YWluczogZnVuY3Rpb24gKCkgeyByZXR1cm4gZG9jdW1lbnQuY29udGFpbnMgIT09IHBvbHlmaWxsOyB9IH1cblx0XHQpO1xuXHRcdGlmICh0eXBlb2YgRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdGRlZmluZShcblx0XHRcdFx0RWxlbWVudC5wcm90b3R5cGUsXG5cdFx0XHRcdHsgY29udGFpbnM6IHBvbHlmaWxsIH0sXG5cdFx0XHRcdHsgY29udGFpbnM6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEVsZW1lbnQucHJvdG90eXBlLmNvbnRhaW5zICE9PSBwb2x5ZmlsbDsgfSB9XG5cdFx0XHQpO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gcG9seWZpbGw7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIG5vdyA9IHJlcXVpcmUoJy4vbm93JyksXG4gICAgdG9OdW1iZXIgPSByZXF1aXJlKCcuL3RvTnVtYmVyJyk7XG5cbi8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVNYXggPSBNYXRoLm1heCxcbiAgICBuYXRpdmVNaW4gPSBNYXRoLm1pbjtcblxuLyoqXG4gKiBDcmVhdGVzIGEgZGVib3VuY2VkIGZ1bmN0aW9uIHRoYXQgZGVsYXlzIGludm9raW5nIGBmdW5jYCB1bnRpbCBhZnRlciBgd2FpdGBcbiAqIG1pbGxpc2Vjb25kcyBoYXZlIGVsYXBzZWQgc2luY2UgdGhlIGxhc3QgdGltZSB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHdhc1xuICogaW52b2tlZC4gVGhlIGRlYm91bmNlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGAgbWV0aG9kIHRvIGNhbmNlbFxuICogZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG8gaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uXG4gKiBQcm92aWRlIGBvcHRpb25zYCB0byBpbmRpY2F0ZSB3aGV0aGVyIGBmdW5jYCBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGVcbiAqIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YCB0aW1lb3V0LiBUaGUgYGZ1bmNgIGlzIGludm9rZWRcbiAqIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnRcbiAqIGNhbGxzIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gcmV0dXJuIHRoZSByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgXG4gKiBpbnZvY2F0aW9uLlxuICpcbiAqICoqTm90ZToqKiBJZiBgbGVhZGluZ2AgYW5kIGB0cmFpbGluZ2Agb3B0aW9ucyBhcmUgYHRydWVgLCBgZnVuY2AgaXNcbiAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uXG4gKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gKlxuICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG4gKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gKlxuICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG4gKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLmRlYm91bmNlYCBhbmQgYF8udGhyb3R0bGVgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVib3VuY2UuXG4gKiBAcGFyYW0ge251bWJlcn0gW3dhaXQ9MF0gVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz1mYWxzZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWF4V2FpdF1cbiAqICBUaGUgbWF4aW11bSB0aW1lIGBmdW5jYCBpcyBhbGxvd2VkIHRvIGJlIGRlbGF5ZWQgYmVmb3JlIGl0J3MgaW52b2tlZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZGVib3VuY2VkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiAvLyBBdm9pZCBjb3N0bHkgY2FsY3VsYXRpb25zIHdoaWxlIHRoZSB3aW5kb3cgc2l6ZSBpcyBpbiBmbHV4LlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3Jlc2l6ZScsIF8uZGVib3VuY2UoY2FsY3VsYXRlTGF5b3V0LCAxNTApKTtcbiAqXG4gKiAvLyBJbnZva2UgYHNlbmRNYWlsYCB3aGVuIGNsaWNrZWQsIGRlYm91bmNpbmcgc3Vic2VxdWVudCBjYWxscy5cbiAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCBfLmRlYm91bmNlKHNlbmRNYWlsLCAzMDAsIHtcbiAqICAgJ2xlYWRpbmcnOiB0cnVlLFxuICogICAndHJhaWxpbmcnOiBmYWxzZVxuICogfSkpO1xuICpcbiAqIC8vIEVuc3VyZSBgYmF0Y2hMb2dgIGlzIGludm9rZWQgb25jZSBhZnRlciAxIHNlY29uZCBvZiBkZWJvdW5jZWQgY2FsbHMuXG4gKiB2YXIgZGVib3VuY2VkID0gXy5kZWJvdW5jZShiYXRjaExvZywgMjUwLCB7ICdtYXhXYWl0JzogMTAwMCB9KTtcbiAqIHZhciBzb3VyY2UgPSBuZXcgRXZlbnRTb3VyY2UoJy9zdHJlYW0nKTtcbiAqIGpRdWVyeShzb3VyY2UpLm9uKCdtZXNzYWdlJywgZGVib3VuY2VkKTtcbiAqXG4gKiAvLyBDYW5jZWwgdGhlIHRyYWlsaW5nIGRlYm91bmNlZCBpbnZvY2F0aW9uLlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgZGVib3VuY2VkLmNhbmNlbCk7XG4gKi9cbmZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgdmFyIGxhc3RBcmdzLFxuICAgICAgbGFzdFRoaXMsXG4gICAgICBtYXhXYWl0LFxuICAgICAgcmVzdWx0LFxuICAgICAgdGltZXJJZCxcbiAgICAgIGxhc3RDYWxsVGltZSxcbiAgICAgIGxhc3RJbnZva2VUaW1lID0gMCxcbiAgICAgIGxlYWRpbmcgPSBmYWxzZSxcbiAgICAgIG1heGluZyA9IGZhbHNlLFxuICAgICAgdHJhaWxpbmcgPSB0cnVlO1xuXG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICB9XG4gIHdhaXQgPSB0b051bWJlcih3YWl0KSB8fCAwO1xuICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICBsZWFkaW5nID0gISFvcHRpb25zLmxlYWRpbmc7XG4gICAgbWF4aW5nID0gJ21heFdhaXQnIGluIG9wdGlvbnM7XG4gICAgbWF4V2FpdCA9IG1heGluZyA/IG5hdGl2ZU1heCh0b051bWJlcihvcHRpb25zLm1heFdhaXQpIHx8IDAsIHdhaXQpIDogbWF4V2FpdDtcbiAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlRnVuYyh0aW1lKSB7XG4gICAgdmFyIGFyZ3MgPSBsYXN0QXJncyxcbiAgICAgICAgdGhpc0FyZyA9IGxhc3RUaGlzO1xuXG4gICAgbGFzdEFyZ3MgPSBsYXN0VGhpcyA9IHVuZGVmaW5lZDtcbiAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gbGVhZGluZ0VkZ2UodGltZSkge1xuICAgIC8vIFJlc2V0IGFueSBgbWF4V2FpdGAgdGltZXIuXG4gICAgbGFzdEludm9rZVRpbWUgPSB0aW1lO1xuICAgIC8vIFN0YXJ0IHRoZSB0aW1lciBmb3IgdGhlIHRyYWlsaW5nIGVkZ2UuXG4gICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAvLyBJbnZva2UgdGhlIGxlYWRpbmcgZWRnZS5cbiAgICByZXR1cm4gbGVhZGluZyA/IGludm9rZUZ1bmModGltZSkgOiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiByZW1haW5pbmdXYWl0KHRpbWUpIHtcbiAgICB2YXIgdGltZVNpbmNlTGFzdENhbGwgPSB0aW1lIC0gbGFzdENhbGxUaW1lLFxuICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lLFxuICAgICAgICB0aW1lV2FpdGluZyA9IHdhaXQgLSB0aW1lU2luY2VMYXN0Q2FsbDtcblxuICAgIHJldHVybiBtYXhpbmdcbiAgICAgID8gbmF0aXZlTWluKHRpbWVXYWl0aW5nLCBtYXhXYWl0IC0gdGltZVNpbmNlTGFzdEludm9rZSlcbiAgICAgIDogdGltZVdhaXRpbmc7XG4gIH1cblxuICBmdW5jdGlvbiBzaG91bGRJbnZva2UodGltZSkge1xuICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUsXG4gICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWU7XG5cbiAgICAvLyBFaXRoZXIgdGhpcyBpcyB0aGUgZmlyc3QgY2FsbCwgYWN0aXZpdHkgaGFzIHN0b3BwZWQgYW5kIHdlJ3JlIGF0IHRoZVxuICAgIC8vIHRyYWlsaW5nIGVkZ2UsIHRoZSBzeXN0ZW0gdGltZSBoYXMgZ29uZSBiYWNrd2FyZHMgYW5kIHdlJ3JlIHRyZWF0aW5nXG4gICAgLy8gaXQgYXMgdGhlIHRyYWlsaW5nIGVkZ2UsIG9yIHdlJ3ZlIGhpdCB0aGUgYG1heFdhaXRgIGxpbWl0LlxuICAgIHJldHVybiAobGFzdENhbGxUaW1lID09PSB1bmRlZmluZWQgfHwgKHRpbWVTaW5jZUxhc3RDYWxsID49IHdhaXQpIHx8XG4gICAgICAodGltZVNpbmNlTGFzdENhbGwgPCAwKSB8fCAobWF4aW5nICYmIHRpbWVTaW5jZUxhc3RJbnZva2UgPj0gbWF4V2FpdCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gdGltZXJFeHBpcmVkKCkge1xuICAgIHZhciB0aW1lID0gbm93KCk7XG4gICAgaWYgKHNob3VsZEludm9rZSh0aW1lKSkge1xuICAgICAgcmV0dXJuIHRyYWlsaW5nRWRnZSh0aW1lKTtcbiAgICB9XG4gICAgLy8gUmVzdGFydCB0aGUgdGltZXIuXG4gICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCByZW1haW5pbmdXYWl0KHRpbWUpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYWlsaW5nRWRnZSh0aW1lKSB7XG4gICAgdGltZXJJZCA9IHVuZGVmaW5lZDtcblxuICAgIC8vIE9ubHkgaW52b2tlIGlmIHdlIGhhdmUgYGxhc3RBcmdzYCB3aGljaCBtZWFucyBgZnVuY2AgaGFzIGJlZW5cbiAgICAvLyBkZWJvdW5jZWQgYXQgbGVhc3Qgb25jZS5cbiAgICBpZiAodHJhaWxpbmcgJiYgbGFzdEFyZ3MpIHtcbiAgICAgIHJldHVybiBpbnZva2VGdW5jKHRpbWUpO1xuICAgIH1cbiAgICBsYXN0QXJncyA9IGxhc3RUaGlzID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gICAgaWYgKHRpbWVySWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgIH1cbiAgICBsYXN0SW52b2tlVGltZSA9IDA7XG4gICAgbGFzdEFyZ3MgPSBsYXN0Q2FsbFRpbWUgPSBsYXN0VGhpcyA9IHRpbWVySWQgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICByZXR1cm4gdGltZXJJZCA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogdHJhaWxpbmdFZGdlKG5vdygpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlYm91bmNlZCgpIHtcbiAgICB2YXIgdGltZSA9IG5vdygpLFxuICAgICAgICBpc0ludm9raW5nID0gc2hvdWxkSW52b2tlKHRpbWUpO1xuXG4gICAgbGFzdEFyZ3MgPSBhcmd1bWVudHM7XG4gICAgbGFzdFRoaXMgPSB0aGlzO1xuICAgIGxhc3RDYWxsVGltZSA9IHRpbWU7XG5cbiAgICBpZiAoaXNJbnZva2luZykge1xuICAgICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gbGVhZGluZ0VkZ2UobGFzdENhbGxUaW1lKTtcbiAgICAgIH1cbiAgICAgIGlmIChtYXhpbmcpIHtcbiAgICAgICAgLy8gSGFuZGxlIGludm9jYXRpb25zIGluIGEgdGlnaHQgbG9vcC5cbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICByZXR1cm4gaW52b2tlRnVuYyhsYXN0Q2FsbFRpbWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGltZXJJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGRlYm91bmNlZC5jYW5jZWwgPSBjYW5jZWw7XG4gIGRlYm91bmNlZC5mbHVzaCA9IGZsdXNoO1xuICByZXR1cm4gZGVib3VuY2VkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRlYm91bmNlO1xuIiwidmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKlxuICogR2V0cyB0aGUgdGltZXN0YW1wIG9mIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRoYXQgaGF2ZSBlbGFwc2VkIHNpbmNlXG4gKiB0aGUgVW5peCBlcG9jaCAoMSBKYW51YXJ5IDE5NzAgMDA6MDA6MDAgVVRDKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDIuNC4wXG4gKiBAY2F0ZWdvcnkgRGF0ZVxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdGltZXN0YW1wLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmRlZmVyKGZ1bmN0aW9uKHN0YW1wKSB7XG4gKiAgIGNvbnNvbGUubG9nKF8ubm93KCkgLSBzdGFtcCk7XG4gKiB9LCBfLm5vdygpKTtcbiAqIC8vID0+IExvZ3MgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaXQgdG9vayBmb3IgdGhlIGRlZmVycmVkIGludm9jYXRpb24uXG4gKi9cbnZhciBub3cgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHJvb3QuRGF0ZS5ub3coKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gbm93O1xuIiwiLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxubW9kdWxlLmV4cG9ydHMgPSBmcmVlR2xvYmFsO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIGlzU3ltYm9sID0gcmVxdWlyZSgnLi9pc1N5bWJvbCcpO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBOQU4gPSAwIC8gMDtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZS4gKi9cbnZhciByZVRyaW0gPSAvXlxccyt8XFxzKyQvZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGJhZCBzaWduZWQgaGV4YWRlY2ltYWwgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzQmFkSGV4ID0gL15bLStdMHhbMC05YS1mXSskL2k7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBiaW5hcnkgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzQmluYXJ5ID0gL14wYlswMV0rJC9pO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb2N0YWwgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzT2N0YWwgPSAvXjBvWzAtN10rJC9pO1xuXG4vKiogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgd2l0aG91dCBhIGRlcGVuZGVuY3kgb24gYHJvb3RgLiAqL1xudmFyIGZyZWVQYXJzZUludCA9IHBhcnNlSW50O1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBudW1iZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBudW1iZXIuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9OdW1iZXIoMy4yKTtcbiAqIC8vID0+IDMuMlxuICpcbiAqIF8udG9OdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiA1ZS0zMjRcbiAqXG4gKiBfLnRvTnVtYmVyKEluZmluaXR5KTtcbiAqIC8vID0+IEluZmluaXR5XG4gKlxuICogXy50b051bWJlcignMy4yJyk7XG4gKiAvLyA9PiAzLjJcbiAqL1xuZnVuY3Rpb24gdG9OdW1iZXIodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIE5BTjtcbiAgfVxuICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgdmFyIG90aGVyID0gdHlwZW9mIHZhbHVlLnZhbHVlT2YgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnZhbHVlT2YoKSA6IHZhbHVlO1xuICAgIHZhbHVlID0gaXNPYmplY3Qob3RoZXIpID8gKG90aGVyICsgJycpIDogb3RoZXI7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogK3ZhbHVlO1xuICB9XG4gIHZhbHVlID0gdmFsdWUucmVwbGFjZShyZVRyaW0sICcnKTtcbiAgdmFyIGlzQmluYXJ5ID0gcmVJc0JpbmFyeS50ZXN0KHZhbHVlKTtcbiAgcmV0dXJuIChpc0JpbmFyeSB8fCByZUlzT2N0YWwudGVzdCh2YWx1ZSkpXG4gICAgPyBmcmVlUGFyc2VJbnQodmFsdWUuc2xpY2UoMiksIGlzQmluYXJ5ID8gMiA6IDgpXG4gICAgOiAocmVJc0JhZEhleC50ZXN0KHZhbHVlKSA/IE5BTiA6ICt2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9OdW1iZXI7XG4iLCJ2YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTeW1ib2xgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzeW1ib2wsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHN5bWJvbFRhZyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNTeW1ib2w7XG4iLCJ2YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyksXG4gICAgZ2V0UmF3VGFnID0gcmVxdWlyZSgnLi9fZ2V0UmF3VGFnJyksXG4gICAgb2JqZWN0VG9TdHJpbmcgPSByZXF1aXJlKCcuL19vYmplY3RUb1N0cmluZycpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJyxcbiAgICB1bmRlZmluZWRUYWcgPSAnW29iamVjdCBVbmRlZmluZWRdJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldFRhZ2Agd2l0aG91dCBmYWxsYmFja3MgZm9yIGJ1Z2d5IGVudmlyb25tZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0VGFnKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWRUYWcgOiBudWxsVGFnO1xuICB9XG4gIHJldHVybiAoc3ltVG9TdHJpbmdUYWcgJiYgc3ltVG9TdHJpbmdUYWcgaW4gT2JqZWN0KHZhbHVlKSlcbiAgICA/IGdldFJhd1RhZyh2YWx1ZSlcbiAgICA6IG9iamVjdFRvU3RyaW5nKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlR2V0VGFnO1xuIiwidmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcbiAgICAgIHRhZyA9IHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcblxuICB0cnkge1xuICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDtcbiAgICB2YXIgdW5tYXNrZWQgPSB0cnVlO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgaWYgKHVubWFza2VkKSB7XG4gICAgaWYgKGlzT3duKSB7XG4gICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0UmF3VGFnO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyB1c2luZyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gb2JqZWN0VG9TdHJpbmc7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc09iamVjdExpa2U7XG4iLCJmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2FycmF5V2l0aEhvbGVzOyIsImZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHtcbiAgaWYgKCEoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcnIpID09PSBcIltvYmplY3QgQXJndW1lbnRzXVwiKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBfYXJyID0gW107XG4gIHZhciBfbiA9IHRydWU7XG4gIHZhciBfZCA9IGZhbHNlO1xuICB2YXIgX2UgPSB1bmRlZmluZWQ7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7XG4gICAgICBfYXJyLnB1c2goX3MudmFsdWUpO1xuXG4gICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfZCA9IHRydWU7XG4gICAgX2UgPSBlcnI7XG4gIH0gZmluYWxseSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKF9kKSB0aHJvdyBfZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gX2Fycjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaXRlcmFibGVUb0FycmF5TGltaXQ7IiwiZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX25vbkl0ZXJhYmxlUmVzdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGlzUHJldmlvdXNEYXk7XG5cbnZhciBfbW9tZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwibW9tZW50XCIpKTtcblxudmFyIF9pc1NhbWVEYXkgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2lzU2FtZURheVwiKSk7XG5cbmZ1bmN0aW9uIGlzUHJldmlvdXNEYXkoYSwgYikge1xuICBpZiAoIV9tb21lbnRbXCJkZWZhdWx0XCJdLmlzTW9tZW50KGEpIHx8ICFfbW9tZW50W1wiZGVmYXVsdFwiXS5pc01vbWVudChiKSkgcmV0dXJuIGZhbHNlO1xuICB2YXIgZGF5QmVmb3JlID0gKDAsIF9tb21lbnRbXCJkZWZhdWx0XCJdKShhKS5zdWJ0cmFjdCgxLCAnZGF5Jyk7XG4gIHJldHVybiAoMCwgX2lzU2FtZURheVtcImRlZmF1bHRcIl0pKGRheUJlZm9yZSwgYik7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGdldFNlbGVjdGVkRGF0ZU9mZnNldDtcblxudmFyIGRlZmF1bHRNb2RpZmllciA9IGZ1bmN0aW9uIGRlZmF1bHRNb2RpZmllcihkYXkpIHtcbiAgcmV0dXJuIGRheTtcbn07XG5cbmZ1bmN0aW9uIGdldFNlbGVjdGVkRGF0ZU9mZnNldChmbiwgZGF5KSB7XG4gIHZhciBtb2RpZmllciA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZGVmYXVsdE1vZGlmaWVyO1xuICBpZiAoIWZuKSByZXR1cm4gZGF5O1xuICByZXR1cm4gbW9kaWZpZXIoZm4oZGF5LmNsb25lKCkpKTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gZ2V0UHJldmlvdXNNb250aE1lbW9MYXN0O1xudmFyIGdldFByZXZpb3VzTW9udGhNZW1vS2V5O1xudmFyIGdldFByZXZpb3VzTW9udGhNZW1vVmFsdWU7XG5cbmZ1bmN0aW9uIGdldFByZXZpb3VzTW9udGhNZW1vTGFzdChtb250aCkge1xuICBpZiAobW9udGggIT09IGdldFByZXZpb3VzTW9udGhNZW1vS2V5KSB7XG4gICAgZ2V0UHJldmlvdXNNb250aE1lbW9LZXkgPSBtb250aDtcbiAgICBnZXRQcmV2aW91c01vbnRoTWVtb1ZhbHVlID0gbW9udGguY2xvbmUoKS5zdWJ0cmFjdCgxLCAnbW9udGgnKTtcbiAgfVxuXG4gIHJldHVybiBnZXRQcmV2aW91c01vbnRoTWVtb1ZhbHVlO1xufSIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX2VuenltZVNoYWxsb3dFcXVhbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImVuenltZS1zaGFsbG93LWVxdWFsXCIpKTtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfdG9Db25zdW1hYmxlQXJyYXkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy90b0NvbnN1bWFibGVBcnJheVwiKSk7XG5cbnZhciBfaW5oZXJpdHNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2FpcmJuYlByb3BUeXBlcyA9IHJlcXVpcmUoXCJhaXJibmItcHJvcC10eXBlc1wiKTtcblxudmFyIF9yZWFjdFdpdGhTdHlsZXMgPSByZXF1aXJlKFwicmVhY3Qtd2l0aC1zdHlsZXNcIik7XG5cbnZhciBfZGVmYXVsdFBocmFzZXMgPSByZXF1aXJlKFwiLi4vZGVmYXVsdFBocmFzZXNcIik7XG5cbnZhciBfZ2V0UGhyYXNlUHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvZ2V0UGhyYXNlUHJvcFR5cGVzXCIpKTtcblxudmFyIF9ub2ZsaXAgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9ub2ZsaXBcIikpO1xuXG52YXIgX0xlZnRBcnJvdyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vTGVmdEFycm93XCIpKTtcblxudmFyIF9SaWdodEFycm93ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9SaWdodEFycm93XCIpKTtcblxudmFyIF9DaGV2cm9uVXAgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0NoZXZyb25VcFwiKSk7XG5cbnZhciBfQ2hldnJvbkRvd24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0NoZXZyb25Eb3duXCIpKTtcblxudmFyIF9OYXZQb3NpdGlvblNoYXBlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc2hhcGVzL05hdlBvc2l0aW9uU2hhcGVcIikpO1xuXG52YXIgX1Njcm9sbGFibGVPcmllbnRhdGlvblNoYXBlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc2hhcGVzL1Njcm9sbGFibGVPcmllbnRhdGlvblNoYXBlXCIpKTtcblxudmFyIF9jb25zdGFudHMgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzXCIpO1xuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbnZhciBwcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX2FpcmJuYlByb3BUeXBlcy5mb3JiaWRFeHRyYVByb3BzKShfb2JqZWN0U3ByZWFkKHt9LCBfcmVhY3RXaXRoU3R5bGVzLndpdGhTdHlsZXNQcm9wVHlwZXMsIHtcbiAgZGlzYWJsZVByZXY6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIGRpc2FibGVOZXh0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBpbmxpbmVTdHlsZXM6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm9iamVjdCxcbiAgaXNSVEw6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIG5hdlBvc2l0aW9uOiBfTmF2UG9zaXRpb25TaGFwZVtcImRlZmF1bHRcIl0sXG4gIG5hdlByZXY6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm5vZGUsXG4gIG5hdk5leHQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm5vZGUsXG4gIG9yaWVudGF0aW9uOiBfU2Nyb2xsYWJsZU9yaWVudGF0aW9uU2hhcGVbXCJkZWZhdWx0XCJdLFxuICBvblByZXZNb250aENsaWNrOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBvbk5leHRNb250aENsaWNrOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICAvLyBpbnRlcm5hdGlvbmFsaXphdGlvblxuICBwaHJhc2VzOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zaGFwZSgoMCwgX2dldFBocmFzZVByb3BUeXBlc1tcImRlZmF1bHRcIl0pKF9kZWZhdWx0UGhyYXNlcy5EYXlQaWNrZXJOYXZpZ2F0aW9uUGhyYXNlcykpLFxuICByZW5kZXJOYXZQcmV2QnV0dG9uOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICByZW5kZXJOYXZOZXh0QnV0dG9uOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBzaG93TmF2UHJldkJ1dHRvbjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgc2hvd05hdk5leHRCdXR0b246IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2xcbn0pKSA6IHt9O1xudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgZGlzYWJsZVByZXY6IGZhbHNlLFxuICBkaXNhYmxlTmV4dDogZmFsc2UsXG4gIGlubGluZVN0eWxlczogbnVsbCxcbiAgaXNSVEw6IGZhbHNlLFxuICBuYXZQb3NpdGlvbjogX2NvbnN0YW50cy5OQVZfUE9TSVRJT05fVE9QLFxuICBuYXZQcmV2OiBudWxsLFxuICBuYXZOZXh0OiBudWxsLFxuICBvcmllbnRhdGlvbjogX2NvbnN0YW50cy5IT1JJWk9OVEFMX09SSUVOVEFUSU9OLFxuICBvblByZXZNb250aENsaWNrOiBmdW5jdGlvbiBvblByZXZNb250aENsaWNrKCkge30sXG4gIG9uTmV4dE1vbnRoQ2xpY2s6IGZ1bmN0aW9uIG9uTmV4dE1vbnRoQ2xpY2soKSB7fSxcbiAgLy8gaW50ZXJuYXRpb25hbGl6YXRpb25cbiAgcGhyYXNlczogX2RlZmF1bHRQaHJhc2VzLkRheVBpY2tlck5hdmlnYXRpb25QaHJhc2VzLFxuICByZW5kZXJOYXZQcmV2QnV0dG9uOiBudWxsLFxuICByZW5kZXJOYXZOZXh0QnV0dG9uOiBudWxsLFxuICBzaG93TmF2UHJldkJ1dHRvbjogdHJ1ZSxcbiAgc2hvd05hdk5leHRCdXR0b246IHRydWVcbn07XG5cbnZhciBEYXlQaWNrZXJOYXZpZ2F0aW9uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfcmVmKSB7XG4gICgwLCBfaW5oZXJpdHNMb29zZTJbXCJkZWZhdWx0XCJdKShEYXlQaWNrZXJOYXZpZ2F0aW9uLCBfcmVmKTtcblxuICBmdW5jdGlvbiBEYXlQaWNrZXJOYXZpZ2F0aW9uKCkge1xuICAgIHJldHVybiBfcmVmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBEYXlQaWNrZXJOYXZpZ2F0aW9uLnByb3RvdHlwZTtcblxuICBfcHJvdG9bIV9yZWFjdFtcImRlZmF1bHRcIl0uUHVyZUNvbXBvbmVudCAmJiBcInNob3VsZENvbXBvbmVudFVwZGF0ZVwiXSA9IGZ1bmN0aW9uIChuZXh0UHJvcHMsIG5leHRTdGF0ZSkge1xuICAgIHJldHVybiAhKDAsIF9lbnp5bWVTaGFsbG93RXF1YWxbXCJkZWZhdWx0XCJdKSh0aGlzLnByb3BzLCBuZXh0UHJvcHMpIHx8ICEoMCwgX2VuenltZVNoYWxsb3dFcXVhbFtcImRlZmF1bHRcIl0pKHRoaXMuc3RhdGUsIG5leHRTdGF0ZSk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBpbmxpbmVTdHlsZXMgPSBfdGhpcyRwcm9wcy5pbmxpbmVTdHlsZXMsXG4gICAgICAgIGlzUlRMID0gX3RoaXMkcHJvcHMuaXNSVEwsXG4gICAgICAgIGRpc2FibGVQcmV2ID0gX3RoaXMkcHJvcHMuZGlzYWJsZVByZXYsXG4gICAgICAgIGRpc2FibGVOZXh0ID0gX3RoaXMkcHJvcHMuZGlzYWJsZU5leHQsXG4gICAgICAgIG5hdlBvc2l0aW9uID0gX3RoaXMkcHJvcHMubmF2UG9zaXRpb24sXG4gICAgICAgIG5hdlByZXYgPSBfdGhpcyRwcm9wcy5uYXZQcmV2LFxuICAgICAgICBuYXZOZXh0ID0gX3RoaXMkcHJvcHMubmF2TmV4dCxcbiAgICAgICAgb25QcmV2TW9udGhDbGljayA9IF90aGlzJHByb3BzLm9uUHJldk1vbnRoQ2xpY2ssXG4gICAgICAgIG9uTmV4dE1vbnRoQ2xpY2sgPSBfdGhpcyRwcm9wcy5vbk5leHRNb250aENsaWNrLFxuICAgICAgICBvcmllbnRhdGlvbiA9IF90aGlzJHByb3BzLm9yaWVudGF0aW9uLFxuICAgICAgICBwaHJhc2VzID0gX3RoaXMkcHJvcHMucGhyYXNlcyxcbiAgICAgICAgcmVuZGVyTmF2UHJldkJ1dHRvbiA9IF90aGlzJHByb3BzLnJlbmRlck5hdlByZXZCdXR0b24sXG4gICAgICAgIHJlbmRlck5hdk5leHRCdXR0b24gPSBfdGhpcyRwcm9wcy5yZW5kZXJOYXZOZXh0QnV0dG9uLFxuICAgICAgICBzaG93TmF2UHJldkJ1dHRvbiA9IF90aGlzJHByb3BzLnNob3dOYXZQcmV2QnV0dG9uLFxuICAgICAgICBzaG93TmF2TmV4dEJ1dHRvbiA9IF90aGlzJHByb3BzLnNob3dOYXZOZXh0QnV0dG9uLFxuICAgICAgICBzdHlsZXMgPSBfdGhpcyRwcm9wcy5zdHlsZXM7XG5cbiAgICBpZiAoIXNob3dOYXZOZXh0QnV0dG9uICYmICFzaG93TmF2UHJldkJ1dHRvbikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGlzSG9yaXpvbnRhbCA9IG9yaWVudGF0aW9uID09PSBfY29uc3RhbnRzLkhPUklaT05UQUxfT1JJRU5UQVRJT047XG4gICAgdmFyIGlzVmVydGljYWwgPSBvcmllbnRhdGlvbiAhPT0gX2NvbnN0YW50cy5IT1JJWk9OVEFMX09SSUVOVEFUSU9OO1xuICAgIHZhciBpc1ZlcnRpY2FsU2Nyb2xsYWJsZSA9IG9yaWVudGF0aW9uID09PSBfY29uc3RhbnRzLlZFUlRJQ0FMX1NDUk9MTEFCTEU7XG4gICAgdmFyIGlzQm90dG9tTmF2UG9zaXRpb24gPSBuYXZQb3NpdGlvbiA9PT0gX2NvbnN0YW50cy5OQVZfUE9TSVRJT05fQk9UVE9NO1xuICAgIHZhciBoYXNJbmxpbmVTdHlsZXMgPSAhIWlubGluZVN0eWxlcztcbiAgICB2YXIgbmF2UHJldkljb24gPSBuYXZQcmV2O1xuICAgIHZhciBuYXZOZXh0SWNvbiA9IG5hdk5leHQ7XG4gICAgdmFyIGlzRGVmYXVsdE5hdlByZXYgPSBmYWxzZTtcbiAgICB2YXIgaXNEZWZhdWx0TmF2TmV4dCA9IGZhbHNlO1xuICAgIHZhciBuYXZQcmV2VGFiSW5kZXggPSB7fTtcbiAgICB2YXIgbmF2TmV4dFRhYkluZGV4ID0ge307XG5cbiAgICBpZiAoIW5hdlByZXZJY29uICYmICFyZW5kZXJOYXZQcmV2QnV0dG9uICYmIHNob3dOYXZQcmV2QnV0dG9uKSB7XG4gICAgICBuYXZQcmV2VGFiSW5kZXggPSB7XG4gICAgICAgIHRhYkluZGV4OiAnMCdcbiAgICAgIH07XG4gICAgICBpc0RlZmF1bHROYXZQcmV2ID0gdHJ1ZTtcbiAgICAgIHZhciBJY29uID0gaXNWZXJ0aWNhbCA/IF9DaGV2cm9uVXBbXCJkZWZhdWx0XCJdIDogX0xlZnRBcnJvd1tcImRlZmF1bHRcIl07XG5cbiAgICAgIGlmIChpc1JUTCAmJiAhaXNWZXJ0aWNhbCkge1xuICAgICAgICBJY29uID0gX1JpZ2h0QXJyb3dbXCJkZWZhdWx0XCJdO1xuICAgICAgfVxuXG4gICAgICBuYXZQcmV2SWNvbiA9IF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChJY29uLCAoMCwgX3JlYWN0V2l0aFN0eWxlcy5jc3MpKGlzSG9yaXpvbnRhbCAmJiBzdHlsZXMuRGF5UGlja2VyTmF2aWdhdGlvbl9zdmdfX2hvcml6b250YWwsIGlzVmVydGljYWwgJiYgc3R5bGVzLkRheVBpY2tlck5hdmlnYXRpb25fc3ZnX192ZXJ0aWNhbCwgZGlzYWJsZVByZXYgJiYgc3R5bGVzLkRheVBpY2tlck5hdmlnYXRpb25fc3ZnX19kaXNhYmxlZCkpO1xuICAgIH1cblxuICAgIGlmICghbmF2TmV4dEljb24gJiYgIXJlbmRlck5hdk5leHRCdXR0b24gJiYgc2hvd05hdk5leHRCdXR0b24pIHtcbiAgICAgIG5hdk5leHRUYWJJbmRleCA9IHtcbiAgICAgICAgdGFiSW5kZXg6ICcwJ1xuICAgICAgfTtcbiAgICAgIGlzRGVmYXVsdE5hdk5leHQgPSB0cnVlO1xuXG4gICAgICB2YXIgX0ljb24gPSBpc1ZlcnRpY2FsID8gX0NoZXZyb25Eb3duW1wiZGVmYXVsdFwiXSA6IF9SaWdodEFycm93W1wiZGVmYXVsdFwiXTtcblxuICAgICAgaWYgKGlzUlRMICYmICFpc1ZlcnRpY2FsKSB7XG4gICAgICAgIF9JY29uID0gX0xlZnRBcnJvd1tcImRlZmF1bHRcIl07XG4gICAgICB9XG5cbiAgICAgIG5hdk5leHRJY29uID0gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9JY29uLCAoMCwgX3JlYWN0V2l0aFN0eWxlcy5jc3MpKGlzSG9yaXpvbnRhbCAmJiBzdHlsZXMuRGF5UGlja2VyTmF2aWdhdGlvbl9zdmdfX2hvcml6b250YWwsIGlzVmVydGljYWwgJiYgc3R5bGVzLkRheVBpY2tlck5hdmlnYXRpb25fc3ZnX192ZXJ0aWNhbCwgZGlzYWJsZU5leHQgJiYgc3R5bGVzLkRheVBpY2tlck5hdmlnYXRpb25fc3ZnX19kaXNhYmxlZCkpO1xuICAgIH1cblxuICAgIHZhciBpc0RlZmF1bHROYXYgPSBpc0RlZmF1bHROYXZOZXh0IHx8IGlzRGVmYXVsdE5hdlByZXY7XG4gICAgcmV0dXJuIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImRpdlwiLCBfcmVhY3RXaXRoU3R5bGVzLmNzcy5hcHBseSh2b2lkIDAsIFtzdHlsZXMuRGF5UGlja2VyTmF2aWdhdGlvbiwgaXNIb3Jpem9udGFsICYmIHN0eWxlcy5EYXlQaWNrZXJOYXZpZ2F0aW9uX19ob3Jpem9udGFsXS5jb25jYXQoKDAsIF90b0NvbnN1bWFibGVBcnJheTJbXCJkZWZhdWx0XCJdKShpc1ZlcnRpY2FsID8gW3N0eWxlcy5EYXlQaWNrZXJOYXZpZ2F0aW9uX192ZXJ0aWNhbCwgaXNEZWZhdWx0TmF2ICYmIHN0eWxlcy5EYXlQaWNrZXJOYXZpZ2F0aW9uX192ZXJ0aWNhbERlZmF1bHRdIDogW10pLCAoMCwgX3RvQ29uc3VtYWJsZUFycmF5MltcImRlZmF1bHRcIl0pKGlzVmVydGljYWxTY3JvbGxhYmxlID8gW3N0eWxlcy5EYXlQaWNrZXJOYXZpZ2F0aW9uX192ZXJ0aWNhbFNjcm9sbGFibGUsIGlzRGVmYXVsdE5hdiAmJiBzdHlsZXMuRGF5UGlja2VyTmF2aWdhdGlvbl9fdmVydGljYWxTY3JvbGxhYmxlRGVmYXVsdCwgc2hvd05hdlByZXZCdXR0b24gJiYgc3R5bGVzLkRheVBpY2tlck5hdmlnYXRpb25fX3ZlcnRpY2FsU2Nyb2xsYWJsZV9wcmV2TmF2XSA6IFtdKSwgKDAsIF90b0NvbnN1bWFibGVBcnJheTJbXCJkZWZhdWx0XCJdKShpc0JvdHRvbU5hdlBvc2l0aW9uID8gW3N0eWxlcy5EYXlQaWNrZXJOYXZpZ2F0aW9uX19ib3R0b20sIGlzRGVmYXVsdE5hdiAmJiBzdHlsZXMuRGF5UGlja2VyTmF2aWdhdGlvbl9fYm90dG9tRGVmYXVsdF0gOiBbXSksIFtoYXNJbmxpbmVTdHlsZXMgJiYgaW5saW5lU3R5bGVzXSkpLCBzaG93TmF2UHJldkJ1dHRvbiAmJiAocmVuZGVyTmF2UHJldkJ1dHRvbiA/IHJlbmRlck5hdlByZXZCdXR0b24oe1xuICAgICAgYXJpYUxhYmVsOiBwaHJhc2VzLmp1bXBUb1ByZXZNb250aCxcbiAgICAgIGRpc2FibGVkOiBkaXNhYmxlUHJldixcbiAgICAgIG9uQ2xpY2s6IGRpc2FibGVQcmV2ID8gdW5kZWZpbmVkIDogb25QcmV2TW9udGhDbGljayxcbiAgICAgIG9uS2V5VXA6IGRpc2FibGVQcmV2ID8gdW5kZWZpbmVkIDogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdmFyIGtleSA9IGUua2V5O1xuXG4gICAgICAgIGlmIChrZXkgPT09ICdFbnRlcicgfHwga2V5ID09PSAnICcpIHtcbiAgICAgICAgICBvblByZXZNb250aENsaWNrKGUpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb25Nb3VzZVVwOiBkaXNhYmxlUHJldiA/IHVuZGVmaW5lZCA6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGUuY3VycmVudFRhcmdldC5ibHVyKCk7XG4gICAgICB9XG4gICAgfSkgOiBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUganN4LWExMXkvaW50ZXJhY3RpdmUtc3VwcG9ydHMtZm9jdXNcbiAgICAgIHJvbGU6IFwiYnV0dG9uXCJcbiAgICB9LCBuYXZQcmV2VGFiSW5kZXgsIF9yZWFjdFdpdGhTdHlsZXMuY3NzLmFwcGx5KHZvaWQgMCwgW3N0eWxlcy5EYXlQaWNrZXJOYXZpZ2F0aW9uX2J1dHRvbiwgaXNEZWZhdWx0TmF2UHJldiAmJiBzdHlsZXMuRGF5UGlja2VyTmF2aWdhdGlvbl9idXR0b25fX2RlZmF1bHQsIGRpc2FibGVQcmV2ICYmIHN0eWxlcy5EYXlQaWNrZXJOYXZpZ2F0aW9uX2J1dHRvbl9fZGlzYWJsZWRdLmNvbmNhdCgoMCwgX3RvQ29uc3VtYWJsZUFycmF5MltcImRlZmF1bHRcIl0pKGlzSG9yaXpvbnRhbCA/IFtzdHlsZXMuRGF5UGlja2VyTmF2aWdhdGlvbl9idXR0b25fX2hvcml6b250YWxdLmNvbmNhdCgoMCwgX3RvQ29uc3VtYWJsZUFycmF5MltcImRlZmF1bHRcIl0pKGlzRGVmYXVsdE5hdlByZXYgPyBbc3R5bGVzLkRheVBpY2tlck5hdmlnYXRpb25fYnV0dG9uX19ob3Jpem9udGFsRGVmYXVsdCwgaXNCb3R0b21OYXZQb3NpdGlvbiAmJiBzdHlsZXMuRGF5UGlja2VyTmF2aWdhdGlvbl9ib3R0b21CdXR0b25fX2hvcml6b250YWxEZWZhdWx0LCAhaXNSVEwgJiYgc3R5bGVzLkRheVBpY2tlck5hdmlnYXRpb25fbGVmdEJ1dHRvbl9faG9yaXpvbnRhbERlZmF1bHQsIGlzUlRMICYmIHN0eWxlcy5EYXlQaWNrZXJOYXZpZ2F0aW9uX3JpZ2h0QnV0dG9uX19ob3Jpem9udGFsRGVmYXVsdF0gOiBbXSkpIDogW10pLCAoMCwgX3RvQ29uc3VtYWJsZUFycmF5MltcImRlZmF1bHRcIl0pKGlzVmVydGljYWwgPyBbc3R5bGVzLkRheVBpY2tlck5hdmlnYXRpb25fYnV0dG9uX192ZXJ0aWNhbF0uY29uY2F0KCgwLCBfdG9Db25zdW1hYmxlQXJyYXkyW1wiZGVmYXVsdFwiXSkoaXNEZWZhdWx0TmF2UHJldiA/IFtzdHlsZXMuRGF5UGlja2VyTmF2aWdhdGlvbl9idXR0b25fX3ZlcnRpY2FsRGVmYXVsdCwgc3R5bGVzLkRheVBpY2tlck5hdmlnYXRpb25fcHJldkJ1dHRvbl9fdmVydGljYWxEZWZhdWx0LCBpc1ZlcnRpY2FsU2Nyb2xsYWJsZSAmJiBzdHlsZXMuRGF5UGlja2VyTmF2aWdhdGlvbl9wcmV2QnV0dG9uX192ZXJ0aWNhbFNjcm9sbGFibGVEZWZhdWx0XSA6IFtdKSkgOiBbXSkpKSwge1xuICAgICAgXCJhcmlhLWRpc2FibGVkXCI6IGRpc2FibGVQcmV2ID8gdHJ1ZSA6IHVuZGVmaW5lZCxcbiAgICAgIFwiYXJpYS1sYWJlbFwiOiBwaHJhc2VzLmp1bXBUb1ByZXZNb250aCxcbiAgICAgIG9uQ2xpY2s6IGRpc2FibGVQcmV2ID8gdW5kZWZpbmVkIDogb25QcmV2TW9udGhDbGljayxcbiAgICAgIG9uS2V5VXA6IGRpc2FibGVQcmV2ID8gdW5kZWZpbmVkIDogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgdmFyIGtleSA9IGUua2V5O1xuXG4gICAgICAgIGlmIChrZXkgPT09ICdFbnRlcicgfHwga2V5ID09PSAnICcpIHtcbiAgICAgICAgICBvblByZXZNb250aENsaWNrKGUpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb25Nb3VzZVVwOiBkaXNhYmxlUHJldiA/IHVuZGVmaW5lZCA6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGUuY3VycmVudFRhcmdldC5ibHVyKCk7XG4gICAgICB9XG4gICAgfSksIG5hdlByZXZJY29uKSksIHNob3dOYXZOZXh0QnV0dG9uICYmIChyZW5kZXJOYXZOZXh0QnV0dG9uID8gcmVuZGVyTmF2TmV4dEJ1dHRvbih7XG4gICAgICBhcmlhTGFiZWw6IHBocmFzZXMuanVtcFRvTmV4dE1vbnRoLFxuICAgICAgZGlzYWJsZWQ6IGRpc2FibGVOZXh0LFxuICAgICAgb25DbGljazogZGlzYWJsZU5leHQgPyB1bmRlZmluZWQgOiBvbk5leHRNb250aENsaWNrLFxuICAgICAgb25LZXlVcDogZGlzYWJsZU5leHQgPyB1bmRlZmluZWQgOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICB2YXIga2V5ID0gZS5rZXk7XG5cbiAgICAgICAgaWYgKGtleSA9PT0gJ0VudGVyJyB8fCBrZXkgPT09ICcgJykge1xuICAgICAgICAgIG9uTmV4dE1vbnRoQ2xpY2soZSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvbk1vdXNlVXA6IGRpc2FibGVOZXh0ID8gdW5kZWZpbmVkIDogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZS5jdXJyZW50VGFyZ2V0LmJsdXIoKTtcbiAgICAgIH1cbiAgICB9KSA6IF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImRpdlwiLCAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBqc3gtYTExeS9pbnRlcmFjdGl2ZS1zdXBwb3J0cy1mb2N1c1xuICAgICAgcm9sZTogXCJidXR0b25cIlxuICAgIH0sIG5hdk5leHRUYWJJbmRleCwgX3JlYWN0V2l0aFN0eWxlcy5jc3MuYXBwbHkodm9pZCAwLCBbc3R5bGVzLkRheVBpY2tlck5hdmlnYXRpb25fYnV0dG9uLCBpc0RlZmF1bHROYXZOZXh0ICYmIHN0eWxlcy5EYXlQaWNrZXJOYXZpZ2F0aW9uX2J1dHRvbl9fZGVmYXVsdCwgZGlzYWJsZU5leHQgJiYgc3R5bGVzLkRheVBpY2tlck5hdmlnYXRpb25fYnV0dG9uX19kaXNhYmxlZF0uY29uY2F0KCgwLCBfdG9Db25zdW1hYmxlQXJyYXkyW1wiZGVmYXVsdFwiXSkoaXNIb3Jpem9udGFsID8gW3N0eWxlcy5EYXlQaWNrZXJOYXZpZ2F0aW9uX2J1dHRvbl9faG9yaXpvbnRhbF0uY29uY2F0KCgwLCBfdG9Db25zdW1hYmxlQXJyYXkyW1wiZGVmYXVsdFwiXSkoaXNEZWZhdWx0TmF2TmV4dCA/IFtzdHlsZXMuRGF5UGlja2VyTmF2aWdhdGlvbl9idXR0b25fX2hvcml6b250YWxEZWZhdWx0LCBpc0JvdHRvbU5hdlBvc2l0aW9uICYmIHN0eWxlcy5EYXlQaWNrZXJOYXZpZ2F0aW9uX2JvdHRvbUJ1dHRvbl9faG9yaXpvbnRhbERlZmF1bHQsIGlzUlRMICYmIHN0eWxlcy5EYXlQaWNrZXJOYXZpZ2F0aW9uX2xlZnRCdXR0b25fX2hvcml6b250YWxEZWZhdWx0LCAhaXNSVEwgJiYgc3R5bGVzLkRheVBpY2tlck5hdmlnYXRpb25fcmlnaHRCdXR0b25fX2hvcml6b250YWxEZWZhdWx0XSA6IFtdKSkgOiBbXSksICgwLCBfdG9Db25zdW1hYmxlQXJyYXkyW1wiZGVmYXVsdFwiXSkoaXNWZXJ0aWNhbCA/IFtzdHlsZXMuRGF5UGlja2VyTmF2aWdhdGlvbl9idXR0b25fX3ZlcnRpY2FsXS5jb25jYXQoKDAsIF90b0NvbnN1bWFibGVBcnJheTJbXCJkZWZhdWx0XCJdKShpc0RlZmF1bHROYXZOZXh0ID8gW3N0eWxlcy5EYXlQaWNrZXJOYXZpZ2F0aW9uX2J1dHRvbl9fdmVydGljYWxEZWZhdWx0LCBzdHlsZXMuRGF5UGlja2VyTmF2aWdhdGlvbl9uZXh0QnV0dG9uX192ZXJ0aWNhbERlZmF1bHQsIGlzVmVydGljYWxTY3JvbGxhYmxlICYmIHN0eWxlcy5EYXlQaWNrZXJOYXZpZ2F0aW9uX25leHRCdXR0b25fX3ZlcnRpY2FsU2Nyb2xsYWJsZURlZmF1bHRdIDogW10pKSA6IFtdKSkpLCB7XG4gICAgICBcImFyaWEtZGlzYWJsZWRcIjogZGlzYWJsZU5leHQgPyB0cnVlIDogdW5kZWZpbmVkLFxuICAgICAgXCJhcmlhLWxhYmVsXCI6IHBocmFzZXMuanVtcFRvTmV4dE1vbnRoLFxuICAgICAgb25DbGljazogZGlzYWJsZU5leHQgPyB1bmRlZmluZWQgOiBvbk5leHRNb250aENsaWNrLFxuICAgICAgb25LZXlVcDogZGlzYWJsZU5leHQgPyB1bmRlZmluZWQgOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICB2YXIga2V5ID0gZS5rZXk7XG5cbiAgICAgICAgaWYgKGtleSA9PT0gJ0VudGVyJyB8fCBrZXkgPT09ICcgJykge1xuICAgICAgICAgIG9uTmV4dE1vbnRoQ2xpY2soZSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvbk1vdXNlVXA6IGRpc2FibGVOZXh0ID8gdW5kZWZpbmVkIDogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZS5jdXJyZW50VGFyZ2V0LmJsdXIoKTtcbiAgICAgIH1cbiAgICB9KSwgbmF2TmV4dEljb24pKSk7XG4gIH07XG5cbiAgcmV0dXJuIERheVBpY2tlck5hdmlnYXRpb247XG59KF9yZWFjdFtcImRlZmF1bHRcIl0uUHVyZUNvbXBvbmVudCB8fCBfcmVhY3RbXCJkZWZhdWx0XCJdLkNvbXBvbmVudCk7XG5cbkRheVBpY2tlck5hdmlnYXRpb24ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gcHJvcFR5cGVzIDoge307XG5EYXlQaWNrZXJOYXZpZ2F0aW9uLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9yZWFjdFdpdGhTdHlsZXMud2l0aFN0eWxlcykoZnVuY3Rpb24gKF9yZWYyKSB7XG4gIHZhciBfcmVmMiRyZWFjdERhdGVzID0gX3JlZjIucmVhY3REYXRlcyxcbiAgICAgIGNvbG9yID0gX3JlZjIkcmVhY3REYXRlcy5jb2xvcixcbiAgICAgIHpJbmRleCA9IF9yZWYyJHJlYWN0RGF0ZXMuekluZGV4O1xuICByZXR1cm4ge1xuICAgIERheVBpY2tlck5hdmlnYXRpb246IHtcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgekluZGV4OiB6SW5kZXggKyAyXG4gICAgfSxcbiAgICBEYXlQaWNrZXJOYXZpZ2F0aW9uX19ob3Jpem9udGFsOiB7XG4gICAgICBoZWlnaHQ6IDBcbiAgICB9LFxuICAgIERheVBpY2tlck5hdmlnYXRpb25fX3ZlcnRpY2FsOiB7fSxcbiAgICBEYXlQaWNrZXJOYXZpZ2F0aW9uX192ZXJ0aWNhbFNjcm9sbGFibGU6IHt9LFxuICAgIERheVBpY2tlck5hdmlnYXRpb25fX3ZlcnRpY2FsU2Nyb2xsYWJsZV9wcmV2TmF2OiB7XG4gICAgICB6SW5kZXg6IHpJbmRleCArIDEgLy8gekluZGV4ICsgMiBjYXVzZXMgdGhlIGJ1dHRvbiB0byBzaG93IG9uIHRvcCBvZiB0aGUgZGF5IG9mIHdlZWsgaGVhZGVyc1xuXG4gICAgfSxcbiAgICBEYXlQaWNrZXJOYXZpZ2F0aW9uX192ZXJ0aWNhbERlZmF1bHQ6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgIGhlaWdodDogNTIsXG4gICAgICBib3R0b206IDAsXG4gICAgICBsZWZ0OiAoMCwgX25vZmxpcFtcImRlZmF1bHRcIl0pKDApXG4gICAgfSxcbiAgICBEYXlQaWNrZXJOYXZpZ2F0aW9uX192ZXJ0aWNhbFNjcm9sbGFibGVEZWZhdWx0OiB7XG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICAgIH0sXG4gICAgRGF5UGlja2VyTmF2aWdhdGlvbl9fYm90dG9tOiB7XG4gICAgICBoZWlnaHQ6ICdhdXRvJ1xuICAgIH0sXG4gICAgRGF5UGlja2VyTmF2aWdhdGlvbl9fYm90dG9tRGVmYXVsdDoge1xuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJ1xuICAgIH0sXG4gICAgRGF5UGlja2VyTmF2aWdhdGlvbl9idXR0b246IHtcbiAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICAgdXNlclNlbGVjdDogJ25vbmUnLFxuICAgICAgYm9yZGVyOiAwLFxuICAgICAgcGFkZGluZzogMCxcbiAgICAgIG1hcmdpbjogMFxuICAgIH0sXG4gICAgRGF5UGlja2VyTmF2aWdhdGlvbl9idXR0b25fX2RlZmF1bHQ6IHtcbiAgICAgIGJvcmRlcjogXCIxcHggc29saWQgXCIuY29uY2F0KGNvbG9yLmNvcmUuYm9yZGVyTGlnaHQpLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBjb2xvci5iYWNrZ3JvdW5kLFxuICAgICAgY29sb3I6IGNvbG9yLnBsYWNlaG9sZGVyVGV4dCxcbiAgICAgICc6Zm9jdXMnOiB7XG4gICAgICAgIGJvcmRlcjogXCIxcHggc29saWQgXCIuY29uY2F0KGNvbG9yLmNvcmUuYm9yZGVyTWVkaXVtKVxuICAgICAgfSxcbiAgICAgICc6aG92ZXInOiB7XG4gICAgICAgIGJvcmRlcjogXCIxcHggc29saWQgXCIuY29uY2F0KGNvbG9yLmNvcmUuYm9yZGVyTWVkaXVtKVxuICAgICAgfSxcbiAgICAgICc6YWN0aXZlJzoge1xuICAgICAgICBiYWNrZ3JvdW5kOiBjb2xvci5iYWNrZ3JvdW5kRGFya1xuICAgICAgfVxuICAgIH0sXG4gICAgRGF5UGlja2VyTmF2aWdhdGlvbl9idXR0b25fX2Rpc2FibGVkOiB7XG4gICAgICBjdXJzb3I6ICdkZWZhdWx0JyxcbiAgICAgIGJvcmRlcjogXCIxcHggc29saWQgXCIuY29uY2F0KGNvbG9yLmRpc2FibGVkKSxcbiAgICAgICc6Zm9jdXMnOiB7XG4gICAgICAgIGJvcmRlcjogXCIxcHggc29saWQgXCIuY29uY2F0KGNvbG9yLmRpc2FibGVkKVxuICAgICAgfSxcbiAgICAgICc6aG92ZXInOiB7XG4gICAgICAgIGJvcmRlcjogXCIxcHggc29saWQgXCIuY29uY2F0KGNvbG9yLmRpc2FibGVkKVxuICAgICAgfSxcbiAgICAgICc6YWN0aXZlJzoge1xuICAgICAgICBiYWNrZ3JvdW5kOiAnbm9uZSdcbiAgICAgIH1cbiAgICB9LFxuICAgIERheVBpY2tlck5hdmlnYXRpb25fYnV0dG9uX19ob3Jpem9udGFsOiB7fSxcbiAgICBEYXlQaWNrZXJOYXZpZ2F0aW9uX2J1dHRvbl9faG9yaXpvbnRhbERlZmF1bHQ6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgdG9wOiAxOCxcbiAgICAgIGxpbmVIZWlnaHQ6IDAuNzgsXG4gICAgICBib3JkZXJSYWRpdXM6IDMsXG4gICAgICBwYWRkaW5nOiAnNnB4IDlweCdcbiAgICB9LFxuICAgIERheVBpY2tlck5hdmlnYXRpb25fYm90dG9tQnV0dG9uX19ob3Jpem9udGFsRGVmYXVsdDoge1xuICAgICAgcG9zaXRpb246ICdzdGF0aWMnLFxuICAgICAgbWFyZ2luTGVmdDogMjIsXG4gICAgICBtYXJnaW5SaWdodDogMjIsXG4gICAgICBtYXJnaW5Cb3R0b206IDMwLFxuICAgICAgbWFyZ2luVG9wOiAtMTBcbiAgICB9LFxuICAgIERheVBpY2tlck5hdmlnYXRpb25fbGVmdEJ1dHRvbl9faG9yaXpvbnRhbERlZmF1bHQ6IHtcbiAgICAgIGxlZnQ6ICgwLCBfbm9mbGlwW1wiZGVmYXVsdFwiXSkoMjIpXG4gICAgfSxcbiAgICBEYXlQaWNrZXJOYXZpZ2F0aW9uX3JpZ2h0QnV0dG9uX19ob3Jpem9udGFsRGVmYXVsdDoge1xuICAgICAgcmlnaHQ6ICgwLCBfbm9mbGlwW1wiZGVmYXVsdFwiXSkoMjIpXG4gICAgfSxcbiAgICBEYXlQaWNrZXJOYXZpZ2F0aW9uX2J1dHRvbl9fdmVydGljYWw6IHt9LFxuICAgIERheVBpY2tlck5hdmlnYXRpb25fYnV0dG9uX192ZXJ0aWNhbERlZmF1bHQ6IHtcbiAgICAgIHBhZGRpbmc6IDUsXG4gICAgICBiYWNrZ3JvdW5kOiBjb2xvci5iYWNrZ3JvdW5kLFxuICAgICAgYm94U2hhZG93OiAoMCwgX25vZmxpcFtcImRlZmF1bHRcIl0pKCcwIDAgNXB4IDJweCByZ2JhKDAsIDAsIDAsIDAuMSknKSxcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICB3aWR0aDogJzUwJSdcbiAgICB9LFxuICAgIERheVBpY2tlck5hdmlnYXRpb25fcHJldkJ1dHRvbl9fdmVydGljYWxEZWZhdWx0OiB7fSxcbiAgICBEYXlQaWNrZXJOYXZpZ2F0aW9uX25leHRCdXR0b25fX3ZlcnRpY2FsRGVmYXVsdDoge1xuICAgICAgYm9yZGVyTGVmdDogKDAsIF9ub2ZsaXBbXCJkZWZhdWx0XCJdKSgwKVxuICAgIH0sXG4gICAgRGF5UGlja2VyTmF2aWdhdGlvbl9uZXh0QnV0dG9uX192ZXJ0aWNhbFNjcm9sbGFibGVEZWZhdWx0OiB7XG4gICAgICB3aWR0aDogJzEwMCUnXG4gICAgfSxcbiAgICBEYXlQaWNrZXJOYXZpZ2F0aW9uX3ByZXZCdXR0b25fX3ZlcnRpY2FsU2Nyb2xsYWJsZURlZmF1bHQ6IHtcbiAgICAgIHdpZHRoOiAnMTAwJSdcbiAgICB9LFxuICAgIERheVBpY2tlck5hdmlnYXRpb25fc3ZnX19ob3Jpem9udGFsOiB7XG4gICAgICBoZWlnaHQ6IDE5LFxuICAgICAgd2lkdGg6IDE5LFxuICAgICAgZmlsbDogY29sb3IuY29yZS5ncmF5TGlnaHQsXG4gICAgICBkaXNwbGF5OiAnYmxvY2snXG4gICAgfSxcbiAgICBEYXlQaWNrZXJOYXZpZ2F0aW9uX3N2Z19fdmVydGljYWw6IHtcbiAgICAgIGhlaWdodDogNDIsXG4gICAgICB3aWR0aDogNDIsXG4gICAgICBmaWxsOiBjb2xvci50ZXh0XG4gICAgfSxcbiAgICBEYXlQaWNrZXJOYXZpZ2F0aW9uX3N2Z19fZGlzYWJsZWQ6IHtcbiAgICAgIGZpbGw6IGNvbG9yLmRpc2FibGVkXG4gICAgfVxuICB9O1xufSwge1xuICBwdXJlQ29tcG9uZW50OiB0eXBlb2YgX3JlYWN0W1wiZGVmYXVsdFwiXS5QdXJlQ29tcG9uZW50ICE9PSAndW5kZWZpbmVkJ1xufSkoRGF5UGlja2VyTmF2aWdhdGlvbik7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBDaGV2cm9uVXAgPSBmdW5jdGlvbiBDaGV2cm9uVXAocHJvcHMpIHtcbiAgcmV0dXJuIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcInN2Z1wiLCBwcm9wcywgX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7XG4gICAgZDogXCJNMzIgNzEzbDQ1My00NTNjMTEtMTEgMjEtMTEgMzIgMGw0NTMgNDUzYzUgNSA3IDEwIDcgMTYgMCAxMy0xMCAyMy0yMiAyMy03IDAtMTItMi0xNi03TDUwMSAzMDkgNjQgNzQ1Yy00IDUtOSA3LTE1IDctNyAwLTEyLTItMTctNy05LTExLTktMjEgMC0zMnpcIlxuICB9KSk7XG59O1xuXG5DaGV2cm9uVXAuZGVmYXVsdFByb3BzID0ge1xuICBmb2N1c2FibGU6IFwiZmFsc2VcIixcbiAgdmlld0JveDogXCIwIDAgMTAwMCAxMDAwXCJcbn07XG52YXIgX2RlZmF1bHQgPSBDaGV2cm9uVXA7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgQ2hldnJvbkRvd24gPSBmdW5jdGlvbiBDaGV2cm9uRG93bihwcm9wcykge1xuICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwic3ZnXCIsIHByb3BzLCBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJwYXRoXCIsIHtcbiAgICBkOiBcIk05NjggMjg5TDUxNCA3NDFjLTExIDExLTIxIDExLTMyIDBMMjkgMjg5Yy00LTUtNi0xMS02LTE2IDAtMTMgMTAtMjMgMjMtMjMgNiAwIDExIDIgMTUgN2w0MzcgNDM2IDQzOC00MzZjNC01IDktNyAxNi03IDYgMCAxMSAyIDE2IDcgOSAxMCA5IDIxIDAgMzJ6XCJcbiAgfSkpO1xufTtcblxuQ2hldnJvbkRvd24uZGVmYXVsdFByb3BzID0ge1xuICBmb2N1c2FibGU6IFwiZmFsc2VcIixcbiAgdmlld0JveDogXCIwIDAgMTAwMCAxMDAwXCJcbn07XG52YXIgX2RlZmF1bHQgPSBDaGV2cm9uRG93bjtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBleHBvcnRzLkJPVFRPTV9SSUdIVCA9IGV4cG9ydHMuVE9QX1JJR0hUID0gZXhwb3J0cy5UT1BfTEVGVCA9IHZvaWQgMDtcblxudmFyIF9lbnp5bWVTaGFsbG93RXF1YWwgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJlbnp5bWUtc2hhbGxvdy1lcXVhbFwiKSk7XG5cbnZhciBfZXh0ZW5kczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHNcIikpO1xuXG52YXIgX2Fzc2VydFRoaXNJbml0aWFsaXplZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiKSk7XG5cbnZhciBfaW5oZXJpdHNMb29zZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzTG9vc2VcIikpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHlcIikpO1xuXG52YXIgX3JlYWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xuXG52YXIgX2FpcmJuYlByb3BUeXBlcyA9IHJlcXVpcmUoXCJhaXJibmItcHJvcC10eXBlc1wiKTtcblxudmFyIF9yZWFjdFdpdGhTdHlsZXMgPSByZXF1aXJlKFwicmVhY3Qtd2l0aC1zdHlsZXNcIik7XG5cbnZhciBfZGVmYXVsdFBocmFzZXMgPSByZXF1aXJlKFwiLi4vZGVmYXVsdFBocmFzZXNcIik7XG5cbnZhciBfZ2V0UGhyYXNlUHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvZ2V0UGhyYXNlUHJvcFR5cGVzXCIpKTtcblxudmFyIF9LZXlib2FyZFNob3J0Y3V0Um93ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9LZXlib2FyZFNob3J0Y3V0Um93XCIpKTtcblxudmFyIF9DbG9zZUJ1dHRvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vQ2xvc2VCdXR0b25cIikpO1xuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbnZhciBUT1BfTEVGVCA9ICd0b3AtbGVmdCc7XG5leHBvcnRzLlRPUF9MRUZUID0gVE9QX0xFRlQ7XG52YXIgVE9QX1JJR0hUID0gJ3RvcC1yaWdodCc7XG5leHBvcnRzLlRPUF9SSUdIVCA9IFRPUF9SSUdIVDtcbnZhciBCT1RUT01fUklHSFQgPSAnYm90dG9tLXJpZ2h0JztcbmV4cG9ydHMuQk9UVE9NX1JJR0hUID0gQk9UVE9NX1JJR0hUO1xudmFyIHByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/ICgwLCBfYWlyYm5iUHJvcFR5cGVzLmZvcmJpZEV4dHJhUHJvcHMpKF9vYmplY3RTcHJlYWQoe30sIF9yZWFjdFdpdGhTdHlsZXMud2l0aFN0eWxlc1Byb3BUeXBlcywge1xuICBibG9jazogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgLy8gVE9ETzogcmVuYW1lIGJ1dHRvbiBsb2NhdGlvbiB0byBiZSBkaXJlY3Rpb24tYWdub3N0aWNcbiAgYnV0dG9uTG9jYXRpb246IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm9uZU9mKFtUT1BfTEVGVCwgVE9QX1JJR0hULCBCT1RUT01fUklHSFRdKSxcbiAgc2hvd0tleWJvYXJkU2hvcnRjdXRzUGFuZWw6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIG9wZW5LZXlib2FyZFNob3J0Y3V0c1BhbmVsOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBjbG9zZUtleWJvYXJkU2hvcnRjdXRzUGFuZWw6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIHBocmFzZXM6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnNoYXBlKCgwLCBfZ2V0UGhyYXNlUHJvcFR5cGVzW1wiZGVmYXVsdFwiXSkoX2RlZmF1bHRQaHJhc2VzLkRheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzUGhyYXNlcykpLFxuICByZW5kZXJLZXlib2FyZFNob3J0Y3V0c0J1dHRvbjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgcmVuZGVyS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuY1xufSkpIDoge307XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBibG9jazogZmFsc2UsXG4gIGJ1dHRvbkxvY2F0aW9uOiBCT1RUT01fUklHSFQsXG4gIHNob3dLZXlib2FyZFNob3J0Y3V0c1BhbmVsOiBmYWxzZSxcbiAgb3BlbktleWJvYXJkU2hvcnRjdXRzUGFuZWw6IGZ1bmN0aW9uIG9wZW5LZXlib2FyZFNob3J0Y3V0c1BhbmVsKCkge30sXG4gIGNsb3NlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbDogZnVuY3Rpb24gY2xvc2VLZXlib2FyZFNob3J0Y3V0c1BhbmVsKCkge30sXG4gIHBocmFzZXM6IF9kZWZhdWx0UGhyYXNlcy5EYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0c1BocmFzZXMsXG4gIHJlbmRlcktleWJvYXJkU2hvcnRjdXRzQnV0dG9uOiB1bmRlZmluZWQsXG4gIHJlbmRlcktleWJvYXJkU2hvcnRjdXRzUGFuZWw6IHVuZGVmaW5lZFxufTtcblxuZnVuY3Rpb24gZ2V0S2V5Ym9hcmRTaG9ydGN1dHMocGhyYXNlcykge1xuICByZXR1cm4gW3tcbiAgICB1bmljb2RlOiAn4oa1JyxcbiAgICBsYWJlbDogcGhyYXNlcy5lbnRlcktleSxcbiAgICBhY3Rpb246IHBocmFzZXMuc2VsZWN0Rm9jdXNlZERhdGVcbiAgfSwge1xuICAgIHVuaWNvZGU6ICfihpAv4oaSJyxcbiAgICBsYWJlbDogcGhyYXNlcy5sZWZ0QXJyb3dSaWdodEFycm93LFxuICAgIGFjdGlvbjogcGhyYXNlcy5tb3ZlRm9jdXNCeU9uZURheVxuICB9LCB7XG4gICAgdW5pY29kZTogJ+KGkS/ihpMnLFxuICAgIGxhYmVsOiBwaHJhc2VzLnVwQXJyb3dEb3duQXJyb3csXG4gICAgYWN0aW9uOiBwaHJhc2VzLm1vdmVGb2N1c0J5T25lV2Vla1xuICB9LCB7XG4gICAgdW5pY29kZTogJ1BnVXAvUGdEbicsXG4gICAgbGFiZWw6IHBocmFzZXMucGFnZVVwUGFnZURvd24sXG4gICAgYWN0aW9uOiBwaHJhc2VzLm1vdmVGb2N1c0J5T25lTW9udGhcbiAgfSwge1xuICAgIHVuaWNvZGU6ICdIb21lL0VuZCcsXG4gICAgbGFiZWw6IHBocmFzZXMuaG9tZUVuZCxcbiAgICBhY3Rpb246IHBocmFzZXMubW92ZUZvY3VzdG9TdGFydEFuZEVuZE9mV2Vla1xuICB9LCB7XG4gICAgdW5pY29kZTogJ0VzYycsXG4gICAgbGFiZWw6IHBocmFzZXMuZXNjYXBlLFxuICAgIGFjdGlvbjogcGhyYXNlcy5yZXR1cm5Gb2N1c1RvSW5wdXRcbiAgfSwge1xuICAgIHVuaWNvZGU6ICc/JyxcbiAgICBsYWJlbDogcGhyYXNlcy5xdWVzdGlvbk1hcmssXG4gICAgYWN0aW9uOiBwaHJhc2VzLm9wZW5UaGlzUGFuZWxcbiAgfV07XG59XG5cbnZhciBEYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0cyA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX3JlZikge1xuICAoMCwgX2luaGVyaXRzTG9vc2UyW1wiZGVmYXVsdFwiXSkoRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHMsIF9yZWYpO1xuICB2YXIgX3Byb3RvID0gRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHMucHJvdG90eXBlO1xuXG4gIF9wcm90b1shX3JlYWN0W1wiZGVmYXVsdFwiXS5QdXJlQ29tcG9uZW50ICYmIFwic2hvdWxkQ29tcG9uZW50VXBkYXRlXCJdID0gZnVuY3Rpb24gKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gICAgcmV0dXJuICEoMCwgX2VuenltZVNoYWxsb3dFcXVhbFtcImRlZmF1bHRcIl0pKHRoaXMucHJvcHMsIG5leHRQcm9wcykgfHwgISgwLCBfZW56eW1lU2hhbGxvd0VxdWFsW1wiZGVmYXVsdFwiXSkodGhpcy5zdGF0ZSwgbmV4dFN0YXRlKTtcbiAgfTtcblxuICBmdW5jdGlvbiBEYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0cygpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfcmVmLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICB2YXIgcGhyYXNlcyA9IF90aGlzLnByb3BzLnBocmFzZXM7XG4gICAgX3RoaXMua2V5Ym9hcmRTaG9ydGN1dHMgPSBnZXRLZXlib2FyZFNob3J0Y3V0cyhwaHJhc2VzKTtcbiAgICBfdGhpcy5vblNob3dLZXlib2FyZFNob3J0Y3V0c0J1dHRvbkNsaWNrID0gX3RoaXMub25TaG93S2V5Ym9hcmRTaG9ydGN1dHNCdXR0b25DbGljay5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgX3RoaXMuc2V0U2hvd0tleWJvYXJkU2hvcnRjdXRzQnV0dG9uUmVmID0gX3RoaXMuc2V0U2hvd0tleWJvYXJkU2hvcnRjdXRzQnV0dG9uUmVmLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5zZXRIaWRlS2V5Ym9hcmRTaG9ydGN1dHNCdXR0b25SZWYgPSBfdGhpcy5zZXRIaWRlS2V5Ym9hcmRTaG9ydGN1dHNCdXR0b25SZWYuYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcykpO1xuICAgIF90aGlzLmhhbmRsZUZvY3VzID0gX3RoaXMuaGFuZGxlRm9jdXMuYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcykpO1xuICAgIF90aGlzLm9uS2V5RG93biA9IF90aGlzLm9uS2V5RG93bi5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIHZhciBwaHJhc2VzID0gdGhpcy5wcm9wcy5waHJhc2VzO1xuXG4gICAgaWYgKG5leHRQcm9wcy5waHJhc2VzICE9PSBwaHJhc2VzKSB7XG4gICAgICB0aGlzLmtleWJvYXJkU2hvcnRjdXRzID0gZ2V0S2V5Ym9hcmRTaG9ydGN1dHMobmV4dFByb3BzLnBocmFzZXMpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgIHRoaXMuaGFuZGxlRm9jdXMoKTtcbiAgfTtcblxuICBfcHJvdG8ub25LZXlEb3duID0gZnVuY3Rpb24gb25LZXlEb3duKGUpIHtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIHZhciBjbG9zZUtleWJvYXJkU2hvcnRjdXRzUGFuZWwgPSB0aGlzLnByb3BzLmNsb3NlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbDsgLy8gQmVjYXVzZSB0aGUgY2xvc2UgYnV0dG9uIGlzIHRoZSBvbmx5IGZvY3VzYWJsZSBlbGVtZW50IGluc2lkZSBvZiB0aGUgcGFuZWwsIHRoaXNcbiAgICAvLyBhbW91bnRzIHRvIGEgdmVyeSBiYXNpYyBmb2N1cyB0cmFwLiBUaGUgdXNlciBjYW4gZXhpdCB0aGUgcGFuZWwgYnkgXCJwcmVzc2luZ1wiIHRoZVxuICAgIC8vIGNsb3NlIGJ1dHRvbiBvciBoaXR0aW5nIGVzY2FwZVxuXG4gICAgc3dpdGNoIChlLmtleSkge1xuICAgICAgY2FzZSAnRXNjYXBlJzpcbiAgICAgICAgY2xvc2VLZXlib2FyZFNob3J0Y3V0c1BhbmVsKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgLy8gZG8gbm90aGluZyAtIHRoaXMgYWxsb3dzIHRoZSB1cCBhbmQgZG93biBhcnJvd3MgY29udGludWUgdGhlaXJcbiAgICAgIC8vIGRlZmF1bHQgYmVoYXZpb3Igb2Ygc2Nyb2xsaW5nIHRoZSBjb250ZW50IG9mIHRoZSBLZXlib2FyZCBTaG9ydGN1dHMgUGFuZWxcbiAgICAgIC8vIHdoaWNoIGlzIG5lZWRlZCB3aGVuIG9ubHkgYSBzaW5nbGUgbW9udGggaXMgc2hvd24gZm9yIGluc3RhbmNlLlxuXG4gICAgICBjYXNlICdBcnJvd1VwJzpcbiAgICAgIGNhc2UgJ0Fycm93RG93bic6XG4gICAgICAgIGJyZWFrO1xuICAgICAgLy8gY29tcGxldGVseSBibG9jayB0aGUgcmVzdCBvZiB0aGUga2V5cyB0aGF0IGhhdmUgZnVuY3Rpb25hbGl0eSBvdXRzaWRlIG9mIHRoaXMgcGFuZWxcblxuICAgICAgY2FzZSAnVGFiJzpcbiAgICAgIGNhc2UgJ0hvbWUnOlxuICAgICAgY2FzZSAnRW5kJzpcbiAgICAgIGNhc2UgJ1BhZ2VVcCc6XG4gICAgICBjYXNlICdQYWdlRG93bic6XG4gICAgICBjYXNlICdBcnJvd0xlZnQnOlxuICAgICAgY2FzZSAnQXJyb3dSaWdodCc6XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ub25TaG93S2V5Ym9hcmRTaG9ydGN1dHNCdXR0b25DbGljayA9IGZ1bmN0aW9uIG9uU2hvd0tleWJvYXJkU2hvcnRjdXRzQnV0dG9uQ2xpY2soKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgb3BlbktleWJvYXJkU2hvcnRjdXRzUGFuZWwgPSB0aGlzLnByb3BzLm9wZW5LZXlib2FyZFNob3J0Y3V0c1BhbmVsOyAvLyB3ZSB3YW50IHRvIHJldHVybiBmb2N1cyB0byB0aGlzIGJ1dHRvbiBhZnRlciBjbG9zaW5nIHRoZSBrZXlib2FyZCBzaG9ydGN1dHMgcGFuZWxcblxuICAgIG9wZW5LZXlib2FyZFNob3J0Y3V0c1BhbmVsKGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMi5zaG93S2V5Ym9hcmRTaG9ydGN1dHNCdXR0b24uZm9jdXMoKTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uc2V0U2hvd0tleWJvYXJkU2hvcnRjdXRzQnV0dG9uUmVmID0gZnVuY3Rpb24gc2V0U2hvd0tleWJvYXJkU2hvcnRjdXRzQnV0dG9uUmVmKHJlZikge1xuICAgIHRoaXMuc2hvd0tleWJvYXJkU2hvcnRjdXRzQnV0dG9uID0gcmVmO1xuICB9O1xuXG4gIF9wcm90by5zZXRIaWRlS2V5Ym9hcmRTaG9ydGN1dHNCdXR0b25SZWYgPSBmdW5jdGlvbiBzZXRIaWRlS2V5Ym9hcmRTaG9ydGN1dHNCdXR0b25SZWYocmVmKSB7XG4gICAgdGhpcy5oaWRlS2V5Ym9hcmRTaG9ydGN1dHNCdXR0b24gPSByZWY7XG4gIH07XG5cbiAgX3Byb3RvLmhhbmRsZUZvY3VzID0gZnVuY3Rpb24gaGFuZGxlRm9jdXMoKSB7XG4gICAgaWYgKHRoaXMuaGlkZUtleWJvYXJkU2hvcnRjdXRzQnV0dG9uKSB7XG4gICAgICAvLyBhdXRvbWF0aWNhbGx5IG1vdmUgZm9jdXMgaW50byB0aGUgZGlhbG9nIGJ5IG1vdmluZ1xuICAgICAgLy8gdG8gdGhlIG9ubHkgaW50ZXJhY3RpdmUgZWxlbWVudCwgdGhlIGhpZGUgYnV0dG9uXG4gICAgICB0aGlzLmhpZGVLZXlib2FyZFNob3J0Y3V0c0J1dHRvbi5mb2N1cygpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGJsb2NrID0gX3RoaXMkcHJvcHMuYmxvY2ssXG4gICAgICAgIGJ1dHRvbkxvY2F0aW9uID0gX3RoaXMkcHJvcHMuYnV0dG9uTG9jYXRpb24sXG4gICAgICAgIHNob3dLZXlib2FyZFNob3J0Y3V0c1BhbmVsID0gX3RoaXMkcHJvcHMuc2hvd0tleWJvYXJkU2hvcnRjdXRzUGFuZWwsXG4gICAgICAgIGNsb3NlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCA9IF90aGlzJHByb3BzLmNsb3NlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCxcbiAgICAgICAgc3R5bGVzID0gX3RoaXMkcHJvcHMuc3R5bGVzLFxuICAgICAgICBwaHJhc2VzID0gX3RoaXMkcHJvcHMucGhyYXNlcyxcbiAgICAgICAgcmVuZGVyS2V5Ym9hcmRTaG9ydGN1dHNCdXR0b24gPSBfdGhpcyRwcm9wcy5yZW5kZXJLZXlib2FyZFNob3J0Y3V0c0J1dHRvbixcbiAgICAgICAgcmVuZGVyS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCA9IF90aGlzJHByb3BzLnJlbmRlcktleWJvYXJkU2hvcnRjdXRzUGFuZWw7XG4gICAgdmFyIHRvZ2dsZUJ1dHRvblRleHQgPSBzaG93S2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCA/IHBocmFzZXMuaGlkZUtleWJvYXJkU2hvcnRjdXRzUGFuZWwgOiBwaHJhc2VzLnNob3dLZXlib2FyZFNob3J0Y3V0c1BhbmVsO1xuICAgIHZhciBib3R0b21SaWdodCA9IGJ1dHRvbkxvY2F0aW9uID09PSBCT1RUT01fUklHSFQ7XG4gICAgdmFyIHRvcFJpZ2h0ID0gYnV0dG9uTG9jYXRpb24gPT09IFRPUF9SSUdIVDtcbiAgICB2YXIgdG9wTGVmdCA9IGJ1dHRvbkxvY2F0aW9uID09PSBUT1BfTEVGVDtcbiAgICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIG51bGwsIHJlbmRlcktleWJvYXJkU2hvcnRjdXRzQnV0dG9uICYmIHJlbmRlcktleWJvYXJkU2hvcnRjdXRzQnV0dG9uKHtcbiAgICAgIC8vIHBhc3NpbmcgaW4gY29udGV4dC1zcGVjaWZpYyBwcm9wc1xuICAgICAgcmVmOiB0aGlzLnNldFNob3dLZXlib2FyZFNob3J0Y3V0c0J1dHRvblJlZixcbiAgICAgIG9uQ2xpY2s6IHRoaXMub25TaG93S2V5Ym9hcmRTaG9ydGN1dHNCdXR0b25DbGljayxcbiAgICAgIGFyaWFMYWJlbDogdG9nZ2xlQnV0dG9uVGV4dFxuICAgIH0pLCAhcmVuZGVyS2V5Ym9hcmRTaG9ydGN1dHNCdXR0b24gJiYgX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsICgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7XG4gICAgICByZWY6IHRoaXMuc2V0U2hvd0tleWJvYXJkU2hvcnRjdXRzQnV0dG9uUmVmXG4gICAgfSwgKDAsIF9yZWFjdFdpdGhTdHlsZXMuY3NzKShzdHlsZXMuRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHNfYnV0dG9uUmVzZXQsIHN0eWxlcy5EYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0c19zaG93LCBib3R0b21SaWdodCAmJiBzdHlsZXMuRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHNfc2hvd19fYm90dG9tUmlnaHQsIHRvcFJpZ2h0ICYmIHN0eWxlcy5EYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0c19zaG93X190b3BSaWdodCwgdG9wTGVmdCAmJiBzdHlsZXMuRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHNfc2hvd19fdG9wTGVmdCksIHtcbiAgICAgIHR5cGU6IFwiYnV0dG9uXCIsXG4gICAgICBcImFyaWEtbGFiZWxcIjogdG9nZ2xlQnV0dG9uVGV4dCxcbiAgICAgIG9uQ2xpY2s6IHRoaXMub25TaG93S2V5Ym9hcmRTaG9ydGN1dHNCdXR0b25DbGljayxcbiAgICAgIG9uTW91c2VVcDogZnVuY3Rpb24gb25Nb3VzZVVwKGUpIHtcbiAgICAgICAgZS5jdXJyZW50VGFyZ2V0LmJsdXIoKTtcbiAgICAgIH1cbiAgICB9KSwgX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwic3BhblwiLCAoMCwgX3JlYWN0V2l0aFN0eWxlcy5jc3MpKHN0eWxlcy5EYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0c19zaG93U3BhbiwgYm90dG9tUmlnaHQgJiYgc3R5bGVzLkRheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzX3Nob3dTcGFuX19ib3R0b21SaWdodCwgdG9wUmlnaHQgJiYgc3R5bGVzLkRheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzX3Nob3dTcGFuX190b3BSaWdodCwgdG9wTGVmdCAmJiBzdHlsZXMuRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHNfc2hvd1NwYW5fX3RvcExlZnQpLCBcIj9cIikpLCBzaG93S2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCAmJiAocmVuZGVyS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCA/IHJlbmRlcktleWJvYXJkU2hvcnRjdXRzUGFuZWwoe1xuICAgICAgY2xvc2VCdXR0b25BcmlhTGFiZWw6IHBocmFzZXMuaGlkZUtleWJvYXJkU2hvcnRjdXRzUGFuZWwsXG4gICAgICBrZXlib2FyZFNob3J0Y3V0czogdGhpcy5rZXlib2FyZFNob3J0Y3V0cyxcbiAgICAgIG9uQ2xvc2VCdXR0b25DbGljazogY2xvc2VLZXlib2FyZFNob3J0Y3V0c1BhbmVsLFxuICAgICAgb25LZXlEb3duOiB0aGlzLm9uS2V5RG93bixcbiAgICAgIHRpdGxlOiBwaHJhc2VzLmtleWJvYXJkU2hvcnRjdXRzXG4gICAgfSkgOiBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKHt9LCAoMCwgX3JlYWN0V2l0aFN0eWxlcy5jc3MpKHN0eWxlcy5EYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0c19wYW5lbCksIHtcbiAgICAgIHJvbGU6IFwiZGlhbG9nXCIsXG4gICAgICBcImFyaWEtbGFiZWxsZWRieVwiOiBcIkRheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzX3RpdGxlXCIsXG4gICAgICBcImFyaWEtZGVzY3JpYmVkYnlcIjogXCJEYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0c19kZXNjcmlwdGlvblwiXG4gICAgfSksIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImRpdlwiLCAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe30sICgwLCBfcmVhY3RXaXRoU3R5bGVzLmNzcykoc3R5bGVzLkRheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzX3RpdGxlKSwge1xuICAgICAgaWQ6IFwiRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHNfdGl0bGVcIlxuICAgIH0pLCBwaHJhc2VzLmtleWJvYXJkU2hvcnRjdXRzKSwgX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsICgwLCBfZXh0ZW5kczJbXCJkZWZhdWx0XCJdKSh7XG4gICAgICByZWY6IHRoaXMuc2V0SGlkZUtleWJvYXJkU2hvcnRjdXRzQnV0dG9uUmVmXG4gICAgfSwgKDAsIF9yZWFjdFdpdGhTdHlsZXMuY3NzKShzdHlsZXMuRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHNfYnV0dG9uUmVzZXQsIHN0eWxlcy5EYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0c19jbG9zZSksIHtcbiAgICAgIHR5cGU6IFwiYnV0dG9uXCIsXG4gICAgICB0YWJJbmRleDogXCIwXCIsXG4gICAgICBcImFyaWEtbGFiZWxcIjogcGhyYXNlcy5oaWRlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCxcbiAgICAgIG9uQ2xpY2s6IGNsb3NlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCxcbiAgICAgIG9uS2V5RG93bjogdGhpcy5vbktleURvd25cbiAgICB9KSwgX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9DbG9zZUJ1dHRvbltcImRlZmF1bHRcIl0sICgwLCBfcmVhY3RXaXRoU3R5bGVzLmNzcykoc3R5bGVzLkRheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzX2Nsb3NlU3ZnKSkpLCBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJ1bFwiLCAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe30sICgwLCBfcmVhY3RXaXRoU3R5bGVzLmNzcykoc3R5bGVzLkRheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzX2xpc3QpLCB7XG4gICAgICBpZDogXCJEYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0c19kZXNjcmlwdGlvblwiXG4gICAgfSksIHRoaXMua2V5Ym9hcmRTaG9ydGN1dHMubWFwKGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgdmFyIHVuaWNvZGUgPSBfcmVmMi51bmljb2RlLFxuICAgICAgICAgIGxhYmVsID0gX3JlZjIubGFiZWwsXG4gICAgICAgICAgYWN0aW9uID0gX3JlZjIuYWN0aW9uO1xuICAgICAgcmV0dXJuIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChfS2V5Ym9hcmRTaG9ydGN1dFJvd1tcImRlZmF1bHRcIl0sIHtcbiAgICAgICAga2V5OiBsYWJlbCxcbiAgICAgICAgdW5pY29kZTogdW5pY29kZSxcbiAgICAgICAgbGFiZWw6IGxhYmVsLFxuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgYmxvY2s6IGJsb2NrXG4gICAgICB9KTtcbiAgICB9KSkpKSk7XG4gIH07XG5cbiAgcmV0dXJuIERheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzO1xufShfcmVhY3RbXCJkZWZhdWx0XCJdLlB1cmVDb21wb25lbnQgfHwgX3JlYWN0W1wiZGVmYXVsdFwiXS5Db21wb25lbnQpO1xuXG5EYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0cy5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBwcm9wVHlwZXMgOiB7fTtcbkRheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9yZWFjdFdpdGhTdHlsZXMud2l0aFN0eWxlcykoZnVuY3Rpb24gKF9yZWYzKSB7XG4gIHZhciBfcmVmMyRyZWFjdERhdGVzID0gX3JlZjMucmVhY3REYXRlcyxcbiAgICAgIGNvbG9yID0gX3JlZjMkcmVhY3REYXRlcy5jb2xvcixcbiAgICAgIGZvbnQgPSBfcmVmMyRyZWFjdERhdGVzLmZvbnQsXG4gICAgICB6SW5kZXggPSBfcmVmMyRyZWFjdERhdGVzLnpJbmRleDtcbiAgcmV0dXJuIHtcbiAgICBEYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0c19idXR0b25SZXNldDoge1xuICAgICAgYmFja2dyb3VuZDogJ25vbmUnLFxuICAgICAgYm9yZGVyOiAwLFxuICAgICAgYm9yZGVyUmFkaXVzOiAwLFxuICAgICAgY29sb3I6ICdpbmhlcml0JyxcbiAgICAgIGZvbnQ6ICdpbmhlcml0JyxcbiAgICAgIGxpbmVIZWlnaHQ6ICdub3JtYWwnLFxuICAgICAgb3ZlcmZsb3c6ICd2aXNpYmxlJyxcbiAgICAgIHBhZGRpbmc6IDAsXG4gICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICAgIGZvbnRTaXplOiBmb250LnNpemUsXG4gICAgICAnOmFjdGl2ZSc6IHtcbiAgICAgICAgb3V0bGluZTogJ25vbmUnXG4gICAgICB9XG4gICAgfSxcbiAgICBEYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0c19zaG93OiB7XG4gICAgICB3aWR0aDogMzMsXG4gICAgICBoZWlnaHQ6IDI2LFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICB6SW5kZXg6IHpJbmRleCArIDIsXG4gICAgICAnOjpiZWZvcmUnOiB7XG4gICAgICAgIGNvbnRlbnQ6ICdcIlwiJyxcbiAgICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZSdcbiAgICAgIH1cbiAgICB9LFxuICAgIERheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzX3Nob3dfX2JvdHRvbVJpZ2h0OiB7XG4gICAgICBib3R0b206IDAsXG4gICAgICByaWdodDogMCxcbiAgICAgICc6OmJlZm9yZSc6IHtcbiAgICAgICAgYm9yZGVyVG9wOiAnMjZweCBzb2xpZCB0cmFuc3BhcmVudCcsXG4gICAgICAgIGJvcmRlclJpZ2h0OiBcIjMzcHggc29saWQgXCIuY29uY2F0KGNvbG9yLmNvcmUucHJpbWFyeSksXG4gICAgICAgIGJvdHRvbTogMCxcbiAgICAgICAgcmlnaHQ6IDBcbiAgICAgIH0sXG4gICAgICAnOmhvdmVyOjpiZWZvcmUnOiB7XG4gICAgICAgIGJvcmRlclJpZ2h0OiBcIjMzcHggc29saWQgXCIuY29uY2F0KGNvbG9yLmNvcmUucHJpbWFyeV9kYXJrKVxuICAgICAgfVxuICAgIH0sXG4gICAgRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHNfc2hvd19fdG9wUmlnaHQ6IHtcbiAgICAgIHRvcDogMCxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgJzo6YmVmb3JlJzoge1xuICAgICAgICBib3JkZXJCb3R0b206ICcyNnB4IHNvbGlkIHRyYW5zcGFyZW50JyxcbiAgICAgICAgYm9yZGVyUmlnaHQ6IFwiMzNweCBzb2xpZCBcIi5jb25jYXQoY29sb3IuY29yZS5wcmltYXJ5KSxcbiAgICAgICAgdG9wOiAwLFxuICAgICAgICByaWdodDogMFxuICAgICAgfSxcbiAgICAgICc6aG92ZXI6OmJlZm9yZSc6IHtcbiAgICAgICAgYm9yZGVyUmlnaHQ6IFwiMzNweCBzb2xpZCBcIi5jb25jYXQoY29sb3IuY29yZS5wcmltYXJ5X2RhcmspXG4gICAgICB9XG4gICAgfSxcbiAgICBEYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0c19zaG93X190b3BMZWZ0OiB7XG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgJzo6YmVmb3JlJzoge1xuICAgICAgICBib3JkZXJCb3R0b206ICcyNnB4IHNvbGlkIHRyYW5zcGFyZW50JyxcbiAgICAgICAgYm9yZGVyTGVmdDogXCIzM3B4IHNvbGlkIFwiLmNvbmNhdChjb2xvci5jb3JlLnByaW1hcnkpLFxuICAgICAgICB0b3A6IDAsXG4gICAgICAgIGxlZnQ6IDBcbiAgICAgIH0sXG4gICAgICAnOmhvdmVyOjpiZWZvcmUnOiB7XG4gICAgICAgIGJvcmRlckxlZnQ6IFwiMzNweCBzb2xpZCBcIi5jb25jYXQoY29sb3IuY29yZS5wcmltYXJ5X2RhcmspXG4gICAgICB9XG4gICAgfSxcbiAgICBEYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0c19zaG93U3Bhbjoge1xuICAgICAgY29sb3I6IGNvbG9yLmNvcmUud2hpdGUsXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJ1xuICAgIH0sXG4gICAgRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHNfc2hvd1NwYW5fX2JvdHRvbVJpZ2h0OiB7XG4gICAgICBib3R0b206IDAsXG4gICAgICByaWdodDogNVxuICAgIH0sXG4gICAgRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHNfc2hvd1NwYW5fX3RvcFJpZ2h0OiB7XG4gICAgICB0b3A6IDEsXG4gICAgICByaWdodDogNVxuICAgIH0sXG4gICAgRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHNfc2hvd1NwYW5fX3RvcExlZnQ6IHtcbiAgICAgIHRvcDogMSxcbiAgICAgIGxlZnQ6IDVcbiAgICB9LFxuICAgIERheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzX3BhbmVsOiB7XG4gICAgICBvdmVyZmxvdzogJ2F1dG8nLFxuICAgICAgYmFja2dyb3VuZDogY29sb3IuYmFja2dyb3VuZCxcbiAgICAgIGJvcmRlcjogXCIxcHggc29saWQgXCIuY29uY2F0KGNvbG9yLmNvcmUuYm9yZGVyKSxcbiAgICAgIGJvcmRlclJhZGl1czogMixcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgdG9wOiAwLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgekluZGV4OiB6SW5kZXggKyAyLFxuICAgICAgcGFkZGluZzogMjIsXG4gICAgICBtYXJnaW46IDMzLFxuICAgICAgdGV4dEFsaWduOiAnbGVmdCcgLy8gVE9ETzogaW52ZXN0aWdhdGUgdXNlIG9mIHRleHQtYWxpZ24gdGhyb3VnaG91dCB0aGUgbGlicmFyeVxuXG4gICAgfSxcbiAgICBEYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0c190aXRsZToge1xuICAgICAgZm9udFNpemU6IDE2LFxuICAgICAgZm9udFdlaWdodDogJ2JvbGQnLFxuICAgICAgbWFyZ2luOiAwXG4gICAgfSxcbiAgICBEYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0c19saXN0OiB7XG4gICAgICBsaXN0U3R5bGU6ICdub25lJyxcbiAgICAgIHBhZGRpbmc6IDAsXG4gICAgICBmb250U2l6ZTogZm9udC5zaXplXG4gICAgfSxcbiAgICBEYXlQaWNrZXJLZXlib2FyZFNob3J0Y3V0c19jbG9zZToge1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICByaWdodDogMjIsXG4gICAgICB0b3A6IDIyLFxuICAgICAgekluZGV4OiB6SW5kZXggKyAyLFxuICAgICAgJzphY3RpdmUnOiB7XG4gICAgICAgIG91dGxpbmU6ICdub25lJ1xuICAgICAgfVxuICAgIH0sXG4gICAgRGF5UGlja2VyS2V5Ym9hcmRTaG9ydGN1dHNfY2xvc2VTdmc6IHtcbiAgICAgIGhlaWdodDogMTUsXG4gICAgICB3aWR0aDogMTUsXG4gICAgICBmaWxsOiBjb2xvci5jb3JlLmdyYXlMaWdodGVyLFxuICAgICAgJzpob3Zlcic6IHtcbiAgICAgICAgZmlsbDogY29sb3IuY29yZS5ncmF5TGlnaHRcbiAgICAgIH0sXG4gICAgICAnOmZvY3VzJzoge1xuICAgICAgICBmaWxsOiBjb2xvci5jb3JlLmdyYXlMaWdodFxuICAgICAgfVxuICAgIH1cbiAgfTtcbn0sIHtcbiAgcHVyZUNvbXBvbmVudDogdHlwZW9mIF9yZWFjdFtcImRlZmF1bHRcIl0uUHVyZUNvbXBvbmVudCAhPT0gJ3VuZGVmaW5lZCdcbn0pKERheVBpY2tlcktleWJvYXJkU2hvcnRjdXRzKTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcblxudmFyIF9leHRlbmRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXh0ZW5kc1wiKSk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eVwiKSk7XG5cbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG5cbnZhciBfYWlyYm5iUHJvcFR5cGVzID0gcmVxdWlyZShcImFpcmJuYi1wcm9wLXR5cGVzXCIpO1xuXG52YXIgX3JlYWN0V2l0aFN0eWxlcyA9IHJlcXVpcmUoXCJyZWFjdC13aXRoLXN0eWxlc1wiKTtcblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgKDAsIF9kZWZpbmVQcm9wZXJ0eTJbXCJkZWZhdWx0XCJdKSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG52YXIgcHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF9haXJibmJQcm9wVHlwZXMuZm9yYmlkRXh0cmFQcm9wcykoX29iamVjdFNwcmVhZCh7fSwgX3JlYWN0V2l0aFN0eWxlcy53aXRoU3R5bGVzUHJvcFR5cGVzLCB7XG4gIHVuaWNvZGU6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZy5pc1JlcXVpcmVkLFxuICBsYWJlbDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGFjdGlvbjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLmlzUmVxdWlyZWQsXG4gIGJsb2NrOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sXG59KSkgOiB7fTtcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGJsb2NrOiBmYWxzZVxufTtcblxuZnVuY3Rpb24gS2V5Ym9hcmRTaG9ydGN1dFJvdyhfcmVmKSB7XG4gIHZhciB1bmljb2RlID0gX3JlZi51bmljb2RlLFxuICAgICAgbGFiZWwgPSBfcmVmLmxhYmVsLFxuICAgICAgYWN0aW9uID0gX3JlZi5hY3Rpb24sXG4gICAgICBibG9jayA9IF9yZWYuYmxvY2ssXG4gICAgICBzdHlsZXMgPSBfcmVmLnN0eWxlcztcbiAgcmV0dXJuIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImxpXCIsICgwLCBfcmVhY3RXaXRoU3R5bGVzLmNzcykoc3R5bGVzLktleWJvYXJkU2hvcnRjdXRSb3csIGJsb2NrICYmIHN0eWxlcy5LZXlib2FyZFNob3J0Y3V0Um93X19ibG9jayksIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImRpdlwiLCAoMCwgX3JlYWN0V2l0aFN0eWxlcy5jc3MpKHN0eWxlcy5LZXlib2FyZFNob3J0Y3V0Um93X2tleUNvbnRhaW5lciwgYmxvY2sgJiYgc3R5bGVzLktleWJvYXJkU2hvcnRjdXRSb3dfa2V5Q29udGFpbmVyX19ibG9jayksIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcInNwYW5cIiwgKDAsIF9leHRlbmRzMltcImRlZmF1bHRcIl0pKHt9LCAoMCwgX3JlYWN0V2l0aFN0eWxlcy5jc3MpKHN0eWxlcy5LZXlib2FyZFNob3J0Y3V0Um93X2tleSksIHtcbiAgICByb2xlOiBcImltZ1wiLFxuICAgIFwiYXJpYS1sYWJlbFwiOiBcIlwiLmNvbmNhdChsYWJlbCwgXCIsXCIpIC8vIGFkZCBjb21tYSBzbyBzY3JlZW4gcmVhZGVycyB3aWxsIHBhdXNlIGJlZm9yZSByZWFkaW5nIGFjdGlvblxuXG4gIH0pLCB1bmljb2RlKSksIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImRpdlwiLCAoMCwgX3JlYWN0V2l0aFN0eWxlcy5jc3MpKHN0eWxlcy5LZXlib2FyZFNob3J0Y3V0Um93X2FjdGlvbiksIGFjdGlvbikpO1xufVxuXG5LZXlib2FyZFNob3J0Y3V0Um93LnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHByb3BUeXBlcyA6IHt9O1xuS2V5Ym9hcmRTaG9ydGN1dFJvdy5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfcmVhY3RXaXRoU3R5bGVzLndpdGhTdHlsZXMpKGZ1bmN0aW9uIChfcmVmMikge1xuICB2YXIgY29sb3IgPSBfcmVmMi5yZWFjdERhdGVzLmNvbG9yO1xuICByZXR1cm4ge1xuICAgIEtleWJvYXJkU2hvcnRjdXRSb3c6IHtcbiAgICAgIGxpc3RTdHlsZTogJ25vbmUnLFxuICAgICAgbWFyZ2luOiAnNnB4IDAnXG4gICAgfSxcbiAgICBLZXlib2FyZFNob3J0Y3V0Um93X19ibG9jazoge1xuICAgICAgbWFyZ2luQm90dG9tOiAxNlxuICAgIH0sXG4gICAgS2V5Ym9hcmRTaG9ydGN1dFJvd19rZXlDb250YWluZXI6IHtcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG4gICAgICB0ZXh0QWxpZ246ICdyaWdodCcsXG4gICAgICAvLyBpcyBub3QgaGFuZGxlZCBieSBpc1JUTFxuICAgICAgbWFyZ2luUmlnaHQ6IDYgLy8gaXMgbm90IGhhbmRsZWQgYnkgaXNSVExcblxuICAgIH0sXG4gICAgS2V5Ym9hcmRTaG9ydGN1dFJvd19rZXlDb250YWluZXJfX2Jsb2NrOiB7XG4gICAgICB0ZXh0QWxpZ246ICdsZWZ0JyxcbiAgICAgIC8vIGlzIG5vdCBoYW5kbGVkIGJ5IGlzUlRMXG4gICAgICBkaXNwbGF5OiAnaW5saW5lJ1xuICAgIH0sXG4gICAgS2V5Ym9hcmRTaG9ydGN1dFJvd19rZXk6IHtcbiAgICAgIGZvbnRGYW1pbHk6ICdtb25vc3BhY2UnLFxuICAgICAgZm9udFNpemU6IDEyLFxuICAgICAgdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZScsXG4gICAgICBiYWNrZ3JvdW5kOiBjb2xvci5jb3JlLmdyYXlMaWdodGVzdCxcbiAgICAgIHBhZGRpbmc6ICcycHggNnB4J1xuICAgIH0sXG4gICAgS2V5Ym9hcmRTaG9ydGN1dFJvd19hY3Rpb246IHtcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUnLFxuICAgICAgd29yZEJyZWFrOiAnYnJlYWstd29yZCcsXG4gICAgICBtYXJnaW5MZWZ0OiA4IC8vIGlzIG5vdCBoYW5kbGVkIGJ5IGlzUlRMXG5cbiAgICB9XG4gIH07XG59LCB7XG4gIHB1cmVDb21wb25lbnQ6IHR5cGVvZiBfcmVhY3RbXCJkZWZhdWx0XCJdLlB1cmVDb21wb25lbnQgIT09ICd1bmRlZmluZWQnXG59KShLZXlib2FyZFNob3J0Y3V0Um93KTtcblxuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGdldE51bWJlck9mQ2FsZW5kYXJNb250aFdlZWtzO1xuXG52YXIgX21vbWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIm1vbWVudFwiKSk7XG5cbmZ1bmN0aW9uIGdldEJsYW5rRGF5c0JlZm9yZUZpcnN0RGF5KGZpcnN0RGF5T2ZNb250aCwgZmlyc3REYXlPZldlZWspIHtcbiAgdmFyIHdlZWtEYXlEaWZmID0gZmlyc3REYXlPZk1vbnRoLmRheSgpIC0gZmlyc3REYXlPZldlZWs7XG4gIHJldHVybiAod2Vla0RheURpZmYgKyA3KSAlIDc7XG59XG5cbmZ1bmN0aW9uIGdldE51bWJlck9mQ2FsZW5kYXJNb250aFdlZWtzKG1vbnRoKSB7XG4gIHZhciBmaXJzdERheU9mV2VlayA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogX21vbWVudFtcImRlZmF1bHRcIl0ubG9jYWxlRGF0YSgpLmZpcnN0RGF5T2ZXZWVrKCk7XG4gIHZhciBmaXJzdERheU9mTW9udGggPSBtb250aC5jbG9uZSgpLnN0YXJ0T2YoJ21vbnRoJyk7XG4gIHZhciBudW1CbGFua0RheXMgPSBnZXRCbGFua0RheXNCZWZvcmVGaXJzdERheShmaXJzdERheU9mTW9udGgsIGZpcnN0RGF5T2ZXZWVrKTtcbiAgcmV0dXJuIE1hdGguY2VpbCgobnVtQmxhbmtEYXlzICsgbW9udGguZGF5c0luTW9udGgoKSkgLyA3KTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gZ2V0QWN0aXZlRWxlbWVudDtcblxuZnVuY3Rpb24gZ2V0QWN0aXZlRWxlbWVudCgpIHtcbiAgcmV0dXJuIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGV4cG9ydHMuUHVyZVNpbmdsZURhdGVQaWNrZXIgPSB2b2lkIDA7XG5cbnZhciBfZW56eW1lU2hhbGxvd0VxdWFsID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZW56eW1lLXNoYWxsb3ctZXF1YWxcIikpO1xuXG52YXIgX2V4dGVuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9leHRlbmRzXCIpKTtcblxudmFyIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpO1xuXG52YXIgX2luaGVyaXRzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5XCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9tb21lbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJtb21lbnRcIikpO1xuXG52YXIgX3JlYWN0V2l0aFN0eWxlcyA9IHJlcXVpcmUoXCJyZWFjdC13aXRoLXN0eWxlc1wiKTtcblxudmFyIF9yZWFjdFBvcnRhbCA9IHJlcXVpcmUoXCJyZWFjdC1wb3J0YWxcIik7XG5cbnZhciBfYWlyYm5iUHJvcFR5cGVzID0gcmVxdWlyZShcImFpcmJuYi1wcm9wLXR5cGVzXCIpO1xuXG52YXIgX2NvbnNvbGlkYXRlZEV2ZW50cyA9IHJlcXVpcmUoXCJjb25zb2xpZGF0ZWQtZXZlbnRzXCIpO1xuXG52YXIgX2lzVG91Y2hEZXZpY2UgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJpcy10b3VjaC1kZXZpY2VcIikpO1xuXG52YXIgX3JlYWN0T3V0c2lkZUNsaWNrSGFuZGxlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0LW91dHNpZGUtY2xpY2staGFuZGxlclwiKSk7XG5cbnZhciBfU2luZ2xlRGF0ZVBpY2tlclNoYXBlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc2hhcGVzL1NpbmdsZURhdGVQaWNrZXJTaGFwZVwiKSk7XG5cbnZhciBfZGVmYXVsdFBocmFzZXMgPSByZXF1aXJlKFwiLi4vZGVmYXVsdFBocmFzZXNcIik7XG5cbnZhciBfZ2V0UmVzcG9uc2l2ZUNvbnRhaW5lclN0eWxlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2dldFJlc3BvbnNpdmVDb250YWluZXJTdHlsZXNcIikpO1xuXG52YXIgX2dldERldGFjaGVkQ29udGFpbmVyU3R5bGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvZ2V0RGV0YWNoZWRDb250YWluZXJTdHlsZXNcIikpO1xuXG52YXIgX2dldElucHV0SGVpZ2h0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvZ2V0SW5wdXRIZWlnaHRcIikpO1xuXG52YXIgX2lzSW5jbHVzaXZlbHlBZnRlckRheSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2lzSW5jbHVzaXZlbHlBZnRlckRheVwiKSk7XG5cbnZhciBfZGlzYWJsZVNjcm9sbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9kaXNhYmxlU2Nyb2xsXCIpKTtcblxudmFyIF9ub2ZsaXAgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi91dGlscy9ub2ZsaXBcIikpO1xuXG52YXIgX1NpbmdsZURhdGVQaWNrZXJJbnB1dENvbnRyb2xsZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1NpbmdsZURhdGVQaWNrZXJJbnB1dENvbnRyb2xsZXJcIikpO1xuXG52YXIgX0RheVBpY2tlclNpbmdsZURhdGVDb250cm9sbGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9EYXlQaWNrZXJTaW5nbGVEYXRlQ29udHJvbGxlclwiKSk7XG5cbnZhciBfQ2xvc2VCdXR0b24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0Nsb3NlQnV0dG9uXCIpKTtcblxudmFyIF9jb25zdGFudHMgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzXCIpO1xuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyAoMCwgX2RlZmluZVByb3BlcnR5MltcImRlZmF1bHRcIl0pKHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbnZhciBwcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX2FpcmJuYlByb3BUeXBlcy5mb3JiaWRFeHRyYVByb3BzKShfb2JqZWN0U3ByZWFkKHt9LCBfcmVhY3RXaXRoU3R5bGVzLndpdGhTdHlsZXNQcm9wVHlwZXMsIHt9LCBfU2luZ2xlRGF0ZVBpY2tlclNoYXBlW1wiZGVmYXVsdFwiXSkpIDoge307XG52YXIgZGVmYXVsdFByb3BzID0ge1xuICAvLyByZXF1aXJlZCBwcm9wcyBmb3IgYSBmdW5jdGlvbmFsIGludGVyYWN0aXZlIFNpbmdsZURhdGVQaWNrZXJcbiAgZGF0ZTogbnVsbCxcbiAgZm9jdXNlZDogZmFsc2UsXG4gIC8vIGlucHV0IHJlbGF0ZWQgcHJvcHNcbiAgaWQ6ICdkYXRlJyxcbiAgcGxhY2Vob2xkZXI6ICdEYXRlJyxcbiAgYXJpYUxhYmVsOiB1bmRlZmluZWQsXG4gIGRpc2FibGVkOiBmYWxzZSxcbiAgcmVxdWlyZWQ6IGZhbHNlLFxuICByZWFkT25seTogZmFsc2UsXG4gIHNjcmVlblJlYWRlcklucHV0TWVzc2FnZTogJycsXG4gIHNob3dDbGVhckRhdGU6IGZhbHNlLFxuICBzaG93RGVmYXVsdElucHV0SWNvbjogZmFsc2UsXG4gIGlucHV0SWNvblBvc2l0aW9uOiBfY29uc3RhbnRzLklDT05fQkVGT1JFX1BPU0lUSU9OLFxuICBjdXN0b21JbnB1dEljb246IG51bGwsXG4gIGN1c3RvbUNsb3NlSWNvbjogbnVsbCxcbiAgbm9Cb3JkZXI6IGZhbHNlLFxuICBibG9jazogZmFsc2UsXG4gIHNtYWxsOiBmYWxzZSxcbiAgcmVndWxhcjogZmFsc2UsXG4gIHZlcnRpY2FsU3BhY2luZzogX2NvbnN0YW50cy5ERUZBVUxUX1ZFUlRJQ0FMX1NQQUNJTkcsXG4gIGtlZXBGb2N1c09uSW5wdXQ6IGZhbHNlLFxuICAvLyBjYWxlbmRhciBwcmVzZW50YXRpb24gYW5kIGludGVyYWN0aW9uIHJlbGF0ZWQgcHJvcHNcbiAgb3JpZW50YXRpb246IF9jb25zdGFudHMuSE9SSVpPTlRBTF9PUklFTlRBVElPTixcbiAgYW5jaG9yRGlyZWN0aW9uOiBfY29uc3RhbnRzLkFOQ0hPUl9MRUZULFxuICBvcGVuRGlyZWN0aW9uOiBfY29uc3RhbnRzLk9QRU5fRE9XTixcbiAgaG9yaXpvbnRhbE1hcmdpbjogMCxcbiAgd2l0aFBvcnRhbDogZmFsc2UsXG4gIHdpdGhGdWxsU2NyZWVuUG9ydGFsOiBmYWxzZSxcbiAgYXBwZW5kVG9Cb2R5OiBmYWxzZSxcbiAgZGlzYWJsZVNjcm9sbDogZmFsc2UsXG4gIGluaXRpYWxWaXNpYmxlTW9udGg6IG51bGwsXG4gIGZpcnN0RGF5T2ZXZWVrOiBudWxsLFxuICBudW1iZXJPZk1vbnRoczogMixcbiAga2VlcE9wZW5PbkRhdGVTZWxlY3Q6IGZhbHNlLFxuICByZW9wZW5QaWNrZXJPbkNsZWFyRGF0ZTogZmFsc2UsXG4gIHJlbmRlckNhbGVuZGFySW5mbzogbnVsbCxcbiAgY2FsZW5kYXJJbmZvUG9zaXRpb246IF9jb25zdGFudHMuSU5GT19QT1NJVElPTl9CT1RUT00sXG4gIGhpZGVLZXlib2FyZFNob3J0Y3V0c1BhbmVsOiBmYWxzZSxcbiAgZGF5U2l6ZTogX2NvbnN0YW50cy5EQVlfU0laRSxcbiAgaXNSVEw6IGZhbHNlLFxuICB2ZXJ0aWNhbEhlaWdodDogbnVsbCxcbiAgdHJhbnNpdGlvbkR1cmF0aW9uOiB1bmRlZmluZWQsXG4gIGhvcml6b250YWxNb250aFBhZGRpbmc6IDEzLFxuICAvLyBuYXZpZ2F0aW9uIHJlbGF0ZWQgcHJvcHNcbiAgZGF5UGlja2VyTmF2aWdhdGlvbklubGluZVN0eWxlczogbnVsbCxcbiAgbmF2UG9zaXRpb246IF9jb25zdGFudHMuTkFWX1BPU0lUSU9OX1RPUCxcbiAgbmF2UHJldjogbnVsbCxcbiAgbmF2TmV4dDogbnVsbCxcbiAgcmVuZGVyTmF2UHJldkJ1dHRvbjogbnVsbCxcbiAgcmVuZGVyTmF2TmV4dEJ1dHRvbjogbnVsbCxcbiAgb25QcmV2TW9udGhDbGljazogZnVuY3Rpb24gb25QcmV2TW9udGhDbGljaygpIHt9LFxuICBvbk5leHRNb250aENsaWNrOiBmdW5jdGlvbiBvbk5leHRNb250aENsaWNrKCkge30sXG4gIG9uQ2xvc2U6IGZ1bmN0aW9uIG9uQ2xvc2UoKSB7fSxcbiAgLy8gbW9udGggcHJlc2VudGF0aW9uIGFuZCBpbnRlcmFjdGlvbiByZWxhdGVkIHByb3BzXG4gIHJlbmRlck1vbnRoVGV4dDogbnVsbCxcbiAgcmVuZGVyV2Vla0hlYWRlckVsZW1lbnQ6IG51bGwsXG4gIC8vIGRheSBwcmVzZW50YXRpb24gYW5kIGludGVyYWN0aW9uIHJlbGF0ZWQgcHJvcHNcbiAgcmVuZGVyQ2FsZW5kYXJEYXk6IHVuZGVmaW5lZCxcbiAgcmVuZGVyRGF5Q29udGVudHM6IG51bGwsXG4gIHJlbmRlck1vbnRoRWxlbWVudDogbnVsbCxcbiAgZW5hYmxlT3V0c2lkZURheXM6IGZhbHNlLFxuICBpc0RheUJsb2NrZWQ6IGZ1bmN0aW9uIGlzRGF5QmxvY2tlZCgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIGlzT3V0c2lkZVJhbmdlOiBmdW5jdGlvbiBpc091dHNpZGVSYW5nZShkYXkpIHtcbiAgICByZXR1cm4gISgwLCBfaXNJbmNsdXNpdmVseUFmdGVyRGF5W1wiZGVmYXVsdFwiXSkoZGF5LCAoMCwgX21vbWVudFtcImRlZmF1bHRcIl0pKCkpO1xuICB9LFxuICBpc0RheUhpZ2hsaWdodGVkOiBmdW5jdGlvbiBpc0RheUhpZ2hsaWdodGVkKCkge30sXG4gIC8vIGludGVybmF0aW9uYWxpemF0aW9uIHByb3BzXG4gIGRpc3BsYXlGb3JtYXQ6IGZ1bmN0aW9uIGRpc3BsYXlGb3JtYXQoKSB7XG4gICAgcmV0dXJuIF9tb21lbnRbXCJkZWZhdWx0XCJdLmxvY2FsZURhdGEoKS5sb25nRGF0ZUZvcm1hdCgnTCcpO1xuICB9LFxuICBtb250aEZvcm1hdDogJ01NTU0gWVlZWScsXG4gIHdlZWtEYXlGb3JtYXQ6ICdkZCcsXG4gIHBocmFzZXM6IF9kZWZhdWx0UGhyYXNlcy5TaW5nbGVEYXRlUGlja2VyUGhyYXNlcyxcbiAgZGF5QXJpYUxhYmVsRm9ybWF0OiB1bmRlZmluZWRcbn07XG5cbnZhciBTaW5nbGVEYXRlUGlja2VyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfcmVmKSB7XG4gICgwLCBfaW5oZXJpdHNMb29zZTJbXCJkZWZhdWx0XCJdKShTaW5nbGVEYXRlUGlja2VyLCBfcmVmKTtcbiAgdmFyIF9wcm90byA9IFNpbmdsZURhdGVQaWNrZXIucHJvdG90eXBlO1xuXG4gIF9wcm90b1shX3JlYWN0W1wiZGVmYXVsdFwiXS5QdXJlQ29tcG9uZW50ICYmIFwic2hvdWxkQ29tcG9uZW50VXBkYXRlXCJdID0gZnVuY3Rpb24gKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gICAgcmV0dXJuICEoMCwgX2VuenltZVNoYWxsb3dFcXVhbFtcImRlZmF1bHRcIl0pKHRoaXMucHJvcHMsIG5leHRQcm9wcykgfHwgISgwLCBfZW56eW1lU2hhbGxvd0VxdWFsW1wiZGVmYXVsdFwiXSkodGhpcy5zdGF0ZSwgbmV4dFN0YXRlKTtcbiAgfTtcblxuICBmdW5jdGlvbiBTaW5nbGVEYXRlUGlja2VyKHByb3BzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfcmVmLmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XG4gICAgX3RoaXMuaXNUb3VjaERldmljZSA9IGZhbHNlO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgZGF5UGlja2VyQ29udGFpbmVyU3R5bGVzOiB7fSxcbiAgICAgIGlzRGF5UGlja2VyRm9jdXNlZDogZmFsc2UsXG4gICAgICBpc0lucHV0Rm9jdXNlZDogZmFsc2UsXG4gICAgICBzaG93S2V5Ym9hcmRTaG9ydGN1dHM6IGZhbHNlXG4gICAgfTtcbiAgICBfdGhpcy5vbkZvY3VzT3V0ID0gX3RoaXMub25Gb2N1c091dC5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgX3RoaXMub25PdXRzaWRlQ2xpY2sgPSBfdGhpcy5vbk91dHNpZGVDbGljay5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgX3RoaXMub25JbnB1dEZvY3VzID0gX3RoaXMub25JbnB1dEZvY3VzLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5vbkRheVBpY2tlckZvY3VzID0gX3RoaXMub25EYXlQaWNrZXJGb2N1cy5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgX3RoaXMub25EYXlQaWNrZXJCbHVyID0gX3RoaXMub25EYXlQaWNrZXJCbHVyLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5zaG93S2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCA9IF90aGlzLnNob3dLZXlib2FyZFNob3J0Y3V0c1BhbmVsLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5yZXNwb25zaXZpemVQaWNrZXJQb3NpdGlvbiA9IF90aGlzLnJlc3BvbnNpdml6ZVBpY2tlclBvc2l0aW9uLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5kaXNhYmxlU2Nyb2xsID0gX3RoaXMuZGlzYWJsZVNjcm9sbC5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgX3RoaXMuc2V0RGF5UGlja2VyQ29udGFpbmVyUmVmID0gX3RoaXMuc2V0RGF5UGlja2VyQ29udGFpbmVyUmVmLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICBfdGhpcy5zZXRDb250YWluZXJSZWYgPSBfdGhpcy5zZXRDb250YWluZXJSZWYuYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcykpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuXG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5yZW1vdmVSZXNpemVFdmVudExpc3RlbmVyID0gKDAsIF9jb25zb2xpZGF0ZWRFdmVudHMuYWRkRXZlbnRMaXN0ZW5lcikod2luZG93LCAncmVzaXplJywgdGhpcy5yZXNwb25zaXZpemVQaWNrZXJQb3NpdGlvbiwge1xuICAgICAgcGFzc2l2ZTogdHJ1ZVxuICAgIH0pO1xuICAgIHRoaXMucmVzcG9uc2l2aXplUGlja2VyUG9zaXRpb24oKTtcbiAgICB0aGlzLmRpc2FibGVTY3JvbGwoKTtcbiAgICB2YXIgZm9jdXNlZCA9IHRoaXMucHJvcHMuZm9jdXNlZDtcblxuICAgIGlmIChmb2N1c2VkKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgaXNJbnB1dEZvY3VzZWQ6IHRydWVcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMuaXNUb3VjaERldmljZSA9ICgwLCBfaXNUb3VjaERldmljZVtcImRlZmF1bHRcIl0pKCk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICB2YXIgZm9jdXNlZCA9IHRoaXMucHJvcHMuZm9jdXNlZDtcblxuICAgIGlmICghcHJldlByb3BzLmZvY3VzZWQgJiYgZm9jdXNlZCkge1xuICAgICAgdGhpcy5yZXNwb25zaXZpemVQaWNrZXJQb3NpdGlvbigpO1xuICAgICAgdGhpcy5kaXNhYmxlU2Nyb2xsKCk7XG4gICAgfSBlbHNlIGlmIChwcmV2UHJvcHMuZm9jdXNlZCAmJiAhZm9jdXNlZCkge1xuICAgICAgaWYgKHRoaXMuZW5hYmxlU2Nyb2xsKSB0aGlzLmVuYWJsZVNjcm9sbCgpO1xuICAgIH1cbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICA7XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMucmVtb3ZlUmVzaXplRXZlbnRMaXN0ZW5lcikgdGhpcy5yZW1vdmVSZXNpemVFdmVudExpc3RlbmVyKCk7XG4gICAgaWYgKHRoaXMucmVtb3ZlRm9jdXNPdXRFdmVudExpc3RlbmVyKSB0aGlzLnJlbW92ZUZvY3VzT3V0RXZlbnRMaXN0ZW5lcigpO1xuICAgIGlmICh0aGlzLmVuYWJsZVNjcm9sbCkgdGhpcy5lbmFibGVTY3JvbGwoKTtcbiAgfTtcblxuICBfcHJvdG8ub25PdXRzaWRlQ2xpY2sgPSBmdW5jdGlvbiBvbk91dHNpZGVDbGljayhldmVudCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGZvY3VzZWQgPSBfdGhpcyRwcm9wcy5mb2N1c2VkLFxuICAgICAgICBvbkZvY3VzQ2hhbmdlID0gX3RoaXMkcHJvcHMub25Gb2N1c0NoYW5nZSxcbiAgICAgICAgb25DbG9zZSA9IF90aGlzJHByb3BzLm9uQ2xvc2UsXG4gICAgICAgIGRhdGUgPSBfdGhpcyRwcm9wcy5kYXRlLFxuICAgICAgICBhcHBlbmRUb0JvZHkgPSBfdGhpcyRwcm9wcy5hcHBlbmRUb0JvZHk7XG4gICAgaWYgKCFmb2N1c2VkKSByZXR1cm47XG4gICAgaWYgKGFwcGVuZFRvQm9keSAmJiB0aGlzLmRheVBpY2tlckNvbnRhaW5lci5jb250YWlucyhldmVudC50YXJnZXQpKSByZXR1cm47XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBpc0lucHV0Rm9jdXNlZDogZmFsc2UsXG4gICAgICBpc0RheVBpY2tlckZvY3VzZWQ6IGZhbHNlLFxuICAgICAgc2hvd0tleWJvYXJkU2hvcnRjdXRzOiBmYWxzZVxuICAgIH0pO1xuICAgIG9uRm9jdXNDaGFuZ2Uoe1xuICAgICAgZm9jdXNlZDogZmFsc2VcbiAgICB9KTtcbiAgICBvbkNsb3NlKHtcbiAgICAgIGRhdGU6IGRhdGVcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8ub25JbnB1dEZvY3VzID0gZnVuY3Rpb24gb25JbnB1dEZvY3VzKF9yZWYyKSB7XG4gICAgdmFyIGZvY3VzZWQgPSBfcmVmMi5mb2N1c2VkO1xuICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICBvbkZvY3VzQ2hhbmdlID0gX3RoaXMkcHJvcHMyLm9uRm9jdXNDaGFuZ2UsXG4gICAgICAgIHJlYWRPbmx5ID0gX3RoaXMkcHJvcHMyLnJlYWRPbmx5LFxuICAgICAgICB3aXRoUG9ydGFsID0gX3RoaXMkcHJvcHMyLndpdGhQb3J0YWwsXG4gICAgICAgIHdpdGhGdWxsU2NyZWVuUG9ydGFsID0gX3RoaXMkcHJvcHMyLndpdGhGdWxsU2NyZWVuUG9ydGFsLFxuICAgICAgICBrZWVwRm9jdXNPbklucHV0ID0gX3RoaXMkcHJvcHMyLmtlZXBGb2N1c09uSW5wdXQ7XG5cbiAgICBpZiAoZm9jdXNlZCkge1xuICAgICAgdmFyIHdpdGhBbnlQb3J0YWwgPSB3aXRoUG9ydGFsIHx8IHdpdGhGdWxsU2NyZWVuUG9ydGFsO1xuICAgICAgdmFyIG1vdmVGb2N1c1RvRGF5UGlja2VyID0gd2l0aEFueVBvcnRhbCB8fCByZWFkT25seSAmJiAha2VlcEZvY3VzT25JbnB1dCB8fCB0aGlzLmlzVG91Y2hEZXZpY2UgJiYgIWtlZXBGb2N1c09uSW5wdXQ7XG5cbiAgICAgIGlmIChtb3ZlRm9jdXNUb0RheVBpY2tlcikge1xuICAgICAgICB0aGlzLm9uRGF5UGlja2VyRm9jdXMoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMub25EYXlQaWNrZXJCbHVyKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgb25Gb2N1c0NoYW5nZSh7XG4gICAgICBmb2N1c2VkOiBmb2N1c2VkXG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLm9uRGF5UGlja2VyRm9jdXMgPSBmdW5jdGlvbiBvbkRheVBpY2tlckZvY3VzKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgaXNJbnB1dEZvY3VzZWQ6IGZhbHNlLFxuICAgICAgaXNEYXlQaWNrZXJGb2N1c2VkOiB0cnVlLFxuICAgICAgc2hvd0tleWJvYXJkU2hvcnRjdXRzOiBmYWxzZVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5vbkRheVBpY2tlckJsdXIgPSBmdW5jdGlvbiBvbkRheVBpY2tlckJsdXIoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBpc0lucHV0Rm9jdXNlZDogdHJ1ZSxcbiAgICAgIGlzRGF5UGlja2VyRm9jdXNlZDogZmFsc2UsXG4gICAgICBzaG93S2V5Ym9hcmRTaG9ydGN1dHM6IGZhbHNlXG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLm9uRm9jdXNPdXQgPSBmdW5jdGlvbiBvbkZvY3VzT3V0KGUpIHtcbiAgICB2YXIgb25Gb2N1c0NoYW5nZSA9IHRoaXMucHJvcHMub25Gb2N1c0NoYW5nZTsgLy8gSW4gY2FzZXMgd2hlcmUgKipyZWxhdGVkVGFyZ2V0KiogaXMgbm90IG51bGwsIGl0IHBvaW50cyB0byB0aGUgcmlnaHRcbiAgICAvLyBlbGVtZW50IGhlcmUuIEhvd2V2ZXIsIGluIGNhc2VzIHdoZXJlIGl0IGlzIG51bGwgKHN1Y2ggYXMgY2xpY2tpbmcgb24gYVxuICAgIC8vIHNwZWNpZmljIGRheSkgb3IgaXQgaXMgKipkb2N1bWVudC5ib2R5KiogKElFMTEpLCB0aGUgYXBwcm9wcmlhdGUgdmFsdWUgaXMgKipldmVudC50YXJnZXQqKi5cbiAgICAvL1xuICAgIC8vIFdlIGhhbmRsZSBib3RoIHNpdHVhdGlvbnMgaGVyZSBieSB1c2luZyB0aGUgYCB8fCBgIG9wZXJhdG9yIHRvIGZhbGxiYWNrXG4gICAgLy8gdG8gKmV2ZW50LnRhcmdldCoqIHdoZW4gKipyZWxhdGVkVGFyZ2V0KiogaXMgbm90IHByb3ZpZGVkLlxuXG4gICAgdmFyIHJlbGF0ZWRUYXJnZXQgPSBlLnJlbGF0ZWRUYXJnZXQgPT09IGRvY3VtZW50LmJvZHkgPyBlLnRhcmdldCA6IGUucmVsYXRlZFRhcmdldCB8fCBlLnRhcmdldDtcbiAgICBpZiAodGhpcy5kYXlQaWNrZXJDb250YWluZXIuY29udGFpbnMocmVsYXRlZFRhcmdldCkpIHJldHVybjtcbiAgICBvbkZvY3VzQ2hhbmdlKHtcbiAgICAgIGZvY3VzZWQ6IGZhbHNlXG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLnNldERheVBpY2tlckNvbnRhaW5lclJlZiA9IGZ1bmN0aW9uIHNldERheVBpY2tlckNvbnRhaW5lclJlZihyZWYpIHtcbiAgICBpZiAocmVmID09PSB0aGlzLmRheVBpY2tlckNvbnRhaW5lcikgcmV0dXJuO1xuICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB0aGlzLmRheVBpY2tlckNvbnRhaW5lciA9IHJlZjtcbiAgICBpZiAoIXJlZikgcmV0dXJuO1xuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKTtcbiAgfTtcblxuICBfcHJvdG8uc2V0Q29udGFpbmVyUmVmID0gZnVuY3Rpb24gc2V0Q29udGFpbmVyUmVmKHJlZikge1xuICAgIHRoaXMuY29udGFpbmVyID0gcmVmO1xuICB9O1xuXG4gIF9wcm90by5hZGRFdmVudExpc3RlbmVycyA9IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIC8vIFdlIG1hbnVhbGx5IHNldCBldmVudCBiZWNhdXNlIFJlYWN0IGhhcyBub3QgaW1wbGVtZW50ZWQgb25Gb2N1c0luL29uRm9jdXNPdXQuXG4gICAgLy8gS2VlcCBhbiBleWUgb24gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy82NDEwIGZvciB1cGRhdGVzXG4gICAgLy8gV2UgdXNlIFwiYmx1ciB3LyB1c2VDYXB0dXJlIHBhcmFtXCIgdnMgXCJvbmZvY3Vzb3V0XCIgZm9yIEZGIGJyb3dzZXIgc3VwcG9ydFxuICAgIHRoaXMucmVtb3ZlRm9jdXNPdXRFdmVudExpc3RlbmVyID0gKDAsIF9jb25zb2xpZGF0ZWRFdmVudHMuYWRkRXZlbnRMaXN0ZW5lcikodGhpcy5kYXlQaWNrZXJDb250YWluZXIsICdmb2N1c291dCcsIHRoaXMub25Gb2N1c091dCk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbW92ZUV2ZW50TGlzdGVuZXJzID0gZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgaWYgKHRoaXMucmVtb3ZlRm9jdXNPdXRFdmVudExpc3RlbmVyKSB0aGlzLnJlbW92ZUZvY3VzT3V0RXZlbnRMaXN0ZW5lcigpO1xuICB9O1xuXG4gIF9wcm90by5kaXNhYmxlU2Nyb2xsID0gZnVuY3Rpb24gZGlzYWJsZVNjcm9sbCgpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgYXBwZW5kVG9Cb2R5ID0gX3RoaXMkcHJvcHMzLmFwcGVuZFRvQm9keSxcbiAgICAgICAgcHJvcERpc2FibGVTY3JvbGwgPSBfdGhpcyRwcm9wczMuZGlzYWJsZVNjcm9sbCxcbiAgICAgICAgZm9jdXNlZCA9IF90aGlzJHByb3BzMy5mb2N1c2VkO1xuICAgIGlmICghYXBwZW5kVG9Cb2R5ICYmICFwcm9wRGlzYWJsZVNjcm9sbCkgcmV0dXJuO1xuICAgIGlmICghZm9jdXNlZCkgcmV0dXJuOyAvLyBEaXNhYmxlIHNjcm9sbCBmb3IgZXZlcnkgYW5jZXN0b3Igb2YgdGhpcyA8U2luZ2xlRGF0ZVBpY2tlcj4gdXAgdG8gdGhlXG4gICAgLy8gZG9jdW1lbnQgbGV2ZWwuIFRoaXMgZW5zdXJlcyB0aGUgaW5wdXQgYW5kIHRoZSBwaWNrZXIgbmV2ZXIgbW92ZS4gT3RoZXJcbiAgICAvLyBzaWJsaW5nIGVsZW1lbnRzIG9yIHRoZSBwaWNrZXIgaXRzZWxmIGNhbiBzY3JvbGwuXG5cbiAgICB0aGlzLmVuYWJsZVNjcm9sbCA9ICgwLCBfZGlzYWJsZVNjcm9sbDJbXCJkZWZhdWx0XCJdKSh0aGlzLmNvbnRhaW5lcik7XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgO1xuXG4gIF9wcm90by5yZXNwb25zaXZpemVQaWNrZXJQb3NpdGlvbiA9IGZ1bmN0aW9uIHJlc3BvbnNpdml6ZVBpY2tlclBvc2l0aW9uKCkge1xuICAgIC8vIEl0J3MgcG9zc2libGUgdGhlIHBvcnRhbCBwcm9wcyBoYXZlIGJlZW4gY2hhbmdlZCBpbiByZXNwb25zZSB0byB3aW5kb3cgcmVzaXplc1xuICAgIC8vIFNvIGxldCdzIGVuc3VyZSB3ZSByZXNldCB0aGlzIGJhY2sgdG8gdGhlIGJhc2Ugc3RhdGUgZWFjaCB0aW1lXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBkYXlQaWNrZXJDb250YWluZXJTdHlsZXM6IHt9XG4gICAgfSk7XG4gICAgdmFyIF90aGlzJHByb3BzNCA9IHRoaXMucHJvcHMsXG4gICAgICAgIG9wZW5EaXJlY3Rpb24gPSBfdGhpcyRwcm9wczQub3BlbkRpcmVjdGlvbixcbiAgICAgICAgYW5jaG9yRGlyZWN0aW9uID0gX3RoaXMkcHJvcHM0LmFuY2hvckRpcmVjdGlvbixcbiAgICAgICAgaG9yaXpvbnRhbE1hcmdpbiA9IF90aGlzJHByb3BzNC5ob3Jpem9udGFsTWFyZ2luLFxuICAgICAgICB3aXRoUG9ydGFsID0gX3RoaXMkcHJvcHM0LndpdGhQb3J0YWwsXG4gICAgICAgIHdpdGhGdWxsU2NyZWVuUG9ydGFsID0gX3RoaXMkcHJvcHM0LndpdGhGdWxsU2NyZWVuUG9ydGFsLFxuICAgICAgICBhcHBlbmRUb0JvZHkgPSBfdGhpcyRwcm9wczQuYXBwZW5kVG9Cb2R5LFxuICAgICAgICBmb2N1c2VkID0gX3RoaXMkcHJvcHM0LmZvY3VzZWQ7XG4gICAgdmFyIGRheVBpY2tlckNvbnRhaW5lclN0eWxlcyA9IHRoaXMuc3RhdGUuZGF5UGlja2VyQ29udGFpbmVyU3R5bGVzO1xuXG4gICAgaWYgKCFmb2N1c2VkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGlzQW5jaG9yZWRMZWZ0ID0gYW5jaG9yRGlyZWN0aW9uID09PSBfY29uc3RhbnRzLkFOQ0hPUl9MRUZUO1xuXG4gICAgaWYgKCF3aXRoUG9ydGFsICYmICF3aXRoRnVsbFNjcmVlblBvcnRhbCkge1xuICAgICAgdmFyIGNvbnRhaW5lclJlY3QgPSB0aGlzLmRheVBpY2tlckNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIHZhciBjdXJyZW50T2Zmc2V0ID0gZGF5UGlja2VyQ29udGFpbmVyU3R5bGVzW2FuY2hvckRpcmVjdGlvbl0gfHwgMDtcbiAgICAgIHZhciBjb250YWluZXJFZGdlID0gaXNBbmNob3JlZExlZnQgPyBjb250YWluZXJSZWN0W19jb25zdGFudHMuQU5DSE9SX1JJR0hUXSA6IGNvbnRhaW5lclJlY3RbX2NvbnN0YW50cy5BTkNIT1JfTEVGVF07XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZGF5UGlja2VyQ29udGFpbmVyU3R5bGVzOiBfb2JqZWN0U3ByZWFkKHt9LCAoMCwgX2dldFJlc3BvbnNpdmVDb250YWluZXJTdHlsZXNbXCJkZWZhdWx0XCJdKShhbmNob3JEaXJlY3Rpb24sIGN1cnJlbnRPZmZzZXQsIGNvbnRhaW5lckVkZ2UsIGhvcml6b250YWxNYXJnaW4pLCB7fSwgYXBwZW5kVG9Cb2R5ICYmICgwLCBfZ2V0RGV0YWNoZWRDb250YWluZXJTdHlsZXNbXCJkZWZhdWx0XCJdKShvcGVuRGlyZWN0aW9uLCBhbmNob3JEaXJlY3Rpb24sIHRoaXMuY29udGFpbmVyKSlcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uc2hvd0tleWJvYXJkU2hvcnRjdXRzUGFuZWwgPSBmdW5jdGlvbiBzaG93S2V5Ym9hcmRTaG9ydGN1dHNQYW5lbCgpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGlzSW5wdXRGb2N1c2VkOiBmYWxzZSxcbiAgICAgIGlzRGF5UGlja2VyRm9jdXNlZDogdHJ1ZSxcbiAgICAgIHNob3dLZXlib2FyZFNob3J0Y3V0czogdHJ1ZVxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5tYXliZVJlbmRlckRheVBpY2tlcldpdGhQb3J0YWwgPSBmdW5jdGlvbiBtYXliZVJlbmRlckRheVBpY2tlcldpdGhQb3J0YWwoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzNSA9IHRoaXMucHJvcHMsXG4gICAgICAgIGZvY3VzZWQgPSBfdGhpcyRwcm9wczUuZm9jdXNlZCxcbiAgICAgICAgd2l0aFBvcnRhbCA9IF90aGlzJHByb3BzNS53aXRoUG9ydGFsLFxuICAgICAgICB3aXRoRnVsbFNjcmVlblBvcnRhbCA9IF90aGlzJHByb3BzNS53aXRoRnVsbFNjcmVlblBvcnRhbCxcbiAgICAgICAgYXBwZW5kVG9Cb2R5ID0gX3RoaXMkcHJvcHM1LmFwcGVuZFRvQm9keTtcblxuICAgIGlmICghZm9jdXNlZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHdpdGhQb3J0YWwgfHwgd2l0aEZ1bGxTY3JlZW5Qb3J0YWwgfHwgYXBwZW5kVG9Cb2R5KSB7XG4gICAgICByZXR1cm4gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9yZWFjdFBvcnRhbC5Qb3J0YWwsIG51bGwsIHRoaXMucmVuZGVyRGF5UGlja2VyKCkpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnJlbmRlckRheVBpY2tlcigpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXJEYXlQaWNrZXIgPSBmdW5jdGlvbiByZW5kZXJEYXlQaWNrZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzNiA9IHRoaXMucHJvcHMsXG4gICAgICAgIGFuY2hvckRpcmVjdGlvbiA9IF90aGlzJHByb3BzNi5hbmNob3JEaXJlY3Rpb24sXG4gICAgICAgIG9wZW5EaXJlY3Rpb24gPSBfdGhpcyRwcm9wczYub3BlbkRpcmVjdGlvbixcbiAgICAgICAgb25EYXRlQ2hhbmdlID0gX3RoaXMkcHJvcHM2Lm9uRGF0ZUNoYW5nZSxcbiAgICAgICAgZGF0ZSA9IF90aGlzJHByb3BzNi5kYXRlLFxuICAgICAgICBvbkZvY3VzQ2hhbmdlID0gX3RoaXMkcHJvcHM2Lm9uRm9jdXNDaGFuZ2UsXG4gICAgICAgIGZvY3VzZWQgPSBfdGhpcyRwcm9wczYuZm9jdXNlZCxcbiAgICAgICAgZW5hYmxlT3V0c2lkZURheXMgPSBfdGhpcyRwcm9wczYuZW5hYmxlT3V0c2lkZURheXMsXG4gICAgICAgIG51bWJlck9mTW9udGhzID0gX3RoaXMkcHJvcHM2Lm51bWJlck9mTW9udGhzLFxuICAgICAgICBvcmllbnRhdGlvbiA9IF90aGlzJHByb3BzNi5vcmllbnRhdGlvbixcbiAgICAgICAgbW9udGhGb3JtYXQgPSBfdGhpcyRwcm9wczYubW9udGhGb3JtYXQsXG4gICAgICAgIGRheVBpY2tlck5hdmlnYXRpb25JbmxpbmVTdHlsZXMgPSBfdGhpcyRwcm9wczYuZGF5UGlja2VyTmF2aWdhdGlvbklubGluZVN0eWxlcyxcbiAgICAgICAgbmF2UG9zaXRpb24gPSBfdGhpcyRwcm9wczYubmF2UG9zaXRpb24sXG4gICAgICAgIG5hdlByZXYgPSBfdGhpcyRwcm9wczYubmF2UHJldixcbiAgICAgICAgbmF2TmV4dCA9IF90aGlzJHByb3BzNi5uYXZOZXh0LFxuICAgICAgICByZW5kZXJOYXZQcmV2QnV0dG9uID0gX3RoaXMkcHJvcHM2LnJlbmRlck5hdlByZXZCdXR0b24sXG4gICAgICAgIHJlbmRlck5hdk5leHRCdXR0b24gPSBfdGhpcyRwcm9wczYucmVuZGVyTmF2TmV4dEJ1dHRvbixcbiAgICAgICAgb25QcmV2TW9udGhDbGljayA9IF90aGlzJHByb3BzNi5vblByZXZNb250aENsaWNrLFxuICAgICAgICBvbk5leHRNb250aENsaWNrID0gX3RoaXMkcHJvcHM2Lm9uTmV4dE1vbnRoQ2xpY2ssXG4gICAgICAgIG9uQ2xvc2UgPSBfdGhpcyRwcm9wczYub25DbG9zZSxcbiAgICAgICAgd2l0aFBvcnRhbCA9IF90aGlzJHByb3BzNi53aXRoUG9ydGFsLFxuICAgICAgICB3aXRoRnVsbFNjcmVlblBvcnRhbCA9IF90aGlzJHByb3BzNi53aXRoRnVsbFNjcmVlblBvcnRhbCxcbiAgICAgICAga2VlcE9wZW5PbkRhdGVTZWxlY3QgPSBfdGhpcyRwcm9wczYua2VlcE9wZW5PbkRhdGVTZWxlY3QsXG4gICAgICAgIGluaXRpYWxWaXNpYmxlTW9udGggPSBfdGhpcyRwcm9wczYuaW5pdGlhbFZpc2libGVNb250aCxcbiAgICAgICAgcmVuZGVyTW9udGhUZXh0ID0gX3RoaXMkcHJvcHM2LnJlbmRlck1vbnRoVGV4dCxcbiAgICAgICAgcmVuZGVyV2Vla0hlYWRlckVsZW1lbnQgPSBfdGhpcyRwcm9wczYucmVuZGVyV2Vla0hlYWRlckVsZW1lbnQsXG4gICAgICAgIHJlbmRlckNhbGVuZGFyRGF5ID0gX3RoaXMkcHJvcHM2LnJlbmRlckNhbGVuZGFyRGF5LFxuICAgICAgICByZW5kZXJEYXlDb250ZW50cyA9IF90aGlzJHByb3BzNi5yZW5kZXJEYXlDb250ZW50cyxcbiAgICAgICAgcmVuZGVyQ2FsZW5kYXJJbmZvID0gX3RoaXMkcHJvcHM2LnJlbmRlckNhbGVuZGFySW5mbyxcbiAgICAgICAgcmVuZGVyTW9udGhFbGVtZW50ID0gX3RoaXMkcHJvcHM2LnJlbmRlck1vbnRoRWxlbWVudCxcbiAgICAgICAgY2FsZW5kYXJJbmZvUG9zaXRpb24gPSBfdGhpcyRwcm9wczYuY2FsZW5kYXJJbmZvUG9zaXRpb24sXG4gICAgICAgIGhpZGVLZXlib2FyZFNob3J0Y3V0c1BhbmVsID0gX3RoaXMkcHJvcHM2LmhpZGVLZXlib2FyZFNob3J0Y3V0c1BhbmVsLFxuICAgICAgICBmaXJzdERheU9mV2VlayA9IF90aGlzJHByb3BzNi5maXJzdERheU9mV2VlayxcbiAgICAgICAgY3VzdG9tQ2xvc2VJY29uID0gX3RoaXMkcHJvcHM2LmN1c3RvbUNsb3NlSWNvbixcbiAgICAgICAgcGhyYXNlcyA9IF90aGlzJHByb3BzNi5waHJhc2VzLFxuICAgICAgICBkYXlBcmlhTGFiZWxGb3JtYXQgPSBfdGhpcyRwcm9wczYuZGF5QXJpYUxhYmVsRm9ybWF0LFxuICAgICAgICBkYXlTaXplID0gX3RoaXMkcHJvcHM2LmRheVNpemUsXG4gICAgICAgIGlzUlRMID0gX3RoaXMkcHJvcHM2LmlzUlRMLFxuICAgICAgICBpc091dHNpZGVSYW5nZSA9IF90aGlzJHByb3BzNi5pc091dHNpZGVSYW5nZSxcbiAgICAgICAgaXNEYXlCbG9ja2VkID0gX3RoaXMkcHJvcHM2LmlzRGF5QmxvY2tlZCxcbiAgICAgICAgaXNEYXlIaWdobGlnaHRlZCA9IF90aGlzJHByb3BzNi5pc0RheUhpZ2hsaWdodGVkLFxuICAgICAgICB3ZWVrRGF5Rm9ybWF0ID0gX3RoaXMkcHJvcHM2LndlZWtEYXlGb3JtYXQsXG4gICAgICAgIHN0eWxlcyA9IF90aGlzJHByb3BzNi5zdHlsZXMsXG4gICAgICAgIHZlcnRpY2FsSGVpZ2h0ID0gX3RoaXMkcHJvcHM2LnZlcnRpY2FsSGVpZ2h0LFxuICAgICAgICB0cmFuc2l0aW9uRHVyYXRpb24gPSBfdGhpcyRwcm9wczYudHJhbnNpdGlvbkR1cmF0aW9uLFxuICAgICAgICB2ZXJ0aWNhbFNwYWNpbmcgPSBfdGhpcyRwcm9wczYudmVydGljYWxTcGFjaW5nLFxuICAgICAgICBob3Jpem9udGFsTW9udGhQYWRkaW5nID0gX3RoaXMkcHJvcHM2Lmhvcml6b250YWxNb250aFBhZGRpbmcsXG4gICAgICAgIHNtYWxsID0gX3RoaXMkcHJvcHM2LnNtYWxsLFxuICAgICAgICByZWFjdERhdGVzID0gX3RoaXMkcHJvcHM2LnRoZW1lLnJlYWN0RGF0ZXM7XG4gICAgdmFyIF90aGlzJHN0YXRlID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgZGF5UGlja2VyQ29udGFpbmVyU3R5bGVzID0gX3RoaXMkc3RhdGUuZGF5UGlja2VyQ29udGFpbmVyU3R5bGVzLFxuICAgICAgICBpc0RheVBpY2tlckZvY3VzZWQgPSBfdGhpcyRzdGF0ZS5pc0RheVBpY2tlckZvY3VzZWQsXG4gICAgICAgIHNob3dLZXlib2FyZFNob3J0Y3V0cyA9IF90aGlzJHN0YXRlLnNob3dLZXlib2FyZFNob3J0Y3V0cztcbiAgICB2YXIgb25PdXRzaWRlQ2xpY2sgPSAhd2l0aEZ1bGxTY3JlZW5Qb3J0YWwgJiYgd2l0aFBvcnRhbCA/IHRoaXMub25PdXRzaWRlQ2xpY2sgOiB1bmRlZmluZWQ7XG5cbiAgICB2YXIgY2xvc2VJY29uID0gY3VzdG9tQ2xvc2VJY29uIHx8IF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChfQ2xvc2VCdXR0b25bXCJkZWZhdWx0XCJdLCBudWxsKTtcblxuICAgIHZhciBpbnB1dEhlaWdodCA9ICgwLCBfZ2V0SW5wdXRIZWlnaHRbXCJkZWZhdWx0XCJdKShyZWFjdERhdGVzLCBzbWFsbCk7XG4gICAgdmFyIHdpdGhBbnlQb3J0YWwgPSB3aXRoUG9ydGFsIHx8IHdpdGhGdWxsU2NyZWVuUG9ydGFsO1xuICAgIC8qIGVzbGludC1kaXNhYmxlIGpzeC1hMTF5L25vLXN0YXRpYy1lbGVtZW50LWludGVyYWN0aW9ucyAqL1xuXG4gICAgLyogZXNsaW50LWRpc2FibGUganN4LWExMXkvY2xpY2stZXZlbnRzLWhhdmUta2V5LWV2ZW50cyAqL1xuXG4gICAgcmV0dXJuIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImRpdlwiLCAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe1xuICAgICAgcmVmOiB0aGlzLnNldERheVBpY2tlckNvbnRhaW5lclJlZlxuICAgIH0sICgwLCBfcmVhY3RXaXRoU3R5bGVzLmNzcykoc3R5bGVzLlNpbmdsZURhdGVQaWNrZXJfcGlja2VyLCBhbmNob3JEaXJlY3Rpb24gPT09IF9jb25zdGFudHMuQU5DSE9SX0xFRlQgJiYgc3R5bGVzLlNpbmdsZURhdGVQaWNrZXJfcGlja2VyX19kaXJlY3Rpb25MZWZ0LCBhbmNob3JEaXJlY3Rpb24gPT09IF9jb25zdGFudHMuQU5DSE9SX1JJR0hUICYmIHN0eWxlcy5TaW5nbGVEYXRlUGlja2VyX3BpY2tlcl9fZGlyZWN0aW9uUmlnaHQsIG9wZW5EaXJlY3Rpb24gPT09IF9jb25zdGFudHMuT1BFTl9ET1dOICYmIHN0eWxlcy5TaW5nbGVEYXRlUGlja2VyX3BpY2tlcl9fb3BlbkRvd24sIG9wZW5EaXJlY3Rpb24gPT09IF9jb25zdGFudHMuT1BFTl9VUCAmJiBzdHlsZXMuU2luZ2xlRGF0ZVBpY2tlcl9waWNrZXJfX29wZW5VcCwgIXdpdGhBbnlQb3J0YWwgJiYgb3BlbkRpcmVjdGlvbiA9PT0gX2NvbnN0YW50cy5PUEVOX0RPV04gJiYge1xuICAgICAgdG9wOiBpbnB1dEhlaWdodCArIHZlcnRpY2FsU3BhY2luZ1xuICAgIH0sICF3aXRoQW55UG9ydGFsICYmIG9wZW5EaXJlY3Rpb24gPT09IF9jb25zdGFudHMuT1BFTl9VUCAmJiB7XG4gICAgICBib3R0b206IGlucHV0SGVpZ2h0ICsgdmVydGljYWxTcGFjaW5nXG4gICAgfSwgb3JpZW50YXRpb24gPT09IF9jb25zdGFudHMuSE9SSVpPTlRBTF9PUklFTlRBVElPTiAmJiBzdHlsZXMuU2luZ2xlRGF0ZVBpY2tlcl9waWNrZXJfX2hvcml6b250YWwsIG9yaWVudGF0aW9uID09PSBfY29uc3RhbnRzLlZFUlRJQ0FMX09SSUVOVEFUSU9OICYmIHN0eWxlcy5TaW5nbGVEYXRlUGlja2VyX3BpY2tlcl9fdmVydGljYWwsIHdpdGhBbnlQb3J0YWwgJiYgc3R5bGVzLlNpbmdsZURhdGVQaWNrZXJfcGlja2VyX19wb3J0YWwsIHdpdGhGdWxsU2NyZWVuUG9ydGFsICYmIHN0eWxlcy5TaW5nbGVEYXRlUGlja2VyX3BpY2tlcl9fZnVsbFNjcmVlblBvcnRhbCwgaXNSVEwgJiYgc3R5bGVzLlNpbmdsZURhdGVQaWNrZXJfcGlja2VyX19ydGwsIGRheVBpY2tlckNvbnRhaW5lclN0eWxlcyksIHtcbiAgICAgIG9uQ2xpY2s6IG9uT3V0c2lkZUNsaWNrXG4gICAgfSksIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChfRGF5UGlja2VyU2luZ2xlRGF0ZUNvbnRyb2xsZXJbXCJkZWZhdWx0XCJdLCB7XG4gICAgICBkYXRlOiBkYXRlLFxuICAgICAgb25EYXRlQ2hhbmdlOiBvbkRhdGVDaGFuZ2UsXG4gICAgICBvbkZvY3VzQ2hhbmdlOiBvbkZvY3VzQ2hhbmdlLFxuICAgICAgb3JpZW50YXRpb246IG9yaWVudGF0aW9uLFxuICAgICAgZW5hYmxlT3V0c2lkZURheXM6IGVuYWJsZU91dHNpZGVEYXlzLFxuICAgICAgbnVtYmVyT2ZNb250aHM6IG51bWJlck9mTW9udGhzLFxuICAgICAgbW9udGhGb3JtYXQ6IG1vbnRoRm9ybWF0LFxuICAgICAgd2l0aFBvcnRhbDogd2l0aEFueVBvcnRhbCxcbiAgICAgIGZvY3VzZWQ6IGZvY3VzZWQsXG4gICAgICBrZWVwT3Blbk9uRGF0ZVNlbGVjdDoga2VlcE9wZW5PbkRhdGVTZWxlY3QsXG4gICAgICBoaWRlS2V5Ym9hcmRTaG9ydGN1dHNQYW5lbDogaGlkZUtleWJvYXJkU2hvcnRjdXRzUGFuZWwsXG4gICAgICBpbml0aWFsVmlzaWJsZU1vbnRoOiBpbml0aWFsVmlzaWJsZU1vbnRoLFxuICAgICAgZGF5UGlja2VyTmF2aWdhdGlvbklubGluZVN0eWxlczogZGF5UGlja2VyTmF2aWdhdGlvbklubGluZVN0eWxlcyxcbiAgICAgIG5hdlBvc2l0aW9uOiBuYXZQb3NpdGlvbixcbiAgICAgIG5hdlByZXY6IG5hdlByZXYsXG4gICAgICBuYXZOZXh0OiBuYXZOZXh0LFxuICAgICAgcmVuZGVyTmF2UHJldkJ1dHRvbjogcmVuZGVyTmF2UHJldkJ1dHRvbixcbiAgICAgIHJlbmRlck5hdk5leHRCdXR0b246IHJlbmRlck5hdk5leHRCdXR0b24sXG4gICAgICBvblByZXZNb250aENsaWNrOiBvblByZXZNb250aENsaWNrLFxuICAgICAgb25OZXh0TW9udGhDbGljazogb25OZXh0TW9udGhDbGljayxcbiAgICAgIG9uQ2xvc2U6IG9uQ2xvc2UsXG4gICAgICByZW5kZXJNb250aFRleHQ6IHJlbmRlck1vbnRoVGV4dCxcbiAgICAgIHJlbmRlcldlZWtIZWFkZXJFbGVtZW50OiByZW5kZXJXZWVrSGVhZGVyRWxlbWVudCxcbiAgICAgIHJlbmRlckNhbGVuZGFyRGF5OiByZW5kZXJDYWxlbmRhckRheSxcbiAgICAgIHJlbmRlckRheUNvbnRlbnRzOiByZW5kZXJEYXlDb250ZW50cyxcbiAgICAgIHJlbmRlckNhbGVuZGFySW5mbzogcmVuZGVyQ2FsZW5kYXJJbmZvLFxuICAgICAgcmVuZGVyTW9udGhFbGVtZW50OiByZW5kZXJNb250aEVsZW1lbnQsXG4gICAgICBjYWxlbmRhckluZm9Qb3NpdGlvbjogY2FsZW5kYXJJbmZvUG9zaXRpb24sXG4gICAgICBpc0ZvY3VzZWQ6IGlzRGF5UGlja2VyRm9jdXNlZCxcbiAgICAgIHNob3dLZXlib2FyZFNob3J0Y3V0czogc2hvd0tleWJvYXJkU2hvcnRjdXRzLFxuICAgICAgb25CbHVyOiB0aGlzLm9uRGF5UGlja2VyQmx1cixcbiAgICAgIHBocmFzZXM6IHBocmFzZXMsXG4gICAgICBkYXlBcmlhTGFiZWxGb3JtYXQ6IGRheUFyaWFMYWJlbEZvcm1hdCxcbiAgICAgIGRheVNpemU6IGRheVNpemUsXG4gICAgICBpc1JUTDogaXNSVEwsXG4gICAgICBpc091dHNpZGVSYW5nZTogaXNPdXRzaWRlUmFuZ2UsXG4gICAgICBpc0RheUJsb2NrZWQ6IGlzRGF5QmxvY2tlZCxcbiAgICAgIGlzRGF5SGlnaGxpZ2h0ZWQ6IGlzRGF5SGlnaGxpZ2h0ZWQsXG4gICAgICBmaXJzdERheU9mV2VlazogZmlyc3REYXlPZldlZWssXG4gICAgICB3ZWVrRGF5Rm9ybWF0OiB3ZWVrRGF5Rm9ybWF0LFxuICAgICAgdmVydGljYWxIZWlnaHQ6IHZlcnRpY2FsSGVpZ2h0LFxuICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uOiB0cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgICBob3Jpem9udGFsTW9udGhQYWRkaW5nOiBob3Jpem9udGFsTW9udGhQYWRkaW5nXG4gICAgfSksIHdpdGhGdWxsU2NyZWVuUG9ydGFsICYmIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImJ1dHRvblwiLCAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe30sICgwLCBfcmVhY3RXaXRoU3R5bGVzLmNzcykoc3R5bGVzLlNpbmdsZURhdGVQaWNrZXJfY2xvc2VCdXR0b24pLCB7XG4gICAgICBcImFyaWEtbGFiZWxcIjogcGhyYXNlcy5jbG9zZURhdGVQaWNrZXIsXG4gICAgICB0eXBlOiBcImJ1dHRvblwiLFxuICAgICAgb25DbGljazogdGhpcy5vbk91dHNpZGVDbGlja1xuICAgIH0pLCBfcmVhY3RbXCJkZWZhdWx0XCJdLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgKDAsIF9yZWFjdFdpdGhTdHlsZXMuY3NzKShzdHlsZXMuU2luZ2xlRGF0ZVBpY2tlcl9jbG9zZUJ1dHRvbl9zdmcpLCBjbG9zZUljb24pKSk7XG4gICAgLyogZXNsaW50LWVuYWJsZSBqc3gtYTExeS9uby1zdGF0aWMtZWxlbWVudC1pbnRlcmFjdGlvbnMgKi9cblxuICAgIC8qIGVzbGludC1lbmFibGUganN4LWExMXkvY2xpY2stZXZlbnRzLWhhdmUta2V5LWV2ZW50cyAqL1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzNyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGlkID0gX3RoaXMkcHJvcHM3LmlkLFxuICAgICAgICBwbGFjZWhvbGRlciA9IF90aGlzJHByb3BzNy5wbGFjZWhvbGRlcixcbiAgICAgICAgYXJpYUxhYmVsID0gX3RoaXMkcHJvcHM3LmFyaWFMYWJlbCxcbiAgICAgICAgZGlzYWJsZWQgPSBfdGhpcyRwcm9wczcuZGlzYWJsZWQsXG4gICAgICAgIGZvY3VzZWQgPSBfdGhpcyRwcm9wczcuZm9jdXNlZCxcbiAgICAgICAgcmVxdWlyZWQgPSBfdGhpcyRwcm9wczcucmVxdWlyZWQsXG4gICAgICAgIHJlYWRPbmx5ID0gX3RoaXMkcHJvcHM3LnJlYWRPbmx5LFxuICAgICAgICBvcGVuRGlyZWN0aW9uID0gX3RoaXMkcHJvcHM3Lm9wZW5EaXJlY3Rpb24sXG4gICAgICAgIHNob3dDbGVhckRhdGUgPSBfdGhpcyRwcm9wczcuc2hvd0NsZWFyRGF0ZSxcbiAgICAgICAgc2hvd0RlZmF1bHRJbnB1dEljb24gPSBfdGhpcyRwcm9wczcuc2hvd0RlZmF1bHRJbnB1dEljb24sXG4gICAgICAgIGlucHV0SWNvblBvc2l0aW9uID0gX3RoaXMkcHJvcHM3LmlucHV0SWNvblBvc2l0aW9uLFxuICAgICAgICBjdXN0b21DbG9zZUljb24gPSBfdGhpcyRwcm9wczcuY3VzdG9tQ2xvc2VJY29uLFxuICAgICAgICBjdXN0b21JbnB1dEljb24gPSBfdGhpcyRwcm9wczcuY3VzdG9tSW5wdXRJY29uLFxuICAgICAgICBkYXRlID0gX3RoaXMkcHJvcHM3LmRhdGUsXG4gICAgICAgIG9uRGF0ZUNoYW5nZSA9IF90aGlzJHByb3BzNy5vbkRhdGVDaGFuZ2UsXG4gICAgICAgIGRpc3BsYXlGb3JtYXQgPSBfdGhpcyRwcm9wczcuZGlzcGxheUZvcm1hdCxcbiAgICAgICAgcGhyYXNlcyA9IF90aGlzJHByb3BzNy5waHJhc2VzLFxuICAgICAgICB3aXRoUG9ydGFsID0gX3RoaXMkcHJvcHM3LndpdGhQb3J0YWwsXG4gICAgICAgIHdpdGhGdWxsU2NyZWVuUG9ydGFsID0gX3RoaXMkcHJvcHM3LndpdGhGdWxsU2NyZWVuUG9ydGFsLFxuICAgICAgICBzY3JlZW5SZWFkZXJJbnB1dE1lc3NhZ2UgPSBfdGhpcyRwcm9wczcuc2NyZWVuUmVhZGVySW5wdXRNZXNzYWdlLFxuICAgICAgICBpc1JUTCA9IF90aGlzJHByb3BzNy5pc1JUTCxcbiAgICAgICAgbm9Cb3JkZXIgPSBfdGhpcyRwcm9wczcubm9Cb3JkZXIsXG4gICAgICAgIGJsb2NrID0gX3RoaXMkcHJvcHM3LmJsb2NrLFxuICAgICAgICBzbWFsbCA9IF90aGlzJHByb3BzNy5zbWFsbCxcbiAgICAgICAgcmVndWxhciA9IF90aGlzJHByb3BzNy5yZWd1bGFyLFxuICAgICAgICB2ZXJ0aWNhbFNwYWNpbmcgPSBfdGhpcyRwcm9wczcudmVydGljYWxTcGFjaW5nLFxuICAgICAgICByZW9wZW5QaWNrZXJPbkNsZWFyRGF0ZSA9IF90aGlzJHByb3BzNy5yZW9wZW5QaWNrZXJPbkNsZWFyRGF0ZSxcbiAgICAgICAga2VlcE9wZW5PbkRhdGVTZWxlY3QgPSBfdGhpcyRwcm9wczcua2VlcE9wZW5PbkRhdGVTZWxlY3QsXG4gICAgICAgIHN0eWxlcyA9IF90aGlzJHByb3BzNy5zdHlsZXMsXG4gICAgICAgIGlzT3V0c2lkZVJhbmdlID0gX3RoaXMkcHJvcHM3LmlzT3V0c2lkZVJhbmdlO1xuICAgIHZhciBpc0lucHV0Rm9jdXNlZCA9IHRoaXMuc3RhdGUuaXNJbnB1dEZvY3VzZWQ7XG4gICAgdmFyIGVuYWJsZU91dHNpZGVDbGljayA9ICF3aXRoUG9ydGFsICYmICF3aXRoRnVsbFNjcmVlblBvcnRhbDtcbiAgICB2YXIgaGlkZUZhbmcgPSB2ZXJ0aWNhbFNwYWNpbmcgPCBfY29uc3RhbnRzLkZBTkdfSEVJR0hUX1BYO1xuXG4gICAgdmFyIGlucHV0ID0gX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9TaW5nbGVEYXRlUGlja2VySW5wdXRDb250cm9sbGVyW1wiZGVmYXVsdFwiXSwge1xuICAgICAgaWQ6IGlkLFxuICAgICAgcGxhY2Vob2xkZXI6IHBsYWNlaG9sZGVyLFxuICAgICAgYXJpYUxhYmVsOiBhcmlhTGFiZWwsXG4gICAgICBmb2N1c2VkOiBmb2N1c2VkLFxuICAgICAgaXNGb2N1c2VkOiBpc0lucHV0Rm9jdXNlZCxcbiAgICAgIGRpc2FibGVkOiBkaXNhYmxlZCxcbiAgICAgIHJlcXVpcmVkOiByZXF1aXJlZCxcbiAgICAgIHJlYWRPbmx5OiByZWFkT25seSxcbiAgICAgIG9wZW5EaXJlY3Rpb246IG9wZW5EaXJlY3Rpb24sXG4gICAgICBzaG93Q2FyZXQ6ICF3aXRoUG9ydGFsICYmICF3aXRoRnVsbFNjcmVlblBvcnRhbCAmJiAhaGlkZUZhbmcsXG4gICAgICBzaG93Q2xlYXJEYXRlOiBzaG93Q2xlYXJEYXRlLFxuICAgICAgc2hvd0RlZmF1bHRJbnB1dEljb246IHNob3dEZWZhdWx0SW5wdXRJY29uLFxuICAgICAgaW5wdXRJY29uUG9zaXRpb246IGlucHV0SWNvblBvc2l0aW9uLFxuICAgICAgaXNPdXRzaWRlUmFuZ2U6IGlzT3V0c2lkZVJhbmdlLFxuICAgICAgY3VzdG9tQ2xvc2VJY29uOiBjdXN0b21DbG9zZUljb24sXG4gICAgICBjdXN0b21JbnB1dEljb246IGN1c3RvbUlucHV0SWNvbixcbiAgICAgIGRhdGU6IGRhdGUsXG4gICAgICBvbkRhdGVDaGFuZ2U6IG9uRGF0ZUNoYW5nZSxcbiAgICAgIGRpc3BsYXlGb3JtYXQ6IGRpc3BsYXlGb3JtYXQsXG4gICAgICBvbkZvY3VzQ2hhbmdlOiB0aGlzLm9uSW5wdXRGb2N1cyxcbiAgICAgIG9uS2V5RG93bkFycm93RG93bjogdGhpcy5vbkRheVBpY2tlckZvY3VzLFxuICAgICAgb25LZXlEb3duUXVlc3Rpb25NYXJrOiB0aGlzLnNob3dLZXlib2FyZFNob3J0Y3V0c1BhbmVsLFxuICAgICAgc2NyZWVuUmVhZGVyTWVzc2FnZTogc2NyZWVuUmVhZGVySW5wdXRNZXNzYWdlLFxuICAgICAgcGhyYXNlczogcGhyYXNlcyxcbiAgICAgIGlzUlRMOiBpc1JUTCxcbiAgICAgIG5vQm9yZGVyOiBub0JvcmRlcixcbiAgICAgIGJsb2NrOiBibG9jayxcbiAgICAgIHNtYWxsOiBzbWFsbCxcbiAgICAgIHJlZ3VsYXI6IHJlZ3VsYXIsXG4gICAgICB2ZXJ0aWNhbFNwYWNpbmc6IHZlcnRpY2FsU3BhY2luZyxcbiAgICAgIHJlb3BlblBpY2tlck9uQ2xlYXJEYXRlOiByZW9wZW5QaWNrZXJPbkNsZWFyRGF0ZSxcbiAgICAgIGtlZXBPcGVuT25EYXRlU2VsZWN0OiBrZWVwT3Blbk9uRGF0ZVNlbGVjdFxuICAgIH0sIHRoaXMubWF5YmVSZW5kZXJEYXlQaWNrZXJXaXRoUG9ydGFsKCkpO1xuXG4gICAgcmV0dXJuIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChcImRpdlwiLCAoMCwgX2V4dGVuZHMyW1wiZGVmYXVsdFwiXSkoe1xuICAgICAgcmVmOiB0aGlzLnNldENvbnRhaW5lclJlZlxuICAgIH0sICgwLCBfcmVhY3RXaXRoU3R5bGVzLmNzcykoc3R5bGVzLlNpbmdsZURhdGVQaWNrZXIsIGJsb2NrICYmIHN0eWxlcy5TaW5nbGVEYXRlUGlja2VyX19ibG9jaykpLCBlbmFibGVPdXRzaWRlQ2xpY2sgJiYgX3JlYWN0W1wiZGVmYXVsdFwiXS5jcmVhdGVFbGVtZW50KF9yZWFjdE91dHNpZGVDbGlja0hhbmRsZXJbXCJkZWZhdWx0XCJdLCB7XG4gICAgICBvbk91dHNpZGVDbGljazogdGhpcy5vbk91dHNpZGVDbGlja1xuICAgIH0sIGlucHV0KSwgZW5hYmxlT3V0c2lkZUNsaWNrIHx8IGlucHV0KTtcbiAgfTtcblxuICByZXR1cm4gU2luZ2xlRGF0ZVBpY2tlcjtcbn0oX3JlYWN0W1wiZGVmYXVsdFwiXS5QdXJlQ29tcG9uZW50IHx8IF9yZWFjdFtcImRlZmF1bHRcIl0uQ29tcG9uZW50KTtcblxuZXhwb3J0cy5QdXJlU2luZ2xlRGF0ZVBpY2tlciA9IFNpbmdsZURhdGVQaWNrZXI7XG5TaW5nbGVEYXRlUGlja2VyLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHByb3BUeXBlcyA6IHt9O1xuU2luZ2xlRGF0ZVBpY2tlci5kZWZhdWx0UHJvcHMgPSBkZWZhdWx0UHJvcHM7XG5cbnZhciBfZGVmYXVsdCA9ICgwLCBfcmVhY3RXaXRoU3R5bGVzLndpdGhTdHlsZXMpKGZ1bmN0aW9uIChfcmVmMykge1xuICB2YXIgX3JlZjMkcmVhY3REYXRlcyA9IF9yZWYzLnJlYWN0RGF0ZXMsXG4gICAgICBjb2xvciA9IF9yZWYzJHJlYWN0RGF0ZXMuY29sb3IsXG4gICAgICB6SW5kZXggPSBfcmVmMyRyZWFjdERhdGVzLnpJbmRleDtcbiAgcmV0dXJuIHtcbiAgICBTaW5nbGVEYXRlUGlja2VyOiB7XG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snXG4gICAgfSxcbiAgICBTaW5nbGVEYXRlUGlja2VyX19ibG9jazoge1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJ1xuICAgIH0sXG4gICAgU2luZ2xlRGF0ZVBpY2tlcl9waWNrZXI6IHtcbiAgICAgIHpJbmRleDogekluZGV4ICsgMSxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogY29sb3IuYmFja2dyb3VuZCxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnXG4gICAgfSxcbiAgICBTaW5nbGVEYXRlUGlja2VyX3BpY2tlcl9fcnRsOiB7XG4gICAgICBkaXJlY3Rpb246ICgwLCBfbm9mbGlwW1wiZGVmYXVsdFwiXSkoJ3J0bCcpXG4gICAgfSxcbiAgICBTaW5nbGVEYXRlUGlja2VyX3BpY2tlcl9fZGlyZWN0aW9uTGVmdDoge1xuICAgICAgbGVmdDogKDAsIF9ub2ZsaXBbXCJkZWZhdWx0XCJdKSgwKVxuICAgIH0sXG4gICAgU2luZ2xlRGF0ZVBpY2tlcl9waWNrZXJfX2RpcmVjdGlvblJpZ2h0OiB7XG4gICAgICByaWdodDogKDAsIF9ub2ZsaXBbXCJkZWZhdWx0XCJdKSgwKVxuICAgIH0sXG4gICAgU2luZ2xlRGF0ZVBpY2tlcl9waWNrZXJfX3BvcnRhbDoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLCAwLCAwLCAwLjMpJyxcbiAgICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgICAgdG9wOiAwLFxuICAgICAgbGVmdDogKDAsIF9ub2ZsaXBbXCJkZWZhdWx0XCJdKSgwKSxcbiAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgd2lkdGg6ICcxMDAlJ1xuICAgIH0sXG4gICAgU2luZ2xlRGF0ZVBpY2tlcl9waWNrZXJfX2Z1bGxTY3JlZW5Qb3J0YWw6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogY29sb3IuYmFja2dyb3VuZFxuICAgIH0sXG4gICAgU2luZ2xlRGF0ZVBpY2tlcl9jbG9zZUJ1dHRvbjoge1xuICAgICAgYmFja2dyb3VuZDogJ25vbmUnLFxuICAgICAgYm9yZGVyOiAwLFxuICAgICAgY29sb3I6ICdpbmhlcml0JyxcbiAgICAgIGZvbnQ6ICdpbmhlcml0JyxcbiAgICAgIGxpbmVIZWlnaHQ6ICdub3JtYWwnLFxuICAgICAgb3ZlcmZsb3c6ICd2aXNpYmxlJyxcbiAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICB0b3A6IDAsXG4gICAgICByaWdodDogKDAsIF9ub2ZsaXBbXCJkZWZhdWx0XCJdKSgwKSxcbiAgICAgIHBhZGRpbmc6IDE1LFxuICAgICAgekluZGV4OiB6SW5kZXggKyAyLFxuICAgICAgJzpob3Zlcic6IHtcbiAgICAgICAgY29sb3I6IFwiZGFya2VuKFwiLmNvbmNhdChjb2xvci5jb3JlLmdyYXlMaWdodGVyLCBcIiwgMTAlKVwiKSxcbiAgICAgICAgdGV4dERlY29yYXRpb246ICdub25lJ1xuICAgICAgfSxcbiAgICAgICc6Zm9jdXMnOiB7XG4gICAgICAgIGNvbG9yOiBcImRhcmtlbihcIi5jb25jYXQoY29sb3IuY29yZS5ncmF5TGlnaHRlciwgXCIsIDEwJSlcIiksXG4gICAgICAgIHRleHREZWNvcmF0aW9uOiAnbm9uZSdcbiAgICAgIH1cbiAgICB9LFxuICAgIFNpbmdsZURhdGVQaWNrZXJfY2xvc2VCdXR0b25fc3ZnOiB7XG4gICAgICBoZWlnaHQ6IDE1LFxuICAgICAgd2lkdGg6IDE1LFxuICAgICAgZmlsbDogY29sb3IuY29yZS5ncmF5TGlnaHRlclxuICAgIH1cbiAgfTtcbn0sIHtcbiAgcHVyZUNvbXBvbmVudDogdHlwZW9mIF9yZWFjdFtcImRlZmF1bHRcIl0uUHVyZUNvbXBvbmVudCAhPT0gJ3VuZGVmaW5lZCdcbn0pKFNpbmdsZURhdGVQaWNrZXIpO1xuXG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG52YXIgX2VuenltZVNoYWxsb3dFcXVhbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImVuenltZS1zaGFsbG93LWVxdWFsXCIpKTtcblxudmFyIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIikpO1xuXG52YXIgX2luaGVyaXRzTG9vc2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c0xvb3NlXCIpKTtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcblxudmFyIF9tb21lbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJtb21lbnRcIikpO1xuXG52YXIgX3JlYWN0TW9tZW50UHJvcHR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3QtbW9tZW50LXByb3B0eXBlc1wiKSk7XG5cbnZhciBfYWlyYm5iUHJvcFR5cGVzID0gcmVxdWlyZShcImFpcmJuYi1wcm9wLXR5cGVzXCIpO1xuXG52YXIgX09wZW5EaXJlY3Rpb25TaGFwZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3NoYXBlcy9PcGVuRGlyZWN0aW9uU2hhcGVcIikpO1xuXG52YXIgX2RlZmF1bHRQaHJhc2VzID0gcmVxdWlyZShcIi4uL2RlZmF1bHRQaHJhc2VzXCIpO1xuXG52YXIgX2dldFBocmFzZVByb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL2dldFBocmFzZVByb3BUeXBlc1wiKSk7XG5cbnZhciBfU2luZ2xlRGF0ZVBpY2tlcklucHV0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9TaW5nbGVEYXRlUGlja2VySW5wdXRcIikpO1xuXG52YXIgX0ljb25Qb3NpdGlvblNoYXBlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc2hhcGVzL0ljb25Qb3NpdGlvblNoYXBlXCIpKTtcblxudmFyIF9EaXNhYmxlZFNoYXBlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vc2hhcGVzL0Rpc2FibGVkU2hhcGVcIikpO1xuXG52YXIgX3RvTW9tZW50T2JqZWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvdG9Nb21lbnRPYmplY3RcIikpO1xuXG52YXIgX3RvTG9jYWxpemVkRGF0ZVN0cmluZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL3V0aWxzL3RvTG9jYWxpemVkRGF0ZVN0cmluZ1wiKSk7XG5cbnZhciBfaXNJbmNsdXNpdmVseUFmdGVyRGF5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvaXNJbmNsdXNpdmVseUFmdGVyRGF5XCIpKTtcblxudmFyIF9jb25zdGFudHMgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzXCIpO1xuXG52YXIgcHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gKDAsIF9haXJibmJQcm9wVHlwZXMuZm9yYmlkRXh0cmFQcm9wcykoe1xuICBjaGlsZHJlbjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubm9kZSxcbiAgZGF0ZTogX3JlYWN0TW9tZW50UHJvcHR5cGVzW1wiZGVmYXVsdFwiXS5tb21lbnRPYmosXG4gIG9uRGF0ZUNoYW5nZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYy5pc1JlcXVpcmVkLFxuICBmb2N1c2VkOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBvbkZvY3VzQ2hhbmdlOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLmlzUmVxdWlyZWQsXG4gIGlkOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgcGxhY2Vob2xkZXI6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZyxcbiAgYXJpYUxhYmVsOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5zdHJpbmcsXG4gIHNjcmVlblJlYWRlck1lc3NhZ2U6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLnN0cmluZyxcbiAgc2hvd0NsZWFyRGF0ZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgc2hvd0NhcmV0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBzaG93RGVmYXVsdElucHV0SWNvbjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgaW5wdXRJY29uUG9zaXRpb246IF9JY29uUG9zaXRpb25TaGFwZVtcImRlZmF1bHRcIl0sXG4gIGRpc2FibGVkOiBfRGlzYWJsZWRTaGFwZVtcImRlZmF1bHRcIl0sXG4gIHJlcXVpcmVkOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICByZWFkT25seTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgb3BlbkRpcmVjdGlvbjogX09wZW5EaXJlY3Rpb25TaGFwZVtcImRlZmF1bHRcIl0sXG4gIG5vQm9yZGVyOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICBibG9jazogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgc21hbGw6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIHJlZ3VsYXI6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIHZlcnRpY2FsU3BhY2luZzogX2FpcmJuYlByb3BUeXBlcy5ub25OZWdhdGl2ZUludGVnZXIsXG4gIGtlZXBPcGVuT25EYXRlU2VsZWN0OiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5ib29sLFxuICByZW9wZW5QaWNrZXJPbkNsZWFyRGF0ZTogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbCxcbiAgaXNPdXRzaWRlUmFuZ2U6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIGRpc3BsYXlGb3JtYXQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm9uZU9mVHlwZShbX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc3RyaW5nLCBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jXSksXG4gIG9uQ2xvc2U6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmZ1bmMsXG4gIG9uS2V5RG93bkFycm93RG93bjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uZnVuYyxcbiAgb25LZXlEb3duUXVlc3Rpb25NYXJrOiBfcHJvcFR5cGVzW1wiZGVmYXVsdFwiXS5mdW5jLFxuICBjdXN0b21JbnB1dEljb246IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLm5vZGUsXG4gIGN1c3RvbUNsb3NlSWNvbjogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0ubm9kZSxcbiAgLy8gYWNjZXNzaWJpbGl0eVxuICBpc0ZvY3VzZWQ6IF9wcm9wVHlwZXNbXCJkZWZhdWx0XCJdLmJvb2wsXG4gIC8vIGkxOG5cbiAgcGhyYXNlczogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uc2hhcGUoKDAsIF9nZXRQaHJhc2VQcm9wVHlwZXNbXCJkZWZhdWx0XCJdKShfZGVmYXVsdFBocmFzZXMuU2luZ2xlRGF0ZVBpY2tlcklucHV0UGhyYXNlcykpLFxuICBpc1JUTDogX3Byb3BUeXBlc1tcImRlZmF1bHRcIl0uYm9vbFxufSkgOiB7fTtcbnZhciBkZWZhdWx0UHJvcHMgPSB7XG4gIGNoaWxkcmVuOiBudWxsLFxuICBkYXRlOiBudWxsLFxuICBmb2N1c2VkOiBmYWxzZSxcbiAgcGxhY2Vob2xkZXI6ICcnLFxuICBhcmlhTGFiZWw6IHVuZGVmaW5lZCxcbiAgc2NyZWVuUmVhZGVyTWVzc2FnZTogJ0RhdGUnLFxuICBzaG93Q2xlYXJEYXRlOiBmYWxzZSxcbiAgc2hvd0NhcmV0OiBmYWxzZSxcbiAgc2hvd0RlZmF1bHRJbnB1dEljb246IGZhbHNlLFxuICBpbnB1dEljb25Qb3NpdGlvbjogX2NvbnN0YW50cy5JQ09OX0JFRk9SRV9QT1NJVElPTixcbiAgZGlzYWJsZWQ6IGZhbHNlLFxuICByZXF1aXJlZDogZmFsc2UsXG4gIHJlYWRPbmx5OiBmYWxzZSxcbiAgb3BlbkRpcmVjdGlvbjogX2NvbnN0YW50cy5PUEVOX0RPV04sXG4gIG5vQm9yZGVyOiBmYWxzZSxcbiAgYmxvY2s6IGZhbHNlLFxuICBzbWFsbDogZmFsc2UsXG4gIHJlZ3VsYXI6IGZhbHNlLFxuICB2ZXJ0aWNhbFNwYWNpbmc6IHVuZGVmaW5lZCxcbiAga2VlcE9wZW5PbkRhdGVTZWxlY3Q6IGZhbHNlLFxuICByZW9wZW5QaWNrZXJPbkNsZWFyRGF0ZTogZmFsc2UsXG4gIGlzT3V0c2lkZVJhbmdlOiBmdW5jdGlvbiBpc091dHNpZGVSYW5nZShkYXkpIHtcbiAgICByZXR1cm4gISgwLCBfaXNJbmNsdXNpdmVseUFmdGVyRGF5W1wiZGVmYXVsdFwiXSkoZGF5LCAoMCwgX21vbWVudFtcImRlZmF1bHRcIl0pKCkpO1xuICB9LFxuICBkaXNwbGF5Rm9ybWF0OiBmdW5jdGlvbiBkaXNwbGF5Rm9ybWF0KCkge1xuICAgIHJldHVybiBfbW9tZW50W1wiZGVmYXVsdFwiXS5sb2NhbGVEYXRhKCkubG9uZ0RhdGVGb3JtYXQoJ0wnKTtcbiAgfSxcbiAgb25DbG9zZTogZnVuY3Rpb24gb25DbG9zZSgpIHt9LFxuICBvbktleURvd25BcnJvd0Rvd246IGZ1bmN0aW9uIG9uS2V5RG93bkFycm93RG93bigpIHt9LFxuICBvbktleURvd25RdWVzdGlvbk1hcms6IGZ1bmN0aW9uIG9uS2V5RG93blF1ZXN0aW9uTWFyaygpIHt9LFxuICBjdXN0b21JbnB1dEljb246IG51bGwsXG4gIGN1c3RvbUNsb3NlSWNvbjogbnVsbCxcbiAgLy8gYWNjZXNzaWJpbGl0eVxuICBpc0ZvY3VzZWQ6IGZhbHNlLFxuICAvLyBpMThuXG4gIHBocmFzZXM6IF9kZWZhdWx0UGhyYXNlcy5TaW5nbGVEYXRlUGlja2VySW5wdXRQaHJhc2VzLFxuICBpc1JUTDogZmFsc2Vcbn07XG5cbnZhciBTaW5nbGVEYXRlUGlja2VySW5wdXRDb250cm9sbGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfcmVmKSB7XG4gICgwLCBfaW5oZXJpdHNMb29zZTJbXCJkZWZhdWx0XCJdKShTaW5nbGVEYXRlUGlja2VySW5wdXRDb250cm9sbGVyLCBfcmVmKTtcbiAgdmFyIF9wcm90byA9IFNpbmdsZURhdGVQaWNrZXJJbnB1dENvbnRyb2xsZXIucHJvdG90eXBlO1xuXG4gIF9wcm90b1shX3JlYWN0W1wiZGVmYXVsdFwiXS5QdXJlQ29tcG9uZW50ICYmIFwic2hvdWxkQ29tcG9uZW50VXBkYXRlXCJdID0gZnVuY3Rpb24gKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gICAgcmV0dXJuICEoMCwgX2VuenltZVNoYWxsb3dFcXVhbFtcImRlZmF1bHRcIl0pKHRoaXMucHJvcHMsIG5leHRQcm9wcykgfHwgISgwLCBfZW56eW1lU2hhbGxvd0VxdWFsW1wiZGVmYXVsdFwiXSkodGhpcy5zdGF0ZSwgbmV4dFN0YXRlKTtcbiAgfTtcblxuICBmdW5jdGlvbiBTaW5nbGVEYXRlUGlja2VySW5wdXRDb250cm9sbGVyKHByb3BzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfcmVmLmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XG4gICAgX3RoaXMub25DaGFuZ2UgPSBfdGhpcy5vbkNoYW5nZS5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgX3RoaXMub25Gb2N1cyA9IF90aGlzLm9uRm9jdXMuYmluZCgoMCwgX2Fzc2VydFRoaXNJbml0aWFsaXplZDJbXCJkZWZhdWx0XCJdKShfdGhpcykpO1xuICAgIF90aGlzLm9uQ2xlYXJGb2N1cyA9IF90aGlzLm9uQ2xlYXJGb2N1cy5iaW5kKCgwLCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkMltcImRlZmF1bHRcIl0pKF90aGlzKSk7XG4gICAgX3RoaXMuY2xlYXJEYXRlID0gX3RoaXMuY2xlYXJEYXRlLmJpbmQoKDAsIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyW1wiZGVmYXVsdFwiXSkoX3RoaXMpKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfcHJvdG8ub25DaGFuZ2UgPSBmdW5jdGlvbiBvbkNoYW5nZShkYXRlU3RyaW5nKSB7XG4gICAgdmFyIF90aGlzJHByb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgaXNPdXRzaWRlUmFuZ2UgPSBfdGhpcyRwcm9wcy5pc091dHNpZGVSYW5nZSxcbiAgICAgICAga2VlcE9wZW5PbkRhdGVTZWxlY3QgPSBfdGhpcyRwcm9wcy5rZWVwT3Blbk9uRGF0ZVNlbGVjdCxcbiAgICAgICAgb25EYXRlQ2hhbmdlID0gX3RoaXMkcHJvcHMub25EYXRlQ2hhbmdlLFxuICAgICAgICBvbkZvY3VzQ2hhbmdlID0gX3RoaXMkcHJvcHMub25Gb2N1c0NoYW5nZSxcbiAgICAgICAgb25DbG9zZSA9IF90aGlzJHByb3BzLm9uQ2xvc2U7XG4gICAgdmFyIG5ld0RhdGUgPSAoMCwgX3RvTW9tZW50T2JqZWN0W1wiZGVmYXVsdFwiXSkoZGF0ZVN0cmluZywgdGhpcy5nZXREaXNwbGF5Rm9ybWF0KCkpO1xuICAgIHZhciBpc1ZhbGlkID0gbmV3RGF0ZSAmJiAhaXNPdXRzaWRlUmFuZ2UobmV3RGF0ZSk7XG5cbiAgICBpZiAoaXNWYWxpZCkge1xuICAgICAgb25EYXRlQ2hhbmdlKG5ld0RhdGUpO1xuXG4gICAgICBpZiAoIWtlZXBPcGVuT25EYXRlU2VsZWN0KSB7XG4gICAgICAgIG9uRm9jdXNDaGFuZ2Uoe1xuICAgICAgICAgIGZvY3VzZWQ6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICBvbkNsb3NlKHtcbiAgICAgICAgICBkYXRlOiBuZXdEYXRlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBvbkRhdGVDaGFuZ2UobnVsbCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5vbkZvY3VzID0gZnVuY3Rpb24gb25Gb2N1cygpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgb25Gb2N1c0NoYW5nZSA9IF90aGlzJHByb3BzMi5vbkZvY3VzQ2hhbmdlLFxuICAgICAgICBkaXNhYmxlZCA9IF90aGlzJHByb3BzMi5kaXNhYmxlZDtcblxuICAgIGlmICghZGlzYWJsZWQpIHtcbiAgICAgIG9uRm9jdXNDaGFuZ2Uoe1xuICAgICAgICBmb2N1c2VkOiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLm9uQ2xlYXJGb2N1cyA9IGZ1bmN0aW9uIG9uQ2xlYXJGb2N1cygpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgZm9jdXNlZCA9IF90aGlzJHByb3BzMy5mb2N1c2VkLFxuICAgICAgICBvbkZvY3VzQ2hhbmdlID0gX3RoaXMkcHJvcHMzLm9uRm9jdXNDaGFuZ2UsXG4gICAgICAgIG9uQ2xvc2UgPSBfdGhpcyRwcm9wczMub25DbG9zZSxcbiAgICAgICAgZGF0ZSA9IF90aGlzJHByb3BzMy5kYXRlO1xuICAgIGlmICghZm9jdXNlZCkgcmV0dXJuO1xuICAgIG9uRm9jdXNDaGFuZ2Uoe1xuICAgICAgZm9jdXNlZDogZmFsc2VcbiAgICB9KTtcbiAgICBvbkNsb3NlKHtcbiAgICAgIGRhdGU6IGRhdGVcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0RGlzcGxheUZvcm1hdCA9IGZ1bmN0aW9uIGdldERpc3BsYXlGb3JtYXQoKSB7XG4gICAgdmFyIGRpc3BsYXlGb3JtYXQgPSB0aGlzLnByb3BzLmRpc3BsYXlGb3JtYXQ7XG4gICAgcmV0dXJuIHR5cGVvZiBkaXNwbGF5Rm9ybWF0ID09PSAnc3RyaW5nJyA/IGRpc3BsYXlGb3JtYXQgOiBkaXNwbGF5Rm9ybWF0KCk7XG4gIH07XG5cbiAgX3Byb3RvLmdldERhdGVTdHJpbmcgPSBmdW5jdGlvbiBnZXREYXRlU3RyaW5nKGRhdGUpIHtcbiAgICB2YXIgZGlzcGxheUZvcm1hdCA9IHRoaXMuZ2V0RGlzcGxheUZvcm1hdCgpO1xuXG4gICAgaWYgKGRhdGUgJiYgZGlzcGxheUZvcm1hdCkge1xuICAgICAgcmV0dXJuIGRhdGUgJiYgZGF0ZS5mb3JtYXQoZGlzcGxheUZvcm1hdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuICgwLCBfdG9Mb2NhbGl6ZWREYXRlU3RyaW5nW1wiZGVmYXVsdFwiXSkoZGF0ZSk7XG4gIH07XG5cbiAgX3Byb3RvLmNsZWFyRGF0ZSA9IGZ1bmN0aW9uIGNsZWFyRGF0ZSgpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHM0ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgb25EYXRlQ2hhbmdlID0gX3RoaXMkcHJvcHM0Lm9uRGF0ZUNoYW5nZSxcbiAgICAgICAgcmVvcGVuUGlja2VyT25DbGVhckRhdGUgPSBfdGhpcyRwcm9wczQucmVvcGVuUGlja2VyT25DbGVhckRhdGUsXG4gICAgICAgIG9uRm9jdXNDaGFuZ2UgPSBfdGhpcyRwcm9wczQub25Gb2N1c0NoYW5nZTtcbiAgICBvbkRhdGVDaGFuZ2UobnVsbCk7XG5cbiAgICBpZiAocmVvcGVuUGlja2VyT25DbGVhckRhdGUpIHtcbiAgICAgIG9uRm9jdXNDaGFuZ2Uoe1xuICAgICAgICBmb2N1c2VkOiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMkcHJvcHM1ID0gdGhpcy5wcm9wcyxcbiAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wczUuY2hpbGRyZW4sXG4gICAgICAgIGlkID0gX3RoaXMkcHJvcHM1LmlkLFxuICAgICAgICBwbGFjZWhvbGRlciA9IF90aGlzJHByb3BzNS5wbGFjZWhvbGRlcixcbiAgICAgICAgYXJpYUxhYmVsID0gX3RoaXMkcHJvcHM1LmFyaWFMYWJlbCxcbiAgICAgICAgZGlzYWJsZWQgPSBfdGhpcyRwcm9wczUuZGlzYWJsZWQsXG4gICAgICAgIGZvY3VzZWQgPSBfdGhpcyRwcm9wczUuZm9jdXNlZCxcbiAgICAgICAgaXNGb2N1c2VkID0gX3RoaXMkcHJvcHM1LmlzRm9jdXNlZCxcbiAgICAgICAgcmVxdWlyZWQgPSBfdGhpcyRwcm9wczUucmVxdWlyZWQsXG4gICAgICAgIHJlYWRPbmx5ID0gX3RoaXMkcHJvcHM1LnJlYWRPbmx5LFxuICAgICAgICBvcGVuRGlyZWN0aW9uID0gX3RoaXMkcHJvcHM1Lm9wZW5EaXJlY3Rpb24sXG4gICAgICAgIHNob3dDbGVhckRhdGUgPSBfdGhpcyRwcm9wczUuc2hvd0NsZWFyRGF0ZSxcbiAgICAgICAgc2hvd0NhcmV0ID0gX3RoaXMkcHJvcHM1LnNob3dDYXJldCxcbiAgICAgICAgc2hvd0RlZmF1bHRJbnB1dEljb24gPSBfdGhpcyRwcm9wczUuc2hvd0RlZmF1bHRJbnB1dEljb24sXG4gICAgICAgIGlucHV0SWNvblBvc2l0aW9uID0gX3RoaXMkcHJvcHM1LmlucHV0SWNvblBvc2l0aW9uLFxuICAgICAgICBjdXN0b21DbG9zZUljb24gPSBfdGhpcyRwcm9wczUuY3VzdG9tQ2xvc2VJY29uLFxuICAgICAgICBjdXN0b21JbnB1dEljb24gPSBfdGhpcyRwcm9wczUuY3VzdG9tSW5wdXRJY29uLFxuICAgICAgICBkYXRlID0gX3RoaXMkcHJvcHM1LmRhdGUsXG4gICAgICAgIHBocmFzZXMgPSBfdGhpcyRwcm9wczUucGhyYXNlcyxcbiAgICAgICAgb25LZXlEb3duQXJyb3dEb3duID0gX3RoaXMkcHJvcHM1Lm9uS2V5RG93bkFycm93RG93bixcbiAgICAgICAgb25LZXlEb3duUXVlc3Rpb25NYXJrID0gX3RoaXMkcHJvcHM1Lm9uS2V5RG93blF1ZXN0aW9uTWFyayxcbiAgICAgICAgc2NyZWVuUmVhZGVyTWVzc2FnZSA9IF90aGlzJHByb3BzNS5zY3JlZW5SZWFkZXJNZXNzYWdlLFxuICAgICAgICBpc1JUTCA9IF90aGlzJHByb3BzNS5pc1JUTCxcbiAgICAgICAgbm9Cb3JkZXIgPSBfdGhpcyRwcm9wczUubm9Cb3JkZXIsXG4gICAgICAgIGJsb2NrID0gX3RoaXMkcHJvcHM1LmJsb2NrLFxuICAgICAgICBzbWFsbCA9IF90aGlzJHByb3BzNS5zbWFsbCxcbiAgICAgICAgcmVndWxhciA9IF90aGlzJHByb3BzNS5yZWd1bGFyLFxuICAgICAgICB2ZXJ0aWNhbFNwYWNpbmcgPSBfdGhpcyRwcm9wczUudmVydGljYWxTcGFjaW5nO1xuICAgIHZhciBkaXNwbGF5VmFsdWUgPSB0aGlzLmdldERhdGVTdHJpbmcoZGF0ZSk7XG4gICAgcmV0dXJuIF9yZWFjdFtcImRlZmF1bHRcIl0uY3JlYXRlRWxlbWVudChfU2luZ2xlRGF0ZVBpY2tlcklucHV0W1wiZGVmYXVsdFwiXSwge1xuICAgICAgaWQ6IGlkLFxuICAgICAgcGxhY2Vob2xkZXI6IHBsYWNlaG9sZGVyLFxuICAgICAgYXJpYUxhYmVsOiBhcmlhTGFiZWwsXG4gICAgICBmb2N1c2VkOiBmb2N1c2VkLFxuICAgICAgaXNGb2N1c2VkOiBpc0ZvY3VzZWQsXG4gICAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgICByZXF1aXJlZDogcmVxdWlyZWQsXG4gICAgICByZWFkT25seTogcmVhZE9ubHksXG4gICAgICBvcGVuRGlyZWN0aW9uOiBvcGVuRGlyZWN0aW9uLFxuICAgICAgc2hvd0NhcmV0OiBzaG93Q2FyZXQsXG4gICAgICBvbkNsZWFyRGF0ZTogdGhpcy5jbGVhckRhdGUsXG4gICAgICBzaG93Q2xlYXJEYXRlOiBzaG93Q2xlYXJEYXRlLFxuICAgICAgc2hvd0RlZmF1bHRJbnB1dEljb246IHNob3dEZWZhdWx0SW5wdXRJY29uLFxuICAgICAgaW5wdXRJY29uUG9zaXRpb246IGlucHV0SWNvblBvc2l0aW9uLFxuICAgICAgY3VzdG9tQ2xvc2VJY29uOiBjdXN0b21DbG9zZUljb24sXG4gICAgICBjdXN0b21JbnB1dEljb246IGN1c3RvbUlucHV0SWNvbixcbiAgICAgIGRpc3BsYXlWYWx1ZTogZGlzcGxheVZhbHVlLFxuICAgICAgb25DaGFuZ2U6IHRoaXMub25DaGFuZ2UsXG4gICAgICBvbkZvY3VzOiB0aGlzLm9uRm9jdXMsXG4gICAgICBvbktleURvd25TaGlmdFRhYjogdGhpcy5vbkNsZWFyRm9jdXMsXG4gICAgICBvbktleURvd25BcnJvd0Rvd246IG9uS2V5RG93bkFycm93RG93bixcbiAgICAgIG9uS2V5RG93blF1ZXN0aW9uTWFyazogb25LZXlEb3duUXVlc3Rpb25NYXJrLFxuICAgICAgc2NyZWVuUmVhZGVyTWVzc2FnZTogc2NyZWVuUmVhZGVyTWVzc2FnZSxcbiAgICAgIHBocmFzZXM6IHBocmFzZXMsXG4gICAgICBpc1JUTDogaXNSVEwsXG4gICAgICBub0JvcmRlcjogbm9Cb3JkZXIsXG4gICAgICBibG9jazogYmxvY2ssXG4gICAgICBzbWFsbDogc21hbGwsXG4gICAgICByZWd1bGFyOiByZWd1bGFyLFxuICAgICAgdmVydGljYWxTcGFjaW5nOiB2ZXJ0aWNhbFNwYWNpbmdcbiAgICB9LCBjaGlsZHJlbik7XG4gIH07XG5cbiAgcmV0dXJuIFNpbmdsZURhdGVQaWNrZXJJbnB1dENvbnRyb2xsZXI7XG59KF9yZWFjdFtcImRlZmF1bHRcIl0uUHVyZUNvbXBvbmVudCB8fCBfcmVhY3RbXCJkZWZhdWx0XCJdLkNvbXBvbmVudCk7XG5cbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gU2luZ2xlRGF0ZVBpY2tlcklucHV0Q29udHJvbGxlcjtcblNpbmdsZURhdGVQaWNrZXJJbnB1dENvbnRyb2xsZXIucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gcHJvcFR5cGVzIDoge307XG5TaW5nbGVEYXRlUGlja2VySW5wdXRDb250cm9sbGVyLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wczsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IGlzSW5jbHVzaXZlbHlCZWZvcmVEYXk7XG5cbnZhciBfbW9tZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwibW9tZW50XCIpKTtcblxudmFyIF9pc0FmdGVyRGF5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9pc0FmdGVyRGF5XCIpKTtcblxuZnVuY3Rpb24gaXNJbmNsdXNpdmVseUJlZm9yZURheShhLCBiKSB7XG4gIGlmICghX21vbWVudFtcImRlZmF1bHRcIl0uaXNNb21lbnQoYSkgfHwgIV9tb21lbnRbXCJkZWZhdWx0XCJdLmlzTW9tZW50KGIpKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiAhKDAsIF9pc0FmdGVyRGF5W1wiZGVmYXVsdFwiXSkoYSwgYik7XG59IiwiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnJlc29sdmVkXG5yZXF1aXJlKCcuL2xpYi9pbml0aWFsaXplJyk7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbnZhciBfcmVnaXN0ZXJDU1NJbnRlcmZhY2VXaXRoRGVmYXVsdFRoZW1lID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9yZWdpc3RlckNTU0ludGVyZmFjZVdpdGhEZWZhdWx0VGhlbWVcIikpO1xuXG4oMCwgX3JlZ2lzdGVyQ1NTSW50ZXJmYWNlV2l0aERlZmF1bHRUaGVtZVtcImRlZmF1bHRcIl0pKCk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSByZWdpc3RlckNTU0ludGVyZmFjZVdpdGhEZWZhdWx0VGhlbWU7XG5cbnZhciBfcmVhY3RXaXRoU3R5bGVzSW50ZXJmYWNlQ3NzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3Qtd2l0aC1zdHlsZXMtaW50ZXJmYWNlLWNzc1wiKSk7XG5cbnZhciBfcmVnaXN0ZXJJbnRlcmZhY2VXaXRoRGVmYXVsdFRoZW1lID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9yZWdpc3RlckludGVyZmFjZVdpdGhEZWZhdWx0VGhlbWVcIikpO1xuXG5mdW5jdGlvbiByZWdpc3RlckNTU0ludGVyZmFjZVdpdGhEZWZhdWx0VGhlbWUoKSB7XG4gICgwLCBfcmVnaXN0ZXJJbnRlcmZhY2VXaXRoRGVmYXVsdFRoZW1lW1wiZGVmYXVsdFwiXSkoX3JlYWN0V2l0aFN0eWxlc0ludGVyZmFjZUNzc1tcImRlZmF1bHRcIl0pO1xufSIsIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW5yZXNvbHZlZFxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Rpc3QvaW5kZXguanMnKS5kZWZhdWx0O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSB2b2lkIDA7XG5cbnZhciBfYXJyYXlQcm90b3R5cGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJhcnJheS5wcm90b3R5cGUuZmxhdFwiKSk7XG5cbnZhciBfZ2xvYmFsQ2FjaGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJnbG9iYWwtY2FjaGVcIikpO1xuXG52YXIgX2NvbnN0YW50cyA9IHJlcXVpcmUoXCIuL3V0aWxzL2NvbnN0YW50c1wiKTtcblxudmFyIF9nZXRDbGFzc05hbWUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3V0aWxzL2dldENsYXNzTmFtZVwiKSk7XG5cbnZhciBfc2VwYXJhdGVTdHlsZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9zZXBhcmF0ZVN0eWxlc1wiKSk7XG5cbi8qKlxuICogRnVuY3Rpb24gcmVxdWlyZWQgYXMgcGFydCBvZiB0aGUgcmVhY3Qtd2l0aC1zdHlsZXMgaW50ZXJmYWNlLiBQYXJzZXMgdGhlIHN0eWxlcyBwcm92aWRlZCBieVxuICogcmVhY3Qtd2l0aC1zdHlsZXMgdG8gcHJvZHVjZSBjbGFzcyBuYW1lcyBiYXNlZCBvbiB0aGUgc3R5bGUgbmFtZSBhbmQgb3B0aW9uYWxseSB0aGUgbmFtZXNwYWNlIGlmXG4gKiBhdmFpbGFibGUuXG4gKlxuICogc3R5bGVzT2JqZWN0IHtPYmplY3R9IFRoZSBzdHlsZXMgb2JqZWN0IHBhc3NlZCB0byB3aXRoU3R5bGVzLlxuICpcbiAqIFJldHVybiBhbiBvYmplY3QgbWFwcGluZyBzdHlsZSBuYW1lcyB0byBjbGFzcyBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlKHN0eWxlc09iamVjdCkge1xuICB2YXIgc3R5bGVzVG9DbGFzc2VzID0ge307XG4gIHZhciBzdHlsZU5hbWVzID0gT2JqZWN0LmtleXMoc3R5bGVzT2JqZWN0KTtcbiAgdmFyIHNoYXJlZFN0YXRlID0gX2dsb2JhbENhY2hlW1wiZGVmYXVsdFwiXS5nZXQoX2NvbnN0YW50cy5HTE9CQUxfQ0FDSEVfS0VZKSB8fCB7fTtcbiAgdmFyIF9zaGFyZWRTdGF0ZSRuYW1lc3BhYyA9IHNoYXJlZFN0YXRlLm5hbWVzcGFjZSxcbiAgICAgIG5hbWVzcGFjZSA9IF9zaGFyZWRTdGF0ZSRuYW1lc3BhYyA9PT0gdm9pZCAwID8gJycgOiBfc2hhcmVkU3RhdGUkbmFtZXNwYWM7XG4gIHN0eWxlTmFtZXMuZm9yRWFjaChmdW5jdGlvbiAoc3R5bGVOYW1lKSB7XG4gICAgdmFyIGNsYXNzTmFtZSA9ICgwLCBfZ2V0Q2xhc3NOYW1lW1wiZGVmYXVsdFwiXSkobmFtZXNwYWNlLCBzdHlsZU5hbWUpO1xuICAgIHN0eWxlc1RvQ2xhc3Nlc1tzdHlsZU5hbWVdID0gY2xhc3NOYW1lO1xuICB9KTtcbiAgcmV0dXJuIHN0eWxlc1RvQ2xhc3Nlcztcbn1cbi8qKlxuICogUHJvY2VzcyBzdHlsZXMgdG8gYmUgY29uc3VtZWQgYnkgYSBjb21wb25lbnQuXG4gKlxuICogc3R5bGVzQXJyYXkge0FycmF5fSBBcnJheSBvZiB0aGUgZm9sbG93aW5nOiB2YWx1ZXMgcmV0dXJuZWQgYnkgY3JlYXRlLCBwbGFpbiBKYXZhU2NyaXB0IG9iamVjdHNcbiAqIHJlcHJlc2VudGluZyBpbmxpbmUgc3R5bGVzLCBvciBhcnJheXMgdGhlcmVvZi5cbiAqXG4gKiBSZXR1cm4gYW4gb2JqZWN0IHdpdGggb3B0aW9uYWwgY2xhc3NOYW1lIGFuZCBzdHlsZSBwcm9wZXJ0aWVzIHRvIGJlIHNwcmVhZCBvbiBhIGNvbXBvbmVudC5cbiAqL1xuXG5cbmZ1bmN0aW9uIHJlc29sdmUoc3R5bGVzQXJyYXkpIHtcbiAgdmFyIGZsYXR0ZW5lZFN0eWxlcyA9ICgwLCBfYXJyYXlQcm90b3R5cGVbXCJkZWZhdWx0XCJdKShzdHlsZXNBcnJheSwgSW5maW5pdHkpO1xuXG4gIHZhciBfc2VwYXJhdGVTdHlsZXMgPSAoMCwgX3NlcGFyYXRlU3R5bGVzMltcImRlZmF1bHRcIl0pKGZsYXR0ZW5lZFN0eWxlcyksXG4gICAgICBjbGFzc05hbWVzID0gX3NlcGFyYXRlU3R5bGVzLmNsYXNzTmFtZXMsXG4gICAgICBoYXNJbmxpbmVTdHlsZXMgPSBfc2VwYXJhdGVTdHlsZXMuaGFzSW5saW5lU3R5bGVzLFxuICAgICAgaW5saW5lU3R5bGVzID0gX3NlcGFyYXRlU3R5bGVzLmlubGluZVN0eWxlcztcblxuICB2YXIgc3BlY2lmaWNDbGFzc05hbWVzID0gY2xhc3NOYW1lcy5tYXAoZnVuY3Rpb24gKG5hbWUsIGluZGV4KSB7XG4gICAgcmV0dXJuIFwiXCIuY29uY2F0KG5hbWUsIFwiIFwiKS5jb25jYXQobmFtZSwgXCJfXCIpLmNvbmNhdChpbmRleCArIDEpO1xuICB9KTtcbiAgdmFyIGNsYXNzTmFtZSA9IHNwZWNpZmljQ2xhc3NOYW1lcy5qb2luKCcgJyk7XG4gIHZhciByZXN1bHQgPSB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVcbiAgfTtcbiAgaWYgKGhhc0lubGluZVN0eWxlcykgcmVzdWx0LnN0eWxlID0gaW5saW5lU3R5bGVzO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG52YXIgX2RlZmF1bHQgPSB7XG4gIGNyZWF0ZTogY3JlYXRlLFxuICByZXNvbHZlOiByZXNvbHZlXG59O1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBfZGVmYXVsdDsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWZpbmUgPSByZXF1aXJlKCdkZWZpbmUtcHJvcGVydGllcycpO1xudmFyIGNhbGxCaW5kID0gcmVxdWlyZSgnZXMtYWJzdHJhY3QvaGVscGVycy9jYWxsQmluZCcpO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG52YXIgZ2V0UG9seWZpbGwgPSByZXF1aXJlKCcuL3BvbHlmaWxsJyk7XG52YXIgcG9seWZpbGwgPSBnZXRQb2x5ZmlsbCgpO1xudmFyIHNoaW0gPSByZXF1aXJlKCcuL3NoaW0nKTtcblxudmFyIGJvdW5kRmxhdCA9IGNhbGxCaW5kKHBvbHlmaWxsKTtcblxuZGVmaW5lKGJvdW5kRmxhdCwge1xuXHRnZXRQb2x5ZmlsbDogZ2V0UG9seWZpbGwsXG5cdGltcGxlbWVudGF0aW9uOiBpbXBsZW1lbnRhdGlvbixcblx0c2hpbTogc2hpbVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gYm91bmRGbGF0O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkQXJyYXkgPSBHZXRJbnRyaW5zaWMoJyVBcnJheSUnKTtcbnZhciAkc3BlY2llcyA9IEdldEludHJpbnNpYygnJVN5bWJvbC5zcGVjaWVzJScsIHRydWUpO1xudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG5cbnZhciBHZXQgPSByZXF1aXJlKCcuL0dldCcpO1xudmFyIElzQXJyYXkgPSByZXF1aXJlKCcuL0lzQXJyYXknKTtcbnZhciBJc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9Jc0NvbnN0cnVjdG9yJyk7XG52YXIgSXNJbnRlZ2VyID0gcmVxdWlyZSgnLi9Jc0ludGVnZXInKTtcbnZhciBUeXBlID0gcmVxdWlyZSgnLi9UeXBlJyk7XG5cbi8vIGh0dHBzOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1hcnJheXNwZWNpZXNjcmVhdGVcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBBcnJheVNwZWNpZXNDcmVhdGUob3JpZ2luYWxBcnJheSwgbGVuZ3RoKSB7XG5cdGlmICghSXNJbnRlZ2VyKGxlbmd0aCkgfHwgbGVuZ3RoIDwgMCkge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBsZW5ndGggbXVzdCBiZSBhbiBpbnRlZ2VyID49IDAnKTtcblx0fVxuXHR2YXIgbGVuID0gbGVuZ3RoID09PSAwID8gMCA6IGxlbmd0aDtcblx0dmFyIEM7XG5cdHZhciBpc0FycmF5ID0gSXNBcnJheShvcmlnaW5hbEFycmF5KTtcblx0aWYgKGlzQXJyYXkpIHtcblx0XHRDID0gR2V0KG9yaWdpbmFsQXJyYXksICdjb25zdHJ1Y3RvcicpO1xuXHRcdC8vIFRPRE86IGZpZ3VyZSBvdXQgaG93IHRvIG1ha2UgYSBjcm9zcy1yZWFsbSBub3JtYWwgQXJyYXksIGEgc2FtZS1yZWFsbSBBcnJheVxuXHRcdC8vIGlmIChJc0NvbnN0cnVjdG9yKEMpKSB7XG5cdFx0Ly8gXHRpZiBDIGlzIGFub3RoZXIgcmVhbG0ncyBBcnJheSwgQyA9IHVuZGVmaW5lZFxuXHRcdC8vIFx0T2JqZWN0LmdldFByb3RvdHlwZU9mKE9iamVjdC5nZXRQcm90b3R5cGVPZihPYmplY3QuZ2V0UHJvdG90eXBlT2YoQXJyYXkpKSkgPT09IG51bGwgP1xuXHRcdC8vIH1cblx0XHRpZiAoJHNwZWNpZXMgJiYgVHlwZShDKSA9PT0gJ09iamVjdCcpIHtcblx0XHRcdEMgPSBHZXQoQywgJHNwZWNpZXMpO1xuXHRcdFx0aWYgKEMgPT09IG51bGwpIHtcblx0XHRcdFx0QyA9IHZvaWQgMDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0aWYgKHR5cGVvZiBDID09PSAndW5kZWZpbmVkJykge1xuXHRcdHJldHVybiAkQXJyYXkobGVuKTtcblx0fVxuXHRpZiAoIUlzQ29uc3RydWN0b3IoQykpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQyBtdXN0IGJlIGEgY29uc3RydWN0b3InKTtcblx0fVxuXHRyZXR1cm4gbmV3IEMobGVuKTsgLy8gQ29uc3RydWN0KEMsIGxlbik7XG59O1xuXG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNS4xLyNzZWMtOFxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFR5cGUoeCkge1xuXHRpZiAoeCA9PT0gbnVsbCkge1xuXHRcdHJldHVybiAnTnVsbCc7XG5cdH1cblx0aWYgKHR5cGVvZiB4ID09PSAndW5kZWZpbmVkJykge1xuXHRcdHJldHVybiAnVW5kZWZpbmVkJztcblx0fVxuXHRpZiAodHlwZW9mIHggPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIHggPT09ICdvYmplY3QnKSB7XG5cdFx0cmV0dXJuICdPYmplY3QnO1xuXHR9XG5cdGlmICh0eXBlb2YgeCA9PT0gJ251bWJlcicpIHtcblx0XHRyZXR1cm4gJ051bWJlcic7XG5cdH1cblx0aWYgKHR5cGVvZiB4ID09PSAnYm9vbGVhbicpIHtcblx0XHRyZXR1cm4gJ0Jvb2xlYW4nO1xuXHR9XG5cdGlmICh0eXBlb2YgeCA9PT0gJ3N0cmluZycpIHtcblx0XHRyZXR1cm4gJ1N0cmluZyc7XG5cdH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtaXNjb25zdHJ1Y3RvclxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIElzQ29uc3RydWN0b3IoYXJndW1lbnQpIHtcblx0cmV0dXJuIHR5cGVvZiBhcmd1bWVudCA9PT0gJ2Z1bmN0aW9uJyAmJiAhIWFyZ3VtZW50LnByb3RvdHlwZTsgLy8gdW5mb3J0dW5hdGVseSB0aGVyZSdzIG5vIHdheSB0byB0cnVseSBjaGVjayB0aGlzIHdpdGhvdXQgdHJ5L2NhdGNoIGBuZXcgYXJndW1lbnRgXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkTWF0aCA9IEdldEludHJpbnNpYygnJU1hdGglJyk7XG5cbnZhciAkZmxvb3IgPSAkTWF0aC5mbG9vcjtcbnZhciAkYWJzID0gJE1hdGguYWJzO1xuXG52YXIgJGlzTmFOID0gcmVxdWlyZSgnLi4vaGVscGVycy9pc05hTicpO1xudmFyICRpc0Zpbml0ZSA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaXNGaW5pdGUnKTtcblxuLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1pc2ludGVnZXJcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBJc0ludGVnZXIoYXJndW1lbnQpIHtcblx0aWYgKHR5cGVvZiBhcmd1bWVudCAhPT0gJ251bWJlcicgfHwgJGlzTmFOKGFyZ3VtZW50KSB8fCAhJGlzRmluaXRlKGFyZ3VtZW50KSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHR2YXIgYWJzID0gJGFicyhhcmd1bWVudCk7XG5cdHJldHVybiAkZmxvb3IoYWJzKSA9PT0gYWJzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcblxudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSByZXF1aXJlKCcuLi9oZWxwZXJzL21heFNhZmVJbnRlZ2VyJyk7XG5cbnZhciBDYWxsID0gcmVxdWlyZSgnLi9DYWxsJyk7XG52YXIgQ3JlYXRlRGF0YVByb3BlcnR5T3JUaHJvdyA9IHJlcXVpcmUoJy4vQ3JlYXRlRGF0YVByb3BlcnR5T3JUaHJvdycpO1xudmFyIEdldCA9IHJlcXVpcmUoJy4vR2V0Jyk7XG52YXIgSGFzUHJvcGVydHkgPSByZXF1aXJlKCcuL0hhc1Byb3BlcnR5Jyk7XG52YXIgSXNBcnJheSA9IHJlcXVpcmUoJy4vSXNBcnJheScpO1xudmFyIFRvTGVuZ3RoID0gcmVxdWlyZSgnLi9Ub0xlbmd0aCcpO1xudmFyIFRvU3RyaW5nID0gcmVxdWlyZSgnLi9Ub1N0cmluZycpO1xuXG4vLyBodHRwczovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvMTAuMC8jc2VjLWZsYXR0ZW5pbnRvYXJyYXlcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1wYXJhbXMsIG1heC1zdGF0ZW1lbnRzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIEZsYXR0ZW5JbnRvQXJyYXkodGFyZ2V0LCBzb3VyY2UsIHNvdXJjZUxlbiwgc3RhcnQsIGRlcHRoKSB7XG5cdHZhciBtYXBwZXJGdW5jdGlvbjtcblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiA1KSB7XG5cdFx0bWFwcGVyRnVuY3Rpb24gPSBhcmd1bWVudHNbNV07XG5cdH1cblxuXHR2YXIgdGFyZ2V0SW5kZXggPSBzdGFydDtcblx0dmFyIHNvdXJjZUluZGV4ID0gMDtcblx0d2hpbGUgKHNvdXJjZUluZGV4IDwgc291cmNlTGVuKSB7XG5cdFx0dmFyIFAgPSBUb1N0cmluZyhzb3VyY2VJbmRleCk7XG5cdFx0dmFyIGV4aXN0cyA9IEhhc1Byb3BlcnR5KHNvdXJjZSwgUCk7XG5cdFx0aWYgKGV4aXN0cyA9PT0gdHJ1ZSkge1xuXHRcdFx0dmFyIGVsZW1lbnQgPSBHZXQoc291cmNlLCBQKTtcblx0XHRcdGlmICh0eXBlb2YgbWFwcGVyRnVuY3Rpb24gIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRcdGlmIChhcmd1bWVudHMubGVuZ3RoIDw9IDYpIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogdGhpc0FyZyBpcyByZXF1aXJlZCB3aGVuIG1hcHBlckZ1bmN0aW9uIGlzIHByb3ZpZGVkJyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxlbWVudCA9IENhbGwobWFwcGVyRnVuY3Rpb24sIGFyZ3VtZW50c1s2XSwgW2VsZW1lbnQsIHNvdXJjZUluZGV4LCBzb3VyY2VdKTtcblx0XHRcdH1cblx0XHRcdHZhciBzaG91bGRGbGF0dGVuID0gZmFsc2U7XG5cdFx0XHRpZiAoZGVwdGggPiAwKSB7XG5cdFx0XHRcdHNob3VsZEZsYXR0ZW4gPSBJc0FycmF5KGVsZW1lbnQpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHNob3VsZEZsYXR0ZW4pIHtcblx0XHRcdFx0dmFyIGVsZW1lbnRMZW4gPSBUb0xlbmd0aChHZXQoZWxlbWVudCwgJ2xlbmd0aCcpKTtcblx0XHRcdFx0dGFyZ2V0SW5kZXggPSBGbGF0dGVuSW50b0FycmF5KHRhcmdldCwgZWxlbWVudCwgZWxlbWVudExlbiwgdGFyZ2V0SW5kZXgsIGRlcHRoIC0gMSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZiAodGFyZ2V0SW5kZXggPj0gTUFYX1NBRkVfSU5URUdFUikge1xuXHRcdFx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdpbmRleCB0b28gbGFyZ2UnKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRDcmVhdGVEYXRhUHJvcGVydHlPclRocm93KHRhcmdldCwgVG9TdHJpbmcodGFyZ2V0SW5kZXgpLCBlbGVtZW50KTtcblx0XHRcdFx0dGFyZ2V0SW5kZXggKz0gMTtcblx0XHRcdH1cblx0XHR9XG5cdFx0c291cmNlSW5kZXggKz0gMTtcblx0fVxuXG5cdHJldHVybiB0YXJnZXRJbmRleDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG5cbnZhciBpbnNwZWN0ID0gcmVxdWlyZSgnb2JqZWN0LWluc3BlY3QnKTtcblxudmFyIElzQ2FsbGFibGUgPSByZXF1aXJlKCcuL0lzQ2FsbGFibGUnKTtcblxuLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1jYWxsXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gQ2FsbChGLCBWKSB7XG5cdHZhciBhcmdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiBbXTtcblx0aWYgKCFJc0NhbGxhYmxlKEYpKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoaW5zcGVjdChGKSArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcblx0fVxuXHRyZXR1cm4gRi5hcHBseShWLCBhcmdzKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG5cbnZhciBDcmVhdGVEYXRhUHJvcGVydHkgPSByZXF1aXJlKCcuL0NyZWF0ZURhdGFQcm9wZXJ0eScpO1xudmFyIElzUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuL0lzUHJvcGVydHlLZXknKTtcbnZhciBUeXBlID0gcmVxdWlyZSgnLi9UeXBlJyk7XG5cbi8vIC8vIGh0dHBzOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1jcmVhdGVkYXRhcHJvcGVydHlvcnRocm93XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gQ3JlYXRlRGF0YVByb3BlcnR5T3JUaHJvdyhPLCBQLCBWKSB7XG5cdGlmIChUeXBlKE8pICE9PSAnT2JqZWN0Jykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBUeXBlKE8pIGlzIG5vdCBPYmplY3QnKTtcblx0fVxuXHRpZiAoIUlzUHJvcGVydHlLZXkoUCkpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogSXNQcm9wZXJ0eUtleShQKSBpcyBub3QgdHJ1ZScpO1xuXHR9XG5cdHZhciBzdWNjZXNzID0gQ3JlYXRlRGF0YVByb3BlcnR5KE8sIFAsIFYpO1xuXHRpZiAoIXN1Y2Nlc3MpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcigndW5hYmxlIHRvIGNyZWF0ZSBkYXRhIHByb3BlcnR5Jyk7XG5cdH1cblx0cmV0dXJuIHN1Y2Nlc3M7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkVHlwZUVycm9yID0gR2V0SW50cmluc2ljKCclVHlwZUVycm9yJScpO1xuXG52YXIgRGVmaW5lT3duUHJvcGVydHkgPSByZXF1aXJlKCcuLi9oZWxwZXJzL0RlZmluZU93blByb3BlcnR5Jyk7XG5cbnZhciBGcm9tUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9Gcm9tUHJvcGVydHlEZXNjcmlwdG9yJyk7XG52YXIgT3JkaW5hcnlHZXRPd25Qcm9wZXJ0eSA9IHJlcXVpcmUoJy4vT3JkaW5hcnlHZXRPd25Qcm9wZXJ0eScpO1xudmFyIElzRGF0YURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL0lzRGF0YURlc2NyaXB0b3InKTtcbnZhciBJc0V4dGVuc2libGUgPSByZXF1aXJlKCcuL0lzRXh0ZW5zaWJsZScpO1xudmFyIElzUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuL0lzUHJvcGVydHlLZXknKTtcbnZhciBTYW1lVmFsdWUgPSByZXF1aXJlKCcuL1NhbWVWYWx1ZScpO1xudmFyIFR5cGUgPSByZXF1aXJlKCcuL1R5cGUnKTtcblxuLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1jcmVhdGVkYXRhcHJvcGVydHlcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBDcmVhdGVEYXRhUHJvcGVydHkoTywgUCwgVikge1xuXHRpZiAoVHlwZShPKSAhPT0gJ09iamVjdCcpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogVHlwZShPKSBpcyBub3QgT2JqZWN0Jyk7XG5cdH1cblx0aWYgKCFJc1Byb3BlcnR5S2V5KFApKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IElzUHJvcGVydHlLZXkoUCkgaXMgbm90IHRydWUnKTtcblx0fVxuXHR2YXIgb2xkRGVzYyA9IE9yZGluYXJ5R2V0T3duUHJvcGVydHkoTywgUCk7XG5cdHZhciBleHRlbnNpYmxlID0gb2xkRGVzYyB8fCBJc0V4dGVuc2libGUoTyk7XG5cdHZhciBpbW11dGFibGUgPSBvbGREZXNjICYmICghb2xkRGVzYy53cml0YWJsZSB8fCAhb2xkRGVzYy5jb25maWd1cmFibGUpO1xuXHRpZiAoaW1tdXRhYmxlIHx8ICFleHRlbnNpYmxlKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdHJldHVybiBEZWZpbmVPd25Qcm9wZXJ0eShcblx0XHRJc0RhdGFEZXNjcmlwdG9yLFxuXHRcdFNhbWVWYWx1ZSxcblx0XHRGcm9tUHJvcGVydHlEZXNjcmlwdG9yLFxuXHRcdE8sXG5cdFx0UCxcblx0XHR7XG5cdFx0XHQnW1tDb25maWd1cmFibGVdXSc6IHRydWUsXG5cdFx0XHQnW1tFbnVtZXJhYmxlXV0nOiB0cnVlLFxuXHRcdFx0J1tbVmFsdWVdXSc6IFYsXG5cdFx0XHQnW1tXcml0YWJsZV1dJzogdHJ1ZVxuXHRcdH1cblx0KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IEdldEludHJpbnNpYygnJU9iamVjdC5kZWZpbmVQcm9wZXJ0eSUnLCB0cnVlKTtcblxuaWYgKCRkZWZpbmVQcm9wZXJ0eSkge1xuXHR0cnkge1xuXHRcdCRkZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IHZhbHVlOiAxIH0pO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0Ly8gSUUgOCBoYXMgYSBicm9rZW4gZGVmaW5lUHJvcGVydHlcblx0XHQkZGVmaW5lUHJvcGVydHkgPSBudWxsO1xuXHR9XG59XG5cbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2NhbGxCb3VuZCcpO1xuXG52YXIgJGlzRW51bWVyYWJsZSA9IGNhbGxCb3VuZCgnT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZScpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXBhcmFtc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBEZWZpbmVPd25Qcm9wZXJ0eShJc0RhdGFEZXNjcmlwdG9yLCBTYW1lVmFsdWUsIEZyb21Qcm9wZXJ0eURlc2NyaXB0b3IsIE8sIFAsIGRlc2MpIHtcblx0aWYgKCEkZGVmaW5lUHJvcGVydHkpIHtcblx0XHRpZiAoIUlzRGF0YURlc2NyaXB0b3IoZGVzYykpIHtcblx0XHRcdC8vIEVTMyBkb2VzIG5vdCBzdXBwb3J0IGdldHRlcnMvc2V0dGVyc1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRpZiAoIWRlc2NbJ1tbQ29uZmlndXJhYmxlXV0nXSB8fCAhZGVzY1snW1tXcml0YWJsZV1dJ10pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBmYWxsYmFjayBmb3IgRVMzXG5cdFx0aWYgKFAgaW4gTyAmJiAkaXNFbnVtZXJhYmxlKE8sIFApICE9PSAhIWRlc2NbJ1tbRW51bWVyYWJsZV1dJ10pIHtcblx0XHRcdC8vIGEgbm9uLWVudW1lcmFibGUgZXhpc3RpbmcgcHJvcGVydHlcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBwcm9wZXJ0eSBkb2VzIG5vdCBleGlzdCBhdCBhbGwsIG9yIGV4aXN0cyBidXQgaXMgZW51bWVyYWJsZVxuXHRcdHZhciBWID0gZGVzY1snW1tWYWx1ZV1dJ107XG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG5cdFx0T1tQXSA9IFY7IC8vIHdpbGwgdXNlIFtbRGVmaW5lXV1cblx0XHRyZXR1cm4gU2FtZVZhbHVlKE9bUF0sIFYpO1xuXHR9XG5cdCRkZWZpbmVQcm9wZXJ0eShPLCBQLCBGcm9tUHJvcGVydHlEZXNjcmlwdG9yKGRlc2MpKTtcblx0cmV0dXJuIHRydWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYXNzZXJ0UmVjb3JkID0gcmVxdWlyZSgnLi4vaGVscGVycy9hc3NlcnRSZWNvcmQnKTtcblxudmFyIFR5cGUgPSByZXF1aXJlKCcuL1R5cGUnKTtcblxuLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1mcm9tcHJvcGVydHlkZXNjcmlwdG9yXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gRnJvbVByb3BlcnR5RGVzY3JpcHRvcihEZXNjKSB7XG5cdGlmICh0eXBlb2YgRGVzYyA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRyZXR1cm4gRGVzYztcblx0fVxuXG5cdGFzc2VydFJlY29yZChUeXBlLCAnUHJvcGVydHkgRGVzY3JpcHRvcicsICdEZXNjJywgRGVzYyk7XG5cblx0dmFyIG9iaiA9IHt9O1xuXHRpZiAoJ1tbVmFsdWVdXScgaW4gRGVzYykge1xuXHRcdG9iai52YWx1ZSA9IERlc2NbJ1tbVmFsdWVdXSddO1xuXHR9XG5cdGlmICgnW1tXcml0YWJsZV1dJyBpbiBEZXNjKSB7XG5cdFx0b2JqLndyaXRhYmxlID0gRGVzY1snW1tXcml0YWJsZV1dJ107XG5cdH1cblx0aWYgKCdbW0dldF1dJyBpbiBEZXNjKSB7XG5cdFx0b2JqLmdldCA9IERlc2NbJ1tbR2V0XV0nXTtcblx0fVxuXHRpZiAoJ1tbU2V0XV0nIGluIERlc2MpIHtcblx0XHRvYmouc2V0ID0gRGVzY1snW1tTZXRdXSddO1xuXHR9XG5cdGlmICgnW1tFbnVtZXJhYmxlXV0nIGluIERlc2MpIHtcblx0XHRvYmouZW51bWVyYWJsZSA9IERlc2NbJ1tbRW51bWVyYWJsZV1dJ107XG5cdH1cblx0aWYgKCdbW0NvbmZpZ3VyYWJsZV1dJyBpbiBEZXNjKSB7XG5cdFx0b2JqLmNvbmZpZ3VyYWJsZSA9IERlc2NbJ1tbQ29uZmlndXJhYmxlXV0nXTtcblx0fVxuXHRyZXR1cm4gb2JqO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJGdPUEQgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2dldE93blByb3BlcnR5RGVzY3JpcHRvcicpO1xudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG5cbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2NhbGxCb3VuZCcpO1xuXG52YXIgJGlzRW51bWVyYWJsZSA9IGNhbGxCb3VuZCgnT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZScpO1xuXG52YXIgaGFzID0gcmVxdWlyZSgnaGFzJyk7XG5cbnZhciBJc0FycmF5ID0gcmVxdWlyZSgnLi9Jc0FycmF5Jyk7XG52YXIgSXNQcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4vSXNQcm9wZXJ0eUtleScpO1xudmFyIElzUmVnRXhwID0gcmVxdWlyZSgnLi9Jc1JlZ0V4cCcpO1xudmFyIFRvUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9Ub1Byb3BlcnR5RGVzY3JpcHRvcicpO1xudmFyIFR5cGUgPSByZXF1aXJlKCcuL1R5cGUnKTtcblxuLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1vcmRpbmFyeWdldG93bnByb3BlcnR5XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gT3JkaW5hcnlHZXRPd25Qcm9wZXJ0eShPLCBQKSB7XG5cdGlmIChUeXBlKE8pICE9PSAnT2JqZWN0Jykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBPIG11c3QgYmUgYW4gT2JqZWN0Jyk7XG5cdH1cblx0aWYgKCFJc1Byb3BlcnR5S2V5KFApKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IFAgbXVzdCBiZSBhIFByb3BlcnR5IEtleScpO1xuXHR9XG5cdGlmICghaGFzKE8sIFApKSB7XG5cdFx0cmV0dXJuIHZvaWQgMDtcblx0fVxuXHRpZiAoISRnT1BEKSB7XG5cdFx0Ly8gRVMzIC8gSUUgOCBmYWxsYmFja1xuXHRcdHZhciBhcnJheUxlbmd0aCA9IElzQXJyYXkoTykgJiYgUCA9PT0gJ2xlbmd0aCc7XG5cdFx0dmFyIHJlZ2V4TGFzdEluZGV4ID0gSXNSZWdFeHAoTykgJiYgUCA9PT0gJ2xhc3RJbmRleCc7XG5cdFx0cmV0dXJuIHtcblx0XHRcdCdbW0NvbmZpZ3VyYWJsZV1dJzogIShhcnJheUxlbmd0aCB8fCByZWdleExhc3RJbmRleCksXG5cdFx0XHQnW1tFbnVtZXJhYmxlXV0nOiAkaXNFbnVtZXJhYmxlKE8sIFApLFxuXHRcdFx0J1tbVmFsdWVdXSc6IE9bUF0sXG5cdFx0XHQnW1tXcml0YWJsZV1dJzogdHJ1ZVxuXHRcdH07XG5cdH1cblx0cmV0dXJuIFRvUHJvcGVydHlEZXNjcmlwdG9yKCRnT1BEKE8sIFApKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRnT1BEID0gR2V0SW50cmluc2ljKCclT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciUnKTtcbmlmICgkZ09QRCkge1xuXHR0cnkge1xuXHRcdCRnT1BEKFtdLCAnbGVuZ3RoJyk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHQvLyBJRSA4IGhhcyBhIGJyb2tlbiBnT1BEXG5cdFx0JGdPUEQgPSBudWxsO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gJGdPUEQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRtYXRjaCA9IEdldEludHJpbnNpYygnJVN5bWJvbC5tYXRjaCUnLCB0cnVlKTtcblxudmFyIGhhc1JlZ0V4cE1hdGNoZXIgPSByZXF1aXJlKCdpcy1yZWdleCcpO1xuXG52YXIgVG9Cb29sZWFuID0gcmVxdWlyZSgnLi9Ub0Jvb2xlYW4nKTtcblxuLy8gaHR0cHM6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWlzcmVnZXhwXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gSXNSZWdFeHAoYXJndW1lbnQpIHtcblx0aWYgKCFhcmd1bWVudCB8fCB0eXBlb2YgYXJndW1lbnQgIT09ICdvYmplY3QnKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdGlmICgkbWF0Y2gpIHtcblx0XHR2YXIgaXNSZWdFeHAgPSBhcmd1bWVudFskbWF0Y2hdO1xuXHRcdGlmICh0eXBlb2YgaXNSZWdFeHAgIT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRyZXR1cm4gVG9Cb29sZWFuKGlzUmVnRXhwKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGhhc1JlZ0V4cE1hdGNoZXIoYXJndW1lbnQpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhcyA9IHJlcXVpcmUoJ2hhcycpO1xudmFyIHJlZ2V4RXhlYyA9IFJlZ0V4cC5wcm90b3R5cGUuZXhlYztcbnZhciBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxudmFyIHRyeVJlZ2V4RXhlY0NhbGwgPSBmdW5jdGlvbiB0cnlSZWdleEV4ZWModmFsdWUpIHtcblx0dHJ5IHtcblx0XHR2YXIgbGFzdEluZGV4ID0gdmFsdWUubGFzdEluZGV4O1xuXHRcdHZhbHVlLmxhc3RJbmRleCA9IDA7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cblxuXHRcdHJlZ2V4RXhlYy5jYWxsKHZhbHVlKTtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSBmaW5hbGx5IHtcblx0XHR2YWx1ZS5sYXN0SW5kZXggPSBsYXN0SW5kZXg7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cblx0fVxufTtcbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgcmVnZXhDbGFzcyA9ICdbb2JqZWN0IFJlZ0V4cF0nO1xudmFyIGhhc1RvU3RyaW5nVGFnID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sLnRvU3RyaW5nVGFnID09PSAnc3ltYm9sJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc1JlZ2V4KHZhbHVlKSB7XG5cdGlmICghdmFsdWUgfHwgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jykge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRpZiAoIWhhc1RvU3RyaW5nVGFnKSB7XG5cdFx0cmV0dXJuIHRvU3RyLmNhbGwodmFsdWUpID09PSByZWdleENsYXNzO1xuXHR9XG5cblx0dmFyIGRlc2NyaXB0b3IgPSBnT1BEKHZhbHVlLCAnbGFzdEluZGV4Jyk7XG5cdHZhciBoYXNMYXN0SW5kZXhEYXRhUHJvcGVydHkgPSBkZXNjcmlwdG9yICYmIGhhcyhkZXNjcmlwdG9yLCAndmFsdWUnKTtcblx0aWYgKCFoYXNMYXN0SW5kZXhEYXRhUHJvcGVydHkpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRyZXR1cm4gdHJ5UmVnZXhFeGVjQ2FsbCh2YWx1ZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGFzID0gcmVxdWlyZSgnaGFzJyk7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG5cbnZhciBUeXBlID0gcmVxdWlyZSgnLi9UeXBlJyk7XG52YXIgVG9Cb29sZWFuID0gcmVxdWlyZSgnLi9Ub0Jvb2xlYW4nKTtcbnZhciBJc0NhbGxhYmxlID0gcmVxdWlyZSgnLi9Jc0NhbGxhYmxlJyk7XG5cbi8vIGh0dHBzOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi81LjEvI3NlYy04LjEwLjVcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBUb1Byb3BlcnR5RGVzY3JpcHRvcihPYmopIHtcblx0aWYgKFR5cGUoT2JqKSAhPT0gJ09iamVjdCcpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignVG9Qcm9wZXJ0eURlc2NyaXB0b3IgcmVxdWlyZXMgYW4gb2JqZWN0Jyk7XG5cdH1cblxuXHR2YXIgZGVzYyA9IHt9O1xuXHRpZiAoaGFzKE9iaiwgJ2VudW1lcmFibGUnKSkge1xuXHRcdGRlc2NbJ1tbRW51bWVyYWJsZV1dJ10gPSBUb0Jvb2xlYW4oT2JqLmVudW1lcmFibGUpO1xuXHR9XG5cdGlmIChoYXMoT2JqLCAnY29uZmlndXJhYmxlJykpIHtcblx0XHRkZXNjWydbW0NvbmZpZ3VyYWJsZV1dJ10gPSBUb0Jvb2xlYW4oT2JqLmNvbmZpZ3VyYWJsZSk7XG5cdH1cblx0aWYgKGhhcyhPYmosICd2YWx1ZScpKSB7XG5cdFx0ZGVzY1snW1tWYWx1ZV1dJ10gPSBPYmoudmFsdWU7XG5cdH1cblx0aWYgKGhhcyhPYmosICd3cml0YWJsZScpKSB7XG5cdFx0ZGVzY1snW1tXcml0YWJsZV1dJ10gPSBUb0Jvb2xlYW4oT2JqLndyaXRhYmxlKTtcblx0fVxuXHRpZiAoaGFzKE9iaiwgJ2dldCcpKSB7XG5cdFx0dmFyIGdldHRlciA9IE9iai5nZXQ7XG5cdFx0aWYgKHR5cGVvZiBnZXR0ZXIgIT09ICd1bmRlZmluZWQnICYmICFJc0NhbGxhYmxlKGdldHRlcikpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ2dldHRlciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblx0XHR9XG5cdFx0ZGVzY1snW1tHZXRdXSddID0gZ2V0dGVyO1xuXHR9XG5cdGlmIChoYXMoT2JqLCAnc2V0JykpIHtcblx0XHR2YXIgc2V0dGVyID0gT2JqLnNldDtcblx0XHRpZiAodHlwZW9mIHNldHRlciAhPT0gJ3VuZGVmaW5lZCcgJiYgIUlzQ2FsbGFibGUoc2V0dGVyKSkge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ3NldHRlciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblx0XHR9XG5cdFx0ZGVzY1snW1tTZXRdXSddID0gc2V0dGVyO1xuXHR9XG5cblx0aWYgKChoYXMoZGVzYywgJ1tbR2V0XV0nKSB8fCBoYXMoZGVzYywgJ1tbU2V0XV0nKSkgJiYgKGhhcyhkZXNjLCAnW1tWYWx1ZV1dJykgfHwgaGFzKGRlc2MsICdbW1dyaXRhYmxlXV0nKSkpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignSW52YWxpZCBwcm9wZXJ0eSBkZXNjcmlwdG9yLiBDYW5ub3QgYm90aCBzcGVjaWZ5IGFjY2Vzc29ycyBhbmQgYSB2YWx1ZSBvciB3cml0YWJsZSBhdHRyaWJ1dGUnKTtcblx0fVxuXHRyZXR1cm4gZGVzYztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBoYXMgPSByZXF1aXJlKCdoYXMnKTtcblxudmFyIGFzc2VydFJlY29yZCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvYXNzZXJ0UmVjb3JkJyk7XG5cbnZhciBUeXBlID0gcmVxdWlyZSgnLi9UeXBlJyk7XG5cbi8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtaXNkYXRhZGVzY3JpcHRvclxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIElzRGF0YURlc2NyaXB0b3IoRGVzYykge1xuXHRpZiAodHlwZW9mIERlc2MgPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0YXNzZXJ0UmVjb3JkKFR5cGUsICdQcm9wZXJ0eSBEZXNjcmlwdG9yJywgJ0Rlc2MnLCBEZXNjKTtcblxuXHRpZiAoIWhhcyhEZXNjLCAnW1tWYWx1ZV1dJykgJiYgIWhhcyhEZXNjLCAnW1tXcml0YWJsZV1dJykpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRyZXR1cm4gdHJ1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRPYmplY3QgPSBHZXRJbnRyaW5zaWMoJyVPYmplY3QlJyk7XG5cbnZhciBpc1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaXNQcmltaXRpdmUnKTtcblxudmFyICRwcmV2ZW50RXh0ZW5zaW9ucyA9ICRPYmplY3QucHJldmVudEV4dGVuc2lvbnM7XG52YXIgJGlzRXh0ZW5zaWJsZSA9ICRPYmplY3QuaXNFeHRlbnNpYmxlO1xuXG4vLyBodHRwczovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWlzZXh0ZW5zaWJsZS1vXG5cbm1vZHVsZS5leHBvcnRzID0gJHByZXZlbnRFeHRlbnNpb25zXG5cdD8gZnVuY3Rpb24gSXNFeHRlbnNpYmxlKG9iaikge1xuXHRcdHJldHVybiAhaXNQcmltaXRpdmUob2JqKSAmJiAkaXNFeHRlbnNpYmxlKG9iaik7XG5cdH1cblx0OiBmdW5jdGlvbiBJc0V4dGVuc2libGUob2JqKSB7XG5cdFx0cmV0dXJuICFpc1ByaW1pdGl2ZShvYmopO1xuXHR9O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgJGlzTmFOID0gcmVxdWlyZSgnLi4vaGVscGVycy9pc05hTicpO1xuXG4vLyBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNS4xLyNzZWMtOS4xMlxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFNhbWVWYWx1ZSh4LCB5KSB7XG5cdGlmICh4ID09PSB5KSB7IC8vIDAgPT09IC0wLCBidXQgdGhleSBhcmUgbm90IGlkZW50aWNhbC5cblx0XHRpZiAoeCA9PT0gMCkgeyByZXR1cm4gMSAvIHggPT09IDEgLyB5OyB9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblx0cmV0dXJuICRpc05hTih4KSAmJiAkaXNOYU4oeSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnLi4vR2V0SW50cmluc2ljJyk7XG5cbnZhciAkVHlwZUVycm9yID0gR2V0SW50cmluc2ljKCclVHlwZUVycm9yJScpO1xuXG52YXIgSXNQcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4vSXNQcm9wZXJ0eUtleScpO1xudmFyIFR5cGUgPSByZXF1aXJlKCcuL1R5cGUnKTtcblxuLy8gaHR0cHM6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWhhc3Byb3BlcnR5XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gSGFzUHJvcGVydHkoTywgUCkge1xuXHRpZiAoVHlwZShPKSAhPT0gJ09iamVjdCcpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogYE9gIG11c3QgYmUgYW4gT2JqZWN0Jyk7XG5cdH1cblx0aWYgKCFJc1Byb3BlcnR5S2V5KFApKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IGBQYCBtdXN0IGJlIGEgUHJvcGVydHkgS2V5Jyk7XG5cdH1cblx0cmV0dXJuIFAgaW4gTztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRNYXRoID0gR2V0SW50cmluc2ljKCclTWF0aCUnKTtcblxudmFyIFRvTnVtYmVyID0gcmVxdWlyZSgnLi9Ub051bWJlcicpO1xudmFyICRpc05hTiA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaXNOYU4nKTtcbnZhciAkaXNGaW5pdGUgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2lzRmluaXRlJyk7XG52YXIgJHNpZ24gPSByZXF1aXJlKCcuLi9oZWxwZXJzL3NpZ24nKTtcblxudmFyICRmbG9vciA9ICRNYXRoLmZsb29yO1xudmFyICRhYnMgPSAkTWF0aC5hYnM7XG5cbi8vIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi81LjEvI3NlYy05LjRcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBUb0ludGVnZXIodmFsdWUpIHtcblx0dmFyIG51bWJlciA9IFRvTnVtYmVyKHZhbHVlKTtcblx0aWYgKCRpc05hTihudW1iZXIpKSB7IHJldHVybiAwOyB9XG5cdGlmIChudW1iZXIgPT09IDAgfHwgISRpc0Zpbml0ZShudW1iZXIpKSB7IHJldHVybiBudW1iZXI7IH1cblx0cmV0dXJuICRzaWduKG51bWJlcikgKiAkZmxvb3IoJGFicyhudW1iZXIpKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi81LjEvI3NlYy05LjNcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBUb051bWJlcih2YWx1ZSkge1xuXHRyZXR1cm4gK3ZhbHVlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWltcGxpY2l0LWNvZXJjaW9uXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNpZ24obnVtYmVyKSB7XG5cdHJldHVybiBudW1iZXIgPj0gMCA/IDEgOiAtMTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRUeXBlRXJyb3IgPSBHZXRJbnRyaW5zaWMoJyVUeXBlRXJyb3IlJyk7XG52YXIgJE51bWJlciA9IEdldEludHJpbnNpYygnJU51bWJlciUnKTtcbnZhciAkUmVnRXhwID0gR2V0SW50cmluc2ljKCclUmVnRXhwJScpO1xudmFyICRwYXJzZUludGVnZXIgPSBHZXRJbnRyaW5zaWMoJyVwYXJzZUludCUnKTtcblxudmFyIGNhbGxCb3VuZCA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvY2FsbEJvdW5kJyk7XG52YXIgcmVnZXhUZXN0ZXIgPSByZXF1aXJlKCcuLi9oZWxwZXJzL3JlZ2V4VGVzdGVyJyk7XG52YXIgaXNQcmltaXRpdmUgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2lzUHJpbWl0aXZlJyk7XG5cbnZhciAkc3RyU2xpY2UgPSBjYWxsQm91bmQoJ1N0cmluZy5wcm90b3R5cGUuc2xpY2UnKTtcbnZhciBpc0JpbmFyeSA9IHJlZ2V4VGVzdGVyKC9eMGJbMDFdKyQvaSk7XG52YXIgaXNPY3RhbCA9IHJlZ2V4VGVzdGVyKC9eMG9bMC03XSskL2kpO1xudmFyIGlzSW52YWxpZEhleExpdGVyYWwgPSByZWdleFRlc3RlcigvXlstK10weFswLTlhLWZdKyQvaSk7XG52YXIgbm9uV1MgPSBbJ1xcdTAwODUnLCAnXFx1MjAwYicsICdcXHVmZmZlJ10uam9pbignJyk7XG52YXIgbm9uV1NyZWdleCA9IG5ldyAkUmVnRXhwKCdbJyArIG5vbldTICsgJ10nLCAnZycpO1xudmFyIGhhc05vbldTID0gcmVnZXhUZXN0ZXIobm9uV1NyZWdleCk7XG5cbi8vIHdoaXRlc3BhY2UgZnJvbTogaHR0cHM6Ly9lczUuZ2l0aHViLmlvLyN4MTUuNS40LjIwXG4vLyBpbXBsZW1lbnRhdGlvbiBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbS9ibG9iL3YzLjQuMC9lczUtc2hpbS5qcyNMMTMwNC1MMTMyNFxudmFyIHdzID0gW1xuXHQnXFx4MDlcXHgwQVxceDBCXFx4MENcXHgwRFxceDIwXFx4QTBcXHUxNjgwXFx1MTgwRVxcdTIwMDBcXHUyMDAxXFx1MjAwMlxcdTIwMDMnLFxuXHQnXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwQVxcdTIwMkZcXHUyMDVGXFx1MzAwMFxcdTIwMjgnLFxuXHQnXFx1MjAyOVxcdUZFRkYnXG5dLmpvaW4oJycpO1xudmFyIHRyaW1SZWdleCA9IG5ldyBSZWdFeHAoJyheWycgKyB3cyArICddKyl8KFsnICsgd3MgKyAnXSskKScsICdnJyk7XG52YXIgJHJlcGxhY2UgPSBjYWxsQm91bmQoJ1N0cmluZy5wcm90b3R5cGUucmVwbGFjZScpO1xudmFyICR0cmltID0gZnVuY3Rpb24gKHZhbHVlKSB7XG5cdHJldHVybiAkcmVwbGFjZSh2YWx1ZSwgdHJpbVJlZ2V4LCAnJyk7XG59O1xuXG52YXIgVG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL1RvUHJpbWl0aXZlJyk7XG5cbi8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtdG9udW1iZXJcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBUb051bWJlcihhcmd1bWVudCkge1xuXHR2YXIgdmFsdWUgPSBpc1ByaW1pdGl2ZShhcmd1bWVudCkgPyBhcmd1bWVudCA6IFRvUHJpbWl0aXZlKGFyZ3VtZW50LCAkTnVtYmVyKTtcblx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N5bWJvbCcpIHtcblx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignQ2Fubm90IGNvbnZlcnQgYSBTeW1ib2wgdmFsdWUgdG8gYSBudW1iZXInKTtcblx0fVxuXHRpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuXHRcdGlmIChpc0JpbmFyeSh2YWx1ZSkpIHtcblx0XHRcdHJldHVybiBUb051bWJlcigkcGFyc2VJbnRlZ2VyKCRzdHJTbGljZSh2YWx1ZSwgMiksIDIpKTtcblx0XHR9IGVsc2UgaWYgKGlzT2N0YWwodmFsdWUpKSB7XG5cdFx0XHRyZXR1cm4gVG9OdW1iZXIoJHBhcnNlSW50ZWdlcigkc3RyU2xpY2UodmFsdWUsIDIpLCA4KSk7XG5cdFx0fSBlbHNlIGlmIChoYXNOb25XUyh2YWx1ZSkgfHwgaXNJbnZhbGlkSGV4TGl0ZXJhbCh2YWx1ZSkpIHtcblx0XHRcdHJldHVybiBOYU47XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciB0cmltbWVkID0gJHRyaW0odmFsdWUpO1xuXHRcdFx0aWYgKHRyaW1tZWQgIT09IHZhbHVlKSB7XG5cdFx0XHRcdHJldHVybiBUb051bWJlcih0cmltbWVkKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0cmV0dXJuICROdW1iZXIodmFsdWUpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJHRlc3QgPSBHZXRJbnRyaW5zaWMoJ1JlZ0V4cC5wcm90b3R5cGUudGVzdCcpO1xuXG52YXIgY2FsbEJpbmQgPSByZXF1aXJlKCcuL2NhbGxCaW5kJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmVnZXhUZXN0ZXIocmVnZXgpIHtcblx0cmV0dXJuIGNhbGxCaW5kKCR0ZXN0LCByZWdleCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCdlcy10by1wcmltaXRpdmUvZXMyMDE1Jyk7XG5cbi8vIGh0dHBzOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtdG9wcmltaXRpdmVcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBUb1ByaW1pdGl2ZShpbnB1dCkge1xuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcblx0XHRyZXR1cm4gdG9QcmltaXRpdmUoaW5wdXQsIGFyZ3VtZW50c1sxXSk7XG5cdH1cblx0cmV0dXJuIHRvUHJpbWl0aXZlKGlucHV0KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBoYXNTeW1ib2xzID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAnc3ltYm9sJztcblxudmFyIGlzUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9oZWxwZXJzL2lzUHJpbWl0aXZlJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJ2lzLWNhbGxhYmxlJyk7XG52YXIgaXNEYXRlID0gcmVxdWlyZSgnaXMtZGF0ZS1vYmplY3QnKTtcbnZhciBpc1N5bWJvbCA9IHJlcXVpcmUoJ2lzLXN5bWJvbCcpO1xuXG52YXIgb3JkaW5hcnlUb1ByaW1pdGl2ZSA9IGZ1bmN0aW9uIE9yZGluYXJ5VG9QcmltaXRpdmUoTywgaGludCkge1xuXHRpZiAodHlwZW9mIE8gPT09ICd1bmRlZmluZWQnIHx8IE8gPT09IG51bGwpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBtZXRob2Qgb24gJyArIE8pO1xuXHR9XG5cdGlmICh0eXBlb2YgaGludCAhPT0gJ3N0cmluZycgfHwgKGhpbnQgIT09ICdudW1iZXInICYmIGhpbnQgIT09ICdzdHJpbmcnKSkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ2hpbnQgbXVzdCBiZSBcInN0cmluZ1wiIG9yIFwibnVtYmVyXCInKTtcblx0fVxuXHR2YXIgbWV0aG9kTmFtZXMgPSBoaW50ID09PSAnc3RyaW5nJyA/IFsndG9TdHJpbmcnLCAndmFsdWVPZiddIDogWyd2YWx1ZU9mJywgJ3RvU3RyaW5nJ107XG5cdHZhciBtZXRob2QsIHJlc3VsdCwgaTtcblx0Zm9yIChpID0gMDsgaSA8IG1ldGhvZE5hbWVzLmxlbmd0aDsgKytpKSB7XG5cdFx0bWV0aG9kID0gT1ttZXRob2ROYW1lc1tpXV07XG5cdFx0aWYgKGlzQ2FsbGFibGUobWV0aG9kKSkge1xuXHRcdFx0cmVzdWx0ID0gbWV0aG9kLmNhbGwoTyk7XG5cdFx0XHRpZiAoaXNQcmltaXRpdmUocmVzdWx0KSkge1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHR0aHJvdyBuZXcgVHlwZUVycm9yKCdObyBkZWZhdWx0IHZhbHVlJyk7XG59O1xuXG52YXIgR2V0TWV0aG9kID0gZnVuY3Rpb24gR2V0TWV0aG9kKE8sIFApIHtcblx0dmFyIGZ1bmMgPSBPW1BdO1xuXHRpZiAoZnVuYyAhPT0gbnVsbCAmJiB0eXBlb2YgZnVuYyAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRpZiAoIWlzQ2FsbGFibGUoZnVuYykpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoZnVuYyArICcgcmV0dXJuZWQgZm9yIHByb3BlcnR5ICcgKyBQICsgJyBvZiBvYmplY3QgJyArIE8gKyAnIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG5cdFx0fVxuXHRcdHJldHVybiBmdW5jO1xuXHR9XG5cdHJldHVybiB2b2lkIDA7XG59O1xuXG4vLyBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtdG9wcmltaXRpdmVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gVG9QcmltaXRpdmUoaW5wdXQpIHtcblx0aWYgKGlzUHJpbWl0aXZlKGlucHV0KSkge1xuXHRcdHJldHVybiBpbnB1dDtcblx0fVxuXHR2YXIgaGludCA9ICdkZWZhdWx0Jztcblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG5cdFx0aWYgKGFyZ3VtZW50c1sxXSA9PT0gU3RyaW5nKSB7XG5cdFx0XHRoaW50ID0gJ3N0cmluZyc7XG5cdFx0fSBlbHNlIGlmIChhcmd1bWVudHNbMV0gPT09IE51bWJlcikge1xuXHRcdFx0aGludCA9ICdudW1iZXInO1xuXHRcdH1cblx0fVxuXG5cdHZhciBleG90aWNUb1ByaW07XG5cdGlmIChoYXNTeW1ib2xzKSB7XG5cdFx0aWYgKFN5bWJvbC50b1ByaW1pdGl2ZSkge1xuXHRcdFx0ZXhvdGljVG9QcmltID0gR2V0TWV0aG9kKGlucHV0LCBTeW1ib2wudG9QcmltaXRpdmUpO1xuXHRcdH0gZWxzZSBpZiAoaXNTeW1ib2woaW5wdXQpKSB7XG5cdFx0XHRleG90aWNUb1ByaW0gPSBTeW1ib2wucHJvdG90eXBlLnZhbHVlT2Y7XG5cdFx0fVxuXHR9XG5cdGlmICh0eXBlb2YgZXhvdGljVG9QcmltICE9PSAndW5kZWZpbmVkJykge1xuXHRcdHZhciByZXN1bHQgPSBleG90aWNUb1ByaW0uY2FsbChpbnB1dCwgaGludCk7XG5cdFx0aWYgKGlzUHJpbWl0aXZlKHJlc3VsdCkpIHtcblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ3VuYWJsZSB0byBjb252ZXJ0IGV4b3RpYyBvYmplY3QgdG8gcHJpbWl0aXZlJyk7XG5cdH1cblx0aWYgKGhpbnQgPT09ICdkZWZhdWx0JyAmJiAoaXNEYXRlKGlucHV0KSB8fCBpc1N5bWJvbChpbnB1dCkpKSB7XG5cdFx0aGludCA9ICdzdHJpbmcnO1xuXHR9XG5cdHJldHVybiBvcmRpbmFyeVRvUHJpbWl0aXZlKGlucHV0LCBoaW50ID09PSAnZGVmYXVsdCcgPyAnbnVtYmVyJyA6IGhpbnQpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc1ByaW1pdGl2ZSh2YWx1ZSkge1xuXHRyZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgKHR5cGVvZiB2YWx1ZSAhPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBnZXREYXkgPSBEYXRlLnByb3RvdHlwZS5nZXREYXk7XG52YXIgdHJ5RGF0ZU9iamVjdCA9IGZ1bmN0aW9uIHRyeURhdGVHZXREYXlDYWxsKHZhbHVlKSB7XG5cdHRyeSB7XG5cdFx0Z2V0RGF5LmNhbGwodmFsdWUpO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59O1xuXG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGRhdGVDbGFzcyA9ICdbb2JqZWN0IERhdGVdJztcbnZhciBoYXNUb1N0cmluZ1RhZyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbC50b1N0cmluZ1RhZyA9PT0gJ3N5bWJvbCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNEYXRlT2JqZWN0KHZhbHVlKSB7XG5cdGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnIHx8IHZhbHVlID09PSBudWxsKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdHJldHVybiBoYXNUb1N0cmluZ1RhZyA/IHRyeURhdGVPYmplY3QodmFsdWUpIDogdG9TdHIuY2FsbCh2YWx1ZSkgPT09IGRhdGVDbGFzcztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCcuLi9HZXRJbnRyaW5zaWMnKTtcblxudmFyICRTdHJpbmcgPSBHZXRJbnRyaW5zaWMoJyVTdHJpbmclJyk7XG52YXIgJFR5cGVFcnJvciA9IEdldEludHJpbnNpYygnJVR5cGVFcnJvciUnKTtcblxuLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy10b3N0cmluZ1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFRvU3RyaW5nKGFyZ3VtZW50KSB7XG5cdGlmICh0eXBlb2YgYXJndW1lbnQgPT09ICdzeW1ib2wnKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ0Nhbm5vdCBjb252ZXJ0IGEgU3ltYm9sIHZhbHVlIHRvIGEgc3RyaW5nJyk7XG5cdH1cblx0cmV0dXJuICRTdHJpbmcoYXJndW1lbnQpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJy4uL0dldEludHJpbnNpYycpO1xuXG52YXIgJE9iamVjdCA9IEdldEludHJpbnNpYygnJU9iamVjdCUnKTtcblxudmFyIFJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuL1JlcXVpcmVPYmplY3RDb2VyY2libGUnKTtcblxuLy8gaHR0cHM6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy10b29iamVjdFxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIFRvT2JqZWN0KHZhbHVlKSB7XG5cdFJlcXVpcmVPYmplY3RDb2VyY2libGUodmFsdWUpO1xuXHRyZXR1cm4gJE9iamVjdCh2YWx1ZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmaW5lID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciBnZXRQb2x5ZmlsbCA9IHJlcXVpcmUoJy4vcG9seWZpbGwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaGltRmxhdCgpIHtcblx0dmFyIHBvbHlmaWxsID0gZ2V0UG9seWZpbGwoKTtcblx0ZGVmaW5lKFxuXHRcdEFycmF5LnByb3RvdHlwZSxcblx0XHR7IGZsYXQ6IHBvbHlmaWxsIH0sXG5cdFx0eyBmbGF0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBBcnJheS5wcm90b3R5cGUuZmxhdCAhPT0gcG9seWZpbGw7IH0gfVxuXHQpO1xuXHRyZXR1cm4gcG9seWZpbGw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmaW5lID0gcmVxdWlyZSgnZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciBpc1N5bWJvbCA9IHJlcXVpcmUoJ2lzLXN5bWJvbCcpO1xuXG52YXIgZ2xvYmFsS2V5ID0gJ19fIGdsb2JhbCBjYWNoZSBrZXkgX18nO1xuLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXByb3BlcnRpZXNcbmlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIGlzU3ltYm9sKFN5bWJvbCgnZm9vJykpICYmIHR5cGVvZiBTeW1ib2xbJ2ZvciddID09PSAnZnVuY3Rpb24nKSB7XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXByb3BlcnRpZXNcblx0Z2xvYmFsS2V5ID0gU3ltYm9sWydmb3InXShnbG9iYWxLZXkpO1xufVxuXG52YXIgdHJ1ZVRodW5rID0gZnVuY3Rpb24gKCkge1xuXHRyZXR1cm4gdHJ1ZTtcbn07XG5cbnZhciBlbnN1cmVDYWNoZSA9IGZ1bmN0aW9uIGVuc3VyZUNhY2hlKCkge1xuXHRpZiAoIWdsb2JhbFtnbG9iYWxLZXldKSB7XG5cdFx0dmFyIHByb3BlcnRpZXMgPSB7fTtcblx0XHRwcm9wZXJ0aWVzW2dsb2JhbEtleV0gPSB7fTtcblx0XHR2YXIgcHJlZGljYXRlcyA9IHt9O1xuXHRcdHByZWRpY2F0ZXNbZ2xvYmFsS2V5XSA9IHRydWVUaHVuaztcblx0XHRkZWZpbmUoZ2xvYmFsLCBwcm9wZXJ0aWVzLCBwcmVkaWNhdGVzKTtcblx0fVxuXHRyZXR1cm4gZ2xvYmFsW2dsb2JhbEtleV07XG59O1xuXG52YXIgY2FjaGUgPSBlbnN1cmVDYWNoZSgpO1xuXG52YXIgaXNQcmltaXRpdmUgPSBmdW5jdGlvbiBpc1ByaW1pdGl2ZSh2YWwpIHtcblx0cmV0dXJuIHZhbCA9PT0gbnVsbCB8fCAodHlwZW9mIHZhbCAhPT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbCAhPT0gJ2Z1bmN0aW9uJyk7XG59O1xuXG52YXIgZ2V0UHJpbWl0aXZlS2V5ID0gZnVuY3Rpb24gZ2V0UHJpbWl0aXZlS2V5KHZhbCkge1xuXHRpZiAoaXNTeW1ib2wodmFsKSkge1xuXHRcdHJldHVybiBTeW1ib2wucHJvdG90eXBlLnZhbHVlT2YuY2FsbCh2YWwpO1xuXHR9XG5cdHJldHVybiB0eXBlb2YgdmFsICsgJyB8ICcgKyBTdHJpbmcodmFsKTtcbn07XG5cbnZhciByZXF1aXJlUHJpbWl0aXZlS2V5ID0gZnVuY3Rpb24gcmVxdWlyZVByaW1pdGl2ZUtleSh2YWwpIHtcblx0aWYgKCFpc1ByaW1pdGl2ZSh2YWwpKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcigna2V5IG11c3Qgbm90IGJlIGFuIG9iamVjdCcpO1xuXHR9XG59O1xuXG52YXIgZ2xvYmFsQ2FjaGUgPSB7XG5cdGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcblx0XHRkZWxldGUgZ2xvYmFsW2dsb2JhbEtleV07XG5cdFx0Y2FjaGUgPSBlbnN1cmVDYWNoZSgpO1xuXHR9LFxuXG5cdCdkZWxldGUnOiBmdW5jdGlvbiBkZWxldGVLZXkoa2V5KSB7XG5cdFx0cmVxdWlyZVByaW1pdGl2ZUtleShrZXkpO1xuXHRcdGRlbGV0ZSBjYWNoZVtnZXRQcmltaXRpdmVLZXkoa2V5KV07XG5cdFx0cmV0dXJuICFnbG9iYWxDYWNoZS5oYXMoa2V5KTtcblx0fSxcblxuXHRnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcblx0XHRyZXF1aXJlUHJpbWl0aXZlS2V5KGtleSk7XG5cdFx0cmV0dXJuIGNhY2hlW2dldFByaW1pdGl2ZUtleShrZXkpXTtcblx0fSxcblxuXHRoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcblx0XHRyZXF1aXJlUHJpbWl0aXZlS2V5KGtleSk7XG5cdFx0cmV0dXJuIGdldFByaW1pdGl2ZUtleShrZXkpIGluIGNhY2hlO1xuXHR9LFxuXG5cdHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcblx0XHRyZXF1aXJlUHJpbWl0aXZlS2V5KGtleSk7XG5cdFx0dmFyIHByaW1pdGl2ZUtleSA9IGdldFByaW1pdGl2ZUtleShrZXkpO1xuXHRcdHZhciBwcm9wcyA9IHt9O1xuXHRcdHByb3BzW3ByaW1pdGl2ZUtleV0gPSB2YWx1ZTtcblx0XHR2YXIgcHJlZGljYXRlcyA9IHt9O1xuXHRcdHByZWRpY2F0ZXNbcHJpbWl0aXZlS2V5XSA9IHRydWVUaHVuaztcblx0XHRkZWZpbmUoY2FjaGUsIHByb3BzLCBwcmVkaWNhdGVzKTtcblx0XHRyZXR1cm4gZ2xvYmFsQ2FjaGUuaGFzKGtleSk7XG5cdH0sXG5cblx0c2V0SWZNaXNzaW5nVGhlbkdldDogZnVuY3Rpb24gc2V0SWZNaXNzaW5nVGhlbkdldChrZXksIHZhbHVlVGh1bmspIHtcblx0XHRpZiAoZ2xvYmFsQ2FjaGUuaGFzKGtleSkpIHtcblx0XHRcdHJldHVybiBnbG9iYWxDYWNoZS5nZXQoa2V5KTtcblx0XHR9XG5cdFx0dmFyIGl0ZW0gPSB2YWx1ZVRodW5rKCk7XG5cdFx0Z2xvYmFsQ2FjaGUuc2V0KGtleSwgaXRlbSk7XG5cdFx0cmV0dXJuIGl0ZW07XG5cdH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsQ2FjaGU7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuTUFYX1NQRUNJRklDSVRZID0gZXhwb3J0cy5HTE9CQUxfQ0FDSEVfS0VZID0gdm9pZCAwO1xudmFyIEdMT0JBTF9DQUNIRV9LRVkgPSAncmVhY3RXaXRoU3R5bGVzSW50ZXJmYWNlQ1NTJztcbmV4cG9ydHMuR0xPQkFMX0NBQ0hFX0tFWSA9IEdMT0JBTF9DQUNIRV9LRVk7XG52YXIgTUFYX1NQRUNJRklDSVRZID0gMjA7XG5leHBvcnRzLk1BWF9TUEVDSUZJQ0lUWSA9IE1BWF9TUEVDSUZJQ0lUWTsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gZ2V0Q2xhc3NOYW1lO1xuXG4vKipcbiAqIENvbnN0cnVjdCBhIGNsYXNzIG5hbWUuXG4gKlxuICogbmFtZXNwYWNlIHtTdHJpbmd9IFVzZWQgdG8gY29uc3RydWN0IHVuaXF1ZSBjbGFzcyBuYW1lcy5cbiAqIHN0eWxlTmFtZSB7U3RyaW5nfSBOYW1lIGlkZW50aWZ5aW5nIHRoZSBzcGVjaWZpYyBzdHlsZS5cbiAqXG4gKiBSZXR1cm4gdGhlIGNsYXNzIG5hbWUuXG4gKi9cbmZ1bmN0aW9uIGdldENsYXNzTmFtZShuYW1lc3BhY2UsIHN0eWxlTmFtZSkge1xuICB2YXIgbmFtZXNwYWNlU2VnbWVudCA9IG5hbWVzcGFjZS5sZW5ndGggPiAwID8gXCJcIi5jb25jYXQobmFtZXNwYWNlLCBcIl9fXCIpIDogJyc7XG4gIHJldHVybiBcIlwiLmNvbmNhdChuYW1lc3BhY2VTZWdtZW50KS5jb25jYXQoc3R5bGVOYW1lKTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gdm9pZCAwO1xuXG4vLyBUaGlzIGZ1bmN0aW9uIHRha2VzIGFuIGFycmF5IG9mIHN0eWxlcyBhbmQgc2VwYXJhdGVzIHRoZW0gaW50byBzdHlsZXMgdGhhdFxuLy8gYXJlIGhhbmRsZWQgYnkgQXBocm9kaXRlIGFuZCBpbmxpbmUgc3R5bGVzLlxuZnVuY3Rpb24gc2VwYXJhdGVTdHlsZXMoc3R5bGVzQXJyYXkpIHtcbiAgdmFyIGNsYXNzTmFtZXMgPSBbXTsgLy8gU2luY2UgZGV0ZXJtaW5pbmcgaWYgYW4gT2JqZWN0IGlzIGVtcHR5IHJlcXVpcmVzIGNvbGxlY3RpbmcgYWxsIG9mIGl0c1xuICAvLyBrZXlzLCBhbmQgd2Ugd2FudCB0aGUgYmVzdCBwZXJmb3JtYW5jZSBpbiB0aGlzIGNvZGUgYmVjYXVzZSB3ZSBhcmUgaW4gdGhlXG4gIC8vIHJlbmRlciBwYXRoLCB3ZSBhcmUgZ29pbmcgdG8gZG8gYSBsaXR0bGUgYm9va2tlZXBpbmcgb3Vyc2VsdmVzLlxuXG4gIHZhciBoYXNJbmxpbmVTdHlsZXMgPSBmYWxzZTtcbiAgdmFyIGlubGluZVN0eWxlcyA9IHt9OyAvLyBUaGlzIGlzIHJ1biBvbiBwb3RlbnRpYWxseSBldmVyeSBub2RlIGluIHRoZSB0cmVlIHdoZW4gcmVuZGVyaW5nLCB3aGVyZVxuICAvLyBwZXJmb3JtYW5jZSBpcyBjcml0aWNhbC4gTm9ybWFsbHkgd2Ugd291bGQgcHJlZmVyIHVzaW5nIGBmb3JFYWNoYCwgYnV0XG4gIC8vIG9sZC1mYXNoaW9uZWQgZm9yIGxvb3BzIGFyZSBmYXN0ZXIgc28gdGhhdCdzIHdoYXQgd2UgaGF2ZSBjaG9zZW4gaGVyZS5cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0FycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wbHVzcGx1c1xuICAgIHZhciBzdHlsZSA9IHN0eWxlc0FycmF5W2ldOyAvLyBJZiB0aGlzICBzdHlsZSBpcyBmYWxzeSwgd2UganVzdCB3YW50IHRvIGRpc3JlZ2FyZCBpdC4gVGhpcyBhbGxvd3MgZm9yXG4gICAgLy8gc3ludGF4IGxpa2U6XG4gICAgLy9cbiAgICAvLyAgIGNzcyhpc0ZvbyAmJiBzdHlsZXMuZm9vKVxuXG4gICAgaWYgKHN0eWxlKSB7XG4gICAgICBpZiAodHlwZW9mIHN0eWxlID09PSAnc3RyaW5nJykge1xuICAgICAgICBjbGFzc05hbWVzLnB1c2goc3R5bGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihpbmxpbmVTdHlsZXMsIHN0eWxlKTtcbiAgICAgICAgaGFzSW5saW5lU3R5bGVzID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGNsYXNzTmFtZXM6IGNsYXNzTmFtZXMsXG4gICAgaGFzSW5saW5lU3R5bGVzOiBoYXNJbmxpbmVTdHlsZXMsXG4gICAgaW5saW5lU3R5bGVzOiBpbmxpbmVTdHlsZXNcbiAgfTtcbn1cblxudmFyIF9kZWZhdWx0ID0gc2VwYXJhdGVTdHlsZXM7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gcmVnaXN0ZXJJbnRlcmZhY2VXaXRoRGVmYXVsdFRoZW1lO1xuXG52YXIgX1RoZW1lZFN0eWxlU2hlZXQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdC13aXRoLXN0eWxlcy9saWIvVGhlbWVkU3R5bGVTaGVldFwiKSk7XG5cbnZhciBfRGVmYXVsdFRoZW1lID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdGhlbWUvRGVmYXVsdFRoZW1lXCIpKTtcblxuZnVuY3Rpb24gcmVnaXN0ZXJJbnRlcmZhY2VXaXRoRGVmYXVsdFRoZW1lKHJlYWN0V2l0aFN0eWxlc0ludGVyZmFjZSkge1xuICBfVGhlbWVkU3R5bGVTaGVldFtcImRlZmF1bHRcIl0ucmVnaXN0ZXJJbnRlcmZhY2UocmVhY3RXaXRoU3R5bGVzSW50ZXJmYWNlKTtcblxuICBfVGhlbWVkU3R5bGVTaGVldFtcImRlZmF1bHRcIl0ucmVnaXN0ZXJUaGVtZShfRGVmYXVsdFRoZW1lW1wiZGVmYXVsdFwiXSk7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IHZvaWQgMDtcbnZhciBjb3JlID0ge1xuICB3aGl0ZTogJyNmZmYnLFxuICBncmF5OiAnIzQ4NDg0OCcsXG4gIGdyYXlMaWdodDogJyM4Mjg4OGEnLFxuICBncmF5TGlnaHRlcjogJyNjYWNjY2QnLFxuICBncmF5TGlnaHRlc3Q6ICcjZjJmMmYyJyxcbiAgYm9yZGVyTWVkaXVtOiAnI2M0YzRjNCcsXG4gIGJvcmRlcjogJyNkYmRiZGInLFxuICBib3JkZXJMaWdodDogJyNlNGU3ZTcnLFxuICBib3JkZXJMaWdodGVyOiAnI2VjZWVlZScsXG4gIGJvcmRlckJyaWdodDogJyNmNGY1ZjUnLFxuICBwcmltYXJ5OiAnIzAwYTY5OScsXG4gIHByaW1hcnlTaGFkZV8xOiAnIzMzZGFjZCcsXG4gIHByaW1hcnlTaGFkZV8yOiAnIzY2ZTJkYScsXG4gIHByaW1hcnlTaGFkZV8zOiAnIzgwZThlMCcsXG4gIHByaW1hcnlTaGFkZV80OiAnI2IyZjFlYycsXG4gIHByaW1hcnlfZGFyazogJyMwMDg0ODknLFxuICBzZWNvbmRhcnk6ICcjMDA3YTg3JyxcbiAgeWVsbG93OiAnI2ZmZThiYycsXG4gIHllbGxvd19kYXJrOiAnI2ZmY2U3MSdcbn07XG52YXIgX2RlZmF1bHQgPSB7XG4gIHJlYWN0RGF0ZXM6IHtcbiAgICB6SW5kZXg6IDAsXG4gICAgYm9yZGVyOiB7XG4gICAgICBpbnB1dDoge1xuICAgICAgICBib3JkZXI6IDAsXG4gICAgICAgIGJvcmRlclRvcDogMCxcbiAgICAgICAgYm9yZGVyUmlnaHQ6IDAsXG4gICAgICAgIGJvcmRlckJvdHRvbTogJzJweCBzb2xpZCB0cmFuc3BhcmVudCcsXG4gICAgICAgIGJvcmRlckxlZnQ6IDAsXG4gICAgICAgIG91dGxpbmVGb2N1c2VkOiAwLFxuICAgICAgICBib3JkZXJGb2N1c2VkOiAwLFxuICAgICAgICBib3JkZXJUb3BGb2N1c2VkOiAwLFxuICAgICAgICBib3JkZXJMZWZ0Rm9jdXNlZDogMCxcbiAgICAgICAgYm9yZGVyQm90dG9tRm9jdXNlZDogXCIycHggc29saWQgXCIuY29uY2F0KGNvcmUucHJpbWFyeV9kYXJrKSxcbiAgICAgICAgYm9yZGVyUmlnaHRGb2N1c2VkOiAwLFxuICAgICAgICBib3JkZXJSYWRpdXM6IDBcbiAgICAgIH0sXG4gICAgICBwaWNrZXJJbnB1dDoge1xuICAgICAgICBib3JkZXJXaWR0aDogMSxcbiAgICAgICAgYm9yZGVyU3R5bGU6ICdzb2xpZCcsXG4gICAgICAgIGJvcmRlclJhZGl1czogMlxuICAgICAgfVxuICAgIH0sXG4gICAgY29sb3I6IHtcbiAgICAgIGNvcmU6IGNvcmUsXG4gICAgICBkaXNhYmxlZDogY29yZS5ncmF5TGlnaHRlc3QsXG4gICAgICBiYWNrZ3JvdW5kOiBjb3JlLndoaXRlLFxuICAgICAgYmFja2dyb3VuZERhcms6ICcjZjJmMmYyJyxcbiAgICAgIGJhY2tncm91bmRGb2N1c2VkOiBjb3JlLndoaXRlLFxuICAgICAgYm9yZGVyOiAncmdiKDIxOSwgMjE5LCAyMTkpJyxcbiAgICAgIHRleHQ6IGNvcmUuZ3JheSxcbiAgICAgIHRleHREaXNhYmxlZDogY29yZS5ib3JkZXIsXG4gICAgICB0ZXh0Rm9jdXNlZDogJyMwMDdhODcnLFxuICAgICAgcGxhY2Vob2xkZXJUZXh0OiAnIzc1NzU3NScsXG4gICAgICBvdXRzaWRlOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogY29yZS53aGl0ZSxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yX2FjdGl2ZTogY29yZS53aGl0ZSxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yX2hvdmVyOiBjb3JlLndoaXRlLFxuICAgICAgICBjb2xvcjogY29yZS5ncmF5LFxuICAgICAgICBjb2xvcl9hY3RpdmU6IGNvcmUuZ3JheSxcbiAgICAgICAgY29sb3JfaG92ZXI6IGNvcmUuZ3JheVxuICAgICAgfSxcbiAgICAgIGhpZ2hsaWdodGVkOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogY29yZS55ZWxsb3csXG4gICAgICAgIGJhY2tncm91bmRDb2xvcl9hY3RpdmU6IGNvcmUueWVsbG93X2RhcmssXG4gICAgICAgIGJhY2tncm91bmRDb2xvcl9ob3ZlcjogY29yZS55ZWxsb3dfZGFyayxcbiAgICAgICAgY29sb3I6IGNvcmUuZ3JheSxcbiAgICAgICAgY29sb3JfYWN0aXZlOiBjb3JlLmdyYXksXG4gICAgICAgIGNvbG9yX2hvdmVyOiBjb3JlLmdyYXlcbiAgICAgIH0sXG4gICAgICBtaW5pbXVtTmlnaHRzOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogY29yZS53aGl0ZSxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yX2FjdGl2ZTogY29yZS53aGl0ZSxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yX2hvdmVyOiBjb3JlLndoaXRlLFxuICAgICAgICBib3JkZXJDb2xvcjogY29yZS5ib3JkZXJMaWdodGVyLFxuICAgICAgICBjb2xvcjogY29yZS5ncmF5TGlnaHRlcixcbiAgICAgICAgY29sb3JfYWN0aXZlOiBjb3JlLmdyYXlMaWdodGVyLFxuICAgICAgICBjb2xvcl9ob3ZlcjogY29yZS5ncmF5TGlnaHRlclxuICAgICAgfSxcbiAgICAgIGhvdmVyZWRTcGFuOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogY29yZS5wcmltYXJ5U2hhZGVfNCxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yX2FjdGl2ZTogY29yZS5wcmltYXJ5U2hhZGVfMyxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yX2hvdmVyOiBjb3JlLnByaW1hcnlTaGFkZV80LFxuICAgICAgICBib3JkZXJDb2xvcjogY29yZS5wcmltYXJ5U2hhZGVfMyxcbiAgICAgICAgYm9yZGVyQ29sb3JfYWN0aXZlOiBjb3JlLnByaW1hcnlTaGFkZV8zLFxuICAgICAgICBib3JkZXJDb2xvcl9ob3ZlcjogY29yZS5wcmltYXJ5U2hhZGVfMyxcbiAgICAgICAgY29sb3I6IGNvcmUuc2Vjb25kYXJ5LFxuICAgICAgICBjb2xvcl9hY3RpdmU6IGNvcmUuc2Vjb25kYXJ5LFxuICAgICAgICBjb2xvcl9ob3ZlcjogY29yZS5zZWNvbmRhcnlcbiAgICAgIH0sXG4gICAgICBzZWxlY3RlZFNwYW46IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBjb3JlLnByaW1hcnlTaGFkZV8yLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3JfYWN0aXZlOiBjb3JlLnByaW1hcnlTaGFkZV8xLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3JfaG92ZXI6IGNvcmUucHJpbWFyeVNoYWRlXzEsXG4gICAgICAgIGJvcmRlckNvbG9yOiBjb3JlLnByaW1hcnlTaGFkZV8xLFxuICAgICAgICBib3JkZXJDb2xvcl9hY3RpdmU6IGNvcmUucHJpbWFyeSxcbiAgICAgICAgYm9yZGVyQ29sb3JfaG92ZXI6IGNvcmUucHJpbWFyeSxcbiAgICAgICAgY29sb3I6IGNvcmUud2hpdGUsXG4gICAgICAgIGNvbG9yX2FjdGl2ZTogY29yZS53aGl0ZSxcbiAgICAgICAgY29sb3JfaG92ZXI6IGNvcmUud2hpdGVcbiAgICAgIH0sXG4gICAgICBzZWxlY3RlZDoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGNvcmUucHJpbWFyeSxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yX2FjdGl2ZTogY29yZS5wcmltYXJ5LFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3JfaG92ZXI6IGNvcmUucHJpbWFyeSxcbiAgICAgICAgYm9yZGVyQ29sb3I6IGNvcmUucHJpbWFyeSxcbiAgICAgICAgYm9yZGVyQ29sb3JfYWN0aXZlOiBjb3JlLnByaW1hcnksXG4gICAgICAgIGJvcmRlckNvbG9yX2hvdmVyOiBjb3JlLnByaW1hcnksXG4gICAgICAgIGNvbG9yOiBjb3JlLndoaXRlLFxuICAgICAgICBjb2xvcl9hY3RpdmU6IGNvcmUud2hpdGUsXG4gICAgICAgIGNvbG9yX2hvdmVyOiBjb3JlLndoaXRlXG4gICAgICB9LFxuICAgICAgYmxvY2tlZF9jYWxlbmRhcjoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGNvcmUuZ3JheUxpZ2h0ZXIsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcl9hY3RpdmU6IGNvcmUuZ3JheUxpZ2h0ZXIsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcl9ob3ZlcjogY29yZS5ncmF5TGlnaHRlcixcbiAgICAgICAgYm9yZGVyQ29sb3I6IGNvcmUuZ3JheUxpZ2h0ZXIsXG4gICAgICAgIGJvcmRlckNvbG9yX2FjdGl2ZTogY29yZS5ncmF5TGlnaHRlcixcbiAgICAgICAgYm9yZGVyQ29sb3JfaG92ZXI6IGNvcmUuZ3JheUxpZ2h0ZXIsXG4gICAgICAgIGNvbG9yOiBjb3JlLmdyYXlMaWdodCxcbiAgICAgICAgY29sb3JfYWN0aXZlOiBjb3JlLmdyYXlMaWdodCxcbiAgICAgICAgY29sb3JfaG92ZXI6IGNvcmUuZ3JheUxpZ2h0XG4gICAgICB9LFxuICAgICAgYmxvY2tlZF9vdXRfb2ZfcmFuZ2U6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBjb3JlLndoaXRlLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3JfYWN0aXZlOiBjb3JlLndoaXRlLFxuICAgICAgICBiYWNrZ3JvdW5kQ29sb3JfaG92ZXI6IGNvcmUud2hpdGUsXG4gICAgICAgIGJvcmRlckNvbG9yOiBjb3JlLmJvcmRlckxpZ2h0LFxuICAgICAgICBib3JkZXJDb2xvcl9hY3RpdmU6IGNvcmUuYm9yZGVyTGlnaHQsXG4gICAgICAgIGJvcmRlckNvbG9yX2hvdmVyOiBjb3JlLmJvcmRlckxpZ2h0LFxuICAgICAgICBjb2xvcjogY29yZS5ncmF5TGlnaHRlcixcbiAgICAgICAgY29sb3JfYWN0aXZlOiBjb3JlLmdyYXlMaWdodGVyLFxuICAgICAgICBjb2xvcl9ob3ZlcjogY29yZS5ncmF5TGlnaHRlclxuICAgICAgfVxuICAgIH0sXG4gICAgc3BhY2luZzoge1xuICAgICAgZGF5UGlja2VySG9yaXpvbnRhbFBhZGRpbmc6IDksXG4gICAgICBjYXB0aW9uUGFkZGluZ1RvcDogMjIsXG4gICAgICBjYXB0aW9uUGFkZGluZ0JvdHRvbTogMzcsXG4gICAgICBpbnB1dFBhZGRpbmc6IDAsXG4gICAgICBkaXNwbGF5VGV4dFBhZGRpbmdWZXJ0aWNhbDogdW5kZWZpbmVkLFxuICAgICAgZGlzcGxheVRleHRQYWRkaW5nVG9wOiAxMSxcbiAgICAgIGRpc3BsYXlUZXh0UGFkZGluZ0JvdHRvbTogOSxcbiAgICAgIGRpc3BsYXlUZXh0UGFkZGluZ0hvcml6b250YWw6IHVuZGVmaW5lZCxcbiAgICAgIGRpc3BsYXlUZXh0UGFkZGluZ0xlZnQ6IDExLFxuICAgICAgZGlzcGxheVRleHRQYWRkaW5nUmlnaHQ6IDExLFxuICAgICAgZGlzcGxheVRleHRQYWRkaW5nVmVydGljYWxfc21hbGw6IHVuZGVmaW5lZCxcbiAgICAgIGRpc3BsYXlUZXh0UGFkZGluZ1RvcF9zbWFsbDogNyxcbiAgICAgIGRpc3BsYXlUZXh0UGFkZGluZ0JvdHRvbV9zbWFsbDogNSxcbiAgICAgIGRpc3BsYXlUZXh0UGFkZGluZ0hvcml6b250YWxfc21hbGw6IHVuZGVmaW5lZCxcbiAgICAgIGRpc3BsYXlUZXh0UGFkZGluZ0xlZnRfc21hbGw6IDcsXG4gICAgICBkaXNwbGF5VGV4dFBhZGRpbmdSaWdodF9zbWFsbDogN1xuICAgIH0sXG4gICAgc2l6aW5nOiB7XG4gICAgICBpbnB1dFdpZHRoOiAxMzAsXG4gICAgICBpbnB1dFdpZHRoX3NtYWxsOiA5NyxcbiAgICAgIGFycm93V2lkdGg6IDI0XG4gICAgfSxcbiAgICBub1Njcm9sbEJhck9uVmVydGljYWxTY3JvbGxhYmxlOiBmYWxzZSxcbiAgICBmb250OiB7XG4gICAgICBzaXplOiAxNCxcbiAgICAgIGNhcHRpb25TaXplOiAxOCxcbiAgICAgIGlucHV0OiB7XG4gICAgICAgIHNpemU6IDE5LFxuICAgICAgICB3ZWlnaHQ6IDIwMCxcbiAgICAgICAgbGluZUhlaWdodDogJzI0cHgnLFxuICAgICAgICBzaXplX3NtYWxsOiAxNSxcbiAgICAgICAgbGluZUhlaWdodF9zbWFsbDogJzE4cHgnLFxuICAgICAgICBsZXR0ZXJTcGFjaW5nX3NtYWxsOiAnMC4ycHgnLFxuICAgICAgICBzdHlsZURpc2FibGVkOiAnaXRhbGljJ1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcbmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gX2RlZmF1bHQ7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmV4cG9ydCB2YXIgUmVhY3RSZWR1eENvbnRleHQgPVxuLyojX19QVVJFX18qL1xuUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgUmVhY3RSZWR1eENvbnRleHQuZGlzcGxheU5hbWUgPSAnUmVhY3RSZWR1eCc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlYWN0UmVkdXhDb250ZXh0OyIsIi8vIERlZmF1bHQgdG8gYSBkdW1teSBcImJhdGNoXCIgaW1wbGVtZW50YXRpb24gdGhhdCBqdXN0IHJ1bnMgdGhlIGNhbGxiYWNrXG5mdW5jdGlvbiBkZWZhdWx0Tm9vcEJhdGNoKGNhbGxiYWNrKSB7XG4gIGNhbGxiYWNrKCk7XG59XG5cbnZhciBiYXRjaCA9IGRlZmF1bHROb29wQmF0Y2g7IC8vIEFsbG93IGluamVjdGluZyBhbm90aGVyIGJhdGNoaW5nIGZ1bmN0aW9uIGxhdGVyXG5cbmV4cG9ydCB2YXIgc2V0QmF0Y2ggPSBmdW5jdGlvbiBzZXRCYXRjaChuZXdCYXRjaCkge1xuICByZXR1cm4gYmF0Y2ggPSBuZXdCYXRjaDtcbn07IC8vIFN1cHBseSBhIGdldHRlciBqdXN0IHRvIHNraXAgZGVhbGluZyB3aXRoIEVTTSBiaW5kaW5nc1xuXG5leHBvcnQgdmFyIGdldEJhdGNoID0gZnVuY3Rpb24gZ2V0QmF0Y2goKSB7XG4gIHJldHVybiBiYXRjaDtcbn07IiwiaW1wb3J0IHsgZ2V0QmF0Y2ggfSBmcm9tICcuL2JhdGNoJzsgLy8gZW5jYXBzdWxhdGVzIHRoZSBzdWJzY3JpcHRpb24gbG9naWMgZm9yIGNvbm5lY3RpbmcgYSBjb21wb25lbnQgdG8gdGhlIHJlZHV4IHN0b3JlLCBhc1xuLy8gd2VsbCBhcyBuZXN0aW5nIHN1YnNjcmlwdGlvbnMgb2YgZGVzY2VuZGFudCBjb21wb25lbnRzLCBzbyB0aGF0IHdlIGNhbiBlbnN1cmUgdGhlXG4vLyBhbmNlc3RvciBjb21wb25lbnRzIHJlLXJlbmRlciBiZWZvcmUgZGVzY2VuZGFudHNcblxudmFyIG51bGxMaXN0ZW5lcnMgPSB7XG4gIG5vdGlmeTogZnVuY3Rpb24gbm90aWZ5KCkge31cbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbigpIHtcbiAgdmFyIGJhdGNoID0gZ2V0QmF0Y2goKTtcbiAgdmFyIGZpcnN0ID0gbnVsbDtcbiAgdmFyIGxhc3QgPSBudWxsO1xuICByZXR1cm4ge1xuICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgIGZpcnN0ID0gbnVsbDtcbiAgICAgIGxhc3QgPSBudWxsO1xuICAgIH0sXG4gICAgbm90aWZ5OiBmdW5jdGlvbiBub3RpZnkoKSB7XG4gICAgICBiYXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBsaXN0ZW5lciA9IGZpcnN0O1xuXG4gICAgICAgIHdoaWxlIChsaXN0ZW5lcikge1xuICAgICAgICAgIGxpc3RlbmVyLmNhbGxiYWNrKCk7XG4gICAgICAgICAgbGlzdGVuZXIgPSBsaXN0ZW5lci5uZXh0O1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgdmFyIGxpc3RlbmVycyA9IFtdO1xuICAgICAgdmFyIGxpc3RlbmVyID0gZmlyc3Q7XG5cbiAgICAgIHdoaWxlIChsaXN0ZW5lcikge1xuICAgICAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgICAgIGxpc3RlbmVyID0gbGlzdGVuZXIubmV4dDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGxpc3RlbmVycztcbiAgICB9LFxuICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKGNhbGxiYWNrKSB7XG4gICAgICB2YXIgaXNTdWJzY3JpYmVkID0gdHJ1ZTtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGxhc3QgPSB7XG4gICAgICAgIGNhbGxiYWNrOiBjYWxsYmFjayxcbiAgICAgICAgbmV4dDogbnVsbCxcbiAgICAgICAgcHJldjogbGFzdFxuICAgICAgfTtcblxuICAgICAgaWYgKGxpc3RlbmVyLnByZXYpIHtcbiAgICAgICAgbGlzdGVuZXIucHJldi5uZXh0ID0gbGlzdGVuZXI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmaXJzdCA9IGxpc3RlbmVyO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7XG4gICAgICAgIGlmICghaXNTdWJzY3JpYmVkIHx8IGZpcnN0ID09PSBudWxsKSByZXR1cm47XG4gICAgICAgIGlzU3Vic2NyaWJlZCA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChsaXN0ZW5lci5uZXh0KSB7XG4gICAgICAgICAgbGlzdGVuZXIubmV4dC5wcmV2ID0gbGlzdGVuZXIucHJldjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsYXN0ID0gbGlzdGVuZXIucHJldjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsaXN0ZW5lci5wcmV2KSB7XG4gICAgICAgICAgbGlzdGVuZXIucHJldi5uZXh0ID0gbGlzdGVuZXIubmV4dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmaXJzdCA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9O1xufVxuXG52YXIgU3Vic2NyaXB0aW9uID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3Vic2NyaXB0aW9uKHN0b3JlLCBwYXJlbnRTdWIpIHtcbiAgICB0aGlzLnN0b3JlID0gc3RvcmU7XG4gICAgdGhpcy5wYXJlbnRTdWIgPSBwYXJlbnRTdWI7XG4gICAgdGhpcy51bnN1YnNjcmliZSA9IG51bGw7XG4gICAgdGhpcy5saXN0ZW5lcnMgPSBudWxsTGlzdGVuZXJzO1xuICAgIHRoaXMuaGFuZGxlQ2hhbmdlV3JhcHBlciA9IHRoaXMuaGFuZGxlQ2hhbmdlV3JhcHBlci5iaW5kKHRoaXMpO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN1YnNjcmlwdGlvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmFkZE5lc3RlZFN1YiA9IGZ1bmN0aW9uIGFkZE5lc3RlZFN1YihsaXN0ZW5lcikge1xuICAgIHRoaXMudHJ5U3Vic2NyaWJlKCk7XG4gICAgcmV0dXJuIHRoaXMubGlzdGVuZXJzLnN1YnNjcmliZShsaXN0ZW5lcik7XG4gIH07XG5cbiAgX3Byb3RvLm5vdGlmeU5lc3RlZFN1YnMgPSBmdW5jdGlvbiBub3RpZnlOZXN0ZWRTdWJzKCkge1xuICAgIHRoaXMubGlzdGVuZXJzLm5vdGlmeSgpO1xuICB9O1xuXG4gIF9wcm90by5oYW5kbGVDaGFuZ2VXcmFwcGVyID0gZnVuY3Rpb24gaGFuZGxlQ2hhbmdlV3JhcHBlcigpIHtcbiAgICBpZiAodGhpcy5vblN0YXRlQ2hhbmdlKSB7XG4gICAgICB0aGlzLm9uU3RhdGVDaGFuZ2UoKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmlzU3Vic2NyaWJlZCA9IGZ1bmN0aW9uIGlzU3Vic2NyaWJlZCgpIHtcbiAgICByZXR1cm4gQm9vbGVhbih0aGlzLnVuc3Vic2NyaWJlKTtcbiAgfTtcblxuICBfcHJvdG8udHJ5U3Vic2NyaWJlID0gZnVuY3Rpb24gdHJ5U3Vic2NyaWJlKCkge1xuICAgIGlmICghdGhpcy51bnN1YnNjcmliZSkge1xuICAgICAgdGhpcy51bnN1YnNjcmliZSA9IHRoaXMucGFyZW50U3ViID8gdGhpcy5wYXJlbnRTdWIuYWRkTmVzdGVkU3ViKHRoaXMuaGFuZGxlQ2hhbmdlV3JhcHBlcikgOiB0aGlzLnN0b3JlLnN1YnNjcmliZSh0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIpO1xuICAgICAgdGhpcy5saXN0ZW5lcnMgPSBjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24oKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnRyeVVuc3Vic2NyaWJlID0gZnVuY3Rpb24gdHJ5VW5zdWJzY3JpYmUoKSB7XG4gICAgaWYgKHRoaXMudW5zdWJzY3JpYmUpIHtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUgPSBudWxsO1xuICAgICAgdGhpcy5saXN0ZW5lcnMuY2xlYXIoKTtcbiAgICAgIHRoaXMubGlzdGVuZXJzID0gbnVsbExpc3RlbmVycztcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIFN1YnNjcmlwdGlvbjtcbn0oKTtcblxuZXhwb3J0IHsgU3Vic2NyaXB0aW9uIGFzIGRlZmF1bHQgfTsiLCJpbXBvcnQgUmVhY3QsIHsgdXNlTWVtbywgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi9Db250ZXh0JztcbmltcG9ydCBTdWJzY3JpcHRpb24gZnJvbSAnLi4vdXRpbHMvU3Vic2NyaXB0aW9uJztcblxuZnVuY3Rpb24gUHJvdmlkZXIoX3JlZikge1xuICB2YXIgc3RvcmUgPSBfcmVmLnN0b3JlLFxuICAgICAgY29udGV4dCA9IF9yZWYuY29udGV4dCxcbiAgICAgIGNoaWxkcmVuID0gX3JlZi5jaGlsZHJlbjtcbiAgdmFyIGNvbnRleHRWYWx1ZSA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKHN0b3JlKTtcbiAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IHN1YnNjcmlwdGlvbi5ub3RpZnlOZXN0ZWRTdWJzO1xuICAgIHJldHVybiB7XG4gICAgICBzdG9yZTogc3RvcmUsXG4gICAgICBzdWJzY3JpcHRpb246IHN1YnNjcmlwdGlvblxuICAgIH07XG4gIH0sIFtzdG9yZV0pO1xuICB2YXIgcHJldmlvdXNTdGF0ZSA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBzdG9yZS5nZXRTdGF0ZSgpO1xuICB9LCBbc3RvcmVdKTtcbiAgdXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gY29udGV4dFZhbHVlLnN1YnNjcmlwdGlvbjtcbiAgICBzdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7XG5cbiAgICBpZiAocHJldmlvdXNTdGF0ZSAhPT0gc3RvcmUuZ2V0U3RhdGUoKSkge1xuICAgICAgc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnMoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IG51bGw7XG4gICAgfTtcbiAgfSwgW2NvbnRleHRWYWx1ZSwgcHJldmlvdXNTdGF0ZV0pO1xuICB2YXIgQ29udGV4dCA9IGNvbnRleHQgfHwgUmVhY3RSZWR1eENvbnRleHQ7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY29udGV4dFZhbHVlXG4gIH0sIGNoaWxkcmVuKTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgUHJvdmlkZXIucHJvcFR5cGVzID0ge1xuICAgIHN0b3JlOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgc3Vic2NyaWJlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgZGlzcGF0Y2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICBnZXRTdGF0ZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZFxuICAgIH0pLFxuICAgIGNvbnRleHQ6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5hbnlcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgUHJvdmlkZXI7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCJpbXBvcnQgeyB1c2VFZmZlY3QsIHVzZUxheW91dEVmZmVjdCB9IGZyb20gJ3JlYWN0JzsgLy8gUmVhY3QgY3VycmVudGx5IHRocm93cyBhIHdhcm5pbmcgd2hlbiB1c2luZyB1c2VMYXlvdXRFZmZlY3Qgb24gdGhlIHNlcnZlci5cbi8vIFRvIGdldCBhcm91bmQgaXQsIHdlIGNhbiBjb25kaXRpb25hbGx5IHVzZUVmZmVjdCBvbiB0aGUgc2VydmVyIChuby1vcCkgYW5kXG4vLyB1c2VMYXlvdXRFZmZlY3QgaW4gdGhlIGJyb3dzZXIuIFdlIG5lZWQgdXNlTGF5b3V0RWZmZWN0IHRvIGVuc3VyZSB0aGUgc3RvcmVcbi8vIHN1YnNjcmlwdGlvbiBjYWxsYmFjayBhbHdheXMgaGFzIHRoZSBzZWxlY3RvciBmcm9tIHRoZSBsYXRlc3QgcmVuZGVyIGNvbW1pdFxuLy8gYXZhaWxhYmxlLCBvdGhlcndpc2UgYSBzdG9yZSB1cGRhdGUgbWF5IGhhcHBlbiBiZXR3ZWVuIHJlbmRlciBhbmQgdGhlIGVmZmVjdCxcbi8vIHdoaWNoIG1heSBjYXVzZSBtaXNzZWQgdXBkYXRlczsgd2UgYWxzbyBtdXN0IGVuc3VyZSB0aGUgc3RvcmUgc3Vic2NyaXB0aW9uXG4vLyBpcyBjcmVhdGVkIHN5bmNocm9ub3VzbHksIG90aGVyd2lzZSBhIHN0b3JlIHVwZGF0ZSBtYXkgb2NjdXIgYmVmb3JlIHRoZVxuLy8gc3Vic2NyaXB0aW9uIGlzIGNyZWF0ZWQgYW5kIGFuIGluY29uc2lzdGVudCBzdGF0ZSBtYXkgYmUgb2JzZXJ2ZWRcblxuZXhwb3J0IHZhciB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0ID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50ICE9PSAndW5kZWZpbmVkJyA/IHVzZUxheW91dEVmZmVjdCA6IHVzZUVmZmVjdDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IGhvaXN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5pbXBvcnQgUmVhY3QsIHsgdXNlQ29udGV4dCwgdXNlTWVtbywgdXNlUmVmLCB1c2VSZWR1Y2VyIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgaXNWYWxpZEVsZW1lbnRUeXBlLCBpc0NvbnRleHRDb25zdW1lciB9IGZyb20gJ3JlYWN0LWlzJztcbmltcG9ydCBTdWJzY3JpcHRpb24gZnJvbSAnLi4vdXRpbHMvU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgfSBmcm9tICcuLi91dGlscy91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0JztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi9Db250ZXh0JzsgLy8gRGVmaW5lIHNvbWUgY29uc3RhbnQgYXJyYXlzIGp1c3QgdG8gYXZvaWQgcmUtY3JlYXRpbmcgdGhlc2VcblxudmFyIEVNUFRZX0FSUkFZID0gW107XG52YXIgTk9fU1VCU0NSSVBUSU9OX0FSUkFZID0gW251bGwsIG51bGxdO1xuXG52YXIgc3RyaW5naWZ5Q29tcG9uZW50ID0gZnVuY3Rpb24gc3RyaW5naWZ5Q29tcG9uZW50KENvbXApIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoQ29tcCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBTdHJpbmcoQ29tcCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHN0b3JlU3RhdGVVcGRhdGVzUmVkdWNlcihzdGF0ZSwgYWN0aW9uKSB7XG4gIHZhciB1cGRhdGVDb3VudCA9IHN0YXRlWzFdO1xuICByZXR1cm4gW2FjdGlvbi5wYXlsb2FkLCB1cGRhdGVDb3VudCArIDFdO1xufVxuXG5mdW5jdGlvbiB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0V2l0aEFyZ3MoZWZmZWN0RnVuYywgZWZmZWN0QXJncywgZGVwZW5kZW5jaWVzKSB7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBlZmZlY3RGdW5jLmFwcGx5KHZvaWQgMCwgZWZmZWN0QXJncyk7XG4gIH0sIGRlcGVuZGVuY2llcyk7XG59XG5cbmZ1bmN0aW9uIGNhcHR1cmVXcmFwcGVyUHJvcHMobGFzdFdyYXBwZXJQcm9wcywgbGFzdENoaWxkUHJvcHMsIHJlbmRlcklzU2NoZWR1bGVkLCB3cmFwcGVyUHJvcHMsIGFjdHVhbENoaWxkUHJvcHMsIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUsIG5vdGlmeU5lc3RlZFN1YnMpIHtcbiAgLy8gV2Ugd2FudCB0byBjYXB0dXJlIHRoZSB3cmFwcGVyIHByb3BzIGFuZCBjaGlsZCBwcm9wcyB3ZSB1c2VkIGZvciBsYXRlciBjb21wYXJpc29uc1xuICBsYXN0V3JhcHBlclByb3BzLmN1cnJlbnQgPSB3cmFwcGVyUHJvcHM7XG4gIGxhc3RDaGlsZFByb3BzLmN1cnJlbnQgPSBhY3R1YWxDaGlsZFByb3BzO1xuICByZW5kZXJJc1NjaGVkdWxlZC5jdXJyZW50ID0gZmFsc2U7IC8vIElmIHRoZSByZW5kZXIgd2FzIGZyb20gYSBzdG9yZSB1cGRhdGUsIGNsZWFyIG91dCB0aGF0IHJlZmVyZW5jZSBhbmQgY2FzY2FkZSB0aGUgc3Vic2NyaWJlciB1cGRhdGVcblxuICBpZiAoY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50KSB7XG4gICAgY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50ID0gbnVsbDtcbiAgICBub3RpZnlOZXN0ZWRTdWJzKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3Vic2NyaWJlVXBkYXRlcyhzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsIHN0b3JlLCBzdWJzY3JpcHRpb24sIGNoaWxkUHJvcHNTZWxlY3RvciwgbGFzdFdyYXBwZXJQcm9wcywgbGFzdENoaWxkUHJvcHMsIHJlbmRlcklzU2NoZWR1bGVkLCBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLCBub3RpZnlOZXN0ZWRTdWJzLCBmb3JjZUNvbXBvbmVudFVwZGF0ZURpc3BhdGNoKSB7XG4gIC8vIElmIHdlJ3JlIG5vdCBzdWJzY3JpYmVkIHRvIHRoZSBzdG9yZSwgbm90aGluZyB0byBkbyBoZXJlXG4gIGlmICghc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSByZXR1cm47IC8vIENhcHR1cmUgdmFsdWVzIGZvciBjaGVja2luZyBpZiBhbmQgd2hlbiB0aGlzIGNvbXBvbmVudCB1bm1vdW50c1xuXG4gIHZhciBkaWRVbnN1YnNjcmliZSA9IGZhbHNlO1xuICB2YXIgbGFzdFRocm93bkVycm9yID0gbnVsbDsgLy8gV2UnbGwgcnVuIHRoaXMgY2FsbGJhY2sgZXZlcnkgdGltZSBhIHN0b3JlIHN1YnNjcmlwdGlvbiB1cGRhdGUgcHJvcGFnYXRlcyB0byB0aGlzIGNvbXBvbmVudFxuXG4gIHZhciBjaGVja0ZvclVwZGF0ZXMgPSBmdW5jdGlvbiBjaGVja0ZvclVwZGF0ZXMoKSB7XG4gICAgaWYgKGRpZFVuc3Vic2NyaWJlKSB7XG4gICAgICAvLyBEb24ndCBydW4gc3RhbGUgbGlzdGVuZXJzLlxuICAgICAgLy8gUmVkdXggZG9lc24ndCBndWFyYW50ZWUgdW5zdWJzY3JpcHRpb25zIGhhcHBlbiB1bnRpbCBuZXh0IGRpc3BhdGNoLlxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBsYXRlc3RTdG9yZVN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICB2YXIgbmV3Q2hpbGRQcm9wcywgZXJyb3I7XG5cbiAgICB0cnkge1xuICAgICAgLy8gQWN0dWFsbHkgcnVuIHRoZSBzZWxlY3RvciB3aXRoIHRoZSBtb3N0IHJlY2VudCBzdG9yZSBzdGF0ZSBhbmQgd3JhcHBlciBwcm9wc1xuICAgICAgLy8gdG8gZGV0ZXJtaW5lIHdoYXQgdGhlIGNoaWxkIHByb3BzIHNob3VsZCBiZVxuICAgICAgbmV3Q2hpbGRQcm9wcyA9IGNoaWxkUHJvcHNTZWxlY3RvcihsYXRlc3RTdG9yZVN0YXRlLCBsYXN0V3JhcHBlclByb3BzLmN1cnJlbnQpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGVycm9yID0gZTtcbiAgICAgIGxhc3RUaHJvd25FcnJvciA9IGU7XG4gICAgfVxuXG4gICAgaWYgKCFlcnJvcikge1xuICAgICAgbGFzdFRocm93bkVycm9yID0gbnVsbDtcbiAgICB9IC8vIElmIHRoZSBjaGlsZCBwcm9wcyBoYXZlbid0IGNoYW5nZWQsIG5vdGhpbmcgdG8gZG8gaGVyZSAtIGNhc2NhZGUgdGhlIHN1YnNjcmlwdGlvbiB1cGRhdGVcblxuXG4gICAgaWYgKG5ld0NoaWxkUHJvcHMgPT09IGxhc3RDaGlsZFByb3BzLmN1cnJlbnQpIHtcbiAgICAgIGlmICghcmVuZGVySXNTY2hlZHVsZWQuY3VycmVudCkge1xuICAgICAgICBub3RpZnlOZXN0ZWRTdWJzKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFNhdmUgcmVmZXJlbmNlcyB0byB0aGUgbmV3IGNoaWxkIHByb3BzLiAgTm90ZSB0aGF0IHdlIHRyYWNrIHRoZSBcImNoaWxkIHByb3BzIGZyb20gc3RvcmUgdXBkYXRlXCJcbiAgICAgIC8vIGFzIGEgcmVmIGluc3RlYWQgb2YgYSB1c2VTdGF0ZS91c2VSZWR1Y2VyIGJlY2F1c2Ugd2UgbmVlZCBhIHdheSB0byBkZXRlcm1pbmUgaWYgdGhhdCB2YWx1ZSBoYXNcbiAgICAgIC8vIGJlZW4gcHJvY2Vzc2VkLiAgSWYgdGhpcyB3ZW50IGludG8gdXNlU3RhdGUvdXNlUmVkdWNlciwgd2UgY291bGRuJ3QgY2xlYXIgb3V0IHRoZSB2YWx1ZSB3aXRob3V0XG4gICAgICAvLyBmb3JjaW5nIGFub3RoZXIgcmUtcmVuZGVyLCB3aGljaCB3ZSBkb24ndCB3YW50LlxuICAgICAgbGFzdENoaWxkUHJvcHMuY3VycmVudCA9IG5ld0NoaWxkUHJvcHM7XG4gICAgICBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLmN1cnJlbnQgPSBuZXdDaGlsZFByb3BzO1xuICAgICAgcmVuZGVySXNTY2hlZHVsZWQuY3VycmVudCA9IHRydWU7IC8vIElmIHRoZSBjaGlsZCBwcm9wcyBfZGlkXyBjaGFuZ2UgKG9yIHdlIGNhdWdodCBhbiBlcnJvciksIHRoaXMgd3JhcHBlciBjb21wb25lbnQgbmVlZHMgdG8gcmUtcmVuZGVyXG5cbiAgICAgIGZvcmNlQ29tcG9uZW50VXBkYXRlRGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiAnU1RPUkVfVVBEQVRFRCcsXG4gICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICBlcnJvcjogZXJyb3JcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9OyAvLyBBY3R1YWxseSBzdWJzY3JpYmUgdG8gdGhlIG5lYXJlc3QgY29ubmVjdGVkIGFuY2VzdG9yIChvciBzdG9yZSlcblxuXG4gIHN1YnNjcmlwdGlvbi5vblN0YXRlQ2hhbmdlID0gY2hlY2tGb3JVcGRhdGVzO1xuICBzdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7IC8vIFB1bGwgZGF0YSBmcm9tIHRoZSBzdG9yZSBhZnRlciBmaXJzdCByZW5kZXIgaW4gY2FzZSB0aGUgc3RvcmUgaGFzXG4gIC8vIGNoYW5nZWQgc2luY2Ugd2UgYmVnYW4uXG5cbiAgY2hlY2tGb3JVcGRhdGVzKCk7XG5cbiAgdmFyIHVuc3Vic2NyaWJlV3JhcHBlciA9IGZ1bmN0aW9uIHVuc3Vic2NyaWJlV3JhcHBlcigpIHtcbiAgICBkaWRVbnN1YnNjcmliZSA9IHRydWU7XG4gICAgc3Vic2NyaXB0aW9uLnRyeVVuc3Vic2NyaWJlKCk7XG4gICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBudWxsO1xuXG4gICAgaWYgKGxhc3RUaHJvd25FcnJvcikge1xuICAgICAgLy8gSXQncyBwb3NzaWJsZSB0aGF0IHdlIGNhdWdodCBhbiBlcnJvciBkdWUgdG8gYSBiYWQgbWFwU3RhdGUgZnVuY3Rpb24sIGJ1dCB0aGVcbiAgICAgIC8vIHBhcmVudCByZS1yZW5kZXJlZCB3aXRob3V0IHRoaXMgY29tcG9uZW50IGFuZCB3ZSdyZSBhYm91dCB0byB1bm1vdW50LlxuICAgICAgLy8gVGhpcyBzaG91bGRuJ3QgaGFwcGVuIGFzIGxvbmcgYXMgd2UgZG8gdG9wLWRvd24gc3Vic2NyaXB0aW9ucyBjb3JyZWN0bHksIGJ1dFxuICAgICAgLy8gaWYgd2UgZXZlciBkbyB0aG9zZSB3cm9uZywgdGhpcyB0aHJvdyB3aWxsIHN1cmZhY2UgdGhlIGVycm9yIGluIG91ciB0ZXN0cy5cbiAgICAgIC8vIEluIHRoYXQgY2FzZSwgdGhyb3cgdGhlIGVycm9yIGZyb20gaGVyZSBzbyBpdCBkb2Vzbid0IGdldCBsb3N0LlxuICAgICAgdGhyb3cgbGFzdFRocm93bkVycm9yO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdW5zdWJzY3JpYmVXcmFwcGVyO1xufVxuXG52YXIgaW5pdFN0YXRlVXBkYXRlcyA9IGZ1bmN0aW9uIGluaXRTdGF0ZVVwZGF0ZXMoKSB7XG4gIHJldHVybiBbbnVsbCwgMF07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb25uZWN0QWR2YW5jZWQoXG4vKlxyXG4gIHNlbGVjdG9yRmFjdG9yeSBpcyBhIGZ1bmMgdGhhdCBpcyByZXNwb25zaWJsZSBmb3IgcmV0dXJuaW5nIHRoZSBzZWxlY3RvciBmdW5jdGlvbiB1c2VkIHRvXHJcbiAgY29tcHV0ZSBuZXcgcHJvcHMgZnJvbSBzdGF0ZSwgcHJvcHMsIGFuZCBkaXNwYXRjaC4gRm9yIGV4YW1wbGU6XHJcbiAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbm5lY3RBZHZhbmNlZCgoZGlzcGF0Y2gsIG9wdGlvbnMpID0+IChzdGF0ZSwgcHJvcHMpID0+ICh7XHJcbiAgICAgIHRoaW5nOiBzdGF0ZS50aGluZ3NbcHJvcHMudGhpbmdJZF0sXHJcbiAgICAgIHNhdmVUaGluZzogZmllbGRzID0+IGRpc3BhdGNoKGFjdGlvbkNyZWF0b3JzLnNhdmVUaGluZyhwcm9wcy50aGluZ0lkLCBmaWVsZHMpKSxcclxuICAgIH0pKShZb3VyQ29tcG9uZW50KVxyXG4gICAgQWNjZXNzIHRvIGRpc3BhdGNoIGlzIHByb3ZpZGVkIHRvIHRoZSBmYWN0b3J5IHNvIHNlbGVjdG9yRmFjdG9yaWVzIGNhbiBiaW5kIGFjdGlvbkNyZWF0b3JzXHJcbiAgb3V0c2lkZSBvZiB0aGVpciBzZWxlY3RvciBhcyBhbiBvcHRpbWl6YXRpb24uIE9wdGlvbnMgcGFzc2VkIHRvIGNvbm5lY3RBZHZhbmNlZCBhcmUgcGFzc2VkIHRvXHJcbiAgdGhlIHNlbGVjdG9yRmFjdG9yeSwgYWxvbmcgd2l0aCBkaXNwbGF5TmFtZSBhbmQgV3JhcHBlZENvbXBvbmVudCwgYXMgdGhlIHNlY29uZCBhcmd1bWVudC5cclxuICAgIE5vdGUgdGhhdCBzZWxlY3RvckZhY3RvcnkgaXMgcmVzcG9uc2libGUgZm9yIGFsbCBjYWNoaW5nL21lbW9pemF0aW9uIG9mIGluYm91bmQgYW5kIG91dGJvdW5kXHJcbiAgcHJvcHMuIERvIG5vdCB1c2UgY29ubmVjdEFkdmFuY2VkIGRpcmVjdGx5IHdpdGhvdXQgbWVtb2l6aW5nIHJlc3VsdHMgYmV0d2VlbiBjYWxscyB0byB5b3VyXHJcbiAgc2VsZWN0b3IsIG90aGVyd2lzZSB0aGUgQ29ubmVjdCBjb21wb25lbnQgd2lsbCByZS1yZW5kZXIgb24gZXZlcnkgc3RhdGUgb3IgcHJvcHMgY2hhbmdlLlxyXG4qL1xuc2VsZWN0b3JGYWN0b3J5LCAvLyBvcHRpb25zIG9iamVjdDpcbl9yZWYpIHtcbiAgaWYgKF9yZWYgPT09IHZvaWQgMCkge1xuICAgIF9yZWYgPSB7fTtcbiAgfVxuXG4gIHZhciBfcmVmMiA9IF9yZWYsXG4gICAgICBfcmVmMiRnZXREaXNwbGF5TmFtZSA9IF9yZWYyLmdldERpc3BsYXlOYW1lLFxuICAgICAgZ2V0RGlzcGxheU5hbWUgPSBfcmVmMiRnZXREaXNwbGF5TmFtZSA9PT0gdm9pZCAwID8gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gXCJDb25uZWN0QWR2YW5jZWQoXCIgKyBuYW1lICsgXCIpXCI7XG4gIH0gOiBfcmVmMiRnZXREaXNwbGF5TmFtZSxcbiAgICAgIF9yZWYyJG1ldGhvZE5hbWUgPSBfcmVmMi5tZXRob2ROYW1lLFxuICAgICAgbWV0aG9kTmFtZSA9IF9yZWYyJG1ldGhvZE5hbWUgPT09IHZvaWQgMCA/ICdjb25uZWN0QWR2YW5jZWQnIDogX3JlZjIkbWV0aG9kTmFtZSxcbiAgICAgIF9yZWYyJHJlbmRlckNvdW50UHJvcCA9IF9yZWYyLnJlbmRlckNvdW50UHJvcCxcbiAgICAgIHJlbmRlckNvdW50UHJvcCA9IF9yZWYyJHJlbmRlckNvdW50UHJvcCA9PT0gdm9pZCAwID8gdW5kZWZpbmVkIDogX3JlZjIkcmVuZGVyQ291bnRQcm9wLFxuICAgICAgX3JlZjIkc2hvdWxkSGFuZGxlU3RhID0gX3JlZjIuc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzLFxuICAgICAgc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzID0gX3JlZjIkc2hvdWxkSGFuZGxlU3RhID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZjIkc2hvdWxkSGFuZGxlU3RhLFxuICAgICAgX3JlZjIkc3RvcmVLZXkgPSBfcmVmMi5zdG9yZUtleSxcbiAgICAgIHN0b3JlS2V5ID0gX3JlZjIkc3RvcmVLZXkgPT09IHZvaWQgMCA/ICdzdG9yZScgOiBfcmVmMiRzdG9yZUtleSxcbiAgICAgIF9yZWYyJHdpdGhSZWYgPSBfcmVmMi53aXRoUmVmLFxuICAgICAgd2l0aFJlZiA9IF9yZWYyJHdpdGhSZWYgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjIkd2l0aFJlZixcbiAgICAgIF9yZWYyJGZvcndhcmRSZWYgPSBfcmVmMi5mb3J3YXJkUmVmLFxuICAgICAgZm9yd2FyZFJlZiA9IF9yZWYyJGZvcndhcmRSZWYgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjIkZm9yd2FyZFJlZixcbiAgICAgIF9yZWYyJGNvbnRleHQgPSBfcmVmMi5jb250ZXh0LFxuICAgICAgY29udGV4dCA9IF9yZWYyJGNvbnRleHQgPT09IHZvaWQgMCA/IFJlYWN0UmVkdXhDb250ZXh0IDogX3JlZjIkY29udGV4dCxcbiAgICAgIGNvbm5lY3RPcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjIsIFtcImdldERpc3BsYXlOYW1lXCIsIFwibWV0aG9kTmFtZVwiLCBcInJlbmRlckNvdW50UHJvcFwiLCBcInNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlc1wiLCBcInN0b3JlS2V5XCIsIFwid2l0aFJlZlwiLCBcImZvcndhcmRSZWZcIiwgXCJjb250ZXh0XCJdKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChyZW5kZXJDb3VudFByb3AgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwicmVuZGVyQ291bnRQcm9wIGlzIHJlbW92ZWQuIHJlbmRlciBjb3VudGluZyBpcyBidWlsdCBpbnRvIHRoZSBsYXRlc3QgUmVhY3QgRGV2IFRvb2xzIHByb2ZpbGluZyBleHRlbnNpb25cIik7XG4gICAgfVxuXG4gICAgaWYgKHdpdGhSZWYpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignd2l0aFJlZiBpcyByZW1vdmVkLiBUbyBhY2Nlc3MgdGhlIHdyYXBwZWQgaW5zdGFuY2UsIHVzZSBhIHJlZiBvbiB0aGUgY29ubmVjdGVkIGNvbXBvbmVudCcpO1xuICAgIH1cblxuICAgIHZhciBjdXN0b21TdG9yZVdhcm5pbmdNZXNzYWdlID0gJ1RvIHVzZSBhIGN1c3RvbSBSZWR1eCBzdG9yZSBmb3Igc3BlY2lmaWMgY29tcG9uZW50cywgY3JlYXRlIGEgY3VzdG9tIFJlYWN0IGNvbnRleHQgd2l0aCAnICsgXCJSZWFjdC5jcmVhdGVDb250ZXh0KCksIGFuZCBwYXNzIHRoZSBjb250ZXh0IG9iamVjdCB0byBSZWFjdCBSZWR1eCdzIFByb3ZpZGVyIGFuZCBzcGVjaWZpYyBjb21wb25lbnRzXCIgKyAnIGxpa2U6IDxQcm92aWRlciBjb250ZXh0PXtNeUNvbnRleHR9PjxDb25uZWN0ZWRDb21wb25lbnQgY29udGV4dD17TXlDb250ZXh0fSAvPjwvUHJvdmlkZXI+LiAnICsgJ1lvdSBtYXkgYWxzbyBwYXNzIGEge2NvbnRleHQgOiBNeUNvbnRleHR9IG9wdGlvbiB0byBjb25uZWN0JztcblxuICAgIGlmIChzdG9yZUtleSAhPT0gJ3N0b3JlJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdzdG9yZUtleSBoYXMgYmVlbiByZW1vdmVkIGFuZCBkb2VzIG5vdCBkbyBhbnl0aGluZy4gJyArIGN1c3RvbVN0b3JlV2FybmluZ01lc3NhZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBDb250ZXh0ID0gY29udGV4dDtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXBXaXRoQ29ubmVjdChXcmFwcGVkQ29tcG9uZW50KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWlzVmFsaWRFbGVtZW50VHlwZShXcmFwcGVkQ29tcG9uZW50KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IG11c3QgcGFzcyBhIGNvbXBvbmVudCB0byB0aGUgZnVuY3Rpb24gcmV0dXJuZWQgYnkgXCIgKyAobWV0aG9kTmFtZSArIFwiLiBJbnN0ZWFkIHJlY2VpdmVkIFwiICsgc3RyaW5naWZ5Q29tcG9uZW50KFdyYXBwZWRDb21wb25lbnQpKSk7XG4gICAgfVxuXG4gICAgdmFyIHdyYXBwZWRDb21wb25lbnROYW1lID0gV3JhcHBlZENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBXcmFwcGVkQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCc7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gZ2V0RGlzcGxheU5hbWUod3JhcHBlZENvbXBvbmVudE5hbWUpO1xuXG4gICAgdmFyIHNlbGVjdG9yRmFjdG9yeU9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgY29ubmVjdE9wdGlvbnMsIHtcbiAgICAgIGdldERpc3BsYXlOYW1lOiBnZXREaXNwbGF5TmFtZSxcbiAgICAgIG1ldGhvZE5hbWU6IG1ldGhvZE5hbWUsXG4gICAgICByZW5kZXJDb3VudFByb3A6IHJlbmRlckNvdW50UHJvcCxcbiAgICAgIHNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlczogc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzLFxuICAgICAgc3RvcmVLZXk6IHN0b3JlS2V5LFxuICAgICAgZGlzcGxheU5hbWU6IGRpc3BsYXlOYW1lLFxuICAgICAgd3JhcHBlZENvbXBvbmVudE5hbWU6IHdyYXBwZWRDb21wb25lbnROYW1lLFxuICAgICAgV3JhcHBlZENvbXBvbmVudDogV3JhcHBlZENvbXBvbmVudFxuICAgIH0pO1xuXG4gICAgdmFyIHB1cmUgPSBjb25uZWN0T3B0aW9ucy5wdXJlO1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlQ2hpbGRTZWxlY3RvcihzdG9yZSkge1xuICAgICAgcmV0dXJuIHNlbGVjdG9yRmFjdG9yeShzdG9yZS5kaXNwYXRjaCwgc2VsZWN0b3JGYWN0b3J5T3B0aW9ucyk7XG4gICAgfSAvLyBJZiB3ZSBhcmVuJ3QgcnVubmluZyBpbiBcInB1cmVcIiBtb2RlLCB3ZSBkb24ndCB3YW50IHRvIG1lbW9pemUgdmFsdWVzLlxuICAgIC8vIFRvIGF2b2lkIGNvbmRpdGlvbmFsbHkgY2FsbGluZyBob29rcywgd2UgZmFsbCBiYWNrIHRvIGEgdGlueSB3cmFwcGVyXG4gICAgLy8gdGhhdCBqdXN0IGV4ZWN1dGVzIHRoZSBnaXZlbiBjYWxsYmFjayBpbW1lZGlhdGVseS5cblxuXG4gICAgdmFyIHVzZVB1cmVPbmx5TWVtbyA9IHB1cmUgPyB1c2VNZW1vIDogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gQ29ubmVjdEZ1bmN0aW9uKHByb3BzKSB7XG4gICAgICB2YXIgX3VzZU1lbW8gPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gRGlzdGluZ3Vpc2ggYmV0d2VlbiBhY3R1YWwgXCJkYXRhXCIgcHJvcHMgdGhhdCB3ZXJlIHBhc3NlZCB0byB0aGUgd3JhcHBlciBjb21wb25lbnQsXG4gICAgICAgIC8vIGFuZCB2YWx1ZXMgbmVlZGVkIHRvIGNvbnRyb2wgYmVoYXZpb3IgKGZvcndhcmRlZCByZWZzLCBhbHRlcm5hdGUgY29udGV4dCBpbnN0YW5jZXMpLlxuICAgICAgICAvLyBUbyBtYWludGFpbiB0aGUgd3JhcHBlclByb3BzIG9iamVjdCByZWZlcmVuY2UsIG1lbW9pemUgdGhpcyBkZXN0cnVjdHVyaW5nLlxuICAgICAgICB2YXIgZm9yd2FyZGVkUmVmID0gcHJvcHMuZm9yd2FyZGVkUmVmLFxuICAgICAgICAgICAgd3JhcHBlclByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIFtcImZvcndhcmRlZFJlZlwiXSk7XG5cbiAgICAgICAgcmV0dXJuIFtwcm9wcy5jb250ZXh0LCBmb3J3YXJkZWRSZWYsIHdyYXBwZXJQcm9wc107XG4gICAgICB9LCBbcHJvcHNdKSxcbiAgICAgICAgICBwcm9wc0NvbnRleHQgPSBfdXNlTWVtb1swXSxcbiAgICAgICAgICBmb3J3YXJkZWRSZWYgPSBfdXNlTWVtb1sxXSxcbiAgICAgICAgICB3cmFwcGVyUHJvcHMgPSBfdXNlTWVtb1syXTtcblxuICAgICAgdmFyIENvbnRleHRUb1VzZSA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBVc2VycyBtYXkgb3B0aW9uYWxseSBwYXNzIGluIGEgY3VzdG9tIGNvbnRleHQgaW5zdGFuY2UgdG8gdXNlIGluc3RlYWQgb2Ygb3VyIFJlYWN0UmVkdXhDb250ZXh0LlxuICAgICAgICAvLyBNZW1vaXplIHRoZSBjaGVjayB0aGF0IGRldGVybWluZXMgd2hpY2ggY29udGV4dCBpbnN0YW5jZSB3ZSBzaG91bGQgdXNlLlxuICAgICAgICByZXR1cm4gcHJvcHNDb250ZXh0ICYmIHByb3BzQ29udGV4dC5Db25zdW1lciAmJiBpc0NvbnRleHRDb25zdW1lcihSZWFjdC5jcmVhdGVFbGVtZW50KHByb3BzQ29udGV4dC5Db25zdW1lciwgbnVsbCkpID8gcHJvcHNDb250ZXh0IDogQ29udGV4dDtcbiAgICAgIH0sIFtwcm9wc0NvbnRleHQsIENvbnRleHRdKTsgLy8gUmV0cmlldmUgdGhlIHN0b3JlIGFuZCBhbmNlc3RvciBzdWJzY3JpcHRpb24gdmlhIGNvbnRleHQsIGlmIGF2YWlsYWJsZVxuXG4gICAgICB2YXIgY29udGV4dFZhbHVlID0gdXNlQ29udGV4dChDb250ZXh0VG9Vc2UpOyAvLyBUaGUgc3RvcmUgX211c3RfIGV4aXN0IGFzIGVpdGhlciBhIHByb3Agb3IgaW4gY29udGV4dC5cbiAgICAgIC8vIFdlJ2xsIGNoZWNrIHRvIHNlZSBpZiBpdCBfbG9va3NfIGxpa2UgYSBSZWR1eCBzdG9yZSBmaXJzdC5cbiAgICAgIC8vIFRoaXMgYWxsb3dzIHVzIHRvIHBhc3MgdGhyb3VnaCBhIGBzdG9yZWAgcHJvcCB0aGF0IGlzIGp1c3QgYSBwbGFpbiB2YWx1ZS5cblxuICAgICAgdmFyIGRpZFN0b3JlQ29tZUZyb21Qcm9wcyA9IEJvb2xlYW4ocHJvcHMuc3RvcmUpICYmIEJvb2xlYW4ocHJvcHMuc3RvcmUuZ2V0U3RhdGUpICYmIEJvb2xlYW4ocHJvcHMuc3RvcmUuZGlzcGF0Y2gpO1xuICAgICAgdmFyIGRpZFN0b3JlQ29tZUZyb21Db250ZXh0ID0gQm9vbGVhbihjb250ZXh0VmFsdWUpICYmIEJvb2xlYW4oY29udGV4dFZhbHVlLnN0b3JlKTtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWRpZFN0b3JlQ29tZUZyb21Qcm9wcyAmJiAhZGlkU3RvcmVDb21lRnJvbUNvbnRleHQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGZpbmQgXFxcInN0b3JlXFxcIiBpbiB0aGUgY29udGV4dCBvZiBcIiArIChcIlxcXCJcIiArIGRpc3BsYXlOYW1lICsgXCJcXFwiLiBFaXRoZXIgd3JhcCB0aGUgcm9vdCBjb21wb25lbnQgaW4gYSA8UHJvdmlkZXI+LCBcIikgKyBcIm9yIHBhc3MgYSBjdXN0b20gUmVhY3QgY29udGV4dCBwcm92aWRlciB0byA8UHJvdmlkZXI+IGFuZCB0aGUgY29ycmVzcG9uZGluZyBcIiArIChcIlJlYWN0IGNvbnRleHQgY29uc3VtZXIgdG8gXCIgKyBkaXNwbGF5TmFtZSArIFwiIGluIGNvbm5lY3Qgb3B0aW9ucy5cIikpO1xuICAgICAgfSAvLyBCYXNlZCBvbiB0aGUgcHJldmlvdXMgY2hlY2ssIG9uZSBvZiB0aGVzZSBtdXN0IGJlIHRydWVcblxuXG4gICAgICB2YXIgc3RvcmUgPSBkaWRTdG9yZUNvbWVGcm9tUHJvcHMgPyBwcm9wcy5zdG9yZSA6IGNvbnRleHRWYWx1ZS5zdG9yZTtcbiAgICAgIHZhciBjaGlsZFByb3BzU2VsZWN0b3IgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gVGhlIGNoaWxkIHByb3BzIHNlbGVjdG9yIG5lZWRzIHRoZSBzdG9yZSByZWZlcmVuY2UgYXMgYW4gaW5wdXQuXG4gICAgICAgIC8vIFJlLWNyZWF0ZSB0aGlzIHNlbGVjdG9yIHdoZW5ldmVyIHRoZSBzdG9yZSBjaGFuZ2VzLlxuICAgICAgICByZXR1cm4gY3JlYXRlQ2hpbGRTZWxlY3RvcihzdG9yZSk7XG4gICAgICB9LCBbc3RvcmVdKTtcblxuICAgICAgdmFyIF91c2VNZW1vMiA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXNob3VsZEhhbmRsZVN0YXRlQ2hhbmdlcykgcmV0dXJuIE5PX1NVQlNDUklQVElPTl9BUlJBWTsgLy8gVGhpcyBTdWJzY3JpcHRpb24ncyBzb3VyY2Ugc2hvdWxkIG1hdGNoIHdoZXJlIHN0b3JlIGNhbWUgZnJvbTogcHJvcHMgdnMuIGNvbnRleHQuIEEgY29tcG9uZW50XG4gICAgICAgIC8vIGNvbm5lY3RlZCB0byB0aGUgc3RvcmUgdmlhIHByb3BzIHNob3VsZG4ndCB1c2Ugc3Vic2NyaXB0aW9uIGZyb20gY29udGV4dCwgb3IgdmljZSB2ZXJzYS5cblxuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbihzdG9yZSwgZGlkU3RvcmVDb21lRnJvbVByb3BzID8gbnVsbCA6IGNvbnRleHRWYWx1ZS5zdWJzY3JpcHRpb24pOyAvLyBgbm90aWZ5TmVzdGVkU3Vic2AgaXMgZHVwbGljYXRlZCB0byBoYW5kbGUgdGhlIGNhc2Ugd2hlcmUgdGhlIGNvbXBvbmVudCBpcyB1bm1vdW50ZWQgaW5cbiAgICAgICAgLy8gdGhlIG1pZGRsZSBvZiB0aGUgbm90aWZpY2F0aW9uIGxvb3AsIHdoZXJlIGBzdWJzY3JpcHRpb25gIHdpbGwgdGhlbiBiZSBudWxsLiBUaGlzIGNhblxuICAgICAgICAvLyBwcm9iYWJseSBiZSBhdm9pZGVkIGlmIFN1YnNjcmlwdGlvbidzIGxpc3RlbmVycyBsb2dpYyBpcyBjaGFuZ2VkIHRvIG5vdCBjYWxsIGxpc3RlbmVyc1xuICAgICAgICAvLyB0aGF0IGhhdmUgYmVlbiB1bnN1YnNjcmliZWQgaW4gdGhlICBtaWRkbGUgb2YgdGhlIG5vdGlmaWNhdGlvbiBsb29wLlxuXG4gICAgICAgIHZhciBub3RpZnlOZXN0ZWRTdWJzID0gc3Vic2NyaXB0aW9uLm5vdGlmeU5lc3RlZFN1YnMuYmluZChzdWJzY3JpcHRpb24pO1xuICAgICAgICByZXR1cm4gW3N1YnNjcmlwdGlvbiwgbm90aWZ5TmVzdGVkU3Vic107XG4gICAgICB9LCBbc3RvcmUsIGRpZFN0b3JlQ29tZUZyb21Qcm9wcywgY29udGV4dFZhbHVlXSksXG4gICAgICAgICAgc3Vic2NyaXB0aW9uID0gX3VzZU1lbW8yWzBdLFxuICAgICAgICAgIG5vdGlmeU5lc3RlZFN1YnMgPSBfdXNlTWVtbzJbMV07IC8vIERldGVybWluZSB3aGF0IHtzdG9yZSwgc3Vic2NyaXB0aW9ufSB2YWx1ZSBzaG91bGQgYmUgcHV0IGludG8gbmVzdGVkIGNvbnRleHQsIGlmIG5lY2Vzc2FyeSxcbiAgICAgIC8vIGFuZCBtZW1vaXplIHRoYXQgdmFsdWUgdG8gYXZvaWQgdW5uZWNlc3NhcnkgY29udGV4dCB1cGRhdGVzLlxuXG5cbiAgICAgIHZhciBvdmVycmlkZGVuQ29udGV4dFZhbHVlID0gdXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChkaWRTdG9yZUNvbWVGcm9tUHJvcHMpIHtcbiAgICAgICAgICAvLyBUaGlzIGNvbXBvbmVudCBpcyBkaXJlY3RseSBzdWJzY3JpYmVkIHRvIGEgc3RvcmUgZnJvbSBwcm9wcy5cbiAgICAgICAgICAvLyBXZSBkb24ndCB3YW50IGRlc2NlbmRhbnRzIHJlYWRpbmcgZnJvbSB0aGlzIHN0b3JlIC0gcGFzcyBkb3duIHdoYXRldmVyXG4gICAgICAgICAgLy8gdGhlIGV4aXN0aW5nIGNvbnRleHQgdmFsdWUgaXMgZnJvbSB0aGUgbmVhcmVzdCBjb25uZWN0ZWQgYW5jZXN0b3IuXG4gICAgICAgICAgcmV0dXJuIGNvbnRleHRWYWx1ZTtcbiAgICAgICAgfSAvLyBPdGhlcndpc2UsIHB1dCB0aGlzIGNvbXBvbmVudCdzIHN1YnNjcmlwdGlvbiBpbnN0YW5jZSBpbnRvIGNvbnRleHQsIHNvIHRoYXRcbiAgICAgICAgLy8gY29ubmVjdGVkIGRlc2NlbmRhbnRzIHdvbid0IHVwZGF0ZSB1bnRpbCBhZnRlciB0aGlzIGNvbXBvbmVudCBpcyBkb25lXG5cblxuICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIGNvbnRleHRWYWx1ZSwge1xuICAgICAgICAgIHN1YnNjcmlwdGlvbjogc3Vic2NyaXB0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfSwgW2RpZFN0b3JlQ29tZUZyb21Qcm9wcywgY29udGV4dFZhbHVlLCBzdWJzY3JpcHRpb25dKTsgLy8gV2UgbmVlZCB0byBmb3JjZSB0aGlzIHdyYXBwZXIgY29tcG9uZW50IHRvIHJlLXJlbmRlciB3aGVuZXZlciBhIFJlZHV4IHN0b3JlIHVwZGF0ZVxuICAgICAgLy8gY2F1c2VzIGEgY2hhbmdlIHRvIHRoZSBjYWxjdWxhdGVkIGNoaWxkIGNvbXBvbmVudCBwcm9wcyAob3Igd2UgY2F1Z2h0IGFuIGVycm9yIGluIG1hcFN0YXRlKVxuXG4gICAgICB2YXIgX3VzZVJlZHVjZXIgPSB1c2VSZWR1Y2VyKHN0b3JlU3RhdGVVcGRhdGVzUmVkdWNlciwgRU1QVFlfQVJSQVksIGluaXRTdGF0ZVVwZGF0ZXMpLFxuICAgICAgICAgIF91c2VSZWR1Y2VyJCA9IF91c2VSZWR1Y2VyWzBdLFxuICAgICAgICAgIHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQgPSBfdXNlUmVkdWNlciRbMF0sXG4gICAgICAgICAgZm9yY2VDb21wb25lbnRVcGRhdGVEaXNwYXRjaCA9IF91c2VSZWR1Y2VyWzFdOyAvLyBQcm9wYWdhdGUgYW55IG1hcFN0YXRlL21hcERpc3BhdGNoIGVycm9ycyB1cHdhcmRzXG5cblxuICAgICAgaWYgKHByZXZpb3VzU3RhdGVVcGRhdGVSZXN1bHQgJiYgcHJldmlvdXNTdGF0ZVVwZGF0ZVJlc3VsdC5lcnJvcikge1xuICAgICAgICB0aHJvdyBwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0LmVycm9yO1xuICAgICAgfSAvLyBTZXQgdXAgcmVmcyB0byBjb29yZGluYXRlIHZhbHVlcyBiZXR3ZWVuIHRoZSBzdWJzY3JpcHRpb24gZWZmZWN0IGFuZCB0aGUgcmVuZGVyIGxvZ2ljXG5cblxuICAgICAgdmFyIGxhc3RDaGlsZFByb3BzID0gdXNlUmVmKCk7XG4gICAgICB2YXIgbGFzdFdyYXBwZXJQcm9wcyA9IHVzZVJlZih3cmFwcGVyUHJvcHMpO1xuICAgICAgdmFyIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUgPSB1c2VSZWYoKTtcbiAgICAgIHZhciByZW5kZXJJc1NjaGVkdWxlZCA9IHVzZVJlZihmYWxzZSk7XG4gICAgICB2YXIgYWN0dWFsQ2hpbGRQcm9wcyA9IHVzZVB1cmVPbmx5TWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFRyaWNreSBsb2dpYyBoZXJlOlxuICAgICAgICAvLyAtIFRoaXMgcmVuZGVyIG1heSBoYXZlIGJlZW4gdHJpZ2dlcmVkIGJ5IGEgUmVkdXggc3RvcmUgdXBkYXRlIHRoYXQgcHJvZHVjZWQgbmV3IGNoaWxkIHByb3BzXG4gICAgICAgIC8vIC0gSG93ZXZlciwgd2UgbWF5IGhhdmUgZ290dGVuIG5ldyB3cmFwcGVyIHByb3BzIGFmdGVyIHRoYXRcbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBuZXcgY2hpbGQgcHJvcHMsIGFuZCB0aGUgc2FtZSB3cmFwcGVyIHByb3BzLCB3ZSBrbm93IHdlIHNob3VsZCB1c2UgdGhlIG5ldyBjaGlsZCBwcm9wcyBhcy1pcy5cbiAgICAgICAgLy8gQnV0LCBpZiB3ZSBoYXZlIG5ldyB3cmFwcGVyIHByb3BzLCB0aG9zZSBtaWdodCBjaGFuZ2UgdGhlIGNoaWxkIHByb3BzLCBzbyB3ZSBoYXZlIHRvIHJlY2FsY3VsYXRlIHRoaW5ncy5cbiAgICAgICAgLy8gU28sIHdlJ2xsIHVzZSB0aGUgY2hpbGQgcHJvcHMgZnJvbSBzdG9yZSB1cGRhdGUgb25seSBpZiB0aGUgd3JhcHBlciBwcm9wcyBhcmUgdGhlIHNhbWUgYXMgbGFzdCB0aW1lLlxuICAgICAgICBpZiAoY2hpbGRQcm9wc0Zyb21TdG9yZVVwZGF0ZS5jdXJyZW50ICYmIHdyYXBwZXJQcm9wcyA9PT0gbGFzdFdyYXBwZXJQcm9wcy5jdXJyZW50KSB7XG4gICAgICAgICAgcmV0dXJuIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUuY3VycmVudDtcbiAgICAgICAgfSAvLyBUT0RPIFdlJ3JlIHJlYWRpbmcgdGhlIHN0b3JlIGRpcmVjdGx5IGluIHJlbmRlcigpIGhlcmUuIEJhZCBpZGVhP1xuICAgICAgICAvLyBUaGlzIHdpbGwgbGlrZWx5IGNhdXNlIEJhZCBUaGluZ3MgKFRNKSB0byBoYXBwZW4gaW4gQ29uY3VycmVudCBNb2RlLlxuICAgICAgICAvLyBOb3RlIHRoYXQgd2UgZG8gdGhpcyBiZWNhdXNlIG9uIHJlbmRlcnMgX25vdF8gY2F1c2VkIGJ5IHN0b3JlIHVwZGF0ZXMsIHdlIG5lZWQgdGhlIGxhdGVzdCBzdG9yZSBzdGF0ZVxuICAgICAgICAvLyB0byBkZXRlcm1pbmUgd2hhdCB0aGUgY2hpbGQgcHJvcHMgc2hvdWxkIGJlLlxuXG5cbiAgICAgICAgcmV0dXJuIGNoaWxkUHJvcHNTZWxlY3RvcihzdG9yZS5nZXRTdGF0ZSgpLCB3cmFwcGVyUHJvcHMpO1xuICAgICAgfSwgW3N0b3JlLCBwcmV2aW91c1N0YXRlVXBkYXRlUmVzdWx0LCB3cmFwcGVyUHJvcHNdKTsgLy8gV2UgbmVlZCB0aGlzIHRvIGV4ZWN1dGUgc3luY2hyb25vdXNseSBldmVyeSB0aW1lIHdlIHJlLXJlbmRlci4gSG93ZXZlciwgUmVhY3Qgd2FybnNcbiAgICAgIC8vIGFib3V0IHVzZUxheW91dEVmZmVjdCBpbiBTU1IsIHNvIHdlIHRyeSB0byBkZXRlY3QgZW52aXJvbm1lbnQgYW5kIGZhbGwgYmFjayB0b1xuICAgICAgLy8ganVzdCB1c2VFZmZlY3QgaW5zdGVhZCB0byBhdm9pZCB0aGUgd2FybmluZywgc2luY2UgbmVpdGhlciB3aWxsIHJ1biBhbnl3YXkuXG5cbiAgICAgIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3RXaXRoQXJncyhjYXB0dXJlV3JhcHBlclByb3BzLCBbbGFzdFdyYXBwZXJQcm9wcywgbGFzdENoaWxkUHJvcHMsIHJlbmRlcklzU2NoZWR1bGVkLCB3cmFwcGVyUHJvcHMsIGFjdHVhbENoaWxkUHJvcHMsIGNoaWxkUHJvcHNGcm9tU3RvcmVVcGRhdGUsIG5vdGlmeU5lc3RlZFN1YnNdKTsgLy8gT3VyIHJlLXN1YnNjcmliZSBsb2dpYyBvbmx5IHJ1bnMgd2hlbiB0aGUgc3RvcmUvc3Vic2NyaXB0aW9uIHNldHVwIGNoYW5nZXNcblxuICAgICAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdFdpdGhBcmdzKHN1YnNjcmliZVVwZGF0ZXMsIFtzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXMsIHN0b3JlLCBzdWJzY3JpcHRpb24sIGNoaWxkUHJvcHNTZWxlY3RvciwgbGFzdFdyYXBwZXJQcm9wcywgbGFzdENoaWxkUHJvcHMsIHJlbmRlcklzU2NoZWR1bGVkLCBjaGlsZFByb3BzRnJvbVN0b3JlVXBkYXRlLCBub3RpZnlOZXN0ZWRTdWJzLCBmb3JjZUNvbXBvbmVudFVwZGF0ZURpc3BhdGNoXSwgW3N0b3JlLCBzdWJzY3JpcHRpb24sIGNoaWxkUHJvcHNTZWxlY3Rvcl0pOyAvLyBOb3cgdGhhdCBhbGwgdGhhdCdzIGRvbmUsIHdlIGNhbiBmaW5hbGx5IHRyeSB0byBhY3R1YWxseSByZW5kZXIgdGhlIGNoaWxkIGNvbXBvbmVudC5cbiAgICAgIC8vIFdlIG1lbW9pemUgdGhlIGVsZW1lbnRzIGZvciB0aGUgcmVuZGVyZWQgY2hpbGQgY29tcG9uZW50IGFzIGFuIG9wdGltaXphdGlvbi5cblxuICAgICAgdmFyIHJlbmRlcmVkV3JhcHBlZENvbXBvbmVudCA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChXcmFwcGVkQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgYWN0dWFsQ2hpbGRQcm9wcywge1xuICAgICAgICAgIHJlZjogZm9yd2FyZGVkUmVmXG4gICAgICAgIH0pKTtcbiAgICAgIH0sIFtmb3J3YXJkZWRSZWYsIFdyYXBwZWRDb21wb25lbnQsIGFjdHVhbENoaWxkUHJvcHNdKTsgLy8gSWYgUmVhY3Qgc2VlcyB0aGUgZXhhY3Qgc2FtZSBlbGVtZW50IHJlZmVyZW5jZSBhcyBsYXN0IHRpbWUsIGl0IGJhaWxzIG91dCBvZiByZS1yZW5kZXJpbmdcbiAgICAgIC8vIHRoYXQgY2hpbGQsIHNhbWUgYXMgaWYgaXQgd2FzIHdyYXBwZWQgaW4gUmVhY3QubWVtbygpIG9yIHJldHVybmVkIGZhbHNlIGZyb20gc2hvdWxkQ29tcG9uZW50VXBkYXRlLlxuXG4gICAgICB2YXIgcmVuZGVyZWRDaGlsZCA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoc2hvdWxkSGFuZGxlU3RhdGVDaGFuZ2VzKSB7XG4gICAgICAgICAgLy8gSWYgdGhpcyBjb21wb25lbnQgaXMgc3Vic2NyaWJlZCB0byBzdG9yZSB1cGRhdGVzLCB3ZSBuZWVkIHRvIHBhc3MgaXRzIG93blxuICAgICAgICAgIC8vIHN1YnNjcmlwdGlvbiBpbnN0YW5jZSBkb3duIHRvIG91ciBkZXNjZW5kYW50cy4gVGhhdCBtZWFucyByZW5kZXJpbmcgdGhlIHNhbWVcbiAgICAgICAgICAvLyBDb250ZXh0IGluc3RhbmNlLCBhbmQgcHV0dGluZyBhIGRpZmZlcmVudCB2YWx1ZSBpbnRvIHRoZSBjb250ZXh0LlxuICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENvbnRleHRUb1VzZS5Qcm92aWRlciwge1xuICAgICAgICAgICAgdmFsdWU6IG92ZXJyaWRkZW5Db250ZXh0VmFsdWVcbiAgICAgICAgICB9LCByZW5kZXJlZFdyYXBwZWRDb21wb25lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlbmRlcmVkV3JhcHBlZENvbXBvbmVudDtcbiAgICAgIH0sIFtDb250ZXh0VG9Vc2UsIHJlbmRlcmVkV3JhcHBlZENvbXBvbmVudCwgb3ZlcnJpZGRlbkNvbnRleHRWYWx1ZV0pO1xuICAgICAgcmV0dXJuIHJlbmRlcmVkQ2hpbGQ7XG4gICAgfSAvLyBJZiB3ZSdyZSBpbiBcInB1cmVcIiBtb2RlLCBlbnN1cmUgb3VyIHdyYXBwZXIgY29tcG9uZW50IG9ubHkgcmUtcmVuZGVycyB3aGVuIGluY29taW5nIHByb3BzIGhhdmUgY2hhbmdlZC5cblxuXG4gICAgdmFyIENvbm5lY3QgPSBwdXJlID8gUmVhY3QubWVtbyhDb25uZWN0RnVuY3Rpb24pIDogQ29ubmVjdEZ1bmN0aW9uO1xuICAgIENvbm5lY3QuV3JhcHBlZENvbXBvbmVudCA9IFdyYXBwZWRDb21wb25lbnQ7XG4gICAgQ29ubmVjdC5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuXG4gICAgaWYgKGZvcndhcmRSZWYpIHtcbiAgICAgIHZhciBmb3J3YXJkZWQgPSBSZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIGZvcndhcmRDb25uZWN0UmVmKHByb3BzLCByZWYpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29ubmVjdCwgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICAgICAgZm9yd2FyZGVkUmVmOiByZWZcbiAgICAgICAgfSkpO1xuICAgICAgfSk7XG4gICAgICBmb3J3YXJkZWQuZGlzcGxheU5hbWUgPSBkaXNwbGF5TmFtZTtcbiAgICAgIGZvcndhcmRlZC5XcmFwcGVkQ29tcG9uZW50ID0gV3JhcHBlZENvbXBvbmVudDtcbiAgICAgIHJldHVybiBob2lzdFN0YXRpY3MoZm9yd2FyZGVkLCBXcmFwcGVkQ29tcG9uZW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gaG9pc3RTdGF0aWNzKENvbm5lY3QsIFdyYXBwZWRDb21wb25lbnQpO1xuICB9O1xufSIsImZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCB5ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gIGlmIChpcyhvYmpBLCBvYmpCKSkgcmV0dXJuIHRydWU7XG5cbiAgaWYgKHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fCBvYmpBID09PSBudWxsIHx8IHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gIHZhciBrZXlzQiA9IE9iamVjdC5rZXlzKG9iakIpO1xuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXNBLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqQiwga2V5c0FbaV0pIHx8ICFpcyhvYmpBW2tleXNBW2ldXSwgb2JqQltrZXlzQVtpXV0pKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59IiwiaW1wb3J0ICQkb2JzZXJ2YWJsZSBmcm9tICdzeW1ib2wtb2JzZXJ2YWJsZSc7XG5cbi8qKlxuICogVGhlc2UgYXJlIHByaXZhdGUgYWN0aW9uIHR5cGVzIHJlc2VydmVkIGJ5IFJlZHV4LlxuICogRm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHlvdSBtdXN0IHJldHVybiB0aGUgY3VycmVudCBzdGF0ZS5cbiAqIElmIHRoZSBjdXJyZW50IHN0YXRlIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLlxuICogRG8gbm90IHJlZmVyZW5jZSB0aGVzZSBhY3Rpb24gdHlwZXMgZGlyZWN0bHkgaW4geW91ciBjb2RlLlxuICovXG52YXIgcmFuZG9tU3RyaW5nID0gZnVuY3Rpb24gcmFuZG9tU3RyaW5nKCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDcpLnNwbGl0KCcnKS5qb2luKCcuJyk7XG59O1xuXG52YXIgQWN0aW9uVHlwZXMgPSB7XG4gIElOSVQ6IFwiQEByZWR1eC9JTklUXCIgKyByYW5kb21TdHJpbmcoKSxcbiAgUkVQTEFDRTogXCJAQHJlZHV4L1JFUExBQ0VcIiArIHJhbmRvbVN0cmluZygpLFxuICBQUk9CRV9VTktOT1dOX0FDVElPTjogZnVuY3Rpb24gUFJPQkVfVU5LTk9XTl9BQ1RJT04oKSB7XG4gICAgcmV0dXJuIFwiQEByZWR1eC9QUk9CRV9VTktOT1dOX0FDVElPTlwiICsgcmFuZG9tU3RyaW5nKCk7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHthbnl9IG9iaiBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgYXJndW1lbnQgYXBwZWFycyB0byBiZSBhIHBsYWluIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdChvYmopIHtcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICB2YXIgcHJvdG8gPSBvYmo7XG5cbiAgd2hpbGUgKE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90bykgIT09IG51bGwpIHtcbiAgICBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90byk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikgPT09IHByb3RvO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBSZWR1eCBzdG9yZSB0aGF0IGhvbGRzIHRoZSBzdGF0ZSB0cmVlLlxuICogVGhlIG9ubHkgd2F5IHRvIGNoYW5nZSB0aGUgZGF0YSBpbiB0aGUgc3RvcmUgaXMgdG8gY2FsbCBgZGlzcGF0Y2goKWAgb24gaXQuXG4gKlxuICogVGhlcmUgc2hvdWxkIG9ubHkgYmUgYSBzaW5nbGUgc3RvcmUgaW4geW91ciBhcHAuIFRvIHNwZWNpZnkgaG93IGRpZmZlcmVudFxuICogcGFydHMgb2YgdGhlIHN0YXRlIHRyZWUgcmVzcG9uZCB0byBhY3Rpb25zLCB5b3UgbWF5IGNvbWJpbmUgc2V2ZXJhbCByZWR1Y2Vyc1xuICogaW50byBhIHNpbmdsZSByZWR1Y2VyIGZ1bmN0aW9uIGJ5IHVzaW5nIGBjb21iaW5lUmVkdWNlcnNgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlZHVjZXIgQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIG5leHQgc3RhdGUgdHJlZSwgZ2l2ZW5cbiAqIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBhY3Rpb24gdG8gaGFuZGxlLlxuICpcbiAqIEBwYXJhbSB7YW55fSBbcHJlbG9hZGVkU3RhdGVdIFRoZSBpbml0aWFsIHN0YXRlLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gaHlkcmF0ZSB0aGUgc3RhdGUgZnJvbSB0aGUgc2VydmVyIGluIHVuaXZlcnNhbCBhcHBzLCBvciB0byByZXN0b3JlIGFcbiAqIHByZXZpb3VzbHkgc2VyaWFsaXplZCB1c2VyIHNlc3Npb24uXG4gKiBJZiB5b3UgdXNlIGBjb21iaW5lUmVkdWNlcnNgIHRvIHByb2R1Y2UgdGhlIHJvb3QgcmVkdWNlciBmdW5jdGlvbiwgdGhpcyBtdXN0IGJlXG4gKiBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZSBhcyBgY29tYmluZVJlZHVjZXJzYCBrZXlzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtlbmhhbmNlcl0gVGhlIHN0b3JlIGVuaGFuY2VyLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gZW5oYW5jZSB0aGUgc3RvcmUgd2l0aCB0aGlyZC1wYXJ0eSBjYXBhYmlsaXRpZXMgc3VjaCBhcyBtaWRkbGV3YXJlLFxuICogdGltZSB0cmF2ZWwsIHBlcnNpc3RlbmNlLCBldGMuIFRoZSBvbmx5IHN0b3JlIGVuaGFuY2VyIHRoYXQgc2hpcHMgd2l0aCBSZWR1eFxuICogaXMgYGFwcGx5TWlkZGxld2FyZSgpYC5cbiAqXG4gKiBAcmV0dXJucyB7U3RvcmV9IEEgUmVkdXggc3RvcmUgdGhhdCBsZXRzIHlvdSByZWFkIHRoZSBzdGF0ZSwgZGlzcGF0Y2ggYWN0aW9uc1xuICogYW5kIHN1YnNjcmliZSB0byBjaGFuZ2VzLlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVN0b3JlKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlLCBlbmhhbmNlcikge1xuICB2YXIgX3JlZjI7XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGVuaGFuY2VyID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBhcmd1bWVudHNbM10gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0l0IGxvb2tzIGxpa2UgeW91IGFyZSBwYXNzaW5nIHNldmVyYWwgc3RvcmUgZW5oYW5jZXJzIHRvICcgKyAnY3JlYXRlU3RvcmUoKS4gVGhpcyBpcyBub3Qgc3VwcG9ydGVkLiBJbnN0ZWFkLCBjb21wb3NlIHRoZW0gJyArICd0b2dldGhlciB0byBhIHNpbmdsZSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAndW5kZWZpbmVkJykge1xuICAgIGVuaGFuY2VyID0gcHJlbG9hZGVkU3RhdGU7XG4gICAgcHJlbG9hZGVkU3RhdGUgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIGVuaGFuY2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVuaGFuY2VyKGNyZWF0ZVN0b3JlKShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIHJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSByZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgY3VycmVudFJlZHVjZXIgPSByZWR1Y2VyO1xuICB2YXIgY3VycmVudFN0YXRlID0gcHJlbG9hZGVkU3RhdGU7XG4gIHZhciBjdXJyZW50TGlzdGVuZXJzID0gW107XG4gIHZhciBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycztcbiAgdmFyIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgLyoqXG4gICAqIFRoaXMgbWFrZXMgYSBzaGFsbG93IGNvcHkgb2YgY3VycmVudExpc3RlbmVycyBzbyB3ZSBjYW4gdXNlXG4gICAqIG5leHRMaXN0ZW5lcnMgYXMgYSB0ZW1wb3JhcnkgbGlzdCB3aGlsZSBkaXNwYXRjaGluZy5cbiAgICpcbiAgICogVGhpcyBwcmV2ZW50cyBhbnkgYnVncyBhcm91bmQgY29uc3VtZXJzIGNhbGxpbmdcbiAgICogc3Vic2NyaWJlL3Vuc3Vic2NyaWJlIGluIHRoZSBtaWRkbGUgb2YgYSBkaXNwYXRjaC5cbiAgICovXG5cbiAgZnVuY3Rpb24gZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpIHtcbiAgICBpZiAobmV4dExpc3RlbmVycyA9PT0gY3VycmVudExpc3RlbmVycykge1xuICAgICAgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMuc2xpY2UoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlYWRzIHRoZSBzdGF0ZSB0cmVlIG1hbmFnZWQgYnkgdGhlIHN0b3JlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7YW55fSBUaGUgY3VycmVudCBzdGF0ZSB0cmVlIG9mIHlvdXIgYXBwbGljYXRpb24uXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZ2V0U3RhdGUoKSB7XG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgY2FsbCBzdG9yZS5nZXRTdGF0ZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdUaGUgcmVkdWNlciBoYXMgYWxyZWFkeSByZWNlaXZlZCB0aGUgc3RhdGUgYXMgYW4gYXJndW1lbnQuICcgKyAnUGFzcyBpdCBkb3duIGZyb20gdGhlIHRvcCByZWR1Y2VyIGluc3RlYWQgb2YgcmVhZGluZyBpdCBmcm9tIHRoZSBzdG9yZS4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3VycmVudFN0YXRlO1xuICB9XG4gIC8qKlxuICAgKiBBZGRzIGEgY2hhbmdlIGxpc3RlbmVyLiBJdCB3aWxsIGJlIGNhbGxlZCBhbnkgdGltZSBhbiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCxcbiAgICogYW5kIHNvbWUgcGFydCBvZiB0aGUgc3RhdGUgdHJlZSBtYXkgcG90ZW50aWFsbHkgaGF2ZSBjaGFuZ2VkLiBZb3UgbWF5IHRoZW5cbiAgICogY2FsbCBgZ2V0U3RhdGUoKWAgdG8gcmVhZCB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGluc2lkZSB0aGUgY2FsbGJhY2suXG4gICAqXG4gICAqIFlvdSBtYXkgY2FsbCBgZGlzcGF0Y2goKWAgZnJvbSBhIGNoYW5nZSBsaXN0ZW5lciwgd2l0aCB0aGUgZm9sbG93aW5nXG4gICAqIGNhdmVhdHM6XG4gICAqXG4gICAqIDEuIFRoZSBzdWJzY3JpcHRpb25zIGFyZSBzbmFwc2hvdHRlZCBqdXN0IGJlZm9yZSBldmVyeSBgZGlzcGF0Y2goKWAgY2FsbC5cbiAgICogSWYgeW91IHN1YnNjcmliZSBvciB1bnN1YnNjcmliZSB3aGlsZSB0aGUgbGlzdGVuZXJzIGFyZSBiZWluZyBpbnZva2VkLCB0aGlzXG4gICAqIHdpbGwgbm90IGhhdmUgYW55IGVmZmVjdCBvbiB0aGUgYGRpc3BhdGNoKClgIHRoYXQgaXMgY3VycmVudGx5IGluIHByb2dyZXNzLlxuICAgKiBIb3dldmVyLCB0aGUgbmV4dCBgZGlzcGF0Y2goKWAgY2FsbCwgd2hldGhlciBuZXN0ZWQgb3Igbm90LCB3aWxsIHVzZSBhIG1vcmVcbiAgICogcmVjZW50IHNuYXBzaG90IG9mIHRoZSBzdWJzY3JpcHRpb24gbGlzdC5cbiAgICpcbiAgICogMi4gVGhlIGxpc3RlbmVyIHNob3VsZCBub3QgZXhwZWN0IHRvIHNlZSBhbGwgc3RhdGUgY2hhbmdlcywgYXMgdGhlIHN0YXRlXG4gICAqIG1pZ2h0IGhhdmUgYmVlbiB1cGRhdGVkIG11bHRpcGxlIHRpbWVzIGR1cmluZyBhIG5lc3RlZCBgZGlzcGF0Y2goKWAgYmVmb3JlXG4gICAqIHRoZSBsaXN0ZW5lciBpcyBjYWxsZWQuIEl0IGlzLCBob3dldmVyLCBndWFyYW50ZWVkIHRoYXQgYWxsIHN1YnNjcmliZXJzXG4gICAqIHJlZ2lzdGVyZWQgYmVmb3JlIHRoZSBgZGlzcGF0Y2goKWAgc3RhcnRlZCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZSBsYXRlc3RcbiAgICogc3RhdGUgYnkgdGhlIHRpbWUgaXQgZXhpdHMuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIEEgY2FsbGJhY2sgdG8gYmUgaW52b2tlZCBvbiBldmVyeSBkaXNwYXRjaC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIHRvIHJlbW92ZSB0aGlzIGNoYW5nZSBsaXN0ZW5lci5cbiAgICovXG5cblxuICBmdW5jdGlvbiBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBsaXN0ZW5lciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuc3Vic2NyaWJlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ0lmIHlvdSB3b3VsZCBsaWtlIHRvIGJlIG5vdGlmaWVkIGFmdGVyIHRoZSBzdG9yZSBoYXMgYmVlbiB1cGRhdGVkLCBzdWJzY3JpYmUgZnJvbSBhICcgKyAnY29tcG9uZW50IGFuZCBpbnZva2Ugc3RvcmUuZ2V0U3RhdGUoKSBpbiB0aGUgY2FsbGJhY2sgdG8gYWNjZXNzIHRoZSBsYXRlc3Qgc3RhdGUuICcgKyAnU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2FwaS1yZWZlcmVuY2Uvc3RvcmUjc3Vic2NyaWJlbGlzdGVuZXIgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICB9XG5cbiAgICB2YXIgaXNTdWJzY3JpYmVkID0gdHJ1ZTtcbiAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgbmV4dExpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7XG4gICAgICBpZiAoIWlzU3Vic2NyaWJlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgdW5zdWJzY3JpYmUgZnJvbSBhIHN0b3JlIGxpc3RlbmVyIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpLXJlZmVyZW5jZS9zdG9yZSNzdWJzY3JpYmVsaXN0ZW5lciBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgICAgfVxuXG4gICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcbiAgICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICAgIHZhciBpbmRleCA9IG5leHRMaXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgICBuZXh0TGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICBjdXJyZW50TGlzdGVuZXJzID0gbnVsbDtcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBEaXNwYXRjaGVzIGFuIGFjdGlvbi4gSXQgaXMgdGhlIG9ubHkgd2F5IHRvIHRyaWdnZXIgYSBzdGF0ZSBjaGFuZ2UuXG4gICAqXG4gICAqIFRoZSBgcmVkdWNlcmAgZnVuY3Rpb24sIHVzZWQgdG8gY3JlYXRlIHRoZSBzdG9yZSwgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGVcbiAgICogY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgZ2l2ZW4gYGFjdGlvbmAuIEl0cyByZXR1cm4gdmFsdWUgd2lsbFxuICAgKiBiZSBjb25zaWRlcmVkIHRoZSAqKm5leHQqKiBzdGF0ZSBvZiB0aGUgdHJlZSwgYW5kIHRoZSBjaGFuZ2UgbGlzdGVuZXJzXG4gICAqIHdpbGwgYmUgbm90aWZpZWQuXG4gICAqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9ubHkgc3VwcG9ydHMgcGxhaW4gb2JqZWN0IGFjdGlvbnMuIElmIHlvdSB3YW50IHRvXG4gICAqIGRpc3BhdGNoIGEgUHJvbWlzZSwgYW4gT2JzZXJ2YWJsZSwgYSB0aHVuaywgb3Igc29tZXRoaW5nIGVsc2UsIHlvdSBuZWVkIHRvXG4gICAqIHdyYXAgeW91ciBzdG9yZSBjcmVhdGluZyBmdW5jdGlvbiBpbnRvIHRoZSBjb3JyZXNwb25kaW5nIG1pZGRsZXdhcmUuIEZvclxuICAgKiBleGFtcGxlLCBzZWUgdGhlIGRvY3VtZW50YXRpb24gZm9yIHRoZSBgcmVkdXgtdGh1bmtgIHBhY2thZ2UuIEV2ZW4gdGhlXG4gICAqIG1pZGRsZXdhcmUgd2lsbCBldmVudHVhbGx5IGRpc3BhdGNoIHBsYWluIG9iamVjdCBhY3Rpb25zIHVzaW5nIHRoaXMgbWV0aG9kLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gYWN0aW9uIEEgcGxhaW4gb2JqZWN0IHJlcHJlc2VudGluZyDigJx3aGF0IGNoYW5nZWTigJ0uIEl0IGlzXG4gICAqIGEgZ29vZCBpZGVhIHRvIGtlZXAgYWN0aW9ucyBzZXJpYWxpemFibGUgc28geW91IGNhbiByZWNvcmQgYW5kIHJlcGxheSB1c2VyXG4gICAqIHNlc3Npb25zLCBvciB1c2UgdGhlIHRpbWUgdHJhdmVsbGluZyBgcmVkdXgtZGV2dG9vbHNgLiBBbiBhY3Rpb24gbXVzdCBoYXZlXG4gICAqIGEgYHR5cGVgIHByb3BlcnR5IHdoaWNoIG1heSBub3QgYmUgYHVuZGVmaW5lZGAuIEl0IGlzIGEgZ29vZCBpZGVhIHRvIHVzZVxuICAgKiBzdHJpbmcgY29uc3RhbnRzIGZvciBhY3Rpb24gdHlwZXMuXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IEZvciBjb252ZW5pZW5jZSwgdGhlIHNhbWUgYWN0aW9uIG9iamVjdCB5b3UgZGlzcGF0Y2hlZC5cbiAgICpcbiAgICogTm90ZSB0aGF0LCBpZiB5b3UgdXNlIGEgY3VzdG9tIG1pZGRsZXdhcmUsIGl0IG1heSB3cmFwIGBkaXNwYXRjaCgpYCB0b1xuICAgKiByZXR1cm4gc29tZXRoaW5nIGVsc2UgKGZvciBleGFtcGxlLCBhIFByb21pc2UgeW91IGNhbiBhd2FpdCkuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZGlzcGF0Y2goYWN0aW9uKSB7XG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KGFjdGlvbikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQWN0aW9ucyBtdXN0IGJlIHBsYWluIG9iamVjdHMuICcgKyAnVXNlIGN1c3RvbSBtaWRkbGV3YXJlIGZvciBhc3luYyBhY3Rpb25zLicpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgYWN0aW9uLnR5cGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjdGlvbnMgbWF5IG5vdCBoYXZlIGFuIHVuZGVmaW5lZCBcInR5cGVcIiBwcm9wZXJ0eS4gJyArICdIYXZlIHlvdSBtaXNzcGVsbGVkIGEgY29uc3RhbnQ/Jyk7XG4gICAgfVxuXG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUmVkdWNlcnMgbWF5IG5vdCBkaXNwYXRjaCBhY3Rpb25zLicpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gdHJ1ZTtcbiAgICAgIGN1cnJlbnRTdGF0ZSA9IGN1cnJlbnRSZWR1Y2VyKGN1cnJlbnRTdGF0ZSwgYWN0aW9uKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaXNEaXNwYXRjaGluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBsaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzID0gbmV4dExpc3RlbmVycztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbaV07XG4gICAgICBsaXN0ZW5lcigpO1xuICAgIH1cblxuICAgIHJldHVybiBhY3Rpb247XG4gIH1cbiAgLyoqXG4gICAqIFJlcGxhY2VzIHRoZSByZWR1Y2VyIGN1cnJlbnRseSB1c2VkIGJ5IHRoZSBzdG9yZSB0byBjYWxjdWxhdGUgdGhlIHN0YXRlLlxuICAgKlxuICAgKiBZb3UgbWlnaHQgbmVlZCB0aGlzIGlmIHlvdXIgYXBwIGltcGxlbWVudHMgY29kZSBzcGxpdHRpbmcgYW5kIHlvdSB3YW50IHRvXG4gICAqIGxvYWQgc29tZSBvZiB0aGUgcmVkdWNlcnMgZHluYW1pY2FsbHkuIFlvdSBtaWdodCBhbHNvIG5lZWQgdGhpcyBpZiB5b3VcbiAgICogaW1wbGVtZW50IGEgaG90IHJlbG9hZGluZyBtZWNoYW5pc20gZm9yIFJlZHV4LlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBuZXh0UmVkdWNlciBUaGUgcmVkdWNlciBmb3IgdGhlIHN0b3JlIHRvIHVzZSBpbnN0ZWFkLlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG5cblxuICBmdW5jdGlvbiByZXBsYWNlUmVkdWNlcihuZXh0UmVkdWNlcikge1xuICAgIGlmICh0eXBlb2YgbmV4dFJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIG5leHRSZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgY3VycmVudFJlZHVjZXIgPSBuZXh0UmVkdWNlcjsgLy8gVGhpcyBhY3Rpb24gaGFzIGEgc2ltaWxpYXIgZWZmZWN0IHRvIEFjdGlvblR5cGVzLklOSVQuXG4gICAgLy8gQW55IHJlZHVjZXJzIHRoYXQgZXhpc3RlZCBpbiBib3RoIHRoZSBuZXcgYW5kIG9sZCByb290UmVkdWNlclxuICAgIC8vIHdpbGwgcmVjZWl2ZSB0aGUgcHJldmlvdXMgc3RhdGUuIFRoaXMgZWZmZWN0aXZlbHkgcG9wdWxhdGVzXG4gICAgLy8gdGhlIG5ldyBzdGF0ZSB0cmVlIHdpdGggYW55IHJlbGV2YW50IGRhdGEgZnJvbSB0aGUgb2xkIG9uZS5cblxuICAgIGRpc3BhdGNoKHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlJFUExBQ0VcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogSW50ZXJvcGVyYWJpbGl0eSBwb2ludCBmb3Igb2JzZXJ2YWJsZS9yZWFjdGl2ZSBsaWJyYXJpZXMuXG4gICAqIEByZXR1cm5zIHtvYnNlcnZhYmxlfSBBIG1pbmltYWwgb2JzZXJ2YWJsZSBvZiBzdGF0ZSBjaGFuZ2VzLlxuICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBvYnNlcnZhYmxlIHByb3Bvc2FsOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYnNlcnZhYmxlXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gb2JzZXJ2YWJsZSgpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBvdXRlclN1YnNjcmliZSA9IHN1YnNjcmliZTtcbiAgICByZXR1cm4gX3JlZiA9IHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIG1pbmltYWwgb2JzZXJ2YWJsZSBzdWJzY3JpcHRpb24gbWV0aG9kLlxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9ic2VydmVyIEFueSBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCBhcyBhbiBvYnNlcnZlci5cbiAgICAgICAqIFRoZSBvYnNlcnZlciBvYmplY3Qgc2hvdWxkIGhhdmUgYSBgbmV4dGAgbWV0aG9kLlxuICAgICAgICogQHJldHVybnMge3N1YnNjcmlwdGlvbn0gQW4gb2JqZWN0IHdpdGggYW4gYHVuc3Vic2NyaWJlYCBtZXRob2QgdGhhdCBjYW5cbiAgICAgICAqIGJlIHVzZWQgdG8gdW5zdWJzY3JpYmUgdGhlIG9ic2VydmFibGUgZnJvbSB0aGUgc3RvcmUsIGFuZCBwcmV2ZW50IGZ1cnRoZXJcbiAgICAgICAqIGVtaXNzaW9uIG9mIHZhbHVlcyBmcm9tIHRoZSBvYnNlcnZhYmxlLlxuICAgICAgICovXG4gICAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShvYnNlcnZlcikge1xuICAgICAgICBpZiAodHlwZW9mIG9ic2VydmVyICE9PSAnb2JqZWN0JyB8fCBvYnNlcnZlciA9PT0gbnVsbCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHRoZSBvYnNlcnZlciB0byBiZSBhbiBvYmplY3QuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBvYnNlcnZlU3RhdGUoKSB7XG4gICAgICAgICAgaWYgKG9ic2VydmVyLm5leHQpIHtcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQoZ2V0U3RhdGUoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgb2JzZXJ2ZVN0YXRlKCk7XG4gICAgICAgIHZhciB1bnN1YnNjcmliZSA9IG91dGVyU3Vic2NyaWJlKG9ic2VydmVTdGF0ZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdW5zdWJzY3JpYmU6IHVuc3Vic2NyaWJlXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSwgX3JlZlskJG9ic2VydmFibGVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSwgX3JlZjtcbiAgfSAvLyBXaGVuIGEgc3RvcmUgaXMgY3JlYXRlZCwgYW4gXCJJTklUXCIgYWN0aW9uIGlzIGRpc3BhdGNoZWQgc28gdGhhdCBldmVyeVxuICAvLyByZWR1Y2VyIHJldHVybnMgdGhlaXIgaW5pdGlhbCBzdGF0ZS4gVGhpcyBlZmZlY3RpdmVseSBwb3B1bGF0ZXNcbiAgLy8gdGhlIGluaXRpYWwgc3RhdGUgdHJlZS5cblxuXG4gIGRpc3BhdGNoKHtcbiAgICB0eXBlOiBBY3Rpb25UeXBlcy5JTklUXG4gIH0pO1xuICByZXR1cm4gX3JlZjIgPSB7XG4gICAgZGlzcGF0Y2g6IGRpc3BhdGNoLFxuICAgIHN1YnNjcmliZTogc3Vic2NyaWJlLFxuICAgIGdldFN0YXRlOiBnZXRTdGF0ZSxcbiAgICByZXBsYWNlUmVkdWNlcjogcmVwbGFjZVJlZHVjZXJcbiAgfSwgX3JlZjJbJCRvYnNlcnZhYmxlXSA9IG9ic2VydmFibGUsIF9yZWYyO1xufVxuXG4vKipcbiAqIFByaW50cyBhIHdhcm5pbmcgaW4gdGhlIGNvbnNvbGUgaWYgaXQgZXhpc3RzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIFRoZSB3YXJuaW5nIG1lc3NhZ2UuXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gd2FybmluZyhtZXNzYWdlKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbiAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgY29uc29sZS5lcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gIH1cbiAgLyogZXNsaW50LWVuYWJsZSBuby1jb25zb2xlICovXG5cblxuICB0cnkge1xuICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgaWYgeW91IGVuYWJsZVxuICAgIC8vIFwiYnJlYWsgb24gYWxsIGV4Y2VwdGlvbnNcIiBpbiB5b3VyIGNvbnNvbGUsXG4gICAgLy8gaXQgd291bGQgcGF1c2UgdGhlIGV4ZWN1dGlvbiBhdCB0aGlzIGxpbmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICB9IGNhdGNoIChlKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5XG5cbn1cblxuZnVuY3Rpb24gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2Uoa2V5LCBhY3Rpb24pIHtcbiAgdmFyIGFjdGlvblR5cGUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGU7XG4gIHZhciBhY3Rpb25EZXNjcmlwdGlvbiA9IGFjdGlvblR5cGUgJiYgXCJhY3Rpb24gXFxcIlwiICsgU3RyaW5nKGFjdGlvblR5cGUpICsgXCJcXFwiXCIgfHwgJ2FuIGFjdGlvbic7XG4gIHJldHVybiBcIkdpdmVuIFwiICsgYWN0aW9uRGVzY3JpcHRpb24gKyBcIiwgcmVkdWNlciBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkLiBcIiArIFwiVG8gaWdub3JlIGFuIGFjdGlvbiwgeW91IG11c3QgZXhwbGljaXRseSByZXR1cm4gdGhlIHByZXZpb3VzIHN0YXRlLiBcIiArIFwiSWYgeW91IHdhbnQgdGhpcyByZWR1Y2VyIHRvIGhvbGQgbm8gdmFsdWUsIHlvdSBjYW4gcmV0dXJuIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuXCI7XG59XG5cbmZ1bmN0aW9uIGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2UoaW5wdXRTdGF0ZSwgcmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGFyZ3VtZW50TmFtZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuSU5JVCA/ICdwcmVsb2FkZWRTdGF0ZSBhcmd1bWVudCBwYXNzZWQgdG8gY3JlYXRlU3RvcmUnIDogJ3ByZXZpb3VzIHN0YXRlIHJlY2VpdmVkIGJ5IHRoZSByZWR1Y2VyJztcblxuICBpZiAocmVkdWNlcktleXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuICdTdG9yZSBkb2VzIG5vdCBoYXZlIGEgdmFsaWQgcmVkdWNlci4gTWFrZSBzdXJlIHRoZSBhcmd1bWVudCBwYXNzZWQgJyArICd0byBjb21iaW5lUmVkdWNlcnMgaXMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgcmVkdWNlcnMuJztcbiAgfVxuXG4gIGlmICghaXNQbGFpbk9iamVjdChpbnB1dFN0YXRlKSkge1xuICAgIHJldHVybiBcIlRoZSBcIiArIGFyZ3VtZW50TmFtZSArIFwiIGhhcyB1bmV4cGVjdGVkIHR5cGUgb2YgXFxcIlwiICsge30udG9TdHJpbmcuY2FsbChpbnB1dFN0YXRlKS5tYXRjaCgvXFxzKFthLXp8QS1aXSspLylbMV0gKyBcIlxcXCIuIEV4cGVjdGVkIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgXCIgKyAoXCJrZXlzOiBcXFwiXCIgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIlwiKTtcbiAgfVxuXG4gIHZhciB1bmV4cGVjdGVkS2V5cyA9IE9iamVjdC5rZXlzKGlucHV0U3RhdGUpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICFyZWR1Y2Vycy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmICF1bmV4cGVjdGVkS2V5Q2FjaGVba2V5XTtcbiAgfSk7XG4gIHVuZXhwZWN0ZWRLZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldID0gdHJ1ZTtcbiAgfSk7XG4gIGlmIChhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLlJFUExBQ0UpIHJldHVybjtcblxuICBpZiAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBcIlVuZXhwZWN0ZWQgXCIgKyAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMSA/ICdrZXlzJyA6ICdrZXknKSArIFwiIFwiICsgKFwiXFxcIlwiICsgdW5leHBlY3RlZEtleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCIgZm91bmQgaW4gXCIgKyBhcmd1bWVudE5hbWUgKyBcIi4gXCIpICsgXCJFeHBlY3RlZCB0byBmaW5kIG9uZSBvZiB0aGUga25vd24gcmVkdWNlciBrZXlzIGluc3RlYWQ6IFwiICsgKFwiXFxcIlwiICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCIuIFVuZXhwZWN0ZWQga2V5cyB3aWxsIGJlIGlnbm9yZWQuXCIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydFJlZHVjZXJTaGFwZShyZWR1Y2Vycykge1xuICBPYmplY3Qua2V5cyhyZWR1Y2VycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHJlZHVjZXIgPSByZWR1Y2Vyc1trZXldO1xuICAgIHZhciBpbml0aWFsU3RhdGUgPSByZWR1Y2VyKHVuZGVmaW5lZCwge1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuSU5JVFxuICAgIH0pO1xuXG4gICAgaWYgKHR5cGVvZiBpbml0aWFsU3RhdGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZWR1Y2VyIFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQgZHVyaW5nIGluaXRpYWxpemF0aW9uLiBcIiArIFwiSWYgdGhlIHN0YXRlIHBhc3NlZCB0byB0aGUgcmVkdWNlciBpcyB1bmRlZmluZWQsIHlvdSBtdXN0IFwiICsgXCJleHBsaWNpdGx5IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5IFwiICsgXCJub3QgYmUgdW5kZWZpbmVkLiBJZiB5b3UgZG9uJ3Qgd2FudCB0byBzZXQgYSB2YWx1ZSBmb3IgdGhpcyByZWR1Y2VyLCBcIiArIFwieW91IGNhbiB1c2UgbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC5cIik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZWR1Y2VyKHVuZGVmaW5lZCwge1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuUFJPQkVfVU5LTk9XTl9BQ1RJT04oKVxuICAgIH0pID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVkdWNlciBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIHdoZW4gcHJvYmVkIHdpdGggYSByYW5kb20gdHlwZS4gXCIgKyAoXCJEb24ndCB0cnkgdG8gaGFuZGxlIFwiICsgQWN0aW9uVHlwZXMuSU5JVCArIFwiIG9yIG90aGVyIGFjdGlvbnMgaW4gXFxcInJlZHV4LypcXFwiIFwiKSArIFwibmFtZXNwYWNlLiBUaGV5IGFyZSBjb25zaWRlcmVkIHByaXZhdGUuIEluc3RlYWQsIHlvdSBtdXN0IHJldHVybiB0aGUgXCIgKyBcImN1cnJlbnQgc3RhdGUgZm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHVubGVzcyBpdCBpcyB1bmRlZmluZWQsIFwiICsgXCJpbiB3aGljaCBjYXNlIHlvdSBtdXN0IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZSwgcmVnYXJkbGVzcyBvZiB0aGUgXCIgKyBcImFjdGlvbiB0eXBlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgbm90IGJlIHVuZGVmaW5lZCwgYnV0IGNhbiBiZSBudWxsLlwiKTtcbiAgICB9XG4gIH0pO1xufVxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBkaWZmZXJlbnQgcmVkdWNlciBmdW5jdGlvbnMsIGludG8gYSBzaW5nbGVcbiAqIHJlZHVjZXIgZnVuY3Rpb24uIEl0IHdpbGwgY2FsbCBldmVyeSBjaGlsZCByZWR1Y2VyLCBhbmQgZ2F0aGVyIHRoZWlyIHJlc3VsdHNcbiAqIGludG8gYSBzaW5nbGUgc3RhdGUgb2JqZWN0LCB3aG9zZSBrZXlzIGNvcnJlc3BvbmQgdG8gdGhlIGtleXMgb2YgdGhlIHBhc3NlZFxuICogcmVkdWNlciBmdW5jdGlvbnMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHJlZHVjZXJzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgY29ycmVzcG9uZCB0byBkaWZmZXJlbnRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zIHRoYXQgbmVlZCB0byBiZSBjb21iaW5lZCBpbnRvIG9uZS4gT25lIGhhbmR5IHdheSB0byBvYnRhaW5cbiAqIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzIHJlZHVjZXJzYCBzeW50YXguIFRoZSByZWR1Y2VycyBtYXkgbmV2ZXIgcmV0dXJuXG4gKiB1bmRlZmluZWQgZm9yIGFueSBhY3Rpb24uIEluc3RlYWQsIHRoZXkgc2hvdWxkIHJldHVybiB0aGVpciBpbml0aWFsIHN0YXRlXG4gKiBpZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZW0gd2FzIHVuZGVmaW5lZCwgYW5kIHRoZSBjdXJyZW50IHN0YXRlIGZvciBhbnlcbiAqIHVucmVjb2duaXplZCBhY3Rpb24uXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHJlZHVjZXIgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGV2ZXJ5IHJlZHVjZXIgaW5zaWRlIHRoZVxuICogcGFzc2VkIG9iamVjdCwgYW5kIGJ1aWxkcyBhIHN0YXRlIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNoYXBlLlxuICovXG5cblxuZnVuY3Rpb24gY29tYmluZVJlZHVjZXJzKHJlZHVjZXJzKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGZpbmFsUmVkdWNlcnMgPSB7fTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZHVjZXJLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IHJlZHVjZXJLZXlzW2ldO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgd2FybmluZyhcIk5vIHJlZHVjZXIgcHJvdmlkZWQgZm9yIGtleSBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBmaW5hbFJlZHVjZXJzW2tleV0gPSByZWR1Y2Vyc1trZXldO1xuICAgIH1cbiAgfVxuXG4gIHZhciBmaW5hbFJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMoZmluYWxSZWR1Y2Vycyk7IC8vIFRoaXMgaXMgdXNlZCB0byBtYWtlIHN1cmUgd2UgZG9uJ3Qgd2FybiBhYm91dCB0aGUgc2FtZVxuICAvLyBrZXlzIG11bHRpcGxlIHRpbWVzLlxuXG4gIHZhciB1bmV4cGVjdGVkS2V5Q2FjaGU7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB1bmV4cGVjdGVkS2V5Q2FjaGUgPSB7fTtcbiAgfVxuXG4gIHZhciBzaGFwZUFzc2VydGlvbkVycm9yO1xuXG4gIHRyeSB7XG4gICAgYXNzZXJ0UmVkdWNlclNoYXBlKGZpbmFsUmVkdWNlcnMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgc2hhcGVBc3NlcnRpb25FcnJvciA9IGU7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gY29tYmluYXRpb24oc3RhdGUsIGFjdGlvbikge1xuICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGF0ZSA9IHt9O1xuICAgIH1cblxuICAgIGlmIChzaGFwZUFzc2VydGlvbkVycm9yKSB7XG4gICAgICB0aHJvdyBzaGFwZUFzc2VydGlvbkVycm9yO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgd2FybmluZ01lc3NhZ2UgPSBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKHN0YXRlLCBmaW5hbFJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSk7XG5cbiAgICAgIGlmICh3YXJuaW5nTWVzc2FnZSkge1xuICAgICAgICB3YXJuaW5nKHdhcm5pbmdNZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaGFzQ2hhbmdlZCA9IGZhbHNlO1xuICAgIHZhciBuZXh0U3RhdGUgPSB7fTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBmaW5hbFJlZHVjZXJLZXlzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9rZXkgPSBmaW5hbFJlZHVjZXJLZXlzW19pXTtcbiAgICAgIHZhciByZWR1Y2VyID0gZmluYWxSZWR1Y2Vyc1tfa2V5XTtcbiAgICAgIHZhciBwcmV2aW91c1N0YXRlRm9yS2V5ID0gc3RhdGVbX2tleV07XG4gICAgICB2YXIgbmV4dFN0YXRlRm9yS2V5ID0gcmVkdWNlcihwcmV2aW91c1N0YXRlRm9yS2V5LCBhY3Rpb24pO1xuXG4gICAgICBpZiAodHlwZW9mIG5leHRTdGF0ZUZvcktleSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdmFyIGVycm9yTWVzc2FnZSA9IGdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlKF9rZXksIGFjdGlvbik7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpO1xuICAgICAgfVxuXG4gICAgICBuZXh0U3RhdGVbX2tleV0gPSBuZXh0U3RhdGVGb3JLZXk7XG4gICAgICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBuZXh0U3RhdGVGb3JLZXkgIT09IHByZXZpb3VzU3RhdGVGb3JLZXk7XG4gICAgfVxuXG4gICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgZmluYWxSZWR1Y2VyS2V5cy5sZW5ndGggIT09IE9iamVjdC5rZXlzKHN0YXRlKS5sZW5ndGg7XG4gICAgcmV0dXJuIGhhc0NoYW5nZWQgPyBuZXh0U3RhdGUgOiBzdGF0ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfTtcbn1cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uIGNyZWF0b3JzLCBpbnRvIGFuIG9iamVjdCB3aXRoIHRoZVxuICogc2FtZSBrZXlzLCBidXQgd2l0aCBldmVyeSBmdW5jdGlvbiB3cmFwcGVkIGludG8gYSBgZGlzcGF0Y2hgIGNhbGwgc28gdGhleVxuICogbWF5IGJlIGludm9rZWQgZGlyZWN0bHkuIFRoaXMgaXMganVzdCBhIGNvbnZlbmllbmNlIG1ldGhvZCwgYXMgeW91IGNhbiBjYWxsXG4gKiBgc3RvcmUuZGlzcGF0Y2goTXlBY3Rpb25DcmVhdG9ycy5kb1NvbWV0aGluZygpKWAgeW91cnNlbGYganVzdCBmaW5lLlxuICpcbiAqIEZvciBjb252ZW5pZW5jZSwgeW91IGNhbiBhbHNvIHBhc3MgYW4gYWN0aW9uIGNyZWF0b3IgYXMgdGhlIGZpcnN0IGFyZ3VtZW50LFxuICogYW5kIGdldCBhIGRpc3BhdGNoIHdyYXBwZWQgZnVuY3Rpb24gaW4gcmV0dXJuLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fSBhY3Rpb25DcmVhdG9ycyBBbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBhY3Rpb25cbiAqIGNyZWF0b3IgZnVuY3Rpb25zLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpbiBpdCBpcyB0byB1c2UgRVM2IGBpbXBvcnQgKiBhc2BcbiAqIHN5bnRheC4gWW91IG1heSBhbHNvIHBhc3MgYSBzaW5nbGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZGlzcGF0Y2ggVGhlIGBkaXNwYXRjaGAgZnVuY3Rpb24gYXZhaWxhYmxlIG9uIHlvdXIgUmVkdXhcbiAqIHN0b3JlLlxuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbnxPYmplY3R9IFRoZSBvYmplY3QgbWltaWNraW5nIHRoZSBvcmlnaW5hbCBvYmplY3QsIGJ1dCB3aXRoXG4gKiBldmVyeSBhY3Rpb24gY3JlYXRvciB3cmFwcGVkIGludG8gdGhlIGBkaXNwYXRjaGAgY2FsbC4gSWYgeW91IHBhc3NlZCBhXG4gKiBmdW5jdGlvbiBhcyBgYWN0aW9uQ3JlYXRvcnNgLCB0aGUgcmV0dXJuIHZhbHVlIHdpbGwgYWxzbyBiZSBhIHNpbmdsZVxuICogZnVuY3Rpb24uXG4gKi9cblxuXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcnMoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKSB7XG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgIT09ICdvYmplY3QnIHx8IGFjdGlvbkNyZWF0b3JzID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiYmluZEFjdGlvbkNyZWF0b3JzIGV4cGVjdGVkIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uLCBpbnN0ZWFkIHJlY2VpdmVkIFwiICsgKGFjdGlvbkNyZWF0b3JzID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIGFjdGlvbkNyZWF0b3JzKSArIFwiLiBcIiArIFwiRGlkIHlvdSB3cml0ZSBcXFwiaW1wb3J0IEFjdGlvbkNyZWF0b3JzIGZyb21cXFwiIGluc3RlYWQgb2YgXFxcImltcG9ydCAqIGFzIEFjdGlvbkNyZWF0b3JzIGZyb21cXFwiP1wiKTtcbiAgfVxuXG4gIHZhciBib3VuZEFjdGlvbkNyZWF0b3JzID0ge307XG5cbiAgZm9yICh2YXIga2V5IGluIGFjdGlvbkNyZWF0b3JzKSB7XG4gICAgdmFyIGFjdGlvbkNyZWF0b3IgPSBhY3Rpb25DcmVhdG9yc1trZXldO1xuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBib3VuZEFjdGlvbkNyZWF0b3JzW2tleV0gPSBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJvdW5kQWN0aW9uQ3JlYXRvcnM7XG59XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KSk7XG4gIH1cblxuICBpZiAoZW51bWVyYWJsZU9ubHkpIGtleXMgPSBrZXlzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7XG4gIH0pO1xuICByZXR1cm4ga2V5cztcbn1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZDIodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XG5cbiAgICBpZiAoaSAlIDIpIHtcbiAgICAgIG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuLyoqXG4gKiBDb21wb3NlcyBzaW5nbGUtYXJndW1lbnQgZnVuY3Rpb25zIGZyb20gcmlnaHQgdG8gbGVmdC4gVGhlIHJpZ2h0bW9zdFxuICogZnVuY3Rpb24gY2FuIHRha2UgbXVsdGlwbGUgYXJndW1lbnRzIGFzIGl0IHByb3ZpZGVzIHRoZSBzaWduYXR1cmUgZm9yXG4gKiB0aGUgcmVzdWx0aW5nIGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBmdW5jcyBUaGUgZnVuY3Rpb25zIHRvIGNvbXBvc2UuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gb2J0YWluZWQgYnkgY29tcG9zaW5nIHRoZSBhcmd1bWVudCBmdW5jdGlvbnNcbiAqIGZyb20gcmlnaHQgdG8gbGVmdC4gRm9yIGV4YW1wbGUsIGNvbXBvc2UoZiwgZywgaCkgaXMgaWRlbnRpY2FsIHRvIGRvaW5nXG4gKiAoLi4uYXJncykgPT4gZihnKGgoLi4uYXJncykpKS5cbiAqL1xuZnVuY3Rpb24gY29tcG9zZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZ1bmNzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGZ1bmNzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICByZXR1cm4gYXJnO1xuICAgIH07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGZ1bmNzWzBdO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmNzLnJlZHVjZShmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gYShiLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKSk7XG4gICAgfTtcbiAgfSk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN0b3JlIGVuaGFuY2VyIHRoYXQgYXBwbGllcyBtaWRkbGV3YXJlIHRvIHRoZSBkaXNwYXRjaCBtZXRob2RcbiAqIG9mIHRoZSBSZWR1eCBzdG9yZS4gVGhpcyBpcyBoYW5keSBmb3IgYSB2YXJpZXR5IG9mIHRhc2tzLCBzdWNoIGFzIGV4cHJlc3NpbmdcbiAqIGFzeW5jaHJvbm91cyBhY3Rpb25zIGluIGEgY29uY2lzZSBtYW5uZXIsIG9yIGxvZ2dpbmcgZXZlcnkgYWN0aW9uIHBheWxvYWQuXG4gKlxuICogU2VlIGByZWR1eC10aHVua2AgcGFja2FnZSBhcyBhbiBleGFtcGxlIG9mIHRoZSBSZWR1eCBtaWRkbGV3YXJlLlxuICpcbiAqIEJlY2F1c2UgbWlkZGxld2FyZSBpcyBwb3RlbnRpYWxseSBhc3luY2hyb25vdXMsIHRoaXMgc2hvdWxkIGJlIHRoZSBmaXJzdFxuICogc3RvcmUgZW5oYW5jZXIgaW4gdGhlIGNvbXBvc2l0aW9uIGNoYWluLlxuICpcbiAqIE5vdGUgdGhhdCBlYWNoIG1pZGRsZXdhcmUgd2lsbCBiZSBnaXZlbiB0aGUgYGRpc3BhdGNoYCBhbmQgYGdldFN0YXRlYCBmdW5jdGlvbnNcbiAqIGFzIG5hbWVkIGFyZ3VtZW50cy5cbiAqXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBtaWRkbGV3YXJlcyBUaGUgbWlkZGxld2FyZSBjaGFpbiB0byBiZSBhcHBsaWVkLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHN0b3JlIGVuaGFuY2VyIGFwcGx5aW5nIHRoZSBtaWRkbGV3YXJlLlxuICovXG5cbmZ1bmN0aW9uIGFwcGx5TWlkZGxld2FyZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIG1pZGRsZXdhcmVzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIG1pZGRsZXdhcmVzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChjcmVhdGVTdG9yZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc3RvcmUgPSBjcmVhdGVTdG9yZS5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG5cbiAgICAgIHZhciBfZGlzcGF0Y2ggPSBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEaXNwYXRjaGluZyB3aGlsZSBjb25zdHJ1Y3RpbmcgeW91ciBtaWRkbGV3YXJlIGlzIG5vdCBhbGxvd2VkLiAnICsgJ090aGVyIG1pZGRsZXdhcmUgd291bGQgbm90IGJlIGFwcGxpZWQgdG8gdGhpcyBkaXNwYXRjaC4nKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBtaWRkbGV3YXJlQVBJID0ge1xuICAgICAgICBnZXRTdGF0ZTogc3RvcmUuZ2V0U3RhdGUsXG4gICAgICAgIGRpc3BhdGNoOiBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICAgICAgICByZXR1cm4gX2Rpc3BhdGNoLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHZhciBjaGFpbiA9IG1pZGRsZXdhcmVzLm1hcChmdW5jdGlvbiAobWlkZGxld2FyZSkge1xuICAgICAgICByZXR1cm4gbWlkZGxld2FyZShtaWRkbGV3YXJlQVBJKTtcbiAgICAgIH0pO1xuICAgICAgX2Rpc3BhdGNoID0gY29tcG9zZS5hcHBseSh2b2lkIDAsIGNoYWluKShzdG9yZS5kaXNwYXRjaCk7XG4gICAgICByZXR1cm4gX29iamVjdFNwcmVhZDIoe30sIHN0b3JlLCB7XG4gICAgICAgIGRpc3BhdGNoOiBfZGlzcGF0Y2hcbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG59XG5cbi8qXG4gKiBUaGlzIGlzIGEgZHVtbXkgZnVuY3Rpb24gdG8gY2hlY2sgaWYgdGhlIGZ1bmN0aW9uIG5hbWUgaGFzIGJlZW4gYWx0ZXJlZCBieSBtaW5pZmljYXRpb24uXG4gKiBJZiB0aGUgZnVuY3Rpb24gaGFzIGJlZW4gbWluaWZpZWQgYW5kIE5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsIHdhcm4gdGhlIHVzZXIuXG4gKi9cblxuZnVuY3Rpb24gaXNDcnVzaGVkKCkge31cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIGlzQ3J1c2hlZC5uYW1lID09PSAnc3RyaW5nJyAmJiBpc0NydXNoZWQubmFtZSAhPT0gJ2lzQ3J1c2hlZCcpIHtcbiAgd2FybmluZygnWW91IGFyZSBjdXJyZW50bHkgdXNpbmcgbWluaWZpZWQgY29kZSBvdXRzaWRlIG9mIE5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIi4gJyArICdUaGlzIG1lYW5zIHRoYXQgeW91IGFyZSBydW5uaW5nIGEgc2xvd2VyIGRldmVsb3BtZW50IGJ1aWxkIG9mIFJlZHV4LiAnICsgJ1lvdSBjYW4gdXNlIGxvb3NlLWVudmlmeSAoaHR0cHM6Ly9naXRodWIuY29tL3plcnRvc2gvbG9vc2UtZW52aWZ5KSBmb3IgYnJvd3NlcmlmeSAnICsgJ29yIHNldHRpbmcgbW9kZSB0byBwcm9kdWN0aW9uIGluIHdlYnBhY2sgKGh0dHBzOi8vd2VicGFjay5qcy5vcmcvY29uY2VwdHMvbW9kZS8pICcgKyAndG8gZW5zdXJlIHlvdSBoYXZlIHRoZSBjb3JyZWN0IGNvZGUgZm9yIHlvdXIgcHJvZHVjdGlvbiBidWlsZC4nKTtcbn1cblxuZXhwb3J0IHsgQWN0aW9uVHlwZXMgYXMgX19ET19OT1RfVVNFX19BY3Rpb25UeXBlcywgYXBwbHlNaWRkbGV3YXJlLCBiaW5kQWN0aW9uQ3JlYXRvcnMsIGNvbWJpbmVSZWR1Y2VycywgY29tcG9zZSwgY3JlYXRlU3RvcmUgfTtcbiIsImltcG9ydCB2ZXJpZnlQbGFpbk9iamVjdCBmcm9tICcuLi91dGlscy92ZXJpZnlQbGFpbk9iamVjdCc7XG5leHBvcnQgZnVuY3Rpb24gd3JhcE1hcFRvUHJvcHNDb25zdGFudChnZXRDb25zdGFudCkge1xuICByZXR1cm4gZnVuY3Rpb24gaW5pdENvbnN0YW50U2VsZWN0b3IoZGlzcGF0Y2gsIG9wdGlvbnMpIHtcbiAgICB2YXIgY29uc3RhbnQgPSBnZXRDb25zdGFudChkaXNwYXRjaCwgb3B0aW9ucyk7XG5cbiAgICBmdW5jdGlvbiBjb25zdGFudFNlbGVjdG9yKCkge1xuICAgICAgcmV0dXJuIGNvbnN0YW50O1xuICAgIH1cblxuICAgIGNvbnN0YW50U2VsZWN0b3IuZGVwZW5kc09uT3duUHJvcHMgPSBmYWxzZTtcbiAgICByZXR1cm4gY29uc3RhbnRTZWxlY3RvcjtcbiAgfTtcbn0gLy8gZGVwZW5kc09uT3duUHJvcHMgaXMgdXNlZCBieSBjcmVhdGVNYXBUb1Byb3BzUHJveHkgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdG8gcGFzcyBwcm9wcyBhcyBhcmdzXG4vLyB0byB0aGUgbWFwVG9Qcm9wcyBmdW5jdGlvbiBiZWluZyB3cmFwcGVkLiBJdCBpcyBhbHNvIHVzZWQgYnkgbWFrZVB1cmVQcm9wc1NlbGVjdG9yIHRvIGRldGVybWluZVxuLy8gd2hldGhlciBtYXBUb1Byb3BzIG5lZWRzIHRvIGJlIGludm9rZWQgd2hlbiBwcm9wcyBoYXZlIGNoYW5nZWQuXG4vL1xuLy8gQSBsZW5ndGggb2Ygb25lIHNpZ25hbHMgdGhhdCBtYXBUb1Byb3BzIGRvZXMgbm90IGRlcGVuZCBvbiBwcm9wcyBmcm9tIHRoZSBwYXJlbnQgY29tcG9uZW50LlxuLy8gQSBsZW5ndGggb2YgemVybyBpcyBhc3N1bWVkIHRvIG1lYW4gbWFwVG9Qcm9wcyBpcyBnZXR0aW5nIGFyZ3MgdmlhIGFyZ3VtZW50cyBvciAuLi5hcmdzIGFuZFxuLy8gdGhlcmVmb3JlIG5vdCByZXBvcnRpbmcgaXRzIGxlbmd0aCBhY2N1cmF0ZWx5Li5cblxuZXhwb3J0IGZ1bmN0aW9uIGdldERlcGVuZHNPbk93blByb3BzKG1hcFRvUHJvcHMpIHtcbiAgcmV0dXJuIG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMgIT09IG51bGwgJiYgbWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcyAhPT0gdW5kZWZpbmVkID8gQm9vbGVhbihtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSA6IG1hcFRvUHJvcHMubGVuZ3RoICE9PSAxO1xufSAvLyBVc2VkIGJ5IHdoZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uIGFuZCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbixcbi8vIHRoaXMgZnVuY3Rpb24gd3JhcHMgbWFwVG9Qcm9wcyBpbiBhIHByb3h5IGZ1bmN0aW9uIHdoaWNoIGRvZXMgc2V2ZXJhbCB0aGluZ3M6XG4vL1xuLy8gICogRGV0ZWN0cyB3aGV0aGVyIHRoZSBtYXBUb1Byb3BzIGZ1bmN0aW9uIGJlaW5nIGNhbGxlZCBkZXBlbmRzIG9uIHByb3BzLCB3aGljaFxuLy8gICAgaXMgdXNlZCBieSBzZWxlY3RvckZhY3RvcnkgdG8gZGVjaWRlIGlmIGl0IHNob3VsZCByZWludm9rZSBvbiBwcm9wcyBjaGFuZ2VzLlxuLy9cbi8vICAqIE9uIGZpcnN0IGNhbGwsIGhhbmRsZXMgbWFwVG9Qcm9wcyBpZiByZXR1cm5zIGFub3RoZXIgZnVuY3Rpb24sIGFuZCB0cmVhdHMgdGhhdFxuLy8gICAgbmV3IGZ1bmN0aW9uIGFzIHRoZSB0cnVlIG1hcFRvUHJvcHMgZm9yIHN1YnNlcXVlbnQgY2FsbHMuXG4vL1xuLy8gICogT24gZmlyc3QgY2FsbCwgdmVyaWZpZXMgdGhlIGZpcnN0IHJlc3VsdCBpcyBhIHBsYWluIG9iamVjdCwgaW4gb3JkZXIgdG8gd2FyblxuLy8gICAgdGhlIGRldmVsb3BlciB0aGF0IHRoZWlyIG1hcFRvUHJvcHMgZnVuY3Rpb24gaXMgbm90IHJldHVybmluZyBhIHZhbGlkIHJlc3VsdC5cbi8vXG5cbmV4cG9ydCBmdW5jdGlvbiB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwVG9Qcm9wcywgbWV0aG9kTmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24gaW5pdFByb3h5U2VsZWN0b3IoZGlzcGF0Y2gsIF9yZWYpIHtcbiAgICB2YXIgZGlzcGxheU5hbWUgPSBfcmVmLmRpc3BsYXlOYW1lO1xuXG4gICAgdmFyIHByb3h5ID0gZnVuY3Rpb24gbWFwVG9Qcm9wc1Byb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIHtcbiAgICAgIHJldHVybiBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA/IHByb3h5Lm1hcFRvUHJvcHMoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykgOiBwcm94eS5tYXBUb1Byb3BzKHN0YXRlT3JEaXNwYXRjaCk7XG4gICAgfTsgLy8gYWxsb3cgZGV0ZWN0RmFjdG9yeUFuZFZlcmlmeSB0byBnZXQgb3duUHJvcHNcblxuXG4gICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSB0cnVlO1xuXG4gICAgcHJveHkubWFwVG9Qcm9wcyA9IGZ1bmN0aW9uIGRldGVjdEZhY3RvcnlBbmRWZXJpZnkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcykge1xuICAgICAgcHJveHkubWFwVG9Qcm9wcyA9IG1hcFRvUHJvcHM7XG4gICAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IGdldERlcGVuZHNPbk93blByb3BzKG1hcFRvUHJvcHMpO1xuICAgICAgdmFyIHByb3BzID0gcHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcyk7XG5cbiAgICAgIGlmICh0eXBlb2YgcHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcHJveHkubWFwVG9Qcm9wcyA9IHByb3BzO1xuICAgICAgICBwcm94eS5kZXBlbmRzT25Pd25Qcm9wcyA9IGdldERlcGVuZHNPbk93blByb3BzKHByb3BzKTtcbiAgICAgICAgcHJvcHMgPSBwcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHZlcmlmeVBsYWluT2JqZWN0KHByb3BzLCBkaXNwbGF5TmFtZSwgbWV0aG9kTmFtZSk7XG4gICAgICByZXR1cm4gcHJvcHM7XG4gICAgfTtcblxuICAgIHJldHVybiBwcm94eTtcbiAgfTtcbn0iLCJpbXBvcnQgeyBiaW5kQWN0aW9uQ3JlYXRvcnMgfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgeyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50LCB3cmFwTWFwVG9Qcm9wc0Z1bmMgfSBmcm9tICcuL3dyYXBNYXBUb1Byb3BzJztcbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbihtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuIHR5cGVvZiBtYXBEaXNwYXRjaFRvUHJvcHMgPT09ICdmdW5jdGlvbicgPyB3cmFwTWFwVG9Qcm9wc0Z1bmMobWFwRGlzcGF0Y2hUb1Byb3BzLCAnbWFwRGlzcGF0Y2hUb1Byb3BzJykgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gd2hlbk1hcERpc3BhdGNoVG9Qcm9wc0lzTWlzc2luZyhtYXBEaXNwYXRjaFRvUHJvcHMpIHtcbiAgcmV0dXJuICFtYXBEaXNwYXRjaFRvUHJvcHMgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGZ1bmN0aW9uIChkaXNwYXRjaCkge1xuICAgIHJldHVybiB7XG4gICAgICBkaXNwYXRjaDogZGlzcGF0Y2hcbiAgICB9O1xuICB9KSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNPYmplY3QobWFwRGlzcGF0Y2hUb1Byb3BzKSB7XG4gIHJldHVybiBtYXBEaXNwYXRjaFRvUHJvcHMgJiYgdHlwZW9mIG1hcERpc3BhdGNoVG9Qcm9wcyA9PT0gJ29iamVjdCcgPyB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGZ1bmN0aW9uIChkaXNwYXRjaCkge1xuICAgIHJldHVybiBiaW5kQWN0aW9uQ3JlYXRvcnMobWFwRGlzcGF0Y2hUb1Byb3BzLCBkaXNwYXRjaCk7XG4gIH0pIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGRlZmF1bHQgW3doZW5NYXBEaXNwYXRjaFRvUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNNaXNzaW5nLCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNPYmplY3RdOyIsImltcG9ydCB7IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQsIHdyYXBNYXBUb1Byb3BzRnVuYyB9IGZyb20gJy4vd3JhcE1hcFRvUHJvcHMnO1xuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uKG1hcFN0YXRlVG9Qcm9wcykge1xuICByZXR1cm4gdHlwZW9mIG1hcFN0YXRlVG9Qcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNYXBUb1Byb3BzRnVuYyhtYXBTdGF0ZVRvUHJvcHMsICdtYXBTdGF0ZVRvUHJvcHMnKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWFwU3RhdGVUb1Byb3BzSXNNaXNzaW5nKG1hcFN0YXRlVG9Qcm9wcykge1xuICByZXR1cm4gIW1hcFN0YXRlVG9Qcm9wcyA/IHdyYXBNYXBUb1Byb3BzQ29uc3RhbnQoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7fTtcbiAgfSkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZGVmYXVsdCBbd2hlbk1hcFN0YXRlVG9Qcm9wc0lzRnVuY3Rpb24sIHdoZW5NYXBTdGF0ZVRvUHJvcHNJc01pc3NpbmddOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IHZlcmlmeVBsYWluT2JqZWN0IGZyb20gJy4uL3V0aWxzL3ZlcmlmeVBsYWluT2JqZWN0JztcbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0TWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcykge1xuICByZXR1cm4gX2V4dGVuZHMoe30sIG93blByb3BzLCB7fSwgc3RhdGVQcm9wcywge30sIGRpc3BhdGNoUHJvcHMpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdyYXBNZXJnZVByb3BzRnVuYyhtZXJnZVByb3BzKSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0TWVyZ2VQcm9wc1Byb3h5KGRpc3BhdGNoLCBfcmVmKSB7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gX3JlZi5kaXNwbGF5TmFtZSxcbiAgICAgICAgcHVyZSA9IF9yZWYucHVyZSxcbiAgICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbCA9IF9yZWYuYXJlTWVyZ2VkUHJvcHNFcXVhbDtcbiAgICB2YXIgaGFzUnVuT25jZSA9IGZhbHNlO1xuICAgIHZhciBtZXJnZWRQcm9wcztcbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VQcm9wc1Byb3h5KHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKSB7XG4gICAgICB2YXIgbmV4dE1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG5cbiAgICAgIGlmIChoYXNSdW5PbmNlKSB7XG4gICAgICAgIGlmICghcHVyZSB8fCAhYXJlTWVyZ2VkUHJvcHNFcXVhbChuZXh0TWVyZ2VkUHJvcHMsIG1lcmdlZFByb3BzKSkgbWVyZ2VkUHJvcHMgPSBuZXh0TWVyZ2VkUHJvcHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBoYXNSdW5PbmNlID0gdHJ1ZTtcbiAgICAgICAgbWVyZ2VkUHJvcHMgPSBuZXh0TWVyZ2VkUHJvcHM7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB2ZXJpZnlQbGFpbk9iamVjdChtZXJnZWRQcm9wcywgZGlzcGxheU5hbWUsICdtZXJnZVByb3BzJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgICB9O1xuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5NZXJnZVByb3BzSXNGdW5jdGlvbihtZXJnZVByb3BzKSB7XG4gIHJldHVybiB0eXBlb2YgbWVyZ2VQcm9wcyA9PT0gJ2Z1bmN0aW9uJyA/IHdyYXBNZXJnZVByb3BzRnVuYyhtZXJnZVByb3BzKSA6IHVuZGVmaW5lZDtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aGVuTWVyZ2VQcm9wc0lzT21pdHRlZChtZXJnZVByb3BzKSB7XG4gIHJldHVybiAhbWVyZ2VQcm9wcyA/IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGVmYXVsdE1lcmdlUHJvcHM7XG4gIH0gOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZGVmYXVsdCBbd2hlbk1lcmdlUHJvcHNJc0Z1bmN0aW9uLCB3aGVuTWVyZ2VQcm9wc0lzT21pdHRlZF07IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgdmVyaWZ5U3Vic2VsZWN0b3JzIGZyb20gJy4vdmVyaWZ5U3Vic2VsZWN0b3JzJztcbmV4cG9ydCBmdW5jdGlvbiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCkge1xuICByZXR1cm4gZnVuY3Rpb24gaW1wdXJlRmluYWxQcm9wc1NlbGVjdG9yKHN0YXRlLCBvd25Qcm9wcykge1xuICAgIHJldHVybiBtZXJnZVByb3BzKG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpLCBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKSwgb3duUHJvcHMpO1xuICB9O1xufVxuZXhwb3J0IGZ1bmN0aW9uIHB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCwgX3JlZikge1xuICB2YXIgYXJlU3RhdGVzRXF1YWwgPSBfcmVmLmFyZVN0YXRlc0VxdWFsLFxuICAgICAgYXJlT3duUHJvcHNFcXVhbCA9IF9yZWYuYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbCA9IF9yZWYuYXJlU3RhdGVQcm9wc0VxdWFsO1xuICB2YXIgaGFzUnVuQXRMZWFzdE9uY2UgPSBmYWxzZTtcbiAgdmFyIHN0YXRlO1xuICB2YXIgb3duUHJvcHM7XG4gIHZhciBzdGF0ZVByb3BzO1xuICB2YXIgZGlzcGF0Y2hQcm9wcztcbiAgdmFyIG1lcmdlZFByb3BzO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZUZpcnN0Q2FsbChmaXJzdFN0YXRlLCBmaXJzdE93blByb3BzKSB7XG4gICAgc3RhdGUgPSBmaXJzdFN0YXRlO1xuICAgIG93blByb3BzID0gZmlyc3RPd25Qcm9wcztcbiAgICBzdGF0ZVByb3BzID0gbWFwU3RhdGVUb1Byb3BzKHN0YXRlLCBvd25Qcm9wcyk7XG4gICAgZGlzcGF0Y2hQcm9wcyA9IG1hcERpc3BhdGNoVG9Qcm9wcyhkaXNwYXRjaCwgb3duUHJvcHMpO1xuICAgIG1lcmdlZFByb3BzID0gbWVyZ2VQcm9wcyhzdGF0ZVByb3BzLCBkaXNwYXRjaFByb3BzLCBvd25Qcm9wcyk7XG4gICAgaGFzUnVuQXRMZWFzdE9uY2UgPSB0cnVlO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1Byb3BzQW5kTmV3U3RhdGUoKSB7XG4gICAgc3RhdGVQcm9wcyA9IG1hcFN0YXRlVG9Qcm9wcyhzdGF0ZSwgb3duUHJvcHMpO1xuICAgIGlmIChtYXBEaXNwYXRjaFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIGRpc3BhdGNoUHJvcHMgPSBtYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG93blByb3BzKTtcbiAgICBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU5ld1Byb3BzKCkge1xuICAgIGlmIChtYXBTdGF0ZVRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMpIHN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICBpZiAobWFwRGlzcGF0Y2hUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSBkaXNwYXRjaFByb3BzID0gbWFwRGlzcGF0Y2hUb1Byb3BzKGRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgbWVyZ2VkUHJvcHMgPSBtZXJnZVByb3BzKHN0YXRlUHJvcHMsIGRpc3BhdGNoUHJvcHMsIG93blByb3BzKTtcbiAgICByZXR1cm4gbWVyZ2VkUHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVOZXdTdGF0ZSgpIHtcbiAgICB2YXIgbmV4dFN0YXRlUHJvcHMgPSBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUsIG93blByb3BzKTtcbiAgICB2YXIgc3RhdGVQcm9wc0NoYW5nZWQgPSAhYXJlU3RhdGVQcm9wc0VxdWFsKG5leHRTdGF0ZVByb3BzLCBzdGF0ZVByb3BzKTtcbiAgICBzdGF0ZVByb3BzID0gbmV4dFN0YXRlUHJvcHM7XG4gICAgaWYgKHN0YXRlUHJvcHNDaGFuZ2VkKSBtZXJnZWRQcm9wcyA9IG1lcmdlUHJvcHMoc3RhdGVQcm9wcywgZGlzcGF0Y2hQcm9wcywgb3duUHJvcHMpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVN1YnNlcXVlbnRDYWxscyhuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykge1xuICAgIHZhciBwcm9wc0NoYW5nZWQgPSAhYXJlT3duUHJvcHNFcXVhbChuZXh0T3duUHJvcHMsIG93blByb3BzKTtcbiAgICB2YXIgc3RhdGVDaGFuZ2VkID0gIWFyZVN0YXRlc0VxdWFsKG5leHRTdGF0ZSwgc3RhdGUpO1xuICAgIHN0YXRlID0gbmV4dFN0YXRlO1xuICAgIG93blByb3BzID0gbmV4dE93blByb3BzO1xuICAgIGlmIChwcm9wc0NoYW5nZWQgJiYgc3RhdGVDaGFuZ2VkKSByZXR1cm4gaGFuZGxlTmV3UHJvcHNBbmROZXdTdGF0ZSgpO1xuICAgIGlmIChwcm9wc0NoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdQcm9wcygpO1xuICAgIGlmIChzdGF0ZUNoYW5nZWQpIHJldHVybiBoYW5kbGVOZXdTdGF0ZSgpO1xuICAgIHJldHVybiBtZXJnZWRQcm9wcztcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBwdXJlRmluYWxQcm9wc1NlbGVjdG9yKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSB7XG4gICAgcmV0dXJuIGhhc1J1bkF0TGVhc3RPbmNlID8gaGFuZGxlU3Vic2VxdWVudENhbGxzKG5leHRTdGF0ZSwgbmV4dE93blByb3BzKSA6IGhhbmRsZUZpcnN0Q2FsbChuZXh0U3RhdGUsIG5leHRPd25Qcm9wcyk7XG4gIH07XG59IC8vIFRPRE86IEFkZCBtb3JlIGNvbW1lbnRzXG4vLyBJZiBwdXJlIGlzIHRydWUsIHRoZSBzZWxlY3RvciByZXR1cm5lZCBieSBzZWxlY3RvckZhY3Rvcnkgd2lsbCBtZW1vaXplIGl0cyByZXN1bHRzLFxuLy8gYWxsb3dpbmcgY29ubmVjdEFkdmFuY2VkJ3Mgc2hvdWxkQ29tcG9uZW50VXBkYXRlIHRvIHJldHVybiBmYWxzZSBpZiBmaW5hbFxuLy8gcHJvcHMgaGF2ZSBub3QgY2hhbmdlZC4gSWYgZmFsc2UsIHRoZSBzZWxlY3RvciB3aWxsIGFsd2F5cyByZXR1cm4gYSBuZXdcbi8vIG9iamVjdCBhbmQgc2hvdWxkQ29tcG9uZW50VXBkYXRlIHdpbGwgYWx3YXlzIHJldHVybiB0cnVlLlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5KGRpc3BhdGNoLCBfcmVmMikge1xuICB2YXIgaW5pdE1hcFN0YXRlVG9Qcm9wcyA9IF9yZWYyLmluaXRNYXBTdGF0ZVRvUHJvcHMsXG4gICAgICBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzID0gX3JlZjIuaW5pdE1hcERpc3BhdGNoVG9Qcm9wcyxcbiAgICAgIGluaXRNZXJnZVByb3BzID0gX3JlZjIuaW5pdE1lcmdlUHJvcHMsXG4gICAgICBvcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjIsIFtcImluaXRNYXBTdGF0ZVRvUHJvcHNcIiwgXCJpbml0TWFwRGlzcGF0Y2hUb1Byb3BzXCIsIFwiaW5pdE1lcmdlUHJvcHNcIl0pO1xuXG4gIHZhciBtYXBTdGF0ZVRvUHJvcHMgPSBpbml0TWFwU3RhdGVUb1Byb3BzKGRpc3BhdGNoLCBvcHRpb25zKTtcbiAgdmFyIG1hcERpc3BhdGNoVG9Qcm9wcyA9IGluaXRNYXBEaXNwYXRjaFRvUHJvcHMoZGlzcGF0Y2gsIG9wdGlvbnMpO1xuICB2YXIgbWVyZ2VQcm9wcyA9IGluaXRNZXJnZVByb3BzKGRpc3BhdGNoLCBvcHRpb25zKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZlcmlmeVN1YnNlbGVjdG9ycyhtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWVyZ2VQcm9wcywgb3B0aW9ucy5kaXNwbGF5TmFtZSk7XG4gIH1cblxuICB2YXIgc2VsZWN0b3JGYWN0b3J5ID0gb3B0aW9ucy5wdXJlID8gcHVyZUZpbmFsUHJvcHNTZWxlY3RvckZhY3RvcnkgOiBpbXB1cmVGaW5hbFByb3BzU2VsZWN0b3JGYWN0b3J5O1xuICByZXR1cm4gc2VsZWN0b3JGYWN0b3J5KG1hcFN0YXRlVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzLCBtZXJnZVByb3BzLCBkaXNwYXRjaCwgb3B0aW9ucyk7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBjb25uZWN0QWR2YW5jZWQgZnJvbSAnLi4vY29tcG9uZW50cy9jb25uZWN0QWR2YW5jZWQnO1xuaW1wb3J0IHNoYWxsb3dFcXVhbCBmcm9tICcuLi91dGlscy9zaGFsbG93RXF1YWwnO1xuaW1wb3J0IGRlZmF1bHRNYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tYXBEaXNwYXRjaFRvUHJvcHMnO1xuaW1wb3J0IGRlZmF1bHRNYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgZnJvbSAnLi9tYXBTdGF0ZVRvUHJvcHMnO1xuaW1wb3J0IGRlZmF1bHRNZXJnZVByb3BzRmFjdG9yaWVzIGZyb20gJy4vbWVyZ2VQcm9wcyc7XG5pbXBvcnQgZGVmYXVsdFNlbGVjdG9yRmFjdG9yeSBmcm9tICcuL3NlbGVjdG9yRmFjdG9yeSc7XG4vKlxyXG4gIGNvbm5lY3QgaXMgYSBmYWNhZGUgb3ZlciBjb25uZWN0QWR2YW5jZWQuIEl0IHR1cm5zIGl0cyBhcmdzIGludG8gYSBjb21wYXRpYmxlXHJcbiAgc2VsZWN0b3JGYWN0b3J5LCB3aGljaCBoYXMgdGhlIHNpZ25hdHVyZTpcclxuXHJcbiAgICAoZGlzcGF0Y2gsIG9wdGlvbnMpID0+IChuZXh0U3RhdGUsIG5leHRPd25Qcm9wcykgPT4gbmV4dEZpbmFsUHJvcHNcclxuICBcclxuICBjb25uZWN0IHBhc3NlcyBpdHMgYXJncyB0byBjb25uZWN0QWR2YW5jZWQgYXMgb3B0aW9ucywgd2hpY2ggd2lsbCBpbiB0dXJuIHBhc3MgdGhlbSB0b1xyXG4gIHNlbGVjdG9yRmFjdG9yeSBlYWNoIHRpbWUgYSBDb25uZWN0IGNvbXBvbmVudCBpbnN0YW5jZSBpcyBpbnN0YW50aWF0ZWQgb3IgaG90IHJlbG9hZGVkLlxyXG5cclxuICBzZWxlY3RvckZhY3RvcnkgcmV0dXJucyBhIGZpbmFsIHByb3BzIHNlbGVjdG9yIGZyb20gaXRzIG1hcFN0YXRlVG9Qcm9wcyxcclxuICBtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMsIG1hcERpc3BhdGNoVG9Qcm9wcywgbWFwRGlzcGF0Y2hUb1Byb3BzRmFjdG9yaWVzLCBtZXJnZVByb3BzLFxyXG4gIG1lcmdlUHJvcHNGYWN0b3JpZXMsIGFuZCBwdXJlIGFyZ3MuXHJcblxyXG4gIFRoZSByZXN1bHRpbmcgZmluYWwgcHJvcHMgc2VsZWN0b3IgaXMgY2FsbGVkIGJ5IHRoZSBDb25uZWN0IGNvbXBvbmVudCBpbnN0YW5jZSB3aGVuZXZlclxyXG4gIGl0IHJlY2VpdmVzIG5ldyBwcm9wcyBvciBzdG9yZSBzdGF0ZS5cclxuICovXG5cbmZ1bmN0aW9uIG1hdGNoKGFyZywgZmFjdG9yaWVzLCBuYW1lKSB7XG4gIGZvciAodmFyIGkgPSBmYWN0b3JpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgcmVzdWx0ID0gZmFjdG9yaWVzW2ldKGFyZyk7XG4gICAgaWYgKHJlc3VsdCkgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoZGlzcGF0Y2gsIG9wdGlvbnMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHZhbHVlIG9mIHR5cGUgXCIgKyB0eXBlb2YgYXJnICsgXCIgZm9yIFwiICsgbmFtZSArIFwiIGFyZ3VtZW50IHdoZW4gY29ubmVjdGluZyBjb21wb25lbnQgXCIgKyBvcHRpb25zLndyYXBwZWRDb21wb25lbnROYW1lICsgXCIuXCIpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHJpY3RFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhID09PSBiO1xufSAvLyBjcmVhdGVDb25uZWN0IHdpdGggZGVmYXVsdCBhcmdzIGJ1aWxkcyB0aGUgJ29mZmljaWFsJyBjb25uZWN0IGJlaGF2aW9yLiBDYWxsaW5nIGl0IHdpdGhcbi8vIGRpZmZlcmVudCBvcHRpb25zIG9wZW5zIHVwIHNvbWUgdGVzdGluZyBhbmQgZXh0ZW5zaWJpbGl0eSBzY2VuYXJpb3NcblxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29ubmVjdChfdGVtcCkge1xuICB2YXIgX3JlZiA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wLFxuICAgICAgX3JlZiRjb25uZWN0SE9DID0gX3JlZi5jb25uZWN0SE9DLFxuICAgICAgY29ubmVjdEhPQyA9IF9yZWYkY29ubmVjdEhPQyA9PT0gdm9pZCAwID8gY29ubmVjdEFkdmFuY2VkIDogX3JlZiRjb25uZWN0SE9DLFxuICAgICAgX3JlZiRtYXBTdGF0ZVRvUHJvcHNGID0gX3JlZi5tYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMsXG4gICAgICBtYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgPSBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YgPT09IHZvaWQgMCA/IGRlZmF1bHRNYXBTdGF0ZVRvUHJvcHNGYWN0b3JpZXMgOiBfcmVmJG1hcFN0YXRlVG9Qcm9wc0YsXG4gICAgICBfcmVmJG1hcERpc3BhdGNoVG9Qcm8gPSBfcmVmLm1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyA9IF9yZWYkbWFwRGlzcGF0Y2hUb1BybyA9PT0gdm9pZCAwID8gZGVmYXVsdE1hcERpc3BhdGNoVG9Qcm9wc0ZhY3RvcmllcyA6IF9yZWYkbWFwRGlzcGF0Y2hUb1BybyxcbiAgICAgIF9yZWYkbWVyZ2VQcm9wc0ZhY3RvciA9IF9yZWYubWVyZ2VQcm9wc0ZhY3RvcmllcyxcbiAgICAgIG1lcmdlUHJvcHNGYWN0b3JpZXMgPSBfcmVmJG1lcmdlUHJvcHNGYWN0b3IgPT09IHZvaWQgMCA/IGRlZmF1bHRNZXJnZVByb3BzRmFjdG9yaWVzIDogX3JlZiRtZXJnZVByb3BzRmFjdG9yLFxuICAgICAgX3JlZiRzZWxlY3RvckZhY3RvcnkgPSBfcmVmLnNlbGVjdG9yRmFjdG9yeSxcbiAgICAgIHNlbGVjdG9yRmFjdG9yeSA9IF9yZWYkc2VsZWN0b3JGYWN0b3J5ID09PSB2b2lkIDAgPyBkZWZhdWx0U2VsZWN0b3JGYWN0b3J5IDogX3JlZiRzZWxlY3RvckZhY3Rvcnk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHMsIG1lcmdlUHJvcHMsIF9yZWYyKSB7XG4gICAgaWYgKF9yZWYyID09PSB2b2lkIDApIHtcbiAgICAgIF9yZWYyID0ge307XG4gICAgfVxuXG4gICAgdmFyIF9yZWYzID0gX3JlZjIsXG4gICAgICAgIF9yZWYzJHB1cmUgPSBfcmVmMy5wdXJlLFxuICAgICAgICBwdXJlID0gX3JlZjMkcHVyZSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9yZWYzJHB1cmUsXG4gICAgICAgIF9yZWYzJGFyZVN0YXRlc0VxdWFsID0gX3JlZjMuYXJlU3RhdGVzRXF1YWwsXG4gICAgICAgIGFyZVN0YXRlc0VxdWFsID0gX3JlZjMkYXJlU3RhdGVzRXF1YWwgPT09IHZvaWQgMCA/IHN0cmljdEVxdWFsIDogX3JlZjMkYXJlU3RhdGVzRXF1YWwsXG4gICAgICAgIF9yZWYzJGFyZU93blByb3BzRXF1YSA9IF9yZWYzLmFyZU93blByb3BzRXF1YWwsXG4gICAgICAgIGFyZU93blByb3BzRXF1YWwgPSBfcmVmMyRhcmVPd25Qcm9wc0VxdWEgPT09IHZvaWQgMCA/IHNoYWxsb3dFcXVhbCA6IF9yZWYzJGFyZU93blByb3BzRXF1YSxcbiAgICAgICAgX3JlZjMkYXJlU3RhdGVQcm9wc0VxID0gX3JlZjMuYXJlU3RhdGVQcm9wc0VxdWFsLFxuICAgICAgICBhcmVTdGF0ZVByb3BzRXF1YWwgPSBfcmVmMyRhcmVTdGF0ZVByb3BzRXEgPT09IHZvaWQgMCA/IHNoYWxsb3dFcXVhbCA6IF9yZWYzJGFyZVN0YXRlUHJvcHNFcSxcbiAgICAgICAgX3JlZjMkYXJlTWVyZ2VkUHJvcHNFID0gX3JlZjMuYXJlTWVyZ2VkUHJvcHNFcXVhbCxcbiAgICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbCA9IF9yZWYzJGFyZU1lcmdlZFByb3BzRSA9PT0gdm9pZCAwID8gc2hhbGxvd0VxdWFsIDogX3JlZjMkYXJlTWVyZ2VkUHJvcHNFLFxuICAgICAgICBleHRyYU9wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMywgW1wicHVyZVwiLCBcImFyZVN0YXRlc0VxdWFsXCIsIFwiYXJlT3duUHJvcHNFcXVhbFwiLCBcImFyZVN0YXRlUHJvcHNFcXVhbFwiLCBcImFyZU1lcmdlZFByb3BzRXF1YWxcIl0pO1xuXG4gICAgdmFyIGluaXRNYXBTdGF0ZVRvUHJvcHMgPSBtYXRjaChtYXBTdGF0ZVRvUHJvcHMsIG1hcFN0YXRlVG9Qcm9wc0ZhY3RvcmllcywgJ21hcFN0YXRlVG9Qcm9wcycpO1xuICAgIHZhciBpbml0TWFwRGlzcGF0Y2hUb1Byb3BzID0gbWF0Y2gobWFwRGlzcGF0Y2hUb1Byb3BzLCBtYXBEaXNwYXRjaFRvUHJvcHNGYWN0b3JpZXMsICdtYXBEaXNwYXRjaFRvUHJvcHMnKTtcbiAgICB2YXIgaW5pdE1lcmdlUHJvcHMgPSBtYXRjaChtZXJnZVByb3BzLCBtZXJnZVByb3BzRmFjdG9yaWVzLCAnbWVyZ2VQcm9wcycpO1xuICAgIHJldHVybiBjb25uZWN0SE9DKHNlbGVjdG9yRmFjdG9yeSwgX2V4dGVuZHMoe1xuICAgICAgLy8gdXNlZCBpbiBlcnJvciBtZXNzYWdlc1xuICAgICAgbWV0aG9kTmFtZTogJ2Nvbm5lY3QnLFxuICAgICAgLy8gdXNlZCB0byBjb21wdXRlIENvbm5lY3QncyBkaXNwbGF5TmFtZSBmcm9tIHRoZSB3cmFwcGVkIGNvbXBvbmVudCdzIGRpc3BsYXlOYW1lLlxuICAgICAgZ2V0RGlzcGxheU5hbWU6IGZ1bmN0aW9uIGdldERpc3BsYXlOYW1lKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIFwiQ29ubmVjdChcIiArIG5hbWUgKyBcIilcIjtcbiAgICAgIH0sXG4gICAgICAvLyBpZiBtYXBTdGF0ZVRvUHJvcHMgaXMgZmFsc3ksIHRoZSBDb25uZWN0IGNvbXBvbmVudCBkb2Vzbid0IHN1YnNjcmliZSB0byBzdG9yZSBzdGF0ZSBjaGFuZ2VzXG4gICAgICBzaG91bGRIYW5kbGVTdGF0ZUNoYW5nZXM6IEJvb2xlYW4obWFwU3RhdGVUb1Byb3BzKSxcbiAgICAgIC8vIHBhc3NlZCB0aHJvdWdoIHRvIHNlbGVjdG9yRmFjdG9yeVxuICAgICAgaW5pdE1hcFN0YXRlVG9Qcm9wczogaW5pdE1hcFN0YXRlVG9Qcm9wcyxcbiAgICAgIGluaXRNYXBEaXNwYXRjaFRvUHJvcHM6IGluaXRNYXBEaXNwYXRjaFRvUHJvcHMsXG4gICAgICBpbml0TWVyZ2VQcm9wczogaW5pdE1lcmdlUHJvcHMsXG4gICAgICBwdXJlOiBwdXJlLFxuICAgICAgYXJlU3RhdGVzRXF1YWw6IGFyZVN0YXRlc0VxdWFsLFxuICAgICAgYXJlT3duUHJvcHNFcXVhbDogYXJlT3duUHJvcHNFcXVhbCxcbiAgICAgIGFyZVN0YXRlUHJvcHNFcXVhbDogYXJlU3RhdGVQcm9wc0VxdWFsLFxuICAgICAgYXJlTWVyZ2VkUHJvcHNFcXVhbDogYXJlTWVyZ2VkUHJvcHNFcXVhbFxuICAgIH0sIGV4dHJhT3B0aW9ucykpO1xuICB9O1xufVxuZXhwb3J0IGRlZmF1bHRcbi8qI19fUFVSRV9fKi9cbmNyZWF0ZUNvbm5lY3QoKTsiLCJpbXBvcnQgeyB1c2VSZWR1Y2VyLCB1c2VSZWYsIHVzZU1lbW8sIHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VSZWR1eENvbnRleHQgYXMgdXNlRGVmYXVsdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vdXNlUmVkdXhDb250ZXh0JztcbmltcG9ydCBTdWJzY3JpcHRpb24gZnJvbSAnLi4vdXRpbHMvU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgfSBmcm9tICcuLi91dGlscy91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0JztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi4vY29tcG9uZW50cy9Db250ZXh0JztcblxudmFyIHJlZkVxdWFsaXR5ID0gZnVuY3Rpb24gcmVmRXF1YWxpdHkoYSwgYikge1xuICByZXR1cm4gYSA9PT0gYjtcbn07XG5cbmZ1bmN0aW9uIHVzZVNlbGVjdG9yV2l0aFN0b3JlQW5kU3Vic2NyaXB0aW9uKHNlbGVjdG9yLCBlcXVhbGl0eUZuLCBzdG9yZSwgY29udGV4dFN1Yikge1xuICB2YXIgX3VzZVJlZHVjZXIgPSB1c2VSZWR1Y2VyKGZ1bmN0aW9uIChzKSB7XG4gICAgcmV0dXJuIHMgKyAxO1xuICB9LCAwKSxcbiAgICAgIGZvcmNlUmVuZGVyID0gX3VzZVJlZHVjZXJbMV07XG5cbiAgdmFyIHN1YnNjcmlwdGlvbiA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBuZXcgU3Vic2NyaXB0aW9uKHN0b3JlLCBjb250ZXh0U3ViKTtcbiAgfSwgW3N0b3JlLCBjb250ZXh0U3ViXSk7XG4gIHZhciBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yID0gdXNlUmVmKCk7XG4gIHZhciBsYXRlc3RTZWxlY3RvciA9IHVzZVJlZigpO1xuICB2YXIgbGF0ZXN0U2VsZWN0ZWRTdGF0ZSA9IHVzZVJlZigpO1xuICB2YXIgc2VsZWN0ZWRTdGF0ZTtcblxuICB0cnkge1xuICAgIGlmIChzZWxlY3RvciAhPT0gbGF0ZXN0U2VsZWN0b3IuY3VycmVudCB8fCBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQpIHtcbiAgICAgIHNlbGVjdGVkU3RhdGUgPSBzZWxlY3RvcihzdG9yZS5nZXRTdGF0ZSgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZWN0ZWRTdGF0ZSA9IGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudDtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmIChsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQpIHtcbiAgICAgIGVyci5tZXNzYWdlICs9IFwiXFxuVGhlIGVycm9yIG1heSBiZSBjb3JyZWxhdGVkIHdpdGggdGhpcyBwcmV2aW91cyBlcnJvcjpcXG5cIiArIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudC5zdGFjayArIFwiXFxuXFxuXCI7XG4gICAgfVxuXG4gICAgdGhyb3cgZXJyO1xuICB9XG5cbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgbGF0ZXN0U2VsZWN0b3IuY3VycmVudCA9IHNlbGVjdG9yO1xuICAgIGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudCA9IHNlbGVjdGVkU3RhdGU7XG4gICAgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50ID0gdW5kZWZpbmVkO1xuICB9KTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gY2hlY2tGb3JVcGRhdGVzKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG5ld1NlbGVjdGVkU3RhdGUgPSBsYXRlc3RTZWxlY3Rvci5jdXJyZW50KHN0b3JlLmdldFN0YXRlKCkpO1xuXG4gICAgICAgIGlmIChlcXVhbGl0eUZuKG5ld1NlbGVjdGVkU3RhdGUsIGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQgPSBuZXdTZWxlY3RlZFN0YXRlO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIC8vIHdlIGlnbm9yZSBhbGwgZXJyb3JzIGhlcmUsIHNpbmNlIHdoZW4gdGhlIGNvbXBvbmVudFxuICAgICAgICAvLyBpcyByZS1yZW5kZXJlZCwgdGhlIHNlbGVjdG9ycyBhcmUgY2FsbGVkIGFnYWluLCBhbmRcbiAgICAgICAgLy8gd2lsbCB0aHJvdyBhZ2FpbiwgaWYgbmVpdGhlciBwcm9wcyBub3Igc3RvcmUgc3RhdGVcbiAgICAgICAgLy8gY2hhbmdlZFxuICAgICAgICBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQgPSBlcnI7XG4gICAgICB9XG5cbiAgICAgIGZvcmNlUmVuZGVyKHt9KTtcbiAgICB9XG5cbiAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IGNoZWNrRm9yVXBkYXRlcztcbiAgICBzdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7XG4gICAgY2hlY2tGb3JVcGRhdGVzKCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBzdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICB9LCBbc3RvcmUsIHN1YnNjcmlwdGlvbl0pO1xuICByZXR1cm4gc2VsZWN0ZWRTdGF0ZTtcbn1cbi8qKlxyXG4gKiBIb29rIGZhY3RvcnksIHdoaWNoIGNyZWF0ZXMgYSBgdXNlU2VsZWN0b3JgIGhvb2sgYm91bmQgdG8gYSBnaXZlbiBjb250ZXh0LlxyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWN0LkNvbnRleHR9IFtjb250ZXh0PVJlYWN0UmVkdXhDb250ZXh0XSBDb250ZXh0IHBhc3NlZCB0byB5b3VyIGA8UHJvdmlkZXI+YC5cclxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGB1c2VTZWxlY3RvcmAgaG9vayBib3VuZCB0byB0aGUgc3BlY2lmaWVkIGNvbnRleHQuXHJcbiAqL1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTZWxlY3Rvckhvb2soY29udGV4dCkge1xuICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSB7XG4gICAgY29udGV4dCA9IFJlYWN0UmVkdXhDb250ZXh0O1xuICB9XG5cbiAgdmFyIHVzZVJlZHV4Q29udGV4dCA9IGNvbnRleHQgPT09IFJlYWN0UmVkdXhDb250ZXh0ID8gdXNlRGVmYXVsdFJlZHV4Q29udGV4dCA6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdXNlQ29udGV4dChjb250ZXh0KTtcbiAgfTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVzZVNlbGVjdG9yKHNlbGVjdG9yLCBlcXVhbGl0eUZuKSB7XG4gICAgaWYgKGVxdWFsaXR5Rm4gPT09IHZvaWQgMCkge1xuICAgICAgZXF1YWxpdHlGbiA9IHJlZkVxdWFsaXR5O1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFzZWxlY3Rvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IG11c3QgcGFzcyBhIHNlbGVjdG9yIHRvIHVzZVNlbGVjdG9yc1wiKTtcbiAgICB9XG5cbiAgICB2YXIgX3VzZVJlZHV4Q29udGV4dCA9IHVzZVJlZHV4Q29udGV4dCgpLFxuICAgICAgICBzdG9yZSA9IF91c2VSZWR1eENvbnRleHQuc3RvcmUsXG4gICAgICAgIGNvbnRleHRTdWIgPSBfdXNlUmVkdXhDb250ZXh0LnN1YnNjcmlwdGlvbjtcblxuICAgIHJldHVybiB1c2VTZWxlY3RvcldpdGhTdG9yZUFuZFN1YnNjcmlwdGlvbihzZWxlY3RvciwgZXF1YWxpdHlGbiwgc3RvcmUsIGNvbnRleHRTdWIpO1xuICB9O1xufVxuLyoqXHJcbiAqIEEgaG9vayB0byBhY2Nlc3MgdGhlIHJlZHV4IHN0b3JlJ3Mgc3RhdGUuIFRoaXMgaG9vayB0YWtlcyBhIHNlbGVjdG9yIGZ1bmN0aW9uXHJcbiAqIGFzIGFuIGFyZ3VtZW50LiBUaGUgc2VsZWN0b3IgaXMgY2FsbGVkIHdpdGggdGhlIHN0b3JlIHN0YXRlLlxyXG4gKlxyXG4gKiBUaGlzIGhvb2sgdGFrZXMgYW4gb3B0aW9uYWwgZXF1YWxpdHkgY29tcGFyaXNvbiBmdW5jdGlvbiBhcyB0aGUgc2Vjb25kIHBhcmFtZXRlclxyXG4gKiB0aGF0IGFsbG93cyB5b3UgdG8gY3VzdG9taXplIHRoZSB3YXkgdGhlIHNlbGVjdGVkIHN0YXRlIGlzIGNvbXBhcmVkIHRvIGRldGVybWluZVxyXG4gKiB3aGV0aGVyIHRoZSBjb21wb25lbnQgbmVlZHMgdG8gYmUgcmUtcmVuZGVyZWQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHNlbGVjdG9yIHRoZSBzZWxlY3RvciBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9uPX0gZXF1YWxpdHlGbiB0aGUgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIGVxdWFsaXR5XHJcbiAqXHJcbiAqIEByZXR1cm5zIHthbnl9IHRoZSBzZWxlY3RlZCBzdGF0ZVxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKlxyXG4gKiBpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbiAqIGltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnXHJcbiAqXHJcbiAqIGV4cG9ydCBjb25zdCBDb3VudGVyQ29tcG9uZW50ID0gKCkgPT4ge1xyXG4gKiAgIGNvbnN0IGNvdW50ZXIgPSB1c2VTZWxlY3RvcihzdGF0ZSA9PiBzdGF0ZS5jb3VudGVyKVxyXG4gKiAgIHJldHVybiA8ZGl2Pntjb3VudGVyfTwvZGl2PlxyXG4gKiB9XHJcbiAqL1xuXG5leHBvcnQgdmFyIHVzZVNlbGVjdG9yID1cbi8qI19fUFVSRV9fKi9cbmNyZWF0ZVNlbGVjdG9ySG9vaygpOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn0iLCJmdW5jdGlvbiBpc0Fic29sdXRlKHBhdGhuYW1lKSB7XG4gIHJldHVybiBwYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJztcbn1cblxuLy8gQWJvdXQgMS41eCBmYXN0ZXIgdGhhbiB0aGUgdHdvLWFyZyB2ZXJzaW9uIG9mIEFycmF5I3NwbGljZSgpXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICh2YXIgaSA9IGluZGV4LCBrID0gaSArIDEsIG4gPSBsaXN0Lmxlbmd0aDsgayA8IG47IGkgKz0gMSwgayArPSAxKSB7XG4gICAgbGlzdFtpXSA9IGxpc3Rba107XG4gIH1cblxuICBsaXN0LnBvcCgpO1xufVxuXG4vLyBUaGlzIGltcGxlbWVudGF0aW9uIGlzIGJhc2VkIGhlYXZpbHkgb24gbm9kZSdzIHVybC5wYXJzZVxuZnVuY3Rpb24gcmVzb2x2ZVBhdGhuYW1lKHRvLCBmcm9tKSB7XG4gIGlmIChmcm9tID09PSB1bmRlZmluZWQpIGZyb20gPSAnJztcblxuICB2YXIgdG9QYXJ0cyA9ICh0byAmJiB0by5zcGxpdCgnLycpKSB8fCBbXTtcbiAgdmFyIGZyb21QYXJ0cyA9IChmcm9tICYmIGZyb20uc3BsaXQoJy8nKSkgfHwgW107XG5cbiAgdmFyIGlzVG9BYnMgPSB0byAmJiBpc0Fic29sdXRlKHRvKTtcbiAgdmFyIGlzRnJvbUFicyA9IGZyb20gJiYgaXNBYnNvbHV0ZShmcm9tKTtcbiAgdmFyIG11c3RFbmRBYnMgPSBpc1RvQWJzIHx8IGlzRnJvbUFicztcblxuICBpZiAodG8gJiYgaXNBYnNvbHV0ZSh0bykpIHtcbiAgICAvLyB0byBpcyBhYnNvbHV0ZVxuICAgIGZyb21QYXJ0cyA9IHRvUGFydHM7XG4gIH0gZWxzZSBpZiAodG9QYXJ0cy5sZW5ndGgpIHtcbiAgICAvLyB0byBpcyByZWxhdGl2ZSwgZHJvcCB0aGUgZmlsZW5hbWVcbiAgICBmcm9tUGFydHMucG9wKCk7XG4gICAgZnJvbVBhcnRzID0gZnJvbVBhcnRzLmNvbmNhdCh0b1BhcnRzKTtcbiAgfVxuXG4gIGlmICghZnJvbVBhcnRzLmxlbmd0aCkgcmV0dXJuICcvJztcblxuICB2YXIgaGFzVHJhaWxpbmdTbGFzaDtcbiAgaWYgKGZyb21QYXJ0cy5sZW5ndGgpIHtcbiAgICB2YXIgbGFzdCA9IGZyb21QYXJ0c1tmcm9tUGFydHMubGVuZ3RoIC0gMV07XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGxhc3QgPT09ICcuJyB8fCBsYXN0ID09PSAnLi4nIHx8IGxhc3QgPT09ICcnO1xuICB9IGVsc2Uge1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBmYWxzZTtcbiAgfVxuXG4gIHZhciB1cCA9IDA7XG4gIGZvciAodmFyIGkgPSBmcm9tUGFydHMubGVuZ3RoOyBpID49IDA7IGktLSkge1xuICAgIHZhciBwYXJ0ID0gZnJvbVBhcnRzW2ldO1xuXG4gICAgaWYgKHBhcnQgPT09ICcuJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgfSBlbHNlIGlmIChwYXJ0ID09PSAnLi4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCkge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cC0tO1xuICAgIH1cbiAgfVxuXG4gIGlmICghbXVzdEVuZEFicykgZm9yICg7IHVwLS07IHVwKSBmcm9tUGFydHMudW5zaGlmdCgnLi4nKTtcblxuICBpZiAoXG4gICAgbXVzdEVuZEFicyAmJlxuICAgIGZyb21QYXJ0c1swXSAhPT0gJycgJiZcbiAgICAoIWZyb21QYXJ0c1swXSB8fCAhaXNBYnNvbHV0ZShmcm9tUGFydHNbMF0pKVxuICApXG4gICAgZnJvbVBhcnRzLnVuc2hpZnQoJycpO1xuXG4gIHZhciByZXN1bHQgPSBmcm9tUGFydHMuam9pbignLycpO1xuXG4gIGlmIChoYXNUcmFpbGluZ1NsYXNoICYmIHJlc3VsdC5zdWJzdHIoLTEpICE9PSAnLycpIHJlc3VsdCArPSAnLyc7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVzb2x2ZVBhdGhuYW1lO1xuIiwiaW1wb3J0IFByb3ZpZGVyIGZyb20gJy4vY29tcG9uZW50cy9Qcm92aWRlcic7XG5pbXBvcnQgY29ubmVjdEFkdmFuY2VkIGZyb20gJy4vY29tcG9uZW50cy9jb25uZWN0QWR2YW5jZWQnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuL2NvbXBvbmVudHMvQ29udGV4dCc7XG5pbXBvcnQgY29ubmVjdCBmcm9tICcuL2Nvbm5lY3QvY29ubmVjdCc7XG5pbXBvcnQgeyB1c2VEaXNwYXRjaCwgY3JlYXRlRGlzcGF0Y2hIb29rIH0gZnJvbSAnLi9ob29rcy91c2VEaXNwYXRjaCc7XG5pbXBvcnQgeyB1c2VTZWxlY3RvciwgY3JlYXRlU2VsZWN0b3JIb29rIH0gZnJvbSAnLi9ob29rcy91c2VTZWxlY3Rvcic7XG5pbXBvcnQgeyB1c2VTdG9yZSwgY3JlYXRlU3RvcmVIb29rIH0gZnJvbSAnLi9ob29rcy91c2VTdG9yZSc7XG5pbXBvcnQgeyBzZXRCYXRjaCB9IGZyb20gJy4vdXRpbHMvYmF0Y2gnO1xuaW1wb3J0IHsgdW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMgYXMgYmF0Y2ggfSBmcm9tICcuL3V0aWxzL3JlYWN0QmF0Y2hlZFVwZGF0ZXMnO1xuaW1wb3J0IHNoYWxsb3dFcXVhbCBmcm9tICcuL3V0aWxzL3NoYWxsb3dFcXVhbCc7XG5zZXRCYXRjaChiYXRjaCk7XG5leHBvcnQgeyBQcm92aWRlciwgY29ubmVjdEFkdmFuY2VkLCBSZWFjdFJlZHV4Q29udGV4dCwgY29ubmVjdCwgYmF0Y2gsIHVzZURpc3BhdGNoLCBjcmVhdGVEaXNwYXRjaEhvb2ssIHVzZVNlbGVjdG9yLCBjcmVhdGVTZWxlY3Rvckhvb2ssIHVzZVN0b3JlLCBjcmVhdGVTdG9yZUhvb2ssIHNoYWxsb3dFcXVhbCB9OyIsInZhciBpc1Byb2R1Y3Rpb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nO1xudmFyIHByZWZpeCA9ICdJbnZhcmlhbnQgZmFpbGVkJztcbmZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgICBpZiAoY29uZGl0aW9uKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzUHJvZHVjdGlvbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJlZml4KTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKHByZWZpeCArIFwiOiBcIiArIChtZXNzYWdlIHx8ICcnKSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGludmFyaWFudDtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCByZXNvbHZlUGF0aG5hbWUgZnJvbSAncmVzb2x2ZS1wYXRobmFtZSc7XG5pbXBvcnQgdmFsdWVFcXVhbCBmcm9tICd2YWx1ZS1lcXVhbCc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LWludmFyaWFudCc7XG5cbmZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aCA6ICcvJyArIHBhdGg7XG59XG5mdW5jdGlvbiBzdHJpcExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xufVxuZnVuY3Rpb24gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBwYXRoLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihwcmVmaXgudG9Mb3dlckNhc2UoKSkgPT09IDAgJiYgJy8/IycuaW5kZXhPZihwYXRoLmNoYXJBdChwcmVmaXgubGVuZ3RoKSkgIT09IC0xO1xufVxuZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShwYXRoLCBwcmVmaXgpIHtcbiAgcmV0dXJuIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkgPyBwYXRoLnN1YnN0cihwcmVmaXgubGVuZ3RoKSA6IHBhdGg7XG59XG5mdW5jdGlvbiBzdHJpcFRyYWlsaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQocGF0aC5sZW5ndGggLSAxKSA9PT0gJy8nID8gcGF0aC5zbGljZSgwLCAtMSkgOiBwYXRoO1xufVxuZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGgpIHtcbiAgdmFyIHBhdGhuYW1lID0gcGF0aCB8fCAnLyc7XG4gIHZhciBzZWFyY2ggPSAnJztcbiAgdmFyIGhhc2ggPSAnJztcbiAgdmFyIGhhc2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJyMnKTtcblxuICBpZiAoaGFzaEluZGV4ICE9PSAtMSkge1xuICAgIGhhc2ggPSBwYXRobmFtZS5zdWJzdHIoaGFzaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBoYXNoSW5kZXgpO1xuICB9XG5cbiAgdmFyIHNlYXJjaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignPycpO1xuXG4gIGlmIChzZWFyY2hJbmRleCAhPT0gLTEpIHtcbiAgICBzZWFyY2ggPSBwYXRobmFtZS5zdWJzdHIoc2VhcmNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIHNlYXJjaEluZGV4KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0aG5hbWU6IHBhdGhuYW1lLFxuICAgIHNlYXJjaDogc2VhcmNoID09PSAnPycgPyAnJyA6IHNlYXJjaCxcbiAgICBoYXNoOiBoYXNoID09PSAnIycgPyAnJyA6IGhhc2hcbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVBhdGgobG9jYXRpb24pIHtcbiAgdmFyIHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICBzZWFyY2ggPSBsb2NhdGlvbi5zZWFyY2gsXG4gICAgICBoYXNoID0gbG9jYXRpb24uaGFzaDtcbiAgdmFyIHBhdGggPSBwYXRobmFtZSB8fCAnLyc7XG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoICE9PSAnPycpIHBhdGggKz0gc2VhcmNoLmNoYXJBdCgwKSA9PT0gJz8nID8gc2VhcmNoIDogXCI/XCIgKyBzZWFyY2g7XG4gIGlmIChoYXNoICYmIGhhc2ggIT09ICcjJykgcGF0aCArPSBoYXNoLmNoYXJBdCgwKSA9PT0gJyMnID8gaGFzaCA6IFwiI1wiICsgaGFzaDtcbiAgcmV0dXJuIHBhdGg7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXksIGN1cnJlbnRMb2NhdGlvbikge1xuICB2YXIgbG9jYXRpb247XG5cbiAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykge1xuICAgIC8vIFR3by1hcmcgZm9ybTogcHVzaChwYXRoLCBzdGF0ZSlcbiAgICBsb2NhdGlvbiA9IHBhcnNlUGF0aChwYXRoKTtcbiAgICBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9IGVsc2Uge1xuICAgIC8vIE9uZS1hcmcgZm9ybTogcHVzaChsb2NhdGlvbilcbiAgICBsb2NhdGlvbiA9IF9leHRlbmRzKHt9LCBwYXRoKTtcbiAgICBpZiAobG9jYXRpb24ucGF0aG5hbWUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24ucGF0aG5hbWUgPSAnJztcblxuICAgIGlmIChsb2NhdGlvbi5zZWFyY2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5zZWFyY2guY2hhckF0KDApICE9PSAnPycpIGxvY2F0aW9uLnNlYXJjaCA9ICc/JyArIGxvY2F0aW9uLnNlYXJjaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uc2VhcmNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKGxvY2F0aW9uLmhhc2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5oYXNoLmNoYXJBdCgwKSAhPT0gJyMnKSBsb2NhdGlvbi5oYXNoID0gJyMnICsgbG9jYXRpb24uaGFzaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uaGFzaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZSAhPT0gdW5kZWZpbmVkICYmIGxvY2F0aW9uLnN0YXRlID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH1cblxuICB0cnkge1xuICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gZGVjb2RlVVJJKGxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChlIGluc3RhbmNlb2YgVVJJRXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBVUklFcnJvcignUGF0aG5hbWUgXCInICsgbG9jYXRpb24ucGF0aG5hbWUgKyAnXCIgY291bGQgbm90IGJlIGRlY29kZWQuICcgKyAnVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGFuIGludmFsaWQgcGVyY2VudC1lbmNvZGluZy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cblxuICBpZiAoa2V5KSBsb2NhdGlvbi5rZXkgPSBrZXk7XG5cbiAgaWYgKGN1cnJlbnRMb2NhdGlvbikge1xuICAgIC8vIFJlc29sdmUgaW5jb21wbGV0ZS9yZWxhdGl2ZSBwYXRobmFtZSByZWxhdGl2ZSB0byBjdXJyZW50IGxvY2F0aW9uLlxuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gY3VycmVudExvY2F0aW9uLnBhdGhuYW1lO1xuICAgIH0gZWxzZSBpZiAobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApICE9PSAnLycpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gcmVzb2x2ZVBhdGhuYW1lKGxvY2F0aW9uLnBhdGhuYW1lLCBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBXaGVuIHRoZXJlIGlzIG5vIHByaW9yIGxvY2F0aW9uIGFuZCBwYXRobmFtZSBpcyBlbXB0eSwgc2V0IGl0IHRvIC9cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9ICcvJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbG9jYXRpb247XG59XG5mdW5jdGlvbiBsb2NhdGlvbnNBcmVFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggPT09IGIuaGFzaCAmJiBhLmtleSA9PT0gYi5rZXkgJiYgdmFsdWVFcXVhbChhLnN0YXRlLCBiLnN0YXRlKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKSB7XG4gIHZhciBwcm9tcHQgPSBudWxsO1xuXG4gIGZ1bmN0aW9uIHNldFByb21wdChuZXh0UHJvbXB0KSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhwcm9tcHQgPT0gbnVsbCwgJ0EgaGlzdG9yeSBzdXBwb3J0cyBvbmx5IG9uZSBwcm9tcHQgYXQgYSB0aW1lJykgOiB2b2lkIDA7XG4gICAgcHJvbXB0ID0gbmV4dFByb21wdDtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHByb21wdCA9PT0gbmV4dFByb21wdCkgcHJvbXB0ID0gbnVsbDtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBjYWxsYmFjaykge1xuICAgIC8vIFRPRE86IElmIGFub3RoZXIgdHJhbnNpdGlvbiBzdGFydHMgd2hpbGUgd2UncmUgc3RpbGwgY29uZmlybWluZ1xuICAgIC8vIHRoZSBwcmV2aW91cyBvbmUsIHdlIG1heSBlbmQgdXAgaW4gYSB3ZWlyZCBzdGF0ZS4gRmlndXJlIG91dCB0aGVcbiAgICAvLyBiZXN0IHdheSB0byBoYW5kbGUgdGhpcy5cbiAgICBpZiAocHJvbXB0ICE9IG51bGwpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0eXBlb2YgcHJvbXB0ID09PSAnZnVuY3Rpb24nID8gcHJvbXB0KGxvY2F0aW9uLCBhY3Rpb24pIDogcHJvbXB0O1xuXG4gICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBnZXRVc2VyQ29uZmlybWF0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbihyZXN1bHQsIGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnQSBoaXN0b3J5IG5lZWRzIGEgZ2V0VXNlckNvbmZpcm1hdGlvbiBmdW5jdGlvbiBpbiBvcmRlciB0byB1c2UgYSBwcm9tcHQgbWVzc2FnZScpIDogdm9pZCAwO1xuICAgICAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBSZXR1cm4gZmFsc2UgZnJvbSBhIHRyYW5zaXRpb24gaG9vayB0byBjYW5jZWwgdGhlIHRyYW5zaXRpb24uXG4gICAgICAgIGNhbGxiYWNrKHJlc3VsdCAhPT0gZmFsc2UpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgbGlzdGVuZXJzID0gW107XG5cbiAgZnVuY3Rpb24gYXBwZW5kTGlzdGVuZXIoZm4pIHtcbiAgICB2YXIgaXNBY3RpdmUgPSB0cnVlO1xuXG4gICAgZnVuY3Rpb24gbGlzdGVuZXIoKSB7XG4gICAgICBpZiAoaXNBY3RpdmUpIGZuLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlzQWN0aXZlID0gZmFsc2U7XG4gICAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtICE9PSBsaXN0ZW5lcjtcbiAgICAgIH0pO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBub3RpZnlMaXN0ZW5lcnMoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgcmV0dXJuIGxpc3RlbmVyLmFwcGx5KHZvaWQgMCwgYXJncyk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHNldFByb21wdDogc2V0UHJvbXB0LFxuICAgIGNvbmZpcm1UcmFuc2l0aW9uVG86IGNvbmZpcm1UcmFuc2l0aW9uVG8sXG4gICAgYXBwZW5kTGlzdGVuZXI6IGFwcGVuZExpc3RlbmVyLFxuICAgIG5vdGlmeUxpc3RlbmVyczogbm90aWZ5TGlzdGVuZXJzXG4gIH07XG59XG5cbnZhciBjYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuZnVuY3Rpb24gZ2V0Q29uZmlybWF0aW9uKG1lc3NhZ2UsIGNhbGxiYWNrKSB7XG4gIGNhbGxiYWNrKHdpbmRvdy5jb25maXJtKG1lc3NhZ2UpKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1hbGVydFxufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGlzIHN1cHBvcnRlZC4gVGFrZW4gZnJvbSBNb2Rlcm5penIuXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvTElDRU5TRVxuICogaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIvYmxvYi9tYXN0ZXIvZmVhdHVyZS1kZXRlY3RzL2hpc3RvcnkuanNcbiAqIGNoYW5nZWQgdG8gYXZvaWQgZmFsc2UgbmVnYXRpdmVzIGZvciBXaW5kb3dzIFBob25lczogaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3Qtcm91dGVyL2lzc3Vlcy81ODZcbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c0hpc3RvcnkoKSB7XG4gIHZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuICBpZiAoKHVhLmluZGV4T2YoJ0FuZHJvaWQgMi4nKSAhPT0gLTEgfHwgdWEuaW5kZXhPZignQW5kcm9pZCA0LjAnKSAhPT0gLTEpICYmIHVhLmluZGV4T2YoJ01vYmlsZSBTYWZhcmknKSAhPT0gLTEgJiYgdWEuaW5kZXhPZignQ2hyb21lJykgPT09IC0xICYmIHVhLmluZGV4T2YoJ1dpbmRvd3MgUGhvbmUnKSA9PT0gLTEpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5ICYmICdwdXNoU3RhdGUnIGluIHdpbmRvdy5oaXN0b3J5O1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYnJvd3NlciBmaXJlcyBwb3BzdGF0ZSBvbiBoYXNoIGNoYW5nZS5cbiAqIElFMTAgYW5kIElFMTEgZG8gbm90LlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdUcmlkZW50JykgPT09IC0xO1xufVxuLyoqXG4gKiBSZXR1cm5zIGZhbHNlIGlmIHVzaW5nIGdvKG4pIHdpdGggaGFzaCBoaXN0b3J5IGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQuXG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdGaXJlZm94JykgPT09IC0xO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYSBnaXZlbiBwb3BzdGF0ZSBldmVudCBpcyBhbiBleHRyYW5lb3VzIFdlYktpdCBldmVudC5cbiAqIEFjY291bnRzIGZvciB0aGUgZmFjdCB0aGF0IENocm9tZSBvbiBpT1MgZmlyZXMgcmVhbCBwb3BzdGF0ZSBldmVudHNcbiAqIGNvbnRhaW5pbmcgdW5kZWZpbmVkIHN0YXRlIHdoZW4gcHJlc3NpbmcgdGhlIGJhY2sgYnV0dG9uLlxuICovXG5cbmZ1bmN0aW9uIGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuIGV2ZW50LnN0YXRlID09PSB1bmRlZmluZWQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdDcmlPUycpID09PSAtMTtcbn1cblxudmFyIFBvcFN0YXRlRXZlbnQgPSAncG9wc3RhdGUnO1xudmFyIEhhc2hDaGFuZ2VFdmVudCA9ICdoYXNoY2hhbmdlJztcblxuZnVuY3Rpb24gZ2V0SGlzdG9yeVN0YXRlKCkge1xuICB0cnkge1xuICAgIHJldHVybiB3aW5kb3cuaGlzdG9yeS5zdGF0ZSB8fCB7fTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIElFIDExIHNvbWV0aW1lcyB0aHJvd3Mgd2hlbiBhY2Nlc3Npbmcgd2luZG93Lmhpc3Rvcnkuc3RhdGVcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL1JlYWN0VHJhaW5pbmcvaGlzdG9yeS9wdWxsLzI4OVxuICAgIHJldHVybiB7fTtcbiAgfVxufVxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCB1c2VzIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpbmNsdWRpbmdcbiAqIHB1c2hTdGF0ZSwgcmVwbGFjZVN0YXRlLCBhbmQgdGhlIHBvcHN0YXRlIGV2ZW50LlxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlQnJvd3Nlckhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgIWNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0Jyb3dzZXIgaGlzdG9yeSBuZWVkcyBhIERPTScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhblVzZUhpc3RvcnkgPSBzdXBwb3J0c0hpc3RvcnkoKTtcbiAgdmFyIG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyID0gIXN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKTtcbiAgdmFyIF9wcm9wcyA9IHByb3BzLFxuICAgICAgX3Byb3BzJGZvcmNlUmVmcmVzaCA9IF9wcm9wcy5mb3JjZVJlZnJlc2gsXG4gICAgICBmb3JjZVJlZnJlc2ggPSBfcHJvcHMkZm9yY2VSZWZyZXNoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRmb3JjZVJlZnJlc2gsXG4gICAgICBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBfcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHZvaWQgMCA/IGdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBfcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdm9pZCAwID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG5cbiAgZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oaGlzdG9yeVN0YXRlKSB7XG4gICAgdmFyIF9yZWYgPSBoaXN0b3J5U3RhdGUgfHwge30sXG4gICAgICAgIGtleSA9IF9yZWYua2V5LFxuICAgICAgICBzdGF0ZSA9IF9yZWYuc3RhdGU7XG5cbiAgICB2YXIgX3dpbmRvdyRsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbixcbiAgICAgICAgcGF0aG5hbWUgPSBfd2luZG93JGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICBzZWFyY2ggPSBfd2luZG93JGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgICAgaGFzaCA9IF93aW5kb3ckbG9jYXRpb24uaGFzaDtcbiAgICB2YXIgcGF0aCA9IHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCFiYXNlbmFtZSB8fCBoYXNCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpIDogdm9pZCAwO1xuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9IHN0cmlwQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpO1xuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVQb3BTdGF0ZShldmVudCkge1xuICAgIC8vIElnbm9yZSBleHRyYW5lb3VzIHBvcHN0YXRlIGV2ZW50cyBpbiBXZWJLaXQuXG4gICAgaWYgKGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpKSByZXR1cm47XG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGV2ZW50LnN0YXRlKSk7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSkpO1xuICB9XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uOyAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIGtleXMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3Iga2V5cyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxLZXlzLmluZGV4T2YodG9Mb2NhdGlvbi5rZXkpO1xuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG4gICAgdmFyIGZyb21JbmRleCA9IGFsbEtleXMuaW5kZXhPZihmcm9tTG9jYXRpb24ua2V5KTtcbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSk7XG4gIHZhciBhbGxLZXlzID0gW2luaXRpYWxMb2NhdGlvbi5rZXldOyAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHJldHVybiBiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucHVzaFN0YXRlKHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICAgICAgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcbiAgICAgICAgICB2YXIgbmV4dEtleXMgPSBhbGxLZXlzLnNsaWNlKDAsIHByZXZJbmRleCArIDEpO1xuICAgICAgICAgIG5leHRLZXlzLnB1c2gobG9jYXRpb24ua2V5KTtcbiAgICAgICAgICBhbGxLZXlzID0gbmV4dEtleXM7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpIDogdm9pZCAwO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5yZXBsYWNlU3RhdGUoe1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHN0YXRlOiBzdGF0ZVxuICAgICAgICB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbEtleXNbcHJldkluZGV4XSA9IGxvY2F0aW9uLmtleTtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5JykgOiB2b2lkIDA7XG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ28obikge1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxICYmIGRlbHRhID09PSAxKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG52YXIgSGFzaENoYW5nZUV2ZW50JDEgPSAnaGFzaGNoYW5nZSc7XG52YXIgSGFzaFBhdGhDb2RlcnMgPSB7XG4gIGhhc2hiYW5nOiB7XG4gICAgZW5jb2RlUGF0aDogZnVuY3Rpb24gZW5jb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGggOiAnIS8nICsgc3RyaXBMZWFkaW5nU2xhc2gocGF0aCk7XG4gICAgfSxcbiAgICBkZWNvZGVQYXRoOiBmdW5jdGlvbiBkZWNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xuICAgIH1cbiAgfSxcbiAgbm9zbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IHN0cmlwTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaFxuICB9LFxuICBzbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfVxufTtcblxuZnVuY3Rpb24gc3RyaXBIYXNoKHVybCkge1xuICB2YXIgaGFzaEluZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGhhc2hJbmRleCA9PT0gLTEgPyB1cmwgOiB1cmwuc2xpY2UoMCwgaGFzaEluZGV4KTtcbn1cblxuZnVuY3Rpb24gZ2V0SGFzaFBhdGgoKSB7XG4gIC8vIFdlIGNhbid0IHVzZSB3aW5kb3cubG9jYXRpb24uaGFzaCBoZXJlIGJlY2F1c2UgaXQncyBub3RcbiAgLy8gY29uc2lzdGVudCBhY3Jvc3MgYnJvd3NlcnMgLSBGaXJlZm94IHdpbGwgcHJlLWRlY29kZSBpdCFcbiAgdmFyIGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgdmFyIGhhc2hJbmRleCA9IGhyZWYuaW5kZXhPZignIycpO1xuICByZXR1cm4gaGFzaEluZGV4ID09PSAtMSA/ICcnIDogaHJlZi5zdWJzdHJpbmcoaGFzaEluZGV4ICsgMSk7XG59XG5cbmZ1bmN0aW9uIHB1c2hIYXNoUGF0aChwYXRoKSB7XG4gIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gcGF0aDtcbn1cblxuZnVuY3Rpb24gcmVwbGFjZUhhc2hQYXRoKHBhdGgpIHtcbiAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2Uoc3RyaXBIYXNoKHdpbmRvdy5sb2NhdGlvbi5ocmVmKSArICcjJyArIHBhdGgpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVIYXNoSGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICAhY2FuVXNlRE9NID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCAnSGFzaCBoaXN0b3J5IG5lZWRzIGEgRE9NJykgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuR29XaXRob3V0UmVsb2FkID0gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKTtcbiAgdmFyIF9wcm9wcyA9IHByb3BzLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB2b2lkIDAgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMkaGFzaFR5cGUgPSBfcHJvcHMuaGFzaFR5cGUsXG4gICAgICBoYXNoVHlwZSA9IF9wcm9wcyRoYXNoVHlwZSA9PT0gdm9pZCAwID8gJ3NsYXNoJyA6IF9wcm9wcyRoYXNoVHlwZTtcbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyBzdHJpcFRyYWlsaW5nU2xhc2goYWRkTGVhZGluZ1NsYXNoKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcbiAgdmFyIF9IYXNoUGF0aENvZGVycyRoYXNoVCA9IEhhc2hQYXRoQ29kZXJzW2hhc2hUeXBlXSxcbiAgICAgIGVuY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZW5jb2RlUGF0aCxcbiAgICAgIGRlY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZGVjb2RlUGF0aDtcblxuICBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbigpIHtcbiAgICB2YXIgcGF0aCA9IGRlY29kZVBhdGgoZ2V0SGFzaFBhdGgoKSk7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKSA6IHZvaWQgMDtcbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCk7XG4gIH1cblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gIHZhciBpZ25vcmVQYXRoID0gbnVsbDtcblxuICBmdW5jdGlvbiBsb2NhdGlvbnNBcmVFcXVhbCQkMShhLCBiKSB7XG4gICAgcmV0dXJuIGEucGF0aG5hbWUgPT09IGIucGF0aG5hbWUgJiYgYS5zZWFyY2ggPT09IGIuc2VhcmNoICYmIGEuaGFzaCA9PT0gYi5oYXNoO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcblxuICAgIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkge1xuICAgICAgLy8gRW5zdXJlIHdlIGFsd2F5cyBoYXZlIGEgcHJvcGVybHktZW5jb2RlZCBoYXNoLlxuICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGxvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgICAgIHZhciBwcmV2TG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuICAgICAgaWYgKCFmb3JjZU5leHRQb3AgJiYgbG9jYXRpb25zQXJlRXF1YWwkJDEocHJldkxvY2F0aW9uLCBsb2NhdGlvbikpIHJldHVybjsgLy8gQSBoYXNoY2hhbmdlIGRvZXNuJ3QgYWx3YXlzID09IGxvY2F0aW9uIGNoYW5nZS5cblxuICAgICAgaWYgKGlnbm9yZVBhdGggPT09IGNyZWF0ZVBhdGgobG9jYXRpb24pKSByZXR1cm47IC8vIElnbm9yZSB0aGlzIGNoYW5nZTsgd2UgYWxyZWFkeSBzZXRTdGF0ZSBpbiBwdXNoL3JlcGxhY2UuXG5cbiAgICAgIGlnbm9yZVBhdGggPSBudWxsO1xuICAgICAgaGFuZGxlUG9wKGxvY2F0aW9uKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjsgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBwYXRocyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBwYXRocyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKHRvTG9jYXRpb24pKTtcbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuICAgIHZhciBmcm9tSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGZyb21Mb2NhdGlvbikpO1xuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9IC8vIEVuc3VyZSB0aGUgaGFzaCBpcyBlbmNvZGVkIHByb3Blcmx5IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlLlxuXG5cbiAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICB2YXIgYWxsUGF0aHMgPSBbY3JlYXRlUGF0aChpbml0aWFsTG9jYXRpb24pXTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICB2YXIgYmFzZVRhZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Jhc2UnKTtcbiAgICB2YXIgaHJlZiA9ICcnO1xuXG4gICAgaWYgKGJhc2VUYWcgJiYgYmFzZVRhZy5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSkge1xuICAgICAgaHJlZiA9IHN0cmlwSGFzaCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGhyZWYgKyAnIycgKyBlbmNvZGVQYXRoKGJhc2VuYW1lICsgY3JlYXRlUGF0aChsb2NhdGlvbikpO1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFBVU0gsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHB1c2hIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGhpc3RvcnkubG9jYXRpb24pKTtcbiAgICAgICAgdmFyIG5leHRQYXRocyA9IGFsbFBhdGhzLnNsaWNlKDAsIHByZXZJbmRleCArIDEpO1xuICAgICAgICBuZXh0UGF0aHMucHVzaChwYXRoKTtcbiAgICAgICAgYWxsUGF0aHMgPSBuZXh0UGF0aHM7XG4gICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBQVVNIIHRoZSBzYW1lIHBhdGg7IGEgbmV3IGVudHJ5IHdpbGwgbm90IGJlIGFkZGVkIHRvIHRoZSBoaXN0b3J5IHN0YWNrJykgOiB2b2lkIDA7XG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBwYXRoID0gY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUkVQTEFDRSwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsUGF0aHNbcHJldkluZGV4XSA9IHBhdGg7XG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ28obikge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoY2FuR29XaXRob3V0UmVsb2FkLCAnSGFzaCBoaXN0b3J5IGdvKG4pIGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQgaW4gdGhpcyBicm93c2VyJykgOiB2b2lkIDA7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEgJiYgZGVsdGEgPT09IDEpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCQxLCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKEhhc2hDaGFuZ2VFdmVudCQxLCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gYmxvY2socHJvbXB0KSB7XG4gICAgaWYgKHByb21wdCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9tcHQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbmZ1bmN0aW9uIGNsYW1wKG4sIGxvd2VyQm91bmQsIHVwcGVyQm91bmQpIHtcbiAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KG4sIGxvd2VyQm91bmQpLCB1cHBlckJvdW5kKTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgc3RvcmVzIGxvY2F0aW9ucyBpbiBtZW1vcnkuXG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVNZW1vcnlIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIF9wcm9wcyRpbml0aWFsRW50cmllcyA9IF9wcm9wcy5pbml0aWFsRW50cmllcyxcbiAgICAgIGluaXRpYWxFbnRyaWVzID0gX3Byb3BzJGluaXRpYWxFbnRyaWVzID09PSB2b2lkIDAgPyBbJy8nXSA6IF9wcm9wcyRpbml0aWFsRW50cmllcyxcbiAgICAgIF9wcm9wcyRpbml0aWFsSW5kZXggPSBfcHJvcHMuaW5pdGlhbEluZGV4LFxuICAgICAgaW5pdGlhbEluZGV4ID0gX3Byb3BzJGluaXRpYWxJbmRleCA9PT0gdm9pZCAwID8gMCA6IF9wcm9wcyRpbml0aWFsSW5kZXgsXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gX3Byb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHZvaWQgMCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH1cblxuICB2YXIgaW5kZXggPSBjbGFtcChpbml0aWFsSW5kZXgsIDAsIGluaXRpYWxFbnRyaWVzLmxlbmd0aCAtIDEpO1xuICB2YXIgZW50cmllcyA9IGluaXRpYWxFbnRyaWVzLm1hcChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICByZXR1cm4gdHlwZW9mIGVudHJ5ID09PSAnc3RyaW5nJyA/IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGNyZWF0ZUtleSgpKSA6IGNyZWF0ZUxvY2F0aW9uKGVudHJ5LCB1bmRlZmluZWQsIGVudHJ5LmtleSB8fCBjcmVhdGVLZXkoKSk7XG4gIH0pOyAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBjcmVhdGVQYXRoO1xuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcHJldkluZGV4ID0gaGlzdG9yeS5pbmRleDtcbiAgICAgIHZhciBuZXh0SW5kZXggPSBwcmV2SW5kZXggKyAxO1xuICAgICAgdmFyIG5leHRFbnRyaWVzID0gaGlzdG9yeS5lbnRyaWVzLnNsaWNlKDApO1xuXG4gICAgICBpZiAobmV4dEVudHJpZXMubGVuZ3RoID4gbmV4dEluZGV4KSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnNwbGljZShuZXh0SW5kZXgsIG5leHRFbnRyaWVzLmxlbmd0aCAtIG5leHRJbmRleCwgbG9jYXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dEVudHJpZXMucHVzaChsb2NhdGlvbik7XG4gICAgICB9XG5cbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgaW5kZXg6IG5leHRJbmRleCxcbiAgICAgICAgZW50cmllczogbmV4dEVudHJpZXNcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIGhpc3RvcnkuZW50cmllc1toaXN0b3J5LmluZGV4XSA9IGxvY2F0aW9uO1xuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICB2YXIgbmV4dEluZGV4ID0gY2xhbXAoaGlzdG9yeS5pbmRleCArIG4sIDAsIGhpc3RvcnkuZW50cmllcy5sZW5ndGggLSAxKTtcbiAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgdmFyIGxvY2F0aW9uID0gaGlzdG9yeS5lbnRyaWVzW25leHRJbmRleF07XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmIChvaykge1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICAgIGluZGV4OiBuZXh0SW5kZXhcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBNaW1pYyB0aGUgYmVoYXZpb3Igb2YgRE9NIGhpc3RvcmllcyBieVxuICAgICAgICAvLyBjYXVzaW5nIGEgcmVuZGVyIGFmdGVyIGEgY2FuY2VsbGVkIFBPUC5cbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICBnbygtMSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgZ28oMSk7XG4gIH1cblxuICBmdW5jdGlvbiBjYW5HbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGhpc3RvcnkuaW5kZXggKyBuO1xuICAgIHJldHVybiBuZXh0SW5kZXggPj0gMCAmJiBuZXh0SW5kZXggPCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICB9XG5cbiAgZnVuY3Rpb24gYmxvY2socHJvbXB0KSB7XG4gICAgaWYgKHByb21wdCA9PT0gdm9pZCAwKSB7XG4gICAgICBwcm9tcHQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG4gIH1cblxuICBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBlbnRyaWVzLmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBlbnRyaWVzW2luZGV4XSxcbiAgICBpbmRleDogaW5kZXgsXG4gICAgZW50cmllczogZW50cmllcyxcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgY2FuR286IGNhbkdvLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxuZXhwb3J0IHsgY3JlYXRlQnJvd3Nlckhpc3RvcnksIGNyZWF0ZUhhc2hIaXN0b3J5LCBjcmVhdGVNZW1vcnlIaXN0b3J5LCBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwsIHBhcnNlUGF0aCwgY3JlYXRlUGF0aCB9O1xuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBndWQgZnJvbSAnZ3VkJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5cbnZhciBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgPSAxMDczNzQxODIzO1xuXG5mdW5jdGlvbiBvYmplY3RJcyh4LCB5KSB7XG4gIGlmICh4ID09PSB5KSB7XG4gICAgcmV0dXJuIHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlRXZlbnRFbWl0dGVyKHZhbHVlKSB7XG4gIHZhciBoYW5kbGVycyA9IFtdO1xuICByZXR1cm4ge1xuICAgIG9uOiBmdW5jdGlvbiBvbihoYW5kbGVyKSB7XG4gICAgICBoYW5kbGVycy5wdXNoKGhhbmRsZXIpO1xuICAgIH0sXG4gICAgb2ZmOiBmdW5jdGlvbiBvZmYoaGFuZGxlcikge1xuICAgICAgaGFuZGxlcnMgPSBoYW5kbGVycy5maWx0ZXIoZnVuY3Rpb24gKGgpIHtcbiAgICAgICAgcmV0dXJuIGggIT09IGhhbmRsZXI7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQobmV3VmFsdWUsIGNoYW5nZWRCaXRzKSB7XG4gICAgICB2YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgaGFuZGxlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICByZXR1cm4gaGFuZGxlcih2YWx1ZSwgY2hhbmdlZEJpdHMpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBvbmx5Q2hpbGQoY2hpbGRyZW4pIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pID8gY2hpbGRyZW5bMF0gOiBjaGlsZHJlbjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlUmVhY3RDb250ZXh0KGRlZmF1bHRWYWx1ZSwgY2FsY3VsYXRlQ2hhbmdlZEJpdHMpIHtcbiAgdmFyIF9Qcm92aWRlciRjaGlsZENvbnRleCwgX0NvbnN1bWVyJGNvbnRleHRUeXBlO1xuXG4gIHZhciBjb250ZXh0UHJvcCA9ICdfX2NyZWF0ZS1yZWFjdC1jb250ZXh0LScgKyBndWQoKSArICdfXyc7XG5cbiAgdmFyIFByb3ZpZGVyID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIF9pbmhlcml0c0xvb3NlKFByb3ZpZGVyLCBfQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIFByb3ZpZGVyKCkge1xuICAgICAgdmFyIF90aGlzO1xuXG4gICAgICBfdGhpcyA9IF9Db21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgX3RoaXMuZW1pdHRlciA9IGNyZWF0ZUV2ZW50RW1pdHRlcihfdGhpcy5wcm9wcy52YWx1ZSk7XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgdmFyIF9wcm90byA9IFByb3ZpZGVyLnByb3RvdHlwZTtcblxuICAgIF9wcm90by5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgcmV0dXJuIF9yZWYgPSB7fSwgX3JlZltjb250ZXh0UHJvcF0gPSB0aGlzLmVtaXR0ZXIsIF9yZWY7XG4gICAgfTtcblxuICAgIF9wcm90by5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLnZhbHVlICE9PSBuZXh0UHJvcHMudmFsdWUpIHtcbiAgICAgICAgdmFyIG9sZFZhbHVlID0gdGhpcy5wcm9wcy52YWx1ZTtcbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gbmV4dFByb3BzLnZhbHVlO1xuICAgICAgICB2YXIgY2hhbmdlZEJpdHM7XG5cbiAgICAgICAgaWYgKG9iamVjdElzKG9sZFZhbHVlLCBuZXdWYWx1ZSkpIHtcbiAgICAgICAgICBjaGFuZ2VkQml0cyA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hhbmdlZEJpdHMgPSB0eXBlb2YgY2FsY3VsYXRlQ2hhbmdlZEJpdHMgPT09ICdmdW5jdGlvbicgPyBjYWxjdWxhdGVDaGFuZ2VkQml0cyhvbGRWYWx1ZSwgbmV3VmFsdWUpIDogTUFYX1NJR05FRF8zMV9CSVRfSU5UO1xuXG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIHdhcm5pbmcoKGNoYW5nZWRCaXRzICYgTUFYX1NJR05FRF8zMV9CSVRfSU5UKSA9PT0gY2hhbmdlZEJpdHMsICdjYWxjdWxhdGVDaGFuZ2VkQml0czogRXhwZWN0ZWQgdGhlIHJldHVybiB2YWx1ZSB0byBiZSBhICcgKyAnMzEtYml0IGludGVnZXIuIEluc3RlYWQgcmVjZWl2ZWQ6ICcgKyBjaGFuZ2VkQml0cyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2hhbmdlZEJpdHMgfD0gMDtcblxuICAgICAgICAgIGlmIChjaGFuZ2VkQml0cyAhPT0gMCkge1xuICAgICAgICAgICAgdGhpcy5lbWl0dGVyLnNldChuZXh0UHJvcHMudmFsdWUsIGNoYW5nZWRCaXRzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgIH07XG5cbiAgICByZXR1cm4gUHJvdmlkZXI7XG4gIH0oQ29tcG9uZW50KTtcblxuICBQcm92aWRlci5jaGlsZENvbnRleHRUeXBlcyA9IChfUHJvdmlkZXIkY2hpbGRDb250ZXggPSB7fSwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4W2NvbnRleHRQcm9wXSA9IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4KTtcblxuICB2YXIgQ29uc3VtZXIgPVxuICAvKiNfX1BVUkVfXyovXG4gIGZ1bmN0aW9uIChfQ29tcG9uZW50Mikge1xuICAgIF9pbmhlcml0c0xvb3NlKENvbnN1bWVyLCBfQ29tcG9uZW50Mik7XG5cbiAgICBmdW5jdGlvbiBDb25zdW1lcigpIHtcbiAgICAgIHZhciBfdGhpczI7XG5cbiAgICAgIF90aGlzMiA9IF9Db21wb25lbnQyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgIF90aGlzMi5zdGF0ZSA9IHtcbiAgICAgICAgdmFsdWU6IF90aGlzMi5nZXRWYWx1ZSgpXG4gICAgICB9O1xuXG4gICAgICBfdGhpczIub25VcGRhdGUgPSBmdW5jdGlvbiAobmV3VmFsdWUsIGNoYW5nZWRCaXRzKSB7XG4gICAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSBfdGhpczIub2JzZXJ2ZWRCaXRzIHwgMDtcblxuICAgICAgICBpZiAoKG9ic2VydmVkQml0cyAmIGNoYW5nZWRCaXRzKSAhPT0gMCkge1xuICAgICAgICAgIF90aGlzMi5zZXRTdGF0ZSh7XG4gICAgICAgICAgICB2YWx1ZTogX3RoaXMyLmdldFZhbHVlKClcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIF90aGlzMjtcbiAgICB9XG5cbiAgICB2YXIgX3Byb3RvMiA9IENvbnN1bWVyLnByb3RvdHlwZTtcblxuICAgIF9wcm90bzIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICB2YXIgb2JzZXJ2ZWRCaXRzID0gbmV4dFByb3BzLm9ic2VydmVkQml0cztcbiAgICAgIHRoaXMub2JzZXJ2ZWRCaXRzID0gb2JzZXJ2ZWRCaXRzID09PSB1bmRlZmluZWQgfHwgb2JzZXJ2ZWRCaXRzID09PSBudWxsID8gTUFYX1NJR05FRF8zMV9CSVRfSU5UIDogb2JzZXJ2ZWRCaXRzO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLm9uKHRoaXMub25VcGRhdGUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgb2JzZXJ2ZWRCaXRzID0gdGhpcy5wcm9wcy5vYnNlcnZlZEJpdHM7XG4gICAgICB0aGlzLm9ic2VydmVkQml0cyA9IG9ic2VydmVkQml0cyA9PT0gdW5kZWZpbmVkIHx8IG9ic2VydmVkQml0cyA9PT0gbnVsbCA/IE1BWF9TSUdORURfMzFfQklUX0lOVCA6IG9ic2VydmVkQml0cztcbiAgICB9O1xuXG4gICAgX3Byb3RvMi5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5vZmYodGhpcy5vblVwZGF0ZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90bzIuZ2V0VmFsdWUgPSBmdW5jdGlvbiBnZXRWYWx1ZSgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLmdldCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvMi5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gb25seUNoaWxkKHRoaXMucHJvcHMuY2hpbGRyZW4pKHRoaXMuc3RhdGUudmFsdWUpO1xuICAgIH07XG5cbiAgICByZXR1cm4gQ29uc3VtZXI7XG4gIH0oQ29tcG9uZW50KTtcblxuICBDb25zdW1lci5jb250ZXh0VHlwZXMgPSAoX0NvbnN1bWVyJGNvbnRleHRUeXBlID0ge30sIF9Db25zdW1lciRjb250ZXh0VHlwZVtjb250ZXh0UHJvcF0gPSBQcm9wVHlwZXMub2JqZWN0LCBfQ29uc3VtZXIkY29udGV4dFR5cGUpO1xuICByZXR1cm4ge1xuICAgIFByb3ZpZGVyOiBQcm92aWRlcixcbiAgICBDb25zdW1lcjogQ29uc3VtZXJcbiAgfTtcbn1cblxudmFyIGluZGV4ID0gUmVhY3QuY3JlYXRlQ29udGV4dCB8fCBjcmVhdGVSZWFjdENvbnRleHQ7XG5cbmV4cG9ydCBkZWZhdWx0IGluZGV4O1xuIiwiaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBjcmVhdGVNZW1vcnlIaXN0b3J5LCBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwsIGNyZWF0ZVBhdGggfSBmcm9tICdoaXN0b3J5JztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5pbXBvcnQgY3JlYXRlQ29udGV4dCBmcm9tICdtaW5pLWNyZWF0ZS1yZWFjdC1jb250ZXh0JztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IHBhdGhUb1JlZ2V4cCBmcm9tICdwYXRoLXRvLXJlZ2V4cCc7XG5pbXBvcnQgeyBpc1ZhbGlkRWxlbWVudFR5cGUgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSc7XG5pbXBvcnQgaG9pc3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcblxuLy8gVE9ETzogUmVwbGFjZSB3aXRoIFJlYWN0LmNyZWF0ZUNvbnRleHQgb25jZSB3ZSBjYW4gYXNzdW1lIFJlYWN0IDE2K1xuXG52YXIgY3JlYXRlTmFtZWRDb250ZXh0ID0gZnVuY3Rpb24gY3JlYXRlTmFtZWRDb250ZXh0KG5hbWUpIHtcbiAgdmFyIGNvbnRleHQgPSBjcmVhdGVDb250ZXh0KCk7XG4gIGNvbnRleHQuZGlzcGxheU5hbWUgPSBuYW1lO1xuICByZXR1cm4gY29udGV4dDtcbn07XG5cbnZhciBjb250ZXh0ID1cbi8qI19fUFVSRV9fKi9cbmNyZWF0ZU5hbWVkQ29udGV4dChcIlJvdXRlclwiKTtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHV0dGluZyBoaXN0b3J5IG9uIGNvbnRleHQuXG4gKi9cblxudmFyIFJvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIFJvdXRlci5jb21wdXRlUm9vdE1hdGNoID0gZnVuY3Rpb24gY29tcHV0ZVJvb3RNYXRjaChwYXRobmFtZSkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoOiBcIi9cIixcbiAgICAgIHVybDogXCIvXCIsXG4gICAgICBwYXJhbXM6IHt9LFxuICAgICAgaXNFeGFjdDogcGF0aG5hbWUgPT09IFwiL1wiXG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBSb3V0ZXIocHJvcHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcykgfHwgdGhpcztcbiAgICBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGxvY2F0aW9uOiBwcm9wcy5oaXN0b3J5LmxvY2F0aW9uXG4gICAgfTsgLy8gVGhpcyBpcyBhIGJpdCBvZiBhIGhhY2suIFdlIGhhdmUgdG8gc3RhcnQgbGlzdGVuaW5nIGZvciBsb2NhdGlvblxuICAgIC8vIGNoYW5nZXMgaGVyZSBpbiB0aGUgY29uc3RydWN0b3IgaW4gY2FzZSB0aGVyZSBhcmUgYW55IDxSZWRpcmVjdD5zXG4gICAgLy8gb24gdGhlIGluaXRpYWwgcmVuZGVyLiBJZiB0aGVyZSBhcmUsIHRoZXkgd2lsbCByZXBsYWNlL3B1c2ggd2hlblxuICAgIC8vIHRoZXkgbW91bnQgYW5kIHNpbmNlIGNETSBmaXJlcyBpbiBjaGlsZHJlbiBiZWZvcmUgcGFyZW50cywgd2UgbWF5XG4gICAgLy8gZ2V0IGEgbmV3IGxvY2F0aW9uIGJlZm9yZSB0aGUgPFJvdXRlcj4gaXMgbW91bnRlZC5cblxuICAgIF90aGlzLl9pc01vdW50ZWQgPSBmYWxzZTtcbiAgICBfdGhpcy5fcGVuZGluZ0xvY2F0aW9uID0gbnVsbDtcblxuICAgIGlmICghcHJvcHMuc3RhdGljQ29udGV4dCkge1xuICAgICAgX3RoaXMudW5saXN0ZW4gPSBwcm9wcy5oaXN0b3J5Lmxpc3RlbihmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgICAgaWYgKF90aGlzLl9pc01vdW50ZWQpIHtcbiAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpcy5fcGVuZGluZ0xvY2F0aW9uID0gbG9jYXRpb247XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuX2lzTW91bnRlZCA9IHRydWU7XG5cbiAgICBpZiAodGhpcy5fcGVuZGluZ0xvY2F0aW9uKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgbG9jYXRpb246IHRoaXMuX3BlbmRpbmdMb2NhdGlvblxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmICh0aGlzLnVubGlzdGVuKSB0aGlzLnVubGlzdGVuKCk7XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlbiB8fCBudWxsLFxuICAgICAgdmFsdWU6IHtcbiAgICAgICAgaGlzdG9yeTogdGhpcy5wcm9wcy5oaXN0b3J5LFxuICAgICAgICBsb2NhdGlvbjogdGhpcy5zdGF0ZS5sb2NhdGlvbixcbiAgICAgICAgbWF0Y2g6IFJvdXRlci5jb21wdXRlUm9vdE1hdGNoKHRoaXMuc3RhdGUubG9jYXRpb24ucGF0aG5hbWUpLFxuICAgICAgICBzdGF0aWNDb250ZXh0OiB0aGlzLnByb3BzLnN0YXRpY0NvbnRleHRcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBzdGF0aWNDb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAocHJldlByb3BzKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhwcmV2UHJvcHMuaGlzdG9yeSA9PT0gdGhpcy5wcm9wcy5oaXN0b3J5LCBcIllvdSBjYW5ub3QgY2hhbmdlIDxSb3V0ZXIgaGlzdG9yeT5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCBzdG9yZXMgbG9jYXRpb24gaW4gbWVtb3J5LlxuICovXG5cbnZhciBNZW1vcnlSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoTWVtb3J5Um91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNZW1vcnlSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZU1lbW9yeUhpc3RvcnkoX3RoaXMucHJvcHMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBNZW1vcnlSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgICBoaXN0b3J5OiB0aGlzLmhpc3RvcnksXG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBNZW1vcnlSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTWVtb3J5Um91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBpbml0aWFsRW50cmllczogUHJvcFR5cGVzLmFycmF5LFxuICAgIGluaXRpYWxJbmRleDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBrZXlMZW5ndGg6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG4gIH07XG5cbiAgTWVtb3J5Um91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPE1lbW9yeVJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IE1lbW9yeVJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG52YXIgTGlmZWN5Y2xlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKExpZmVjeWNsZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTGlmZWN5Y2xlKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBMaWZlY3ljbGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGlmICh0aGlzLnByb3BzLm9uTW91bnQpIHRoaXMucHJvcHMub25Nb3VudC5jYWxsKHRoaXMsIHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25VcGRhdGUpIHRoaXMucHJvcHMub25VcGRhdGUuY2FsbCh0aGlzLCB0aGlzLCBwcmV2UHJvcHMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmICh0aGlzLnByb3BzLm9uVW5tb3VudCkgdGhpcy5wcm9wcy5vblVubW91bnQuY2FsbCh0aGlzLCB0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBMaWZlY3ljbGU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHByb21wdGluZyB0aGUgdXNlciBiZWZvcmUgbmF2aWdhdGluZyBhd2F5IGZyb20gYSBzY3JlZW4uXG4gKi9cblxuZnVuY3Rpb24gUHJvbXB0KF9yZWYpIHtcbiAgdmFyIG1lc3NhZ2UgPSBfcmVmLm1lc3NhZ2UsXG4gICAgICBfcmVmJHdoZW4gPSBfcmVmLndoZW4sXG4gICAgICB3aGVuID0gX3JlZiR3aGVuID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZiR3aGVuO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8UHJvbXB0PiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGlmICghd2hlbiB8fCBjb250ZXh0LnN0YXRpY0NvbnRleHQpIHJldHVybiBudWxsO1xuICAgIHZhciBtZXRob2QgPSBjb250ZXh0Lmhpc3RvcnkuYmxvY2s7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGlmZWN5Y2xlLCB7XG4gICAgICBvbk1vdW50OiBmdW5jdGlvbiBvbk1vdW50KHNlbGYpIHtcbiAgICAgICAgc2VsZi5yZWxlYXNlID0gbWV0aG9kKG1lc3NhZ2UpO1xuICAgICAgfSxcbiAgICAgIG9uVXBkYXRlOiBmdW5jdGlvbiBvblVwZGF0ZShzZWxmLCBwcmV2UHJvcHMpIHtcbiAgICAgICAgaWYgKHByZXZQcm9wcy5tZXNzYWdlICE9PSBtZXNzYWdlKSB7XG4gICAgICAgICAgc2VsZi5yZWxlYXNlKCk7XG4gICAgICAgICAgc2VsZi5yZWxlYXNlID0gbWV0aG9kKG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb25Vbm1vdW50OiBmdW5jdGlvbiBvblVubW91bnQoc2VsZikge1xuICAgICAgICBzZWxmLnJlbGVhc2UoKTtcbiAgICAgIH0sXG4gICAgICBtZXNzYWdlOiBtZXNzYWdlXG4gICAgfSk7XG4gIH0pO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIHZhciBtZXNzYWdlVHlwZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuc3RyaW5nXSk7XG4gIFByb21wdC5wcm9wVHlwZXMgPSB7XG4gICAgd2hlbjogUHJvcFR5cGVzLmJvb2wsXG4gICAgbWVzc2FnZTogbWVzc2FnZVR5cGUuaXNSZXF1aXJlZFxuICB9O1xufVxuXG52YXIgY2FjaGUgPSB7fTtcbnZhciBjYWNoZUxpbWl0ID0gMTAwMDA7XG52YXIgY2FjaGVDb3VudCA9IDA7XG5cbmZ1bmN0aW9uIGNvbXBpbGVQYXRoKHBhdGgpIHtcbiAgaWYgKGNhY2hlW3BhdGhdKSByZXR1cm4gY2FjaGVbcGF0aF07XG4gIHZhciBnZW5lcmF0b3IgPSBwYXRoVG9SZWdleHAuY29tcGlsZShwYXRoKTtcblxuICBpZiAoY2FjaGVDb3VudCA8IGNhY2hlTGltaXQpIHtcbiAgICBjYWNoZVtwYXRoXSA9IGdlbmVyYXRvcjtcbiAgICBjYWNoZUNvdW50Kys7XG4gIH1cblxuICByZXR1cm4gZ2VuZXJhdG9yO1xufVxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBnZW5lcmF0aW5nIGEgVVJMIHBhdGhuYW1lIGZyb20gYSBwYXRoIGFuZCBwYXJhbWV0ZXJzLlxuICovXG5cblxuZnVuY3Rpb24gZ2VuZXJhdGVQYXRoKHBhdGgsIHBhcmFtcykge1xuICBpZiAocGF0aCA9PT0gdm9pZCAwKSB7XG4gICAgcGF0aCA9IFwiL1wiO1xuICB9XG5cbiAgaWYgKHBhcmFtcyA9PT0gdm9pZCAwKSB7XG4gICAgcGFyYW1zID0ge307XG4gIH1cblxuICByZXR1cm4gcGF0aCA9PT0gXCIvXCIgPyBwYXRoIDogY29tcGlsZVBhdGgocGF0aCkocGFyYW1zLCB7XG4gICAgcHJldHR5OiB0cnVlXG4gIH0pO1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBuYXZpZ2F0aW5nIHByb2dyYW1tYXRpY2FsbHkgd2l0aCBhIGNvbXBvbmVudC5cbiAqL1xuXG5mdW5jdGlvbiBSZWRpcmVjdChfcmVmKSB7XG4gIHZhciBjb21wdXRlZE1hdGNoID0gX3JlZi5jb21wdXRlZE1hdGNoLFxuICAgICAgdG8gPSBfcmVmLnRvLFxuICAgICAgX3JlZiRwdXNoID0gX3JlZi5wdXNoLFxuICAgICAgcHVzaCA9IF9yZWYkcHVzaCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJHB1c2g7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxSZWRpcmVjdD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgaGlzdG9yeSA9IGNvbnRleHQuaGlzdG9yeSxcbiAgICAgICAgc3RhdGljQ29udGV4dCA9IGNvbnRleHQuc3RhdGljQ29udGV4dDtcbiAgICB2YXIgbWV0aG9kID0gcHVzaCA/IGhpc3RvcnkucHVzaCA6IGhpc3RvcnkucmVwbGFjZTtcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihjb21wdXRlZE1hdGNoID8gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gZ2VuZXJhdGVQYXRoKHRvLCBjb21wdXRlZE1hdGNoLnBhcmFtcykgOiBfZXh0ZW5kcyh7fSwgdG8sIHtcbiAgICAgIHBhdGhuYW1lOiBnZW5lcmF0ZVBhdGgodG8ucGF0aG5hbWUsIGNvbXB1dGVkTWF0Y2gucGFyYW1zKVxuICAgIH0pIDogdG8pOyAvLyBXaGVuIHJlbmRlcmluZyBpbiBhIHN0YXRpYyBjb250ZXh0LFxuICAgIC8vIHNldCB0aGUgbmV3IGxvY2F0aW9uIGltbWVkaWF0ZWx5LlxuXG4gICAgaWYgKHN0YXRpY0NvbnRleHQpIHtcbiAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChMaWZlY3ljbGUsIHtcbiAgICAgIG9uTW91bnQ6IGZ1bmN0aW9uIG9uTW91bnQoKSB7XG4gICAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICB9LFxuICAgICAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKHNlbGYsIHByZXZQcm9wcykge1xuICAgICAgICB2YXIgcHJldkxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocHJldlByb3BzLnRvKTtcblxuICAgICAgICBpZiAoIWxvY2F0aW9uc0FyZUVxdWFsKHByZXZMb2NhdGlvbiwgX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgICAgICAga2V5OiBwcmV2TG9jYXRpb24ua2V5XG4gICAgICAgIH0pKSkge1xuICAgICAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB0bzogdG9cbiAgICB9KTtcbiAgfSk7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUmVkaXJlY3QucHJvcFR5cGVzID0ge1xuICAgIHB1c2g6IFByb3BUeXBlcy5ib29sLFxuICAgIGZyb206IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdG86IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKS5pc1JlcXVpcmVkXG4gIH07XG59XG5cbnZhciBjYWNoZSQxID0ge307XG52YXIgY2FjaGVMaW1pdCQxID0gMTAwMDA7XG52YXIgY2FjaGVDb3VudCQxID0gMDtcblxuZnVuY3Rpb24gY29tcGlsZVBhdGgkMShwYXRoLCBvcHRpb25zKSB7XG4gIHZhciBjYWNoZUtleSA9IFwiXCIgKyBvcHRpb25zLmVuZCArIG9wdGlvbnMuc3RyaWN0ICsgb3B0aW9ucy5zZW5zaXRpdmU7XG4gIHZhciBwYXRoQ2FjaGUgPSBjYWNoZSQxW2NhY2hlS2V5XSB8fCAoY2FjaGUkMVtjYWNoZUtleV0gPSB7fSk7XG4gIGlmIChwYXRoQ2FjaGVbcGF0aF0pIHJldHVybiBwYXRoQ2FjaGVbcGF0aF07XG4gIHZhciBrZXlzID0gW107XG4gIHZhciByZWdleHAgPSBwYXRoVG9SZWdleHAocGF0aCwga2V5cywgb3B0aW9ucyk7XG4gIHZhciByZXN1bHQgPSB7XG4gICAgcmVnZXhwOiByZWdleHAsXG4gICAga2V5czoga2V5c1xuICB9O1xuXG4gIGlmIChjYWNoZUNvdW50JDEgPCBjYWNoZUxpbWl0JDEpIHtcbiAgICBwYXRoQ2FjaGVbcGF0aF0gPSByZXN1bHQ7XG4gICAgY2FjaGVDb3VudCQxKys7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIFVSTCBwYXRobmFtZSB0byBhIHBhdGguXG4gKi9cblxuXG5mdW5jdGlvbiBtYXRjaFBhdGgocGF0aG5hbWUsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheS5pc0FycmF5KG9wdGlvbnMpKSB7XG4gICAgb3B0aW9ucyA9IHtcbiAgICAgIHBhdGg6IG9wdGlvbnNcbiAgICB9O1xuICB9XG5cbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIHBhdGggPSBfb3B0aW9ucy5wYXRoLFxuICAgICAgX29wdGlvbnMkZXhhY3QgPSBfb3B0aW9ucy5leGFjdCxcbiAgICAgIGV4YWN0ID0gX29wdGlvbnMkZXhhY3QgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkZXhhY3QsXG4gICAgICBfb3B0aW9ucyRzdHJpY3QgPSBfb3B0aW9ucy5zdHJpY3QsXG4gICAgICBzdHJpY3QgPSBfb3B0aW9ucyRzdHJpY3QgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkc3RyaWN0LFxuICAgICAgX29wdGlvbnMkc2Vuc2l0aXZlID0gX29wdGlvbnMuc2Vuc2l0aXZlLFxuICAgICAgc2Vuc2l0aXZlID0gX29wdGlvbnMkc2Vuc2l0aXZlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJHNlbnNpdGl2ZTtcbiAgdmFyIHBhdGhzID0gW10uY29uY2F0KHBhdGgpO1xuICByZXR1cm4gcGF0aHMucmVkdWNlKGZ1bmN0aW9uIChtYXRjaGVkLCBwYXRoKSB7XG4gICAgaWYgKCFwYXRoICYmIHBhdGggIT09IFwiXCIpIHJldHVybiBudWxsO1xuICAgIGlmIChtYXRjaGVkKSByZXR1cm4gbWF0Y2hlZDtcblxuICAgIHZhciBfY29tcGlsZVBhdGggPSBjb21waWxlUGF0aCQxKHBhdGgsIHtcbiAgICAgIGVuZDogZXhhY3QsXG4gICAgICBzdHJpY3Q6IHN0cmljdCxcbiAgICAgIHNlbnNpdGl2ZTogc2Vuc2l0aXZlXG4gICAgfSksXG4gICAgICAgIHJlZ2V4cCA9IF9jb21waWxlUGF0aC5yZWdleHAsXG4gICAgICAgIGtleXMgPSBfY29tcGlsZVBhdGgua2V5cztcblxuICAgIHZhciBtYXRjaCA9IHJlZ2V4cC5leGVjKHBhdGhuYW1lKTtcbiAgICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDtcbiAgICB2YXIgdXJsID0gbWF0Y2hbMF0sXG4gICAgICAgIHZhbHVlcyA9IG1hdGNoLnNsaWNlKDEpO1xuICAgIHZhciBpc0V4YWN0ID0gcGF0aG5hbWUgPT09IHVybDtcbiAgICBpZiAoZXhhY3QgJiYgIWlzRXhhY3QpIHJldHVybiBudWxsO1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoOiBwYXRoLFxuICAgICAgLy8gdGhlIHBhdGggdXNlZCB0byBtYXRjaFxuICAgICAgdXJsOiBwYXRoID09PSBcIi9cIiAmJiB1cmwgPT09IFwiXCIgPyBcIi9cIiA6IHVybCxcbiAgICAgIC8vIHRoZSBtYXRjaGVkIHBvcnRpb24gb2YgdGhlIFVSTFxuICAgICAgaXNFeGFjdDogaXNFeGFjdCxcbiAgICAgIC8vIHdoZXRoZXIgb3Igbm90IHdlIG1hdGNoZWQgZXhhY3RseVxuICAgICAgcGFyYW1zOiBrZXlzLnJlZHVjZShmdW5jdGlvbiAobWVtbywga2V5LCBpbmRleCkge1xuICAgICAgICBtZW1vW2tleS5uYW1lXSA9IHZhbHVlc1tpbmRleF07XG4gICAgICAgIHJldHVybiBtZW1vO1xuICAgICAgfSwge30pXG4gICAgfTtcbiAgfSwgbnVsbCk7XG59XG5cbmZ1bmN0aW9uIGlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikge1xuICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4uY291bnQoY2hpbGRyZW4pID09PSAwO1xufVxuXG5mdW5jdGlvbiBldmFsQ2hpbGRyZW5EZXYoY2hpbGRyZW4sIHByb3BzLCBwYXRoKSB7XG4gIHZhciB2YWx1ZSA9IGNoaWxkcmVuKHByb3BzKTtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyh2YWx1ZSAhPT0gdW5kZWZpbmVkLCBcIllvdSByZXR1cm5lZCBgdW5kZWZpbmVkYCBmcm9tIHRoZSBgY2hpbGRyZW5gIGZ1bmN0aW9uIG9mIFwiICsgKFwiPFJvdXRlXCIgKyAocGF0aCA/IFwiIHBhdGg9XFxcIlwiICsgcGF0aCArIFwiXFxcIlwiIDogXCJcIikgKyBcIj4sIGJ1dCB5b3UgXCIpICsgXCJzaG91bGQgaGF2ZSByZXR1cm5lZCBhIFJlYWN0IGVsZW1lbnQgb3IgYG51bGxgXCIpIDogdm9pZCAwO1xuICByZXR1cm4gdmFsdWUgfHwgbnVsbDtcbn1cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgc2luZ2xlIHBhdGggYW5kIHJlbmRlcmluZy5cbiAqL1xuXG5cbnZhciBSb3V0ZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShSb3V0ZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUm91dGUoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFJvdXRlLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCQxKSB7XG4gICAgICAhY29udGV4dCQxID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGU+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB2YXIgbG9jYXRpb24gPSBfdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCBjb250ZXh0JDEubG9jYXRpb247XG4gICAgICB2YXIgbWF0Y2ggPSBfdGhpcy5wcm9wcy5jb21wdXRlZE1hdGNoID8gX3RoaXMucHJvcHMuY29tcHV0ZWRNYXRjaCAvLyA8U3dpdGNoPiBhbHJlYWR5IGNvbXB1dGVkIHRoZSBtYXRjaCBmb3IgdXNcbiAgICAgIDogX3RoaXMucHJvcHMucGF0aCA/IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgX3RoaXMucHJvcHMpIDogY29udGV4dCQxLm1hdGNoO1xuXG4gICAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgY29udGV4dCQxLCB7XG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgbWF0Y2g6IG1hdGNoXG4gICAgICB9KTtcblxuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICBjb21wb25lbnQgPSBfdGhpcyRwcm9wcy5jb21wb25lbnQsXG4gICAgICAgICAgcmVuZGVyID0gX3RoaXMkcHJvcHMucmVuZGVyOyAvLyBQcmVhY3QgdXNlcyBhbiBlbXB0eSBhcnJheSBhcyBjaGlsZHJlbiBieVxuICAgICAgLy8gZGVmYXVsdCwgc28gdXNlIG51bGwgaWYgdGhhdCdzIHRoZSBjYXNlLlxuXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikgJiYgY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGNoaWxkcmVuID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogcHJvcHNcbiAgICAgIH0sIHByb3BzLm1hdGNoID8gY2hpbGRyZW4gPyB0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIiA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGV2YWxDaGlsZHJlbkRldihjaGlsZHJlbiwgcHJvcHMsIF90aGlzLnByb3BzLnBhdGgpIDogY2hpbGRyZW4ocHJvcHMpIDogY2hpbGRyZW4gOiBjb21wb25lbnQgPyBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgcHJvcHMpIDogcmVuZGVyID8gcmVuZGVyKHByb3BzKSA6IG51bGwgOiB0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIiA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGV2YWxDaGlsZHJlbkRldihjaGlsZHJlbiwgcHJvcHMsIF90aGlzLnByb3BzLnBhdGgpIDogY2hpbGRyZW4ocHJvcHMpIDogbnVsbCk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFJvdXRlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFJvdXRlLnByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5ub2RlXSksXG4gICAgY29tcG9uZW50OiBmdW5jdGlvbiBjb21wb25lbnQocHJvcHMsIHByb3BOYW1lKSB7XG4gICAgICBpZiAocHJvcHNbcHJvcE5hbWVdICYmICFpc1ZhbGlkRWxlbWVudFR5cGUocHJvcHNbcHJvcE5hbWVdKSkge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKFwiSW52YWxpZCBwcm9wICdjb21wb25lbnQnIHN1cHBsaWVkIHRvICdSb3V0ZSc6IHRoZSBwcm9wIGlzIG5vdCBhIHZhbGlkIFJlYWN0IGNvbXBvbmVudFwiKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGV4YWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBwYXRoOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc3RyaW5nKV0pLFxuICAgIHJlbmRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgc2Vuc2l0aXZlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzdHJpY3Q6IFByb3BUeXBlcy5ib29sXG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbikgJiYgdGhpcy5wcm9wcy5jb21wb25lbnQpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIGNvbXBvbmVudD4gd2lsbCBiZSBpZ25vcmVkXCIpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbikgJiYgdGhpcy5wcm9wcy5yZW5kZXIpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgcmVuZGVyPiBhbmQgPFJvdXRlIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIHJlbmRlcj4gd2lsbCBiZSBpZ25vcmVkXCIpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmNvbXBvbmVudCAmJiB0aGlzLnByb3BzLnJlbmRlciksIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSBjb21wb25lbnQ+IGFuZCA8Um91dGUgcmVuZGVyPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIHJlbmRlcj4gd2lsbCBiZSBpZ25vcmVkXCIpIDogdm9pZCAwO1xuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAocHJldlByb3BzKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMubG9jYXRpb24gJiYgIXByZXZQcm9wcy5sb2NhdGlvbiksICc8Um91dGU+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgaW5pdGlhbGx5IHVzZWQgbm8gXCJsb2NhdGlvblwiIHByb3AgYW5kIHRoZW4gcHJvdmlkZWQgb25lIG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJykgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKCF0aGlzLnByb3BzLmxvY2F0aW9uICYmIHByZXZQcm9wcy5sb2NhdGlvbiksICc8Um91dGU+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gY29udHJvbGxlZCB0byB1bmNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgcHJvdmlkZWQgYSBcImxvY2F0aW9uXCIgcHJvcCBpbml0aWFsbHkgYnV0IG9taXR0ZWQgaXQgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYWRkTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSBcIi9cIiA/IHBhdGggOiBcIi9cIiArIHBhdGg7XG59XG5cbmZ1bmN0aW9uIGFkZEJhc2VuYW1lKGJhc2VuYW1lLCBsb2NhdGlvbikge1xuICBpZiAoIWJhc2VuYW1lKSByZXR1cm4gbG9jYXRpb247XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICBwYXRobmFtZTogYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lKSArIGxvY2F0aW9uLnBhdGhuYW1lXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzdHJpcEJhc2VuYW1lKGJhc2VuYW1lLCBsb2NhdGlvbikge1xuICBpZiAoIWJhc2VuYW1lKSByZXR1cm4gbG9jYXRpb247XG4gIHZhciBiYXNlID0gYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lKTtcbiAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmluZGV4T2YoYmFzZSkgIT09IDApIHJldHVybiBsb2NhdGlvbjtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZS5zdWJzdHIoYmFzZS5sZW5ndGgpXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVVUkwobG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiBsb2NhdGlvbiA9PT0gXCJzdHJpbmdcIiA/IGxvY2F0aW9uIDogY3JlYXRlUGF0aChsb2NhdGlvbik7XG59XG5cbmZ1bmN0aW9uIHN0YXRpY0hhbmRsZXIobWV0aG9kTmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IGNhbm5vdCAlcyB3aXRoIDxTdGF0aWNSb3V0ZXI+XCIsIG1ldGhvZE5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuLyoqXG4gKiBUaGUgcHVibGljIHRvcC1sZXZlbCBBUEkgZm9yIGEgXCJzdGF0aWNcIiA8Um91dGVyPiwgc28tY2FsbGVkIGJlY2F1c2UgaXRcbiAqIGNhbid0IGFjdHVhbGx5IGNoYW5nZSB0aGUgY3VycmVudCBsb2NhdGlvbi4gSW5zdGVhZCwgaXQganVzdCByZWNvcmRzXG4gKiBsb2NhdGlvbiBjaGFuZ2VzIGluIGEgY29udGV4dCBvYmplY3QuIFVzZWZ1bCBtYWlubHkgaW4gdGVzdGluZyBhbmRcbiAqIHNlcnZlci1yZW5kZXJpbmcgc2NlbmFyaW9zLlxuICovXG5cblxudmFyIFN0YXRpY1JvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShTdGF0aWNSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFN0YXRpY1JvdXRlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcblxuICAgIF90aGlzLmhhbmRsZVB1c2ggPSBmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgIHJldHVybiBfdGhpcy5uYXZpZ2F0ZVRvKGxvY2F0aW9uLCBcIlBVU0hcIik7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZVJlcGxhY2UgPSBmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgIHJldHVybiBfdGhpcy5uYXZpZ2F0ZVRvKGxvY2F0aW9uLCBcIlJFUExBQ0VcIik7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUxpc3RlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBub29wO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVCbG9jayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBub29wO1xuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU3RhdGljUm91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ubmF2aWdhdGVUbyA9IGZ1bmN0aW9uIG5hdmlnYXRlVG8obG9jYXRpb24sIGFjdGlvbikge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIF90aGlzJHByb3BzJGJhc2VuYW1lID0gX3RoaXMkcHJvcHMuYmFzZW5hbWUsXG4gICAgICAgIGJhc2VuYW1lID0gX3RoaXMkcHJvcHMkYmFzZW5hbWUgPT09IHZvaWQgMCA/IFwiXCIgOiBfdGhpcyRwcm9wcyRiYXNlbmFtZSxcbiAgICAgICAgX3RoaXMkcHJvcHMkY29udGV4dCA9IF90aGlzJHByb3BzLmNvbnRleHQsXG4gICAgICAgIGNvbnRleHQgPSBfdGhpcyRwcm9wcyRjb250ZXh0ID09PSB2b2lkIDAgPyB7fSA6IF90aGlzJHByb3BzJGNvbnRleHQ7XG4gICAgY29udGV4dC5hY3Rpb24gPSBhY3Rpb247XG4gICAgY29udGV4dC5sb2NhdGlvbiA9IGFkZEJhc2VuYW1lKGJhc2VuYW1lLCBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikpO1xuICAgIGNvbnRleHQudXJsID0gY3JlYXRlVVJMKGNvbnRleHQubG9jYXRpb24pO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgIF90aGlzJHByb3BzMiRiYXNlbmFtZSA9IF90aGlzJHByb3BzMi5iYXNlbmFtZSxcbiAgICAgICAgYmFzZW5hbWUgPSBfdGhpcyRwcm9wczIkYmFzZW5hbWUgPT09IHZvaWQgMCA/IFwiXCIgOiBfdGhpcyRwcm9wczIkYmFzZW5hbWUsXG4gICAgICAgIF90aGlzJHByb3BzMiRjb250ZXh0ID0gX3RoaXMkcHJvcHMyLmNvbnRleHQsXG4gICAgICAgIGNvbnRleHQgPSBfdGhpcyRwcm9wczIkY29udGV4dCA9PT0gdm9pZCAwID8ge30gOiBfdGhpcyRwcm9wczIkY29udGV4dCxcbiAgICAgICAgX3RoaXMkcHJvcHMyJGxvY2F0aW9uID0gX3RoaXMkcHJvcHMyLmxvY2F0aW9uLFxuICAgICAgICBsb2NhdGlvbiA9IF90aGlzJHByb3BzMiRsb2NhdGlvbiA9PT0gdm9pZCAwID8gXCIvXCIgOiBfdGhpcyRwcm9wczIkbG9jYXRpb24sXG4gICAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wczIsIFtcImJhc2VuYW1lXCIsIFwiY29udGV4dFwiLCBcImxvY2F0aW9uXCJdKTtcblxuICAgIHZhciBoaXN0b3J5ID0ge1xuICAgICAgY3JlYXRlSHJlZjogZnVuY3Rpb24gY3JlYXRlSHJlZihwYXRoKSB7XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUgKyBjcmVhdGVVUkwocGF0aCkpO1xuICAgICAgfSxcbiAgICAgIGFjdGlvbjogXCJQT1BcIixcbiAgICAgIGxvY2F0aW9uOiBzdHJpcEJhc2VuYW1lKGJhc2VuYW1lLCBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikpLFxuICAgICAgcHVzaDogdGhpcy5oYW5kbGVQdXNoLFxuICAgICAgcmVwbGFjZTogdGhpcy5oYW5kbGVSZXBsYWNlLFxuICAgICAgZ286IHN0YXRpY0hhbmRsZXIoXCJnb1wiKSxcbiAgICAgIGdvQmFjazogc3RhdGljSGFuZGxlcihcImdvQmFja1wiKSxcbiAgICAgIGdvRm9yd2FyZDogc3RhdGljSGFuZGxlcihcImdvRm9yd2FyZFwiKSxcbiAgICAgIGxpc3RlbjogdGhpcy5oYW5kbGVMaXN0ZW4sXG4gICAgICBibG9jazogdGhpcy5oYW5kbGVCbG9ja1xuICAgIH07XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgaGlzdG9yeTogaGlzdG9yeSxcbiAgICAgIHN0YXRpY0NvbnRleHQ6IGNvbnRleHRcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIFN0YXRpY1JvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBTdGF0aWNSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNvbnRleHQ6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKVxuICB9O1xuXG4gIFN0YXRpY1JvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxTdGF0aWNSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBTdGF0aWNSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcmVuZGVyaW5nIHRoZSBmaXJzdCA8Um91dGU+IHRoYXQgbWF0Y2hlcy5cbiAqL1xuXG52YXIgU3dpdGNoID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFN3aXRjaCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU3dpdGNoKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTd2l0Y2gucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFN3aXRjaD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHZhciBsb2NhdGlvbiA9IF90aGlzLnByb3BzLmxvY2F0aW9uIHx8IGNvbnRleHQubG9jYXRpb247XG4gICAgICB2YXIgZWxlbWVudCwgbWF0Y2g7IC8vIFdlIHVzZSBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoIGluc3RlYWQgb2YgUmVhY3QuQ2hpbGRyZW4udG9BcnJheSgpLmZpbmQoKVxuICAgICAgLy8gaGVyZSBiZWNhdXNlIHRvQXJyYXkgYWRkcyBrZXlzIHRvIGFsbCBjaGlsZCBlbGVtZW50cyBhbmQgd2UgZG8gbm90IHdhbnRcbiAgICAgIC8vIHRvIHRyaWdnZXIgYW4gdW5tb3VudC9yZW1vdW50IGZvciB0d28gPFJvdXRlPnMgdGhhdCByZW5kZXIgdGhlIHNhbWVcbiAgICAgIC8vIGNvbXBvbmVudCBhdCBkaWZmZXJlbnQgVVJMcy5cblxuICAgICAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChfdGhpcy5wcm9wcy5jaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIGlmIChtYXRjaCA9PSBudWxsICYmIFJlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgICAgIGVsZW1lbnQgPSBjaGlsZDtcbiAgICAgICAgICB2YXIgcGF0aCA9IGNoaWxkLnByb3BzLnBhdGggfHwgY2hpbGQucHJvcHMuZnJvbTtcbiAgICAgICAgICBtYXRjaCA9IHBhdGggPyBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIF9leHRlbmRzKHt9LCBjaGlsZC5wcm9wcywge1xuICAgICAgICAgICAgcGF0aDogcGF0aFxuICAgICAgICAgIH0pKSA6IGNvbnRleHQubWF0Y2g7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG1hdGNoID8gUmVhY3QuY2xvbmVFbGVtZW50KGVsZW1lbnQsIHtcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBjb21wdXRlZE1hdGNoOiBtYXRjaFxuICAgICAgfSkgOiBudWxsO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBTd2l0Y2g7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgU3dpdGNoLnByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3RcbiAgfTtcblxuICBTd2l0Y2gucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIChwcmV2UHJvcHMpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5sb2NhdGlvbiAmJiAhcHJldlByb3BzLmxvY2F0aW9uKSwgJzxTd2l0Y2g+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgaW5pdGlhbGx5IHVzZWQgbm8gXCJsb2NhdGlvblwiIHByb3AgYW5kIHRoZW4gcHJvdmlkZWQgb25lIG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJykgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKCF0aGlzLnByb3BzLmxvY2F0aW9uICYmIHByZXZQcm9wcy5sb2NhdGlvbiksICc8U3dpdGNoPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJykgOiB2b2lkIDA7XG4gIH07XG59XG5cbi8qKlxuICogQSBwdWJsaWMgaGlnaGVyLW9yZGVyIGNvbXBvbmVudCB0byBhY2Nlc3MgdGhlIGltcGVyYXRpdmUgQVBJXG4gKi9cblxuZnVuY3Rpb24gd2l0aFJvdXRlcihDb21wb25lbnQpIHtcbiAgdmFyIGRpc3BsYXlOYW1lID0gXCJ3aXRoUm91dGVyKFwiICsgKENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSkgKyBcIilcIjtcblxuICB2YXIgQyA9IGZ1bmN0aW9uIEMocHJvcHMpIHtcbiAgICB2YXIgd3JhcHBlZENvbXBvbmVudFJlZiA9IHByb3BzLndyYXBwZWRDb21wb25lbnRSZWYsXG4gICAgICAgIHJlbWFpbmluZ1Byb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIFtcIndyYXBwZWRDb21wb25lbnRSZWZcIl0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8XCIgKyBkaXNwbGF5TmFtZSArIFwiIC8+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCByZW1haW5pbmdQcm9wcywgY29udGV4dCwge1xuICAgICAgICByZWY6IHdyYXBwZWRDb21wb25lbnRSZWZcbiAgICAgIH0pKTtcbiAgICB9KTtcbiAgfTtcblxuICBDLmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gIEMuV3JhcHBlZENvbXBvbmVudCA9IENvbXBvbmVudDtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgQy5wcm9wVHlwZXMgPSB7XG4gICAgICB3cmFwcGVkQ29tcG9uZW50UmVmOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBob2lzdFN0YXRpY3MoQywgQ29tcG9uZW50KTtcbn1cblxudmFyIHVzZUNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0O1xuZnVuY3Rpb24gdXNlSGlzdG9yeSgpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICEodHlwZW9mIHVzZUNvbnRleHQgPT09IFwiZnVuY3Rpb25cIikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IG11c3QgdXNlIFJlYWN0ID49IDE2LjggaW4gb3JkZXIgdG8gdXNlIHVzZUhpc3RvcnkoKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cblxuICByZXR1cm4gdXNlQ29udGV4dChjb250ZXh0KS5oaXN0b3J5O1xufVxuZnVuY3Rpb24gdXNlTG9jYXRpb24oKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VMb2NhdGlvbigpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHJldHVybiB1c2VDb250ZXh0KGNvbnRleHQpLmxvY2F0aW9uO1xufVxuZnVuY3Rpb24gdXNlUGFyYW1zKCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgISh0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlUGFyYW1zKClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgdmFyIG1hdGNoID0gdXNlQ29udGV4dChjb250ZXh0KS5tYXRjaDtcbiAgcmV0dXJuIG1hdGNoID8gbWF0Y2gucGFyYW1zIDoge307XG59XG5mdW5jdGlvbiB1c2VSb3V0ZU1hdGNoKHBhdGgpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICEodHlwZW9mIHVzZUNvbnRleHQgPT09IFwiZnVuY3Rpb25cIikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IG11c3QgdXNlIFJlYWN0ID49IDE2LjggaW4gb3JkZXIgdG8gdXNlIHVzZVJvdXRlTWF0Y2goKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cblxuICByZXR1cm4gcGF0aCA/IG1hdGNoUGF0aCh1c2VMb2NhdGlvbigpLnBhdGhuYW1lLCBwYXRoKSA6IHVzZUNvbnRleHQoY29udGV4dCkubWF0Y2g7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgZ2xvYmFsID0gd2luZG93O1xuICAgIHZhciBrZXkgPSBcIl9fcmVhY3Rfcm91dGVyX2J1aWxkX19cIjtcbiAgICB2YXIgYnVpbGROYW1lcyA9IHtcbiAgICAgIGNqczogXCJDb21tb25KU1wiLFxuICAgICAgZXNtOiBcIkVTIG1vZHVsZXNcIixcbiAgICAgIHVtZDogXCJVTURcIlxuICAgIH07XG5cbiAgICBpZiAoZ2xvYmFsW2tleV0gJiYgZ2xvYmFsW2tleV0gIT09IFwiZXNtXCIpIHtcbiAgICAgIHZhciBpbml0aWFsQnVpbGROYW1lID0gYnVpbGROYW1lc1tnbG9iYWxba2V5XV07XG4gICAgICB2YXIgc2Vjb25kYXJ5QnVpbGROYW1lID0gYnVpbGROYW1lc1tcImVzbVwiXTsgLy8gVE9ETzogQWRkIGxpbmsgdG8gYXJ0aWNsZSB0aGF0IGV4cGxhaW5zIGluIGRldGFpbCBob3cgdG8gYXZvaWRcbiAgICAgIC8vIGxvYWRpbmcgMiBkaWZmZXJlbnQgYnVpbGRzLlxuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgYXJlIGxvYWRpbmcgdGhlIFwiICsgc2Vjb25kYXJ5QnVpbGROYW1lICsgXCIgYnVpbGQgb2YgUmVhY3QgUm91dGVyIFwiICsgKFwib24gYSBwYWdlIHRoYXQgaXMgYWxyZWFkeSBydW5uaW5nIHRoZSBcIiArIGluaXRpYWxCdWlsZE5hbWUgKyBcIiBcIikgKyBcImJ1aWxkLCBzbyB0aGluZ3Mgd29uJ3Qgd29yayByaWdodC5cIik7XG4gICAgfVxuXG4gICAgZ2xvYmFsW2tleV0gPSBcImVzbVwiO1xuICB9XG59XG5cbmV4cG9ydCB7IE1lbW9yeVJvdXRlciwgUHJvbXB0LCBSZWRpcmVjdCwgUm91dGUsIFJvdXRlciwgU3RhdGljUm91dGVyLCBTd2l0Y2gsIGNvbnRleHQgYXMgX19Sb3V0ZXJDb250ZXh0LCBnZW5lcmF0ZVBhdGgsIG1hdGNoUGF0aCwgdXNlSGlzdG9yeSwgdXNlTG9jYXRpb24sIHVzZVBhcmFtcywgdXNlUm91dGVNYXRjaCwgd2l0aFJvdXRlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhY3Qtcm91dGVyLmpzLm1hcFxuIiwiaW1wb3J0IHsgUm91dGVyLCBfX1JvdXRlckNvbnRleHQsIG1hdGNoUGF0aCB9IGZyb20gJ3JlYWN0LXJvdXRlcic7XG5leHBvcnQgKiBmcm9tICdyZWFjdC1yb3V0ZXInO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNyZWF0ZUJyb3dzZXJIaXN0b3J5LCBjcmVhdGVIYXNoSGlzdG9yeSwgY3JlYXRlTG9jYXRpb24gfSBmcm9tICdoaXN0b3J5JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LWludmFyaWFudCc7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCB1c2VzIEhUTUw1IGhpc3RvcnkuXG4gKi9cblxudmFyIEJyb3dzZXJSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoQnJvd3NlclJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQnJvd3NlclJvdXRlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlQnJvd3Nlckhpc3RvcnkoX3RoaXMucHJvcHMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBCcm93c2VyUm91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgICAgaGlzdG9yeTogdGhpcy5oaXN0b3J5LFxuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gQnJvd3NlclJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBCcm93c2VyUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgZm9yY2VSZWZyZXNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBrZXlMZW5ndGg6IFByb3BUeXBlcy5udW1iZXJcbiAgfTtcblxuICBCcm93c2VyUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPEJyb3dzZXJSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBCcm93c2VyUm91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCB1c2VzIHdpbmRvdy5sb2NhdGlvbi5oYXNoLlxuICovXG5cbnZhciBIYXNoUm91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEhhc2hSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEhhc2hSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUhhc2hIaXN0b3J5KF90aGlzLnByb3BzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gSGFzaFJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIEhhc2hSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgSGFzaFJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIGhhc2hUeXBlOiBQcm9wVHlwZXMub25lT2YoW1wiaGFzaGJhbmdcIiwgXCJub3NsYXNoXCIsIFwic2xhc2hcIl0pXG4gIH07XG5cbiAgSGFzaFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxIYXNoUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgSGFzaFJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG52YXIgcmVzb2x2ZVRvTG9jYXRpb24gPSBmdW5jdGlvbiByZXNvbHZlVG9Mb2NhdGlvbih0bywgY3VycmVudExvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgdG8gPT09IFwiZnVuY3Rpb25cIiA/IHRvKGN1cnJlbnRMb2NhdGlvbikgOiB0bztcbn07XG52YXIgbm9ybWFsaXplVG9Mb2NhdGlvbiA9IGZ1bmN0aW9uIG5vcm1hbGl6ZVRvTG9jYXRpb24odG8sIGN1cnJlbnRMb2NhdGlvbikge1xuICByZXR1cm4gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gY3JlYXRlTG9jYXRpb24odG8sIG51bGwsIG51bGwsIGN1cnJlbnRMb2NhdGlvbikgOiB0bztcbn07XG5cbnZhciBmb3J3YXJkUmVmU2hpbSA9IGZ1bmN0aW9uIGZvcndhcmRSZWZTaGltKEMpIHtcbiAgcmV0dXJuIEM7XG59O1xuXG52YXIgZm9yd2FyZFJlZiA9IFJlYWN0LmZvcndhcmRSZWY7XG5cbmlmICh0eXBlb2YgZm9yd2FyZFJlZiA9PT0gXCJ1bmRlZmluZWRcIikge1xuICBmb3J3YXJkUmVmID0gZm9yd2FyZFJlZlNoaW07XG59XG5cbmZ1bmN0aW9uIGlzTW9kaWZpZWRFdmVudChldmVudCkge1xuICByZXR1cm4gISEoZXZlbnQubWV0YUtleSB8fCBldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5zaGlmdEtleSk7XG59XG5cbnZhciBMaW5rQW5jaG9yID0gZm9yd2FyZFJlZihmdW5jdGlvbiAoX3JlZiwgZm9yd2FyZGVkUmVmKSB7XG4gIHZhciBpbm5lclJlZiA9IF9yZWYuaW5uZXJSZWYsXG4gICAgICBuYXZpZ2F0ZSA9IF9yZWYubmF2aWdhdGUsXG4gICAgICBfb25DbGljayA9IF9yZWYub25DbGljayxcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJpbm5lclJlZlwiLCBcIm5hdmlnYXRlXCIsIFwib25DbGlja1wiXSk7XG5cbiAgdmFyIHRhcmdldCA9IHJlc3QudGFyZ2V0O1xuXG4gIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgb25DbGljazogZnVuY3Rpb24gb25DbGljayhldmVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKF9vbkNsaWNrKSBfb25DbGljayhldmVudCk7XG4gICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB0aHJvdyBleDtcbiAgICAgIH1cblxuICAgICAgaWYgKCFldmVudC5kZWZhdWx0UHJldmVudGVkICYmIC8vIG9uQ2xpY2sgcHJldmVudGVkIGRlZmF1bHRcbiAgICAgIGV2ZW50LmJ1dHRvbiA9PT0gMCAmJiAoIC8vIGlnbm9yZSBldmVyeXRoaW5nIGJ1dCBsZWZ0IGNsaWNrc1xuICAgICAgIXRhcmdldCB8fCB0YXJnZXQgPT09IFwiX3NlbGZcIikgJiYgLy8gbGV0IGJyb3dzZXIgaGFuZGxlIFwidGFyZ2V0PV9ibGFua1wiIGV0Yy5cbiAgICAgICFpc01vZGlmaWVkRXZlbnQoZXZlbnQpIC8vIGlnbm9yZSBjbGlja3Mgd2l0aCBtb2RpZmllciBrZXlzXG4gICAgICApIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIG5hdmlnYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gIH0pOyAvLyBSZWFjdCAxNSBjb21wYXRcblxuXG4gIGlmIChmb3J3YXJkUmVmU2hpbSAhPT0gZm9yd2FyZFJlZikge1xuICAgIHByb3BzLnJlZiA9IGZvcndhcmRlZFJlZiB8fCBpbm5lclJlZjtcbiAgfSBlbHNlIHtcbiAgICBwcm9wcy5yZWYgPSBpbm5lclJlZjtcbiAgfVxuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFwiYVwiLCBwcm9wcyk7XG59KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBMaW5rQW5jaG9yLmRpc3BsYXlOYW1lID0gXCJMaW5rQW5jaG9yXCI7XG59XG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgYSBoaXN0b3J5LWF3YXJlIDxhPi5cbiAqL1xuXG5cbnZhciBMaW5rID0gZm9yd2FyZFJlZihmdW5jdGlvbiAoX3JlZjIsIGZvcndhcmRlZFJlZikge1xuICB2YXIgX3JlZjIkY29tcG9uZW50ID0gX3JlZjIuY29tcG9uZW50LFxuICAgICAgY29tcG9uZW50ID0gX3JlZjIkY29tcG9uZW50ID09PSB2b2lkIDAgPyBMaW5rQW5jaG9yIDogX3JlZjIkY29tcG9uZW50LFxuICAgICAgcmVwbGFjZSA9IF9yZWYyLnJlcGxhY2UsXG4gICAgICB0byA9IF9yZWYyLnRvLFxuICAgICAgaW5uZXJSZWYgPSBfcmVmMi5pbm5lclJlZixcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMiwgW1wiY29tcG9uZW50XCIsIFwicmVwbGFjZVwiLCBcInRvXCIsIFwiaW5uZXJSZWZcIl0pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KF9fUm91dGVyQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPExpbms+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGhpc3RvcnkgPSBjb250ZXh0Lmhpc3Rvcnk7XG4gICAgdmFyIGxvY2F0aW9uID0gbm9ybWFsaXplVG9Mb2NhdGlvbihyZXNvbHZlVG9Mb2NhdGlvbih0bywgY29udGV4dC5sb2NhdGlvbiksIGNvbnRleHQubG9jYXRpb24pO1xuICAgIHZhciBocmVmID0gbG9jYXRpb24gPyBoaXN0b3J5LmNyZWF0ZUhyZWYobG9jYXRpb24pIDogXCJcIjtcblxuICAgIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBocmVmOiBocmVmLFxuICAgICAgbmF2aWdhdGU6IGZ1bmN0aW9uIG5hdmlnYXRlKCkge1xuICAgICAgICB2YXIgbG9jYXRpb24gPSByZXNvbHZlVG9Mb2NhdGlvbih0bywgY29udGV4dC5sb2NhdGlvbik7XG4gICAgICAgIHZhciBtZXRob2QgPSByZXBsYWNlID8gaGlzdG9yeS5yZXBsYWNlIDogaGlzdG9yeS5wdXNoO1xuICAgICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgfVxuICAgIH0pOyAvLyBSZWFjdCAxNSBjb21wYXRcblxuXG4gICAgaWYgKGZvcndhcmRSZWZTaGltICE9PSBmb3J3YXJkUmVmKSB7XG4gICAgICBwcm9wcy5yZWYgPSBmb3J3YXJkZWRSZWYgfHwgaW5uZXJSZWY7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3BzLmlubmVyUmVmID0gaW5uZXJSZWY7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wcyk7XG4gIH0pO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgdmFyIHRvVHlwZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5mdW5jXSk7XG4gIHZhciByZWZUeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgY3VycmVudDogUHJvcFR5cGVzLmFueVxuICB9KV0pO1xuICBMaW5rLmRpc3BsYXlOYW1lID0gXCJMaW5rXCI7XG4gIExpbmsucHJvcFR5cGVzID0ge1xuICAgIGlubmVyUmVmOiByZWZUeXBlLFxuICAgIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICAgIHJlcGxhY2U6IFByb3BUeXBlcy5ib29sLFxuICAgIHRhcmdldDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICB0bzogdG9UeXBlLmlzUmVxdWlyZWRcbiAgfTtcbn1cblxudmFyIGZvcndhcmRSZWZTaGltJDEgPSBmdW5jdGlvbiBmb3J3YXJkUmVmU2hpbShDKSB7XG4gIHJldHVybiBDO1xufTtcblxudmFyIGZvcndhcmRSZWYkMSA9IFJlYWN0LmZvcndhcmRSZWY7XG5cbmlmICh0eXBlb2YgZm9yd2FyZFJlZiQxID09PSBcInVuZGVmaW5lZFwiKSB7XG4gIGZvcndhcmRSZWYkMSA9IGZvcndhcmRSZWZTaGltJDE7XG59XG5cbmZ1bmN0aW9uIGpvaW5DbGFzc25hbWVzKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgY2xhc3NuYW1lcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBjbGFzc25hbWVzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGNsYXNzbmFtZXMuZmlsdGVyKGZ1bmN0aW9uIChpKSB7XG4gICAgcmV0dXJuIGk7XG4gIH0pLmpvaW4oXCIgXCIpO1xufVxuLyoqXG4gKiBBIDxMaW5rPiB3cmFwcGVyIHRoYXQga25vd3MgaWYgaXQncyBcImFjdGl2ZVwiIG9yIG5vdC5cbiAqL1xuXG5cbnZhciBOYXZMaW5rID0gZm9yd2FyZFJlZiQxKGZ1bmN0aW9uIChfcmVmLCBmb3J3YXJkZWRSZWYpIHtcbiAgdmFyIF9yZWYkYXJpYUN1cnJlbnQgPSBfcmVmW1wiYXJpYS1jdXJyZW50XCJdLFxuICAgICAgYXJpYUN1cnJlbnQgPSBfcmVmJGFyaWFDdXJyZW50ID09PSB2b2lkIDAgPyBcInBhZ2VcIiA6IF9yZWYkYXJpYUN1cnJlbnQsXG4gICAgICBfcmVmJGFjdGl2ZUNsYXNzTmFtZSA9IF9yZWYuYWN0aXZlQ2xhc3NOYW1lLFxuICAgICAgYWN0aXZlQ2xhc3NOYW1lID0gX3JlZiRhY3RpdmVDbGFzc05hbWUgPT09IHZvaWQgMCA/IFwiYWN0aXZlXCIgOiBfcmVmJGFjdGl2ZUNsYXNzTmFtZSxcbiAgICAgIGFjdGl2ZVN0eWxlID0gX3JlZi5hY3RpdmVTdHlsZSxcbiAgICAgIGNsYXNzTmFtZVByb3AgPSBfcmVmLmNsYXNzTmFtZSxcbiAgICAgIGV4YWN0ID0gX3JlZi5leGFjdCxcbiAgICAgIGlzQWN0aXZlUHJvcCA9IF9yZWYuaXNBY3RpdmUsXG4gICAgICBsb2NhdGlvblByb3AgPSBfcmVmLmxvY2F0aW9uLFxuICAgICAgc3RyaWN0ID0gX3JlZi5zdHJpY3QsXG4gICAgICBzdHlsZVByb3AgPSBfcmVmLnN0eWxlLFxuICAgICAgdG8gPSBfcmVmLnRvLFxuICAgICAgaW5uZXJSZWYgPSBfcmVmLmlubmVyUmVmLFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImFyaWEtY3VycmVudFwiLCBcImFjdGl2ZUNsYXNzTmFtZVwiLCBcImFjdGl2ZVN0eWxlXCIsIFwiY2xhc3NOYW1lXCIsIFwiZXhhY3RcIiwgXCJpc0FjdGl2ZVwiLCBcImxvY2F0aW9uXCIsIFwic3RyaWN0XCIsIFwic3R5bGVcIiwgXCJ0b1wiLCBcImlubmVyUmVmXCJdKTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChfX1JvdXRlckNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxOYXZMaW5rPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBjdXJyZW50TG9jYXRpb24gPSBsb2NhdGlvblByb3AgfHwgY29udGV4dC5sb2NhdGlvbjtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IG5vcm1hbGl6ZVRvTG9jYXRpb24ocmVzb2x2ZVRvTG9jYXRpb24odG8sIGN1cnJlbnRMb2NhdGlvbiksIGN1cnJlbnRMb2NhdGlvbik7XG4gICAgdmFyIHBhdGggPSB0b0xvY2F0aW9uLnBhdGhuYW1lOyAvLyBSZWdleCB0YWtlbiBmcm9tOiBodHRwczovL2dpdGh1Yi5jb20vcGlsbGFyanMvcGF0aC10by1yZWdleHAvYmxvYi9tYXN0ZXIvaW5kZXguanMjTDIwMlxuXG4gICAgdmFyIGVzY2FwZWRQYXRoID0gcGF0aCAmJiBwYXRoLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18L1xcXFxdKS9nLCBcIlxcXFwkMVwiKTtcbiAgICB2YXIgbWF0Y2ggPSBlc2NhcGVkUGF0aCA/IG1hdGNoUGF0aChjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUsIHtcbiAgICAgIHBhdGg6IGVzY2FwZWRQYXRoLFxuICAgICAgZXhhY3Q6IGV4YWN0LFxuICAgICAgc3RyaWN0OiBzdHJpY3RcbiAgICB9KSA6IG51bGw7XG4gICAgdmFyIGlzQWN0aXZlID0gISEoaXNBY3RpdmVQcm9wID8gaXNBY3RpdmVQcm9wKG1hdGNoLCBjdXJyZW50TG9jYXRpb24pIDogbWF0Y2gpO1xuICAgIHZhciBjbGFzc05hbWUgPSBpc0FjdGl2ZSA/IGpvaW5DbGFzc25hbWVzKGNsYXNzTmFtZVByb3AsIGFjdGl2ZUNsYXNzTmFtZSkgOiBjbGFzc05hbWVQcm9wO1xuICAgIHZhciBzdHlsZSA9IGlzQWN0aXZlID8gX2V4dGVuZHMoe30sIHN0eWxlUHJvcCwge30sIGFjdGl2ZVN0eWxlKSA6IHN0eWxlUHJvcDtcblxuICAgIHZhciBwcm9wcyA9IF9leHRlbmRzKHtcbiAgICAgIFwiYXJpYS1jdXJyZW50XCI6IGlzQWN0aXZlICYmIGFyaWFDdXJyZW50IHx8IG51bGwsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgIHRvOiB0b0xvY2F0aW9uXG4gICAgfSwgcmVzdCk7IC8vIFJlYWN0IDE1IGNvbXBhdFxuXG5cbiAgICBpZiAoZm9yd2FyZFJlZlNoaW0kMSAhPT0gZm9yd2FyZFJlZiQxKSB7XG4gICAgICBwcm9wcy5yZWYgPSBmb3J3YXJkZWRSZWYgfHwgaW5uZXJSZWY7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3BzLmlubmVyUmVmID0gaW5uZXJSZWY7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGluaywgcHJvcHMpO1xuICB9KTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE5hdkxpbmsuZGlzcGxheU5hbWUgPSBcIk5hdkxpbmtcIjtcbiAgdmFyIGFyaWFDdXJyZW50VHlwZSA9IFByb3BUeXBlcy5vbmVPZihbXCJwYWdlXCIsIFwic3RlcFwiLCBcImxvY2F0aW9uXCIsIFwiZGF0ZVwiLCBcInRpbWVcIiwgXCJ0cnVlXCJdKTtcbiAgTmF2TGluay5wcm9wVHlwZXMgPSBfZXh0ZW5kcyh7fSwgTGluay5wcm9wVHlwZXMsIHtcbiAgICBcImFyaWEtY3VycmVudFwiOiBhcmlhQ3VycmVudFR5cGUsXG4gICAgYWN0aXZlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGFjdGl2ZVN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNBY3RpdmU6IFByb3BUeXBlcy5mdW5jLFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHN0cmljdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3RcbiAgfSk7XG59XG5cbmV4cG9ydCB7IEJyb3dzZXJSb3V0ZXIsIEhhc2hSb3V0ZXIsIExpbmssIE5hdkxpbmsgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWN0LXJvdXRlci1kb20uanMubWFwXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcblxuY29uc3QgRXhwZW5zZUxpc3RJdGVtID0gKHsgaWQsIGRlc2NyaXB0aW9uLCBhbW91bnQsIGNyZWF0ZWRBdCB9KSA9PiAoXG4gIDxkaXY+XG4gICAgPExpbmsgdG89e2AvZWRpdC8ke2lkfWB9PlxuICAgICAgPGgzPntkZXNjcmlwdGlvbn08L2gzPlxuICAgIDwvTGluaz5cblxuICAgIDxwPlxuICAgICAge2Ftb3VudH0gLSB7Y3JlYXRlZEF0fVxuICAgIDwvcD5cbiAgPC9kaXY+XG4pO1xuXG5leHBvcnQgZGVmYXVsdCBFeHBlbnNlTGlzdEl0ZW07XG4iLCJpbXBvcnQgbW9tZW50IGZyb20gXCJtb21lbnRcIjtcbi8vIEdldCB2aXNpYmxlIGV4cGVuc2VzXG5cbmV4cG9ydCBkZWZhdWx0IChleHBlbnNlcywgeyB0ZXh0LCBzb3J0QnksIHN0YXJ0RGF0ZSwgZW5kRGF0ZSB9KSA9PiB7XG4gIHJldHVybiBleHBlbnNlc1xuICAgIC5maWx0ZXIoZXhwZW5zZSA9PiB7XG4gICAgICBjb25zdCBjcmVhdGVkQXRNb21lbnQgPSBtb21lbnQoZXhwZW5zZS5jcmVhdGVkQXQpO1xuICAgICAgY29uc3Qgc3RhcnREYXRlTWF0Y2ggPSBzdGFydERhdGVcbiAgICAgICAgPyBzdGFydERhdGUuaXNTYW1lT3JCZWZvcmUoY3JlYXRlZEF0TW9tZW50LCBcImRheVwiKVxuICAgICAgICA6IHRydWU7XG4gICAgICBjb25zdCBlbmREYXRlTWF0Y2ggPSBlbmREYXRlXG4gICAgICAgID8gZW5kRGF0ZS5pc1NhbWVPckFmdGVyKGNyZWF0ZWRBdE1vbWVudCwgXCJkYXlcIilcbiAgICAgICAgOiB0cnVlO1xuICAgICAgY29uc3QgdGV4dE1hdGNoID0gZXhwZW5zZS5kZXNjcmlwdGlvblxuICAgICAgICAudG9Mb3dlckNhc2UoKVxuICAgICAgICAuaW5jbHVkZXModGV4dC50b0xvd2VyQ2FzZSgpKTtcblxuICAgICAgcmV0dXJuIHN0YXJ0RGF0ZU1hdGNoICYmIGVuZERhdGVNYXRjaCAmJiB0ZXh0TWF0Y2g7XG4gICAgfSlcbiAgICAuc29ydCgoYSwgYikgPT4ge1xuICAgICAgaWYgKHNvcnRCeSA9PT0gXCJkYXRlXCIpIHtcbiAgICAgICAgcmV0dXJuIGEuY3JlYXRlZEF0IDwgYi5jcmVhdGVkQXQgPyAxIDogLTE7XG4gICAgICB9IGVsc2UgaWYgKHNvcnRCeSA9PT0gXCJhbW91bnRcIikge1xuICAgICAgICByZXR1cm4gYS5hbW91bnQgPCBiLmFtb3VudCA/IDEgOiAtMTtcbiAgICAgIH1cbiAgICB9KTtcbn07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgRXhwZW5zZUxpc3RJdGVtIGZyb20gXCIuL0V4cGVuc2VMaXN0SXRlbVwiO1xuaW1wb3J0IHNlbGVjdEV4cGVuc2VzIGZyb20gXCIuLi9zZWxlY3RvcnMvZXhwZW5zZXMtc2VsZWN0b3JzXCI7XG5cbi8vZXhwb3J0IGZvciB0ZXN0XG5leHBvcnQgY29uc3QgRXhwZW5zZUxpc3QgPSBwcm9wcyA9PiAoXG4gIDxkaXY+XG4gICAge3Byb3BzLmV4cGVuc2VzLmxlbmd0aCA9PT0gMCA/IChcbiAgICAgIDxwPk5vIGV4cGVuc2VzIGZvdW5kPC9wPlxuICAgICkgOiAoXG4gICAgICBwcm9wcy5leHBlbnNlcy5tYXAoZXhwZW5zZSA9PiB7XG4gICAgICAgIHJldHVybiA8RXhwZW5zZUxpc3RJdGVtIGtleT17ZXhwZW5zZS5pZH0gey4uLmV4cGVuc2V9IC8+O1xuICAgICAgfSlcbiAgICApfVxuICA8L2Rpdj5cbik7XG5cbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IHN0YXRlID0+IHtcbiAgcmV0dXJuIHtcbiAgICBleHBlbnNlczogc2VsZWN0RXhwZW5zZXMoc3RhdGUuZXhwZW5zZXMsIHN0YXRlLmZpbHRlcnMpXG4gIH07XG59O1xuXG4vL2RlZmF1bHQgZXhwb3J0IHRvIGNvbm5lY3QgcmVkdXhcbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QobWFwU3RhdGVUb1Byb3BzKShFeHBlbnNlTGlzdCk7XG4iLCIvLyBTRVRfVEVYVF9GSUxURVJcbmV4cG9ydCBjb25zdCBzZXRUZXh0RmlsdGVyID0gKHRleHQgPSBcIlwiKSA9PiAoe1xuICB0eXBlOiBcIlNFVF9URVhUX0ZJTFRFUlwiLFxuICB0ZXh0XG59KTtcblxuLy8gU09SVF9CWV9EQVRFXG5leHBvcnQgY29uc3Qgc29ydEJ5RGF0ZSA9ICgpID0+ICh7XG4gIHR5cGU6IFwiU09SVF9CWV9EQVRFXCJcbn0pO1xuXG4vLyBTT1JUX0JZX0FNT1VOVFxuZXhwb3J0IGNvbnN0IHNvcnRCeUFtb3VudCA9ICgpID0+ICh7XG4gIHR5cGU6IFwiU09SVF9CWV9BTU9VTlRcIlxufSk7XG5cbi8vIFNFVF9TVEFSVF9EQVRFXG5leHBvcnQgY29uc3Qgc2V0U3RhcnREYXRlID0gc3RhcnREYXRlID0+ICh7XG4gIHR5cGU6IFwiU0VUX1NUQVJUX0RBVEVcIixcbiAgc3RhcnREYXRlXG59KTtcblxuLy8gU0VUX0VORF9EQVRFXG5leHBvcnQgY29uc3Qgc2V0RW5kRGF0ZSA9IGVuZERhdGUgPT4gKHtcbiAgdHlwZTogXCJTRVRfRU5EX0RBVEVcIixcbiAgZW5kRGF0ZVxufSk7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQgeyBEYXRlUmFuZ2VQaWNrZXIgfSBmcm9tIFwicmVhY3QtZGF0ZXNcIjtcbmltcG9ydCB7XG4gIHNldFRleHRGaWx0ZXIsXG4gIHNvcnRCeURhdGUsXG4gIHNvcnRCeUFtb3VudCxcbiAgc2V0U3RhcnREYXRlLFxuICBzZXRFbmREYXRlXG59IGZyb20gXCIuLi9hY3Rpb25zL2ZpbHRlcnNcIjtcblxuZXhwb3J0IGNsYXNzIEV4cGVuc2VMaXN0RmlsdGVycyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRlID0ge1xuICAgIGNhbGVuZGFyRm9jdXNlZDogbnVsbFxuICB9O1xuXG4gIG9uRGF0ZXNDaGFuZ2UgPSAoeyBzdGFydERhdGUsIGVuZERhdGUgfSkgPT4ge1xuICAgIHRoaXMucHJvcHMuc2V0U3RhcnREYXRlKHN0YXJ0RGF0ZSk7XG4gICAgdGhpcy5wcm9wcy5zZXRFbmREYXRlKGVuZERhdGUpO1xuICB9O1xuXG4gIG9uRm9jdXNDaGFuZ2UgPSBjYWxlbmRhckZvY3VzZWQgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBjYWxlbmRhckZvY3VzZWQgfSk7XG4gIH07XG5cbiAgaW5wdXRPbkNoYW5nZSA9IGUgPT4ge1xuICAgIHRoaXMucHJvcHMuc2V0VGV4dEZpbHRlcihlLnRhcmdldC52YWx1ZSk7XG4gIH07XG5cbiAgc2VsZWN0T25DaGFuZ2UgPSBlID0+IHtcbiAgICBpZiAoZS50YXJnZXQudmFsdWUgPT09IFwiZGF0ZVwiKSB7XG4gICAgICB0aGlzLnByb3BzLnNvcnRCeURhdGUoKTtcbiAgICB9IGVsc2UgaWYgKGUudGFyZ2V0LnZhbHVlID09PSBcImFtb3VudFwiKSB7XG4gICAgICB0aGlzLnByb3BzLnNvcnRCeUFtb3VudCgpO1xuICAgIH1cbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgIDxpbnB1dFxuICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICB2YWx1ZT17dGhpcy5wcm9wcy5maWx0ZXJzLnRleHR9XG4gICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaW5wdXRPbkNoYW5nZX1cbiAgICAgICAgLz5cbiAgICAgICAgPHNlbGVjdFxuICAgICAgICAgIHZhbHVlPXt0aGlzLnByb3BzLmZpbHRlcnMuc29ydEJ5fVxuICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLnNlbGVjdE9uQ2hhbmdlfVxuICAgICAgICA+XG4gICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImRhdGVcIj5EYXRlPC9vcHRpb24+XG4gICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImFtb3VudFwiPkFtb3VudDwvb3B0aW9uPlxuICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgPERhdGVSYW5nZVBpY2tlclxuICAgICAgICAgIHN0YXJ0RGF0ZT17dGhpcy5wcm9wcy5maWx0ZXJzLnN0YXJ0RGF0ZX0gLy8gbW9tZW50UHJvcFR5cGVzLm1vbWVudE9iaiBvciBudWxsLFxuICAgICAgICAgIHN0YXJ0RGF0ZUlkPVwiTXlEYXRlUGlja2VyXCIgLy8gUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgICAgICAgIGVuZERhdGU9e3RoaXMucHJvcHMuZmlsdGVycy5lbmREYXRlfSAvLyBtb21lbnRQcm9wVHlwZXMubW9tZW50T2JqIG9yIG51bGwsXG4gICAgICAgICAgZW5kRGF0ZUlkPVwiZW5kRGF0ZUlEXCIgLy8gUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgICAgICAgIG9uRGF0ZXNDaGFuZ2U9e3RoaXMub25EYXRlc0NoYW5nZX0gLy8gUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgICAgICBmb2N1c2VkSW5wdXQ9e3RoaXMuc3RhdGUuY2FsZW5kYXJGb2N1c2VkfSAvLyBQcm9wVHlwZXMub25lT2YoW1NUQVJUX0RBVEUsIEVORF9EQVRFXSkgb3IgbnVsbCxcbiAgICAgICAgICBvbkZvY3VzQ2hhbmdlPXt0aGlzLm9uRm9jdXNDaGFuZ2V9IC8vIFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICAgICAgbnVtYmVyT2ZNb250aHM9ezF9XG4gICAgICAgICAgaXNPdXRzaWRlUmFuZ2U9eygpID0+IGZhbHNlfVxuICAgICAgICAgIHNob3dDbGVhckRhdGVzPXt0cnVlfVxuICAgICAgICAgIHNob3dEZWZhdWx0SW5wdXRJY29uPXt0cnVlfVxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSBzdGF0ZSA9PiAoeyBmaWx0ZXJzOiBzdGF0ZS5maWx0ZXJzIH0pO1xuY29uc3QgbWFwRGlzcGF0Y2hUb1Byb3BzID0gZGlzcGF0Y2ggPT4gKHtcbiAgc2V0U3RhcnREYXRlOiBzdGFydERhdGUgPT4gZGlzcGF0Y2goc2V0U3RhcnREYXRlKHN0YXJ0RGF0ZSkpLFxuICBzZXRFbmREYXRlOiBlbmREYXRlID0+IGRpc3BhdGNoKHNldFN0YXJ0RGF0ZShlbmREYXRlKSksXG4gIHNldFRleHRGaWx0ZXI6IHRleHQgPT4gZGlzcGF0Y2goc2V0VGV4dEZpbHRlcih0ZXh0KSksXG4gIHNvcnRCeURhdGU6ICgpID0+IGRpc3BhdGNoKHNvcnRCeURhdGUoKSksXG4gIHNvcnRCeUFtb3VudDogKCkgPT4gZGlzcGF0Y2goc29ydEJ5QW1vdW50KCkpXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcykoRXhwZW5zZUxpc3RGaWx0ZXJzKTtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBFeHBlbnNlTGlzdCBmcm9tIFwiLi9FeHBlbnNlTGlzdFwiO1xuaW1wb3J0IEV4cGVuc2VMaXN0RmlsdGVycyBmcm9tIFwiLi9FeHBlbnNlTGlzdEZpbHRlcnNcIjtcblxuY29uc3QgRXhwZW5zZURhc2hib2FyZFBhZ2UgPSAoKSA9PiAoXG4gIDxkaXY+XG4gICAgPEV4cGVuc2VMaXN0RmlsdGVycyAvPlxuICAgIDxFeHBlbnNlTGlzdCAvPlxuICA8L2Rpdj5cbik7XG5cbmV4cG9ydCBkZWZhdWx0IEV4cGVuc2VEYXNoYm9hcmRQYWdlO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IG1vbWVudCBmcm9tIFwibW9tZW50XCI7XG5pbXBvcnQgeyBTaW5nbGVEYXRlUGlja2VyIH0gZnJvbSBcInJlYWN0LWRhdGVzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEV4cGVuc2VGb3JtIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgZGVzY3JpcHRpb246IHByb3BzLmV4cGVuc2UgPyBwcm9wcy5leHBlbnNlLmRlc2NyaXB0aW9uIDogXCJcIixcbiAgICAgIG5vdGU6IHByb3BzLmV4cGVuc2UgPyBwcm9wcy5leHBlbnNlLm5vdGUgOiBcIlwiLFxuICAgICAgYW1vdW50OiBwcm9wcy5leHBlbnNlID8gKHByb3BzLmV4cGVuc2UuYW1vdW50IC8gMTAwKS50b1N0cmluZygpIDogXCJcIixcbiAgICAgIGNyZWF0ZWRBdDogcHJvcHMuZXhwZW5zZSA/IG1vbWVudChwcm9wcy5leHBlbnNlLmNyZWF0ZWRBdCkgOiBtb21lbnQoKSxcbiAgICAgIGNhbGVuZGFyRm9jdXNlZDogZmFsc2UsXG4gICAgICBlcnJvcjogXCJcIlxuICAgIH07XG4gIH1cblxuICBvbkRlc2NyaXB0aW9uQ2hhbmdlID0gZSA9PiB7XG4gICAgY29uc3QgZGVzY3JpcHRpb24gPSBlLnRhcmdldC52YWx1ZTtcbiAgICB0aGlzLnNldFN0YXRlKCgpID0+ICh7IGRlc2NyaXB0aW9uIH0pKTtcbiAgfTtcbiAgb25Ob3RlQ2hhbmdlID0gZSA9PiB7XG4gICAgY29uc3Qgbm90ZSA9IGUudGFyZ2V0LnZhbHVlO1xuICAgIHRoaXMuc2V0U3RhdGUoKCkgPT4gKHsgbm90ZSB9KSk7XG4gIH07XG4gIG9uQW1vdW50Q2hhbmdlID0gZSA9PiB7XG4gICAgY29uc3QgYW1vdW50ID0gZS50YXJnZXQudmFsdWU7XG5cbiAgICBpZiAoIWFtb3VudCB8fCBhbW91bnQubWF0Y2goL15cXGR7MSx9KFxcLlxcZHswLDJ9KT8kLykpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoKCkgPT4gKHsgYW1vdW50IH0pKTtcbiAgICB9XG4gIH07XG4gIG9uRGF0ZUNoYW5nZSA9IGNyZWF0ZWRBdCA9PiB7XG4gICAgaWYgKGNyZWF0ZWRBdCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSgoKSA9PiAoeyBjcmVhdGVkQXQgfSkpO1xuICAgIH1cbiAgfTtcbiAgb25Gb2N1c0NoYW5nZSA9ICh7IGZvY3VzZWQgfSkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoKCkgPT4gKHsgY2FsZW5kYXJGb2N1c2VkOiBmb2N1c2VkIH0pKTtcbiAgfTtcbiAgb25TdWJtaXQgPSBlID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBpZiAoIXRoaXMuc3RhdGUuZGVzY3JpcHRpb24gfHwgIXRoaXMuc3RhdGUuYW1vdW50KSB7XG4gICAgICB0aGlzLnNldFN0YXRlKCgpID0+ICh7XG4gICAgICAgIGVycm9yOiBcIlBsZWFzZSBwcm92aWRlIGRlc2NyaXB0aW9uIGFuZCBhbW91bnQuXCJcbiAgICAgIH0pKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXRTdGF0ZSgoKSA9PiAoeyBlcnJvcjogXCJcIiB9KSk7XG4gICAgICB0aGlzLnByb3BzLm9uU3VibWl0KHtcbiAgICAgICAgZGVzY3JpcHRpb246IHRoaXMuc3RhdGUuZGVzY3JpcHRpb24sXG4gICAgICAgIGFtb3VudDogcGFyc2VGbG9hdCh0aGlzLnN0YXRlLmFtb3VudCwgMTApICogMTAwLFxuICAgICAgICBjcmVhdGVkQXQ6IHRoaXMuc3RhdGUuY3JlYXRlZEF0LnZhbHVlT2YoKSxcbiAgICAgICAgbm90ZTogdGhpcy5zdGF0ZS5ub3RlXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAge3RoaXMuc3RhdGUuZXJyb3IgJiYgPHA+e3RoaXMuc3RhdGUuZXJyb3J9PC9wPn1cbiAgICAgICAgPGZvcm0gb25TdWJtaXQ9e3RoaXMub25TdWJtaXR9PlxuICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJEZXNjcmlwdGlvblwiXG4gICAgICAgICAgICBhdXRvRm9jdXNcbiAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLmRlc2NyaXB0aW9ufVxuICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25EZXNjcmlwdGlvbkNoYW5nZX1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJBbW91bnRcIlxuICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuYW1vdW50fVxuICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25BbW91bnRDaGFuZ2V9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8U2luZ2xlRGF0ZVBpY2tlclxuICAgICAgICAgICAgZGF0ZT17dGhpcy5zdGF0ZS5jcmVhdGVkQXR9XG4gICAgICAgICAgICBvbkRhdGVDaGFuZ2U9e3RoaXMub25EYXRlQ2hhbmdlfVxuICAgICAgICAgICAgZm9jdXNlZD17dGhpcy5zdGF0ZS5jYWxlbmRhckZvY3VzZWR9XG4gICAgICAgICAgICBvbkZvY3VzQ2hhbmdlPXt0aGlzLm9uRm9jdXNDaGFuZ2V9XG4gICAgICAgICAgICBudW1iZXJPZk1vbnRocz17MX1cbiAgICAgICAgICAgIGlzT3V0c2lkZVJhbmdlPXsoKSA9PiBmYWxzZX1cbiAgICAgICAgICAvPlxuICAgICAgICAgIDx0ZXh0YXJlYVxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJBZGQgYSBub3RlIGZvciB5b3VyIGV4cGVuc2UgKG9wdGlvbmFsKVwiXG4gICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5ub3RlfVxuICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25Ob3RlQ2hhbmdlfVxuICAgICAgICAgID48L3RleHRhcmVhPlxuICAgICAgICAgIDxidXR0b24+QWRkIEV4cGVuc2U8L2J1dHRvbj5cbiAgICAgICAgPC9mb3JtPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IEV4cGVuc2VGb3JtIGZyb20gXCIuL0V4cGVuc2VGb3JtXCI7XG5pbXBvcnQgeyBhZGRFeHBlbnNlIH0gZnJvbSBcIi4uL2FjdGlvbnMvZXhwZW5zZXNcIjtcblxuZXhwb3J0IGNsYXNzIEFkZEV4cGVuc2VQYWdlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgb25TdWJtaXQgPSBleHBlbnNlID0+IHtcbiAgICB0aGlzLnByb3BzLmFkZEV4cGVuc2UoZXhwZW5zZSk7XG4gICAgdGhpcy5wcm9wcy5oaXN0b3J5LnB1c2goXCIvXCIpO1xuICB9O1xuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgIDxoMT5BZGQgRXhwZW5zZTwvaDE+XG4gICAgICAgIDxFeHBlbnNlRm9ybVxuICAgICAgICAgIG9uU3VibWl0PXtleHBlbnNlID0+IHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMuYWRkRXhwZW5zZShleHBlbnNlKTtcbiAgICAgICAgICAgIHRoaXMucHJvcHMuaGlzdG9yeS5wdXNoKFwiL1wiKTtcbiAgICAgICAgICB9fVxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSBkaXNwYXRjaCA9PiAoe1xuICBhZGRFeHBlbnNlOiBleHBlbnNlID0+IGRpc3BhdGNoKGFkZEV4cGVuc2UoZXhwZW5zZSkpXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdCh1bmRlZmluZWQsIG1hcERpc3BhdGNoVG9Qcm9wcykoQWRkRXhwZW5zZVBhZ2UpO1xuIiwiaW1wb3J0IHsgdXVpZCB9IGZyb20gXCJ1dWlkdjRcIjtcblxuLy8gQUREX0VYUEVOU0VcbmV4cG9ydCBjb25zdCBhZGRFeHBlbnNlID0gKHtcbiAgZGVzY3JpcHRpb24gPSBcIlwiLFxuICBub3RlID0gXCJcIixcbiAgYW1vdW50ID0gMCxcbiAgY3JlYXRlZEF0ID0gMFxufSA9IHt9KSA9PiAoe1xuICB0eXBlOiBcIkFERF9FWFBFTlNFXCIsXG4gIGV4cGVuc2U6IHtcbiAgICBpZDogdXVpZCgpLFxuICAgIGRlc2NyaXB0aW9uLFxuICAgIG5vdGUsXG4gICAgYW1vdW50LFxuICAgIGNyZWF0ZWRBdFxuICB9XG59KTtcblxuLy8gUkVNT1ZFX0VYUEVOU0VcbmV4cG9ydCBjb25zdCByZW1vdmVFeHBlbnNlID0gKHsgaWQgfSA9IHt9KSA9PiAoe1xuICB0eXBlOiBcIlJFTU9WRV9FWFBFTlNFXCIsXG4gIGlkXG59KTtcblxuLy8gRURJVF9FWFBFTlNFXG5leHBvcnQgY29uc3QgZWRpdEV4cGVuc2UgPSAoaWQsIHVwZGF0ZXMpID0+ICh7XG4gIHR5cGU6IFwiRURJVF9FWFBFTlNFXCIsXG4gIGlkLFxuICB1cGRhdGVzXG59KTtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcbmltcG9ydCBFeHBlbnNlRm9ybSBmcm9tIFwiLi9FeHBlbnNlRm9ybVwiO1xuaW1wb3J0IHsgZWRpdEV4cGVuc2UsIHJlbW92ZUV4cGVuc2UgfSBmcm9tIFwiLi4vYWN0aW9ucy9leHBlbnNlc1wiO1xuXG5leHBvcnQgY2xhc3MgRWRpdEV4cGVuc2VQYWdlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgb25TdWJtaXQgPSBleHBlbnNlID0+IHtcbiAgICB0aGlzLnByb3BzLmVkaXRFeHBlbnNlKHRoaXMucHJvcHMuZXhwZW5zZS5pZCwgZXhwZW5zZSk7XG4gICAgdGhpcy5wcm9wcy5oaXN0b3J5LnB1c2goXCIvXCIpO1xuICB9O1xuICBvblJlbW92ZSA9ICgpID0+IHtcbiAgICB0aGlzLnByb3BzLnJlbW92ZUV4cGVuc2UoeyBpZDogdGhpcy5wcm9wcy5leHBlbnNlLmlkIH0pO1xuICAgIHRoaXMucHJvcHMuaGlzdG9yeS5wdXNoKFwiL1wiKTtcbiAgfTtcbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2PlxuICAgICAgICA8RXhwZW5zZUZvcm0gZXhwZW5zZT17dGhpcy5wcm9wcy5leHBlbnNlfSBvblN1Ym1pdD17dGhpcy5vblN1Ym1pdH0gLz5cbiAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXt0aGlzLm9uUmVtb3ZlfT5SZW1vdmU8L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuY29uc3QgbWFwU3RhdGVUb1Byb3BzID0gKHN0YXRlLCBwcm9wcykgPT4gKHtcbiAgZXhwZW5zZTogc3RhdGUuZXhwZW5zZXMuZmluZChleHBlbnNlID0+IGV4cGVuc2UuaWQgPT09IHByb3BzLm1hdGNoLnBhcmFtcy5pZClcbn0pO1xuXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSAoZGlzcGF0Y2gsIHByb3BzKSA9PiAoe1xuICBlZGl0RXhwZW5zZTogKGlkLCBleHBlbnNlKSA9PiBkaXNwYXRjaChlZGl0RXhwZW5zZShpZCwgZXhwZW5zZSkpLFxuICByZW1vdmVFeHBlbnNlOiBkYXRhID0+IGRpc3BhdGNoKHJlbW92ZUV4cGVuc2UoZGF0YSkpXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMsIG1hcERpc3BhdGNoVG9Qcm9wcykoRWRpdEV4cGVuc2VQYWdlKTtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuY29uc3QgSGVscFBhZ2UgPSAoKSA9PiA8ZGl2PlRoaXMgaXMgZnJvbSBteSBoZWxwIGNvbXBvbmVudDwvZGl2PjtcblxuZXhwb3J0IGRlZmF1bHQgSGVscFBhZ2U7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBMaW5rIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcblxuY29uc3QgTm90Rm91bmRQYWdlID0gKCkgPT4gKFxuICA8ZGl2PlxuICAgIDQwNCAtIDxMaW5rIHRvPVwiL1wiPkdvIGhvbWU8L0xpbms+XG4gIDwvZGl2PlxuKTtcblxuZXhwb3J0IGRlZmF1bHQgTm90Rm91bmRQYWdlO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgTmF2TGluayB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5cbmNvbnN0IEhlYWRlciA9ICgpID0+IChcbiAgPGhlYWRlcj5cbiAgICA8aDE+RXhwZW5zaWZ5PC9oMT5cbiAgICA8TmF2TGluayB0bz1cIi9cIiBhY3RpdmVDbGFzc05hbWU9XCJpcy1hY3RpdmVcIiBleGFjdD17dHJ1ZX0+XG4gICAgICBEYXNoYm9hcmRcbiAgICA8L05hdkxpbms+XG4gICAgPE5hdkxpbmsgdG89XCIvY3JlYXRlXCIgYWN0aXZlQ2xhc3NOYW1lPVwiaXMtYWN0aXZlXCI+XG4gICAgICBDcmVhdGUgRXhwZW5zZVxuICAgIDwvTmF2TGluaz5cbiAgPC9oZWFkZXI+XG4pO1xuXG5leHBvcnQgZGVmYXVsdCBIZWFkZXI7XG4iLCIvL3JlYWN0XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG4vL3JlYWN0IHJvdXRlclxuaW1wb3J0IHsgQnJvd3NlclJvdXRlciwgUm91dGUsIFN3aXRjaCB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG4vL2NvbXBvbmVudHNcbmltcG9ydCBEYXNoYm9hcmRQYWdlIGZyb20gXCIuLi9Db21wb25lbnRzL0Rhc2hib2FyZFBhZ2VcIjtcbmltcG9ydCBBZGRFeHBlbnNlUGFnZSBmcm9tIFwiLi4vQ29tcG9uZW50cy9BZGRFeHBlbnNlUGFnZVwiO1xuaW1wb3J0IEVkaXRFeHBlbnNlUGFnZSBmcm9tIFwiLi4vQ29tcG9uZW50cy9FZGl0RXhwZW5zZVBhZ2VcIjtcbmltcG9ydCBIZWxwUGFnZSBmcm9tIFwiLi4vQ29tcG9uZW50cy9IZWxwUGFnZVwiO1xuaW1wb3J0IE5vdEZvdW5kUGFnZSBmcm9tIFwiLi4vQ29tcG9uZW50cy9Ob3RGb3VuZFBhZ2VcIjtcbmltcG9ydCBIZWFkZXIgZnJvbSBcIi4uL0NvbXBvbmVudHMvSGVhZGVyXCI7XG5cbmNvbnN0IEFwcFJvdXRlciA9ICgpID0+IChcbiAgPEJyb3dzZXJSb3V0ZXI+XG4gICAgPGRpdj5cbiAgICAgIDxIZWFkZXIgLz5cbiAgICAgIDxTd2l0Y2g+XG4gICAgICAgIDxSb3V0ZSBwYXRoPVwiL1wiIGNvbXBvbmVudD17RGFzaGJvYXJkUGFnZX0gZXhhY3Q9e3RydWV9IC8+XG4gICAgICAgIDxSb3V0ZSBwYXRoPVwiL2NyZWF0ZVwiIGNvbXBvbmVudD17QWRkRXhwZW5zZVBhZ2V9IC8+XG4gICAgICAgIDxSb3V0ZSBwYXRoPVwiL2VkaXQvOmlkXCIgY29tcG9uZW50PXtFZGl0RXhwZW5zZVBhZ2V9IC8+XG4gICAgICAgIDxSb3V0ZSBwYXRoPVwiL2hlbHBcIiBjb21wb25lbnQ9e0hlbHBQYWdlfSAvPlxuICAgICAgICA8Um91dGUgY29tcG9uZW50PXtOb3RGb3VuZFBhZ2V9IC8+XG4gICAgICA8L1N3aXRjaD5cbiAgICA8L2Rpdj5cbiAgPC9Ccm93c2VyUm91dGVyPlxuKTtcblxuZXhwb3J0IGRlZmF1bHQgQXBwUm91dGVyO1xuIiwiLy8gRXhwZW5zZXMgUmVkdWNlclxuY29uc3QgZXhwZW5zZXNSZWR1Y2VyRGVmYXVsdFN0YXRlID0gW107XG5cbmV4cG9ydCBkZWZhdWx0IChzdGF0ZSA9IGV4cGVuc2VzUmVkdWNlckRlZmF1bHRTdGF0ZSwgYWN0aW9uKSA9PiB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIFwiQUREX0VYUEVOU0VcIjpcbiAgICAgIHJldHVybiBbLi4uc3RhdGUsIGFjdGlvbi5leHBlbnNlXTtcbiAgICBjYXNlIFwiUkVNT1ZFX0VYUEVOU0VcIjpcbiAgICAgIHJldHVybiBzdGF0ZS5maWx0ZXIoKHsgaWQgfSkgPT4gaWQgIT09IGFjdGlvbi5pZCk7XG4gICAgY2FzZSBcIkVESVRfRVhQRU5TRVwiOlxuICAgICAgcmV0dXJuIHN0YXRlLm1hcChleHBlbnNlID0+IHtcbiAgICAgICAgaWYgKGV4cGVuc2UuaWQgPT09IGFjdGlvbi5pZCkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5leHBlbnNlLFxuICAgICAgICAgICAgLi4uYWN0aW9uLnVwZGF0ZXNcbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBleHBlbnNlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG59O1xuIiwiaW1wb3J0IG1vbWVudCBmcm9tIFwibW9tZW50XCI7XG4vLyBGaWx0ZXJzIFJlZHVjZXJcblxuY29uc3QgZmlsdGVyc1JlZHVjZXJEZWZhdWx0U3RhdGUgPSB7XG4gIHRleHQ6IFwiXCIsXG4gIHNvcnRCeTogXCJkYXRlXCIsXG4gIHN0YXJ0RGF0ZTogbW9tZW50KCkuc3RhcnRPZihcIm1vbnRoXCIpLFxuICBlbmREYXRlOiBtb21lbnQoKS5lbmRPZihcIm1vbnRoXCIpXG59O1xuXG5leHBvcnQgZGVmYXVsdCAoc3RhdGUgPSBmaWx0ZXJzUmVkdWNlckRlZmF1bHRTdGF0ZSwgYWN0aW9uKSA9PiB7XG4gIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICBjYXNlIFwiU0VUX1RFWFRfRklMVEVSXCI6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgdGV4dDogYWN0aW9uLnRleHRcbiAgICAgIH07XG4gICAgY2FzZSBcIlNPUlRfQllfQU1PVU5UXCI6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgc29ydEJ5OiBcImFtb3VudFwiXG4gICAgICB9O1xuICAgIGNhc2UgXCJTT1JUX0JZX0RBVEVcIjpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBzb3J0Qnk6IFwiZGF0ZVwiXG4gICAgICB9O1xuICAgIGNhc2UgXCJTRVRfU1RBUlRfREFURVwiOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIHN0YXJ0RGF0ZTogYWN0aW9uLnN0YXJ0RGF0ZVxuICAgICAgfTtcbiAgICBjYXNlIFwiU0VUX0VORF9EQVRFXCI6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgZW5kRGF0ZTogYWN0aW9uLmVuZERhdGVcbiAgICAgIH07XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufTtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFJlYWN0RE9NIGZyb20gXCJyZWFjdC1kb21cIjtcclxuaW1wb3J0IHsgUHJvdmlkZXIgfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcclxuaW1wb3J0IEFwcFJvdXRlciBmcm9tIFwiLi9yb3V0ZXIvQXBwUm91dGVyXCI7XHJcbmltcG9ydCBjb25maWd1cmVTdG9yZSBmcm9tIFwiLi9zdG9yZS9jb25maWd1cmVTdG9yZVwiO1xyXG5pbXBvcnQgeyBhZGRFeHBlbnNlIH0gZnJvbSBcIi4vYWN0aW9ucy9leHBlbnNlc1wiO1xyXG5pbXBvcnQgeyBzZXRUZXh0RmlsdGVyIH0gZnJvbSBcIi4vYWN0aW9ucy9maWx0ZXJzXCI7XHJcbmltcG9ydCBnZXRWaXNpYmxlRXhwZW5zZXMgZnJvbSBcIi4vc2VsZWN0b3JzL2V4cGVuc2VzLXNlbGVjdG9yc1wiO1xyXG5pbXBvcnQgXCJub3JtYWxpemUuY3NzL25vcm1hbGl6ZS5jc3NcIjtcclxuaW1wb3J0IFwiLi9zdHlsZXMvc3R5bGVzLnNjc3NcIjtcclxuLy9yZWFjdCBkYXRlc1xyXG5pbXBvcnQgXCJyZWFjdC1kYXRlcy9saWIvY3NzL19kYXRlcGlja2VyLmNzc1wiO1xyXG5pbXBvcnQgXCJyZWFjdC1kYXRlcy9pbml0aWFsaXplXCI7XHJcblxyXG5jb25zdCBzdG9yZSA9IGNvbmZpZ3VyZVN0b3JlKCk7XHJcbmNvbnN0IHN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcclxuY29uc3QgdmlzaWJsZUV4cGVuc2VzID0gZ2V0VmlzaWJsZUV4cGVuc2VzKHN0YXRlLmV4cGVuc2VzLCBzdGF0ZS5maWx0ZXJzKTtcclxuXHJcbmNvbnNvbGUubG9nKFwidGhhbmsgeW91IGZvciB2aWV3aW5nIG15IGFwcFwiKTtcclxuXHJcbmNvbnN0IGpzeCA9IChcclxuICA8UHJvdmlkZXIgc3RvcmU9e3N0b3JlfT5cclxuICAgIDxBcHBSb3V0ZXIgLz5cclxuICA8L1Byb3ZpZGVyPlxyXG4pO1xyXG5cclxuUmVhY3RET00ucmVuZGVyKGpzeCwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhcHBcIikpO1xyXG4iLCJpbXBvcnQgeyBjcmVhdGVTdG9yZSwgY29tYmluZVJlZHVjZXJzIH0gZnJvbSBcInJlZHV4XCI7XG5pbXBvcnQgZXhwZW5zZXNSZWR1Y2VyIGZyb20gXCIuLi9yZWR1Y2Vycy9leHBlbnNlcy1yZWR1Y2Vyc1wiO1xuaW1wb3J0IGZpbHRlcnNSZWR1Y2VyIGZyb20gXCIuLi9yZWR1Y2Vycy9maWx0ZXJzLXJlZHVjZXJzXCI7XG5cbmV4cG9ydCBkZWZhdWx0ICgpID0+IHtcbiAgY29uc3Qgc3RvcmUgPSBjcmVhdGVTdG9yZShcbiAgICBjb21iaW5lUmVkdWNlcnMoe1xuICAgICAgZXhwZW5zZXM6IGV4cGVuc2VzUmVkdWNlcixcbiAgICAgIGZpbHRlcnM6IGZpbHRlcnNSZWR1Y2VyXG4gICAgfSksXG4gICAgd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX18gJiYgd2luZG93Ll9fUkVEVVhfREVWVE9PTFNfRVhURU5TSU9OX18oKVxuICApO1xuXG4gIHJldHVybiBzdG9yZTtcbn07XG4iLCIvLyBVbmlxdWUgSUQgY3JlYXRpb24gcmVxdWlyZXMgYSBoaWdoIHF1YWxpdHkgcmFuZG9tICMgZ2VuZXJhdG9yLiBJbiB0aGUgYnJvd3NlciB3ZSB0aGVyZWZvcmVcbi8vIHJlcXVpcmUgdGhlIGNyeXB0byBBUEkgYW5kIGRvIG5vdCBzdXBwb3J0IGJ1aWx0LWluIGZhbGxiYWNrIHRvIGxvd2VyIHF1YWxpdHkgcmFuZG9tIG51bWJlclxuLy8gZ2VuZXJhdG9ycyAobGlrZSBNYXRoLnJhbmRvbSgpKS5cbi8vIGdldFJhbmRvbVZhbHVlcyBuZWVkcyB0byBiZSBpbnZva2VkIGluIGEgY29udGV4dCB3aGVyZSBcInRoaXNcIiBpcyBhIENyeXB0byBpbXBsZW1lbnRhdGlvbi4gQWxzbyxcbi8vIGZpbmQgdGhlIGNvbXBsZXRlIGltcGxlbWVudGF0aW9uIG9mIGNyeXB0byAobXNDcnlwdG8pIG9uIElFMTEuXG52YXIgZ2V0UmFuZG9tVmFsdWVzID0gdHlwZW9mIGNyeXB0byAhPSAndW5kZWZpbmVkJyAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzICYmIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMuYmluZChjcnlwdG8pIHx8IHR5cGVvZiBtc0NyeXB0byAhPSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgbXNDcnlwdG8uZ2V0UmFuZG9tVmFsdWVzID09ICdmdW5jdGlvbicgJiYgbXNDcnlwdG8uZ2V0UmFuZG9tVmFsdWVzLmJpbmQobXNDcnlwdG8pO1xudmFyIHJuZHM4ID0gbmV3IFVpbnQ4QXJyYXkoMTYpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJuZygpIHtcbiAgaWYgKCFnZXRSYW5kb21WYWx1ZXMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NyeXB0by5nZXRSYW5kb21WYWx1ZXMoKSBub3Qgc3VwcG9ydGVkLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3V1aWRqcy91dWlkI2dldHJhbmRvbXZhbHVlcy1ub3Qtc3VwcG9ydGVkJyk7XG4gIH1cblxuICByZXR1cm4gZ2V0UmFuZG9tVmFsdWVzKHJuZHM4KTtcbn0iLCIvKipcbiAqIENvbnZlcnQgYXJyYXkgb2YgMTYgYnl0ZSB2YWx1ZXMgdG8gVVVJRCBzdHJpbmcgZm9ybWF0IG9mIHRoZSBmb3JtOlxuICogWFhYWFhYWFgtWFhYWC1YWFhYLVhYWFgtWFhYWFhYWFhYWFhYXG4gKi9cbnZhciBieXRlVG9IZXggPSBbXTtcblxuZm9yICh2YXIgaSA9IDA7IGkgPCAyNTY7ICsraSkge1xuICBieXRlVG9IZXhbaV0gPSAoaSArIDB4MTAwKS50b1N0cmluZygxNikuc3Vic3RyKDEpO1xufVxuXG5mdW5jdGlvbiBieXRlc1RvVXVpZChidWYsIG9mZnNldCkge1xuICB2YXIgaSA9IG9mZnNldCB8fCAwO1xuICB2YXIgYnRoID0gYnl0ZVRvSGV4OyAvLyBqb2luIHVzZWQgdG8gZml4IG1lbW9yeSBpc3N1ZSBjYXVzZWQgYnkgY29uY2F0ZW5hdGlvbjogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzE3NSNjNFxuXG4gIHJldHVybiBbYnRoW2J1ZltpKytdXSwgYnRoW2J1ZltpKytdXSwgYnRoW2J1ZltpKytdXSwgYnRoW2J1ZltpKytdXSwgJy0nLCBidGhbYnVmW2krK11dLCBidGhbYnVmW2krK11dLCAnLScsIGJ0aFtidWZbaSsrXV0sIGJ0aFtidWZbaSsrXV0sICctJywgYnRoW2J1ZltpKytdXSwgYnRoW2J1ZltpKytdXSwgJy0nLCBidGhbYnVmW2krK11dLCBidGhbYnVmW2krK11dLCBidGhbYnVmW2krK11dLCBidGhbYnVmW2krK11dLCBidGhbYnVmW2krK11dLCBidGhbYnVmW2krK11dXS5qb2luKCcnKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYnl0ZXNUb1V1aWQ7IiwiaW1wb3J0IHJuZyBmcm9tICcuL3JuZy5qcyc7XG5pbXBvcnQgYnl0ZXNUb1V1aWQgZnJvbSAnLi9ieXRlc1RvVXVpZC5qcyc7IC8vICoqYHYxKClgIC0gR2VuZXJhdGUgdGltZS1iYXNlZCBVVUlEKipcbi8vXG4vLyBJbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vTGlvc0svVVVJRC5qc1xuLy8gYW5kIGh0dHA6Ly9kb2NzLnB5dGhvbi5vcmcvbGlicmFyeS91dWlkLmh0bWxcblxudmFyIF9ub2RlSWQ7XG5cbnZhciBfY2xvY2tzZXE7IC8vIFByZXZpb3VzIHV1aWQgY3JlYXRpb24gdGltZVxuXG5cbnZhciBfbGFzdE1TZWNzID0gMDtcbnZhciBfbGFzdE5TZWNzID0gMDsgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS91dWlkanMvdXVpZCBmb3IgQVBJIGRldGFpbHNcblxuZnVuY3Rpb24gdjEob3B0aW9ucywgYnVmLCBvZmZzZXQpIHtcbiAgdmFyIGkgPSBidWYgJiYgb2Zmc2V0IHx8IDA7XG4gIHZhciBiID0gYnVmIHx8IFtdO1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIG5vZGUgPSBvcHRpb25zLm5vZGUgfHwgX25vZGVJZDtcbiAgdmFyIGNsb2Nrc2VxID0gb3B0aW9ucy5jbG9ja3NlcSAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5jbG9ja3NlcSA6IF9jbG9ja3NlcTsgLy8gbm9kZSBhbmQgY2xvY2tzZXEgbmVlZCB0byBiZSBpbml0aWFsaXplZCB0byByYW5kb20gdmFsdWVzIGlmIHRoZXkncmUgbm90XG4gIC8vIHNwZWNpZmllZC4gIFdlIGRvIHRoaXMgbGF6aWx5IHRvIG1pbmltaXplIGlzc3VlcyByZWxhdGVkIHRvIGluc3VmZmljaWVudFxuICAvLyBzeXN0ZW0gZW50cm9weS4gIFNlZSAjMTg5XG5cbiAgaWYgKG5vZGUgPT0gbnVsbCB8fCBjbG9ja3NlcSA9PSBudWxsKSB7XG4gICAgdmFyIHNlZWRCeXRlcyA9IG9wdGlvbnMucmFuZG9tIHx8IChvcHRpb25zLnJuZyB8fCBybmcpKCk7XG5cbiAgICBpZiAobm9kZSA9PSBudWxsKSB7XG4gICAgICAvLyBQZXIgNC41LCBjcmVhdGUgYW5kIDQ4LWJpdCBub2RlIGlkLCAoNDcgcmFuZG9tIGJpdHMgKyBtdWx0aWNhc3QgYml0ID0gMSlcbiAgICAgIG5vZGUgPSBfbm9kZUlkID0gW3NlZWRCeXRlc1swXSB8IDB4MDEsIHNlZWRCeXRlc1sxXSwgc2VlZEJ5dGVzWzJdLCBzZWVkQnl0ZXNbM10sIHNlZWRCeXRlc1s0XSwgc2VlZEJ5dGVzWzVdXTtcbiAgICB9XG5cbiAgICBpZiAoY2xvY2tzZXEgPT0gbnVsbCkge1xuICAgICAgLy8gUGVyIDQuMi4yLCByYW5kb21pemUgKDE0IGJpdCkgY2xvY2tzZXFcbiAgICAgIGNsb2Nrc2VxID0gX2Nsb2Nrc2VxID0gKHNlZWRCeXRlc1s2XSA8PCA4IHwgc2VlZEJ5dGVzWzddKSAmIDB4M2ZmZjtcbiAgICB9XG4gIH0gLy8gVVVJRCB0aW1lc3RhbXBzIGFyZSAxMDAgbmFuby1zZWNvbmQgdW5pdHMgc2luY2UgdGhlIEdyZWdvcmlhbiBlcG9jaCxcbiAgLy8gKDE1ODItMTAtMTUgMDA6MDApLiAgSlNOdW1iZXJzIGFyZW4ndCBwcmVjaXNlIGVub3VnaCBmb3IgdGhpcywgc29cbiAgLy8gdGltZSBpcyBoYW5kbGVkIGludGVybmFsbHkgYXMgJ21zZWNzJyAoaW50ZWdlciBtaWxsaXNlY29uZHMpIGFuZCAnbnNlY3MnXG4gIC8vICgxMDAtbmFub3NlY29uZHMgb2Zmc2V0IGZyb20gbXNlY3MpIHNpbmNlIHVuaXggZXBvY2gsIDE5NzAtMDEtMDEgMDA6MDAuXG5cblxuICB2YXIgbXNlY3MgPSBvcHRpb25zLm1zZWNzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLm1zZWNzIDogbmV3IERhdGUoKS5nZXRUaW1lKCk7IC8vIFBlciA0LjIuMS4yLCB1c2UgY291bnQgb2YgdXVpZCdzIGdlbmVyYXRlZCBkdXJpbmcgdGhlIGN1cnJlbnQgY2xvY2tcbiAgLy8gY3ljbGUgdG8gc2ltdWxhdGUgaGlnaGVyIHJlc29sdXRpb24gY2xvY2tcblxuICB2YXIgbnNlY3MgPSBvcHRpb25zLm5zZWNzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLm5zZWNzIDogX2xhc3ROU2VjcyArIDE7IC8vIFRpbWUgc2luY2UgbGFzdCB1dWlkIGNyZWF0aW9uIChpbiBtc2VjcylcblxuICB2YXIgZHQgPSBtc2VjcyAtIF9sYXN0TVNlY3MgKyAobnNlY3MgLSBfbGFzdE5TZWNzKSAvIDEwMDAwOyAvLyBQZXIgNC4yLjEuMiwgQnVtcCBjbG9ja3NlcSBvbiBjbG9jayByZWdyZXNzaW9uXG5cbiAgaWYgKGR0IDwgMCAmJiBvcHRpb25zLmNsb2Nrc2VxID09PSB1bmRlZmluZWQpIHtcbiAgICBjbG9ja3NlcSA9IGNsb2Nrc2VxICsgMSAmIDB4M2ZmZjtcbiAgfSAvLyBSZXNldCBuc2VjcyBpZiBjbG9jayByZWdyZXNzZXMgKG5ldyBjbG9ja3NlcSkgb3Igd2UndmUgbW92ZWQgb250byBhIG5ld1xuICAvLyB0aW1lIGludGVydmFsXG5cblxuICBpZiAoKGR0IDwgMCB8fCBtc2VjcyA+IF9sYXN0TVNlY3MpICYmIG9wdGlvbnMubnNlY3MgPT09IHVuZGVmaW5lZCkge1xuICAgIG5zZWNzID0gMDtcbiAgfSAvLyBQZXIgNC4yLjEuMiBUaHJvdyBlcnJvciBpZiB0b28gbWFueSB1dWlkcyBhcmUgcmVxdWVzdGVkXG5cblxuICBpZiAobnNlY3MgPj0gMTAwMDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1dWlkLnYxKCk6IENhbid0IGNyZWF0ZSBtb3JlIHRoYW4gMTBNIHV1aWRzL3NlY1wiKTtcbiAgfVxuXG4gIF9sYXN0TVNlY3MgPSBtc2VjcztcbiAgX2xhc3ROU2VjcyA9IG5zZWNzO1xuICBfY2xvY2tzZXEgPSBjbG9ja3NlcTsgLy8gUGVyIDQuMS40IC0gQ29udmVydCBmcm9tIHVuaXggZXBvY2ggdG8gR3JlZ29yaWFuIGVwb2NoXG5cbiAgbXNlY3MgKz0gMTIyMTkyOTI4MDAwMDA7IC8vIGB0aW1lX2xvd2BcblxuICB2YXIgdGwgPSAoKG1zZWNzICYgMHhmZmZmZmZmKSAqIDEwMDAwICsgbnNlY3MpICUgMHgxMDAwMDAwMDA7XG4gIGJbaSsrXSA9IHRsID4+PiAyNCAmIDB4ZmY7XG4gIGJbaSsrXSA9IHRsID4+PiAxNiAmIDB4ZmY7XG4gIGJbaSsrXSA9IHRsID4+PiA4ICYgMHhmZjtcbiAgYltpKytdID0gdGwgJiAweGZmOyAvLyBgdGltZV9taWRgXG5cbiAgdmFyIHRtaCA9IG1zZWNzIC8gMHgxMDAwMDAwMDAgKiAxMDAwMCAmIDB4ZmZmZmZmZjtcbiAgYltpKytdID0gdG1oID4+PiA4ICYgMHhmZjtcbiAgYltpKytdID0gdG1oICYgMHhmZjsgLy8gYHRpbWVfaGlnaF9hbmRfdmVyc2lvbmBcblxuICBiW2krK10gPSB0bWggPj4+IDI0ICYgMHhmIHwgMHgxMDsgLy8gaW5jbHVkZSB2ZXJzaW9uXG5cbiAgYltpKytdID0gdG1oID4+PiAxNiAmIDB4ZmY7IC8vIGBjbG9ja19zZXFfaGlfYW5kX3Jlc2VydmVkYCAoUGVyIDQuMi4yIC0gaW5jbHVkZSB2YXJpYW50KVxuXG4gIGJbaSsrXSA9IGNsb2Nrc2VxID4+PiA4IHwgMHg4MDsgLy8gYGNsb2NrX3NlcV9sb3dgXG5cbiAgYltpKytdID0gY2xvY2tzZXEgJiAweGZmOyAvLyBgbm9kZWBcblxuICBmb3IgKHZhciBuID0gMDsgbiA8IDY7ICsrbikge1xuICAgIGJbaSArIG5dID0gbm9kZVtuXTtcbiAgfVxuXG4gIHJldHVybiBidWYgPyBidWYgOiBieXRlc1RvVXVpZChiKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdjE7IiwiaW1wb3J0IGJ5dGVzVG9VdWlkIGZyb20gJy4vYnl0ZXNUb1V1aWQuanMnO1xuXG5mdW5jdGlvbiB1dWlkVG9CeXRlcyh1dWlkKSB7XG4gIC8vIE5vdGU6IFdlIGFzc3VtZSB3ZSdyZSBiZWluZyBwYXNzZWQgYSB2YWxpZCB1dWlkIHN0cmluZ1xuICB2YXIgYnl0ZXMgPSBbXTtcbiAgdXVpZC5yZXBsYWNlKC9bYS1mQS1GMC05XXsyfS9nLCBmdW5jdGlvbiAoaGV4KSB7XG4gICAgYnl0ZXMucHVzaChwYXJzZUludChoZXgsIDE2KSk7XG4gIH0pO1xuICByZXR1cm4gYnl0ZXM7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ1RvQnl0ZXMoc3RyKSB7XG4gIHN0ciA9IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChzdHIpKTsgLy8gVVRGOCBlc2NhcGVcblxuICB2YXIgYnl0ZXMgPSBuZXcgQXJyYXkoc3RyLmxlbmd0aCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICBieXRlc1tpXSA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICB9XG5cbiAgcmV0dXJuIGJ5dGVzO1xufVxuXG5leHBvcnQgdmFyIEROUyA9ICc2YmE3YjgxMC05ZGFkLTExZDEtODBiNC0wMGMwNGZkNDMwYzgnO1xuZXhwb3J0IHZhciBVUkwgPSAnNmJhN2I4MTEtOWRhZC0xMWQxLTgwYjQtMDBjMDRmZDQzMGM4JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChuYW1lLCB2ZXJzaW9uLCBoYXNoZnVuYykge1xuICB2YXIgZ2VuZXJhdGVVVUlEID0gZnVuY3Rpb24gZ2VuZXJhdGVVVUlEKHZhbHVlLCBuYW1lc3BhY2UsIGJ1Ziwgb2Zmc2V0KSB7XG4gICAgdmFyIG9mZiA9IGJ1ZiAmJiBvZmZzZXQgfHwgMDtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnKSB2YWx1ZSA9IHN0cmluZ1RvQnl0ZXModmFsdWUpO1xuICAgIGlmICh0eXBlb2YgbmFtZXNwYWNlID09ICdzdHJpbmcnKSBuYW1lc3BhY2UgPSB1dWlkVG9CeXRlcyhuYW1lc3BhY2UpO1xuICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHRocm93IFR5cGVFcnJvcigndmFsdWUgbXVzdCBiZSBhbiBhcnJheSBvZiBieXRlcycpO1xuICAgIGlmICghQXJyYXkuaXNBcnJheShuYW1lc3BhY2UpIHx8IG5hbWVzcGFjZS5sZW5ndGggIT09IDE2KSB0aHJvdyBUeXBlRXJyb3IoJ25hbWVzcGFjZSBtdXN0IGJlIHV1aWQgc3RyaW5nIG9yIGFuIEFycmF5IG9mIDE2IGJ5dGUgdmFsdWVzJyk7IC8vIFBlciA0LjNcblxuICAgIHZhciBieXRlcyA9IGhhc2hmdW5jKG5hbWVzcGFjZS5jb25jYXQodmFsdWUpKTtcbiAgICBieXRlc1s2XSA9IGJ5dGVzWzZdICYgMHgwZiB8IHZlcnNpb247XG4gICAgYnl0ZXNbOF0gPSBieXRlc1s4XSAmIDB4M2YgfCAweDgwO1xuXG4gICAgaWYgKGJ1Zikge1xuICAgICAgZm9yICh2YXIgaWR4ID0gMDsgaWR4IDwgMTY7ICsraWR4KSB7XG4gICAgICAgIGJ1ZltvZmYgKyBpZHhdID0gYnl0ZXNbaWR4XTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYnVmIHx8IGJ5dGVzVG9VdWlkKGJ5dGVzKTtcbiAgfTsgLy8gRnVuY3Rpb24jbmFtZSBpcyBub3Qgc2V0dGFibGUgb24gc29tZSBwbGF0Zm9ybXMgKCMyNzApXG5cblxuICB0cnkge1xuICAgIGdlbmVyYXRlVVVJRC5uYW1lID0gbmFtZTtcbiAgfSBjYXRjaCAoZXJyKSB7fSAvLyBGb3IgQ29tbW9uSlMgZGVmYXVsdCBleHBvcnQgc3VwcG9ydFxuXG5cbiAgZ2VuZXJhdGVVVUlELkROUyA9IEROUztcbiAgZ2VuZXJhdGVVVUlELlVSTCA9IFVSTDtcbiAgcmV0dXJuIGdlbmVyYXRlVVVJRDtcbn0iLCIvKlxuICogQnJvd3Nlci1jb21wYXRpYmxlIEphdmFTY3JpcHQgTUQ1XG4gKlxuICogTW9kaWZpY2F0aW9uIG9mIEphdmFTY3JpcHQgTUQ1XG4gKiBodHRwczovL2dpdGh1Yi5jb20vYmx1ZWltcC9KYXZhU2NyaXB0LU1ENVxuICpcbiAqIENvcHlyaWdodCAyMDExLCBTZWJhc3RpYW4gVHNjaGFuXG4gKiBodHRwczovL2JsdWVpbXAubmV0XG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlOlxuICogaHR0cHM6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9NSVRcbiAqXG4gKiBCYXNlZCBvblxuICogQSBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIG9mIHRoZSBSU0EgRGF0YSBTZWN1cml0eSwgSW5jLiBNRDUgTWVzc2FnZVxuICogRGlnZXN0IEFsZ29yaXRobSwgYXMgZGVmaW5lZCBpbiBSRkMgMTMyMS5cbiAqIFZlcnNpb24gMi4yIENvcHlyaWdodCAoQykgUGF1bCBKb2huc3RvbiAxOTk5IC0gMjAwOVxuICogT3RoZXIgY29udHJpYnV0b3JzOiBHcmVnIEhvbHQsIEFuZHJldyBLZXBlcnQsIFlkbmFyLCBMb3N0aW5ldFxuICogRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJTRCBMaWNlbnNlXG4gKiBTZWUgaHR0cDovL3BhamhvbWUub3JnLnVrL2NyeXB0L21kNSBmb3IgbW9yZSBpbmZvLlxuICovXG5mdW5jdGlvbiBtZDUoYnl0ZXMpIHtcbiAgaWYgKHR5cGVvZiBieXRlcyA9PSAnc3RyaW5nJykge1xuICAgIHZhciBtc2cgPSB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoYnl0ZXMpKTsgLy8gVVRGOCBlc2NhcGVcblxuICAgIGJ5dGVzID0gbmV3IEFycmF5KG1zZy5sZW5ndGgpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyBpKyspIHtcbiAgICAgIGJ5dGVzW2ldID0gbXNnLmNoYXJDb2RlQXQoaSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1kNVRvSGV4RW5jb2RlZEFycmF5KHdvcmRzVG9NZDUoYnl0ZXNUb1dvcmRzKGJ5dGVzKSwgYnl0ZXMubGVuZ3RoICogOCkpO1xufVxuLypcbiAqIENvbnZlcnQgYW4gYXJyYXkgb2YgbGl0dGxlLWVuZGlhbiB3b3JkcyB0byBhbiBhcnJheSBvZiBieXRlc1xuICovXG5cblxuZnVuY3Rpb24gbWQ1VG9IZXhFbmNvZGVkQXJyYXkoaW5wdXQpIHtcbiAgdmFyIGk7XG4gIHZhciB4O1xuICB2YXIgb3V0cHV0ID0gW107XG4gIHZhciBsZW5ndGgzMiA9IGlucHV0Lmxlbmd0aCAqIDMyO1xuICB2YXIgaGV4VGFiID0gJzAxMjM0NTY3ODlhYmNkZWYnO1xuICB2YXIgaGV4O1xuXG4gIGZvciAoaSA9IDA7IGkgPCBsZW5ndGgzMjsgaSArPSA4KSB7XG4gICAgeCA9IGlucHV0W2kgPj4gNV0gPj4+IGkgJSAzMiAmIDB4ZmY7XG4gICAgaGV4ID0gcGFyc2VJbnQoaGV4VGFiLmNoYXJBdCh4ID4+PiA0ICYgMHgwZikgKyBoZXhUYWIuY2hhckF0KHggJiAweDBmKSwgMTYpO1xuICAgIG91dHB1dC5wdXNoKGhleCk7XG4gIH1cblxuICByZXR1cm4gb3V0cHV0O1xufVxuLypcbiAqIENhbGN1bGF0ZSB0aGUgTUQ1IG9mIGFuIGFycmF5IG9mIGxpdHRsZS1lbmRpYW4gd29yZHMsIGFuZCBhIGJpdCBsZW5ndGguXG4gKi9cblxuXG5mdW5jdGlvbiB3b3Jkc1RvTWQ1KHgsIGxlbikge1xuICAvKiBhcHBlbmQgcGFkZGluZyAqL1xuICB4W2xlbiA+PiA1XSB8PSAweDgwIDw8IGxlbiAlIDMyO1xuICB4WyhsZW4gKyA2NCA+Pj4gOSA8PCA0KSArIDE0XSA9IGxlbjtcbiAgdmFyIGk7XG4gIHZhciBvbGRhO1xuICB2YXIgb2xkYjtcbiAgdmFyIG9sZGM7XG4gIHZhciBvbGRkO1xuICB2YXIgYSA9IDE3MzI1ODQxOTM7XG4gIHZhciBiID0gLTI3MTczMzg3OTtcbiAgdmFyIGMgPSAtMTczMjU4NDE5NDtcbiAgdmFyIGQgPSAyNzE3MzM4Nzg7XG5cbiAgZm9yIChpID0gMDsgaSA8IHgubGVuZ3RoOyBpICs9IDE2KSB7XG4gICAgb2xkYSA9IGE7XG4gICAgb2xkYiA9IGI7XG4gICAgb2xkYyA9IGM7XG4gICAgb2xkZCA9IGQ7XG4gICAgYSA9IG1kNWZmKGEsIGIsIGMsIGQsIHhbaV0sIDcsIC02ODA4NzY5MzYpO1xuICAgIGQgPSBtZDVmZihkLCBhLCBiLCBjLCB4W2kgKyAxXSwgMTIsIC0zODk1NjQ1ODYpO1xuICAgIGMgPSBtZDVmZihjLCBkLCBhLCBiLCB4W2kgKyAyXSwgMTcsIDYwNjEwNTgxOSk7XG4gICAgYiA9IG1kNWZmKGIsIGMsIGQsIGEsIHhbaSArIDNdLCAyMiwgLTEwNDQ1MjUzMzApO1xuICAgIGEgPSBtZDVmZihhLCBiLCBjLCBkLCB4W2kgKyA0XSwgNywgLTE3NjQxODg5Nyk7XG4gICAgZCA9IG1kNWZmKGQsIGEsIGIsIGMsIHhbaSArIDVdLCAxMiwgMTIwMDA4MDQyNik7XG4gICAgYyA9IG1kNWZmKGMsIGQsIGEsIGIsIHhbaSArIDZdLCAxNywgLTE0NzMyMzEzNDEpO1xuICAgIGIgPSBtZDVmZihiLCBjLCBkLCBhLCB4W2kgKyA3XSwgMjIsIC00NTcwNTk4Myk7XG4gICAgYSA9IG1kNWZmKGEsIGIsIGMsIGQsIHhbaSArIDhdLCA3LCAxNzcwMDM1NDE2KTtcbiAgICBkID0gbWQ1ZmYoZCwgYSwgYiwgYywgeFtpICsgOV0sIDEyLCAtMTk1ODQxNDQxNyk7XG4gICAgYyA9IG1kNWZmKGMsIGQsIGEsIGIsIHhbaSArIDEwXSwgMTcsIC00MjA2Myk7XG4gICAgYiA9IG1kNWZmKGIsIGMsIGQsIGEsIHhbaSArIDExXSwgMjIsIC0xOTkwNDA0MTYyKTtcbiAgICBhID0gbWQ1ZmYoYSwgYiwgYywgZCwgeFtpICsgMTJdLCA3LCAxODA0NjAzNjgyKTtcbiAgICBkID0gbWQ1ZmYoZCwgYSwgYiwgYywgeFtpICsgMTNdLCAxMiwgLTQwMzQxMTAxKTtcbiAgICBjID0gbWQ1ZmYoYywgZCwgYSwgYiwgeFtpICsgMTRdLCAxNywgLTE1MDIwMDIyOTApO1xuICAgIGIgPSBtZDVmZihiLCBjLCBkLCBhLCB4W2kgKyAxNV0sIDIyLCAxMjM2NTM1MzI5KTtcbiAgICBhID0gbWQ1Z2coYSwgYiwgYywgZCwgeFtpICsgMV0sIDUsIC0xNjU3OTY1MTApO1xuICAgIGQgPSBtZDVnZyhkLCBhLCBiLCBjLCB4W2kgKyA2XSwgOSwgLTEwNjk1MDE2MzIpO1xuICAgIGMgPSBtZDVnZyhjLCBkLCBhLCBiLCB4W2kgKyAxMV0sIDE0LCA2NDM3MTc3MTMpO1xuICAgIGIgPSBtZDVnZyhiLCBjLCBkLCBhLCB4W2ldLCAyMCwgLTM3Mzg5NzMwMik7XG4gICAgYSA9IG1kNWdnKGEsIGIsIGMsIGQsIHhbaSArIDVdLCA1LCAtNzAxNTU4NjkxKTtcbiAgICBkID0gbWQ1Z2coZCwgYSwgYiwgYywgeFtpICsgMTBdLCA5LCAzODAxNjA4Myk7XG4gICAgYyA9IG1kNWdnKGMsIGQsIGEsIGIsIHhbaSArIDE1XSwgMTQsIC02NjA0NzgzMzUpO1xuICAgIGIgPSBtZDVnZyhiLCBjLCBkLCBhLCB4W2kgKyA0XSwgMjAsIC00MDU1Mzc4NDgpO1xuICAgIGEgPSBtZDVnZyhhLCBiLCBjLCBkLCB4W2kgKyA5XSwgNSwgNTY4NDQ2NDM4KTtcbiAgICBkID0gbWQ1Z2coZCwgYSwgYiwgYywgeFtpICsgMTRdLCA5LCAtMTAxOTgwMzY5MCk7XG4gICAgYyA9IG1kNWdnKGMsIGQsIGEsIGIsIHhbaSArIDNdLCAxNCwgLTE4NzM2Mzk2MSk7XG4gICAgYiA9IG1kNWdnKGIsIGMsIGQsIGEsIHhbaSArIDhdLCAyMCwgMTE2MzUzMTUwMSk7XG4gICAgYSA9IG1kNWdnKGEsIGIsIGMsIGQsIHhbaSArIDEzXSwgNSwgLTE0NDQ2ODE0NjcpO1xuICAgIGQgPSBtZDVnZyhkLCBhLCBiLCBjLCB4W2kgKyAyXSwgOSwgLTUxNDAzNzg0KTtcbiAgICBjID0gbWQ1Z2coYywgZCwgYSwgYiwgeFtpICsgN10sIDE0LCAxNzM1MzI4NDczKTtcbiAgICBiID0gbWQ1Z2coYiwgYywgZCwgYSwgeFtpICsgMTJdLCAyMCwgLTE5MjY2MDc3MzQpO1xuICAgIGEgPSBtZDVoaChhLCBiLCBjLCBkLCB4W2kgKyA1XSwgNCwgLTM3ODU1OCk7XG4gICAgZCA9IG1kNWhoKGQsIGEsIGIsIGMsIHhbaSArIDhdLCAxMSwgLTIwMjI1NzQ0NjMpO1xuICAgIGMgPSBtZDVoaChjLCBkLCBhLCBiLCB4W2kgKyAxMV0sIDE2LCAxODM5MDMwNTYyKTtcbiAgICBiID0gbWQ1aGgoYiwgYywgZCwgYSwgeFtpICsgMTRdLCAyMywgLTM1MzA5NTU2KTtcbiAgICBhID0gbWQ1aGgoYSwgYiwgYywgZCwgeFtpICsgMV0sIDQsIC0xNTMwOTkyMDYwKTtcbiAgICBkID0gbWQ1aGgoZCwgYSwgYiwgYywgeFtpICsgNF0sIDExLCAxMjcyODkzMzUzKTtcbiAgICBjID0gbWQ1aGgoYywgZCwgYSwgYiwgeFtpICsgN10sIDE2LCAtMTU1NDk3NjMyKTtcbiAgICBiID0gbWQ1aGgoYiwgYywgZCwgYSwgeFtpICsgMTBdLCAyMywgLTEwOTQ3MzA2NDApO1xuICAgIGEgPSBtZDVoaChhLCBiLCBjLCBkLCB4W2kgKyAxM10sIDQsIDY4MTI3OTE3NCk7XG4gICAgZCA9IG1kNWhoKGQsIGEsIGIsIGMsIHhbaV0sIDExLCAtMzU4NTM3MjIyKTtcbiAgICBjID0gbWQ1aGgoYywgZCwgYSwgYiwgeFtpICsgM10sIDE2LCAtNzIyNTIxOTc5KTtcbiAgICBiID0gbWQ1aGgoYiwgYywgZCwgYSwgeFtpICsgNl0sIDIzLCA3NjAyOTE4OSk7XG4gICAgYSA9IG1kNWhoKGEsIGIsIGMsIGQsIHhbaSArIDldLCA0LCAtNjQwMzY0NDg3KTtcbiAgICBkID0gbWQ1aGgoZCwgYSwgYiwgYywgeFtpICsgMTJdLCAxMSwgLTQyMTgxNTgzNSk7XG4gICAgYyA9IG1kNWhoKGMsIGQsIGEsIGIsIHhbaSArIDE1XSwgMTYsIDUzMDc0MjUyMCk7XG4gICAgYiA9IG1kNWhoKGIsIGMsIGQsIGEsIHhbaSArIDJdLCAyMywgLTk5NTMzODY1MSk7XG4gICAgYSA9IG1kNWlpKGEsIGIsIGMsIGQsIHhbaV0sIDYsIC0xOTg2MzA4NDQpO1xuICAgIGQgPSBtZDVpaShkLCBhLCBiLCBjLCB4W2kgKyA3XSwgMTAsIDExMjY4OTE0MTUpO1xuICAgIGMgPSBtZDVpaShjLCBkLCBhLCBiLCB4W2kgKyAxNF0sIDE1LCAtMTQxNjM1NDkwNSk7XG4gICAgYiA9IG1kNWlpKGIsIGMsIGQsIGEsIHhbaSArIDVdLCAyMSwgLTU3NDM0MDU1KTtcbiAgICBhID0gbWQ1aWkoYSwgYiwgYywgZCwgeFtpICsgMTJdLCA2LCAxNzAwNDg1NTcxKTtcbiAgICBkID0gbWQ1aWkoZCwgYSwgYiwgYywgeFtpICsgM10sIDEwLCAtMTg5NDk4NjYwNik7XG4gICAgYyA9IG1kNWlpKGMsIGQsIGEsIGIsIHhbaSArIDEwXSwgMTUsIC0xMDUxNTIzKTtcbiAgICBiID0gbWQ1aWkoYiwgYywgZCwgYSwgeFtpICsgMV0sIDIxLCAtMjA1NDkyMjc5OSk7XG4gICAgYSA9IG1kNWlpKGEsIGIsIGMsIGQsIHhbaSArIDhdLCA2LCAxODczMzEzMzU5KTtcbiAgICBkID0gbWQ1aWkoZCwgYSwgYiwgYywgeFtpICsgMTVdLCAxMCwgLTMwNjExNzQ0KTtcbiAgICBjID0gbWQ1aWkoYywgZCwgYSwgYiwgeFtpICsgNl0sIDE1LCAtMTU2MDE5ODM4MCk7XG4gICAgYiA9IG1kNWlpKGIsIGMsIGQsIGEsIHhbaSArIDEzXSwgMjEsIDEzMDkxNTE2NDkpO1xuICAgIGEgPSBtZDVpaShhLCBiLCBjLCBkLCB4W2kgKyA0XSwgNiwgLTE0NTUyMzA3MCk7XG4gICAgZCA9IG1kNWlpKGQsIGEsIGIsIGMsIHhbaSArIDExXSwgMTAsIC0xMTIwMjEwMzc5KTtcbiAgICBjID0gbWQ1aWkoYywgZCwgYSwgYiwgeFtpICsgMl0sIDE1LCA3MTg3ODcyNTkpO1xuICAgIGIgPSBtZDVpaShiLCBjLCBkLCBhLCB4W2kgKyA5XSwgMjEsIC0zNDM0ODU1NTEpO1xuICAgIGEgPSBzYWZlQWRkKGEsIG9sZGEpO1xuICAgIGIgPSBzYWZlQWRkKGIsIG9sZGIpO1xuICAgIGMgPSBzYWZlQWRkKGMsIG9sZGMpO1xuICAgIGQgPSBzYWZlQWRkKGQsIG9sZGQpO1xuICB9XG5cbiAgcmV0dXJuIFthLCBiLCBjLCBkXTtcbn1cbi8qXG4gKiBDb252ZXJ0IGFuIGFycmF5IGJ5dGVzIHRvIGFuIGFycmF5IG9mIGxpdHRsZS1lbmRpYW4gd29yZHNcbiAqIENoYXJhY3RlcnMgPjI1NSBoYXZlIHRoZWlyIGhpZ2gtYnl0ZSBzaWxlbnRseSBpZ25vcmVkLlxuICovXG5cblxuZnVuY3Rpb24gYnl0ZXNUb1dvcmRzKGlucHV0KSB7XG4gIHZhciBpO1xuICB2YXIgb3V0cHV0ID0gW107XG4gIG91dHB1dFsoaW5wdXQubGVuZ3RoID4+IDIpIC0gMV0gPSB1bmRlZmluZWQ7XG5cbiAgZm9yIChpID0gMDsgaSA8IG91dHB1dC5sZW5ndGg7IGkgKz0gMSkge1xuICAgIG91dHB1dFtpXSA9IDA7XG4gIH1cblxuICB2YXIgbGVuZ3RoOCA9IGlucHV0Lmxlbmd0aCAqIDg7XG5cbiAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDg7IGkgKz0gOCkge1xuICAgIG91dHB1dFtpID4+IDVdIHw9IChpbnB1dFtpIC8gOF0gJiAweGZmKSA8PCBpICUgMzI7XG4gIH1cblxuICByZXR1cm4gb3V0cHV0O1xufVxuLypcbiAqIEFkZCBpbnRlZ2Vycywgd3JhcHBpbmcgYXQgMl4zMi4gVGhpcyB1c2VzIDE2LWJpdCBvcGVyYXRpb25zIGludGVybmFsbHlcbiAqIHRvIHdvcmsgYXJvdW5kIGJ1Z3MgaW4gc29tZSBKUyBpbnRlcnByZXRlcnMuXG4gKi9cblxuXG5mdW5jdGlvbiBzYWZlQWRkKHgsIHkpIHtcbiAgdmFyIGxzdyA9ICh4ICYgMHhmZmZmKSArICh5ICYgMHhmZmZmKTtcbiAgdmFyIG1zdyA9ICh4ID4+IDE2KSArICh5ID4+IDE2KSArIChsc3cgPj4gMTYpO1xuICByZXR1cm4gbXN3IDw8IDE2IHwgbHN3ICYgMHhmZmZmO1xufVxuLypcbiAqIEJpdHdpc2Ugcm90YXRlIGEgMzItYml0IG51bWJlciB0byB0aGUgbGVmdC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGJpdFJvdGF0ZUxlZnQobnVtLCBjbnQpIHtcbiAgcmV0dXJuIG51bSA8PCBjbnQgfCBudW0gPj4+IDMyIC0gY250O1xufVxuLypcbiAqIFRoZXNlIGZ1bmN0aW9ucyBpbXBsZW1lbnQgdGhlIGZvdXIgYmFzaWMgb3BlcmF0aW9ucyB0aGUgYWxnb3JpdGhtIHVzZXMuXG4gKi9cblxuXG5mdW5jdGlvbiBtZDVjbW4ocSwgYSwgYiwgeCwgcywgdCkge1xuICByZXR1cm4gc2FmZUFkZChiaXRSb3RhdGVMZWZ0KHNhZmVBZGQoc2FmZUFkZChhLCBxKSwgc2FmZUFkZCh4LCB0KSksIHMpLCBiKTtcbn1cblxuZnVuY3Rpb24gbWQ1ZmYoYSwgYiwgYywgZCwgeCwgcywgdCkge1xuICByZXR1cm4gbWQ1Y21uKGIgJiBjIHwgfmIgJiBkLCBhLCBiLCB4LCBzLCB0KTtcbn1cblxuZnVuY3Rpb24gbWQ1Z2coYSwgYiwgYywgZCwgeCwgcywgdCkge1xuICByZXR1cm4gbWQ1Y21uKGIgJiBkIHwgYyAmIH5kLCBhLCBiLCB4LCBzLCB0KTtcbn1cblxuZnVuY3Rpb24gbWQ1aGgoYSwgYiwgYywgZCwgeCwgcywgdCkge1xuICByZXR1cm4gbWQ1Y21uKGIgXiBjIF4gZCwgYSwgYiwgeCwgcywgdCk7XG59XG5cbmZ1bmN0aW9uIG1kNWlpKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHtcbiAgcmV0dXJuIG1kNWNtbihjIF4gKGIgfCB+ZCksIGEsIGIsIHgsIHMsIHQpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtZDU7IiwiaW1wb3J0IHYzNSBmcm9tICcuL3YzNS5qcyc7XG5pbXBvcnQgbWQ1IGZyb20gJy4vbWQ1LmpzJztcbnZhciB2MyA9IHYzNSgndjMnLCAweDMwLCBtZDUpO1xuZXhwb3J0IGRlZmF1bHQgdjM7IiwiaW1wb3J0IHJuZyBmcm9tICcuL3JuZy5qcyc7XG5pbXBvcnQgYnl0ZXNUb1V1aWQgZnJvbSAnLi9ieXRlc1RvVXVpZC5qcyc7XG5cbmZ1bmN0aW9uIHY0KG9wdGlvbnMsIGJ1Ziwgb2Zmc2V0KSB7XG4gIHZhciBpID0gYnVmICYmIG9mZnNldCB8fCAwO1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PSAnc3RyaW5nJykge1xuICAgIGJ1ZiA9IG9wdGlvbnMgPT09ICdiaW5hcnknID8gbmV3IEFycmF5KDE2KSA6IG51bGw7XG4gICAgb3B0aW9ucyA9IG51bGw7XG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHJuZHMgPSBvcHRpb25zLnJhbmRvbSB8fCAob3B0aW9ucy5ybmcgfHwgcm5nKSgpOyAvLyBQZXIgNC40LCBzZXQgYml0cyBmb3IgdmVyc2lvbiBhbmQgYGNsb2NrX3NlcV9oaV9hbmRfcmVzZXJ2ZWRgXG5cbiAgcm5kc1s2XSA9IHJuZHNbNl0gJiAweDBmIHwgMHg0MDtcbiAgcm5kc1s4XSA9IHJuZHNbOF0gJiAweDNmIHwgMHg4MDsgLy8gQ29weSBieXRlcyB0byBidWZmZXIsIGlmIHByb3ZpZGVkXG5cbiAgaWYgKGJ1Zikge1xuICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCAxNjsgKytpaSkge1xuICAgICAgYnVmW2kgKyBpaV0gPSBybmRzW2lpXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnVmIHx8IGJ5dGVzVG9VdWlkKHJuZHMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB2NDsiLCIvLyBBZGFwdGVkIGZyb20gQ2hyaXMgVmVuZXNzJyBTSEExIGNvZGUgYXRcbi8vIGh0dHA6Ly93d3cubW92YWJsZS10eXBlLmNvLnVrL3NjcmlwdHMvc2hhMS5odG1sXG5mdW5jdGlvbiBmKHMsIHgsIHksIHopIHtcbiAgc3dpdGNoIChzKSB7XG4gICAgY2FzZSAwOlxuICAgICAgcmV0dXJuIHggJiB5IF4gfnggJiB6O1xuXG4gICAgY2FzZSAxOlxuICAgICAgcmV0dXJuIHggXiB5IF4gejtcblxuICAgIGNhc2UgMjpcbiAgICAgIHJldHVybiB4ICYgeSBeIHggJiB6IF4geSAmIHo7XG5cbiAgICBjYXNlIDM6XG4gICAgICByZXR1cm4geCBeIHkgXiB6O1xuICB9XG59XG5cbmZ1bmN0aW9uIFJPVEwoeCwgbikge1xuICByZXR1cm4geCA8PCBuIHwgeCA+Pj4gMzIgLSBuO1xufVxuXG5mdW5jdGlvbiBzaGExKGJ5dGVzKSB7XG4gIHZhciBLID0gWzB4NWE4Mjc5OTksIDB4NmVkOWViYTEsIDB4OGYxYmJjZGMsIDB4Y2E2MmMxZDZdO1xuICB2YXIgSCA9IFsweDY3NDUyMzAxLCAweGVmY2RhYjg5LCAweDk4YmFkY2ZlLCAweDEwMzI1NDc2LCAweGMzZDJlMWYwXTtcblxuICBpZiAodHlwZW9mIGJ5dGVzID09ICdzdHJpbmcnKSB7XG4gICAgdmFyIG1zZyA9IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChieXRlcykpOyAvLyBVVEY4IGVzY2FwZVxuXG4gICAgYnl0ZXMgPSBuZXcgQXJyYXkobXNnLmxlbmd0aCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7IGkrKykge1xuICAgICAgYnl0ZXNbaV0gPSBtc2cuY2hhckNvZGVBdChpKTtcbiAgICB9XG4gIH1cblxuICBieXRlcy5wdXNoKDB4ODApO1xuICB2YXIgbCA9IGJ5dGVzLmxlbmd0aCAvIDQgKyAyO1xuICB2YXIgTiA9IE1hdGguY2VpbChsIC8gMTYpO1xuICB2YXIgTSA9IG5ldyBBcnJheShOKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgIE1baV0gPSBuZXcgQXJyYXkoMTYpO1xuXG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCAxNjsgaisrKSB7XG4gICAgICBNW2ldW2pdID0gYnl0ZXNbaSAqIDY0ICsgaiAqIDRdIDw8IDI0IHwgYnl0ZXNbaSAqIDY0ICsgaiAqIDQgKyAxXSA8PCAxNiB8IGJ5dGVzW2kgKiA2NCArIGogKiA0ICsgMl0gPDwgOCB8IGJ5dGVzW2kgKiA2NCArIGogKiA0ICsgM107XG4gICAgfVxuICB9XG5cbiAgTVtOIC0gMV1bMTRdID0gKGJ5dGVzLmxlbmd0aCAtIDEpICogOCAvIE1hdGgucG93KDIsIDMyKTtcbiAgTVtOIC0gMV1bMTRdID0gTWF0aC5mbG9vcihNW04gLSAxXVsxNF0pO1xuICBNW04gLSAxXVsxNV0gPSAoYnl0ZXMubGVuZ3RoIC0gMSkgKiA4ICYgMHhmZmZmZmZmZjtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IE47IGkrKykge1xuICAgIHZhciBXID0gbmV3IEFycmF5KDgwKTtcblxuICAgIGZvciAodmFyIHQgPSAwOyB0IDwgMTY7IHQrKykge1xuICAgICAgV1t0XSA9IE1baV1bdF07XG4gICAgfVxuXG4gICAgZm9yICh2YXIgdCA9IDE2OyB0IDwgODA7IHQrKykge1xuICAgICAgV1t0XSA9IFJPVEwoV1t0IC0gM10gXiBXW3QgLSA4XSBeIFdbdCAtIDE0XSBeIFdbdCAtIDE2XSwgMSk7XG4gICAgfVxuXG4gICAgdmFyIGEgPSBIWzBdO1xuICAgIHZhciBiID0gSFsxXTtcbiAgICB2YXIgYyA9IEhbMl07XG4gICAgdmFyIGQgPSBIWzNdO1xuICAgIHZhciBlID0gSFs0XTtcblxuICAgIGZvciAodmFyIHQgPSAwOyB0IDwgODA7IHQrKykge1xuICAgICAgdmFyIHMgPSBNYXRoLmZsb29yKHQgLyAyMCk7XG4gICAgICB2YXIgVCA9IFJPVEwoYSwgNSkgKyBmKHMsIGIsIGMsIGQpICsgZSArIEtbc10gKyBXW3RdID4+PiAwO1xuICAgICAgZSA9IGQ7XG4gICAgICBkID0gYztcbiAgICAgIGMgPSBST1RMKGIsIDMwKSA+Pj4gMDtcbiAgICAgIGIgPSBhO1xuICAgICAgYSA9IFQ7XG4gICAgfVxuXG4gICAgSFswXSA9IEhbMF0gKyBhID4+PiAwO1xuICAgIEhbMV0gPSBIWzFdICsgYiA+Pj4gMDtcbiAgICBIWzJdID0gSFsyXSArIGMgPj4+IDA7XG4gICAgSFszXSA9IEhbM10gKyBkID4+PiAwO1xuICAgIEhbNF0gPSBIWzRdICsgZSA+Pj4gMDtcbiAgfVxuXG4gIHJldHVybiBbSFswXSA+PiAyNCAmIDB4ZmYsIEhbMF0gPj4gMTYgJiAweGZmLCBIWzBdID4+IDggJiAweGZmLCBIWzBdICYgMHhmZiwgSFsxXSA+PiAyNCAmIDB4ZmYsIEhbMV0gPj4gMTYgJiAweGZmLCBIWzFdID4+IDggJiAweGZmLCBIWzFdICYgMHhmZiwgSFsyXSA+PiAyNCAmIDB4ZmYsIEhbMl0gPj4gMTYgJiAweGZmLCBIWzJdID4+IDggJiAweGZmLCBIWzJdICYgMHhmZiwgSFszXSA+PiAyNCAmIDB4ZmYsIEhbM10gPj4gMTYgJiAweGZmLCBIWzNdID4+IDggJiAweGZmLCBIWzNdICYgMHhmZiwgSFs0XSA+PiAyNCAmIDB4ZmYsIEhbNF0gPj4gMTYgJiAweGZmLCBIWzRdID4+IDggJiAweGZmLCBIWzRdICYgMHhmZl07XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNoYTE7IiwiaW1wb3J0IHYzNSBmcm9tICcuL3YzNS5qcyc7XG5pbXBvcnQgc2hhMSBmcm9tICcuL3NoYTEuanMnO1xudmFyIHY1ID0gdjM1KCd2NScsIDB4NTAsIHNoYTEpO1xuZXhwb3J0IGRlZmF1bHQgdjU7Il0sInNvdXJjZVJvb3QiOiIifQ==